!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=223)}([function(e,t,n){"use strict";e.exports=n(164)},function(e,t,n){"use strict";function r(){return(r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";e.exports=n(168)},function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"c",(function(){return l}));var r=n(71),o=n(42),a=n(26);const i=e=>Object(r.b)(e)&&"classes"!==e,l=r.b,c=Object(r.a)({themeId:a.a,defaultTheme:o.a,rootShouldForwardProp:i});t.a=c},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(e){var r=n(84);const{toString:o}=Object.prototype,{getPrototypeOf:a}=Object,i=(l=Object.create(null),e=>{const t=o.call(e);return l[t]||(l[t]=t.slice(8,-1).toLowerCase())});var l;const c=e=>(e=e.toLowerCase(),t=>i(t)===e),s=e=>t=>typeof t===e,{isArray:u}=Array,d=s("undefined");const f=c("ArrayBuffer");const p=s("string"),h=s("function"),m=s("number"),b=e=>null!==e&&"object"==typeof e,v=e=>{if("object"!==i(e))return!1;const t=a(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},g=c("Date"),y=c("File"),x=c("Blob"),O=c("FileList"),w=c("URLSearchParams");function j(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),u(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),a=o.length;let i;for(r=0;r<a;r++)i=o[r],t.call(null,e[i],i,e)}}function E(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const S="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:e,A=e=>!d(e)&&e!==S;const k=(C="undefined"!=typeof Uint8Array&&a(Uint8Array),e=>C&&e instanceof C);var C;const T=c("HTMLFormElement"),P=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),R=c("RegExp"),_=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};j(n,(n,o)=>{let a;!1!==(a=t(n,o,e))&&(r[o]=a||n)}),Object.defineProperties(e,r)},L="abcdefghijklmnopqrstuvwxyz",N={DIGIT:"0123456789",ALPHA:L,ALPHA_DIGIT:L+L.toUpperCase()+"0123456789"};const M=c("AsyncFunction");t.a={isArray:u,isArrayBuffer:f,isBuffer:function(e){return null!==e&&!d(e)&&null!==e.constructor&&!d(e.constructor)&&h(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||h(e.append)&&("formdata"===(t=i(e))||"object"===t&&h(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&f(e.buffer),t},isString:p,isNumber:m,isBoolean:e=>!0===e||!1===e,isObject:b,isPlainObject:v,isUndefined:d,isDate:g,isFile:y,isBlob:x,isRegExp:R,isFunction:h,isStream:e=>b(e)&&h(e.pipe),isURLSearchParams:w,isTypedArray:k,isFileList:O,forEach:j,merge:function e(){const{caseless:t}=A(this)&&this||{},n={},r=(r,o)=>{const a=t&&E(n,o)||o;v(n[a])&&v(r)?n[a]=e(n[a],r):v(r)?n[a]=e({},r):u(r)?n[a]=r.slice():n[a]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&j(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:o}={})=>(j(t,(t,o)=>{n&&h(t)?e[o]=Object(r.a)(t,n):e[o]=t},{allOwnKeys:o}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,i,l;const c={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),i=o.length;i-- >0;)l=o[i],r&&!r(l,e,t)||c[l]||(t[l]=e[l],c[l]=!0);e=!1!==n&&a(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:i,kindOfTest:c,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(u(e))return e;let t=e.length;if(!m(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:T,hasOwnProperty:P,hasOwnProp:P,reduceDescriptors:_,freezeMethods:e=>{_(e,(t,n)=>{if(h(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];h(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))})},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach(e=>{n[e]=!0})};return u(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:E,global:S,isContextDefined:A,ALPHABET:N,generateString:(e=16,t=N.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&h(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(b(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=u(e)?[]:{};return j(e,(e,t)=>{const a=n(e,r+1);!d(a)&&(o[t]=a)}),t[r]=void 0,o}}return e};return n(e,0)},isAsyncFn:M,isThenable:e=>e&&(b(e)||h(e))&&h(e.then)&&h(e.catch)}}).call(this,n(97))},function(e,t,n){"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e)){var a=e.length;for(t=0;t<a;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n)}else for(n in e)e[n]&&(o&&(o+=" "),o+=n);return o}t.a=function(){for(var e,t,n=0,o="",a=arguments.length;n<a;n++)(e=arguments[n])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}},function(e,t,n){"use strict";var r=n(113);t.a=r.a},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(233),o=n(42),a=n(26);function i({props:e,name:t}){return Object(r.a)({props:e,name:t,defaultTheme:o.a,themeId:a.a})}},function(e,t,n){e.exports=n(176)()},,function(e,t,n){"use strict";n.d(t,"b",(function(){return p})),n.d(t,"a",(function(){return h})),n.d(t,"c",(function(){return m})),n.d(t,"d",(function(){return g})),n.d(t,"e",(function(){return y}));var r=n(20),o=n(16),a=n(34);const i={m:"margin",p:"padding"},l={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},c={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},s=function(e){const t={};return n=>(void 0===t[n]&&(t[n]=e(n)),t[n])}(e=>{if(e.length>2){if(!c[e])return[e];e=c[e]}const[t,n]=e.split(""),r=i[t],o=l[n]||"";return Array.isArray(o)?o.map(e=>r+e):[r+o]}),u=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],d=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],f=[...u,...d];function p(e,t,n,r){var a;const i=null!=(a=Object(o.b)(e,t,!1))?a:n;return"number"==typeof i?e=>"string"==typeof e?e:i*e:Array.isArray(i)?e=>"string"==typeof e?e:i[e]:"function"==typeof i?i:()=>{}}function h(e){return p(e,"spacing",8)}function m(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-"+n}function b(e,t,n,o){if(-1===t.indexOf(n))return null;const a=function(e,t){return n=>e.reduce((e,r)=>(e[r]=m(t,n),e),{})}(s(n),o),i=e[n];return Object(r.b)(e,i,a)}function v(e,t){const n=h(e.theme);return Object.keys(e).map(r=>b(e,t,r,n)).reduce(a.a,{})}function g(e){return v(e,u)}function y(e){return v(e,d)}function x(e){return v(e,f)}g.propTypes={},g.filterProps=u,y.propTypes={},y.filterProps=d,x.propTypes={},x.filterProps=f},,,,function(e,t,n){"use strict";var r=n(5);function o(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}r.a.inherits(o,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:r.a.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const a=o.prototype,i={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{i[e]={value:e}}),Object.defineProperties(o,i),Object.defineProperty(a,"isAxiosError",{value:!0}),o.from=(e,t,n,i,l,c)=>{const s=Object.create(a);return r.a.toFlatObject(e,s,(function(e){return e!==Error.prototype}),e=>"isAxiosError"!==e),o.call(s,e.message,t,n,i,l),s.cause=e,s.name=e.name,c&&Object.assign(s,c),s},t.a=o},function(e,t,n){"use strict";n.d(t,"b",(function(){return a})),n.d(t,"c",(function(){return i}));var r=n(113),o=n(20);function a(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=("vars."+t).split(".").reduce((e,t)=>e&&e[t]?e[t]:null,e);if(null!=n)return n}return t.split(".").reduce((e,t)=>e&&null!=e[t]?e[t]:null,e)}function i(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:a(e,n)||r,t&&(o=t(o,r,e)),o}t.a=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:l,transform:c}=e,s=e=>{if(null==e[t])return null;const s=e[t],u=a(e.theme,l)||{};return Object(o.b)(e,s,e=>{let o=i(u,c,e);return e===o&&"string"==typeof e&&(o=i(u,c,`${t}${"default"===e?"":Object(r.a)(e)}`,e)),!1===n?o:{[n]:o}})};return s.propTypes={},s.filterProps=[t],s}},function(e,t,n){"use strict";var r=n(227);t.a=r.a},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(101)},function(e,t,n){"use strict";n.d(t,"f",(function(){return o})),n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return l})),n.d(t,"d",(function(){return c})),n.d(t,"c",(function(){return s})),n.d(t,"e",(function(){return u}));n(1);var r=n(147);n(34);const o={xs:0,sm:600,md:900,lg:1200,xl:1536},a={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${o[e]}px)`};function i(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||a;return t.reduce((r,o,a)=>(r[e.up(e.keys[a])]=n(t[a]),r),{})}if("object"==typeof t){const e=r.breakpoints||a;return Object.keys(t).reduce((r,a)=>{if(-1!==Object.keys(e.values||o).indexOf(a)){r[e.up(a)]=n(t[a],a)}else{const e=a;r[e]=t[e]}return r},{})}return n(t)}function l(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce((t,n)=>(t[e.up(n)]={},t),{}))||{}}function c(e,t){return e.reduce((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e},t)}function s(e,...t){const n=l(e),o=[n,...t].reduce((e,t)=>Object(r.a)(e,t),{});return c(Object.keys(n),o)}function u({values:e,breakpoints:t,base:n}){const r=n||function(e,t){if("object"!=typeof e)return{};const n={},r=Object.keys(t);return Array.isArray(e)?r.forEach((t,r)=>{r<e.length&&(n[t]=!0)}):r.forEach(t=>{null!=e[t]&&(n[t]=!0)}),n}(e,t),o=Object.keys(r);if(0===o.length)return e;let a;return o.reduce((t,n,r)=>(Array.isArray(e)?(t[n]=null!=e[r]?e[r]:e[a],a=r):"object"==typeof e?(t[n]=null!=e[n]?e[n]:e[a],a=n):t[n]=e,t),{})}},function(e,t,n){"use strict";n.d(t,"a",(function(){return y}));var r=n(1),o=n(0),a=n(4),i=n(6),l=n(268),c=n(7),s=n(8),u=n(3),d=n(269),f=n(224);function p(e){return Object(f.a)("MuiSvgIcon",e)}Object(d.a)("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);var h=n(2);const m=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],b=Object(u.a)("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t["color"+Object(c.a)(n.color)],t["fontSize"+Object(c.a)(n.fontSize)]]}})(({theme:e,ownerState:t})=>{var n,r,o,a,i,l,c,s,u,d,f,p,h;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:t.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(r=n.create)?void 0:r.call(n,"fill",{duration:null==(o=e.transitions)||null==(o=o.duration)?void 0:o.shorter}),fontSize:{inherit:"inherit",small:(null==(a=e.typography)||null==(i=a.pxToRem)?void 0:i.call(a,20))||"1.25rem",medium:(null==(l=e.typography)||null==(c=l.pxToRem)?void 0:c.call(l,24))||"1.5rem",large:(null==(s=e.typography)||null==(u=s.pxToRem)?void 0:u.call(s,35))||"2.1875rem"}[t.fontSize],color:null!=(d=null==(f=(e.vars||e).palette)||null==(f=f[t.color])?void 0:f.main)?d:{action:null==(p=(e.vars||e).palette)||null==(p=p.action)?void 0:p.active,disabled:null==(h=(e.vars||e).palette)||null==(h=h.action)?void 0:h.disabled,inherit:void 0}[t.color]}}),v=o.forwardRef((function(e,t){const n=Object(s.a)({props:e,name:"MuiSvgIcon"}),{children:u,className:d,color:f="inherit",component:v="svg",fontSize:g="medium",htmlColor:y,inheritViewBox:x=!1,titleAccess:O,viewBox:w="0 0 24 24"}=n,j=Object(a.a)(n,m),E=o.isValidElement(u)&&"svg"===u.type,S=Object(r.a)({},n,{color:f,component:v,fontSize:g,instanceFontSize:e.fontSize,inheritViewBox:x,viewBox:w,hasSvgAsChild:E}),A={};x||(A.viewBox=w);const k=(e=>{const{color:t,fontSize:n,classes:r}=e,o={root:["root","inherit"!==t&&"color"+Object(c.a)(t),"fontSize"+Object(c.a)(n)]};return Object(l.a)(o,p,r)})(S);return Object(h.jsxs)(b,Object(r.a)({as:v,className:Object(i.a)(k.root,d),focusable:"false",color:y,"aria-hidden":!O||void 0,role:O?"img":void 0,ref:t},A,j,E&&u.props,{ownerState:S,children:[E?u.props.children:u,O?Object(h.jsx)("title",{children:O}):null]}))}));v.muiName="SvgIcon";var g=v;function y(e,t){function n(n,o){return Object(h.jsx)(g,Object(r.a)({"data-testid":t+"Icon",ref:o},n,{children:e}))}return n.muiName=g.muiName,o.memo(o.forwardRef(n))}},,,function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return f})),n.d(t,"c",(function(){return h})),n.d(t,"d",(function(){return s})),n.d(t,"e",(function(){return c})),n.d(t,"f",(function(){return d}));var r=n(0),o=n(90),a=(n(1),n(68),n(104),n(25)),i=n(39),l=n(38),c=!0,s={}.hasOwnProperty,u=r.createContext("undefined"!=typeof HTMLElement?Object(o.a)({key:"css"}):null);u.Provider;var d=function(e){return Object(r.forwardRef)((function(t,n){var o=Object(r.useContext)(u);return e(t,o,n)}))};c||(d=function(e){return function(t){var n=Object(r.useContext)(u);return null===n?(n=Object(o.a)({key:"css"}),r.createElement(u.Provider,{value:n},e(t,n))):e(t,n)}});var f=r.createContext({});var p="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",h=function(e,t){var n={};for(var r in t)s.call(t,r)&&(n[r]=t[r]);return n[p]=e,n},m=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return Object(a.c)(t,n,r),Object(l.a)((function(){return Object(a.b)(t,n,r)})),null};var b=d((function(e,t,n){var o=e.css;"string"==typeof o&&void 0!==t.registered[o]&&(o=t.registered[o]);var l=e[p],c=[o],u="";"string"==typeof e.className?u=Object(a.a)(t.registered,c,e.className):null!=e.className&&(u=e.className+" ");var d=Object(i.a)(c,void 0,r.useContext(f));u+=t.key+"-"+d.name;var h={};for(var b in e)s.call(e,b)&&"css"!==b&&b!==p&&(h[b]=e[b]);return h.ref=n,h.className=u,r.createElement(r.Fragment,null,r.createElement(m,{cache:t,serialized:d,isStringTag:"string"==typeof l}),r.createElement(l,h))}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return a})),n.d(t,"c",(function(){return o}));function r(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}var o=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},a=function(e,t,n){o(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var a=t;do{e.insert(t===a?"."+r:"",a,e.sheet,!0),a=a.next}while(void 0!==a)}}},function(e,t,n){"use strict";t.a="$$material"},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(165)},,,function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){"use strict";var r=n(148);t.a=r.a},function(e,t,n){"use strict";var r=n(149);t.a=r.a},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14"}),"Search")},function(e,t,n){"use strict";var r=n(147);t.a=function(e,t){return t?Object(r.a)(e,t,{clone:!1}):e}},,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return i}));var r=n(0),o=!!r.useInsertionEffect&&r.useInsertionEffect,a=o||function(e){return e()},i=o||r.useLayoutEffect},function(e,t,n){"use strict";n.d(t,"a",(function(){return h}));var r={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},o=n(67),a=/[A-Z]|^ms/g,i=/_EMO_([^_]+?)_([^]*?)_EMO_/g,l=function(e){return 45===e.charCodeAt(1)},c=function(e){return null!=e&&"boolean"!=typeof e},s=Object(o.a)((function(e){return l(e)?e:e.replace(a,"-$&").toLowerCase()})),u=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(i,(function(e,t,n){return f={name:t,styles:n,next:f},t}))}return 1===r[e]||l(e)||"number"!=typeof t||0===t?t:t+"px"};function d(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return f={name:n.name,styles:n.styles,next:f},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)f={name:r.name,styles:r.styles,next:f},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=d(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=a+"{"+t[i]+"}":c(i)&&(r+=s(a)+":"+u(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var l=d(e,t,i);switch(a){case"animation":case"animationName":r+=s(a)+":"+l+";";break;default:r+=a+"{"+l+"}"}}else for(var f=0;f<i.length;f++)c(i[f])&&(r+=s(a)+":"+u(a,i[f])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=f,a=n(e);return f=o,d(e,t,a)}break;case"string":}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var f,p=/label:\s*([^\s;\n{]+)\s*(;|$)/g;var h=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";f=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=d(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=d(n,t,e[i]),r&&(o+=a[i]);p.lastIndex=0;for(var l,c="";null!==(l=p.exec(o));)c+="-"+l[1];return{name:function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(o)+c,styles:o,next:f}}},,function(e,t,n){"use strict";n.d(t,"a",(function(){return g})),n.d(t,"b",(function(){return y}));var r=n(1),o=n(0),a=n(67),i=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,l=Object(a.a)((function(e){return i.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),c=n(24),s=n(25),u=n(39),d=n(38),f=l,p=function(e){return"theme"!==e},h=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?f:p},m=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},b=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return Object(s.c)(t,n,r),Object(d.a)((function(){return Object(s.b)(t,n,r)})),null},v=(n(119),function e(t,n){var a,i,l=t.__emotion_real===t,d=l&&t.__emotion_base||t;void 0!==n&&(a=n.label,i=n.target);var f=m(t,n,l),p=f||h(d),v=!p("as");return function(){var g=arguments,y=l&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==a&&y.push("label:"+a+";"),null==g[0]||void 0===g[0].raw)y.push.apply(y,g);else{0,y.push(g[0][0]);for(var x=g.length,O=1;O<x;O++)y.push(g[O],g[0][O])}var w=Object(c.f)((function(e,t,n){var r=v&&e.as||d,a="",l=[],m=e;if(null==e.theme){for(var g in m={},e)m[g]=e[g];m.theme=o.useContext(c.b)}"string"==typeof e.className?a=Object(s.a)(t.registered,l,e.className):null!=e.className&&(a=e.className+" ");var x=Object(u.a)(y.concat(l),t.registered,m);a+=t.key+"-"+x.name,void 0!==i&&(a+=" "+i);var O=v&&void 0===f?h(r):p,w={};for(var j in e)v&&"as"===j||O(j)&&(w[j]=e[j]);return w.className=a,w.ref=n,o.createElement(o.Fragment,null,o.createElement(b,{cache:t,serialized:x,isStringTag:"string"==typeof r}),o.createElement(r,w))}));return w.displayName=void 0!==a?a:"Styled("+("string"==typeof d?d:d.displayName||d.name||"Component")+")",w.defaultProps=t.defaultProps,w.__emotion_real=w,w.__emotion_base=d,w.__emotion_styles=y,w.__emotion_forwardProp=f,Object.defineProperty(w,"toString",{value:function(){return"."+i}}),w.withComponent=function(t,o){return e(t,Object(r.a)({},n,o,{shouldForwardProp:m(w,o,!0)})).apply(void 0,y)},w}}.bind());function g(e,t){return v(e,t)}["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){v[e]=v(e)}));const y=(e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))}},function(e,t,n){"use strict";var r=n(145);const o=Object(r.a)();t.a=o},function(e,t,n){"use strict";(function(e){var r=n(5),o=n(15),a=n(85);function i(e){return r.a.isPlainObject(e)||r.a.isArray(e)}function l(e){return r.a.endsWith(e,"[]")?e.slice(0,-2):e}function c(e,t,n){return e?e.concat(t).map((function(e,t){return e=l(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const s=r.a.toFlatObject(r.a,{},null,(function(e){return/^is[A-Z]/.test(e)}));t.a=function(t,n,u){if(!r.a.isObject(t))throw new TypeError("target must be an object");n=n||new(a.a||FormData);const d=(u=r.a.toFlatObject(u,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!r.a.isUndefined(t[e])}))).metaTokens,f=u.visitor||v,p=u.dots,h=u.indexes,m=(u.Blob||"undefined"!=typeof Blob&&Blob)&&r.a.isSpecCompliantForm(n);if(!r.a.isFunction(f))throw new TypeError("visitor must be a function");function b(t){if(null===t)return"";if(r.a.isDate(t))return t.toISOString();if(!m&&r.a.isBlob(t))throw new o.a("Blob is not supported. Use a Buffer instead.");return r.a.isArrayBuffer(t)||r.a.isTypedArray(t)?m&&"function"==typeof Blob?new Blob([t]):e.from(t):t}function v(e,t,o){let a=e;if(e&&!o&&"object"==typeof e)if(r.a.endsWith(t,"{}"))t=d?t:t.slice(0,-2),e=JSON.stringify(e);else if(r.a.isArray(e)&&function(e){return r.a.isArray(e)&&!e.some(i)}(e)||(r.a.isFileList(e)||r.a.endsWith(t,"[]"))&&(a=r.a.toArray(e)))return t=l(t),a.forEach((function(e,o){!r.a.isUndefined(e)&&null!==e&&n.append(!0===h?c([t],o,p):null===h?t:t+"[]",b(e))})),!1;return!!i(e)||(n.append(c(o,t,p),b(e)),!1)}const g=[],y=Object.assign(s,{defaultVisitor:v,convertValue:b,isVisitable:i});if(!r.a.isObject(t))throw new TypeError("data must be an object");return function e(t,o){if(!r.a.isUndefined(t)){if(-1!==g.indexOf(t))throw Error("Circular reference detected in "+o.join("."));g.push(t),r.a.forEach(t,(function(t,a){!0===(!(r.a.isUndefined(t)||null===t)&&f.call(n,t,r.a.isString(a)?a.trim():a,o,y))&&e(t,o?o.concat(a):[a])})),g.pop()}}(t),n}}).call(this,n(171).Buffer)},,,,function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return s})),n.d(t,"c",(function(){return u}));var r=n(24),o=n(0),a=n(25),i=n(38),l=n(39),c=(n(90),n(119),n(68),n(105),Object(r.f)((function(e,t){var n=e.styles,c=Object(l.a)([n],void 0,o.useContext(r.b));if(!r.e){for(var s,u=c.name,d=c.styles,f=c.next;void 0!==f;)u+=" "+f.name,d+=f.styles,f=f.next;var p=!0===t.compat,h=t.insert("",{name:u,styles:d},t.sheet,p);return p?null:o.createElement("style",((s={})["data-emotion"]=t.key+"-global "+u,s.dangerouslySetInnerHTML={__html:h},s.nonce=t.sheet.nonce,s))}var m=o.useRef();return Object(i.b)((function(){var e=t.key+"-global",n=new t.sheet.constructor({key:e,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),r=!1,o=document.querySelector('style[data-emotion="'+e+" "+c.name+'"]');return t.sheet.tags.length&&(n.before=t.sheet.tags[0]),null!==o&&(r=!0,o.setAttribute("data-emotion",e),n.hydrate([o])),m.current=[n,r],function(){n.flush()}}),[t]),Object(i.b)((function(){var e=m.current,n=e[0];if(e[1])e[1]=!1;else{if(void 0!==c.next&&Object(a.b)(t,c.next,!0),n.tags.length){var r=n.tags[n.tags.length-1].nextElementSibling;n.before=r,n.flush()}t.insert("",c,n,!1)}}),[t,c.name]),null})));function s(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Object(l.a)(t)}var u=function(){var e=s.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}},function(e,t,n){"use strict";var r=n(0);t.a=function({controlled:e,default:t,name:n,state:o="value"}){const{current:a}=r.useRef(void 0!==e),[i,l]=r.useState(t);return[a?e:i,r.useCallback(e=>{a||l(e)},[])]}},function(e,t,n){"use strict";var r=n(229);t.a=r.a},function(e,t,n){"use strict";t.a={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"}},,,,,function(e,t,n){"use strict";var r=n(230);t.a=r.a},function(e,t,n){"use strict";var r=n(0),o=n(146);let a=!0,i=!1;const l=new o.a,c={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function s(e){e.metaKey||e.altKey||e.ctrlKey||(a=!0)}function u(){a=!1}function d(){"hidden"===this.visibilityState&&i&&(a=!0)}function f(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return a||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!c[t]||e.readOnly)||("TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable)}(t)}t.a=function(){const e=r.useCallback(e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",s,!0),t.addEventListener("mousedown",u,!0),t.addEventListener("pointerdown",u,!0),t.addEventListener("touchstart",u,!0),t.addEventListener("visibilitychange",d,!0))},[]),t=r.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!f(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(i=!0,l.start(100,()=>{i=!1}),t.current=!1,!0)},ref:e}}},function(e,t,n){"use strict";var r=n(232),o=n(83);const a=Object(r.a)();t.a=function(e=a){return Object(o.a)(e)}},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"}),"ExpandMore")},function(e,t,n){"use strict";var r=n(11),o=n(16),a=n(34);var i=function(...e){const t=e.reduce((e,t)=>(t.filterProps.forEach(n=>{e[n]=t}),e),{}),n=e=>Object.keys(e).reduce((n,r)=>t[r]?Object(a.a)(n,t[r](e)):n,{});return n.propTypes={},n.filterProps=e.reduce((e,t)=>e.concat(t.filterProps),[]),n},l=n(20);function c(e){return"number"!=typeof e?e:e+"px solid"}function s(e,t){return Object(o.a)({prop:e,themeKey:"borders",transform:t})}const u=s("border",c),d=s("borderTop",c),f=s("borderRight",c),p=s("borderBottom",c),h=s("borderLeft",c),m=s("borderColor"),b=s("borderTopColor"),v=s("borderRightColor"),g=s("borderBottomColor"),y=s("borderLeftColor"),x=s("outline",c),O=s("outlineColor"),w=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=Object(r.b)(e.theme,"shape.borderRadius",4,"borderRadius"),n=e=>({borderRadius:Object(r.c)(t,e)});return Object(l.b)(e,e.borderRadius,n)}return null};w.propTypes={},w.filterProps=["borderRadius"];i(u,d,f,p,h,m,b,v,g,y,w,x,O);const j=e=>{if(void 0!==e.gap&&null!==e.gap){const t=Object(r.b)(e.theme,"spacing",8,"gap"),n=e=>({gap:Object(r.c)(t,e)});return Object(l.b)(e,e.gap,n)}return null};j.propTypes={},j.filterProps=["gap"];const E=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=Object(r.b)(e.theme,"spacing",8,"columnGap"),n=e=>({columnGap:Object(r.c)(t,e)});return Object(l.b)(e,e.columnGap,n)}return null};E.propTypes={},E.filterProps=["columnGap"];const S=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=Object(r.b)(e.theme,"spacing",8,"rowGap"),n=e=>({rowGap:Object(r.c)(t,e)});return Object(l.b)(e,e.rowGap,n)}return null};S.propTypes={},S.filterProps=["rowGap"];i(j,E,S,Object(o.a)({prop:"gridColumn"}),Object(o.a)({prop:"gridRow"}),Object(o.a)({prop:"gridAutoFlow"}),Object(o.a)({prop:"gridAutoColumns"}),Object(o.a)({prop:"gridAutoRows"}),Object(o.a)({prop:"gridTemplateColumns"}),Object(o.a)({prop:"gridTemplateRows"}),Object(o.a)({prop:"gridTemplateAreas"}),Object(o.a)({prop:"gridArea"}));function A(e,t){return"grey"===t?t:e}i(Object(o.a)({prop:"color",themeKey:"palette",transform:A}),Object(o.a)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:A}),Object(o.a)({prop:"backgroundColor",themeKey:"palette",transform:A}));function k(e){return e<=1&&0!==e?100*e+"%":e}const C=Object(o.a)({prop:"width",transform:k}),T=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r;const o=(null==(n=e.theme)||null==(n=n.breakpoints)||null==(n=n.values)?void 0:n[t])||l.f[t];return o?"px"!==(null==(r=e.theme)||null==(r=r.breakpoints)?void 0:r.unit)?{maxWidth:`${o}${e.theme.breakpoints.unit}`}:{maxWidth:o}:{maxWidth:k(t)}};return Object(l.b)(e,e.maxWidth,t)}return null};T.filterProps=["maxWidth"];const P=Object(o.a)({prop:"minWidth",transform:k}),R=Object(o.a)({prop:"height",transform:k}),_=Object(o.a)({prop:"maxHeight",transform:k}),L=Object(o.a)({prop:"minHeight",transform:k});Object(o.a)({prop:"size",cssProperty:"width",transform:k}),Object(o.a)({prop:"size",cssProperty:"height",transform:k});i(C,T,P,R,_,L,Object(o.a)({prop:"boxSizing"}));const N={border:{themeKey:"borders",transform:c},borderTop:{themeKey:"borders",transform:c},borderRight:{themeKey:"borders",transform:c},borderBottom:{themeKey:"borders",transform:c},borderLeft:{themeKey:"borders",transform:c},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:c},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:w},color:{themeKey:"palette",transform:A},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:A},backgroundColor:{themeKey:"palette",transform:A},p:{style:r.e},pt:{style:r.e},pr:{style:r.e},pb:{style:r.e},pl:{style:r.e},px:{style:r.e},py:{style:r.e},padding:{style:r.e},paddingTop:{style:r.e},paddingRight:{style:r.e},paddingBottom:{style:r.e},paddingLeft:{style:r.e},paddingX:{style:r.e},paddingY:{style:r.e},paddingInline:{style:r.e},paddingInlineStart:{style:r.e},paddingInlineEnd:{style:r.e},paddingBlock:{style:r.e},paddingBlockStart:{style:r.e},paddingBlockEnd:{style:r.e},m:{style:r.d},mt:{style:r.d},mr:{style:r.d},mb:{style:r.d},ml:{style:r.d},mx:{style:r.d},my:{style:r.d},margin:{style:r.d},marginTop:{style:r.d},marginRight:{style:r.d},marginBottom:{style:r.d},marginLeft:{style:r.d},marginX:{style:r.d},marginY:{style:r.d},marginInline:{style:r.d},marginInlineStart:{style:r.d},marginInlineEnd:{style:r.d},marginBlock:{style:r.d},marginBlockStart:{style:r.d},marginBlockEnd:{style:r.d},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:j},rowGap:{style:S},columnGap:{style:E},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:k},maxWidth:{style:T},minWidth:{transform:k},height:{transform:k},maxHeight:{transform:k},minHeight:{transform:k},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}};t.a=N},function(e,t,n){"use strict";var r=n(0);t.a=function(e,t){var n,o;return r.isValidElement(e)&&-1!==t.indexOf(null!=(n=e.type.muiName)?n:null==(o=e.type)||null==(o=o._payload)||null==(o=o.value)?void 0:o.muiName)}},function(e,t,n){var r=n(77),o=n(78),a=n(100);e.exports=function(e){return"string"==typeof e||!o(e)&&a(e)&&"[object String]"==r(e)}},function(e,t,n){var r=n(187);e.exports=function(e,t,n){var o=null==e?void 0:r(e,t);return void 0===o?n:o}},function(e,t){e.exports=function(e){return null==e}},,,,function(e,t,n){"use strict";function r(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var r=function(e){var t=new WeakMap;return function(n){if(t.has(n))return t.get(n);var r=e(n);return t.set(n,r),r}}},function(e,t,n){"use strict";var r=n(231);t.a=r.a},function(e,t,n){"use strict";e.exports=n(186)},function(e,t,n){"use strict";n.d(t,"b",(function(){return b})),n.d(t,"a",(function(){return w}));var r=n(4),o=n(1),a=n(41),i=n(147),l=n(232),c=n(113);const s=["variant"];function u(e){return 0===e.length}function d(e){const{variant:t}=e,n=Object(r.a)(e,s);let o=t||"";return Object.keys(n).sort().forEach(t=>{o+="color"===t?u(o)?e[t]:Object(c.a)(e[t]):`${u(o)?t:Object(c.a)(t)}${Object(c.a)(e[t].toString())}`}),o}var f=n(121);const p=["name","slot","skipVariantsResolver","skipSx","overridesResolver"];const h=e=>{let t=0;const n={};return e&&e.forEach(e=>{let r="";"function"==typeof e.props?(r="callback"+t,t+=1):r=d(e.props),n[r]=e.style}),n},m=(e,t,n)=>{const{ownerState:r={}}=e,a=[];let i=0;return n&&n.forEach(n=>{let l=!0;if("function"==typeof n.props){const t=Object(o.a)({},e,r);l=n.props(t)}else Object.keys(n.props).forEach(t=>{r[t]!==n.props[t]&&e[t]!==n.props[t]&&(l=!1)});l&&("function"==typeof n.props?a.push(t["callback"+i]):a.push(t[d(n.props)])),"function"==typeof n.props&&(i+=1)}),a};function b(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const v=Object(l.a)(),g=e=>e?e.charAt(0).toLowerCase()+e.slice(1):e;function y({defaultTheme:e,theme:t,themeId:n}){return r=t,0===Object.keys(r).length?e:t[n]||t;var r}function x(e){return e?(t,n)=>n[e]:null}const O=({styledArg:e,props:t,defaultTheme:n,themeId:r})=>{const a=e(Object(o.a)({},t,{theme:y(Object(o.a)({},t,{defaultTheme:n,themeId:r}))}));let i;if(a&&a.variants&&(i=a.variants,delete a.variants),i){return[a,...m(t,h(i),i)]}return a};function w(e={}){const{themeId:t,defaultTheme:n=v,rootShouldForwardProp:l=b,slotShouldForwardProp:c=b}=e,s=e=>Object(f.a)(Object(o.a)({},e,{theme:y(Object(o.a)({},e,{defaultTheme:n,themeId:t}))}));return s.__mui_systemSx=!0,(e,u={})=>{Object(a.b)(e,e=>e.filter(e=>!(null!=e&&e.__mui_systemSx)));const{name:d,slot:f,skipVariantsResolver:v,skipSx:w,overridesResolver:j=x(g(f))}=u,E=Object(r.a)(u,p),S=void 0!==v?v:f&&"Root"!==f&&"root"!==f||!1,A=w||!1;let k=b;"Root"===f||"root"===f?k=l:f?k=c:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(k=void 0);const C=Object(a.a)(e,Object(o.a)({shouldForwardProp:k,label:void 0},E)),T=(r,...a)=>{const l=a?a.map(e=>{if("function"==typeof e&&e.__emotion_real!==e)return r=>O({styledArg:e,props:r,defaultTheme:n,themeId:t});if(Object(i.b)(e)){let t,n=e;return e&&e.variants&&(t=e.variants,delete n.variants,n=n=>{let r=e;return m(n,h(t),t).forEach(e=>{r=Object(i.a)(r,e)}),r}),n}return e}):[];let c=r;if(Object(i.b)(r)){let e;r&&r.variants&&(e=r.variants,delete c.variants,c=t=>{let n=r;return m(t,h(e),e).forEach(e=>{n=Object(i.a)(n,e)}),n})}else"function"==typeof r&&r.__emotion_real!==r&&(c=e=>O({styledArg:r,props:e,defaultTheme:n,themeId:t}));d&&j&&l.push(e=>{const r=y(Object(o.a)({},e,{defaultTheme:n,themeId:t})),a=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(d,r);if(a){const t={};return Object.entries(a).forEach(([n,a])=>{t[n]="function"==typeof a?a(Object(o.a)({},e,{theme:r})):a}),j(e,t)}return null}),d&&!S&&l.push(e=>{const r=y(Object(o.a)({},e,{defaultTheme:n,themeId:t}));return((e,t,n,r)=>{var o;const a=null==n||null==(o=n.components)||null==(o=o[r])?void 0:o.variants;return m(e,t,a)})(e,((e,t)=>{let n=[];return t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants),h(n)})(d,r),r,d)}),A||l.push(s);const u=l.length-a.length;if(Array.isArray(r)&&u>0){const e=new Array(u).fill("");c=[...r,...e],c.raw=[...r.raw,...e]}const f=C(c,...l);return e.muiName&&(f.muiName=e.muiName),f};return C.withConfig&&(T.withConfig=C.withConfig),T}}},,,,function(e,t,n){var r=n(180),o="object"==typeof self&&self&&self.Object===Object&&self,a=r||o||Function("return this")();e.exports=a},function(e,t,n){var r=n(77),o=n(100);e.exports=function(e){return"symbol"==typeof e||o(e)&&"[object Symbol]"==r(e)}},function(e,t,n){var r=n(99),o=n(184),a=n(185),i=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":i&&i in Object(e)?o(e):a(e)}},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){var r=n(120)(Object,"create");e.exports=r},function(e,t,n){var r=n(209);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(215);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){"use strict";n.d(t,"b",(function(){return l})),n.d(t,"a",(function(){return u}));var r=n(4),o=n(1);const a=["duration","easing","delay"],i={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},l={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function c(e){return Math.round(e)+"ms"}function s(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function u(e){const t=Object(o.a)({},i,e.easing),n=Object(o.a)({},l,e.duration);return Object(o.a)({getAutoHeightDuration:s,create:(e=["all"],o={})=>{const{duration:i=n.standard,easing:l=t.easeInOut,delay:s=0}=o;Object(r.a)(o,a);return(Array.isArray(e)?e:[e]).map(e=>`${e} ${"string"==typeof i?i:c(i)} ${l} ${"string"==typeof s?s:c(s)}`).join(",")}},e,{easing:t,duration:n})}},function(e,t,n){"use strict";var r=n(0),o=n(24);t.a=function(e=null){const t=r.useContext(o.b);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n}},function(e,t,n){"use strict";function r(e,t){return function(){return e.apply(t,arguments)}}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";t.a=null},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z"}),"Send")},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function l(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],o=0;o<e.length;o++){var a=e[o],c=t.base?a[0]+t.base:a[0],s=n[c]||0,u="".concat(c," ").concat(s);n[c]=s+1;var d=l(u),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(i[d].references++,i[d].updater(f)):i.push({identifier:u,updater:b(f,t),references:1}),r.push(u)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function p(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function b(e,t){var n,r,o;if(t.singleton){var a=m++;n=h||(h=s(t)),r=f.bind(null,n,a,!1),o=f.bind(null,n,a,!0)}else n=s(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=l(n[r]);i[o].references--}for(var a=c(e,t),s=0;s<n.length;s++){var u=l(n[s]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=a}}}},function(e,t,n){"use strict";function r(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null==n)return;var r,o,a=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){l=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var t=r(e,4),n=t[1],o=t[3];if(!o)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),l="/*# ".concat(i," */"),c=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[n].concat(c).concat([l]).join("\n")}return[n].join("\n")}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return oe}));var r=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){0}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),o="-ms-",a="-moz-",i="-webkit-",l="comm",c="rule",s="decl",u="@keyframes",d=Math.abs,f=String.fromCharCode,p=Object.assign;function h(e,t){return 45^y(e,0)?(((t<<2^y(e,0))<<2^y(e,1))<<2^y(e,2))<<2^y(e,3):0}function m(e){return e.trim()}function b(e,t){return(e=t.exec(e))?e[0]:e}function v(e,t,n){return e.replace(t,n)}function g(e,t){return e.indexOf(t)}function y(e,t){return 0|e.charCodeAt(t)}function x(e,t,n){return e.slice(t,n)}function O(e){return e.length}function w(e){return e.length}function j(e,t){return t.push(e),e}function E(e,t){return e.map(t).join("")}var S=1,A=1,k=0,C=0,T=0,P="";function R(e,t,n,r,o,a,i){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:S,column:A,length:i,return:""}}function _(e,t){return p(R("",null,null,"",null,null,0),e,{length:-e.length},t)}function L(){return T=C<k?y(P,C++):0,A++,10===T&&(A=1,S++),T}function N(){return y(P,C)}function M(){return C}function I(e,t){return x(P,e,t)}function B(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function z(e){return S=A=1,k=O(P=e),C=0,[]}function D(e){return P="",e}function F(e){return m(I(C-1,function e(t){for(;L();)switch(T){case t:return C;case 34:case 39:34!==t&&39!==t&&e(T);break;case 40:41===t&&e(t);break;case 92:L()}return C}(91===e?e+2:40===e?e+1:e)))}function W(e){for(;(T=N())&&T<33;)L();return B(e)>2||B(T)>3?"":" "}function $(e,t){for(;--t&&L()&&!(T<48||T>102||T>57&&T<65||T>70&&T<97););return I(e,M()+(t<6&&32==N()&&32==L()))}function U(e,t){for(;L()&&e+T!==57&&(e+T!==84||47!==N()););return"/*"+I(t,C-1)+"*"+f(47===e?e:L())}function V(e){for(;!B(N());)L();return I(e,C)}function H(e){return D(function e(t,n,r,o,a,i,l,c,s){var u=0,d=0,p=l,h=0,m=0,b=0,x=1,w=1,E=1,k=0,R="",_=a,I=i,B=o,z=R;for(;w;)switch(b=k,k=L()){case 40:if(108!=b&&58==y(z,p-1)){-1!=g(z+=v(F(k),"&","&\f"),"&\f")&&(E=-1);break}case 34:case 39:case 91:z+=F(k);break;case 9:case 10:case 13:case 32:z+=W(b);break;case 92:z+=$(M()-1,7);continue;case 47:switch(N()){case 42:case 47:j(G(U(L(),M()),n,r),s);break;default:z+="/"}break;case 123*x:c[u++]=O(z)*E;case 125*x:case 59:case 0:switch(k){case 0:case 125:w=0;case 59+d:-1==E&&(z=v(z,/\f/g,"")),m>0&&O(z)-p&&j(m>32?Y(z+";",o,r,p-1):Y(v(z," ","")+";",o,r,p-2),s);break;case 59:z+=";";default:if(j(B=q(z,n,r,u,d,a,c,R,_=[],I=[],p),i),123===k)if(0===d)e(z,n,B,B,_,i,p,c,I);else switch(99===h&&110===y(z,3)?100:h){case 100:case 108:case 109:case 115:e(t,B,B,o&&j(q(t,B,B,0,0,a,c,R,a,_=[],p),I),a,I,p,c,o?_:I);break;default:e(z,B,B,B,[""],I,0,c,I)}}u=d=m=0,x=E=1,R=z="",p=l;break;case 58:p=1+O(z),m=b;default:if(x<1)if(123==k)--x;else if(125==k&&0==x++&&125==(T=C>0?y(P,--C):0,A--,10===T&&(A=1,S--),T))continue;switch(z+=f(k),k*x){case 38:E=d>0?1:(z+="\f",-1);break;case 44:c[u++]=(O(z)-1)*E,E=1;break;case 64:45===N()&&(z+=F(L())),h=N(),d=p=O(R=z+=V(M())),k++;break;case 45:45===b&&2==O(z)&&(x=0)}}return i}("",null,null,null,[""],e=z(e),0,[0],e))}function q(e,t,n,r,o,a,i,l,s,u,f){for(var p=o-1,h=0===o?a:[""],b=w(h),g=0,y=0,O=0;g<r;++g)for(var j=0,E=x(e,p+1,p=d(y=i[g])),S=e;j<b;++j)(S=m(y>0?h[j]+" "+E:v(E,/&\f/g,h[j])))&&(s[O++]=S);return R(e,t,n,0===o?c:l,s,u,f)}function G(e,t,n){return R(e,t,n,l,f(T),x(e,2,-2),0)}function Y(e,t,n,r){return R(e,t,n,s,x(e,0,r),x(e,r+1,-1),r)}function K(e,t){for(var n="",r=w(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function X(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case s:return e.return=e.return||e.value;case l:return"";case u:return e.return=e.value+"{"+K(e.children,r)+"}";case c:e.value=e.props.join(",")}return O(n=K(e.children,r))?e.return=e.value+"{"+n+"}":""}function J(e){return function(t){t.root||(t=t.return)&&e(t)}}n(68),n(67);var Q=function(e,t,n){for(var r=0,o=0;r=o,o=N(),38===r&&12===o&&(t[n]=1),!B(o);)L();return I(e,C)},Z=function(e,t){return D(function(e,t){var n=-1,r=44;do{switch(B(r)){case 0:38===r&&12===N()&&(t[n]=1),e[n]+=Q(C-1,t,n);break;case 2:e[n]+=F(r);break;case 4:if(44===r){e[++n]=58===N()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=f(r)}}while(r=L());return e}(z(e),t))},ee=new WeakMap,te=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||ee.get(n))&&!r){ee.set(e,!0);for(var o=[],a=Z(t,o),i=n.props,l=0,c=0;l<a.length;l++)for(var s=0;s<i.length;s++,c++)e.props[c]=o[l]?a[l].replace(/&\f/g,i[s]):i[s]+" "+a[l]}}},ne=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};var re=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case s:e.return=function e(t,n){switch(h(t,n)){case 5103:return i+"print-"+t+t;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return i+t+t;case 5349:case 4246:case 4810:case 6968:case 2756:return i+t+a+t+o+t+t;case 6828:case 4268:return i+t+o+t+t;case 6165:return i+t+o+"flex-"+t+t;case 5187:return i+t+v(t,/(\w+).+(:[^]+)/,i+"box-$1$2"+o+"flex-$1$2")+t;case 5443:return i+t+o+"flex-item-"+v(t,/flex-|-self/,"")+t;case 4675:return i+t+o+"flex-line-pack"+v(t,/align-content|flex-|-self/,"")+t;case 5548:return i+t+o+v(t,"shrink","negative")+t;case 5292:return i+t+o+v(t,"basis","preferred-size")+t;case 6060:return i+"box-"+v(t,"-grow","")+i+t+o+v(t,"grow","positive")+t;case 4554:return i+v(t,/([^-])(transform)/g,"$1"+i+"$2")+t;case 6187:return v(v(v(t,/(zoom-|grab)/,i+"$1"),/(image-set)/,i+"$1"),t,"")+t;case 5495:case 3959:return v(t,/(image-set\([^]*)/,i+"$1$`$1");case 4968:return v(v(t,/(.+:)(flex-)?(.*)/,i+"box-pack:$3"+o+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+i+t+t;case 4095:case 3583:case 4068:case 2532:return v(t,/(.+)-inline(.+)/,i+"$1$2")+t;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(O(t)-1-n>6)switch(y(t,n+1)){case 109:if(45!==y(t,n+4))break;case 102:return v(t,/(.+:)(.+)-([^]+)/,"$1"+i+"$2-$3$1"+a+(108==y(t,n+3)?"$3":"$2-$3"))+t;case 115:return~g(t,"stretch")?e(v(t,"stretch","fill-available"),n)+t:t}break;case 4949:if(115!==y(t,n+1))break;case 6444:switch(y(t,O(t)-3-(~g(t,"!important")&&10))){case 107:return v(t,":",":"+i)+t;case 101:return v(t,/(.+:)([^;!]+)(;|!.+)?/,"$1"+i+(45===y(t,14)?"inline-":"")+"box$3$1"+i+"$2$3$1"+o+"$2box$3")+t}break;case 5936:switch(y(t,n+11)){case 114:return i+t+o+v(t,/[svh]\w+-[tblr]{2}/,"tb")+t;case 108:return i+t+o+v(t,/[svh]\w+-[tblr]{2}/,"tb-rl")+t;case 45:return i+t+o+v(t,/[svh]\w+-[tblr]{2}/,"lr")+t}return i+t+o+t+t}return t}(e.value,e.length);break;case u:return K([_(e,{value:v(e.value,"@","@"+i)})],r);case c:if(e.length)return E(e.props,(function(t){switch(b(t,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return K([_(e,{props:[v(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return K([_(e,{props:[v(t,/:(plac\w+)/,":"+i+"input-$1")]}),_(e,{props:[v(t,/:(plac\w+)/,":-moz-$1")]}),_(e,{props:[v(t,/:(plac\w+)/,o+"input-$1")]})],r)}return""}))}}],oe=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var o=e.stylisPlugins||re;var a,i,l={},c=[];a=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)l[t[n]]=!0;c.push(e)}));var s=[te,ne];var u,d=[X,J((function(e){u.insert(e)}))],f=function(e){var t=w(e);return function(n,r,o,a){for(var i="",l=0;l<t;l++)i+=e[l](n,r,o,a)||"";return i}}(s.concat(o,d));i=function(e,t,n,r){u=n,K(H(e?e+"{"+t.styles+"}":t.styles),f),r&&(p.inserted[t.name]=!0)};var p={key:t,sheet:new r({key:t,container:a,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:l,registered:{},insert:i};return p.sheet.hydrate(c),p}},,,,,,,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports=n(175)},function(e,t,n){var r=n(75).Symbol;e.exports=r},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){"use strict";n.r(t),n.d(t,"capitalize",(function(){return o.a})),n.d(t,"createChainedFunction",(function(){return a})),n.d(t,"createSvgIcon",(function(){return i.a})),n.d(t,"debounce",(function(){return l.a})),n.d(t,"deprecatedPropType",(function(){return c})),n.d(t,"isMuiElement",(function(){return s.a})),n.d(t,"ownerDocument",(function(){return u.a})),n.d(t,"ownerWindow",(function(){return d.a})),n.d(t,"requirePropFactory",(function(){return f.a})),n.d(t,"setRef",(function(){return p})),n.d(t,"unstable_useEnhancedEffect",(function(){return h.a})),n.d(t,"unstable_useId",(function(){return m})),n.d(t,"unsupportedProp",(function(){return b.a})),n.d(t,"useControlled",(function(){return v.a})),n.d(t,"useEventCallback",(function(){return g.a})),n.d(t,"useForkRef",(function(){return y.a})),n.d(t,"useIsFocusVisible",(function(){return x.a})),n.d(t,"unstable_ClassNameGenerator",(function(){return O}));var r=n(225),o=n(7),a=n(271).a,i=n(21),l=n(55);var c=function(e,t){return()=>null},s=n(60),u=n(32),d=n(69),f=n(102),p=n(228).a,h=n(31),m=n(272).a,b=n(103),v=n(48),g=n(49),y=n(17),x=n(56);const O={configure:e=>{r.a.configure(e)}}},function(e,t,n){"use strict";n(1);t.a=function(e,t){return()=>null}},function(e,t,n){"use strict";t.a=function(e,t,n,r,o){return null}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(105),o=n.n(r),a=function(e,t){return o()(e,t)}},function(e,t,n){"use strict";var r=n(169),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function c(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=u(n);d&&(i=i.concat(d(n)));for(var l=c(t),m=c(n),b=0;b<i.length;++b){var v=i[b];if(!(a[v]||r&&r[v]||m&&m[v]||l&&l[v])){var g=f(n,v);try{s(t,v,g)}catch(e){}}}}return t}},function(e,t,n){var r=n(77),o=n(100);e.exports=function(e){return"number"==typeof e||o(e)&&"[object Number]"==r(e)}},function(e,t,n){var r=n(77),o=n(30);e.exports=function(e){if(!o(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"m12 8-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"}),"ExpandLess")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3z"}),"OpenInNew")},function(e,t,n){var r=n(106);e.exports=function(e){return r(e)&&e!=+e}},function(e,t,n){"use strict";var r=n(88),o=n.n(r),a=n(89),i=n.n(a)()(o.a);i.push([e.i,".platformImage {\n    height: 75px;\n    width: 75px;\n    margin-left: 32%;\n}\n\n","",{version:3,sources:["webpack://./frontend/css/platform-options.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,WAAW;IACX,gBAAgB;AACpB",sourcesContent:[".platformImage {\n    height: 75px;\n    width: 75px;\n    margin-left: 32%;\n}\n\n"],sourceRoot:""}]),t.a=i},function(e,t,n){"use strict";var r=n(88),o=n.n(r),a=n(89),i=n.n(a)()(o.a);i.push([e.i,'/*! react-sidenav v0.5.0 | (c) 2020 Trend Micro Inc. | MIT | https://github.com/trendmicro-frontend/react-sidenav */\n.sidenav---sidenav---_2tBP {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1006;\n  min-width: 64px;\n  background: #db3d44;\n  -webkit-transition: min-width 0.2s;\n  -moz-transition: min-width 0.2s;\n  -o-transition: min-width 0.2s;\n  -ms-transition: min-width 0.2s;\n  transition: min-width 0.2s;\n}\n.sidenav---sidenav---_2tBP.sidenav---collapsed---LQDEv .sidenav---sidenav-nav---3tvij .sidenav---sidenav-navitem---uwIJ- .sidenav---sidenav-subnav---1EN61 {\n  display: none;\n}\n.sidenav---sidenav---_2tBP.sidenav---collapsed---LQDEv .sidenav---sidenav-nav---3tvij .sidenav---sidenav-navitem---uwIJ-:hover > .sidenav---sidenav-subnav---1EN61 {\n  display: block;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL {\n  min-width: 240px;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ- .sidenav---navicon---3gCRo + .sidenav---navtext---1AE_f {\n  visibility: visible;\n  opacity: 1;\n  -ms-filter: none;\n  filter: none;\n  -webkit-transition: opacity 0.2s linear;\n  -moz-transition: opacity 0.2s linear;\n  -o-transition: opacity 0.2s linear;\n  -ms-transition: opacity 0.2s linear;\n  transition: opacity 0.2s linear;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-.sidenav---expandable---3_dr7 > .sidenav---navitem---9uL5T {\n  cursor: pointer;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-subnav---1EN61 {\n  position: static;\n  border: none;\n  float: left;\n  clear: both;\n  width: 100%;\n  background: transparent;\n  overflow: hidden;\n  -webkit-box-shadow: none;\n  box-shadow: none;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-.sidenav---expanded---1KdUL .sidenav---sidenav-subnav---1EN61 {\n  display: block;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-subnav---1EN61 {\n  display: none;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47 {\n  position: relative;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47::before {\n  content: " ";\n  width: 100%;\n  height: 28px;\n  position: absolute;\n  top: 0;\n  z-index: -1;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47:first-child {\n  display: none;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47:hover::before {\n  background: #fff;\n  opacity: 0.15;\n  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=15)";\n  filter: alpha(opacity=15);\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47::before {\n  content: " ";\n  width: 100%;\n  height: 28px;\n  position: absolute;\n  top: 0;\n  z-index: -1;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47.sidenav---selected---1EK3y > .sidenav---navitem---9uL5T {\n  color: #fff;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47.sidenav---selected---1EK3y > .sidenav---navitem---9uL5T::before {\n  content: " ";\n  width: 2px;\n  height: 20px;\n  left: 10px;\n  top: 4px;\n  position: absolute;\n  border-left: 2px #fff solid;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47:hover > .sidenav---navitem---9uL5T {\n  background: transparent;\n  color: #fff;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47 > .sidenav---navitem---9uL5T {\n  color: #f9dcdd;\n  padding: 0 14px 0 20px;\n  line-height: 28px;\n}\n.sidenav---sidenav-toggle---1KRjR {\n  position: relative;\n  float: left;\n  width: 64px;\n  height: 64px;\n  padding: 0;\n  margin: 0;\n  background-color: transparent;\n  background-image: none;\n  border: 0;\n  border-radius: 0;\n  cursor: pointer;\n}\n.sidenav---sidenav-toggle---1KRjR:focus {\n  outline: none;\n}\n.sidenav---sidenav-toggle---1KRjR .sidenav---icon-bar---u1f02 {\n  display: block;\n  width: 20px;\n  height: 2px;\n  margin: 0 auto;\n  background-color: #fff;\n  border-radius: 1px;\n  -webkit-transition: all 0.15s;\n  -moz-transition: all 0.15s;\n  -o-transition: all 0.15s;\n  -ms-transition: all 0.15s;\n  transition: all 0.15s;\n  opacity: 0.7;\n  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=70)";\n  filter: alpha(opacity=70);\n}\n.sidenav---sidenav-toggle---1KRjR .sidenav---icon-bar---u1f02 + .sidenav---icon-bar---u1f02 {\n  margin-top: 4px;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-toggle---1KRjR .sidenav---icon-bar---u1f02 {\n  width: 25px;\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-toggle---1KRjR .sidenav---icon-bar---u1f02:nth-child(1) {\n  -webkit-transform: rotate(45deg);\n  -moz-transform: rotate(45deg);\n  -o-transform: rotate(45deg);\n  -ms-transform: rotate(45deg);\n  transform: rotate(45deg);\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-toggle---1KRjR .sidenav---icon-bar---u1f02:nth-child(2) {\n  opacity: 0;\n  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";\n  filter: alpha(opacity=0);\n}\n.sidenav---sidenav---_2tBP.sidenav---expanded---1KdUL .sidenav---sidenav-toggle---1KRjR .sidenav---icon-bar---u1f02:nth-child(3) {\n  margin-top: -8px;\n  -webkit-transform: rotate(-45deg);\n  -moz-transform: rotate(-45deg);\n  -o-transform: rotate(-45deg);\n  -ms-transform: rotate(-45deg);\n  transform: rotate(-45deg);\n}\n.sidenav---sidenav-nav---3tvij {\n  float: left;\n  padding: 0;\n  margin: 0;\n  clear: both;\n  list-style: none;\n  width: 100%;\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ- {\n  clear: both;\n  position: relative;\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-.sidenav---highlighted---oUx9u > .sidenav---navitem---9uL5T {\n  cursor: default;\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-:hover > .sidenav---navitem---9uL5T::after {\n  background: #fff;\n  opacity: 0.15;\n  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=15)";\n  filter: alpha(opacity=15);\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-.sidenav---highlighted---oUx9u > .sidenav---navitem---9uL5T::after,\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-:hover.sidenav---highlighted---oUx9u > .sidenav---navitem---9uL5T::after {\n  background: #000;\n  opacity: 0.2;\n  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=20)";\n  filter: alpha(opacity=20);\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-.sidenav---highlighted---oUx9u.sidenav---expanded---1KdUL > .sidenav---navitem---9uL5T::after,\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-:hover.sidenav---highlighted---oUx9u.sidenav---expanded---1KdUL > .sidenav---navitem---9uL5T::after {\n  background: #000;\n  opacity: 0.25;\n  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=25)";\n  filter: alpha(opacity=25);\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-.sidenav---highlighted---oUx9u.sidenav---selected---1EK3y.sidenav---expanded---1KdUL > .sidenav---navitem---9uL5T::after,\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-:hover.sidenav---highlighted---oUx9u.sidenav---selected---1EK3y.sidenav---expanded---1KdUL > .sidenav---navitem---9uL5T::after {\n  background: #000;\n  opacity: 0.2;\n  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=20)";\n  filter: alpha(opacity=20);\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-:hover > .sidenav---navitem---9uL5T .sidenav---navicon---3gCRo,\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-.sidenav---highlighted---oUx9u > .sidenav---navitem---9uL5T .sidenav---navicon---3gCRo {\n  opacity: 1;\n  -ms-filter: none;\n  filter: none;\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-:hover > .sidenav---navitem---9uL5T .sidenav---navicon---3gCRo,\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-:hover > .sidenav---navitem---9uL5T .sidenav---navtext---1AE_f,\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-.sidenav---highlighted---oUx9u > .sidenav---navitem---9uL5T .sidenav---navicon---3gCRo,\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-.sidenav---highlighted---oUx9u > .sidenav---navitem---9uL5T .sidenav---navtext---1AE_f {\n  color: #fff;\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-:hover > .sidenav---navitem---9uL5T .sidenav---navicon---3gCRo > *,\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-:hover > .sidenav---navitem---9uL5T .sidenav---navtext---1AE_f > *,\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-.sidenav---highlighted---oUx9u > .sidenav---navitem---9uL5T .sidenav---navicon---3gCRo > *,\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ-.sidenav---highlighted---oUx9u > .sidenav---navitem---9uL5T .sidenav---navtext---1AE_f > * {\n  color: #fff;\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ- > .sidenav---navitem---9uL5T {\n  position: relative;\n  display: block;\n  line-height: 50px;\n  height: 50px;\n  white-space: nowrap;\n  text-decoration: none;\n  color: #fff;\n  font-size: 14px;\n  cursor: pointer;\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ- > .sidenav---navitem---9uL5T:focus {\n  outline: 0;\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ- > .sidenav---navitem---9uL5T::after {\n  content: \'\';\n  position: absolute;\n  width: 100%;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  background: #fff;\n  opacity: 0;\n  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";\n  filter: alpha(opacity=0);\n  z-index: -1;\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ- > .sidenav---navitem---9uL5T .sidenav---navicon---3gCRo,\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ- > .sidenav---navitem---9uL5T .sidenav---navtext---1AE_f {\n  color: #f9dcdd;\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ- > .sidenav---navitem---9uL5T .sidenav---navicon---3gCRo > *,\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ- > .sidenav---navitem---9uL5T .sidenav---navtext---1AE_f > * {\n  color: #f9dcdd;\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ- > .sidenav---navitem---9uL5T .sidenav---navicon---3gCRo {\n  display: block;\n  float: left;\n  width: 64px;\n  height: 50px;\n  margin-right: -6px;\n  vertical-align: top;\n  background-repeat: no-repeat;\n  background-position: center center;\n  background-color: transparent;\n  opacity: 0.7;\n  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=70)";\n  filter: alpha(opacity=70);\n  line-height: 50px;\n  text-align: center;\n}\n.sidenav---sidenav-nav---3tvij > .sidenav---sidenav-navitem---uwIJ- > .sidenav---navitem---9uL5T .sidenav---navicon---3gCRo + .sidenav---navtext---1AE_f {\n  width: 0;\n  visibility: hidden;\n  opacity: 0;\n  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";\n  filter: alpha(opacity=0);\n  -webkit-transition: visibility 0s 0.2s, opacity 0.2s linear;\n  -moz-transition: visibility 0s 0.2s, opacity 0.2s linear;\n  -o-transition: visibility 0s 0.2s, opacity 0.2s linear;\n  -ms-transition: visibility 0s 0.2s, opacity 0.2s linear;\n  transition: visibility 0s 0.2s, opacity 0.2s linear;\n}\n.sidenav---sidenav-subnav---1EN61 {\n  min-width: 200px;\n  position: absolute;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  top: 0;\n  left: 64px;\n  background: #fff;\n  border: 1px #bbb solid;\n  -webkit-box-shadow: 2px 2px 10px rgba(0,0,0,0.15);\n  box-shadow: 2px 2px 10px rgba(0,0,0,0.15);\n}\n.sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47:first-child {\n  margin: 0 24px;\n  line-height: 48px;\n  border-bottom: 1px #ccc solid;\n  font-size: 14px;\n  font-weight: normal;\n}\n.sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47:nth-child(2) {\n  margin-top: 8px;\n}\n.sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47:last-child {\n  margin-bottom: 8px;\n}\n.sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47.sidenav---selected---1EK3y > .sidenav---navitem---9uL5T {\n  color: #db3d44;\n  font-weight: bold;\n  background: none;\n  cursor: default;\n}\n.sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47.sidenav---selected---1EK3y > .sidenav---navitem---9uL5T:hover {\n  background: #fff;\n}\n.sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47 > .sidenav---navitem---9uL5T {\n  display: block;\n  text-decoration: none;\n  color: #222;\n  font-size: 13px;\n  line-height: 30px;\n  padding: 0 24px;\n  cursor: pointer;\n}\n.sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47 > .sidenav---navitem---9uL5T:hover {\n  background: #eee;\n}\n.sidenav---sidenav-subnav---1EN61 > .sidenav---sidenav-subnavitem---1cD47 > .sidenav---navitem---9uL5T:focus {\n  outline: 0;\n}\n.sidenav---sidenav---_2tBP {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  line-height: 20px;\n}\n.sidenav---sidenav---_2tBP *,\n.sidenav---sidenav---_2tBP *:before,\n.sidenav---sidenav---_2tBP *:after {\n  -webkit-box-sizing: inherit;\n  -moz-box-sizing: inherit;\n  box-sizing: inherit;\n}\n\n/*# sourceMappingURL=react-sidenav.css.map*/',"",{version:3,sources:["webpack://./node_modules/@trendmicro/react-sidenav/dist/react-sidenav.css"],names:[],mappings:"AAAA,mHAAmH;AACnH;EACE,kBAAkB;EAClB,MAAM;EACN,SAAS;EACT,OAAO;EACP,aAAa;EACb,eAAe;EACf,mBAAmB;EACnB,kCAAkC;EAClC,+BAA+B;EAC/B,6BAA6B;EAC7B,8BAA8B;EAC9B,0BAA0B;AAC5B;AACA;EACE,aAAa;AACf;AACA;EACE,cAAc;AAChB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,mBAAmB;EACnB,UAAU;EACV,gBAAgB;EAChB,YAAY;EACZ,uCAAuC;EACvC,oCAAoC;EACpC,kCAAkC;EAClC,mCAAmC;EACnC,+BAA+B;AACjC;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;EAChB,YAAY;EACZ,WAAW;EACX,WAAW;EACX,WAAW;EACX,uBAAuB;EACvB,gBAAgB;EAChB,wBAAwB;EACxB,gBAAgB;AAClB;AACA;EACE,cAAc;AAChB;AACA;EACE,aAAa;AACf;AACA;EACE,kBAAkB;AACpB;AACA;EACE,YAAY;EACZ,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,WAAW;AACb;AACA;EACE,aAAa;AACf;AACA;EACE,gBAAgB;EAChB,aAAa;EACb,iEAAiE;EACjE,yBAAyB;AAC3B;AACA;EACE,YAAY;EACZ,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,WAAW;AACb;AACA;EACE,WAAW;AACb;AACA;EACE,YAAY;EACZ,UAAU;EACV,YAAY;EACZ,UAAU;EACV,QAAQ;EACR,kBAAkB;EAClB,2BAA2B;AAC7B;AACA;EACE,uBAAuB;EACvB,WAAW;AACb;AACA;EACE,cAAc;EACd,sBAAsB;EACtB,iBAAiB;AACnB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,WAAW;EACX,YAAY;EACZ,UAAU;EACV,SAAS;EACT,6BAA6B;EAC7B,sBAAsB;EACtB,SAAS;EACT,gBAAgB;EAChB,eAAe;AACjB;AACA;EACE,aAAa;AACf;AACA;EACE,cAAc;EACd,WAAW;EACX,WAAW;EACX,cAAc;EACd,sBAAsB;EACtB,kBAAkB;EAClB,6BAA6B;EAC7B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",sourceRoot:""}]),t.a=i},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(226);function o(e){if("string"!=typeof e)throw new Error(Object(r.a)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},,,,,function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,c=i(e),s=1;s<arguments.length;s++){for(var u in n=Object(arguments[s]))o.call(n,u)&&(c[u]=n[u]);if(r){l=r(n);for(var d=0;d<l.length;d++)a.call(n,l[d])&&(c[l[d]]=n[l[d]])}}return c}},function(e,t){function n(){return e.exports=n=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},e.exports.__esModule=!0,e.exports.default=e.exports,n.apply(this,arguments)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var r=n(197),o=n(201);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t,n){"use strict";var r=n(113),o=n(34),a=n(16),i=n(20),l=n(59);const c=function(){function e(e,t,n,o){const l={[e]:t,theme:n},c=o[e];if(!c)return{[e]:t};const{cssProperty:s=e,themeKey:u,transform:d,style:f}=c;if(null==t)return null;if("typography"===u&&"inherit"===t)return{[e]:t};const p=Object(a.b)(n,u)||{};if(f)return f(l);return Object(i.b)(l,t,t=>{let n=Object(a.c)(p,d,t);return t===n&&"string"==typeof t&&(n=Object(a.c)(p,d,`${e}${"default"===t?"":Object(r.a)(t)}`,t)),!1===s?n:{[s]:n}})}return function t(n){var r;const{sx:a,theme:c={}}=n||{};if(!a)return null;const s=null!=(r=c.unstable_sxConfig)?r:l.a;function u(n){let r=n;if("function"==typeof n)r=n(c);else if("object"!=typeof n)return n;if(!r)return null;const a=Object(i.a)(c.breakpoints),l=Object.keys(a);let u=a;return Object.keys(r).forEach(n=>{const a=(l=r[n],d=c,"function"==typeof l?l(d):l);var l,d;if(null!=a)if("object"==typeof a)if(s[n])u=Object(o.a)(u,e(n,a,c,s));else{const e=Object(i.b)({theme:c},a,e=>({[n]:e}));!function(...e){const t=e.reduce((e,t)=>e.concat(Object.keys(t)),[]),n=new Set(t);return e.every(e=>n.size===Object.keys(e).length)}(e,a)?u=Object(o.a)(u,e):u[n]=t({sx:a,theme:c})}else u=Object(o.a)(u,e(n,a,c,s))}),Object(i.d)(l,u)}return Array.isArray(a)?a.map(u):u(a)}}();c.filterProps=["sx"],t.a=c},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M3 13h8V3H3zm0 8h8v-6H3zm10 0h8V11h-8zm0-18v6h8V3z"}),"Dashboard")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3m-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3m0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5m8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5"}),"People")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M4 6h18V4H4c-1.1 0-2 .9-2 2v11H0v3h14v-3H4zm19 2h-6c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h6c.55 0 1-.45 1-1V9c0-.55-.45-1-1-1m-1 9h-4v-7h4z"}),"Devices")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M3 6h18V4H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4v-2H3zm10 6H9v1.78c-.61.55-1 1.33-1 2.22s.39 1.67 1 2.22V20h4v-1.78c.61-.55 1-1.34 1-2.22s-.39-1.67-1-2.22zm-2 5.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5M22 8h-6c-.5 0-1 .5-1 1v10c0 .5.5 1 1 1h6c.5 0 1-.5 1-1V9c0-.5-.5-1-1-1m-1 10h-4v-8h4z"}),"DevicesOther")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M4 9h4v11H4zm12 4h4v7h-4zm-6-9h4v16h-4z"}),"BarChart")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"m11.99 18.54-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27zM12 16l7.36-5.73L21 9l-9-7-9 7 1.63 1.27z"}),"Layers")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;!function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=i(t);if(n&&n.has(e))return n.get(e);var r={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if("default"!==a&&Object.prototype.hasOwnProperty.call(e,a)){var l=o?Object.getOwnPropertyDescriptor(e,a):null;l&&(l.get||l.set)?Object.defineProperty(r,a,l):r[a]=e[a]}r.default=e,n&&n.set(e,r)}(n(0));var o=r(n(19)),a=n(2);function i(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(i=function(e){return e?n:t})(e)}t.default=(0,o.default)((0,a.jsx)("path",{d:"M10 15l5.19-3L10 9v6m11.56-7.83c.13.47.22 1.1.28 1.9.07.8.1 1.49.1 2.09L22 12c0 2.19-.16 3.8-.44 4.83-.25.9-.83 1.48-1.73 1.73-.47.13-1.33.22-2.65.28-1.3.07-2.49.1-3.59.1L12 19c-4.19 0-6.8-.16-7.83-.44-.9-.25-1.48-.83-1.73-1.73-.13-.47-.22-1.1-.28-1.9-.07-.8-.1-1.49-.1-2.09L2 12c0-2.19.16-3.8.44-4.83.25-.9.83-1.48 1.73-1.73.47-.13 1.33-.22 2.65-.28 1.3-.07 2.49-.1 3.59-.1L12 5c4.19 0 6.8.16 7.83.44.9.25 1.48.83 1.73 1.73z"}),"YouTube")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;!function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var n=i(t);if(n&&n.has(e))return n.get(e);var r={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if("default"!==a&&Object.prototype.hasOwnProperty.call(e,a)){var l=o?Object.getOwnPropertyDescriptor(e,a):null;l&&(l.get||l.set)?Object.defineProperty(r,a,l):r[a]=e[a]}r.default=e,n&&n.set(e,r)}(n(0));var o=r(n(19)),a=n(2);function i(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(i=function(e){return e?n:t})(e)}t.default=(0,o.default)((0,a.jsx)("path",{d:"M22.46 6c-.77.35-1.6.58-2.46.69.88-.53 1.56-1.37 1.88-2.38-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29 0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15 0 1.49.75 2.81 1.91 3.56-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07 4.28 4.28 0 0 0 4 2.98 8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21 16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56.84-.6 1.56-1.36 2.14-2.23z"}),"Twitter")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"m22 9.24-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28z"}),"StarBorder")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"m2 19.99 7.5-7.51 4 4 7.09-7.97L22 9.92l-8.5 9.56-4-4-6 6.01zm1.5-4.5 6-6.01 4 4L22 3.92l-1.41-1.41-7.09 7.97-4-4L2 13.99z"}),"StackedLineChart")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M15 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V7zM6 20V4h8v4h4v12zm10-10v5c0 2.21-1.79 4-4 4s-4-1.79-4-4V8.5c0-1.47 1.26-2.64 2.76-2.49 1.3.13 2.24 1.32 2.24 2.63V15h-2V8.5c0-.28-.22-.5-.5-.5s-.5.22-.5.5V15c0 1.1.9 2 2 2s2-.9 2-2v-5z"}),"FilePresent")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)([(0,a.jsx)("circle",{cx:"10",cy:"8",r:"4"},"0"),(0,a.jsx)("path",{d:"M10.67 13.02c-.22-.01-.44-.02-.67-.02-2.42 0-4.68.67-6.61 1.82-.88.52-1.39 1.5-1.39 2.53V20h9.26c-.79-1.13-1.26-2.51-1.26-4 0-1.07.25-2.07.67-2.98M20.75 16c0-.22-.03-.42-.06-.63l1.14-1.01-1-1.73-1.45.49c-.32-.27-.68-.48-1.08-.63L18 11h-2l-.3 1.49c-.4.15-.76.36-1.08.63l-1.45-.49-1 1.73 1.14 1.01c-.03.21-.06.41-.06.63s.03.42.06.63l-1.14 1.01 1 1.73 1.45-.49c.32.27.68.48 1.08.63L16 21h2l.3-1.49c.4-.15.76-.36 1.08-.63l1.45.49 1-1.73-1.14-1.01c.03-.21.06-.41.06-.63M17 18c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2"},"1")],"ManageAccounts")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}),"Close")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2m5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12z"}),"Cancel")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M6 2c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm7 7V3.5L18.5 9z"}),"InsertDriveFile")},function(e,t,n){var r=n(178),o=n(30);e.exports=function(e,t,n){var a=!0,i=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return o(n)&&(a="leading"in n?!!n.leading:a,i="trailing"in n?!!n.trailing:i),r(e,t,{leading:a,maxWait:t,trailing:i})}},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89 2 2 2h4v-2H5V8h14v10h-4v2h4c1.1 0 2-.9 2-2V6c0-1.1-.89-2-2-2m-7 6-4 4h3v6h2v-6h3z"}),"OpenInBrowser")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"m13.11 5.72-.57 2.89c-.12.59.04 1.2.42 1.66.38.46.94.73 1.54.73H20v1.08L17.43 18H9.34c-.18 0-.34-.16-.34-.34V9.82zM14 2 7.59 8.41C7.21 8.79 7 9.3 7 9.83v7.83C7 18.95 8.05 20 9.34 20h8.1c.71 0 1.36-.37 1.72-.97l2.67-6.15c.11-.25.17-.52.17-.8V11c0-1.1-.9-2-2-2h-5.5l.92-4.65c.05-.22.02-.46-.08-.66-.23-.45-.52-.86-.88-1.22zM4 9H2v11h2c.55 0 1-.45 1-1v-9c0-.55-.45-1-1-1"}),"ThumbUpOffAlt")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3"}),"Visibility")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M3 18h18v-2H3zm0-5h18v-2H3zm0-7v2h18V6z"}),"Menu")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2m6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1z"}),"Notifications")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"m17 7-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.58L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4z"}),"Logout")},function(e,t,n){"use strict";var r=n(18);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(19)),a=n(2);t.default=(0,o.default)((0,a.jsx)("path",{d:"M15.41 7.41 14 6l-6 6 6 6 1.41-1.41L10.83 12z"}),"ChevronLeft")},function(e,t,n){"use strict";var r=n(1),o=n(4),a=n(226),i=n(147),l=n(232),c=n(59),s=n(121);var u=n(274);var d={black:"#000",white:"#fff"};var f={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"};var p={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},h=n(50);var m={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"};var b={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"};var v={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"};var g={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"};const y=["mode","contrastThreshold","tonalOffset"],x={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:d.white,default:d.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},O={text:{primary:d.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:d.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function w(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=Object(u.d)(e.main,o):"dark"===t&&(e.dark=Object(u.b)(e.main,a)))}function j(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:l=.2}=e,c=Object(o.a)(e,y),s=e.primary||function(e="light"){return"dark"===e?{main:b[200],light:b[50],dark:b[400]}:{main:b[700],light:b[400],dark:b[800]}}(t),j=e.secondary||function(e="light"){return"dark"===e?{main:p[200],light:p[50],dark:p[400]}:{main:p[500],light:p[300],dark:p[700]}}(t),E=e.error||function(e="light"){return"dark"===e?{main:h.a[500],light:h.a[300],dark:h.a[700]}:{main:h.a[700],light:h.a[400],dark:h.a[800]}}(t),S=e.info||function(e="light"){return"dark"===e?{main:v[400],light:v[300],dark:v[700]}:{main:v[700],light:v[500],dark:v[900]}}(t),A=e.success||function(e="light"){return"dark"===e?{main:g[400],light:g[300],dark:g[700]}:{main:g[800],light:g[500],dark:g[900]}}(t),k=e.warning||function(e="light"){return"dark"===e?{main:m[400],light:m[300],dark:m[700]}:{main:"#ed6c02",light:m[500],dark:m[900]}}(t);function C(e){return Object(u.c)(e,O.text.primary)>=n?O.text.primary:x.text.primary}const T=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:i=700})=>{if(!(e=Object(r.a)({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(Object(a.a)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(Object(a.a)(12,t?` (${t})`:"",JSON.stringify(e.main)));return w(e,"light",o,l),w(e,"dark",i,l),e.contrastText||(e.contrastText=C(e.main)),e},P={dark:O,light:x};return Object(i.a)(Object(r.a)({common:Object(r.a)({},d),mode:t,primary:T({color:s,name:"primary"}),secondary:T({color:j,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:T({color:E,name:"error"}),warning:T({color:k,name:"warning"}),info:T({color:S,name:"info"}),success:T({color:A,name:"success"}),grey:f,contrastThreshold:n,getContrastText:C,augmentColor:T,tonalOffset:l},P[t]),c)}const E=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"];const S={textTransform:"uppercase"},A='"Roboto", "Helvetica", "Arial", sans-serif';function k(e,t){const n="function"==typeof t?t(e):t,{fontFamily:a=A,fontSize:l=14,fontWeightLight:c=300,fontWeightRegular:s=400,fontWeightMedium:u=500,fontWeightBold:d=700,htmlFontSize:f=16,allVariants:p,pxToRem:h}=n,m=Object(o.a)(n,E);const b=l/14,v=h||(e=>e/f*b+"rem"),g=(e,t,n,o,i)=>{return Object(r.a)({fontFamily:a,fontWeight:e,fontSize:v(t),lineHeight:n},a===A?{letterSpacing:(l=o/t,Math.round(1e5*l)/1e5)+"em"}:{},i,p);var l},y={h1:g(c,96,1.167,-1.5),h2:g(c,60,1.2,-.5),h3:g(s,48,1.167,0),h4:g(s,34,1.235,.25),h5:g(s,24,1.334,0),h6:g(u,20,1.6,.15),subtitle1:g(s,16,1.75,.15),subtitle2:g(u,14,1.57,.1),body1:g(s,16,1.5,.15),body2:g(s,14,1.43,.15),button:g(u,14,1.75,.4,S),caption:g(s,12,1.66,.4),overline:g(s,12,2.66,1,S),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return Object(i.a)(Object(r.a)({htmlFontSize:f,pxToRem:v,fontFamily:a,fontSize:l,fontWeightLight:c,fontWeightRegular:s,fontWeightMedium:u,fontWeightBold:d},y),m,{clone:!1})}function C(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}var T=["none",C(0,2,1,-1,0,1,1,0,0,1,3,0),C(0,3,1,-2,0,2,2,0,0,1,5,0),C(0,3,3,-2,0,3,4,0,0,1,8,0),C(0,2,4,-1,0,4,5,0,0,1,10,0),C(0,3,5,-1,0,5,8,0,0,1,14,0),C(0,3,5,-1,0,6,10,0,0,1,18,0),C(0,4,5,-2,0,7,10,1,0,2,16,1),C(0,5,5,-3,0,8,10,1,0,3,14,2),C(0,5,6,-3,0,9,12,1,0,3,16,2),C(0,6,6,-3,0,10,14,1,0,4,18,3),C(0,6,7,-4,0,11,15,1,0,4,20,3),C(0,7,8,-4,0,12,17,2,0,5,22,4),C(0,7,8,-4,0,13,19,2,0,5,24,4),C(0,7,9,-4,0,14,21,2,0,5,26,4),C(0,8,9,-5,0,15,22,2,0,6,28,5),C(0,8,10,-5,0,16,24,2,0,6,30,5),C(0,8,11,-5,0,17,26,2,0,6,32,5),C(0,9,11,-5,0,18,28,2,0,7,34,6),C(0,9,12,-6,0,19,29,2,0,7,36,6),C(0,10,13,-6,0,20,31,3,0,8,38,7),C(0,10,13,-6,0,21,33,3,0,8,40,7),C(0,10,14,-6,0,22,35,3,0,8,42,7),C(0,11,14,-7,0,23,36,3,0,9,44,8),C(0,11,15,-7,0,24,38,3,0,9,46,8)],P=n(82);var R={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};const _=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];function L(e={},...t){const{mixins:n={},palette:u={},transitions:d={},typography:f={}}=e,p=Object(o.a)(e,_);if(e.vars)throw new Error(Object(a.a)(18));const h=j(u),m=Object(l.a)(e);let b=Object(i.a)(m,{mixins:(v=m.breakpoints,g=n,Object(r.a)({toolbar:{minHeight:56,[v.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[v.up("sm")]:{minHeight:64}}},g)),palette:h,shadows:T.slice(),typography:k(h,f),transitions:Object(P.a)(d),zIndex:Object(r.a)({},R)});var v,g;return b=Object(i.a)(b,p),b=t.reduce((e,t)=>Object(i.a)(e,t),b),b.unstable_sxConfig=Object(r.a)({},c.a,null==p?void 0:p.unstable_sxConfig),b.unstable_sx=function(e){return Object(s.a)({sx:e,theme:this})},b}t.a=L},function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return l}));var r=n(0);const o={};const a=[];class i{constructor(){this.currentId=0,this.clear=()=>{0!==this.currentId&&(clearTimeout(this.currentId),this.currentId=0)},this.disposeEffect=()=>this.clear}static create(){return new i}start(e,t){this.clear(),this.currentId=setTimeout(()=>{this.currentId=0,t()},e)}}function l(){const e=function(e,t){const n=r.useRef(o);return n.current===o&&(n.current=e(t)),n}(i.create).current;var t;return t=e.disposeEffect,r.useEffect(t,a),e}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return a}));var r=n(1);function o(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}function a(e,t,n={clone:!0}){const i=n.clone?Object(r.a)({},e):e;return o(e)&&o(t)&&Object.keys(t).forEach(r=>{"__proto__"!==r&&(o(t[r])&&r in e&&o(e[r])?i[r]=a(e[r],t[r],n):n.clone?i[r]=o(t[r])?function e(t){if(!o(t))return t;const n={};return Object.keys(t).forEach(r=>{n[r]=e(t[r])}),n}(t[r]):t[r]:i[r]=t[r])}),i}},function(e,t,n){"use strict";var r=n(0);const o="undefined"!=typeof window?r.useLayoutEffect:r.useEffect;t.a=o},function(e,t,n){"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,"a",(function(){return r}))},,,,,,,,,,,,,,,function(e,t,n){"use strict";
/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(118),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,c=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,u=o?Symbol.for("react.provider"):60109,d=o?Symbol.for("react.context"):60110,f=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116,b="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function x(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||g}function O(){}function w(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||g}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},O.prototype=x.prototype;var j=w.prototype=new O;j.constructor=w,r(j,x.prototype),j.isPureReactComponent=!0;var E={current:null},S=Object.prototype.hasOwnProperty,A={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,r)&&!A.hasOwnProperty(r)&&(o[r]=t[r]);var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){for(var s=Array(c),u=0;u<c;u++)s[u]=arguments[u+2];o.children=s}if(e&&e.defaultProps)for(r in c=e.defaultProps)void 0===o[r]&&(o[r]=c[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:E.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var T=/\/+/g,P=[];function R(e,t,n,r){if(P.length){var o=P.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function _(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function L(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var c=!1;if(null===t)c=!0;else switch(l){case"string":case"number":c=!0;break;case"object":switch(t.$$typeof){case a:case i:c=!0}}if(c)return r(o,t,""===n?"."+N(t,0):n),1;if(c=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var u=n+N(l=t[s],s);c+=e(l,u,r,o)}else if(null===t||"object"!=typeof t?u=null:u="function"==typeof(u=b&&t[b]||t["@@iterator"])?u:null,"function"==typeof u)for(t=u.call(t),s=0;!(l=t.next()).done;)c+=e(l=l.value,u=n+N(l,s++),r,o);else if("object"===l)throw r=""+t,Error(v(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return c}(e,"",t,n)}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function M(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?B(e,r,n,(function(e){return e})):null!=e&&(C(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(T,"$&/")+"/")+n)),r.push(e))}function B(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(T,"$&/")+"/"),L(e,I,t=R(t,a,r,o)),_(t)}var z={current:null};function D(){var e=z.current;if(null===e)throw Error(v(321));return e}var F={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:E,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return B(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;L(e,M,t=R(null,null,t,n)),_(t)},count:function(e){return L(e,(function(){return null}),null)},toArray:function(e){var t=[];return B(e,t,null,(function(e){return e})),t},only:function(e){if(!C(e))throw Error(v(143));return e}},t.Component=x,t.Fragment=l,t.Profiler=s,t.PureComponent=w,t.StrictMode=c,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=F,t.cloneElement=function(e,t,n){if(null==e)throw Error(v(267,e));var o=r({},e.props),i=e.key,l=e.ref,c=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,c=E.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in t)S.call(t,u)&&!A.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==s?s[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){s=Array(u);for(var d=0;d<u;d++)s[d]=arguments[d+2];o.children=s}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:c}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:f,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return D().useCallback(e,t)},t.useContext=function(e,t){return D().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return D().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return D().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return D().useLayoutEffect(e,t)},t.useMemo=function(e,t){return D().useMemo(e,t)},t.useReducer=function(e,t,n){return D().useReducer(e,t,n)},t.useRef=function(e){return D().useRef(e)},t.useState=function(e){return D().useState(e)},t.version="16.14.0"},function(e,t,n){"use strict";
/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(118),a=n(166);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));function l(e,t,n,r,o,a,i,l,c){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var c=!1,s=null,u=!1,d=null,f={onError:function(e){c=!0,s=e}};function p(e,t,n,r,o,a,i,u,d){c=!1,s=null,l.apply(f,arguments)}var h=null,m=null,b=null;function v(e,t,n){var r=e.type||"unknown-event";e.currentTarget=b(n),function(e,t,n,r,o,a,l,f,h){if(p.apply(this,arguments),c){if(!c)throw Error(i(198));var m=s;c=!1,s=null,u||(u=!0,d=m)}}(r,t,void 0,e),e.currentTarget=null}var g=null,y={};function x(){if(g)for(var e in y){var t=y[e],n=g.indexOf(e);if(!(-1<n))throw Error(i(96,e));if(!w[n]){if(!t.extractEvents)throw Error(i(97,e));for(var r in w[n]=t,n=t.eventTypes){var o=void 0,a=n[r],l=t,c=r;if(j.hasOwnProperty(c))throw Error(i(99,c));j[c]=a;var s=a.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&O(s[o],l,c);o=!0}else a.registrationName?(O(a.registrationName,l,c),o=!0):o=!1;if(!o)throw Error(i(98,r,e))}}}}function O(e,t,n){if(E[e])throw Error(i(100,e));E[e]=t,S[e]=t.eventTypes[n].dependencies}var w=[],j={},E={},S={};function A(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!y.hasOwnProperty(t)||y[t]!==r){if(y[t])throw Error(i(102,t));y[t]=r,n=!0}}n&&x()}var k=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),C=null,T=null,P=null;function R(e){if(e=m(e)){if("function"!=typeof C)throw Error(i(280));var t=e.stateNode;t&&(t=h(t),C(e.stateNode,e.type,t))}}function _(e){T?P?P.push(e):P=[e]:T=e}function L(){if(T){var e=T,t=P;if(P=T=null,R(e),t)for(e=0;e<t.length;e++)R(t[e])}}function N(e,t){return e(t)}function M(e,t,n,r,o){return e(t,n,r,o)}function I(){}var B=N,z=!1,D=!1;function F(){null===T&&null===P||(I(),L())}function W(e,t,n){if(D)return e(t,n);D=!0;try{return B(e,t,n)}finally{D=!1,F()}}var $=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,U=Object.prototype.hasOwnProperty,V={},H={};function q(e,t,n,r,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a}var G={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){G[e]=new q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];G[t]=new q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){G[e]=new q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){G[e]=new q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){G[e]=new q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){G[e]=new q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){G[e]=new q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){G[e]=new q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){G[e]=new q(e,5,!1,e.toLowerCase(),null,!1)}));var Y=/[\-:]([a-z])/g;function K(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Y,K);G[t]=new q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Y,K);G[t]=new q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Y,K);G[t]=new q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){G[e]=new q(e,1,!1,e.toLowerCase(),null,!1)})),G.xlinkHref=new q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){G[e]=new q(e,1,!1,e.toLowerCase(),null,!0)}));var X=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function J(e,t,n,r){var o=G.hasOwnProperty(t)?G[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!U.call(H,e)||!U.call(V,e)&&($.test(e)?H[e]=!0:(V[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}X.hasOwnProperty("ReactCurrentDispatcher")||(X.ReactCurrentDispatcher={current:null}),X.hasOwnProperty("ReactCurrentBatchConfig")||(X.ReactCurrentBatchConfig={suspense:null});var Q=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,oe=Z?Symbol.for("react.profiler"):60114,ae=Z?Symbol.for("react.provider"):60109,ie=Z?Symbol.for("react.context"):60110,le=Z?Symbol.for("react.concurrent_mode"):60111,ce=Z?Symbol.for("react.forward_ref"):60112,se=Z?Symbol.for("react.suspense"):60113,ue=Z?Symbol.for("react.suspense_list"):60120,de=Z?Symbol.for("react.memo"):60115,fe=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function me(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function be(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case se:return"Suspense";case ue:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ie:return"Context.Consumer";case ae:return"Context.Provider";case ce:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case de:return be(e.type);case pe:return be(e.render);case fe:if(e=1===e._status?e._result:null)return be(e)}return null}function ve(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,a=be(e.type);n=null,r&&(n=be(r.type)),r=a,a="",o?a=" (at "+o.fileName.replace(Q,"")+":"+o.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ye(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function xe(e){e._valueTracker||(e._valueTracker=function(e){var t=ye(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Oe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ye(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function we(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function je(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ee(e,t){null!=(t=t.checked)&&J(e,"checked",t,!1)}function Se(e,t){Ee(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ke(e,t.type,n):t.hasOwnProperty("defaultValue")&&ke(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ae(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ke(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ce(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Te(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Pe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Re(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function _e(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ne="http://www.w3.org/1999/xhtml",Me="http://www.w3.org/2000/svg";function Ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Be(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ze,De=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Me||"innerHTML"in e)e.innerHTML=t;else{for((ze=ze||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ze.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function We(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var $e={animationend:We("Animation","AnimationEnd"),animationiteration:We("Animation","AnimationIteration"),animationstart:We("Animation","AnimationStart"),transitionend:We("Transition","TransitionEnd")},Ue={},Ve={};function He(e){if(Ue[e])return Ue[e];if(!$e[e])return e;var t,n=$e[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ve)return Ue[e]=n[t];return e}k&&(Ve=document.createElement("div").style,"AnimationEvent"in window||(delete $e.animationend.animation,delete $e.animationiteration.animation,delete $e.animationstart.animation),"TransitionEvent"in window||delete $e.transitionend.transition);var qe=He("animationend"),Ge=He("animationiteration"),Ye=He("animationstart"),Ke=He("transitionend"),Xe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Je=new("function"==typeof WeakMap?WeakMap:Map);function Qe(e){var t=Je.get(e);return void 0===t&&(t=new Map,Je.set(e,t)),t}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(i(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return tt(o),e;if(a===r)return tt(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,c=o.child;c;){if(c===n){l=!0,n=o,r=a;break}if(c===r){l=!0,r=o,n=a;break}c=c.sibling}if(!l){for(c=a.child;c;){if(c===n){l=!0,n=a,r=o;break}if(c===r){l=!0,r=a,n=o;break}c=c.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var at=null;function it(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)v(e,t[r],n[r]);else t&&v(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(at=rt(at,e)),e=at,at=null,e){if(ot(e,it),at)throw Error(i(95));if(u)throw e=d,u=!1,d=null,e}}function ct(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function st(e){if(!k)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ut=[];function dt(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ut.length&&ut.push(e)}function ft(e,t,n,r){if(ut.length){var o=ut.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=kn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ct(e.nativeEvent);r=e.topLevelType;var a=e.nativeEvent,i=e.eventSystemFlags;0===n&&(i|=64);for(var l=null,c=0;c<w.length;c++){var s=w[c];s&&(s=s.extractEvents(r,t,a,o,i))&&(l=rt(l,s))}lt(l)}}function ht(e,t,n){if(!n.has(e)){switch(e){case"scroll":Yt(t,"scroll",!0);break;case"focus":case"blur":Yt(t,"focus",!0),Yt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":st(e)&&Yt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Xe.indexOf(e)&&Gt(e,t)}n.set(e,null)}}var mt,bt,vt,gt=!1,yt=[],xt=null,Ot=null,wt=null,jt=new Map,Et=new Map,St=[],At="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),kt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Ct(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function Tt(e,t){switch(e){case"focus":case"blur":xt=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":wt=null;break;case"pointerover":case"pointerout":jt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Et.delete(t.pointerId)}}function Pt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=Ct(t,n,r,o,a),null!==t&&(null!==(t=Cn(t))&&bt(t)),e):(e.eventSystemFlags|=r,e)}function Rt(e){var t=kn(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){vt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function _t(e){if(null!==e.blockedOn)return!1;var t=Qt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Cn(t);return null!==n&&bt(n),e.blockedOn=t,!1}return!0}function Lt(e,t,n){_t(e)&&n.delete(t)}function Nt(){for(gt=!1;0<yt.length;){var e=yt[0];if(null!==e.blockedOn){null!==(e=Cn(e.blockedOn))&&mt(e);break}var t=Qt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:yt.shift()}null!==xt&&_t(xt)&&(xt=null),null!==Ot&&_t(Ot)&&(Ot=null),null!==wt&&_t(wt)&&(wt=null),jt.forEach(Lt),Et.forEach(Lt)}function Mt(e,t){e.blockedOn===t&&(e.blockedOn=null,gt||(gt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Nt)))}function It(e){function t(t){return Mt(t,e)}if(0<yt.length){Mt(yt[0],e);for(var n=1;n<yt.length;n++){var r=yt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==xt&&Mt(xt,e),null!==Ot&&Mt(Ot,e),null!==wt&&Mt(wt,e),jt.forEach(t),Et.forEach(t),n=0;n<St.length;n++)(r=St[n]).blockedOn===e&&(r.blockedOn=null);for(;0<St.length&&null===(n=St[0]).blockedOn;)Rt(n),null===n.blockedOn&&St.shift()}var Bt={},zt=new Map,Dt=new Map,Ft=["abort","abort",qe,"animationEnd",Ge,"animationIteration",Ye,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ke,"transitionEnd","waiting","waiting"];function Wt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],a="on"+(o[0].toUpperCase()+o.slice(1));a={phasedRegistrationNames:{bubbled:a,captured:a+"Capture"},dependencies:[r],eventPriority:t},Dt.set(r,t),zt.set(r,a),Bt[o]=a}}Wt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Wt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Wt(Ft,2);for(var $t="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ut=0;Ut<$t.length;Ut++)Dt.set($t[Ut],0);var Vt=a.unstable_UserBlockingPriority,Ht=a.unstable_runWithPriority,qt=!0;function Gt(e,t){Yt(t,e,!1)}function Yt(e,t,n){var r=Dt.get(t);switch(void 0===r?2:r){case 0:r=Kt.bind(null,t,1,e);break;case 1:r=Xt.bind(null,t,1,e);break;default:r=Jt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Kt(e,t,n,r){z||I();var o=Jt,a=z;z=!0;try{M(o,e,t,n,r)}finally{(z=a)||F()}}function Xt(e,t,n,r){Ht(Vt,Jt.bind(null,e,t,n,r))}function Jt(e,t,n,r){if(qt)if(0<yt.length&&-1<At.indexOf(e))e=Ct(null,e,t,n,r),yt.push(e);else{var o=Qt(e,t,n,r);if(null===o)Tt(e,r);else if(-1<At.indexOf(e))e=Ct(o,e,t,n,r),yt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return xt=Pt(xt,e,t,n,r,o),!0;case"dragenter":return Ot=Pt(Ot,e,t,n,r,o),!0;case"mouseover":return wt=Pt(wt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return jt.set(a,Pt(jt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Et.set(a,Pt(Et.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){Tt(e,r),e=ft(e,r,null,t);try{W(pt,e)}finally{dt(e)}}}}function Qt(e,t,n,r){if(null!==(n=kn(n=ct(r)))){var o=Ze(n);if(null===o)n=null;else{var a=o.tag;if(13===a){if(null!==(n=et(o)))return n;n=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=ft(e,r,n,t);try{W(pt,e)}finally{dt(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Zt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Ne;function cn(e,t){var n=Qe(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=S[t];for(var r=0;r<t.length;r++)ht(t[r],e,n)}function sn(){}function un(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function dn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var n,r=dn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dn(r)}}function pn(){for(var e=window,t=un();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=un((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mn=null,bn=null;function vn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var yn="function"==typeof setTimeout?setTimeout:void 0,xn="function"==typeof clearTimeout?clearTimeout:void 0;function On(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function wn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var jn=Math.random().toString(36).slice(2),En="__reactInternalInstance$"+jn,Sn="__reactEventHandlers$"+jn,An="__reactContainere$"+jn;function kn(e){var t=e[En];if(t)return t;for(var n=e.parentNode;n;){if(t=n[An]||n[En]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=wn(e);null!==e;){if(n=e[En])return n;e=wn(e)}return t}n=(e=n).parentNode}return null}function Cn(e){return!(e=e[En]||e[An])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Tn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function Pn(e){return e[Sn]||null}function Rn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function _n(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}function Ln(e,t,n){(t=_n(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Nn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Rn(t);for(t=n.length;0<t--;)Ln(n[t],"captured",e);for(t=0;t<n.length;t++)Ln(n[t],"bubbled",e)}}function Mn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=_n(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function In(e){e&&e.dispatchConfig.registrationName&&Mn(e._targetInst,null,e)}function Bn(e){ot(e,Nn)}var zn=null,Dn=null,Fn=null;function Wn(){if(Fn)return Fn;var e,t,n=Dn,r=n.length,o="value"in zn?zn.value:zn.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Fn=o.slice(e,1<t?1-t:void 0)}function $n(){return!0}function Un(){return!1}function Vn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?$n:Un,this.isPropagationStopped=Un,this}function Hn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function qn(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Gn(e){e.eventPool=[],e.getPooled=Hn,e.release=qn}o(Vn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=$n)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=$n)},persist:function(){this.isPersistent=$n},isPersistent:Un,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Un,this._dispatchInstances=this._dispatchListeners=null}}),Vn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Vn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return o(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Gn(n),n},Gn(Vn);var Yn=Vn.extend({data:null}),Kn=Vn.extend({data:null}),Xn=[9,13,27,32],Jn=k&&"CompositionEvent"in window,Qn=null;k&&"documentMode"in document&&(Qn=document.documentMode);var Zn=k&&"TextEvent"in window&&!Qn,er=k&&(!Jn||Qn&&8<Qn&&11>=Qn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Xn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ar(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ir=!1;var lr={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Jn)e:{switch(e){case"compositionstart":var a=nr.compositionStart;break e;case"compositionend":a=nr.compositionEnd;break e;case"compositionupdate":a=nr.compositionUpdate;break e}a=void 0}else ir?or(e,n)&&(a=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=nr.compositionStart);return a?(er&&"ko"!==n.locale&&(ir||a!==nr.compositionStart?a===nr.compositionEnd&&ir&&(o=Wn()):(Dn="value"in(zn=r)?zn.value:zn.textContent,ir=!0)),a=Yn.getPooled(a,t,n,r),o?a.data=o:null!==(o=ar(n))&&(a.data=o),Bn(a),o=a):o=null,(e=Zn?function(e,t){switch(e){case"compositionend":return ar(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ir)return"compositionend"===e||!Jn&&or(e,t)?(e=Wn(),Fn=Dn=zn=null,ir=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Kn.getPooled(nr.beforeInput,t,n,r)).data=e,Bn(t)):t=null,null===o?t:null===t?o:[o,t]}},cr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function sr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!cr[e.type]:"textarea"===t}var ur={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function dr(e,t,n){return(e=Vn.getPooled(ur.change,e,t,n)).type="change",_(n),Bn(e),e}var fr=null,pr=null;function hr(e){lt(e)}function mr(e){if(Oe(Tn(e)))return e}function br(e,t){if("change"===e)return t}var vr=!1;function gr(){fr&&(fr.detachEvent("onpropertychange",yr),pr=fr=null)}function yr(e){if("value"===e.propertyName&&mr(pr))if(e=dr(pr,e,ct(e)),z)lt(e);else{z=!0;try{N(hr,e)}finally{z=!1,F()}}}function xr(e,t,n){"focus"===e?(gr(),pr=n,(fr=t).attachEvent("onpropertychange",yr)):"blur"===e&&gr()}function Or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return mr(pr)}function wr(e,t){if("click"===e)return mr(t)}function jr(e,t){if("input"===e||"change"===e)return mr(t)}k&&(vr=st("input")&&(!document.documentMode||9<document.documentMode));var Er={eventTypes:ur,_isInputEventSupported:vr,extractEvents:function(e,t,n,r){var o=t?Tn(t):window,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type)var i=br;else if(sr(o))if(vr)i=jr;else{i=Or;var l=xr}else(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=wr);if(i&&(i=i(e,t)))return dr(i,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&ke(o,"number",o.value)}},Sr=Vn.extend({view:null,detail:null}),Ar={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ar[e])&&!!t[e]}function Cr(){return kr}var Tr=0,Pr=0,Rr=!1,_r=!1,Lr=Sr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Cr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Tr;return Tr=e.screenX,Rr?"mousemove"===e.type?e.screenX-t:0:(Rr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Pr;return Pr=e.screenY,_r?"mousemove"===e.type?e.screenY-t:0:(_r=!0,0)}}),Nr=Lr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Mr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Ir={eventTypes:Mr,extractEvents:function(e,t,n,r,o){var a="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(a&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!i&&!a)return null;(a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window,i)?(i=t,null!==(t=(t=n.relatedTarget||n.toElement)?kn(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):i=null;if(i===t)return null;if("mouseout"===e||"mouseover"===e)var l=Lr,c=Mr.mouseLeave,s=Mr.mouseEnter,u="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Nr,c=Mr.pointerLeave,s=Mr.pointerEnter,u="pointer");if(e=null==i?a:Tn(i),a=null==t?a:Tn(t),(c=l.getPooled(c,i,n,r)).type=u+"leave",c.target=e,c.relatedTarget=a,(n=l.getPooled(s,t,n,r)).type=u+"enter",n.target=a,n.relatedTarget=e,u=t,(r=i)&&u)e:{for(s=u,i=0,e=l=r;e;e=Rn(e))i++;for(e=0,t=s;t;t=Rn(t))e++;for(;0<i-e;)l=Rn(l),i--;for(;0<e-i;)s=Rn(s),e--;for(;i--;){if(l===s||l===s.alternate)break e;l=Rn(l),s=Rn(s)}l=null}else l=null;for(s=l,l=[];r&&r!==s&&(null===(i=r.alternate)||i!==s);)l.push(r),r=Rn(r);for(r=[];u&&u!==s&&(null===(i=u.alternate)||i!==s);)r.push(u),u=Rn(u);for(u=0;u<l.length;u++)Mn(l[u],"bubbled",c);for(u=r.length;0<u--;)Mn(r[u],"captured",n);return 0==(64&o)?[c]:[c,n]}};var Br="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},zr=Object.prototype.hasOwnProperty;function Dr(e,t){if(Br(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!zr.call(t,n[r])||!Br(e[n[r]],t[n[r]]))return!1;return!0}var Fr=k&&"documentMode"in document&&11>=document.documentMode,Wr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},$r=null,Ur=null,Vr=null,Hr=!1;function qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Hr||null==$r||$r!==un(n)?null:("selectionStart"in(n=$r)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Vr&&Dr(Vr,n)?null:(Vr=n,(e=Vn.getPooled(Wr.select,Ur,e,t)).type="select",e.target=$r,Bn(e),e))}var Gr={eventTypes:Wr,extractEvents:function(e,t,n,r,o,a){if(!(a=!(o=a||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Qe(o),a=S.onSelect;for(var i=0;i<a.length;i++)if(!o.has(a[i])){o=!1;break e}o=!0}a=!o}if(a)return null;switch(o=t?Tn(t):window,e){case"focus":(sr(o)||"true"===o.contentEditable)&&($r=o,Ur=t,Vr=null);break;case"blur":Vr=Ur=$r=null;break;case"mousedown":Hr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Hr=!1,qr(n,r);case"selectionchange":if(Fr)break;case"keydown":case"keyup":return qr(n,r)}return null}},Yr=Vn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Kr=Vn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Xr=Sr.extend({relatedTarget:null});function Jr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Qr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=Sr.extend({key:function(e){if(e.key){var t=Qr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Jr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Cr,charCode:function(e){return"keypress"===e.type?Jr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Jr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=Lr.extend({dataTransfer:null}),no=Sr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Cr}),ro=Vn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=Lr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ao={eventTypes:Bt,extractEvents:function(e,t,n,r){var o=zt.get(e);if(!o)return null;switch(e){case"keypress":if(0===Jr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Xr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Lr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case qe:case Ge:case Ye:e=Yr;break;case Ke:e=ro;break;case"scroll":e=Sr;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Kr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Nr;break;default:e=Vn}return Bn(t=e.getPooled(o,t,n,r)),t}};if(g)throw Error(i(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x(),h=Pn,m=Cn,b=Tn,A({SimpleEventPlugin:ao,EnterLeaveEventPlugin:Ir,ChangeEventPlugin:Er,SelectEventPlugin:Gr,BeforeInputEventPlugin:lr});var io=[],lo=-1;function co(e){0>lo||(e.current=io[lo],io[lo]=null,lo--)}function so(e,t){lo++,io[lo]=e.current,e.current=t}var uo={},fo={current:uo},po={current:!1},ho=uo;function mo(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function bo(e){return null!=(e=e.childContextTypes)}function vo(){co(po),co(fo)}function go(e,t,n){if(fo.current!==uo)throw Error(i(168));so(fo,t),so(po,n)}function yo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,be(t)||"Unknown",a));return o({},n,{},r)}function xo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,ho=fo.current,so(fo,e),so(po,po.current),!0}function Oo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=yo(e,t,ho),r.__reactInternalMemoizedMergedChildContext=e,co(po),co(fo),so(fo,e)):co(po),so(po,n)}var wo=a.unstable_runWithPriority,jo=a.unstable_scheduleCallback,Eo=a.unstable_cancelCallback,So=a.unstable_requestPaint,Ao=a.unstable_now,ko=a.unstable_getCurrentPriorityLevel,Co=a.unstable_ImmediatePriority,To=a.unstable_UserBlockingPriority,Po=a.unstable_NormalPriority,Ro=a.unstable_LowPriority,_o=a.unstable_IdlePriority,Lo={},No=a.unstable_shouldYield,Mo=void 0!==So?So:function(){},Io=null,Bo=null,zo=!1,Do=Ao(),Fo=1e4>Do?Ao:function(){return Ao()-Do};function Wo(){switch(ko()){case Co:return 99;case To:return 98;case Po:return 97;case Ro:return 96;case _o:return 95;default:throw Error(i(332))}}function $o(e){switch(e){case 99:return Co;case 98:return To;case 97:return Po;case 96:return Ro;case 95:return _o;default:throw Error(i(332))}}function Uo(e,t){return e=$o(e),wo(e,t)}function Vo(e,t,n){return e=$o(e),jo(e,t,n)}function Ho(e){return null===Io?(Io=[e],Bo=jo(Co,Go)):Io.push(e),Lo}function qo(){if(null!==Bo){var e=Bo;Bo=null,Eo(e)}Go()}function Go(){if(!zo&&null!==Io){zo=!0;var e=0;try{var t=Io;Uo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Io=null}catch(t){throw null!==Io&&(Io=Io.slice(e+1)),jo(Co,qo),t}finally{zo=!1}}}function Yo(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Ko(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Xo={current:null},Jo=null,Qo=null,Zo=null;function ea(){Zo=Qo=Jo=null}function ta(e){var t=Xo.current;co(Xo),e.type._context._currentValue=t}function na(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ra(e,t){Jo=e,Zo=Qo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Pi=!0),e.firstContext=null)}function oa(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Qo){if(null===Jo)throw Error(i(308));Qo=t,Jo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Qo=Qo.next=t;return e._currentValue}var aa=!1;function ia(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ca(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function sa(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ua(e,t){var n=e.alternate;null!==n&&la(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function da(e,t,n,r){var a=e.updateQueue;aa=!1;var i=a.baseQueue,l=a.shared.pending;if(null!==l){if(null!==i){var c=i.next;i.next=l.next,l.next=c}i=l,a.shared.pending=null,null!==(c=e.alternate)&&(null!==(c=c.updateQueue)&&(c.baseQueue=l))}if(null!==i){c=i.next;var s=a.baseState,u=0,d=null,f=null,p=null;if(null!==c)for(var h=c;;){if((l=h.expirationTime)<r){var m={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===p?(f=p=m,d=s):p=p.next=m,l>u&&(u=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),ac(l,h.suspenseConfig);e:{var b=e,v=h;switch(l=t,m=n,v.tag){case 1:if("function"==typeof(b=v.payload)){s=b.call(m,s,l);break e}s=b;break e;case 3:b.effectTag=-4097&b.effectTag|64;case 0:if(null==(l="function"==typeof(b=v.payload)?b.call(m,s,l):b))break e;s=o({},s,l);break e;case 2:aa=!0}}null!==h.callback&&(e.effectTag|=32,null===(l=a.effects)?a.effects=[h]:l.push(h))}if(null===(h=h.next)||h===c){if(null===(l=a.shared.pending))break;h=i.next=l.next,l.next=c,a.baseQueue=i=l,a.shared.pending=null}}null===p?d=s:p.next=f,a.baseState=d,a.baseQueue=p,ic(u),e.expirationTime=u,e.memoizedState=s}}function fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(i(191,r));r.call(o)}}}var pa=X.ReactCurrentBatchConfig,ha=(new r.Component).refs;function ma(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var ba={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ql(),o=pa.suspense;(o=ca(r=Gl(r,e,o),o)).payload=t,null!=n&&(o.callback=n),sa(e,o),Yl(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ql(),o=pa.suspense;(o=ca(r=Gl(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),sa(e,o),Yl(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ql(),r=pa.suspense;(r=ca(n=Gl(n,e,r),r)).tag=2,null!=t&&(r.callback=t),sa(e,r),Yl(e,n)}};function va(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!Dr(n,r)||!Dr(o,a))}function ga(e,t,n){var r=!1,o=uo,a=t.contextType;return"object"==typeof a&&null!==a?a=oa(a):(o=bo(t)?ho:fo.current,a=(r=null!=(r=t.contextTypes))?mo(e,o):uo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ba,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ya(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ba.enqueueReplaceState(t,t.state,null)}function xa(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ha,ia(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=oa(a):(a=bo(t)?ho:fo.current,o.context=mo(e,a)),da(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ma(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ba.enqueueReplaceState(o,o.state,null),da(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Oa=Array.isArray;function wa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===ha&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function ja(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ea(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ac(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function c(e,t,n,r){return null===t||6!==t.tag?((t=Tc(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=wa(e,t,n),r.return=e,r):((r=kc(n.type,n.key,n.props,null,e.mode,r)).ref=wa(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Pc(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Cc(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Tc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=kc(t.type,t.key,t.props,null,e.mode,n)).ref=wa(e,null,t),n.return=e,n;case te:return(t=Pc(t,e.mode,n)).return=e,t}if(Oa(t)||me(t))return(t=Cc(t,e.mode,n,null)).return=e,t;ja(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:c(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?d(e,t,n.props.children,r,o):s(e,t,n,r):null;case te:return n.key===o?u(e,t,n,r):null}if(Oa(n)||me(n))return null!==o?null:d(e,t,n,r,null);ja(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return c(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?d(t,e,r.props.children,o,r.key):s(t,e,r,o);case te:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Oa(r)||me(r))return d(t,e=e.get(n)||null,r,o,null);ja(t,r)}return null}function m(o,i,l,c){for(var s=null,u=null,d=i,m=i=0,b=null;null!==d&&m<l.length;m++){d.index>m?(b=d,d=null):b=d.sibling;var v=p(o,d,l[m],c);if(null===v){null===d&&(d=b);break}e&&d&&null===v.alternate&&t(o,d),i=a(v,i,m),null===u?s=v:u.sibling=v,u=v,d=b}if(m===l.length)return n(o,d),s;if(null===d){for(;m<l.length;m++)null!==(d=f(o,l[m],c))&&(i=a(d,i,m),null===u?s=d:u.sibling=d,u=d);return s}for(d=r(o,d);m<l.length;m++)null!==(b=h(d,o,m,l[m],c))&&(e&&null!==b.alternate&&d.delete(null===b.key?m:b.key),i=a(b,i,m),null===u?s=b:u.sibling=b,u=b);return e&&d.forEach((function(e){return t(o,e)})),s}function b(o,l,c,s){var u=me(c);if("function"!=typeof u)throw Error(i(150));if(null==(c=u.call(c)))throw Error(i(151));for(var d=u=null,m=l,b=l=0,v=null,g=c.next();null!==m&&!g.done;b++,g=c.next()){m.index>b?(v=m,m=null):v=m.sibling;var y=p(o,m,g.value,s);if(null===y){null===m&&(m=v);break}e&&m&&null===y.alternate&&t(o,m),l=a(y,l,b),null===d?u=y:d.sibling=y,d=y,m=v}if(g.done)return n(o,m),u;if(null===m){for(;!g.done;b++,g=c.next())null!==(g=f(o,g.value,s))&&(l=a(g,l,b),null===d?u=g:d.sibling=g,d=g);return u}for(m=r(o,m);!g.done;b++,g=c.next())null!==(g=h(m,o,b,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?b:g.key),l=a(g,l,b),null===d?u=g:d.sibling=g,d=g);return e&&m.forEach((function(e){return t(o,e)})),u}return function(e,r,a,c){var s="object"==typeof a&&null!==a&&a.type===ne&&null===a.key;s&&(a=a.props.children);var u="object"==typeof a&&null!==a;if(u)switch(a.$$typeof){case ee:e:{for(u=a.key,s=r;null!==s;){if(s.key===u){switch(s.tag){case 7:if(a.type===ne){n(e,s.sibling),(r=o(s,a.props.children)).return=e,e=r;break e}break;default:if(s.elementType===a.type){n(e,s.sibling),(r=o(s,a.props)).ref=wa(e,s,a),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}a.type===ne?((r=Cc(a.props.children,e.mode,c,a.key)).return=e,e=r):((c=kc(a.type,a.key,a.props,null,e.mode,c)).ref=wa(e,r,a),c.return=e,e=c)}return l(e);case te:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Pc(a,e.mode,c)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Tc(a,e.mode,c)).return=e,e=r),l(e);if(Oa(a))return m(e,r,a,c);if(me(a))return b(e,r,a,c);if(u&&ja(e,a),void 0===a&&!s)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Sa=Ea(!0),Aa=Ea(!1),ka={},Ca={current:ka},Ta={current:ka},Pa={current:ka};function Ra(e){if(e===ka)throw Error(i(174));return e}function _a(e,t){switch(so(Pa,t),so(Ta,e),so(Ca,ka),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Be(null,"");break;default:t=Be(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}co(Ca),so(Ca,t)}function La(){co(Ca),co(Ta),co(Pa)}function Na(e){Ra(Pa.current);var t=Ra(Ca.current),n=Be(t,e.type);t!==n&&(so(Ta,e),so(Ca,n))}function Ma(e){Ta.current===e&&(co(Ca),co(Ta))}var Ia={current:0};function Ba(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function za(e,t){return{responder:e,props:t}}var Da=X.ReactCurrentDispatcher,Fa=X.ReactCurrentBatchConfig,Wa=0,$a=null,Ua=null,Va=null,Ha=!1;function qa(){throw Error(i(321))}function Ga(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Br(e[n],t[n]))return!1;return!0}function Ya(e,t,n,r,o,a){if(Wa=a,$a=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Da.current=null===e||null===e.memoizedState?vi:gi,e=n(r,o),t.expirationTime===Wa){a=0;do{if(t.expirationTime=0,!(25>a))throw Error(i(301));a+=1,Va=Ua=null,t.updateQueue=null,Da.current=yi,e=n(r,o)}while(t.expirationTime===Wa)}if(Da.current=bi,t=null!==Ua&&null!==Ua.next,Wa=0,Va=Ua=$a=null,Ha=!1,t)throw Error(i(300));return e}function Ka(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Va?$a.memoizedState=Va=e:Va=Va.next=e,Va}function Xa(){if(null===Ua){var e=$a.alternate;e=null!==e?e.memoizedState:null}else e=Ua.next;var t=null===Va?$a.memoizedState:Va.next;if(null!==t)Va=t,Ua=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Ua=e).memoizedState,baseState:Ua.baseState,baseQueue:Ua.baseQueue,queue:Ua.queue,next:null},null===Va?$a.memoizedState=Va=e:Va=Va.next=e}return Va}function Ja(e,t){return"function"==typeof t?t(e):t}function Qa(e){var t=Xa(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Ua,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var c=l=a=null,s=o;do{var u=s.expirationTime;if(u<Wa){var d={expirationTime:s.expirationTime,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===c?(l=c=d,a=r):c=c.next=d,u>$a.expirationTime&&($a.expirationTime=u,ic(u))}else null!==c&&(c=c.next={expirationTime:1073741823,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),ac(u,s.suspenseConfig),r=s.eagerReducer===e?s.eagerState:e(r,s.action);s=s.next}while(null!==s&&s!==o);null===c?a=r:c.next=l,Br(r,t.memoizedState)||(Pi=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=c,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Za(e){var t=Xa(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);Br(a,t.memoizedState)||(Pi=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function ei(e){var t=Ka();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Ja,lastRenderedState:e}).dispatch=mi.bind(null,$a,e),[t.memoizedState,e]}function ti(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=$a.updateQueue)?(t={lastEffect:null},$a.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ni(){return Xa().memoizedState}function ri(e,t,n,r){var o=Ka();$a.effectTag|=e,o.memoizedState=ti(1|t,n,void 0,void 0===r?null:r)}function oi(e,t,n,r){var o=Xa();r=void 0===r?null:r;var a=void 0;if(null!==Ua){var i=Ua.memoizedState;if(a=i.destroy,null!==r&&Ga(r,i.deps))return void ti(t,n,a,r)}$a.effectTag|=e,o.memoizedState=ti(1|t,n,a,r)}function ai(e,t){return ri(516,4,e,t)}function ii(e,t){return oi(516,4,e,t)}function li(e,t){return oi(4,2,e,t)}function ci(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function si(e,t,n){return n=null!=n?n.concat([e]):null,oi(4,2,ci.bind(null,t,e),n)}function ui(){}function di(e,t){return Ka().memoizedState=[e,void 0===t?null:t],e}function fi(e,t){var n=Xa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ga(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pi(e,t){var n=Xa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ga(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function hi(e,t,n){var r=Wo();Uo(98>r?98:r,(function(){e(!0)})),Uo(97<r?97:r,(function(){var r=Fa.suspense;Fa.suspense=void 0===t?null:t;try{e(!1),n()}finally{Fa.suspense=r}}))}function mi(e,t,n){var r=ql(),o=pa.suspense;o={expirationTime:r=Gl(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var a=t.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),t.pending=o,a=e.alternate,e===$a||null!==a&&a===$a)Ha=!0,o.expirationTime=Wa,$a.expirationTime=Wa;else{if(0===e.expirationTime&&(null===a||0===a.expirationTime)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.eagerReducer=a,o.eagerState=l,Br(l,i))return}catch(e){}Yl(e,r)}}var bi={readContext:oa,useCallback:qa,useContext:qa,useEffect:qa,useImperativeHandle:qa,useLayoutEffect:qa,useMemo:qa,useReducer:qa,useRef:qa,useState:qa,useDebugValue:qa,useResponder:qa,useDeferredValue:qa,useTransition:qa},vi={readContext:oa,useCallback:di,useContext:oa,useEffect:ai,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ri(4,2,ci.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ri(4,2,e,t)},useMemo:function(e,t){var n=Ka();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ka();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=mi.bind(null,$a,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ka().memoizedState=e},useState:ei,useDebugValue:ui,useResponder:za,useDeferredValue:function(e,t){var n=ei(e),r=n[0],o=n[1];return ai((function(){var n=Fa.suspense;Fa.suspense=void 0===t?null:t;try{o(e)}finally{Fa.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ei(!1),n=t[0];return t=t[1],[di(hi.bind(null,t,e),[t,e]),n]}},gi={readContext:oa,useCallback:fi,useContext:oa,useEffect:ii,useImperativeHandle:si,useLayoutEffect:li,useMemo:pi,useReducer:Qa,useRef:ni,useState:function(){return Qa(Ja)},useDebugValue:ui,useResponder:za,useDeferredValue:function(e,t){var n=Qa(Ja),r=n[0],o=n[1];return ii((function(){var n=Fa.suspense;Fa.suspense=void 0===t?null:t;try{o(e)}finally{Fa.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Qa(Ja),n=t[0];return t=t[1],[fi(hi.bind(null,t,e),[t,e]),n]}},yi={readContext:oa,useCallback:fi,useContext:oa,useEffect:ii,useImperativeHandle:si,useLayoutEffect:li,useMemo:pi,useReducer:Za,useRef:ni,useState:function(){return Za(Ja)},useDebugValue:ui,useResponder:za,useDeferredValue:function(e,t){var n=Za(Ja),r=n[0],o=n[1];return ii((function(){var n=Fa.suspense;Fa.suspense=void 0===t?null:t;try{o(e)}finally{Fa.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Za(Ja),n=t[0];return t=t[1],[fi(hi.bind(null,t,e),[t,e]),n]}},xi=null,Oi=null,wi=!1;function ji(e,t){var n=Ec(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ei(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Si(e){if(wi){var t=Oi;if(t){var n=t;if(!Ei(e,t)){if(!(t=On(n.nextSibling))||!Ei(e,t))return e.effectTag=-1025&e.effectTag|2,wi=!1,void(xi=e);ji(xi,n)}xi=e,Oi=On(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,wi=!1,xi=e}}function Ai(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;xi=e}function ki(e){if(e!==xi)return!1;if(!wi)return Ai(e),wi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gn(t,e.memoizedProps))for(t=Oi;t;)ji(e,t),t=On(t.nextSibling);if(Ai(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Oi=On(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Oi=null}}else Oi=xi?On(e.stateNode.nextSibling):null;return!0}function Ci(){Oi=xi=null,wi=!1}var Ti=X.ReactCurrentOwner,Pi=!1;function Ri(e,t,n,r){t.child=null===e?Aa(t,null,n,r):Sa(t,e.child,n,r)}function _i(e,t,n,r,o){n=n.render;var a=t.ref;return ra(t,o),r=Ya(e,t,n,r,a,o),null===e||Pi?(t.effectTag|=1,Ri(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Yi(e,t,o))}function Li(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Sc(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=kc(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Ni(e,t,i,r,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:Dr)(o,r)&&e.ref===t.ref)?Yi(e,t,a):(t.effectTag|=1,(e=Ac(i,r)).ref=t.ref,e.return=t,t.child=e)}function Ni(e,t,n,r,o,a){return null!==e&&Dr(e.memoizedProps,r)&&e.ref===t.ref&&(Pi=!1,o<a)?(t.expirationTime=e.expirationTime,Yi(e,t,a)):Ii(e,t,n,r,a)}function Mi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ii(e,t,n,r,o){var a=bo(n)?ho:fo.current;return a=mo(t,a),ra(t,o),n=Ya(e,t,n,r,a,o),null===e||Pi?(t.effectTag|=1,Ri(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Yi(e,t,o))}function Bi(e,t,n,r,o){if(bo(n)){var a=!0;xo(t)}else a=!1;if(ra(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),ga(t,n,r),xa(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var c=i.context,s=n.contextType;"object"==typeof s&&null!==s?s=oa(s):s=mo(t,s=bo(n)?ho:fo.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||c!==s)&&ya(t,i,r,s),aa=!1;var f=t.memoizedState;i.state=f,da(t,r,i,o),c=t.memoizedState,l!==r||f!==c||po.current||aa?("function"==typeof u&&(ma(t,n,u,r),c=t.memoizedState),(l=aa||va(t,n,l,r,f,c,s))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=c),i.props=r,i.state=c,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,la(e,t),l=t.memoizedProps,i.props=t.type===t.elementType?l:Ko(t.type,l),c=i.context,"object"==typeof(s=n.contextType)&&null!==s?s=oa(s):s=mo(t,s=bo(n)?ho:fo.current),(d="function"==typeof(u=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||c!==s)&&ya(t,i,r,s),aa=!1,c=t.memoizedState,i.state=c,da(t,r,i,o),f=t.memoizedState,l!==r||c!==f||po.current||aa?("function"==typeof u&&(ma(t,n,u,r),f=t.memoizedState),(u=aa||va(t,n,l,r,c,f,s))?(d||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,f,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,f,s)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=f),i.props=r,i.state=f,i.context=s,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),r=!1);return zi(e,t,n,r,a,o)}function zi(e,t,n,r,o,a){Mi(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return o&&Oo(t,n,!1),Yi(e,t,a);r=t.stateNode,Ti.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=Sa(t,e.child,null,a),t.child=Sa(t,null,l,a)):Ri(e,t,l,a),t.memoizedState=r.state,o&&Oo(t,n,!0),t.child}function Di(e){var t=e.stateNode;t.pendingContext?go(0,t.pendingContext,t.pendingContext!==t.context):t.context&&go(0,t.context,!1),_a(e,t.containerInfo)}var Fi,Wi,$i,Ui={dehydrated:null,retryTime:0};function Vi(e,t,n){var r,o=t.mode,a=t.pendingProps,i=Ia.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&i)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),so(Ia,1&i),null===e){if(void 0!==a.fallback&&Si(t),l){if(l=a.fallback,(a=Cc(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Cc(l,o,n,null)).return=t,a.sibling=n,t.memoizedState=Ui,t.child=a,n}return o=a.children,t.memoizedState=null,t.child=Aa(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(a=a.fallback,(n=Ac(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=Ac(o,a)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Ui,t.child=n,o}return n=Sa(t,e.child,a.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=a.fallback,(a=Cc(null,o,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Cc(l,o,n,null)).return=t,a.sibling=n,n.effectTag|=2,a.childExpirationTime=0,t.memoizedState=Ui,t.child=a,n}return t.memoizedState=null,t.child=Sa(t,e,a.children,n)}function Hi(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),na(e.return,t)}function qi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=o,i.lastEffect=a)}function Gi(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Ri(e,t,r.children,n),0!=(2&(r=Ia.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Hi(e,n);else if(19===e.tag)Hi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(so(Ia,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ba(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),qi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ba(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}qi(t,!0,n,null,a,t.lastEffect);break;case"together":qi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Yi(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&ic(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Ac(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ac(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ki(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Xi(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return bo(t.type)&&vo(),null;case 3:return La(),co(po),co(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!ki(t)||(t.effectTag|=4),null;case 5:Ma(t),n=Ra(Pa.current);var a=t.type;if(null!==e&&null!=t.stateNode)Wi(e,t,a,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ra(Ca.current),ki(t)){r=t.stateNode,a=t.type;var l=t.memoizedProps;switch(r[En]=t,r[Sn]=l,a){case"iframe":case"object":case"embed":Gt("load",r);break;case"video":case"audio":for(e=0;e<Xe.length;e++)Gt(Xe[e],r);break;case"source":Gt("error",r);break;case"img":case"image":case"link":Gt("error",r),Gt("load",r);break;case"form":Gt("reset",r),Gt("submit",r);break;case"details":Gt("toggle",r);break;case"input":je(r,l),Gt("invalid",r),cn(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Gt("invalid",r),cn(n,"onChange");break;case"textarea":Re(r,l),Gt("invalid",r),cn(n,"onChange")}for(var c in on(a,l),e=null,l)if(l.hasOwnProperty(c)){var s=l[c];"children"===c?"string"==typeof s?r.textContent!==s&&(e=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(e=["children",""+s]):E.hasOwnProperty(c)&&null!=s&&cn(n,c)}switch(a){case"input":xe(r),Ae(r,l,!0);break;case"textarea":xe(r),Le(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=sn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(c=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=Ie(a)),e===ln?"script"===a?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(a,{is:r.is}):(e=c.createElement(a),"select"===a&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,a),e[En]=t,e[Sn]=r,Fi(e,t),t.stateNode=e,c=an(a,r),a){case"iframe":case"object":case"embed":Gt("load",e),s=r;break;case"video":case"audio":for(s=0;s<Xe.length;s++)Gt(Xe[s],e);s=r;break;case"source":Gt("error",e),s=r;break;case"img":case"image":case"link":Gt("error",e),Gt("load",e),s=r;break;case"form":Gt("reset",e),Gt("submit",e),s=r;break;case"details":Gt("toggle",e),s=r;break;case"input":je(e,r),s=we(e,r),Gt("invalid",e),cn(n,"onChange");break;case"option":s=Ce(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},s=o({},r,{value:void 0}),Gt("invalid",e),cn(n,"onChange");break;case"textarea":Re(e,r),s=Pe(e,r),Gt("invalid",e),cn(n,"onChange");break;default:s=r}on(a,s);var u=s;for(l in u)if(u.hasOwnProperty(l)){var d=u[l];"style"===l?nn(e,d):"dangerouslySetInnerHTML"===l?null!=(d=d?d.__html:void 0)&&De(e,d):"children"===l?"string"==typeof d?("textarea"!==a||""!==d)&&Fe(e,d):"number"==typeof d&&Fe(e,""+d):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(E.hasOwnProperty(l)?null!=d&&cn(n,l):null!=d&&J(e,l,d,c))}switch(a){case"input":xe(e),Ae(e,r,!1);break;case"textarea":xe(e),Le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Te(e,!!r.multiple,n,!1):null!=r.defaultValue&&Te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof s.onClick&&(e.onclick=sn)}vn(a,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)$i(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Ra(Pa.current),Ra(Ca.current),ki(t)?(n=t.stateNode,r=t.memoizedProps,n[En]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[En]=t,t.stateNode=n)}return null;case 13:return co(Ia),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&ki(t):(r=null!==(a=e.memoizedState),n||null===a||null!==(a=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=a,a.nextEffect=l):(t.firstEffect=t.lastEffect=a,a.nextEffect=null),a.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ia.current)?kl===xl&&(kl=Ol):(kl!==xl&&kl!==Ol||(kl=wl),0!==_l&&null!==El&&(Lc(El,Al),Nc(El,_l)))),(n||r)&&(t.effectTag|=4),null);case 4:return La(),null;case 10:return ta(t),null;case 17:return bo(t.type)&&vo(),null;case 19:if(co(Ia),null===(r=t.memoizedState))return null;if(a=0!=(64&t.effectTag),null===(l=r.rendering)){if(a)Ki(r,!1);else if(kl!==xl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=Ba(l))){for(t.effectTag|=64,Ki(r,!1),null!==(a=e.updateQueue)&&(t.updateQueue=a,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(a=r).effectTag&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(e=a.alternate)?(a.childExpirationTime=0,a.expirationTime=l,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null):(a.childExpirationTime=e.childExpirationTime,a.expirationTime=e.expirationTime,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,l=e.dependencies,a.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return so(Ia,1&Ia.current|2),t.child}l=l.sibling}}else{if(!a)if(null!==(e=Ba(l))){if(t.effectTag|=64,a=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ki(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fo()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,a=!0,Ki(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Fo()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fo(),n.sibling=null,t=Ia.current,so(Ia,a?1&t|2:1&t),n):null}throw Error(i(156,t.tag))}function Ji(e){switch(e.tag){case 1:bo(e.type)&&vo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(La(),co(po),co(fo),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return Ma(e),null;case 13:return co(Ia),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return co(Ia),null;case 4:return La(),null;case 10:return ta(e),null;default:return null}}function Qi(e,t){return{value:e,source:t,stack:ve(t)}}Fi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Wi=function(e,t,n,r,a){var i=e.memoizedProps;if(i!==r){var l,c,s=t.stateNode;switch(Ra(Ca.current),e=null,n){case"input":i=we(s,i),r=we(s,r),e=[];break;case"option":i=Ce(s,i),r=Ce(s,r),e=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":i=Pe(s,i),r=Pe(s,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(s.onclick=sn)}for(l in on(n,r),n=null,i)if(!r.hasOwnProperty(l)&&i.hasOwnProperty(l)&&null!=i[l])if("style"===l)for(c in s=i[l])s.hasOwnProperty(c)&&(n||(n={}),n[c]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(E.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var u=r[l];if(s=null!=i?i[l]:void 0,r.hasOwnProperty(l)&&u!==s&&(null!=u||null!=s))if("style"===l)if(s){for(c in s)!s.hasOwnProperty(c)||u&&u.hasOwnProperty(c)||(n||(n={}),n[c]="");for(c in u)u.hasOwnProperty(c)&&s[c]!==u[c]&&(n||(n={}),n[c]=u[c])}else n||(e||(e=[]),e.push(l,n)),n=u;else"dangerouslySetInnerHTML"===l?(u=u?u.__html:void 0,s=s?s.__html:void 0,null!=u&&s!==u&&(e=e||[]).push(l,u)):"children"===l?s===u||"string"!=typeof u&&"number"!=typeof u||(e=e||[]).push(l,""+u):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(E.hasOwnProperty(l)?(null!=u&&cn(a,l),e||s===u||(e=[])):(e=e||[]).push(l,u))}n&&(e=e||[]).push("style",n),a=e,(t.updateQueue=a)&&(t.effectTag|=4)}},$i=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Zi="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ve(n)),null!==n&&be(n.type),t=t.value,null!==e&&1===e.tag&&be(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){gc(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ko(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(i(163))}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function al(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ol(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Ko(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&fa(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fa(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&vn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&It(n)))));case 19:case 17:case 20:case 21:return}throw Error(i(163))}function il(e,t,n){switch("function"==typeof wc&&wc(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Uo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){gc(o,e)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){gc(e,t)}}(t,n);break;case 5:tl(t);break;case 4:ul(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function cl(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:{for(var t=e.return;null!==t;){if(cl(t)){var n=t;break e}t=t.return}throw Error(i(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.effectTag&&(Fe(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||cl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=sn));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function ul(e,t,n){for(var r,o,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(i(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var c=e,s=a,u=n,d=s;;)if(il(c,d,u),null!==d.child&&4!==d.tag)d.child.return=d,d=d.child;else{if(d===s)break e;for(;null===d.sibling;){if(null===d.return||d.return===s)break e;d=d.return}d.sibling.return=d.return,d=d.sibling}o?(c=r,s=a.stateNode,8===c.nodeType?c.parentNode.removeChild(s):c.removeChild(s)):r.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){r=a.stateNode.containerInfo,o=!0,a.child.return=a,a=a.child;continue}}else if(il(e,a,n),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function dl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rl(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Sn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ee(n,r),an(e,o),t=an(e,r),o=0;o<a.length;o+=2){var l=a[o],c=a[o+1];"style"===l?nn(n,c):"dangerouslySetInnerHTML"===l?De(n,c):"children"===l?Fe(n,c):J(n,l,c,t)}switch(e){case"input":Se(n,r);break;case"textarea":_e(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Te(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Te(n,!!r.multiple,r.defaultValue,!0):Te(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,It(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Nl=Fo()),null!==n)e:for(e=n;;){if(5===e.tag)a=e.stateNode,r?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,a.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void fl(t);case 19:return void fl(t);case 17:return}throw Error(i(163))}function fl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zi),t.forEach((function(t){var r=xc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=ca(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Il||(Il=!0,Bl=r),el(e,t)},n}function ml(e,t,n){(n=ca(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return el(e,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===zl?zl=new Set([this]):zl.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var bl,vl=Math.ceil,gl=X.ReactCurrentDispatcher,yl=X.ReactCurrentOwner,xl=0,Ol=3,wl=4,jl=0,El=null,Sl=null,Al=0,kl=xl,Cl=null,Tl=1073741823,Pl=1073741823,Rl=null,_l=0,Ll=!1,Nl=0,Ml=null,Il=!1,Bl=null,zl=null,Dl=!1,Fl=null,Wl=90,$l=null,Ul=0,Vl=null,Hl=0;function ql(){return 0!=(48&jl)?1073741821-(Fo()/10|0):0!==Hl?Hl:Hl=1073741821-(Fo()/10|0)}function Gl(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Wo();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&jl))return Al;if(null!==n)e=Yo(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Yo(e,150,100);break;case 97:case 96:e=Yo(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==El&&e===Al&&--e,e}function Yl(e,t){if(50<Ul)throw Ul=0,Vl=null,Error(i(185));if(null!==(e=Kl(e,t))){var n=Wo();1073741823===t?0!=(8&jl)&&0==(48&jl)?Zl(e):(Jl(e),0===jl&&qo()):Jl(e),0==(4&jl)||98!==n&&99!==n||(null===$l?$l=new Map([[e,t]]):(void 0===(n=$l.get(e))||n>t)&&$l.set(e,t))}}function Kl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(El===o&&(ic(t),kl===wl&&Lc(o,Al)),Nc(o,t)),o}function Xl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!_c(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Jl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Ho(Zl.bind(null,e));else{var t=Xl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=ql();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Lo&&Eo(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Ho(Zl.bind(null,e)):Vo(r,Ql.bind(null,e),{timeout:10*(1073741821-t)-Fo()}),e.callbackNode=t}}}function Ql(e,t){if(Hl=0,t)return Mc(e,t=ql()),Jl(e),null;var n=Xl(e);if(0!==n){if(t=e.callbackNode,0!=(48&jl))throw Error(i(327));if(mc(),e===El&&n===Al||nc(e,n),null!==Sl){var r=jl;jl|=16;for(var o=oc();;)try{cc();break}catch(t){rc(e,t)}if(ea(),jl=r,gl.current=o,1===kl)throw t=Cl,nc(e,n),Lc(e,n),Jl(e),t;if(null===Sl)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=kl,El=null,r){case xl:case 1:throw Error(i(345));case 2:Mc(e,2<n?2:n);break;case Ol:if(Lc(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=dc(o)),1073741823===Tl&&10<(o=Nl+500-Fo())){if(Ll){var a=e.lastPingedTime;if(0===a||a>=n){e.lastPingedTime=n,nc(e,n);break}}if(0!==(a=Xl(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=yn(fc.bind(null,e),o);break}fc(e);break;case wl:if(Lc(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=dc(o)),Ll&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,nc(e,n);break}if(0!==(o=Xl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Pl?r=10*(1073741821-Pl)-Fo():1073741823===Tl?r=0:(r=10*(1073741821-Tl)-5e3,0>(r=(o=Fo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*vl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=yn(fc.bind(null,e),r);break}fc(e);break;case 5:if(1073741823!==Tl&&null!==Rl){a=Tl;var l=Rl;if(0>=(r=0|l.busyMinDurationMs)?r=0:(o=0|l.busyDelayMs,r=(a=Fo()-(10*(1073741821-a)-(0|l.timeoutMs||5e3)))<=o?0:o+r-a),10<r){Lc(e,n),e.timeoutHandle=yn(fc.bind(null,e),r);break}}fc(e);break;default:throw Error(i(329))}if(Jl(e),e.callbackNode===t)return Ql.bind(null,e)}}return null}function Zl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&jl))throw Error(i(327));if(mc(),e===El&&t===Al||nc(e,t),null!==Sl){var n=jl;jl|=16;for(var r=oc();;)try{lc();break}catch(t){rc(e,t)}if(ea(),jl=n,gl.current=r,1===kl)throw n=Cl,nc(e,t),Lc(e,t),Jl(e),n;if(null!==Sl)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,El=null,fc(e),Jl(e)}return null}function ec(e,t){var n=jl;jl|=1;try{return e(t)}finally{0===(jl=n)&&qo()}}function tc(e,t){var n=jl;jl&=-2,jl|=8;try{return e(t)}finally{0===(jl=n)&&qo()}}function nc(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,xn(n)),null!==Sl)for(n=Sl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&vo();break;case 3:La(),co(po),co(fo);break;case 5:Ma(r);break;case 4:La();break;case 13:case 19:co(Ia);break;case 10:ta(r)}n=n.return}El=e,Sl=Ac(e.current,null),Al=t,kl=xl,Cl=null,Pl=Tl=1073741823,Rl=null,_l=0,Ll=!1}function rc(e,t){for(;;){try{if(ea(),Da.current=bi,Ha)for(var n=$a.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Wa=0,Va=Ua=$a=null,Ha=!1,null===Sl||null===Sl.return)return kl=1,Cl=t,Sl=null;e:{var o=e,a=Sl.return,i=Sl,l=t;if(t=Al,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&i.mode)){var s=i.alternate;s?(i.updateQueue=s.updateQueue,i.memoizedState=s.memoizedState,i.expirationTime=s.expirationTime):(i.updateQueue=null,i.memoizedState=null)}var u=0!=(1&Ia.current),d=a;do{var f;if(f=13===d.tag){var p=d.memoizedState;if(null!==p)f=null!==p.dehydrated;else{var h=d.memoizedProps;f=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!u)}}if(f){var m=d.updateQueue;if(null===m){var b=new Set;b.add(c),d.updateQueue=b}else m.add(c);if(0==(2&d.mode)){if(d.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var v=ca(1073741823,null);v.tag=2,sa(i,v)}i.expirationTime=1073741823;break e}l=void 0,i=t;var g=o.pingCache;if(null===g?(g=o.pingCache=new pl,l=new Set,g.set(c,l)):void 0===(l=g.get(c))&&(l=new Set,g.set(c,l)),!l.has(i)){l.add(i);var y=yc.bind(null,o,c,i);c.then(y,y)}d.effectTag|=4096,d.expirationTime=t;break e}d=d.return}while(null!==d);l=Error((be(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ve(i))}5!==kl&&(kl=2),l=Qi(l,i),d=a;do{switch(d.tag){case 3:c=l,d.effectTag|=4096,d.expirationTime=t,ua(d,hl(d,c,t));break e;case 1:c=l;var x=d.type,O=d.stateNode;if(0==(64&d.effectTag)&&("function"==typeof x.getDerivedStateFromError||null!==O&&"function"==typeof O.componentDidCatch&&(null===zl||!zl.has(O)))){d.effectTag|=4096,d.expirationTime=t,ua(d,ml(d,c,t));break e}}d=d.return}while(null!==d)}Sl=uc(Sl)}catch(e){t=e;continue}break}}function oc(){var e=gl.current;return gl.current=bi,null===e?bi:e}function ac(e,t){e<Tl&&2<e&&(Tl=e),null!==t&&e<Pl&&2<e&&(Pl=e,Rl=t)}function ic(e){e>_l&&(_l=e)}function lc(){for(;null!==Sl;)Sl=sc(Sl)}function cc(){for(;null!==Sl&&!No();)Sl=sc(Sl)}function sc(e){var t=bl(e.alternate,e,Al);return e.memoizedProps=e.pendingProps,null===t&&(t=uc(e)),yl.current=null,t}function uc(e){Sl=e;do{var t=Sl.alternate;if(e=Sl.return,0==(2048&Sl.effectTag)){if(t=Xi(t,Sl,Al),1===Al||1!==Sl.childExpirationTime){for(var n=0,r=Sl.child;null!==r;){var o=r.expirationTime,a=r.childExpirationTime;o>n&&(n=o),a>n&&(n=a),r=r.sibling}Sl.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Sl.firstEffect),null!==Sl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Sl.firstEffect),e.lastEffect=Sl.lastEffect),1<Sl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Sl:e.firstEffect=Sl,e.lastEffect=Sl))}else{if(null!==(t=Ji(Sl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Sl.sibling))return t;Sl=e}while(null!==Sl);return kl===xl&&(kl=5),null}function dc(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function fc(e){var t=Wo();return Uo(99,pc.bind(null,e,t)),null}function pc(e,t){do{mc()}while(null!==Fl);if(0!=(48&jl))throw Error(i(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=dc(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===El&&(Sl=El=null,Al=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var a=jl;jl|=32,yl.current=null,mn=qt;var l=pn();if(hn(l)){if("selectionStart"in l)var c={start:l.selectionStart,end:l.selectionEnd};else e:{var s=(c=(c=l.ownerDocument)&&c.defaultView||window).getSelection&&c.getSelection();if(s&&0!==s.rangeCount){c=s.anchorNode;var u=s.anchorOffset,d=s.focusNode;s=s.focusOffset;try{c.nodeType,d.nodeType}catch(e){c=null;break e}var f=0,p=-1,h=-1,m=0,b=0,v=l,g=null;t:for(;;){for(var y;v!==c||0!==u&&3!==v.nodeType||(p=f+u),v!==d||0!==s&&3!==v.nodeType||(h=f+s),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===l)break t;if(g===c&&++m===u&&(p=f),g===d&&++b===s&&(h=f),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}c=-1===p||-1===h?null:{start:p,end:h}}else c=null}c=c||{start:0,end:0}}else c=null;bn={activeElementDetached:null,focusedElem:l,selectionRange:c},qt=!1,Ml=o;do{try{hc()}catch(e){if(null===Ml)throw Error(i(330));gc(Ml,e),Ml=Ml.nextEffect}}while(null!==Ml);Ml=o;do{try{for(l=e,c=t;null!==Ml;){var x=Ml.effectTag;if(16&x&&Fe(Ml.stateNode,""),128&x){var O=Ml.alternate;if(null!==O){var w=O.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&x){case 2:sl(Ml),Ml.effectTag&=-3;break;case 6:sl(Ml),Ml.effectTag&=-3,dl(Ml.alternate,Ml);break;case 1024:Ml.effectTag&=-1025;break;case 1028:Ml.effectTag&=-1025,dl(Ml.alternate,Ml);break;case 4:dl(Ml.alternate,Ml);break;case 8:ul(l,u=Ml,c),ll(u)}Ml=Ml.nextEffect}}catch(e){if(null===Ml)throw Error(i(330));gc(Ml,e),Ml=Ml.nextEffect}}while(null!==Ml);if(w=bn,O=pn(),x=w.focusedElem,c=w.selectionRange,O!==x&&x&&x.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(x.ownerDocument.documentElement,x)){null!==c&&hn(x)&&(O=c.start,void 0===(w=c.end)&&(w=O),"selectionStart"in x?(x.selectionStart=O,x.selectionEnd=Math.min(w,x.value.length)):(w=(O=x.ownerDocument||document)&&O.defaultView||window).getSelection&&(w=w.getSelection(),u=x.textContent.length,l=Math.min(c.start,u),c=void 0===c.end?l:Math.min(c.end,u),!w.extend&&l>c&&(u=c,c=l,l=u),u=fn(x,l),d=fn(x,c),u&&d&&(1!==w.rangeCount||w.anchorNode!==u.node||w.anchorOffset!==u.offset||w.focusNode!==d.node||w.focusOffset!==d.offset)&&((O=O.createRange()).setStart(u.node,u.offset),w.removeAllRanges(),l>c?(w.addRange(O),w.extend(d.node,d.offset)):(O.setEnd(d.node,d.offset),w.addRange(O))))),O=[];for(w=x;w=w.parentNode;)1===w.nodeType&&O.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof x.focus&&x.focus(),x=0;x<O.length;x++)(w=O[x]).element.scrollLeft=w.left,w.element.scrollTop=w.top}qt=!!mn,bn=mn=null,e.current=n,Ml=o;do{try{for(x=e;null!==Ml;){var j=Ml.effectTag;if(36&j&&al(x,Ml.alternate,Ml),128&j){O=void 0;var E=Ml.ref;if(null!==E){var S=Ml.stateNode;switch(Ml.tag){case 5:O=S;break;default:O=S}"function"==typeof E?E(O):E.current=O}}Ml=Ml.nextEffect}}catch(e){if(null===Ml)throw Error(i(330));gc(Ml,e),Ml=Ml.nextEffect}}while(null!==Ml);Ml=null,Mo(),jl=a}else e.current=n;if(Dl)Dl=!1,Fl=e,Wl=t;else for(Ml=o;null!==Ml;)t=Ml.nextEffect,Ml.nextEffect=null,Ml=t;if(0===(t=e.firstPendingTime)&&(zl=null),1073741823===t?e===Vl?Ul++:(Ul=0,Vl=e):Ul=0,"function"==typeof Oc&&Oc(n.stateNode,r),Jl(e),Il)throw Il=!1,e=Bl,Bl=null,e;return 0!=(8&jl)||qo(),null}function hc(){for(;null!==Ml;){var e=Ml.effectTag;0!=(256&e)&&nl(Ml.alternate,Ml),0==(512&e)||Dl||(Dl=!0,Vo(97,(function(){return mc(),null}))),Ml=Ml.nextEffect}}function mc(){if(90!==Wl){var e=97<Wl?97:Wl;return Wl=90,Uo(e,bc)}}function bc(){if(null===Fl)return!1;var e=Fl;if(Fl=null,0!=(48&jl))throw Error(i(331));var t=jl;for(jl|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rl(5,n),ol(5,n)}}catch(t){if(null===e)throw Error(i(330));gc(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return jl=t,qo(),!0}function vc(e,t,n){sa(e,t=hl(e,t=Qi(n,t),1073741823)),null!==(e=Kl(e,1073741823))&&Jl(e)}function gc(e,t){if(3===e.tag)vc(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){vc(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===zl||!zl.has(r))){sa(n,e=ml(n,e=Qi(t,e),1073741823)),null!==(n=Kl(n,1073741823))&&Jl(n);break}}n=n.return}}function yc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),El===e&&Al===n?kl===wl||kl===Ol&&1073741823===Tl&&Fo()-Nl<500?nc(e,Al):Ll=!0:_c(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Jl(e)))}function xc(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Gl(t=ql(),e,null)),null!==(e=Kl(e,t))&&Jl(e)}bl=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)Pi=!0;else{if(r<n){switch(Pi=!1,t.tag){case 3:Di(t),Ci();break;case 5:if(Na(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:bo(t.type)&&xo(t);break;case 4:_a(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,so(Xo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Vi(e,t,n):(so(Ia,1&Ia.current),null!==(t=Yi(e,t,n))?t.sibling:null);so(Ia,1&Ia.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Gi(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),so(Ia,Ia.current),!r)return null}return Yi(e,t,n)}Pi=!1}}else Pi=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=mo(t,fo.current),ra(t,n),o=Ya(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,bo(r)){var a=!0;xo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ia(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&ma(t,r,l,e),o.updater=ba,t.stateNode=o,o._reactInternalFiber=t,xa(t,r,e,n),t=zi(null,t,r,!0,a,n)}else t.tag=0,Ri(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,a=t.tag=function(e){if("function"==typeof e)return Sc(e)?1:0;if(null!=e){if((e=e.$$typeof)===ce)return 11;if(e===de)return 14}return 2}(o),e=Ko(o,e),a){case 0:t=Ii(null,t,o,e,n);break e;case 1:t=Bi(null,t,o,e,n);break e;case 11:t=_i(null,t,o,e,n);break e;case 14:t=Li(null,t,o,Ko(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ii(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 1:return r=t.type,o=t.pendingProps,Bi(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 3:if(Di(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,la(e,t),da(t,r,null,n),(r=t.memoizedState.element)===o)Ci(),t=Yi(e,t,n);else{if((o=t.stateNode.hydrate)&&(Oi=On(t.stateNode.containerInfo.firstChild),xi=t,o=wi=!0),o)for(n=Aa(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Ri(e,t,r,n),Ci();t=t.child}return t;case 5:return Na(t),null===e&&Si(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,gn(r,o)?l=null:null!==a&&gn(r,a)&&(t.effectTag|=16),Mi(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ri(e,t,l,n),t=t.child),t;case 6:return null===e&&Si(t),null;case 13:return Vi(e,t,n);case 4:return _a(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Sa(t,null,r,n):Ri(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,_i(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 7:return Ri(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ri(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var c=t.type._context;if(so(Xo,c._currentValue),c._currentValue=a,null!==l)if(c=l.value,0===(a=Br(c,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(c,a):1073741823))){if(l.children===o.children&&!po.current){t=Yi(e,t,n);break e}}else for(null!==(c=t.child)&&(c.return=t);null!==c;){var s=c.dependencies;if(null!==s){l=c.child;for(var u=s.firstContext;null!==u;){if(u.context===r&&0!=(u.observedBits&a)){1===c.tag&&((u=ca(n,null)).tag=2,sa(c,u)),c.expirationTime<n&&(c.expirationTime=n),null!==(u=c.alternate)&&u.expirationTime<n&&(u.expirationTime=n),na(c.return,n),s.expirationTime<n&&(s.expirationTime=n);break}u=u.next}}else l=10===c.tag&&c.type===t.type?null:c.child;if(null!==l)l.return=c;else for(l=c;null!==l;){if(l===t){l=null;break}if(null!==(c=l.sibling)){c.return=l.return,l=c;break}l=l.return}c=l}Ri(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,ra(t,n),r=r(o=oa(o,a.unstable_observedBits)),t.effectTag|=1,Ri(e,t,r,n),t.child;case 14:return a=Ko(o=t.type,t.pendingProps),Li(e,t,o,a=Ko(o.type,a),r,n);case 15:return Ni(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ko(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,bo(r)?(e=!0,xo(t)):e=!1,ra(t,n),ga(t,r,o),xa(t,r,o,n),zi(null,t,r,!0,e,n);case 19:return Gi(e,t,n)}throw Error(i(156,t.tag))};var Oc=null,wc=null;function jc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Ec(e,t,n,r){return new jc(e,t,n,r)}function Sc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ac(e,t){var n=e.alternate;return null===n?((n=Ec(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function kc(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Sc(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return Cc(n.children,o,a,t);case le:l=8,o|=7;break;case re:l=8,o|=1;break;case oe:return(e=Ec(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=a,e;case se:return(e=Ec(13,n,t,o)).type=se,e.elementType=se,e.expirationTime=a,e;case ue:return(e=Ec(19,n,t,o)).elementType=ue,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ae:l=10;break e;case ie:l=9;break e;case ce:l=11;break e;case de:l=14;break e;case fe:l=16,r=null;break e;case pe:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ec(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=a,t}function Cc(e,t,n,r){return(e=Ec(7,e,r,t)).expirationTime=n,e}function Tc(e,t,n){return(e=Ec(6,e,null,t)).expirationTime=n,e}function Pc(e,t,n){return(t=Ec(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Rc(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function _c(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Lc(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Nc(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Mc(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Ic(e,t,n,r){var o=t.current,a=ql(),l=pa.suspense;a=Gl(a,o,l);e:if(n){t:{if(Ze(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(i(170));var c=n;do{switch(c.tag){case 3:c=c.stateNode.context;break t;case 1:if(bo(c.type)){c=c.stateNode.__reactInternalMemoizedMergedChildContext;break t}}c=c.return}while(null!==c);throw Error(i(171))}if(1===n.tag){var s=n.type;if(bo(s)){n=yo(n,s,c);break e}}n=c}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=ca(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),sa(o,t),Yl(o,a),a}function Bc(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function zc(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Dc(e,t){zc(e,t),(e=e.alternate)&&zc(e,t)}function Fc(e,t,n){var r=new Rc(e,t,n=null!=n&&!0===n.hydrate),o=Ec(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ia(o),e[An]=r.current,n&&0!==t&&function(e,t){var n=Qe(t);At.forEach((function(e){ht(e,t,n)})),kt.forEach((function(e){ht(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Wc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function $c(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Bc(i);l.call(e)}}Ic(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Fc(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var c=o;o=function(){var e=Bc(i);c.call(e)}}tc((function(){Ic(t,i,e,o)}))}return Bc(i)}function Uc(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Vc(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Wc(t))throw Error(i(200));return Uc(e,t,null,n)}Fc.prototype.render=function(e){Ic(e,this._internalRoot,null,null)},Fc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ic(null,e,null,(function(){t[An]=null}))},mt=function(e){if(13===e.tag){var t=Yo(ql(),150,100);Yl(e,t),Dc(e,t)}},bt=function(e){13===e.tag&&(Yl(e,3),Dc(e,3))},vt=function(e){if(13===e.tag){var t=ql();Yl(e,t=Gl(t,e,null)),Dc(e,t)}},C=function(e,t,n){switch(t){case"input":if(Se(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Pn(r);if(!o)throw Error(i(90));Oe(r),Se(r,o)}}}break;case"textarea":_e(e,n);break;case"select":null!=(t=n.value)&&Te(e,!!n.multiple,t,!1)}},N=ec,M=function(e,t,n,r,o){var a=jl;jl|=4;try{return Uo(98,e.bind(null,t,n,r,o))}finally{0===(jl=a)&&qo()}},I=function(){0==(49&jl)&&(function(){if(null!==$l){var e=$l;$l=null,e.forEach((function(e,t){Mc(t,e),Jl(t)})),qo()}}(),mc())},B=function(e,t){var n=jl;jl|=2;try{return e(t)}finally{0===(jl=n)&&qo()}};var Hc,qc,Gc={Events:[Cn,Tn,Pn,A,j,Bn,function(e){ot(e,In)},_,L,Jt,lt,mc,{current:!1}]};qc=(Hc={findFiberByHostInstance:kn,bundleType:0,version:"16.14.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Oc=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},wc=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},Hc,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:X.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return qc?qc(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Gc,t.createPortal=Vc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&jl))throw Error(i(187));var n=jl;jl|=1;try{return Uo(99,e.bind(null,t))}finally{jl=n,qo()}},t.hydrate=function(e,t,n){if(!Wc(t))throw Error(i(200));return $c(null,e,t,!0,n)},t.render=function(e,t,n){if(!Wc(t))throw Error(i(200));return $c(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Wc(e))throw Error(i(40));return!!e._reactRootContainer&&(tc((function(){$c(null,null,e,!1,(function(){e._reactRootContainer=null,e[An]=null}))})),!0)},t.unstable_batchedUpdates=ec,t.unstable_createPortal=function(e,t){return Vc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Wc(n))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return $c(e,t,n,!1,r)},t.version="16.14.0"},function(e,t,n){"use strict";e.exports=n(167)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,a,i,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,s=null,u=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(u,0),e}},d=Date.now();t.unstable_now=function(){return Date.now()-d},r=function(e){null!==c?setTimeout(r,0,e):(c=e,setTimeout(u,0))},o=function(e,t){s=setTimeout(e,t)},a=function(){clearTimeout(s)},i=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,p=window.Date,h=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var b=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof f&&"function"==typeof f.now)t.unstable_now=function(){return f.now()};else{var v=p.now();t.unstable_now=function(){return p.now()-v}}var g=!1,y=null,x=-1,O=5,w=0;i=function(){return t.unstable_now()>=w},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):O=0<e?Math.floor(1e3/e):5};var j=new MessageChannel,E=j.port2;j.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();w=e+O;try{y(!0,e)?E.postMessage(null):(g=!1,y=null)}catch(e){throw E.postMessage(null),e}}else g=!1},r=function(e){y=e,g||(g=!0,E.postMessage(null))},o=function(e,n){x=h((function(){e(t.unstable_now())}),n)},a=function(){m(x),x=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function A(e){return void 0===(e=e[0])?null:e}function k(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,c=e[l];if(void 0!==i&&0>C(i,n))void 0!==c&&0>C(c,i)?(e[r]=c,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==c&&0>C(c,n)))break e;e[r]=c,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var T=[],P=[],R=1,_=null,L=3,N=!1,M=!1,I=!1;function B(e){for(var t=A(P);null!==t;){if(null===t.callback)k(P);else{if(!(t.startTime<=e))break;k(P),t.sortIndex=t.expirationTime,S(T,t)}t=A(P)}}function z(e){if(I=!1,B(e),!M)if(null!==A(T))M=!0,r(D);else{var t=A(P);null!==t&&o(z,t.startTime-e)}}function D(e,n){M=!1,I&&(I=!1,a()),N=!0;var r=L;try{for(B(n),_=A(T);null!==_&&(!(_.expirationTime>n)||e&&!i());){var l=_.callback;if(null!==l){_.callback=null,L=_.priorityLevel;var c=l(_.expirationTime<=n);n=t.unstable_now(),"function"==typeof c?_.callback=c:_===A(T)&&k(T),B(n)}else k(T);_=A(T)}if(null!==_)var s=!0;else{var u=A(P);null!==u&&o(z,u.startTime-n),s=!1}return s}finally{_=null,L=r,N=!1}}function F(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var W=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||N||(M=!0,r(D))},t.unstable_getCurrentPriorityLevel=function(){return L},t.unstable_getFirstCallbackNode=function(){return A(T)},t.unstable_next=function(e){switch(L){case 1:case 2:case 3:var t=3;break;default:t=L}var n=L;L=t;try{return e()}finally{L=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=W,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=L;L=e;try{return t()}finally{L=n}},t.unstable_scheduleCallback=function(e,n,i){var l=t.unstable_now();if("object"==typeof i&&null!==i){var c=i.delay;c="number"==typeof c&&0<c?l+c:l,i="number"==typeof i.timeout?i.timeout:F(e)}else i=F(e),c=l;return e={id:R++,callback:n,priorityLevel:e,startTime:c,expirationTime:i=c+i,sortIndex:-1},c>l?(e.sortIndex=c,S(P,e),null===A(T)&&e===A(P)&&(I?a():I=!0,o(z,c-l))):(e.sortIndex=i,S(T,e),M||N||(M=!0,r(D))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();B(e);var n=A(T);return n!==_&&null!==_&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<_.expirationTime||i()},t.unstable_wrapCallback=function(e){var t=L;return function(){var n=L;L=t;try{return e.apply(this,arguments)}finally{L=n}}}},function(e,t,n){"use strict";
/** @license React v16.14.0
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=60103;if(t.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var a=Symbol.for;o=a("react.element"),t.Fragment=a("react.fragment")}var i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l=Object.prototype.hasOwnProperty,c={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,a={},s=null,u=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(u=t.ref),t)l.call(t,r)&&!c.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:o,type:e,key:s,ref:u,props:a,_owner:i.current}}t.jsx=s,t.jsxs=s},function(e,t,n){"use strict";e.exports=n(170)},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,c=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,b=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,y=r?Symbol.for("react.fundamental"):60117,x=r?Symbol.for("react.responder"):60118,O=r?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case d:case f:case i:case c:case l:case h:return e;default:switch(e=e&&e.$$typeof){case u:case p:case v:case b:case s:return e;default:return t}}case a:return t}}}function j(e){return w(e)===f}t.AsyncMode=d,t.ConcurrentMode=f,t.ContextConsumer=u,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=v,t.Memo=b,t.Portal=a,t.Profiler=c,t.StrictMode=l,t.Suspense=h,t.isAsyncMode=function(e){return j(e)||w(e)===d},t.isConcurrentMode=j,t.isContextConsumer=function(e){return w(e)===u},t.isContextProvider=function(e){return w(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return w(e)===p},t.isFragment=function(e){return w(e)===i},t.isLazy=function(e){return w(e)===v},t.isMemo=function(e){return w(e)===b},t.isPortal=function(e){return w(e)===a},t.isProfiler=function(e){return w(e)===c},t.isStrictMode=function(e){return w(e)===l},t.isSuspense=function(e){return w(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===c||e===l||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===b||e.$$typeof===s||e.$$typeof===u||e.$$typeof===p||e.$$typeof===y||e.$$typeof===x||e.$$typeof===O||e.$$typeof===g)},t.typeOf=w},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(172),o=n(173),a=n(174);function i(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function l(e,t){if(i()<t)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=c.prototype:(null===e&&(e=new c(t)),e.length=t),e}function c(e,t,n){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return d(this,e)}return s(this,e,t,n)}function s(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);c.TYPED_ARRAY_SUPPORT?(e=t).__proto__=c.prototype:e=f(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!c.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|h(t,n),o=(e=l(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(c.isBuffer(t)){var n=0|p(t.length);return 0===(e=l(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?l(e,0):f(e,t);if("Buffer"===t.type&&a(t.data))return f(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function d(e,t){if(u(t),e=l(e,t<0?0:0|p(t)),!c.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function f(e,t){var n=t.length<0?0:0|p(t.length);e=l(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function p(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function h(e,t){if(c.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return F(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return W(e).length;default:if(r)return F(e).length;t=(""+t).toLowerCase(),r=!0}}function m(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return T(this,t,n);case"utf8":case"utf-8":return A(this,t,n);case"ascii":return k(this,t,n);case"latin1":case"binary":return C(this,t,n);case"base64":return S(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function b(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function v(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=c.from(t,r)),c.isBuffer(t))return 0===t.length?-1:g(e,t,n,r,o);if("number"==typeof t)return t&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):g(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function g(e,t,n,r,o){var a,i=1,l=e.length,c=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;i=2,l/=2,c/=2,n/=2}function s(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(o){var u=-1;for(a=n;a<l;a++)if(s(e,a)===s(t,-1===u?0:a-u)){if(-1===u&&(u=a),a-u+1===c)return u*i}else-1!==u&&(a-=a-u),u=-1}else for(n+c>l&&(n=l-c),a=n;a>=0;a--){for(var d=!0,f=0;f<c;f++)if(s(e,a+f)!==s(t,f)){d=!1;break}if(d)return a}return-1}function y(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var a=t.length;if(a%2!=0)throw new TypeError("Invalid hex string");r>a/2&&(r=a/2);for(var i=0;i<r;++i){var l=parseInt(t.substr(2*i,2),16);if(isNaN(l))return i;e[n+i]=l}return i}function x(e,t,n,r){return $(F(t,e.length-n),e,n,r)}function O(e,t,n,r){return $(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function w(e,t,n,r){return O(e,t,n,r)}function j(e,t,n,r){return $(W(t),e,n,r)}function E(e,t,n,r){return $(function(e,t){for(var n,r,o,a=[],i=0;i<e.length&&!((t-=2)<0);++i)n=e.charCodeAt(i),r=n>>8,o=n%256,a.push(o),a.push(r);return a}(t,e.length-n),e,n,r)}function S(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function A(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var a,i,l,c,s=e[o],u=null,d=s>239?4:s>223?3:s>191?2:1;if(o+d<=n)switch(d){case 1:s<128&&(u=s);break;case 2:128==(192&(a=e[o+1]))&&(c=(31&s)<<6|63&a)>127&&(u=c);break;case 3:a=e[o+1],i=e[o+2],128==(192&a)&&128==(192&i)&&(c=(15&s)<<12|(63&a)<<6|63&i)>2047&&(c<55296||c>57343)&&(u=c);break;case 4:a=e[o+1],i=e[o+2],l=e[o+3],128==(192&a)&&128==(192&i)&&128==(192&l)&&(c=(15&s)<<18|(63&a)<<12|(63&i)<<6|63&l)>65535&&c<1114112&&(u=c)}null===u?(u=65533,d=1):u>65535&&(u-=65536,r.push(u>>>10&1023|55296),u=56320|1023&u),r.push(u),o+=d}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}(r)}t.Buffer=c,t.SlowBuffer=function(e){+e!=e&&(e=0);return c.alloc(+e)},t.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=i(),c.poolSize=8192,c._augment=function(e){return e.__proto__=c.prototype,e},c.from=function(e,t,n){return s(null,e,t,n)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(e,t,n){return function(e,t,n,r){return u(t),t<=0?l(e,t):void 0!==n?"string"==typeof r?l(e,t).fill(n,r):l(e,t).fill(n):l(e,t)}(null,e,t,n)},c.allocUnsafe=function(e){return d(null,e)},c.allocUnsafeSlow=function(e){return d(null,e)},c.isBuffer=function(e){return!(null==e||!e._isBuffer)},c.compare=function(e,t){if(!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,a=Math.min(n,r);o<a;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!a(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=c.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var i=e[n];if(!c.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(r,o),o+=i.length}return r},c.byteLength=h,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)b(this,t,t+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},c.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?A(this,0,e):m.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},c.prototype.compare=function(e,t,n,r,o){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(this===e)return 0;for(var a=(o>>>=0)-(r>>>=0),i=(n>>>=0)-(t>>>=0),l=Math.min(a,i),s=this.slice(r,o),u=e.slice(t,n),d=0;d<l;++d)if(s[d]!==u[d]){a=s[d],i=u[d];break}return a<i?-1:i<a?1:0},c.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},c.prototype.indexOf=function(e,t,n){return v(this,e,t,n,!0)},c.prototype.lastIndexOf=function(e,t,n){return v(this,e,t,n,!1)},c.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var a=!1;;)switch(r){case"hex":return y(this,e,t,n);case"utf8":case"utf-8":return x(this,e,t,n);case"ascii":return O(this,e,t,n);case"latin1":case"binary":return w(this,e,t,n);case"base64":return j(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function k(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function C(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function T(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",a=t;a<n;++a)o+=D(e[a]);return o}function P(e,t,n){for(var r=e.slice(t,n),o="",a=0;a<r.length;a+=2)o+=String.fromCharCode(r[a]+256*r[a+1]);return o}function R(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function _(e,t,n,r,o,a){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<a)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function L(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,a=Math.min(e.length-n,2);o<a;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function N(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,a=Math.min(e.length-n,4);o<a;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function M(e,t,n,r,o,a){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function I(e,t,n,r,a){return a||M(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function B(e,t,n,r,a){return a||M(e,0,n,8),o.write(e,t,n,r,52,8),n+8}c.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),c.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=c.prototype;else{var o=t-e;n=new c(o,void 0);for(var a=0;a<o;++a)n[a]=this[a+e]}return n},c.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e],o=1,a=0;++a<t&&(o*=256);)r+=this[e+a]*o;return r},c.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},c.prototype.readUInt8=function(e,t){return t||R(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,t){return t||R(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,t){return t||R(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,t){return t||R(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,t){return t||R(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e],o=1,a=0;++a<t&&(o*=256);)r+=this[e+a]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},c.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=t,o=1,a=this[e+--r];r>0&&(o*=256);)a+=this[e+--r]*o;return a>=(o*=128)&&(a-=Math.pow(2,8*t)),a},c.prototype.readInt8=function(e,t){return t||R(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){t||R(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(e,t){t||R(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(e,t){return t||R(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return t||R(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,t){return t||R(e,4,this.length),o.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return t||R(e,4,this.length),o.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return t||R(e,8,this.length),o.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return t||R(e,8,this.length),o.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||_(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,a=0;for(this[t]=255&e;++a<n&&(o*=256);)this[t+a]=e/o&255;return t+n},c.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||_(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,a=1;for(this[t+o]=255&e;--o>=0&&(a*=256);)this[t+o]=e/a&255;return t+n},c.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||_(this,e,t,1,255,0),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},c.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||_(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},c.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||_(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},c.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||_(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):N(this,e,t,!0),t+4},c.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||_(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):N(this,e,t,!1),t+4},c.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);_(this,e,t,n,o-1,-o)}var a=0,i=1,l=0;for(this[t]=255&e;++a<n&&(i*=256);)e<0&&0===l&&0!==this[t+a-1]&&(l=1),this[t+a]=(e/i>>0)-l&255;return t+n},c.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);_(this,e,t,n,o-1,-o)}var a=n-1,i=1,l=0;for(this[t+a]=255&e;--a>=0&&(i*=256);)e<0&&0===l&&0!==this[t+a+1]&&(l=1),this[t+a]=(e/i>>0)-l&255;return t+n},c.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||_(this,e,t,1,127,-128),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||_(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},c.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||_(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},c.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||_(this,e,t,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):N(this,e,t,!0),t+4},c.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||_(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):N(this,e,t,!1),t+4},c.prototype.writeFloatLE=function(e,t,n){return I(this,e,t,!0,n)},c.prototype.writeFloatBE=function(e,t,n){return I(this,e,t,!1,n)},c.prototype.writeDoubleLE=function(e,t,n){return B(this,e,t,!0,n)},c.prototype.writeDoubleBE=function(e,t,n){return B(this,e,t,!1,n)},c.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,a=r-n;if(this===e&&n<t&&t<r)for(o=a-1;o>=0;--o)e[o+t]=this[o+n];else if(a<1e3||!c.TYPED_ARRAY_SUPPORT)for(o=0;o<a;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+a),t);return a},c.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var a;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(a=t;a<n;++a)this[a]=e;else{var i=c.isBuffer(e)?e:F(new c(e,r).toString()),l=i.length;for(a=0;a<n-t;++a)this[a+t]=i[a%l]}return this};var z=/[^+\/0-9A-Za-z-_]/g;function D(e){return e<16?"0"+e.toString(16):e.toString(16)}function F(e,t){var n;t=t||1/0;for(var r=e.length,o=null,a=[],i=0;i<r;++i){if((n=e.charCodeAt(i))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(i+1===r){(t-=3)>-1&&a.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&a.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function W(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(z,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function $(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(97))},function(e,t,n){"use strict";t.byteLength=function(e){var t=s(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,r=s(e),i=r[0],l=r[1],c=new a(function(e,t,n){return 3*(t+n)/4-n}(0,i,l)),u=0,d=l>0?i-4:i;for(n=0;n<d;n+=4)t=o[e.charCodeAt(n)]<<18|o[e.charCodeAt(n+1)]<<12|o[e.charCodeAt(n+2)]<<6|o[e.charCodeAt(n+3)],c[u++]=t>>16&255,c[u++]=t>>8&255,c[u++]=255&t;2===l&&(t=o[e.charCodeAt(n)]<<2|o[e.charCodeAt(n+1)]>>4,c[u++]=255&t);1===l&&(t=o[e.charCodeAt(n)]<<10|o[e.charCodeAt(n+1)]<<4|o[e.charCodeAt(n+2)]>>2,c[u++]=t>>8&255,c[u++]=255&t);return c},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,a=[],i=0,l=n-o;i<l;i+=16383)a.push(u(e,i,i+16383>l?l:i+16383));1===o?(t=e[n-1],a.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],a.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return a.join("")};for(var r=[],o=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",l=0,c=i.length;l<c;++l)r[l]=i[l],o[i.charCodeAt(l)]=l;function s(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function u(e,t,n){for(var o,a,i=[],l=t;l<n;l+=3)o=(e[l]<<16&16711680)+(e[l+1]<<8&65280)+(255&e[l+2]),i.push(r[(a=o)>>18&63]+r[a>>12&63]+r[a>>6&63]+r[63&a]);return i.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
t.read=function(e,t,n,r,o){var a,i,l=8*o-r-1,c=(1<<l)-1,s=c>>1,u=-7,d=n?o-1:0,f=n?-1:1,p=e[t+d];for(d+=f,a=p&(1<<-u)-1,p>>=-u,u+=l;u>0;a=256*a+e[t+d],d+=f,u-=8);for(i=a&(1<<-u)-1,a>>=-u,u+=r;u>0;i=256*i+e[t+d],d+=f,u-=8);if(0===a)a=1-s;else{if(a===c)return i?NaN:1/0*(p?-1:1);i+=Math.pow(2,r),a-=s}return(p?-1:1)*i*Math.pow(2,a-r)},t.write=function(e,t,n,r,o,a){var i,l,c,s=8*a-o-1,u=(1<<s)-1,d=u>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:a-1,h=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(l=isNaN(t)?1:0,i=u):(i=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-i))<1&&(i--,c*=2),(t+=i+d>=1?f/c:f*Math.pow(2,1-d))*c>=2&&(i++,c/=2),i+d>=u?(l=0,i=u):i+d>=1?(l=(t*c-1)*Math.pow(2,o),i+=d):(l=t*Math.pow(2,d-1)*Math.pow(2,o),i=0));o>=8;e[n+p]=255&l,p+=h,l/=256,o-=8);for(i=i<<o|l,s+=o;s>0;e[n+p]=255&i,p+=h,i/=256,s-=8);e[n+p-h]|=128*m}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){"use strict";
/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o=Symbol.for("react.element"),a=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),c=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),u=Symbol.for("react.context"),d=Symbol.for("react.server_context"),f=Symbol.for("react.forward_ref"),p=Symbol.for("react.suspense"),h=Symbol.for("react.suspense_list"),m=Symbol.for("react.memo"),b=Symbol.for("react.lazy"),v=Symbol.for("react.offscreen");function g(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case i:case c:case l:case p:case h:return e;default:switch(e=e&&e.$$typeof){case d:case u:case f:case b:case m:case s:return e;default:return t}}case a:return t}}}r=Symbol.for("react.module.reference"),t.ContextConsumer=u,t.ContextProvider=s,t.Element=o,t.ForwardRef=f,t.Fragment=i,t.Lazy=b,t.Memo=m,t.Portal=a,t.Profiler=c,t.StrictMode=l,t.Suspense=p,t.SuspenseList=h,t.isAsyncMode=function(){return!1},t.isConcurrentMode=function(){return!1},t.isContextConsumer=function(e){return g(e)===u},t.isContextProvider=function(e){return g(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return g(e)===f},t.isFragment=function(e){return g(e)===i},t.isLazy=function(e){return g(e)===b},t.isMemo=function(e){return g(e)===m},t.isPortal=function(e){return g(e)===a},t.isProfiler=function(e){return g(e)===c},t.isStrictMode=function(e){return g(e)===l},t.isSuspense=function(e){return g(e)===p},t.isSuspenseList=function(e){return g(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===c||e===l||e===p||e===h||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===b||e.$$typeof===m||e.$$typeof===s||e.$$typeof===u||e.$$typeof===f||e.$$typeof===r||void 0!==e.getModuleId)},t.typeOf=g},function(e,t,n){"use strict";var r=n(177);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){var r=n(30),o=n(179),a=n(181),i=Math.max,l=Math.min;e.exports=function(e,t,n){var c,s,u,d,f,p,h=0,m=!1,b=!1,v=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function g(t){var n=c,r=s;return c=s=void 0,h=t,d=e.apply(r,n)}function y(e){return h=e,f=setTimeout(O,t),m?g(e):d}function x(e){var n=e-p;return void 0===p||n>=t||n<0||b&&e-h>=u}function O(){var e=o();if(x(e))return w(e);f=setTimeout(O,function(e){var n=t-(e-p);return b?l(n,u-(e-h)):n}(e))}function w(e){return f=void 0,v&&c?g(e):(c=s=void 0,d)}function j(){var e=o(),n=x(e);if(c=arguments,s=this,p=e,n){if(void 0===f)return y(p);if(b)return clearTimeout(f),f=setTimeout(O,t),g(p)}return void 0===f&&(f=setTimeout(O,t)),d}return t=a(t)||0,r(n)&&(m=!!n.leading,u=(b="maxWait"in n)?i(a(n.maxWait)||0,t):u,v="trailing"in n?!!n.trailing:v),j.cancel=function(){void 0!==f&&clearTimeout(f),h=0,c=p=s=f=void 0},j.flush=function(){return void 0===f?d:w(o())},j}},function(e,t,n){var r=n(75);e.exports=function(){return r.Date.now()}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(97))},function(e,t,n){var r=n(182),o=n(30),a=n(76),i=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,c=/^0o[0-7]+$/i,s=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(a(e))return NaN;if(o(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=o(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=r(e);var n=l.test(e);return n||c.test(e)?s(e.slice(2),n?2:8):i.test(e)?NaN:+e}},function(e,t,n){var r=n(183),o=/^\s+/;e.exports=function(e){return e?e.slice(0,r(e)+1).replace(o,""):e}},function(e,t){var n=/\s/;e.exports=function(e){for(var t=e.length;t--&&n.test(e.charAt(t)););return t}},function(e,t,n){var r=n(99),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,l=r?r.toStringTag:void 0;e.exports=function(e){var t=a.call(e,l),n=e[l];try{e[l]=void 0;var r=!0}catch(e){}var o=i.call(e);return r&&(t?e[l]=n:delete e[l]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,c=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,b=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.block"):60121,y=r?Symbol.for("react.fundamental"):60117,x=r?Symbol.for("react.responder"):60118,O=r?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case d:case f:case i:case c:case l:case h:return e;default:switch(e=e&&e.$$typeof){case u:case p:case v:case b:case s:return e;default:return t}}case a:return t}}}function j(e){return w(e)===f}t.AsyncMode=d,t.ConcurrentMode=f,t.ContextConsumer=u,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=v,t.Memo=b,t.Portal=a,t.Profiler=c,t.StrictMode=l,t.Suspense=h,t.isAsyncMode=function(e){return j(e)||w(e)===d},t.isConcurrentMode=j,t.isContextConsumer=function(e){return w(e)===u},t.isContextProvider=function(e){return w(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return w(e)===p},t.isFragment=function(e){return w(e)===i},t.isLazy=function(e){return w(e)===v},t.isMemo=function(e){return w(e)===b},t.isPortal=function(e){return w(e)===a},t.isProfiler=function(e){return w(e)===c},t.isStrictMode=function(e){return w(e)===l},t.isSuspense=function(e){return w(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===c||e===l||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===b||e.$$typeof===s||e.$$typeof===u||e.$$typeof===p||e.$$typeof===y||e.$$typeof===x||e.$$typeof===O||e.$$typeof===g)},t.typeOf=w},function(e,t,n){var r=n(188),o=n(222);e.exports=function(e,t){for(var n=0,a=(t=r(t,e)).length;null!=e&&n<a;)e=e[o(t[n++])];return n&&n==a?e:void 0}},function(e,t,n){var r=n(78),o=n(189),a=n(190),i=n(219);e.exports=function(e,t){return r(e)?e:o(e,t)?[e]:a(i(e))}},function(e,t,n){var r=n(78),o=n(76),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;e.exports=function(e,t){if(r(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!o(e))||(i.test(e)||!a.test(e)||null!=t&&e in Object(t))}},function(e,t,n){var r=n(191),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,i=r((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(o,(function(e,n,r,o){t.push(r?o.replace(a,"$1"):n||e)})),t}));e.exports=i},function(e,t,n){var r=n(192);e.exports=function(e){var t=r(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}},function(e,t,n){var r=n(193);function o(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],a=n.cache;if(a.has(o))return a.get(o);var i=e.apply(this,r);return n.cache=a.set(o,i)||a,i};return n.cache=new(o.Cache||r),n}o.Cache=r,e.exports=o},function(e,t,n){var r=n(194),o=n(214),a=n(216),i=n(217),l=n(218);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=l,e.exports=c},function(e,t,n){var r=n(195),o=n(206),a=n(213);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(a||o),string:new r}}},function(e,t,n){var r=n(196),o=n(202),a=n(203),i=n(204),l=n(205);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=l,e.exports=c},function(e,t,n){var r=n(79);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t,n){var r=n(107),o=n(198),a=n(30),i=n(200),l=/^\[object .+?Constructor\]$/,c=Function.prototype,s=Object.prototype,u=c.toString,d=s.hasOwnProperty,f=RegExp("^"+u.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!a(e)||o(e))&&(r(e)?f:l).test(i(e))}},function(e,t,n){var r,o=n(199),a=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!a&&a in e}},function(e,t,n){var r=n(75)["__core-js_shared__"];e.exports=r},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(79),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return o.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(79),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(79);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},function(e,t,n){var r=n(207),o=n(208),a=n(210),i=n(211),l=n(212);function c(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=i,c.prototype.set=l,e.exports=c},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(80),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():o.call(t,n,1),--this.size,!0)}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(80);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(80);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(80);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(120)(n(75),"Map");e.exports=r},function(e,t,n){var r=n(81);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(81);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(81);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(81);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t,n){var r=n(220);e.exports=function(e){return null==e?"":r(e)}},function(e,t,n){var r=n(99),o=n(221),a=n(78),i=n(76),l=r?r.prototype:void 0,c=l?l.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(a(t))return o(t,e)+"";if(i(t))return c?c.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}},function(e,t,n){var r=n(76);e.exports=function(e){if("string"==typeof e||r(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"hasBrowserEnv",(function(){return Oe})),n.d(r,"hasStandardBrowserWebWorkerEnv",(function(){return Ee})),n.d(r,"hasStandardBrowserEnv",(function(){return we}));var o,a=n(0),i=n.n(a),l=n(27),c=n.n(l);
/**
 * @remix-run/router v1.15.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function s(){return(s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(o||(o={}));function u(e){return void 0===e&&(e={}),v((function(e,t){let{pathname:n,search:r,hash:o}=e.location;return h("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:m(t)}),null,e)}function d(e,t){if(!1===e||null==e)throw new Error(t)}function f(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function p(e,t){return{usr:e.state,key:e.key,idx:t}}function h(e,t,n,r){return void 0===n&&(n=null),s({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?b(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function m(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function b(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}function v(e,t,n,r){void 0===r&&(r={});let{window:a=document.defaultView,v5Compat:i=!1}=r,l=a.history,c=o.Pop,u=null,f=b();function b(){return(l.state||{idx:null}).idx}function v(){c=o.Pop;let e=b(),t=null==e?null:e-f;f=e,u&&u({action:c,location:y.location,delta:t})}function g(e){let t="null"!==a.location.origin?a.location.origin:a.location.href,n="string"==typeof e?e:m(e);return d(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==f&&(f=0,l.replaceState(s({},l.state,{idx:f}),""));let y={get action(){return c},get location(){return e(a,l)},listen(e){if(u)throw new Error("A history only accepts one active listener");return a.addEventListener("popstate",v),u=e,()=>{a.removeEventListener("popstate",v),u=null}},createHref:e=>t(a,e),createURL:g,encodeLocation(e){let t=g(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){c=o.Push;let r=h(y.location,e,t);n&&n(r,e),f=b()+1;let s=p(r,f),d=y.createHref(r);try{l.pushState(s,"",d)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;a.location.assign(d)}i&&u&&u({action:c,location:y.location,delta:1})},replace:function(e,t){c=o.Replace;let r=h(y.location,e,t);n&&n(r,e),f=b();let a=p(r,f),s=y.createHref(r);l.replaceState(a,"",s),i&&u&&u({action:c,location:y.location,delta:0})},go:e=>l.go(e)};return y}var g;!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(g||(g={}));new Set(["lazy","caseSensitive","path","id","index","children"]);function y(e,t,n){void 0===n&&(n="/");let r=A(("string"==typeof t?b(t):t).pathname||"/",n);if(null==r)return null;let o=function e(t,n,r,o){void 0===n&&(n=[]);void 0===r&&(r=[]);void 0===o&&(o="");let a=(t,a,i)=>{let l={relativePath:void 0===i?t.path||"":i,caseSensitive:!0===t.caseSensitive,childrenIndex:a,route:t};l.relativePath.startsWith("/")&&(d(l.relativePath.startsWith(o),'Absolute route path "'+l.relativePath+'" nested under path "'+o+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),l.relativePath=l.relativePath.slice(o.length));let c=k([o,l.relativePath]),s=r.concat(l);t.children&&t.children.length>0&&(d(!0!==t.index,'Index routes must not have child routes. Please remove all child routes from route path "'+c+'".'),e(t.children,n,s,c)),(null!=t.path||t.index)&&n.push({path:c,score:w(c,t.index),routesMeta:s})};return t.forEach((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of function e(t){let n=t.split("/");if(0===n.length)return[];let[r,...o]=n,a=r.endsWith("?"),i=r.replace(/\?$/,"");if(0===o.length)return a?[i,""]:[i];let l=e(o.join("/")),c=[];c.push(...l.map(e=>""===e?i:[i,e].join("/"))),a&&c.push(...l);return c.map(e=>t.startsWith("/")&&""===e?"/":e)}(e.path))a(e,t,n);else a(e,t)}),n}(e);!function(e){e.sort((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every((e,n)=>e===t[n])?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map(e=>e.childrenIndex),t.routesMeta.map(e=>e.childrenIndex)))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e)a=j(o[e],S(r));return a}const x=/^:[\w-]+$/,O=e=>"*"===e;function w(e,t){let n=e.split("/"),r=n.length;return n.some(O)&&(r+=-2),t&&(r+=2),n.filter(e=>!O(e)).reduce((e,t)=>e+(x.test(t)?3:""===t?1:10),r)}function j(e,t){let{routesMeta:n}=e,r={},o="/",a=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,c="/"===o?t:t.slice(o.length)||"/",s=E({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},c);if(!s)return null;Object.assign(r,s.params);let u=i.route;a.push({params:r,pathname:k([o,s.pathname]),pathnameBase:C(k([o,s.pathnameBase])),route:u}),"/"!==s.pathnameBase&&(o=k([o,s.pathnameBase]))}return a}function E(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1);void 0===n&&(n=!0);f("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,(e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)"));e.endsWith("*")?(r.push({paramName:"*"}),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))");return[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce((e,t,n)=>{let{paramName:r,isOptional:o}=t;if("*"===r){let e=l[n]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}const c=l[n];return e[r]=o&&!c?void 0:function(e,t){try{return decodeURIComponent(e)}catch(n){return f(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(c||"",r),e},{}),pathname:a,pathnameBase:i,pattern:e}}function S(e){try{return decodeURI(e)}catch(t){return f(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function A(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}const k=e=>e.join("/").replace(/\/\/+/g,"/"),C=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/");Error;function T(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const P=["post","put","patch","delete"],R=(new Set(P),["get",...P]);new Set(R),new Set([301,302,303,307,308]),new Set([307,308]);Symbol("deferred");
/**
 * React Router v6.22.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _(){return(_=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const L=a.createContext(null);const N=a.createContext(null);const M=a.createContext(null);const I=a.createContext(null);const B=a.createContext({outlet:null,matches:[],isDataRoute:!1});const z=a.createContext(null);function D(){return null!=a.useContext(I)}function F(){return D()||d(!1),a.useContext(I).location}function W(e,t,n,r){D()||d(!1);let{navigator:i}=a.useContext(M),{matches:l}=a.useContext(B),c=l[l.length-1],s=c?c.params:{},u=(c&&c.pathname,c?c.pathnameBase:"/");c&&c.route;let f,p=F();if(t){var h;let e="string"==typeof t?b(t):t;"/"===u||(null==(h=e.pathname)?void 0:h.startsWith(u))||d(!1),f=e}else f=p;let m=f.pathname||"/",v=y(e,{pathname:"/"===u?m:m.slice(u.length)||"/"});let g=q(v&&v.map(e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:k([u,i.encodeLocation?i.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?u:k([u,i.encodeLocation?i.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])})),l,n,r);return t&&g?a.createElement(I.Provider,{value:{location:_({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:o.Pop}},g):g}function $(){let e=function(){var e;let t=a.useContext(z),n=Y(G.UseRouteError),r=K(G.UseRouteError);if(void 0!==t)return t;return null==(e=n.errors)?void 0:e[r]}(),t=T(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return a.createElement(a.Fragment,null,a.createElement("h2",null,"Unexpected Application Error!"),a.createElement("h3",{style:{fontStyle:"italic"}},t),n?a.createElement("pre",{style:r},n):null,null)}const U=a.createElement($,null);class V extends a.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?a.createElement(B.Provider,{value:this.props.routeContext},a.createElement(z.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function H(e){let{routeContext:t,match:n,children:r}=e,o=a.useContext(L);return o&&o.static&&o.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=n.route.id),a.createElement(B.Provider,{value:t},r)}function q(e,t,n,r){var o;if(void 0===t&&(t=[]),void 0===n&&(n=null),void 0===r&&(r=null),null==e){var i;if(null==(i=n)||!i.errors)return null;e=n.matches}let l=e,c=null==(o=n)?void 0:o.errors;if(null!=c){let e=l.findIndex(e=>e.route.id&&(null==c?void 0:c[e.route.id]));e>=0||d(!1),l=l.slice(0,Math.min(l.length,e+1))}let s=!1,u=-1;if(n&&r&&r.v7_partialHydration)for(let e=0;e<l.length;e++){let t=l[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(u=e),t.route.id){let{loaderData:e,errors:r}=n,o=t.route.loader&&void 0===e[t.route.id]&&(!r||void 0===r[t.route.id]);if(t.route.lazy||o){s=!0,l=u>=0?l.slice(0,u+1):[l[0]];break}}}return l.reduceRight((e,r,o)=>{let i,d=!1,f=null,p=null;var h;n&&(i=c&&r.route.id?c[r.route.id]:void 0,f=r.route.errorElement||U,s&&(u<0&&0===o?(h="route-fallback",!1||X[h]||(X[h]=!0),d=!0,p=null):u===o&&(d=!0,p=r.route.hydrateFallbackElement||null)));let m=t.concat(l.slice(0,o+1)),b=()=>{let t;return t=i?f:d?p:r.route.Component?a.createElement(r.route.Component,null):r.route.element?r.route.element:e,a.createElement(H,{match:r,routeContext:{outlet:e,matches:m,isDataRoute:null!=n},children:t})};return n&&(r.route.ErrorBoundary||r.route.errorElement||0===o)?a.createElement(V,{location:n.location,revalidation:n.revalidation,component:f,error:i,children:b(),routeContext:{outlet:null,matches:m,isDataRoute:!0}}):b()},null)}var G=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(G||{});function Y(e){let t=a.useContext(N);return t||d(!1),t}function K(e){let t=function(e){let t=a.useContext(B);return t||d(!1),t}(),n=t.matches[t.matches.length-1];return n.route.id||d(!1),n.route.id}const X={};a.startTransition;function J(e){d(!1)}function Q(e){let{basename:t="/",children:n=null,location:r,navigationType:i=o.Pop,navigator:l,static:c=!1,future:s}=e;D()&&d(!1);let u=t.replace(/^\/*/,"/"),f=a.useMemo(()=>({basename:u,navigator:l,static:c,future:_({v7_relativeSplatPath:!1},s)}),[u,s,l,c]);"string"==typeof r&&(r=b(r));let{pathname:p="/",search:h="",hash:m="",state:v=null,key:g="default"}=r,y=a.useMemo(()=>{let e=A(p,u);return null==e?null:{location:{pathname:e,search:h,hash:m,state:v,key:g},navigationType:i}},[u,p,h,m,v,g,i]);return null==y?null:a.createElement(M.Provider,{value:f},a.createElement(I.Provider,{children:n,value:y}))}function Z(e){let{children:t,location:n}=e;return function(e,t){return W(e,t)}(function e(t,n){void 0===n&&(n=[]);let r=[];return a.Children.forEach(t,(t,o)=>{if(!a.isValidElement(t))return;let i=[...n,o];if(t.type===a.Fragment)return void r.push.apply(r,e(t.props.children,i));t.type!==J&&d(!1),t.props.index&&t.props.children&&d(!1);let l={id:t.props.id||i.join("-"),caseSensitive:t.props.caseSensitive,element:t.props.element,Component:t.props.Component,index:t.props.index,path:t.props.path,loader:t.props.loader,action:t.props.action,errorElement:t.props.errorElement,ErrorBoundary:t.props.ErrorBoundary,hasErrorBoundary:null!=t.props.ErrorBoundary||null!=t.props.errorElement,shouldRevalidate:t.props.shouldRevalidate,handle:t.props.handle,lazy:t.props.lazy};t.props.children&&(l.children=e(t.props.children,i)),r.push(l)}),r}(t),n)}new Promise(()=>{});a.Component;new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);try{window.__reactRouterVersion="6"}catch(e){}new Map;const ee=a.startTransition;l.flushSync,a.useId;function te(e){let{basename:t,children:n,future:r,window:o}=e,i=a.useRef();null==i.current&&(i.current=u({window:o,v5Compat:!0}));let l=i.current,[c,s]=a.useState({action:l.action,location:l.location}),{v7_startTransition:d}=r||{},f=a.useCallback(e=>{d&&ee?ee(()=>s(e)):s(e)},[s,d]);return a.useLayoutEffect(()=>l.listen(f),[l,f]),a.createElement(Q,{basename:t,children:n,location:c.location,navigationType:c.action,navigator:l,future:r})}"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement;var ne,re;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(ne||(ne={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(re||(re={}));var oe=n(0),ae=function(e){e.userDetails;return oe.createElement("section",null,oe.createElement("p",null,"This is the settings page"))},ie=n(0),le=function(){return ie.createElement("div",null,ie.createElement("p",null,"This is about page"))},ce=n(5),se=n(84),ue=n(43);function de(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function fe(e,t){this._pairs=[],e&&Object(ue.a)(e,this,t)}const pe=fe.prototype;pe.append=function(e,t){this._pairs.push([e,t])},pe.toString=function(e){const t=e?function(t){return e.call(this,t,de)}:de;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};var he=fe;function me(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function be(e,t,n){if(!t)return e;const r=n&&n.encode||me,o=n&&n.serialize;let a;if(a=o?o(t,n):ce.a.isURLSearchParams(t)?t.toString():new he(t,n).toString(r),a){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}var ve=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){ce.a.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},ge=n(15),ye={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},xe={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:he,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]};const Oe="undefined"!=typeof window&&"undefined"!=typeof document,we=(je="undefined"!=typeof navigator&&navigator.product,Oe&&["ReactNative","NativeScript","NS"].indexOf(je)<0);var je;const Ee="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts;var Se={...r,...xe};var Ae=function(e){function t(e,n,r,o){let a=e[o++];if("__proto__"===a)return!0;const i=Number.isFinite(+a),l=o>=e.length;if(a=!a&&ce.a.isArray(r)?r.length:a,l)return ce.a.hasOwnProp(r,a)?r[a]=[r[a],n]:r[a]=n,!i;r[a]&&ce.a.isObject(r[a])||(r[a]=[]);return t(e,n,r[a],o)&&ce.a.isArray(r[a])&&(r[a]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let a;for(r=0;r<o;r++)a=n[r],t[a]=e[a];return t}(r[a])),!i}if(ce.a.isFormData(e)&&ce.a.isFunction(e.entries)){const n={};return ce.a.forEachEntry(e,(e,r)=>{t(function(e){return ce.a.matchAll(/\w+|\[(\w*)]/g,e).map(e=>"[]"===e[0]?"":e[1]||e[0])}(e),r,n,0)}),n}return null};const ke={transitional:ye,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=ce.a.isObject(e);o&&ce.a.isHTMLForm(e)&&(e=new FormData(e));if(ce.a.isFormData(e))return r?JSON.stringify(Ae(e)):e;if(ce.a.isArrayBuffer(e)||ce.a.isBuffer(e)||ce.a.isStream(e)||ce.a.isFile(e)||ce.a.isBlob(e))return e;if(ce.a.isArrayBufferView(e))return e.buffer;if(ce.a.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let a;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return Object(ue.a)(e,new Se.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return Se.isNode&&ce.a.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((a=ce.a.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return Object(ue.a)(a?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(ce.a.isString(e))try{return(t||JSON.parse)(e),ce.a.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(n||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||ke.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&ce.a.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw ge.a.from(e,ge.a.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Se.classes.FormData,Blob:Se.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};ce.a.forEach(["delete","get","head","post","put","patch"],e=>{ke.headers[e]={}});var Ce=ke;const Te=ce.a.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]);const Pe=Symbol("internals");function Re(e){return e&&String(e).trim().toLowerCase()}function _e(e){return!1===e||null==e?e:ce.a.isArray(e)?e.map(_e):String(e)}function Le(e,t,n,r,o){return ce.a.isFunction(r)?r.call(this,t,n):(o&&(t=n),ce.a.isString(t)?ce.a.isString(r)?-1!==t.indexOf(r):ce.a.isRegExp(r)?r.test(t):void 0:void 0)}class Ne{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=Re(t);if(!o)throw new Error("header name must be a non-empty string");const a=ce.a.findKey(r,o);(!a||void 0===r[a]||!0===n||void 0===n&&!1!==r[a])&&(r[a||t]=_e(e))}const a=(e,t)=>ce.a.forEach(e,(e,n)=>o(e,n,t));return ce.a.isPlainObject(e)||e instanceof this.constructor?a(e,t):ce.a.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?a((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&Te[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&o(t,e,n),this}get(e,t){if(e=Re(e)){const n=ce.a.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(ce.a.isFunction(t))return t.call(this,e,n);if(ce.a.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=Re(e)){const n=ce.a.findKey(this,e);return!(!n||void 0===this[n]||t&&!Le(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=Re(e)){const o=ce.a.findKey(n,e);!o||t&&!Le(0,n[o],o,t)||(delete n[o],r=!0)}}return ce.a.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!Le(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return ce.a.forEach(this,(r,o)=>{const a=ce.a.findKey(n,o);if(a)return t[a]=_e(r),void delete t[o];const i=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(e,t,n)=>t.toUpperCase()+n)}(o):String(o).trim();i!==o&&delete t[o],t[i]=_e(r),n[i]=!0}),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return ce.a.forEach(this,(n,r)=>{null!=n&&!1!==n&&(t[r]=e&&ce.a.isArray(n)?n.join(", "):n)}),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([e,t])=>e+": "+t).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach(e=>n.set(e)),n}static accessor(e){const t=(this[Pe]=this[Pe]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=Re(e);t[r]||(!function(e,t){const n=ce.a.toCamelCase(" "+t);["get","set","has"].forEach(r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})})}(n,e),t[r]=!0)}return ce.a.isArray(e)?e.forEach(r):r(e),this}}Ne.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),ce.a.reduceDescriptors(Ne.prototype,({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}}),ce.a.freezeMethods(Ne);var Me=Ne;function Ie(e,t){const n=this||Ce,r=t||n,o=Me.from(r.headers);let a=r.data;return ce.a.forEach(e,(function(e){a=e.call(n,a,o.normalize(),t?t.status:void 0)})),o.normalize(),a}function Be(e){return!(!e||!e.__CANCEL__)}function ze(e,t,n){ge.a.call(this,null==e?"canceled":e,ge.a.ERR_CANCELED,t,n),this.name="CanceledError"}ce.a.inherits(ze,ge.a,{__CANCEL__:!0});var De=ze,Fe=n(85);var We=Se.hasStandardBrowserEnv?{write(e,t,n,r,o,a){const i=[e+"="+encodeURIComponent(t)];ce.a.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),ce.a.isString(r)&&i.push("path="+r),ce.a.isString(o)&&i.push("domain="+o),!0===a&&i.push("secure"),document.cookie=i.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function $e(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}var Ue=Se.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=ce.a.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};var Ve=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,a=0,i=0;return t=void 0!==t?t:1e3,function(l){const c=Date.now(),s=r[i];o||(o=c),n[a]=l,r[a]=c;let u=i,d=0;for(;u!==a;)d+=n[u++],u%=e;if(a=(a+1)%e,a===i&&(i=(i+1)%e),c-o<t)return;const f=s&&c-s;return f?Math.round(1e3*d/f):void 0}};function He(e,t){let n=0;const r=Ve(50,250);return o=>{const a=o.loaded,i=o.lengthComputable?o.total:void 0,l=a-n,c=r(l);n=a;const s={loaded:a,total:i,progress:i?a/i:void 0,bytes:l,rate:c||void 0,estimated:c&&i&&a<=i?(i-a)/c:void 0,event:o};s[t?"download":"upload"]=!0,e(s)}}var qe="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const o=Me.from(e.headers).normalize();let a,i,{responseType:l,withXSRFToken:c}=e;function s(){e.cancelToken&&e.cancelToken.unsubscribe(a),e.signal&&e.signal.removeEventListener("abort",a)}if(ce.a.isFormData(r))if(Se.hasStandardBrowserEnv||Se.hasStandardBrowserWebWorkerEnv)o.setContentType(!1);else if(!1!==(i=o.getContentType())){const[e,...t]=i?i.split(";").map(e=>e.trim()).filter(Boolean):[];o.setContentType([e||"multipart/form-data",...t].join("; "))}let u=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+n))}const d=$e(e.baseURL,e.url);function f(){if(!u)return;const r=Me.from("getAllResponseHeaders"in u&&u.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new ge.a("Request failed with status code "+n.status,[ge.a.ERR_BAD_REQUEST,ge.a.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),s()}),(function(e){n(e),s()}),{data:l&&"text"!==l&&"json"!==l?u.response:u.responseText,status:u.status,statusText:u.statusText,headers:r,config:e,request:u}),u=null}if(u.open(e.method.toUpperCase(),be(d,e.params,e.paramsSerializer),!0),u.timeout=e.timeout,"onloadend"in u?u.onloadend=f:u.onreadystatechange=function(){u&&4===u.readyState&&(0!==u.status||u.responseURL&&0===u.responseURL.indexOf("file:"))&&setTimeout(f)},u.onabort=function(){u&&(n(new ge.a("Request aborted",ge.a.ECONNABORTED,e,u)),u=null)},u.onerror=function(){n(new ge.a("Network Error",ge.a.ERR_NETWORK,e,u)),u=null},u.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||ye;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new ge.a(t,r.clarifyTimeoutError?ge.a.ETIMEDOUT:ge.a.ECONNABORTED,e,u)),u=null},Se.hasStandardBrowserEnv&&(c&&ce.a.isFunction(c)&&(c=c(e)),c||!1!==c&&Ue(d))){const t=e.xsrfHeaderName&&e.xsrfCookieName&&We.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===r&&o.setContentType(null),"setRequestHeader"in u&&ce.a.forEach(o.toJSON(),(function(e,t){u.setRequestHeader(t,e)})),ce.a.isUndefined(e.withCredentials)||(u.withCredentials=!!e.withCredentials),l&&"json"!==l&&(u.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&u.addEventListener("progress",He(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&u.upload&&u.upload.addEventListener("progress",He(e.onUploadProgress)),(e.cancelToken||e.signal)&&(a=t=>{u&&(n(!t||t.type?new De(null,e,u):t),u.abort(),u=null)},e.cancelToken&&e.cancelToken.subscribe(a),e.signal&&(e.signal.aborted?a():e.signal.addEventListener("abort",a)));const p=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(d);p&&-1===Se.protocols.indexOf(p)?n(new ge.a("Unsupported protocol "+p+":",ge.a.ERR_BAD_REQUEST,e)):u.send(r||null)}))};const Ge={http:Fe.a,xhr:qe};ce.a.forEach(Ge,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}});const Ye=e=>"- "+e,Ke=e=>ce.a.isFunction(e)||null===e||!1===e;var Xe=e=>{e=ce.a.isArray(e)?e:[e];const{length:t}=e;let n,r;const o={};for(let a=0;a<t;a++){let t;if(n=e[a],r=n,!Ke(n)&&(r=Ge[(t=String(n)).toLowerCase()],void 0===r))throw new ge.a(`Unknown adapter '${t}'`);if(r)break;o[t||"#"+a]=r}if(!r){const e=Object.entries(o).map(([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build"));let n=t?e.length>1?"since :\n"+e.map(Ye).join("\n"):" "+Ye(e[0]):"as no adapter specified";throw new ge.a("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function Je(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new De(null,e)}function Qe(e){Je(e),e.headers=Me.from(e.headers),e.data=Ie.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1);return Xe(e.adapter||Ce.adapter)(e).then((function(t){return Je(e),t.data=Ie.call(e,e.transformResponse,t),t.headers=Me.from(t.headers),t}),(function(t){return Be(t)||(Je(e),t&&t.response&&(t.response.data=Ie.call(e,e.transformResponse,t.response),t.response.headers=Me.from(t.response.headers))),Promise.reject(t)}))}const Ze=e=>e instanceof Me?e.toJSON():e;function et(e,t){t=t||{};const n={};function r(e,t,n){return ce.a.isPlainObject(e)&&ce.a.isPlainObject(t)?ce.a.merge.call({caseless:n},e,t):ce.a.isPlainObject(t)?ce.a.merge({},t):ce.a.isArray(t)?t.slice():t}function o(e,t,n){return ce.a.isUndefined(t)?ce.a.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function a(e,t){if(!ce.a.isUndefined(t))return r(void 0,t)}function i(e,t){return ce.a.isUndefined(t)?ce.a.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function l(n,o,a){return a in t?r(n,o):a in e?r(void 0,n):void 0}const c={url:a,method:a,data:a,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,withXSRFToken:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:l,headers:(e,t)=>o(Ze(e),Ze(t),!0)};return ce.a.forEach(Object.keys(Object.assign({},e,t)),(function(r){const a=c[r]||o,i=a(e[r],t[r],r);ce.a.isUndefined(i)&&a!==l||(n[r]=i)})),n}const tt={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{tt[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}});const nt={};tt.transitional=function(e,t,n){function r(e,t){return"[Axios v1.6.7] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,a)=>{if(!1===e)throw new ge.a(r(o," has been removed"+(t?" in "+t:"")),ge.a.ERR_DEPRECATED);return t&&!nt[o]&&(nt[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,a)}};var rt={assertOptions:function(e,t,n){if("object"!=typeof e)throw new ge.a("options must be an object",ge.a.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const a=r[o],i=t[a];if(i){const t=e[a],n=void 0===t||i(t,a,e);if(!0!==n)throw new ge.a("option "+a+" must be "+n,ge.a.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new ge.a("Unknown option "+a,ge.a.ERR_BAD_OPTION)}},validators:tt};const ot=rt.validators;class at{constructor(e){this.defaults=e,this.interceptors={request:new ve,response:new ve}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t;Error.captureStackTrace?Error.captureStackTrace(t={}):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=et(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;void 0!==n&&rt.assertOptions(n,{silentJSONParsing:ot.transitional(ot.boolean),forcedJSONParsing:ot.transitional(ot.boolean),clarifyTimeoutError:ot.transitional(ot.boolean)},!1),null!=r&&(ce.a.isFunction(r)?t.paramsSerializer={serialize:r}:rt.assertOptions(r,{encode:ot.function,serialize:ot.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let a=o&&ce.a.merge(o.common,o[t.method]);o&&ce.a.forEach(["delete","get","head","post","put","patch","common"],e=>{delete o[e]}),t.headers=Me.concat(a,o);const i=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));const c=[];let s;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let u,d=0;if(!l){const e=[Qe.bind(this),void 0];for(e.unshift.apply(e,i),e.push.apply(e,c),u=e.length,s=Promise.resolve(t);d<u;)s=s.then(e[d++],e[d++]);return s}u=i.length;let f=t;for(d=0;d<u;){const e=i[d++],t=i[d++];try{f=e(f)}catch(e){t.call(this,e);break}}try{s=Qe.call(this,f)}catch(e){return Promise.reject(e)}for(d=0,u=c.length;d<u;)s=s.then(c[d++],c[d++]);return s}getUri(e){return be($e((e=et(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}ce.a.forEach(["delete","get","head","options"],(function(e){at.prototype[e]=function(t,n){return this.request(et(n||{},{method:e,url:t,data:(n||{}).data}))}})),ce.a.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(et(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}at.prototype[e]=t(),at.prototype[e+"Form"]=t(!0)}));var it=at;class lt{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then(e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null}),this.promise.then=e=>{let t;const r=new Promise(e=>{n.subscribe(e),t=e}).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new De(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new lt((function(t){e=t})),cancel:e}}}var ct=lt;const st={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(st).forEach(([e,t])=>{st[t]=e});var ut=st;const dt=function e(t){const n=new it(t),r=Object(se.a)(it.prototype.request,n);return ce.a.extend(r,it.prototype,n,{allOwnKeys:!0}),ce.a.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(et(t,n))},r}(Ce);dt.Axios=it,dt.CanceledError=De,dt.CancelToken=ct,dt.isCancel=Be,dt.VERSION="1.6.7",dt.toFormData=ue.a,dt.AxiosError=ge.a,dt.Cancel=dt.CanceledError,dt.all=function(e){return Promise.all(e)},dt.spread=function(e){return function(t){return e.apply(null,t)}},dt.isAxiosError=function(e){return ce.a.isObject(e)&&!0===e.isAxiosError},dt.mergeConfig=et,dt.AxiosHeaders=Me,dt.formToJSON=e=>Ae(ce.a.isHTMLForm(e)?new FormData(e):e),dt.getAdapter=Xe,dt.HttpStatusCode=ut,dt.default=dt;var ft=dt,pt=n(3),ht=n(145),mt=n(1),bt=n(4);var vt=a.createContext(null);function gt(){return a.useContext(vt)}var yt="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__",xt=n(2);var Ot=function(e){const{children:t,theme:n}=e,r=gt(),o=a.useMemo(()=>{const e=null===r?n:function(e,t){if("function"==typeof t){return t(e)}return Object(mt.a)({},e,t)}(r,n);return null!=e&&(e[yt]=null!==r),e},[n,r]);return Object(xt.jsx)(vt.Provider,{value:o,children:t})},wt=n(24),jt=n(83);const Et={};function St(e,t,n,r=!1){return a.useMemo(()=>{const o=e&&t[e]||t;if("function"==typeof n){const a=n(o),i=e?Object(mt.a)({},t,{[e]:a}):a;return r?()=>i:i}return e?Object(mt.a)({},t,{[e]:n}):Object(mt.a)({},t,n)},[e,t,n,r])}var At=function(e){const{children:t,theme:n,themeId:r}=e,o=Object(jt.a)(Et),a=gt()||Et,i=St(r,o,n),l=St(r,a,n,!0);return Object(xt.jsx)(Ot,{theme:l,children:Object(xt.jsx)(wt.b.Provider,{value:i,children:t})})},kt=n(26);const Ct=["theme"];function Tt(e){let{theme:t}=e,n=Object(bt.a)(e,Ct);const r=t[kt.a];return Object(xt.jsx)(At,Object(mt.a)({},n,{themeId:r?kt.a:void 0,theme:r||t}))}var Pt=n(8),Rt=n(273),_t=n(57);var Lt=function({styles:e,themeId:t,defaultTheme:n={}}){const r=Object(_t.a)(n),o="function"==typeof e?e(t&&r[t]||r):e;return Object(xt.jsx)(Rt.a,{styles:o})},Nt=n(42);var Mt=function(e){return Object(xt.jsx)(Lt,Object(mt.a)({},e,{defaultTheme:Nt.a,themeId:kt.a}))};const It=(e,t)=>Object(mt.a)({WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box",WebkitTextSizeAdjust:"100%"},t&&!e.vars&&{colorScheme:e.palette.mode}),Bt=e=>Object(mt.a)({color:(e.vars||e).palette.text.primary},e.typography.body1,{backgroundColor:(e.vars||e).palette.background.default,"@media print":{backgroundColor:(e.vars||e).palette.common.white}});var zt=function(e){const t=Object(Pt.a)({props:e,name:"MuiCssBaseline"}),{children:n,enableColorScheme:r=!1}=t;return Object(xt.jsxs)(a.Fragment,{children:[Object(xt.jsx)(Mt,{styles:e=>((e,t=!1)=>{var n;const r={};t&&e.colorSchemes&&Object.entries(e.colorSchemes).forEach(([t,n])=>{var o;r[e.getColorSchemeSelector(t).replace(/\s*&/,"")]={colorScheme:null==(o=n.palette)?void 0:o.mode}});let o=Object(mt.a)({html:It(e,t),"*, *::before, *::after":{boxSizing:"inherit"},"strong, b":{fontWeight:e.typography.fontWeightBold},body:Object(mt.a)({margin:0},Bt(e),{"&::backdrop":{backgroundColor:(e.vars||e).palette.background.default}})},r);const a=null==(n=e.components)||null==(n=n.MuiCssBaseline)?void 0:n.styleOverrides;return a&&(o=[o,a]),o})(e,r)}),n]})},Dt=n(6),Ft=n(268),Wt=n(227);function $t(e){return"string"==typeof e}function Ut(e,t=[]){if(void 0===e)return{};const n={};return Object.keys(e).filter(n=>n.match(/^on[A-Z]/)&&"function"==typeof e[n]&&!t.includes(n)).forEach(t=>{n[t]=e[t]}),n}function Vt(e){if(void 0===e)return{};const t={};return Object.keys(e).filter(t=>!(t.match(/^on[A-Z]/)&&"function"==typeof e[t])).forEach(n=>{t[n]=e[n]}),t}const Ht=["elementType","externalSlotProps","ownerState","skipResolvingSlotProps"];function qt(e){var t;const{elementType:n,externalSlotProps:r,ownerState:o,skipResolvingSlotProps:a=!1}=e,i=Object(bt.a)(e,Ht),l=a?{}:function(e,t,n){return"function"==typeof e?e(t,n):e}(r,o),{props:c,internalRef:s}=function(e){const{getSlotProps:t,additionalProps:n,externalSlotProps:r,externalForwardedProps:o,className:a}=e;if(!t){const e=Object(Dt.a)(null==n?void 0:n.className,a,null==o?void 0:o.className,null==r?void 0:r.className),t=Object(mt.a)({},null==n?void 0:n.style,null==o?void 0:o.style,null==r?void 0:r.style),i=Object(mt.a)({},n,o,r);return e.length>0&&(i.className=e),Object.keys(t).length>0&&(i.style=t),{props:i,internalRef:void 0}}const i=Ut(Object(mt.a)({},o,r)),l=Vt(r),c=Vt(o),s=t(i),u=Object(Dt.a)(null==s?void 0:s.className,null==n?void 0:n.className,a,null==o?void 0:o.className,null==r?void 0:r.className),d=Object(mt.a)({},null==s?void 0:s.style,null==n?void 0:n.style,null==o?void 0:o.style,null==r?void 0:r.style),f=Object(mt.a)({},s,n,c,l);return u.length>0&&(f.className=u),Object.keys(d).length>0&&(f.style=d),{props:f,internalRef:s.ref}}(Object(mt.a)({},i,{externalSlotProps:l})),u=Object(Wt.a)(s,null==l?void 0:l.ref,null==(t=e.additionalProps)?void 0:t.ref);return function(e,t,n){return void 0===e||$t(e)?t:Object(mt.a)({},t,{ownerState:Object(mt.a)({},t.ownerState,n)})}(n,Object(mt.a)({},c,{ref:u}),o)}var Gt=n(149),Yt=n(229),Kt=n(271),Xt=n(231);function Jt(e){const t=e.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}function Qt(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function Zt(e){return parseInt(Object(Xt.a)(e).getComputedStyle(e).paddingRight,10)||0}function en(e,t,n,r,o){const a=[t,n,...r];[].forEach.call(e.children,e=>{const t=-1===a.indexOf(e),n=!function(e){const t=-1!==["TEMPLATE","SCRIPT","STYLE","LINK","MAP","META","NOSCRIPT","PICTURE","COL","COLGROUP","PARAM","SLOT","SOURCE","TRACK"].indexOf(e.tagName),n="INPUT"===e.tagName&&"hidden"===e.getAttribute("type");return t||n}(e);t&&n&&Qt(e,o)})}function tn(e,t){let n=-1;return e.some((e,r)=>!!t(e)&&(n=r,!0)),n}function nn(e,t){const n=[],r=e.container;if(!t.disableScrollLock){if(function(e){const t=Object(Gt.a)(e);return t.body===e?Object(Xt.a)(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(r)){const e=Jt(Object(Gt.a)(r));n.push({value:r.style.paddingRight,property:"padding-right",el:r}),r.style.paddingRight=Zt(r)+e+"px";const t=Object(Gt.a)(r).querySelectorAll(".mui-fixed");[].forEach.call(t,t=>{n.push({value:t.style.paddingRight,property:"padding-right",el:t}),t.style.paddingRight=Zt(t)+e+"px"})}let e;if(r.parentNode instanceof DocumentFragment)e=Object(Gt.a)(r).body;else{const t=r.parentElement,n=Object(Xt.a)(r);e="HTML"===(null==t?void 0:t.nodeName)&&"scroll"===n.getComputedStyle(t).overflowY?t:r}n.push({value:e.style.overflow,property:"overflow",el:e},{value:e.style.overflowX,property:"overflow-x",el:e},{value:e.style.overflowY,property:"overflow-y",el:e}),e.style.overflow="hidden"}return()=>{n.forEach(({value:e,el:t,property:n})=>{e?t.style.setProperty(n,e):t.style.removeProperty(n)})}}const rn=new class{constructor(){this.containers=void 0,this.modals=void 0,this.modals=[],this.containers=[]}add(e,t){let n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Qt(e.modalRef,!1);const r=function(e){const t=[];return[].forEach.call(e.children,e=>{"true"===e.getAttribute("aria-hidden")&&t.push(e)}),t}(t);en(t,e.mount,e.modalRef,r,!0);const o=tn(this.containers,e=>e.container===t);return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblings:r}),n)}mount(e,t){const n=tn(this.containers,t=>-1!==t.modals.indexOf(e)),r=this.containers[n];r.restore||(r.restore=nn(r,t))}remove(e,t=!0){const n=this.modals.indexOf(e);if(-1===n)return n;const r=tn(this.containers,t=>-1!==t.modals.indexOf(e)),o=this.containers[r];if(o.modals.splice(o.modals.indexOf(e),1),this.modals.splice(n,1),0===o.modals.length)o.restore&&o.restore(),e.modalRef&&Qt(e.modalRef,t),en(o.container,e.mount,e.modalRef,o.hiddenSiblings,!1),this.containers.splice(r,1);else{const e=o.modals[o.modals.length-1];e.modalRef&&Qt(e.modalRef,!1)}return n}isTopModal(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}};function on(e){const{container:t,disableEscapeKeyDown:n=!1,disableScrollLock:r=!1,manager:o=rn,closeAfterTransition:i=!1,onTransitionEnter:l,onTransitionExited:c,children:s,onClose:u,open:d,rootRef:f}=e,p=a.useRef({}),h=a.useRef(null),m=a.useRef(null),b=Object(Wt.a)(m,f),[v,g]=a.useState(!d),y=function(e){return!!e&&e.props.hasOwnProperty("in")}(s);let x=!0;"false"!==e["aria-hidden"]&&!1!==e["aria-hidden"]||(x=!1);const O=()=>(p.current.modalRef=m.current,p.current.mount=h.current,p.current),w=()=>{o.mount(O(),{disableScrollLock:r}),m.current&&(m.current.scrollTop=0)},j=Object(Yt.a)(()=>{const e=function(e){return"function"==typeof e?e():e}(t)||Object(Gt.a)(h.current).body;o.add(O(),e),m.current&&w()}),E=a.useCallback(()=>o.isTopModal(O()),[o]),S=Object(Yt.a)(e=>{h.current=e,e&&(d&&E()?w():m.current&&Qt(m.current,x))}),A=a.useCallback(()=>{o.remove(O(),x)},[x,o]);a.useEffect(()=>()=>{A()},[A]),a.useEffect(()=>{d?j():y&&i||A()},[d,A,y,i,j]);const k=e=>t=>{var r;null==(r=e.onKeyDown)||r.call(e,t),"Escape"===t.key&&229!==t.which&&E()&&(n||(t.stopPropagation(),u&&u(t,"escapeKeyDown")))},C=e=>t=>{var n;null==(n=e.onClick)||n.call(e,t),t.target===t.currentTarget&&u&&u(t,"backdropClick")};return{getRootProps:(t={})=>{const n=Ut(e);delete n.onTransitionEnter,delete n.onTransitionExited;const r=Object(mt.a)({},n,t);return Object(mt.a)({role:"presentation"},r,{onKeyDown:k(r),ref:b})},getBackdropProps:(e={})=>{const t=e;return Object(mt.a)({"aria-hidden":!0},t,{onClick:C(t),open:d})},getTransitionProps:()=>({onEnter:Object(Kt.a)(()=>{g(!1),l&&l()},null==s?void 0:s.props.onEnter),onExited:Object(Kt.a)(()=>{g(!0),c&&c(),i&&A()},null==s?void 0:s.props.onExited)}),rootRef:b,portalRef:S,isTopModal:E,exited:v,hasTransition:y}}const an=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function ln(e){const t=[],n=[];return Array.from(e.querySelectorAll(an)).forEach((e,r)=>{const o=function(e){const t=parseInt(e.getAttribute("tabindex")||"",10);return Number.isNaN(t)?"true"===e.contentEditable||("AUDIO"===e.nodeName||"VIDEO"===e.nodeName||"DETAILS"===e.nodeName)&&null===e.getAttribute("tabindex")?0:e.tabIndex:t}(e);-1!==o&&function(e){return!(e.disabled||"INPUT"===e.tagName&&"hidden"===e.type||function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return!1;if(!e.name)return!1;const t=t=>e.ownerDocument.querySelector('input[type="radio"]'+t);let n=t(`[name="${e.name}"]:checked`);return n||(n=t(`[name="${e.name}"]`)),n!==e}(e))}(e)&&(0===o?t.push(e):n.push({documentOrder:r,tabIndex:o,node:e}))}),n.sort((e,t)=>e.tabIndex===t.tabIndex?e.documentOrder-t.documentOrder:e.tabIndex-t.tabIndex).map(e=>e.node).concat(t)}function cn(){return!0}function sn(e){const{children:t,disableAutoFocus:n=!1,disableEnforceFocus:r=!1,disableRestoreFocus:o=!1,getTabbable:i=ln,isEnabled:l=cn,open:c}=e,s=a.useRef(!1),u=a.useRef(null),d=a.useRef(null),f=a.useRef(null),p=a.useRef(null),h=a.useRef(!1),m=a.useRef(null),b=Object(Wt.a)(t.ref,m),v=a.useRef(null);a.useEffect(()=>{c&&m.current&&(h.current=!n)},[n,c]),a.useEffect(()=>{if(!c||!m.current)return;const e=Object(Gt.a)(m.current);return m.current.contains(e.activeElement)||(m.current.hasAttribute("tabIndex")||m.current.setAttribute("tabIndex","-1"),h.current&&m.current.focus()),()=>{o||(f.current&&f.current.focus&&(s.current=!0,f.current.focus()),f.current=null)}},[c]),a.useEffect(()=>{if(!c||!m.current)return;const e=Object(Gt.a)(m.current),t=t=>{v.current=t,!r&&l()&&"Tab"===t.key&&e.activeElement===m.current&&t.shiftKey&&(s.current=!0,d.current&&d.current.focus())},n=()=>{const t=m.current;if(null===t)return;if(!e.hasFocus()||!l()||s.current)return void(s.current=!1);if(t.contains(e.activeElement))return;if(r&&e.activeElement!==u.current&&e.activeElement!==d.current)return;if(e.activeElement!==p.current)p.current=null;else if(null!==p.current)return;if(!h.current)return;let n=[];if(e.activeElement!==u.current&&e.activeElement!==d.current||(n=i(m.current)),n.length>0){var o,a;const e=Boolean((null==(o=v.current)?void 0:o.shiftKey)&&"Tab"===(null==(a=v.current)?void 0:a.key)),t=n[0],r=n[n.length-1];"string"!=typeof t&&"string"!=typeof r&&(e?r.focus():t.focus())}else t.focus()};e.addEventListener("focusin",n),e.addEventListener("keydown",t,!0);const o=setInterval(()=>{e.activeElement&&"BODY"===e.activeElement.tagName&&n()},50);return()=>{clearInterval(o),e.removeEventListener("focusin",n),e.removeEventListener("keydown",t,!0)}},[n,r,o,l,c,i]);const g=e=>{null===f.current&&(f.current=e.relatedTarget),h.current=!0};return Object(xt.jsxs)(a.Fragment,{children:[Object(xt.jsx)("div",{tabIndex:c?0:-1,onFocus:g,ref:u,"data-testid":"sentinelStart"}),a.cloneElement(t,{ref:b,onFocus:e=>{null===f.current&&(f.current=e.relatedTarget),h.current=!0,p.current=e.target;const n=t.props.onFocus;n&&n(e)}}),Object(xt.jsx)("div",{tabIndex:c?0:-1,onFocus:g,ref:d,"data-testid":"sentinelEnd"})]})}var un=n(148),dn=n(228);const fn=a.forwardRef((function(e,t){const{children:n,container:r,disablePortal:o=!1}=e,[i,c]=a.useState(null),s=Object(Wt.a)(a.isValidElement(n)?n.ref:null,t);if(Object(un.a)(()=>{o||c(function(e){return"function"==typeof e?e():e}(r)||document.body)},[r,o]),Object(un.a)(()=>{if(i&&!o)return Object(dn.a)(t,i),()=>{Object(dn.a)(t,null)}},[t,i,o]),o){if(a.isValidElement(n)){const e={ref:s};return a.cloneElement(n,e)}return Object(xt.jsx)(a.Fragment,{children:n})}return Object(xt.jsx)(a.Fragment,{children:i?l.createPortal(n,i):i})}));function pn(e,t){return(pn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function hn(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,pn(e,t)}var mn=!1,bn=i.a.createContext(null),vn=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,a=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o="exited",r.appearStatus="entering"):o="entered":o=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:o},r.nextCallback=null,r}hn(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),"entering"===t){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:c.a.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[c.a.findDOMNode(this),r],a=o[0],i=o[1],l=this.getTimeouts(),s=r?l.appear:l.enter;!e&&!n||mn?this.safeSetState({status:"entered"},(function(){t.props.onEntered(a)})):(this.props.onEnter(a,i),this.safeSetState({status:"entering"},(function(){t.props.onEntering(a,i),t.onTransitionEnd(s,(function(){t.safeSetState({status:"entered"},(function(){t.props.onEntered(a,i)}))}))})))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:c.a.findDOMNode(this);t&&!mn?(this.props.onExit(r),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:c.a.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=o[0],i=o[1];this.props.addEndListener(a,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Object(bt.a)(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return i.a.createElement(bn.Provider,{value:null},"function"==typeof n?n(e,r):i.a.cloneElement(i.a.Children.only(n),r))},t}(i.a.Component);function gn(){}vn.contextType=bn,vn.propTypes={},vn.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:gn,onEntering:gn,onEntered:gn,onExit:gn,onExiting:gn,onExited:gn},vn.UNMOUNTED="unmounted",vn.EXITED="exited",vn.ENTERING="entering",vn.ENTERED="entered",vn.EXITING="exiting";var yn=vn;function xn(){const e=Object(_t.a)(Nt.a);return e[kt.a]||e}const On=e=>e.scrollTop;function wn(e,t){var n,r;const{timeout:o,easing:a,style:i={}}=e;return{duration:null!=(n=i.transitionDuration)?n:"number"==typeof o?o:o[t.mode]||0,easing:null!=(r=i.transitionTimingFunction)?r:"object"==typeof a?a[t.mode]:a,delay:i.transitionDelay}}var jn=n(17);const En=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],Sn={entering:{opacity:1},entered:{opacity:1}};var An=a.forwardRef((function(e,t){const n=xn(),r={enter:n.transitions.duration.enteringScreen,exit:n.transitions.duration.leavingScreen},{addEndListener:o,appear:i=!0,children:l,easing:c,in:s,onEnter:u,onEntered:d,onEntering:f,onExit:p,onExited:h,onExiting:m,style:b,timeout:v=r,TransitionComponent:g=yn}=e,y=Object(bt.a)(e,En),x=a.useRef(null),O=Object(jn.a)(x,l.ref,t),w=e=>t=>{if(e){const n=x.current;void 0===t?e(n):e(n,t)}},j=w(f),E=w((e,t)=>{On(e);const r=wn({style:b,timeout:v,easing:c},{mode:"enter"});e.style.webkitTransition=n.transitions.create("opacity",r),e.style.transition=n.transitions.create("opacity",r),u&&u(e,t)}),S=w(d),A=w(m),k=w(e=>{const t=wn({style:b,timeout:v,easing:c},{mode:"exit"});e.style.webkitTransition=n.transitions.create("opacity",t),e.style.transition=n.transitions.create("opacity",t),p&&p(e)}),C=w(h);return Object(xt.jsx)(g,Object(mt.a)({appear:i,in:s,nodeRef:x,onEnter:E,onEntered:S,onEntering:j,onExit:k,onExited:C,onExiting:A,addEndListener:e=>{o&&o(x.current,e)},timeout:v},y,{children:(e,t)=>a.cloneElement(l,Object(mt.a)({style:Object(mt.a)({opacity:0,visibility:"exited"!==e||s?void 0:"hidden"},Sn[e],b,l.props.style),ref:O},t))}))})),kn=n(269),Cn=n(224);function Tn(e){return Object(Cn.a)("MuiBackdrop",e)}Object(kn.a)("MuiBackdrop",["root","invisible"]);const Pn=["children","className","component","components","componentsProps","invisible","open","slotProps","slots","TransitionComponent","transitionDuration"],Rn=Object(pt.a)("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.invisible&&t.invisible]}})(({ownerState:e})=>Object(mt.a)({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},e.invisible&&{backgroundColor:"transparent"}));var _n=a.forwardRef((function(e,t){var n,r,o;const a=Object(Pt.a)({props:e,name:"MuiBackdrop"}),{children:i,className:l,component:c="div",components:s={},componentsProps:u={},invisible:d=!1,open:f,slotProps:p={},slots:h={},TransitionComponent:m=An,transitionDuration:b}=a,v=Object(bt.a)(a,Pn),g=Object(mt.a)({},a,{component:c,invisible:d}),y=(e=>{const{classes:t,invisible:n}=e,r={root:["root",n&&"invisible"]};return Object(Ft.a)(r,Tn,t)})(g),x=null!=(n=p.root)?n:u.root;return Object(xt.jsx)(m,Object(mt.a)({in:f,timeout:b},v,{children:Object(xt.jsx)(Rn,Object(mt.a)({"aria-hidden":!0},x,{as:null!=(r=null!=(o=h.root)?o:s.Root)?r:c,className:Object(Dt.a)(y.root,l,null==x?void 0:x.className),ownerState:Object(mt.a)({},g,null==x?void 0:x.ownerState),classes:y,ref:t,children:i}))}))}));function Ln(e){return Object(Cn.a)("MuiModal",e)}Object(kn.a)("MuiModal",["root","hidden","backdrop"]);const Nn=["BackdropComponent","BackdropProps","classes","className","closeAfterTransition","children","container","component","components","componentsProps","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","onBackdropClick","onClose","onTransitionEnter","onTransitionExited","open","slotProps","slots","theme"],Mn=Object(pt.a)("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.open&&n.exited&&t.hidden]}})(({theme:e,ownerState:t})=>Object(mt.a)({position:"fixed",zIndex:(e.vars||e).zIndex.modal,right:0,bottom:0,top:0,left:0},!t.open&&t.exited&&{visibility:"hidden"})),In=Object(pt.a)(_n,{name:"MuiModal",slot:"Backdrop",overridesResolver:(e,t)=>t.backdrop})({zIndex:-1});var Bn=a.forwardRef((function(e,t){var n,r,o,i,l,c;const s=Object(Pt.a)({name:"MuiModal",props:e}),{BackdropComponent:u=In,BackdropProps:d,className:f,closeAfterTransition:p=!1,children:h,container:m,component:b,components:v={},componentsProps:g={},disableAutoFocus:y=!1,disableEnforceFocus:x=!1,disableEscapeKeyDown:O=!1,disablePortal:w=!1,disableRestoreFocus:j=!1,disableScrollLock:E=!1,hideBackdrop:S=!1,keepMounted:A=!1,onBackdropClick:k,open:C,slotProps:T,slots:P}=s,R=Object(bt.a)(s,Nn),_=Object(mt.a)({},s,{closeAfterTransition:p,disableAutoFocus:y,disableEnforceFocus:x,disableEscapeKeyDown:O,disablePortal:w,disableRestoreFocus:j,disableScrollLock:E,hideBackdrop:S,keepMounted:A}),{getRootProps:L,getBackdropProps:N,getTransitionProps:M,portalRef:I,isTopModal:B,exited:z,hasTransition:D}=on(Object(mt.a)({},_,{rootRef:t})),F=Object(mt.a)({},_,{exited:z}),W=(e=>{const{open:t,exited:n,classes:r}=e,o={root:["root",!t&&n&&"hidden"],backdrop:["backdrop"]};return Object(Ft.a)(o,Ln,r)})(F),$={};if(void 0===h.props.tabIndex&&($.tabIndex="-1"),D){const{onEnter:e,onExited:t}=M();$.onEnter=e,$.onExited=t}const U=null!=(n=null!=(r=null==P?void 0:P.root)?r:v.Root)?n:Mn,V=null!=(o=null!=(i=null==P?void 0:P.backdrop)?i:v.Backdrop)?o:u,H=null!=(l=null==T?void 0:T.root)?l:g.root,q=null!=(c=null==T?void 0:T.backdrop)?c:g.backdrop,G=qt({elementType:U,externalSlotProps:H,externalForwardedProps:R,getSlotProps:L,additionalProps:{ref:t,as:b},ownerState:F,className:Object(Dt.a)(f,null==H?void 0:H.className,null==W?void 0:W.root,!F.open&&F.exited&&(null==W?void 0:W.hidden))}),Y=qt({elementType:V,externalSlotProps:q,additionalProps:d,getSlotProps:e=>N(Object(mt.a)({},e,{onClick:t=>{k&&k(t),null!=e&&e.onClick&&e.onClick(t)}})),className:Object(Dt.a)(null==q?void 0:q.className,null==d?void 0:d.className,null==W?void 0:W.backdrop),ownerState:F});return A||C||D&&!z?Object(xt.jsx)(fn,{ref:I,container:m,disablePortal:w,children:Object(xt.jsxs)(U,Object(mt.a)({},G,{children:[!S&&u?Object(xt.jsx)(V,Object(mt.a)({},Y)):null,Object(xt.jsx)(sn,{disableEnforceFocus:x,disableAutoFocus:y,disableRestoreFocus:j,isEnabled:B,open:C,children:a.cloneElement(h,$)})]}))}):null})),zn=n(55),Dn=n(69);const Fn=["addEndListener","appear","children","container","direction","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function Wn(e,t,n){var r;const o=function(e,t,n){const r=t.getBoundingClientRect(),o=n&&n.getBoundingClientRect(),a=Object(Dn.a)(t);let i;if(t.fakeTransform)i=t.fakeTransform;else{const e=a.getComputedStyle(t);i=e.getPropertyValue("-webkit-transform")||e.getPropertyValue("transform")}let l=0,c=0;if(i&&"none"!==i&&"string"==typeof i){const e=i.split("(")[1].split(")")[0].split(",");l=parseInt(e[4],10),c=parseInt(e[5],10)}return"left"===e?o?`translateX(${o.right+l-r.left}px)`:`translateX(${a.innerWidth+l-r.left}px)`:"right"===e?o?`translateX(-${r.right-o.left-l}px)`:`translateX(-${r.left+r.width-l}px)`:"up"===e?o?`translateY(${o.bottom+c-r.top}px)`:`translateY(${a.innerHeight+c-r.top}px)`:o?`translateY(-${r.top-o.top+r.height-c}px)`:`translateY(-${r.top+r.height-c}px)`}(e,t,"function"==typeof(r=n)?r():r);o&&(t.style.webkitTransform=o,t.style.transform=o)}var $n=a.forwardRef((function(e,t){const n=xn(),r={enter:n.transitions.easing.easeOut,exit:n.transitions.easing.sharp},o={enter:n.transitions.duration.enteringScreen,exit:n.transitions.duration.leavingScreen},{addEndListener:i,appear:l=!0,children:c,container:s,direction:u="down",easing:d=r,in:f,onEnter:p,onEntered:h,onEntering:m,onExit:b,onExited:v,onExiting:g,style:y,timeout:x=o,TransitionComponent:O=yn}=e,w=Object(bt.a)(e,Fn),j=a.useRef(null),E=Object(jn.a)(c.ref,j,t),S=e=>t=>{e&&(void 0===t?e(j.current):e(j.current,t))},A=S((e,t)=>{Wn(u,e,s),On(e),p&&p(e,t)}),k=S((e,t)=>{const r=wn({timeout:x,style:y,easing:d},{mode:"enter"});e.style.webkitTransition=n.transitions.create("-webkit-transform",Object(mt.a)({},r)),e.style.transition=n.transitions.create("transform",Object(mt.a)({},r)),e.style.webkitTransform="none",e.style.transform="none",m&&m(e,t)}),C=S(h),T=S(g),P=S(e=>{const t=wn({timeout:x,style:y,easing:d},{mode:"exit"});e.style.webkitTransition=n.transitions.create("-webkit-transform",t),e.style.transition=n.transitions.create("transform",t),Wn(u,e,s),b&&b(e)}),R=S(e=>{e.style.webkitTransition="",e.style.transition="",v&&v(e)}),_=a.useCallback(()=>{j.current&&Wn(u,j.current,s)},[u,s]);return a.useEffect(()=>{if(f||"down"===u||"right"===u)return;const e=Object(zn.a)(()=>{j.current&&Wn(u,j.current,s)}),t=Object(Dn.a)(j.current);return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}},[u,f,s]),a.useEffect(()=>{f||_()},[f,_]),Object(xt.jsx)(O,Object(mt.a)({nodeRef:j,onEnter:A,onEntered:C,onEntering:k,onExit:P,onExited:R,onExiting:T,addEndListener:e=>{i&&i(j.current,e)},appear:l,in:f,timeout:x},w,{children:(e,t)=>a.cloneElement(c,Object(mt.a)({ref:E,style:Object(mt.a)({visibility:"exited"!==e||f?void 0:"hidden"},y,c.props.style)},t))}))})),Un=n(274);var Vn=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)};function Hn(e){return Object(Cn.a)("MuiPaper",e)}Object(kn.a)("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const qn=["className","component","elevation","square","variant"],Gn=Object(pt.a)("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t["elevation"+n.elevation]]}})(({theme:e,ownerState:t})=>{var n;return Object(mt.a)({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:"1px solid "+(e.vars||e).palette.divider},"elevation"===t.variant&&Object(mt.a)({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${Object(Un.a)("#fff",Vn(t.elevation))}, ${Object(Un.a)("#fff",Vn(t.elevation))})`},e.vars&&{backgroundImage:null==(n=e.vars.overlays)?void 0:n[t.elevation]}))});var Yn=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiPaper"}),{className:r,component:o="div",elevation:a=1,square:i=!1,variant:l="elevation"}=n,c=Object(bt.a)(n,qn),s=Object(mt.a)({},n,{component:o,elevation:a,square:i,variant:l}),u=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e,a={root:["root",r,!t&&"rounded","elevation"===r&&"elevation"+n]};return Object(Ft.a)(a,Hn,o)})(s);return Object(xt.jsx)(Gn,Object(mt.a)({as:o,ownerState:s,className:Object(Dt.a)(u.root,r),ref:t},c))})),Kn=n(7);function Xn(e){return Object(Cn.a)("MuiDrawer",e)}Object(kn.a)("MuiDrawer",["root","docked","paper","paperAnchorLeft","paperAnchorRight","paperAnchorTop","paperAnchorBottom","paperAnchorDockedLeft","paperAnchorDockedRight","paperAnchorDockedTop","paperAnchorDockedBottom","modal"]);const Jn=["BackdropProps"],Qn=["anchor","BackdropProps","children","className","elevation","hideBackdrop","ModalProps","onClose","open","PaperProps","SlideProps","TransitionComponent","transitionDuration","variant"],Zn=(e,t)=>{const{ownerState:n}=e;return[t.root,("permanent"===n.variant||"persistent"===n.variant)&&t.docked,t.modal]},er=Object(pt.a)(Bn,{name:"MuiDrawer",slot:"Root",overridesResolver:Zn})(({theme:e})=>({zIndex:(e.vars||e).zIndex.drawer})),tr=Object(pt.a)("div",{shouldForwardProp:pt.b,name:"MuiDrawer",slot:"Docked",skipVariantsResolver:!1,overridesResolver:Zn})({flex:"0 0 auto"}),nr=Object(pt.a)(Yn,{name:"MuiDrawer",slot:"Paper",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.paper,t["paperAnchor"+Object(Kn.a)(n.anchor)],"temporary"!==n.variant&&t["paperAnchorDocked"+Object(Kn.a)(n.anchor)]]}})(({theme:e,ownerState:t})=>Object(mt.a)({overflowY:"auto",display:"flex",flexDirection:"column",height:"100%",flex:"1 0 auto",zIndex:(e.vars||e).zIndex.drawer,WebkitOverflowScrolling:"touch",position:"fixed",top:0,outline:0},"left"===t.anchor&&{left:0},"top"===t.anchor&&{top:0,left:0,right:0,height:"auto",maxHeight:"100%"},"right"===t.anchor&&{right:0},"bottom"===t.anchor&&{top:"auto",left:0,bottom:0,right:0,height:"auto",maxHeight:"100%"},"left"===t.anchor&&"temporary"!==t.variant&&{borderRight:"1px solid "+(e.vars||e).palette.divider},"top"===t.anchor&&"temporary"!==t.variant&&{borderBottom:"1px solid "+(e.vars||e).palette.divider},"right"===t.anchor&&"temporary"!==t.variant&&{borderLeft:"1px solid "+(e.vars||e).palette.divider},"bottom"===t.anchor&&"temporary"!==t.variant&&{borderTop:"1px solid "+(e.vars||e).palette.divider})),rr={left:"right",right:"left",top:"down",bottom:"up"};var or=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiDrawer"}),r=xn(),o={enter:r.transitions.duration.enteringScreen,exit:r.transitions.duration.leavingScreen},{anchor:i="left",BackdropProps:l,children:c,className:s,elevation:u=16,hideBackdrop:d=!1,ModalProps:{BackdropProps:f}={},onClose:p,open:h=!1,PaperProps:m={},SlideProps:b,TransitionComponent:v=$n,transitionDuration:g=o,variant:y="temporary"}=n,x=Object(bt.a)(n.ModalProps,Jn),O=Object(bt.a)(n,Qn),w=a.useRef(!1);a.useEffect(()=>{w.current=!0},[]);const j=function(e,t){return"rtl"===e.direction&&function(e){return-1!==["left","right"].indexOf(e)}(t)?rr[t]:t}(r,i),E=i,S=Object(mt.a)({},n,{anchor:E,elevation:u,open:h,variant:y},O),A=(e=>{const{classes:t,anchor:n,variant:r}=e,o={root:["root"],docked:[("permanent"===r||"persistent"===r)&&"docked"],modal:["modal"],paper:["paper","paperAnchor"+Object(Kn.a)(n),"temporary"!==r&&"paperAnchorDocked"+Object(Kn.a)(n)]};return Object(Ft.a)(o,Xn,t)})(S),k=Object(xt.jsx)(nr,Object(mt.a)({elevation:"temporary"===y?u:0,square:!0},m,{className:Object(Dt.a)(A.paper,m.className),ownerState:S,children:c}));if("permanent"===y)return Object(xt.jsx)(tr,Object(mt.a)({className:Object(Dt.a)(A.root,A.docked,s),ownerState:S,ref:t},O,{children:k}));const C=Object(xt.jsx)(v,Object(mt.a)({in:h,direction:rr[j],timeout:g,appear:w.current},b,{children:k}));return"persistent"===y?Object(xt.jsx)(tr,Object(mt.a)({className:Object(Dt.a)(A.root,A.docked,s),ownerState:S,ref:t},O,{children:C})):Object(xt.jsx)(er,Object(mt.a)({BackdropProps:Object(mt.a)({},l,f,{transitionDuration:g}),className:Object(Dt.a)(A.root,A.modal,s),open:h,ownerState:S,onClose:p,hideBackdrop:d,ref:t},O,x,{children:C}))})),ar=n(41),ir=n(121),lr=n(147),cr=n(59);const sr=["sx"];function ur(e){const{sx:t}=e,n=Object(bt.a)(e,sr),{systemProps:r,otherProps:o}=(e=>{var t,n;const r={systemProps:{},otherProps:{}},o=null!=(t=null==e||null==(n=e.theme)?void 0:n.unstable_sxConfig)?t:cr.a;return Object.keys(e).forEach(t=>{o[t]?r.systemProps[t]=e[t]:r.otherProps[t]=e[t]}),r})(n);let a;return a=Array.isArray(t)?[r,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return Object(lr.b)(n)?Object(mt.a)({},r,n):r}:Object(mt.a)({},r,t),Object(mt.a)({},o,{sx:a})}const dr=["className","component"];var fr=n(225);var pr=Object(kn.a)("MuiBox",["root"]);const hr=Object(ht.a)();var mr=function(e={}){const{themeId:t,defaultTheme:n,defaultClassName:r="MuiBox-root",generateClassName:o}=e,i=Object(ar.a)("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(ir.a);return a.forwardRef((function(e,a){const l=Object(_t.a)(n),c=ur(e),{className:s,component:u="div"}=c,d=Object(bt.a)(c,dr);return Object(xt.jsx)(i,Object(mt.a)({as:u,ref:a,className:Object(Dt.a)(s,o?o(r):r),theme:t&&l[t]||l},d))}))}({themeId:kt.a,defaultTheme:hr,defaultClassName:pr.root,generateClassName:fr.a.generate});function br(e){return Object(Cn.a)("MuiAppBar",e)}Object(kn.a)("MuiAppBar",["root","positionFixed","positionAbsolute","positionSticky","positionStatic","positionRelative","colorDefault","colorPrimary","colorSecondary","colorInherit","colorTransparent","colorError","colorInfo","colorSuccess","colorWarning"]);const vr=["className","color","enableColorOnDark","position"],gr=(e,t)=>e?`${null==e?void 0:e.replace(")","")}, ${t})`:t,yr=Object(pt.a)(Yn,{name:"MuiAppBar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t["position"+Object(Kn.a)(n.position)],t["color"+Object(Kn.a)(n.color)]]}})(({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?e.palette.grey[100]:e.palette.grey[900];return Object(mt.a)({display:"flex",flexDirection:"column",width:"100%",boxSizing:"border-box",flexShrink:0},"fixed"===t.position&&{position:"fixed",zIndex:(e.vars||e).zIndex.appBar,top:0,left:"auto",right:0,"@media print":{position:"absolute"}},"absolute"===t.position&&{position:"absolute",zIndex:(e.vars||e).zIndex.appBar,top:0,left:"auto",right:0},"sticky"===t.position&&{position:"sticky",zIndex:(e.vars||e).zIndex.appBar,top:0,left:"auto",right:0},"static"===t.position&&{position:"static"},"relative"===t.position&&{position:"relative"},!e.vars&&Object(mt.a)({},"default"===t.color&&{backgroundColor:n,color:e.palette.getContrastText(n)},t.color&&"default"!==t.color&&"inherit"!==t.color&&"transparent"!==t.color&&{backgroundColor:e.palette[t.color].main,color:e.palette[t.color].contrastText},"inherit"===t.color&&{color:"inherit"},"dark"===e.palette.mode&&!t.enableColorOnDark&&{backgroundColor:null,color:null},"transparent"===t.color&&Object(mt.a)({backgroundColor:"transparent",color:"inherit"},"dark"===e.palette.mode&&{backgroundImage:"none"})),e.vars&&Object(mt.a)({},"default"===t.color&&{"--AppBar-background":t.enableColorOnDark?e.vars.palette.AppBar.defaultBg:gr(e.vars.palette.AppBar.darkBg,e.vars.palette.AppBar.defaultBg),"--AppBar-color":t.enableColorOnDark?e.vars.palette.text.primary:gr(e.vars.palette.AppBar.darkColor,e.vars.palette.text.primary)},t.color&&!t.color.match(/^(default|inherit|transparent)$/)&&{"--AppBar-background":t.enableColorOnDark?e.vars.palette[t.color].main:gr(e.vars.palette.AppBar.darkBg,e.vars.palette[t.color].main),"--AppBar-color":t.enableColorOnDark?e.vars.palette[t.color].contrastText:gr(e.vars.palette.AppBar.darkColor,e.vars.palette[t.color].contrastText)},{backgroundColor:"var(--AppBar-background)",color:"inherit"===t.color?"inherit":"var(--AppBar-color)"},"transparent"===t.color&&{backgroundImage:"none",backgroundColor:"transparent",color:"inherit"}))});var xr=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiAppBar"}),{className:r,color:o="primary",enableColorOnDark:a=!1,position:i="fixed"}=n,l=Object(bt.a)(n,vr),c=Object(mt.a)({},n,{color:o,position:i,enableColorOnDark:a}),s=(e=>{const{color:t,position:n,classes:r}=e,o={root:["root","color"+Object(Kn.a)(t),"position"+Object(Kn.a)(n)]};return Object(Ft.a)(o,br,r)})(c);return Object(xt.jsx)(yr,Object(mt.a)({square:!0,component:"header",ownerState:c,elevation:4,className:Object(Dt.a)(s.root,r,"fixed"===i&&"mui-fixed"),ref:t},l))}));function Or(e){return Object(Cn.a)("MuiToolbar",e)}Object(kn.a)("MuiToolbar",["root","gutters","regular","dense"]);const wr=["className","component","disableGutters","variant"],jr=Object(pt.a)("div",{name:"MuiToolbar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disableGutters&&t.gutters,t[n.variant]]}})(({theme:e,ownerState:t})=>Object(mt.a)({position:"relative",display:"flex",alignItems:"center"},!t.disableGutters&&{paddingLeft:e.spacing(2),paddingRight:e.spacing(2),[e.breakpoints.up("sm")]:{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}},"dense"===t.variant&&{minHeight:48}),({theme:e,ownerState:t})=>"regular"===t.variant&&e.mixins.toolbar);var Er=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiToolbar"}),{className:r,component:o="div",disableGutters:a=!1,variant:i="regular"}=n,l=Object(bt.a)(n,wr),c=Object(mt.a)({},n,{component:o,disableGutters:a,variant:i}),s=(e=>{const{classes:t,disableGutters:n,variant:r}=e,o={root:["root",!n&&"gutters",r]};return Object(Ft.a)(o,Or,t)})(c);return Object(xt.jsx)(jr,Object(mt.a)({as:o,className:Object(Dt.a)(s.root,r),ref:t,ownerState:c},l))}));var Sr=a.createContext({});function Ar(e){return Object(Cn.a)("MuiList",e)}Object(kn.a)("MuiList",["root","padding","dense","subheader"]);const kr=["children","className","component","dense","disablePadding","subheader"],Cr=Object(pt.a)("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disablePadding&&t.padding,n.dense&&t.dense,n.subheader&&t.subheader]}})(({ownerState:e})=>Object(mt.a)({listStyle:"none",margin:0,padding:0,position:"relative"},!e.disablePadding&&{paddingTop:8,paddingBottom:8},e.subheader&&{paddingTop:0}));var Tr=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiList"}),{children:r,className:o,component:i="ul",dense:l=!1,disablePadding:c=!1,subheader:s}=n,u=Object(bt.a)(n,kr),d=a.useMemo(()=>({dense:l}),[l]),f=Object(mt.a)({},n,{component:i,dense:l,disablePadding:c}),p=(e=>{const{classes:t,disablePadding:n,dense:r,subheader:o}=e,a={root:["root",!n&&"padding",r&&"dense",o&&"subheader"]};return Object(Ft.a)(a,Ar,t)})(f);return Object(xt.jsx)(Sr.Provider,{value:d,children:Object(xt.jsxs)(Cr,Object(mt.a)({as:i,className:Object(Dt.a)(p.root,o),ref:t,ownerState:f},u,{children:[s,r]}))})}));function Pr(e){return Object(Cn.a)("MuiTypography",e)}Object(kn.a)("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]);const Rr=["align","className","component","gutterBottom","noWrap","paragraph","variant","variantMapping"],_r=Object(pt.a)("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.variant&&t[n.variant],"inherit"!==n.align&&t["align"+Object(Kn.a)(n.align)],n.noWrap&&t.noWrap,n.gutterBottom&&t.gutterBottom,n.paragraph&&t.paragraph]}})(({theme:e,ownerState:t})=>Object(mt.a)({margin:0},"inherit"===t.variant&&{font:"inherit"},"inherit"!==t.variant&&e.typography[t.variant],"inherit"!==t.align&&{textAlign:t.align},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.paragraph&&{marginBottom:16})),Lr={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},Nr={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"};var Mr=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiTypography"}),r=(e=>Nr[e]||e)(n.color),o=ur(Object(mt.a)({},n,{color:r})),{align:a="inherit",className:i,component:l,gutterBottom:c=!1,noWrap:s=!1,paragraph:u=!1,variant:d="body1",variantMapping:f=Lr}=o,p=Object(bt.a)(o,Rr),h=Object(mt.a)({},o,{align:a,color:r,className:i,component:l,gutterBottom:c,noWrap:s,paragraph:u,variant:d,variantMapping:f}),m=l||(u?"p":f[d]||Lr[d])||"span",b=(e=>{const{align:t,gutterBottom:n,noWrap:r,paragraph:o,variant:a,classes:i}=e,l={root:["root",a,"inherit"!==e.align&&"align"+Object(Kn.a)(t),n&&"gutterBottom",r&&"noWrap",o&&"paragraph"]};return Object(Ft.a)(l,Pr,i)})(h);return Object(xt.jsx)(_r,Object(mt.a)({as:m,ref:t,ownerState:h,className:Object(Dt.a)(b.root,i)},p))}));function Ir(e){return Object(Cn.a)("MuiDivider",e)}var Br=Object(kn.a)("MuiDivider",["root","absolute","fullWidth","inset","middle","flexItem","light","vertical","withChildren","withChildrenVertical","textAlignRight","textAlignLeft","wrapper","wrapperVertical"]);const zr=["absolute","children","className","component","flexItem","light","orientation","role","textAlign","variant"],Dr=Object(pt.a)("div",{name:"MuiDivider",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.absolute&&t.absolute,t[n.variant],n.light&&t.light,"vertical"===n.orientation&&t.vertical,n.flexItem&&t.flexItem,n.children&&t.withChildren,n.children&&"vertical"===n.orientation&&t.withChildrenVertical,"right"===n.textAlign&&"vertical"!==n.orientation&&t.textAlignRight,"left"===n.textAlign&&"vertical"!==n.orientation&&t.textAlignLeft]}})(({theme:e,ownerState:t})=>Object(mt.a)({margin:0,flexShrink:0,borderWidth:0,borderStyle:"solid",borderColor:(e.vars||e).palette.divider,borderBottomWidth:"thin"},t.absolute&&{position:"absolute",bottom:0,left:0,width:"100%"},t.light&&{borderColor:e.vars?`rgba(${e.vars.palette.dividerChannel} / 0.08)`:Object(Un.a)(e.palette.divider,.08)},"inset"===t.variant&&{marginLeft:72},"middle"===t.variant&&"horizontal"===t.orientation&&{marginLeft:e.spacing(2),marginRight:e.spacing(2)},"middle"===t.variant&&"vertical"===t.orientation&&{marginTop:e.spacing(1),marginBottom:e.spacing(1)},"vertical"===t.orientation&&{height:"100%",borderBottomWidth:0,borderRightWidth:"thin"},t.flexItem&&{alignSelf:"stretch",height:"auto"}),({ownerState:e})=>Object(mt.a)({},e.children&&{display:"flex",whiteSpace:"nowrap",textAlign:"center",border:0,"&::before, &::after":{content:'""',alignSelf:"center"}}),({theme:e,ownerState:t})=>Object(mt.a)({},t.children&&"vertical"!==t.orientation&&{"&::before, &::after":{width:"100%",borderTop:"thin solid "+(e.vars||e).palette.divider}}),({theme:e,ownerState:t})=>Object(mt.a)({},t.children&&"vertical"===t.orientation&&{flexDirection:"column","&::before, &::after":{height:"100%",borderLeft:"thin solid "+(e.vars||e).palette.divider}}),({ownerState:e})=>Object(mt.a)({},"right"===e.textAlign&&"vertical"!==e.orientation&&{"&::before":{width:"90%"},"&::after":{width:"10%"}},"left"===e.textAlign&&"vertical"!==e.orientation&&{"&::before":{width:"10%"},"&::after":{width:"90%"}})),Fr=Object(pt.a)("span",{name:"MuiDivider",slot:"Wrapper",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.wrapper,"vertical"===n.orientation&&t.wrapperVertical]}})(({theme:e,ownerState:t})=>Object(mt.a)({display:"inline-block",paddingLeft:`calc(${e.spacing(1)} * 1.2)`,paddingRight:`calc(${e.spacing(1)} * 1.2)`},"vertical"===t.orientation&&{paddingTop:`calc(${e.spacing(1)} * 1.2)`,paddingBottom:`calc(${e.spacing(1)} * 1.2)`})),Wr=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiDivider"}),{absolute:r=!1,children:o,className:a,component:i=(o?"div":"hr"),flexItem:l=!1,light:c=!1,orientation:s="horizontal",role:u=("hr"!==i?"separator":void 0),textAlign:d="center",variant:f="fullWidth"}=n,p=Object(bt.a)(n,zr),h=Object(mt.a)({},n,{absolute:r,component:i,flexItem:l,light:c,orientation:s,role:u,textAlign:d,variant:f}),m=(e=>{const{absolute:t,children:n,classes:r,flexItem:o,light:a,orientation:i,textAlign:l,variant:c}=e,s={root:["root",t&&"absolute",c,a&&"light","vertical"===i&&"vertical",o&&"flexItem",n&&"withChildren",n&&"vertical"===i&&"withChildrenVertical","right"===l&&"vertical"!==i&&"textAlignRight","left"===l&&"vertical"!==i&&"textAlignLeft"],wrapper:["wrapper","vertical"===i&&"wrapperVertical"]};return Object(Ft.a)(s,Ir,r)})(h);return Object(xt.jsx)(Dr,Object(mt.a)({as:i,className:Object(Dt.a)(m.root,a),role:u,ref:t,ownerState:h},p,{children:o?Object(xt.jsx)(Fr,{className:m.wrapper,ownerState:h,children:o}):null}))}));Wr.muiSkipListHighlight=!0;var $r=Wr,Ur=n(49),Vr=n(56);function Hr(e,t){var n=Object.create(null);return e&&a.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&Object(a.isValidElement)(e)?t(e):e}(e)})),n}function qr(e,t,n){return null!=n[t]?n[t]:e.props[t]}function Gr(e,t,n){var r=Hr(e.children),o=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var c in t){if(o[c])for(r=0;r<o[c].length;r++){var s=o[c][r];l[o[c][r]]=n(s)}l[c]=n(c)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(t,r);return Object.keys(o).forEach((function(i){var l=o[i];if(Object(a.isValidElement)(l)){var c=i in t,s=i in r,u=t[i],d=Object(a.isValidElement)(u)&&!u.props.in;!s||c&&!d?s||!c||d?s&&c&&Object(a.isValidElement)(u)&&(o[i]=Object(a.cloneElement)(l,{onExited:n.bind(null,l),in:u.props.in,exit:qr(l,"exit",e),enter:qr(l,"enter",e)})):o[i]=Object(a.cloneElement)(l,{in:!1}):o[i]=Object(a.cloneElement)(l,{onExited:n.bind(null,l),in:!0,exit:qr(l,"exit",e),enter:qr(l,"enter",e)})}})),o}var Yr=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Kr=function(e){function t(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}hn(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,r,o=t.children,i=t.handleExited;return{children:t.firstRender?(n=e,r=i,Hr(n.children,(function(e){return Object(a.cloneElement)(e,{onExited:r.bind(null,e),in:!0,appear:qr(e,"appear",n),enter:qr(e,"enter",n),exit:qr(e,"exit",n)})}))):Gr(e,o,i),firstRender:!1}},n.handleExited=function(e,t){var n=Hr(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=Object(mt.a)({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=Object(bt.a)(e,["component","childFactory"]),o=this.state.contextValue,a=Yr(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?i.a.createElement(bn.Provider,{value:o},a):i.a.createElement(bn.Provider,{value:o},i.a.createElement(t,r,a))},t}(i.a.Component);Kr.propTypes={},Kr.defaultProps={component:"div",childFactory:function(e){return e}};var Xr=Kr,Jr=n(47),Qr=n(146);var Zr=function(e){const{className:t,classes:n,pulsate:r=!1,rippleX:o,rippleY:i,rippleSize:l,in:c,onExited:s,timeout:u}=e,[d,f]=a.useState(!1),p=Object(Dt.a)(t,n.ripple,n.rippleVisible,r&&n.ripplePulsate),h={width:l,height:l,top:-l/2+i,left:-l/2+o},m=Object(Dt.a)(n.child,d&&n.childLeaving,r&&n.childPulsate);return c||d||f(!0),a.useEffect(()=>{if(!c&&null!=s){const e=setTimeout(s,u);return()=>{clearTimeout(e)}}},[s,c,u]),Object(xt.jsx)("span",{className:p,style:h,children:Object(xt.jsx)("span",{className:m})})};var eo=Object(kn.a)("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]);const to=["center","classes","className"];let no,ro,oo,ao,io=e=>e;const lo=Object(Jr.c)(no||(no=io`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),co=Object(Jr.c)(ro||(ro=io`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),so=Object(Jr.c)(oo||(oo=io`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),uo=Object(pt.a)("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),fo=Object(pt.a)(Zr,{name:"MuiTouchRipple",slot:"Ripple"})(ao||(ao=io`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),eo.rippleVisible,lo,550,({theme:e})=>e.transitions.easing.easeInOut,eo.ripplePulsate,({theme:e})=>e.transitions.duration.shorter,eo.child,eo.childLeaving,co,550,({theme:e})=>e.transitions.easing.easeInOut,eo.childPulsate,so,({theme:e})=>e.transitions.easing.easeInOut);var po=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiTouchRipple"}),{center:r=!1,classes:o={},className:i}=n,l=Object(bt.a)(n,to),[c,s]=a.useState([]),u=a.useRef(0),d=a.useRef(null);a.useEffect(()=>{d.current&&(d.current(),d.current=null)},[c]);const f=a.useRef(!1),p=Object(Qr.b)(),h=a.useRef(null),m=a.useRef(null),b=a.useCallback(e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:a,cb:i}=e;s(e=>[...e,Object(xt.jsx)(fo,{classes:{ripple:Object(Dt.a)(o.ripple,eo.ripple),rippleVisible:Object(Dt.a)(o.rippleVisible,eo.rippleVisible),ripplePulsate:Object(Dt.a)(o.ripplePulsate,eo.ripplePulsate),child:Object(Dt.a)(o.child,eo.child),childLeaving:Object(Dt.a)(o.childLeaving,eo.childLeaving),childPulsate:Object(Dt.a)(o.childPulsate,eo.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:a},u.current)]),u.current+=1,d.current=i},[o]),v=a.useCallback((e={},t={},n=(()=>{}))=>{const{pulsate:o=!1,center:a=r||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&f.current)return void(f.current=!1);"touchstart"===(null==e?void 0:e.type)&&(f.current=!0);const l=i?null:m.current,c=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let s,u,d;if(a||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)s=Math.round(c.width/2),u=Math.round(c.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;s=Math.round(t-c.left),u=Math.round(n-c.top)}if(a)d=Math.sqrt((2*c.width**2+c.height**2)/3),d%2==0&&(d+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-s),s)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-u),u)+2;d=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===h.current&&(h.current=()=>{b({pulsate:o,rippleX:s,rippleY:u,rippleSize:d,cb:n})},p.start(80,()=>{h.current&&(h.current(),h.current=null)})):b({pulsate:o,rippleX:s,rippleY:u,rippleSize:d,cb:n})},[r,b,p]),g=a.useCallback(()=>{v({},{pulsate:!0})},[v]),y=a.useCallback((e,t)=>{if(p.clear(),"touchend"===(null==e?void 0:e.type)&&h.current)return h.current(),h.current=null,void p.start(0,()=>{y(e,t)});h.current=null,s(e=>e.length>0?e.slice(1):e),d.current=t},[p]);return a.useImperativeHandle(t,()=>({pulsate:g,start:v,stop:y}),[g,v,y]),Object(xt.jsx)(uo,Object(mt.a)({className:Object(Dt.a)(eo.root,o.root,i),ref:m},l,{children:Object(xt.jsx)(Xr,{component:null,exit:!0,children:c})}))}));function ho(e){return Object(Cn.a)("MuiButtonBase",e)}var mo=Object(kn.a)("MuiButtonBase",["root","disabled","focusVisible"]);const bo=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],vo=Object(pt.a)("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},["&."+mo.disabled]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}});var go=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiButtonBase"}),{action:r,centerRipple:o=!1,children:i,className:l,component:c="button",disabled:s=!1,disableRipple:u=!1,disableTouchRipple:d=!1,focusRipple:f=!1,LinkComponent:p="a",onBlur:h,onClick:m,onContextMenu:b,onDragLeave:v,onFocus:g,onFocusVisible:y,onKeyDown:x,onKeyUp:O,onMouseDown:w,onMouseLeave:j,onMouseUp:E,onTouchEnd:S,onTouchMove:A,onTouchStart:k,tabIndex:C=0,TouchRippleProps:T,touchRippleRef:P,type:R}=n,_=Object(bt.a)(n,bo),L=a.useRef(null),N=a.useRef(null),M=Object(jn.a)(N,P),{isFocusVisibleRef:I,onFocus:B,onBlur:z,ref:D}=Object(Vr.a)(),[F,W]=a.useState(!1);s&&F&&W(!1),a.useImperativeHandle(r,()=>({focusVisible:()=>{W(!0),L.current.focus()}}),[]);const[$,U]=a.useState(!1);a.useEffect(()=>{U(!0)},[]);const V=$&&!u&&!s;function H(e,t,n=d){return Object(Ur.a)(r=>{t&&t(r);return!n&&N.current&&N.current[e](r),!0})}a.useEffect(()=>{F&&f&&!u&&$&&N.current.pulsate()},[u,f,F,$]);const q=H("start",w),G=H("stop",b),Y=H("stop",v),K=H("stop",E),X=H("stop",e=>{F&&e.preventDefault(),j&&j(e)}),J=H("start",k),Q=H("stop",S),Z=H("stop",A),ee=H("stop",e=>{z(e),!1===I.current&&W(!1),h&&h(e)},!1),te=Object(Ur.a)(e=>{L.current||(L.current=e.currentTarget),B(e),!0===I.current&&(W(!0),y&&y(e)),g&&g(e)}),ne=()=>{const e=L.current;return c&&"button"!==c&&!("A"===e.tagName&&e.href)},re=a.useRef(!1),oe=Object(Ur.a)(e=>{f&&!re.current&&F&&N.current&&" "===e.key&&(re.current=!0,N.current.stop(e,()=>{N.current.start(e)})),e.target===e.currentTarget&&ne()&&" "===e.key&&e.preventDefault(),x&&x(e),e.target===e.currentTarget&&ne()&&"Enter"===e.key&&!s&&(e.preventDefault(),m&&m(e))}),ae=Object(Ur.a)(e=>{f&&" "===e.key&&N.current&&F&&!e.defaultPrevented&&(re.current=!1,N.current.stop(e,()=>{N.current.pulsate(e)})),O&&O(e),m&&e.target===e.currentTarget&&ne()&&" "===e.key&&!e.defaultPrevented&&m(e)});let ie=c;"button"===ie&&(_.href||_.to)&&(ie=p);const le={};"button"===ie?(le.type=void 0===R?"button":R,le.disabled=s):(_.href||_.to||(le.role="button"),s&&(le["aria-disabled"]=s));const ce=Object(jn.a)(t,D,L);const se=Object(mt.a)({},n,{centerRipple:o,component:c,disabled:s,disableRipple:u,disableTouchRipple:d,focusRipple:f,tabIndex:C,focusVisible:F}),ue=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,a={root:["root",t&&"disabled",n&&"focusVisible"]},i=Object(Ft.a)(a,ho,o);return n&&r&&(i.root+=" "+r),i})(se);return Object(xt.jsxs)(vo,Object(mt.a)({as:ie,className:Object(Dt.a)(ue.root,l),ownerState:se,onBlur:ee,onClick:m,onContextMenu:G,onFocus:te,onKeyDown:oe,onKeyUp:ae,onMouseDown:q,onMouseLeave:X,onMouseUp:K,onDragLeave:Y,onTouchEnd:Q,onTouchMove:Z,onTouchStart:J,ref:ce,tabIndex:s?-1:C,type:R},le,_,{children:[i,V?Object(xt.jsx)(po,Object(mt.a)({ref:M,center:o},T)):null]}))}));function yo(e){return Object(Cn.a)("MuiIconButton",e)}var xo=Object(kn.a)("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]);const Oo=["edge","children","className","color","disabled","disableFocusRipple","size"],wo=Object(pt.a)(go,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"default"!==n.color&&t["color"+Object(Kn.a)(n.color)],n.edge&&t["edge"+Object(Kn.a)(n.edge)],t["size"+Object(Kn.a)(n.size)]]}})(({theme:e,ownerState:t})=>Object(mt.a)({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:Object(Un.a)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"start"===t.edge&&{marginLeft:"small"===t.size?-3:-12},"end"===t.edge&&{marginRight:"small"===t.size?-3:-12}),({theme:e,ownerState:t})=>{var n;const r=null==(n=(e.vars||e).palette)?void 0:n[t.color];return Object(mt.a)({},"inherit"===t.color&&{color:"inherit"},"inherit"!==t.color&&"default"!==t.color&&Object(mt.a)({color:null==r?void 0:r.main},!t.disableRipple&&{"&:hover":Object(mt.a)({},r&&{backgroundColor:e.vars?`rgba(${r.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Object(Un.a)(r.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),"small"===t.size&&{padding:5,fontSize:e.typography.pxToRem(18)},"large"===t.size&&{padding:12,fontSize:e.typography.pxToRem(28)},{["&."+xo.disabled]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})});var jo=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiIconButton"}),{edge:r=!1,children:o,className:a,color:i="default",disabled:l=!1,disableFocusRipple:c=!1,size:s="medium"}=n,u=Object(bt.a)(n,Oo),d=Object(mt.a)({},n,{edge:r,color:i,disabled:l,disableFocusRipple:c,size:s}),f=(e=>{const{classes:t,disabled:n,color:r,edge:o,size:a}=e,i={root:["root",n&&"disabled","default"!==r&&"color"+Object(Kn.a)(r),o&&"edge"+Object(Kn.a)(o),"size"+Object(Kn.a)(a)]};return Object(Ft.a)(i,yo,t)})(d);return Object(xt.jsx)(wo,Object(mt.a)({className:Object(Dt.a)(f.root,a),centerRipple:!0,focusRipple:!c,disabled:l,ref:t,ownerState:d},u,{children:o}))}));var Eo=e=>{const t=a.useRef({});return a.useEffect(()=>{t.current=e}),t.current};function So(e){return Object(Cn.a)("MuiBadge",e)}var Ao=Object(kn.a)("MuiBadge",["root","badge","dot","standard","anchorOriginTopRight","anchorOriginBottomRight","anchorOriginTopLeft","anchorOriginBottomLeft","invisible","colorError","colorInfo","colorPrimary","colorSecondary","colorSuccess","colorWarning","overlapRectangular","overlapCircular","anchorOriginTopLeftCircular","anchorOriginTopLeftRectangular","anchorOriginTopRightCircular","anchorOriginTopRightRectangular","anchorOriginBottomLeftCircular","anchorOriginBottomLeftRectangular","anchorOriginBottomRightCircular","anchorOriginBottomRightRectangular"]);const ko=["anchorOrigin","className","classes","component","components","componentsProps","children","overlap","color","invisible","max","badgeContent","slots","slotProps","showZero","variant"],Co=Pt.a,To=Object(pt.a)("span",{name:"MuiBadge",slot:"Root",overridesResolver:(e,t)=>t.root})({position:"relative",display:"inline-flex",verticalAlign:"middle",flexShrink:0}),Po=Object(pt.a)("span",{name:"MuiBadge",slot:"Badge",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.badge,t[n.variant],t[`anchorOrigin${Object(Kn.a)(n.anchorOrigin.vertical)}${Object(Kn.a)(n.anchorOrigin.horizontal)}${Object(Kn.a)(n.overlap)}`],"default"!==n.color&&t["color"+Object(Kn.a)(n.color)],n.invisible&&t.invisible]}})(({theme:e})=>{var t;return{display:"flex",flexDirection:"row",flexWrap:"wrap",justifyContent:"center",alignContent:"center",alignItems:"center",position:"absolute",boxSizing:"border-box",fontFamily:e.typography.fontFamily,fontWeight:e.typography.fontWeightMedium,fontSize:e.typography.pxToRem(12),minWidth:20,lineHeight:1,padding:"0 6px",height:20,borderRadius:10,zIndex:1,transition:e.transitions.create("transform",{easing:e.transitions.easing.easeInOut,duration:e.transitions.duration.enteringScreen}),variants:[...Object.keys((null!=(t=e.vars)?t:e).palette).filter(t=>{var n,r;return(null!=(n=e.vars)?n:e).palette[t].main&&(null!=(r=e.vars)?r:e).palette[t].contrastText}).map(t=>({props:{color:t},style:{backgroundColor:(e.vars||e).palette[t].main,color:(e.vars||e).palette[t].contrastText}})),{props:{variant:"dot"},style:{borderRadius:4,height:8,minWidth:8,padding:0}},{props:({ownerState:e})=>"top"===e.anchorOrigin.vertical&&"right"===e.anchorOrigin.horizontal&&"rectangular"===e.overlap,style:{top:0,right:0,transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%",["&."+Ao.invisible]:{transform:"scale(0) translate(50%, -50%)"}}},{props:({ownerState:e})=>"bottom"===e.anchorOrigin.vertical&&"right"===e.anchorOrigin.horizontal&&"rectangular"===e.overlap,style:{bottom:0,right:0,transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%",["&."+Ao.invisible]:{transform:"scale(0) translate(50%, 50%)"}}},{props:({ownerState:e})=>"top"===e.anchorOrigin.vertical&&"left"===e.anchorOrigin.horizontal&&"rectangular"===e.overlap,style:{top:0,left:0,transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%",["&."+Ao.invisible]:{transform:"scale(0) translate(-50%, -50%)"}}},{props:({ownerState:e})=>"bottom"===e.anchorOrigin.vertical&&"left"===e.anchorOrigin.horizontal&&"rectangular"===e.overlap,style:{bottom:0,left:0,transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%",["&."+Ao.invisible]:{transform:"scale(0) translate(-50%, 50%)"}}},{props:({ownerState:e})=>"top"===e.anchorOrigin.vertical&&"right"===e.anchorOrigin.horizontal&&"circular"===e.overlap,style:{top:"14%",right:"14%",transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%",["&."+Ao.invisible]:{transform:"scale(0) translate(50%, -50%)"}}},{props:({ownerState:e})=>"bottom"===e.anchorOrigin.vertical&&"right"===e.anchorOrigin.horizontal&&"circular"===e.overlap,style:{bottom:"14%",right:"14%",transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%",["&."+Ao.invisible]:{transform:"scale(0) translate(50%, 50%)"}}},{props:({ownerState:e})=>"top"===e.anchorOrigin.vertical&&"left"===e.anchorOrigin.horizontal&&"circular"===e.overlap,style:{top:"14%",left:"14%",transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%",["&."+Ao.invisible]:{transform:"scale(0) translate(-50%, -50%)"}}},{props:({ownerState:e})=>"bottom"===e.anchorOrigin.vertical&&"left"===e.anchorOrigin.horizontal&&"circular"===e.overlap,style:{bottom:"14%",left:"14%",transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%",["&."+Ao.invisible]:{transform:"scale(0) translate(-50%, 50%)"}}},{props:{invisible:!0},style:{transition:e.transitions.create("transform",{easing:e.transitions.easing.easeInOut,duration:e.transitions.duration.leavingScreen})}}]}});var Ro=a.forwardRef((function(e,t){var n,r,o,a,i,l;const c=Co({props:e,name:"MuiBadge"}),{anchorOrigin:s={vertical:"top",horizontal:"right"},className:u,component:d,components:f={},componentsProps:p={},children:h,overlap:m="rectangular",color:b="default",invisible:v=!1,max:g=99,badgeContent:y,slots:x,slotProps:O,showZero:w=!1,variant:j="standard"}=c,E=Object(bt.a)(c,ko),{badgeContent:S,invisible:A,max:k,displayValue:C}=function(e){const{badgeContent:t,invisible:n=!1,max:r=99,showZero:o=!1}=e,a=Eo({badgeContent:t,max:r});let i=n;!1!==n||0!==t||o||(i=!0);const{badgeContent:l,max:c=r}=i?a:e;return{badgeContent:l,invisible:i,max:c,displayValue:l&&Number(l)>c?c+"+":l}}({max:g,invisible:v,badgeContent:y,showZero:w}),T=Eo({anchorOrigin:s,color:b,overlap:m,variant:j,badgeContent:y}),P=A||null==S&&"dot"!==j,{color:R=b,overlap:_=m,anchorOrigin:L=s,variant:N=j}=P?T:c,M="dot"!==N?C:void 0,I=Object(mt.a)({},c,{badgeContent:S,invisible:P,max:k,displayValue:M,showZero:w,anchorOrigin:L,color:R,overlap:_,variant:N}),B=(e=>{const{color:t,anchorOrigin:n,invisible:r,overlap:o,variant:a,classes:i={}}=e,l={root:["root"],badge:["badge",a,r&&"invisible",`anchorOrigin${Object(Kn.a)(n.vertical)}${Object(Kn.a)(n.horizontal)}`,`anchorOrigin${Object(Kn.a)(n.vertical)}${Object(Kn.a)(n.horizontal)}${Object(Kn.a)(o)}`,"overlap"+Object(Kn.a)(o),"default"!==t&&"color"+Object(Kn.a)(t)]};return Object(Ft.a)(l,So,i)})(I),z=null!=(n=null!=(r=null==x?void 0:x.root)?r:f.Root)?n:To,D=null!=(o=null!=(a=null==x?void 0:x.badge)?a:f.Badge)?o:Po,F=null!=(i=null==O?void 0:O.root)?i:p.root,W=null!=(l=null==O?void 0:O.badge)?l:p.badge,$=qt({elementType:z,externalSlotProps:F,externalForwardedProps:E,additionalProps:{ref:t,as:d},ownerState:I,className:Object(Dt.a)(null==F?void 0:F.className,B.root,u)}),U=qt({elementType:D,externalSlotProps:W,ownerState:I,className:Object(Dt.a)(B.badge,null==W?void 0:W.className)});return Object(xt.jsxs)(z,Object(mt.a)({},$,{children:[h,Object(xt.jsx)(D,Object(mt.a)({},U,{children:M}))]}))})),_o=n(113),Lo=n(233),No=n(71);var Mo=Object(No.a)(),Io=n(232);const Bo=["className","component","disableGutters","fixed","maxWidth","classes"],zo=Object(Io.a)(),Do=Mo("div",{name:"MuiContainer",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t["maxWidth"+Object(_o.a)(String(n.maxWidth))],n.fixed&&t.fixed,n.disableGutters&&t.disableGutters]}}),Fo=e=>Object(Lo.a)({props:e,name:"MuiContainer",defaultTheme:zo});var Wo=function(e={}){const{createStyledComponent:t=Do,useThemeProps:n=Fo,componentName:r="MuiContainer"}=e,o=t(({theme:e,ownerState:t})=>Object(mt.a)({width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",display:"block"},!t.disableGutters&&{paddingLeft:e.spacing(2),paddingRight:e.spacing(2),[e.breakpoints.up("sm")]:{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}}),({theme:e,ownerState:t})=>t.fixed&&Object.keys(e.breakpoints.values).reduce((t,n)=>{const r=n,o=e.breakpoints.values[r];return 0!==o&&(t[e.breakpoints.up(r)]={maxWidth:`${o}${e.breakpoints.unit}`}),t},{}),({theme:e,ownerState:t})=>Object(mt.a)({},"xs"===t.maxWidth&&{[e.breakpoints.up("xs")]:{maxWidth:Math.max(e.breakpoints.values.xs,444)}},t.maxWidth&&"xs"!==t.maxWidth&&{[e.breakpoints.up(t.maxWidth)]:{maxWidth:`${e.breakpoints.values[t.maxWidth]}${e.breakpoints.unit}`}}));return a.forwardRef((function(e,t){const a=n(e),{className:i,component:l="div",disableGutters:c=!1,fixed:s=!1,maxWidth:u="lg"}=a,d=Object(bt.a)(a,Bo),f=Object(mt.a)({},a,{component:l,disableGutters:c,fixed:s,maxWidth:u}),p=((e,t)=>{const{classes:n,fixed:r,disableGutters:o,maxWidth:a}=e,i={root:["root",a&&"maxWidth"+Object(_o.a)(String(a)),r&&"fixed",o&&"disableGutters"]};return Object(Ft.a)(i,e=>Object(Cn.a)(t,e),n)})(f,r);return Object(xt.jsx)(o,Object(mt.a)({as:l,ownerState:f,className:Object(Dt.a)(p.root,i),ref:t},d))}))}({createStyledComponent:Object(pt.a)("div",{name:"MuiContainer",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t["maxWidth"+Object(Kn.a)(String(n.maxWidth))],n.fixed&&t.fixed,n.disableGutters&&t.disableGutters]}}),useThemeProps:e=>Object(Pt.a)({props:e,name:"MuiContainer"})}),$o=n(20);var Uo=a.createContext();function Vo(e){return Object(Cn.a)("MuiGrid",e)}const Ho=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];var qo=Object(kn.a)("MuiGrid",["root","container","item","zeroMinWidth",...[0,1,2,3,4,5,6,7,8,9,10].map(e=>"spacing-xs-"+e),...["column-reverse","column","row-reverse","row"].map(e=>"direction-xs-"+e),...["nowrap","wrap-reverse","wrap"].map(e=>"wrap-xs-"+e),...Ho.map(e=>"grid-xs-"+e),...Ho.map(e=>"grid-sm-"+e),...Ho.map(e=>"grid-md-"+e),...Ho.map(e=>"grid-lg-"+e),...Ho.map(e=>"grid-xl-"+e)]);const Go=["className","columns","columnSpacing","component","container","direction","item","rowSpacing","spacing","wrap","zeroMinWidth"];function Yo(e){const t=parseFloat(e);return`${t}${String(e).replace(String(t),"")||"px"}`}function Ko({breakpoints:e,values:t}){let n="";Object.keys(t).forEach(e=>{""===n&&0!==t[e]&&(n=e)});const r=Object.keys(e).sort((t,n)=>e[t]-e[n]);return r.slice(0,r.indexOf(n))}const Xo=Object(pt.a)("div",{name:"MuiGrid",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e,{container:r,direction:o,item:a,spacing:i,wrap:l,zeroMinWidth:c,breakpoints:s}=n;let u=[];r&&(u=function(e,t,n={}){if(!e||e<=0)return[];if("string"==typeof e&&!Number.isNaN(Number(e))||"number"==typeof e)return[n["spacing-xs-"+String(e)]];const r=[];return t.forEach(t=>{const o=e[t];Number(o)>0&&r.push(n[`spacing-${t}-${String(o)}`])}),r}(i,s,t));const d=[];return s.forEach(e=>{const r=n[e];r&&d.push(t[`grid-${e}-${String(r)}`])}),[t.root,r&&t.container,a&&t.item,c&&t.zeroMinWidth,...u,"row"!==o&&t["direction-xs-"+String(o)],"wrap"!==l&&t["wrap-xs-"+String(l)],...d]}})(({ownerState:e})=>Object(mt.a)({boxSizing:"border-box"},e.container&&{display:"flex",flexWrap:"wrap",width:"100%"},e.item&&{margin:0},e.zeroMinWidth&&{minWidth:0},"wrap"!==e.wrap&&{flexWrap:e.wrap}),(function({theme:e,ownerState:t}){const n=Object($o.e)({values:t.direction,breakpoints:e.breakpoints.values});return Object($o.b)({theme:e},n,e=>{const t={flexDirection:e};return 0===e.indexOf("column")&&(t["& > ."+qo.item]={maxWidth:"none"}),t})}),(function({theme:e,ownerState:t}){const{container:n,rowSpacing:r}=t;let o={};if(n&&0!==r){const t=Object($o.e)({values:r,breakpoints:e.breakpoints.values});let n;"object"==typeof t&&(n=Ko({breakpoints:e.breakpoints.values,values:t})),o=Object($o.b)({theme:e},t,(t,r)=>{var o;const a=e.spacing(t);return"0px"!==a?{marginTop:"-"+Yo(a),["& > ."+qo.item]:{paddingTop:Yo(a)}}:null!=(o=n)&&o.includes(r)?{}:{marginTop:0,["& > ."+qo.item]:{paddingTop:0}}})}return o}),(function({theme:e,ownerState:t}){const{container:n,columnSpacing:r}=t;let o={};if(n&&0!==r){const t=Object($o.e)({values:r,breakpoints:e.breakpoints.values});let n;"object"==typeof t&&(n=Ko({breakpoints:e.breakpoints.values,values:t})),o=Object($o.b)({theme:e},t,(t,r)=>{var o;const a=e.spacing(t);return"0px"!==a?{width:`calc(100% + ${Yo(a)})`,marginLeft:"-"+Yo(a),["& > ."+qo.item]:{paddingLeft:Yo(a)}}:null!=(o=n)&&o.includes(r)?{}:{width:"100%",marginLeft:0,["& > ."+qo.item]:{paddingLeft:0}}})}return o}),(function({theme:e,ownerState:t}){let n;return e.breakpoints.keys.reduce((r,o)=>{let a={};if(t[o]&&(n=t[o]),!n)return r;if(!0===n)a={flexBasis:0,flexGrow:1,maxWidth:"100%"};else if("auto"===n)a={flexBasis:"auto",flexGrow:0,flexShrink:0,maxWidth:"none",width:"auto"};else{const i=Object($o.e)({values:t.columns,breakpoints:e.breakpoints.values}),l="object"==typeof i?i[o]:i;if(null==l)return r;const c=Math.round(n/l*1e8)/1e6+"%";let s={};if(t.container&&t.item&&0!==t.columnSpacing){const n=e.spacing(t.columnSpacing);if("0px"!==n){const e=`calc(${c} + ${Yo(n)})`;s={flexBasis:e,maxWidth:e}}}a=Object(mt.a)({flexBasis:c,flexGrow:0,maxWidth:c},s)}return 0===e.breakpoints.values[o]?Object.assign(r,a):r[e.breakpoints.up(o)]=a,r},{})}));const Jo=e=>{const{classes:t,container:n,direction:r,item:o,spacing:a,wrap:i,zeroMinWidth:l,breakpoints:c}=e;let s=[];n&&(s=function(e,t){if(!e||e<=0)return[];if("string"==typeof e&&!Number.isNaN(Number(e))||"number"==typeof e)return["spacing-xs-"+String(e)];const n=[];return t.forEach(t=>{const r=e[t];if(Number(r)>0){const e=`spacing-${t}-${String(r)}`;n.push(e)}}),n}(a,c));const u=[];c.forEach(t=>{const n=e[t];n&&u.push(`grid-${t}-${String(n)}`)});const d={root:["root",n&&"container",o&&"item",l&&"zeroMinWidth",...s,"row"!==r&&"direction-xs-"+String(r),"wrap"!==i&&"wrap-xs-"+String(i),...u]};return Object(Ft.a)(d,Vo,t)};var Qo=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiGrid"}),{breakpoints:r}=xn(),o=ur(n),{className:i,columns:l,columnSpacing:c,component:s="div",container:u=!1,direction:d="row",item:f=!1,rowSpacing:p,spacing:h=0,wrap:m="wrap",zeroMinWidth:b=!1}=o,v=Object(bt.a)(o,Go),g=p||h,y=c||h,x=a.useContext(Uo),O=u?l||12:x,w={},j=Object(mt.a)({},v);r.keys.forEach(e=>{null!=v[e]&&(w[e]=v[e],delete j[e])});const E=Object(mt.a)({},o,{columns:O,container:u,direction:d,item:f,rowSpacing:g,columnSpacing:y,wrap:m,zeroMinWidth:b,spacing:h},w,{breakpoints:r.keys}),S=Jo(E);return Object(xt.jsx)(Uo.Provider,{value:O,children:Object(xt.jsx)(Xo,Object(mt.a)({ownerState:E,className:Object(Dt.a)(S.root,i),as:s,ref:t},j))})}));function Zo(e){return Object(Cn.a)("MuiLink",e)}var ea=Object(kn.a)("MuiLink",["root","underlineNone","underlineHover","underlineAlways","button","focusVisible"]),ta=n(16);const na={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"};var ra=({theme:e,ownerState:t})=>{const n=(e=>na[e]||e)(t.color),r=Object(ta.b)(e,"palette."+n,!1)||t.color,o=Object(ta.b)(e,`palette.${n}Channel`);return"vars"in e&&o?`rgba(${o} / 0.4)`:Object(Un.a)(r,.4)};const oa=["className","color","component","onBlur","onFocus","TypographyClasses","underline","variant","sx"],aa=Object(pt.a)(Mr,{name:"MuiLink",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t["underline"+Object(Kn.a)(n.underline)],"button"===n.component&&t.button]}})(({theme:e,ownerState:t})=>Object(mt.a)({},"none"===t.underline&&{textDecoration:"none"},"hover"===t.underline&&{textDecoration:"none","&:hover":{textDecoration:"underline"}},"always"===t.underline&&Object(mt.a)({textDecoration:"underline"},"inherit"!==t.color&&{textDecorationColor:ra({theme:e,ownerState:t})},{"&:hover":{textDecorationColor:"inherit"}}),"button"===t.component&&{position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none","&::-moz-focus-inner":{borderStyle:"none"},["&."+ea.focusVisible]:{outline:"auto"}}));var ia=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiLink"}),{className:r,color:o="primary",component:i="a",onBlur:l,onFocus:c,TypographyClasses:s,underline:u="always",variant:d="inherit",sx:f}=n,p=Object(bt.a)(n,oa),{isFocusVisibleRef:h,onBlur:m,onFocus:b,ref:v}=Object(Vr.a)(),[g,y]=a.useState(!1),x=Object(jn.a)(t,v),O=Object(mt.a)({},n,{color:o,component:i,focusVisible:g,underline:u,variant:d}),w=(e=>{const{classes:t,component:n,focusVisible:r,underline:o}=e,a={root:["root","underline"+Object(Kn.a)(o),"button"===n&&"button",r&&"focusVisible"]};return Object(Ft.a)(a,Zo,t)})(O);return Object(xt.jsx)(aa,Object(mt.a)({color:o,className:Object(Dt.a)(w.root,r),classes:s,component:i,onBlur:e=>{m(e),!1===h.current&&y(!1),l&&l(e)},onFocus:e=>{b(e),!0===h.current&&y(!0),c&&c(e)},ref:x,ownerState:O,variant:d,sx:[...Object.keys(na).includes(o)?[]:[{color:o}],...Array.isArray(f)?f:[f]]},p))})),la=n(141),ca=n.n(la),sa=n(144),ua=n.n(sa),da=n(142),fa=n.n(da),pa=n(21),ha=Object(pa.a)(Object(xt.jsx)("path",{d:"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"}),"Person");function ma(e){return Object(Cn.a)("MuiAvatar",e)}Object(kn.a)("MuiAvatar",["root","colorDefault","circular","rounded","square","img","fallback"]);const ba=["alt","children","className","component","imgProps","sizes","src","srcSet","variant"],va=Object(pt.a)("div",{name:"MuiAvatar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],n.colorDefault&&t.colorDefault]}})(({theme:e})=>({position:"relative",display:"flex",alignItems:"center",justifyContent:"center",flexShrink:0,width:40,height:40,fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(20),lineHeight:1,borderRadius:"50%",overflow:"hidden",userSelect:"none",variants:[{props:{variant:"rounded"},style:{borderRadius:(e.vars||e).shape.borderRadius}},{props:{variant:"square"},style:{borderRadius:0}},{props:{colorDefault:!0},style:Object(mt.a)({color:(e.vars||e).palette.background.default},e.vars?{backgroundColor:e.vars.palette.Avatar.defaultBg}:Object(mt.a)({backgroundColor:e.palette.grey[400]},e.applyStyles("dark",{backgroundColor:e.palette.grey[600]})))}]})),ga=Object(pt.a)("img",{name:"MuiAvatar",slot:"Img",overridesResolver:(e,t)=>t.img})({width:"100%",height:"100%",textAlign:"center",objectFit:"cover",color:"transparent",textIndent:1e4}),ya=Object(pt.a)(ha,{name:"MuiAvatar",slot:"Fallback",overridesResolver:(e,t)=>t.fallback})({width:"75%",height:"75%"});var xa=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiAvatar"}),{alt:r,children:o,className:i,component:l="div",imgProps:c,sizes:s,src:u,srcSet:d,variant:f="circular"}=n,p=Object(bt.a)(n,ba);let h=null;const m=function({crossOrigin:e,referrerPolicy:t,src:n,srcSet:r}){const[o,i]=a.useState(!1);return a.useEffect(()=>{if(!n&&!r)return;i(!1);let o=!0;const a=new Image;return a.onload=()=>{o&&i("loaded")},a.onerror=()=>{o&&i("error")},a.crossOrigin=e,a.referrerPolicy=t,a.src=n,r&&(a.srcset=r),()=>{o=!1}},[e,t,n,r]),o}(Object(mt.a)({},c,{src:u,srcSet:d})),b=u||d,v=b&&"error"!==m,g=Object(mt.a)({},n,{colorDefault:!v,component:l,variant:f}),y=(e=>{const{classes:t,variant:n,colorDefault:r}=e,o={root:["root",n,r&&"colorDefault"],img:["img"],fallback:["fallback"]};return Object(Ft.a)(o,ma,t)})(g);return h=v?Object(xt.jsx)(ga,Object(mt.a)({alt:r,srcSet:d,src:u,sizes:s,ownerState:g,className:y.img},c)):null!=o&&""!==o&&"boolean"!=typeof o?o:b&&r?r[0]:Object(xt.jsx)(ya,{ownerState:g,className:y.fallback}),Object(xt.jsx)(va,Object(mt.a)({as:l,ownerState:g,className:Object(Dt.a)(y.root,i),ref:t},p,{children:h}))})),Oa=Object(pa.a)(Object(xt.jsx)("path",{d:"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"}),"Cancel");function wa(e){return Object(Cn.a)("MuiChip",e)}var ja=Object(kn.a)("MuiChip",["root","sizeSmall","sizeMedium","colorError","colorInfo","colorPrimary","colorSecondary","colorSuccess","colorWarning","disabled","clickable","clickableColorPrimary","clickableColorSecondary","deletable","deletableColorPrimary","deletableColorSecondary","outlined","filled","outlinedPrimary","outlinedSecondary","filledPrimary","filledSecondary","avatar","avatarSmall","avatarMedium","avatarColorPrimary","avatarColorSecondary","icon","iconSmall","iconMedium","iconColorPrimary","iconColorSecondary","label","labelSmall","labelMedium","deleteIcon","deleteIconSmall","deleteIconMedium","deleteIconColorPrimary","deleteIconColorSecondary","deleteIconOutlinedColorPrimary","deleteIconOutlinedColorSecondary","deleteIconFilledColorPrimary","deleteIconFilledColorSecondary","focusVisible"]);const Ea=["avatar","className","clickable","color","component","deleteIcon","disabled","icon","label","onClick","onDelete","onKeyDown","onKeyUp","size","variant","tabIndex","skipFocusWhenDisabled"],Sa=Object(pt.a)("div",{name:"MuiChip",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e,{color:r,iconColor:o,clickable:a,onDelete:i,size:l,variant:c}=n;return[{["& ."+ja.avatar]:t.avatar},{["& ."+ja.avatar]:t["avatar"+Object(Kn.a)(l)]},{["& ."+ja.avatar]:t["avatarColor"+Object(Kn.a)(r)]},{["& ."+ja.icon]:t.icon},{["& ."+ja.icon]:t["icon"+Object(Kn.a)(l)]},{["& ."+ja.icon]:t["iconColor"+Object(Kn.a)(o)]},{["& ."+ja.deleteIcon]:t.deleteIcon},{["& ."+ja.deleteIcon]:t["deleteIcon"+Object(Kn.a)(l)]},{["& ."+ja.deleteIcon]:t["deleteIconColor"+Object(Kn.a)(r)]},{["& ."+ja.deleteIcon]:t[`deleteIcon${Object(Kn.a)(c)}Color${Object(Kn.a)(r)}`]},t.root,t["size"+Object(Kn.a)(l)],t["color"+Object(Kn.a)(r)],a&&t.clickable,a&&"default"!==r&&t[`clickableColor${Object(Kn.a)(r)})`],i&&t.deletable,i&&"default"!==r&&t["deletableColor"+Object(Kn.a)(r)],t[c],t[`${c}${Object(Kn.a)(r)}`]]}})(({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?e.palette.grey[700]:e.palette.grey[300];return Object(mt.a)({maxWidth:"100%",fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(13),display:"inline-flex",alignItems:"center",justifyContent:"center",height:32,color:(e.vars||e).palette.text.primary,backgroundColor:(e.vars||e).palette.action.selected,borderRadius:16,whiteSpace:"nowrap",transition:e.transitions.create(["background-color","box-shadow"]),cursor:"unset",outline:0,textDecoration:"none",border:0,padding:0,verticalAlign:"middle",boxSizing:"border-box",["&."+ja.disabled]:{opacity:(e.vars||e).palette.action.disabledOpacity,pointerEvents:"none"},["& ."+ja.avatar]:{marginLeft:5,marginRight:-6,width:24,height:24,color:e.vars?e.vars.palette.Chip.defaultAvatarColor:n,fontSize:e.typography.pxToRem(12)},["& ."+ja.avatarColorPrimary]:{color:(e.vars||e).palette.primary.contrastText,backgroundColor:(e.vars||e).palette.primary.dark},["& ."+ja.avatarColorSecondary]:{color:(e.vars||e).palette.secondary.contrastText,backgroundColor:(e.vars||e).palette.secondary.dark},["& ."+ja.avatarSmall]:{marginLeft:4,marginRight:-4,width:18,height:18,fontSize:e.typography.pxToRem(10)},["& ."+ja.icon]:Object(mt.a)({marginLeft:5,marginRight:-6},"small"===t.size&&{fontSize:18,marginLeft:4,marginRight:-4},t.iconColor===t.color&&Object(mt.a)({color:e.vars?e.vars.palette.Chip.defaultIconColor:n},"default"!==t.color&&{color:"inherit"})),["& ."+ja.deleteIcon]:Object(mt.a)({WebkitTapHighlightColor:"transparent",color:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / 0.26)`:Object(Un.a)(e.palette.text.primary,.26),fontSize:22,cursor:"pointer",margin:"0 5px 0 -6px","&:hover":{color:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / 0.4)`:Object(Un.a)(e.palette.text.primary,.4)}},"small"===t.size&&{fontSize:16,marginRight:4,marginLeft:-4},"default"!==t.color&&{color:e.vars?`rgba(${e.vars.palette[t.color].contrastTextChannel} / 0.7)`:Object(Un.a)(e.palette[t.color].contrastText,.7),"&:hover, &:active":{color:(e.vars||e).palette[t.color].contrastText}})},"small"===t.size&&{height:24},"default"!==t.color&&{backgroundColor:(e.vars||e).palette[t.color].main,color:(e.vars||e).palette[t.color].contrastText},t.onDelete&&{["&."+ja.focusVisible]:{backgroundColor:e.vars?`rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:Object(Un.a)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},t.onDelete&&"default"!==t.color&&{["&."+ja.focusVisible]:{backgroundColor:(e.vars||e).palette[t.color].dark}})},({theme:e,ownerState:t})=>Object(mt.a)({},t.clickable&&{userSelect:"none",WebkitTapHighlightColor:"transparent",cursor:"pointer","&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:Object(Un.a)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity)},["&."+ja.focusVisible]:{backgroundColor:e.vars?`rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:Object(Un.a)(e.palette.action.selected,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)},"&:active":{boxShadow:(e.vars||e).shadows[1]}},t.clickable&&"default"!==t.color&&{["&:hover, &."+ja.focusVisible]:{backgroundColor:(e.vars||e).palette[t.color].dark}}),({theme:e,ownerState:t})=>Object(mt.a)({},"outlined"===t.variant&&{backgroundColor:"transparent",border:e.vars?"1px solid "+e.vars.palette.Chip.defaultBorder:"1px solid "+("light"===e.palette.mode?e.palette.grey[400]:e.palette.grey[700]),[`&.${ja.clickable}:hover`]:{backgroundColor:(e.vars||e).palette.action.hover},["&."+ja.focusVisible]:{backgroundColor:(e.vars||e).palette.action.focus},["& ."+ja.avatar]:{marginLeft:4},["& ."+ja.avatarSmall]:{marginLeft:2},["& ."+ja.icon]:{marginLeft:4},["& ."+ja.iconSmall]:{marginLeft:2},["& ."+ja.deleteIcon]:{marginRight:5},["& ."+ja.deleteIconSmall]:{marginRight:3}},"outlined"===t.variant&&"default"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:"1px solid "+(e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / 0.7)`:Object(Un.a)(e.palette[t.color].main,.7)),[`&.${ja.clickable}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Object(Un.a)(e.palette[t.color].main,e.palette.action.hoverOpacity)},["&."+ja.focusVisible]:{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.focusOpacity})`:Object(Un.a)(e.palette[t.color].main,e.palette.action.focusOpacity)},["& ."+ja.deleteIcon]:{color:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / 0.7)`:Object(Un.a)(e.palette[t.color].main,.7),"&:hover, &:active":{color:(e.vars||e).palette[t.color].main}}})),Aa=Object(pt.a)("span",{name:"MuiChip",slot:"Label",overridesResolver:(e,t)=>{const{ownerState:n}=e,{size:r}=n;return[t.label,t["label"+Object(Kn.a)(r)]]}})(({ownerState:e})=>Object(mt.a)({overflow:"hidden",textOverflow:"ellipsis",paddingLeft:12,paddingRight:12,whiteSpace:"nowrap"},"outlined"===e.variant&&{paddingLeft:11,paddingRight:11},"small"===e.size&&{paddingLeft:8,paddingRight:8},"small"===e.size&&"outlined"===e.variant&&{paddingLeft:7,paddingRight:7}));function ka(e){return"Backspace"===e.key||"Delete"===e.key}var Ca=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiChip"}),{avatar:r,className:o,clickable:i,color:l="default",component:c,deleteIcon:s,disabled:u=!1,icon:d,label:f,onClick:p,onDelete:h,onKeyDown:m,onKeyUp:b,size:v="medium",variant:g="filled",tabIndex:y,skipFocusWhenDisabled:x=!1}=n,O=Object(bt.a)(n,Ea),w=a.useRef(null),j=Object(jn.a)(w,t),E=e=>{e.stopPropagation(),h&&h(e)},S=!(!1===i||!p)||i,A=S||h?go:c||"div",k=Object(mt.a)({},n,{component:A,disabled:u,size:v,color:l,iconColor:a.isValidElement(d)&&d.props.color||l,onDelete:!!h,clickable:S,variant:g}),C=(e=>{const{classes:t,disabled:n,size:r,color:o,iconColor:a,onDelete:i,clickable:l,variant:c}=e,s={root:["root",c,n&&"disabled","size"+Object(Kn.a)(r),"color"+Object(Kn.a)(o),l&&"clickable",l&&"clickableColor"+Object(Kn.a)(o),i&&"deletable",i&&"deletableColor"+Object(Kn.a)(o),`${c}${Object(Kn.a)(o)}`],label:["label","label"+Object(Kn.a)(r)],avatar:["avatar","avatar"+Object(Kn.a)(r),"avatarColor"+Object(Kn.a)(o)],icon:["icon","icon"+Object(Kn.a)(r),"iconColor"+Object(Kn.a)(a)],deleteIcon:["deleteIcon","deleteIcon"+Object(Kn.a)(r),"deleteIconColor"+Object(Kn.a)(o),`deleteIcon${Object(Kn.a)(c)}Color${Object(Kn.a)(o)}`]};return Object(Ft.a)(s,wa,t)})(k),T=A===go?Object(mt.a)({component:c||"div",focusVisibleClassName:C.focusVisible},h&&{disableRipple:!0}):{};let P=null;h&&(P=s&&a.isValidElement(s)?a.cloneElement(s,{className:Object(Dt.a)(s.props.className,C.deleteIcon),onClick:E}):Object(xt.jsx)(Oa,{className:Object(Dt.a)(C.deleteIcon),onClick:E}));let R=null;r&&a.isValidElement(r)&&(R=a.cloneElement(r,{className:Object(Dt.a)(C.avatar,r.props.className)}));let _=null;return d&&a.isValidElement(d)&&(_=a.cloneElement(d,{className:Object(Dt.a)(C.icon,d.props.className)})),Object(xt.jsxs)(Sa,Object(mt.a)({as:A,className:Object(Dt.a)(C.root,o),disabled:!(!S||!u)||void 0,onClick:p,onKeyDown:e=>{e.currentTarget===e.target&&ka(e)&&e.preventDefault(),m&&m(e)},onKeyUp:e=>{e.currentTarget===e.target&&(h&&ka(e)?h(e):"Escape"===e.key&&w.current&&w.current.blur()),b&&b(e)},ref:j,tabIndex:x&&u?-1:y,ownerState:k},T,O,{children:[R||_,Object(xt.jsx)(Aa,{className:Object(Dt.a)(C.label),ownerState:k,children:f}),P]}))})),Ta=n(11);const Pa=["component","direction","spacing","divider","children","className","useFlexGap"],Ra=Object(Io.a)(),_a=Mo("div",{name:"MuiStack",slot:"Root",overridesResolver:(e,t)=>t.root});function La(e){return Object(Lo.a)({props:e,name:"MuiStack",defaultTheme:Ra})}function Na(e,t){const n=a.Children.toArray(e).filter(Boolean);return n.reduce((e,r,o)=>(e.push(r),o<n.length-1&&e.push(a.cloneElement(t,{key:"separator-"+o})),e),[])}const Ma=({ownerState:e,theme:t})=>{let n=Object(mt.a)({display:"flex",flexDirection:"column"},Object($o.b)({theme:t},Object($o.e)({values:e.direction,breakpoints:t.breakpoints.values}),e=>({flexDirection:e})));if(e.spacing){const r=Object(Ta.a)(t),o=Object.keys(t.breakpoints.values).reduce((t,n)=>(("object"==typeof e.spacing&&null!=e.spacing[n]||"object"==typeof e.direction&&null!=e.direction[n])&&(t[n]=!0),t),{}),a=Object($o.e)({values:e.direction,base:o}),i=Object($o.e)({values:e.spacing,base:o});"object"==typeof a&&Object.keys(a).forEach((e,t,n)=>{if(!a[e]){const r=t>0?a[n[t-1]]:"column";a[e]=r}});const l=(t,n)=>{return e.useFlexGap?{gap:Object(Ta.c)(r,t)}:{"& > :not(style):not(style)":{margin:0},"& > :not(style) ~ :not(style)":{["margin"+(o=n?a[n]:e.direction,{row:"Left","row-reverse":"Right",column:"Top","column-reverse":"Bottom"}[o])]:Object(Ta.c)(r,t)}};var o};n=Object(lr.a)(n,Object($o.b)({theme:t},i,l))}return n=Object($o.c)(t.breakpoints,n),n};var Ia=function(e={}){const{createStyledComponent:t=_a,useThemeProps:n=La,componentName:r="MuiStack"}=e,o=t(Ma);return a.forwardRef((function(e,t){const a=ur(n(e)),{component:i="div",direction:l="column",spacing:c=0,divider:s,children:u,className:d,useFlexGap:f=!1}=a,p=Object(bt.a)(a,Pa),h={direction:l,spacing:c,useFlexGap:f},m=Object(Ft.a)({root:["root"]},e=>Object(Cn.a)(r,e),{});return Object(xt.jsx)(o,Object(mt.a)({as:i,ownerState:h,ref:t,className:Object(Dt.a)(m.root,d)},p,{children:s?Na(u,s):u}))}))}({createStyledComponent:Object(pt.a)("div",{name:"MuiStack",slot:"Root",overridesResolver:(e,t)=>t.root}),useThemeProps:e=>Object(Pt.a)({props:e,name:"MuiStack"})}),Ba=n(31);function za(e){return Object(Cn.a)("MuiListItemButton",e)}var Da=Object(kn.a)("MuiListItemButton",["root","focusVisible","dense","alignItemsFlexStart","disabled","divider","gutters","selected"]);const Fa=["alignItems","autoFocus","component","children","dense","disableGutters","divider","focusVisibleClassName","selected","className"],Wa=Object(pt.a)(go,{shouldForwardProp:e=>Object(pt.b)(e)||"classes"===e,name:"MuiListItemButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.dense&&t.dense,"flex-start"===n.alignItems&&t.alignItemsFlexStart,n.divider&&t.divider,!n.disableGutters&&t.gutters]}})(({theme:e,ownerState:t})=>Object(mt.a)({display:"flex",flexGrow:1,justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minWidth:0,boxSizing:"border-box",textAlign:"left",paddingTop:8,paddingBottom:8,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},["&."+Da.selected]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:Object(Un.a)(e.palette.primary.main,e.palette.action.selectedOpacity),["&."+Da.focusVisible]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:Object(Un.a)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${Da.selected}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:Object(Un.a)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:Object(Un.a)(e.palette.primary.main,e.palette.action.selectedOpacity)}},["&."+Da.focusVisible]:{backgroundColor:(e.vars||e).palette.action.focus},["&."+Da.disabled]:{opacity:(e.vars||e).palette.action.disabledOpacity}},t.divider&&{borderBottom:"1px solid "+(e.vars||e).palette.divider,backgroundClip:"padding-box"},"flex-start"===t.alignItems&&{alignItems:"flex-start"},!t.disableGutters&&{paddingLeft:16,paddingRight:16},t.dense&&{paddingTop:4,paddingBottom:4}));var $a=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiListItemButton"}),{alignItems:r="center",autoFocus:o=!1,component:i="div",children:l,dense:c=!1,disableGutters:s=!1,divider:u=!1,focusVisibleClassName:d,selected:f=!1,className:p}=n,h=Object(bt.a)(n,Fa),m=a.useContext(Sr),b=a.useMemo(()=>({dense:c||m.dense||!1,alignItems:r,disableGutters:s}),[r,m.dense,c,s]),v=a.useRef(null);Object(Ba.a)(()=>{o&&v.current&&v.current.focus()},[o]);const g=Object(mt.a)({},n,{alignItems:r,dense:b.dense,disableGutters:s,divider:u,selected:f}),y=(e=>{const{alignItems:t,classes:n,dense:r,disabled:o,disableGutters:a,divider:i,selected:l}=e,c={root:["root",r&&"dense",!a&&"gutters",i&&"divider",o&&"disabled","flex-start"===t&&"alignItemsFlexStart",l&&"selected"]},s=Object(Ft.a)(c,za,n);return Object(mt.a)({},n,s)})(g),x=Object(jn.a)(v,t);return Object(xt.jsx)(Sr.Provider,{value:b,children:Object(xt.jsx)(Wa,Object(mt.a)({ref:x,href:h.href||h.to,component:(h.href||h.to)&&"div"===i?"button":i,focusVisibleClassName:Object(Dt.a)(y.focusVisible,d),ownerState:g,className:Object(Dt.a)(y.root,p)},h,{classes:y,children:l}))})}));function Ua(e){return Object(Cn.a)("MuiListItemIcon",e)}var Va=Object(kn.a)("MuiListItemIcon",["root","alignItemsFlexStart"]);const Ha=["className"],qa=Object(pt.a)("div",{name:"MuiListItemIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"flex-start"===n.alignItems&&t.alignItemsFlexStart]}})(({theme:e,ownerState:t})=>Object(mt.a)({minWidth:56,color:(e.vars||e).palette.action.active,flexShrink:0,display:"inline-flex"},"flex-start"===t.alignItems&&{marginTop:8}));var Ga=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiListItemIcon"}),{className:r}=n,o=Object(bt.a)(n,Ha),i=a.useContext(Sr),l=Object(mt.a)({},n,{alignItems:i.alignItems}),c=(e=>{const{alignItems:t,classes:n}=e,r={root:["root","flex-start"===t&&"alignItemsFlexStart"]};return Object(Ft.a)(r,Ua,n)})(l);return Object(xt.jsx)(qa,Object(mt.a)({className:Object(Dt.a)(c.root,r),ownerState:l,ref:t},o))})),Ya=n(122),Ka=n.n(Ya),Xa=n(128),Ja=n.n(Xa),Qa=n(129),Za=n.n(Qa);function ei(e){return Object(Cn.a)("MuiListItemText",e)}var ti=Object(kn.a)("MuiListItemText",["root","multiline","dense","inset","primary","secondary"]);const ni=["children","className","disableTypography","inset","primary","primaryTypographyProps","secondary","secondaryTypographyProps"],ri=Object(pt.a)("div",{name:"MuiListItemText",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{["& ."+ti.primary]:t.primary},{["& ."+ti.secondary]:t.secondary},t.root,n.inset&&t.inset,n.primary&&n.secondary&&t.multiline,n.dense&&t.dense]}})(({ownerState:e})=>Object(mt.a)({flex:"1 1 auto",minWidth:0,marginTop:4,marginBottom:4},e.primary&&e.secondary&&{marginTop:6,marginBottom:6},e.inset&&{paddingLeft:56}));var oi=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiListItemText"}),{children:r,className:o,disableTypography:i=!1,inset:l=!1,primary:c,primaryTypographyProps:s,secondary:u,secondaryTypographyProps:d}=n,f=Object(bt.a)(n,ni),{dense:p}=a.useContext(Sr);let h=null!=c?c:r,m=u;const b=Object(mt.a)({},n,{disableTypography:i,inset:l,primary:!!h,secondary:!!m,dense:p}),v=(e=>{const{classes:t,inset:n,primary:r,secondary:o,dense:a}=e,i={root:["root",n&&"inset",a&&"dense",r&&o&&"multiline"],primary:["primary"],secondary:["secondary"]};return Object(Ft.a)(i,ei,t)})(b);return null==h||h.type===Mr||i||(h=Object(xt.jsx)(Mr,Object(mt.a)({variant:p?"body2":"body1",className:v.primary,component:null!=s&&s.variant?void 0:"span",display:"block"},s,{children:h}))),null==m||m.type===Mr||i||(m=Object(xt.jsx)(Mr,Object(mt.a)({variant:"body2",className:v.secondary,color:"text.secondary",display:"block"},d,{children:m}))),Object(xt.jsxs)(ri,Object(mt.a)({className:Object(Dt.a)(v.root,o),ownerState:b,ref:t},f,{children:[h,m]}))})),ai=n(82);function ii(e){return Object(Cn.a)("MuiCollapse",e)}Object(kn.a)("MuiCollapse",["root","horizontal","vertical","entered","hidden","wrapper","wrapperInner"]);const li=["addEndListener","children","className","collapsedSize","component","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","orientation","style","timeout","TransitionComponent"],ci=Object(pt.a)("div",{name:"MuiCollapse",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.orientation],"entered"===n.state&&t.entered,"exited"===n.state&&!n.in&&"0px"===n.collapsedSize&&t.hidden]}})(({theme:e,ownerState:t})=>Object(mt.a)({height:0,overflow:"hidden",transition:e.transitions.create("height")},"horizontal"===t.orientation&&{height:"auto",width:0,transition:e.transitions.create("width")},"entered"===t.state&&Object(mt.a)({height:"auto",overflow:"visible"},"horizontal"===t.orientation&&{width:"auto"}),"exited"===t.state&&!t.in&&"0px"===t.collapsedSize&&{visibility:"hidden"})),si=Object(pt.a)("div",{name:"MuiCollapse",slot:"Wrapper",overridesResolver:(e,t)=>t.wrapper})(({ownerState:e})=>Object(mt.a)({display:"flex",width:"100%"},"horizontal"===e.orientation&&{width:"auto",height:"100%"})),ui=Object(pt.a)("div",{name:"MuiCollapse",slot:"WrapperInner",overridesResolver:(e,t)=>t.wrapperInner})(({ownerState:e})=>Object(mt.a)({width:"100%"},"horizontal"===e.orientation&&{width:"auto",height:"100%"})),di=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiCollapse"}),{addEndListener:r,children:o,className:i,collapsedSize:l="0px",component:c,easing:s,in:u,onEnter:d,onEntered:f,onEntering:p,onExit:h,onExited:m,onExiting:b,orientation:v="vertical",style:g,timeout:y=ai.b.standard,TransitionComponent:x=yn}=n,O=Object(bt.a)(n,li),w=Object(mt.a)({},n,{orientation:v,collapsedSize:l}),j=(e=>{const{orientation:t,classes:n}=e,r={root:["root",""+t],entered:["entered"],hidden:["hidden"],wrapper:["wrapper",""+t],wrapperInner:["wrapperInner",""+t]};return Object(Ft.a)(r,ii,n)})(w),E=xn(),S=Object(Qr.b)(),A=a.useRef(null),k=a.useRef(),C="number"==typeof l?l+"px":l,T="horizontal"===v,P=T?"width":"height",R=a.useRef(null),_=Object(jn.a)(t,R),L=e=>t=>{if(e){const n=R.current;void 0===t?e(n):e(n,t)}},N=()=>A.current?A.current[T?"clientWidth":"clientHeight"]:0,M=L((e,t)=>{A.current&&T&&(A.current.style.position="absolute"),e.style[P]=C,d&&d(e,t)}),I=L((e,t)=>{const n=N();A.current&&T&&(A.current.style.position="");const{duration:r,easing:o}=wn({style:g,timeout:y,easing:s},{mode:"enter"});if("auto"===y){const t=E.transitions.getAutoHeightDuration(n);e.style.transitionDuration=t+"ms",k.current=t}else e.style.transitionDuration="string"==typeof r?r:r+"ms";e.style[P]=n+"px",e.style.transitionTimingFunction=o,p&&p(e,t)}),B=L((e,t)=>{e.style[P]="auto",f&&f(e,t)}),z=L(e=>{e.style[P]=N()+"px",h&&h(e)}),D=L(m),F=L(e=>{const t=N(),{duration:n,easing:r}=wn({style:g,timeout:y,easing:s},{mode:"exit"});if("auto"===y){const n=E.transitions.getAutoHeightDuration(t);e.style.transitionDuration=n+"ms",k.current=n}else e.style.transitionDuration="string"==typeof n?n:n+"ms";e.style[P]=C,e.style.transitionTimingFunction=r,b&&b(e)});return Object(xt.jsx)(x,Object(mt.a)({in:u,onEnter:M,onEntered:B,onEntering:I,onExit:z,onExited:D,onExiting:F,addEndListener:e=>{"auto"===y&&S.start(k.current||0,e),r&&r(R.current,e)},nodeRef:R,timeout:"auto"===y?null:y},O,{children:(e,t)=>Object(xt.jsx)(ci,Object(mt.a)({as:c,className:Object(Dt.a)(j.root,i,{entered:j.entered,exited:!u&&"0px"===C&&j.hidden}[e]),style:Object(mt.a)({[T?"minWidth":"minHeight"]:C},g),ownerState:Object(mt.a)({},w,{state:e}),ref:_},t,{children:Object(xt.jsx)(si,{ownerState:Object(mt.a)({},w,{state:e}),className:j.wrapper,ref:A,children:Object(xt.jsx)(ui,{ownerState:Object(mt.a)({},w,{state:e}),className:j.wrapperInner,children:o})})}))}))}));di.muiSupportAuto=!0;var fi=di,pi=n(123),hi=n.n(pi),mi=n(126),bi=n.n(mi),vi=n(127),gi=n.n(vi),yi=n(108),xi=n.n(yi),Oi=n(58),wi=n.n(Oi),ji=n(130),Ei=n.n(ji),Si=n(124),Ai=n.n(Si),ki=n(125),Ci=n.n(ki),Ti=n(109),Pi=n.n(Ti);function Ri(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return _i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _i(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Li(e){var t=Ri(a.useState(!1),2),n=t[0],r=t[1],o=Ri(a.useState(!1),2),i=o[0],l=o[1],c=function(){r(!n)},s=function(){l(!i)},u=function(t){var n=t.target.textContent,r=t.target.id,o=""!==n?n:r;switch(console.log(o),o){case"Platforms":c();break;case"Platforms-expandmore":case"Platforms-expandless":return void c();case"Targets":s();break;case"Targets-expandmore":case"Targets-expandless":return void s()}e.handleToggleAll(o),t.preventDefault()};return a.createElement(a.Fragment,null,a.createElement($a,{onClick:u},a.createElement(Ga,null,a.createElement(Ka.a,null)),a.createElement(oi,{primary:"Dashboard"})),a.createElement($a,{onClick:u},a.createElement(Ga,null,a.createElement(hi.a,null)),a.createElement(oi,{primary:"Targets"}),i?a.createElement(xi.a,{onClick:u,id:"Targets-expandless"}):a.createElement(wi.a,{onClick:u,id:"Targets-expandmore"})),a.createElement(fi,{in:i,timeout:"auto",unmountOnExit:!0},a.createElement(Tr,{component:"div",disablePadding:!0},a.createElement($a,{onClick:u,sx:{pl:4}},a.createElement(Ga,null,a.createElement(Ai.a,null)),a.createElement(oi,{primary:"Whois"})),a.createElement($a,{onClick:u,sx:{pl:4}},a.createElement(Ga,null,a.createElement(Ci.a,null)),a.createElement(oi,{primary:"NSLookup"})),a.createElement($a,{onClick:u,sx:{pl:4}},a.createElement(Ga,null,a.createElement(Pi.a,null)),a.createElement(oi,{primary:"BackLinks"})),a.createElement($a,{onClick:u,sx:{pl:4}},a.createElement(Ga,null,a.createElement(Pi.a,null)),a.createElement(oi,{primary:"EmailLookup"})))),a.createElement($a,null,a.createElement(Ga,null,a.createElement(bi.a,null)),a.createElement(oi,{primary:"Analytics"})),a.createElement($a,{onClick:u},a.createElement(Ga,null,a.createElement(gi.a,null)),a.createElement(oi,{primary:"Platforms"}),n?a.createElement(xi.a,{id:"Platforms-expandless"}):a.createElement(wi.a,{id:"Platforms-expandmore"})),a.createElement(fi,{in:n,timeout:"auto",unmountOnExit:!0},a.createElement(Tr,{component:"div",disablePadding:!0},a.createElement($a,{onClick:u,sx:{pl:4}},a.createElement(Ga,null,a.createElement(Ja.a,null)),a.createElement(oi,{primary:"YouTube"})),a.createElement($a,{sx:{pl:4}},a.createElement(Ga,null,a.createElement(Za.a,null)),a.createElement(oi,{primary:"X"})),a.createElement($a,{sx:{pl:4}},a.createElement(Ga,null,a.createElement(Ei.a,null)),a.createElement(oi,{primary:"Vkontakte"})))))}function Ni(e){return Object(Cn.a)("MuiListSubheader",e)}Object(kn.a)("MuiListSubheader",["root","colorPrimary","colorInherit","gutters","inset","sticky"]);const Mi=["className","color","component","disableGutters","disableSticky","inset"],Ii=Object(pt.a)("li",{name:"MuiListSubheader",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"default"!==n.color&&t["color"+Object(Kn.a)(n.color)],!n.disableGutters&&t.gutters,n.inset&&t.inset,!n.disableSticky&&t.sticky]}})(({theme:e,ownerState:t})=>Object(mt.a)({boxSizing:"border-box",lineHeight:"48px",listStyle:"none",color:(e.vars||e).palette.text.secondary,fontFamily:e.typography.fontFamily,fontWeight:e.typography.fontWeightMedium,fontSize:e.typography.pxToRem(14)},"primary"===t.color&&{color:(e.vars||e).palette.primary.main},"inherit"===t.color&&{color:"inherit"},!t.disableGutters&&{paddingLeft:16,paddingRight:16},t.inset&&{paddingLeft:72},!t.disableSticky&&{position:"sticky",top:0,zIndex:1,backgroundColor:(e.vars||e).palette.background.paper})),Bi=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiListSubheader"}),{className:r,color:o="default",component:a="li",disableGutters:i=!1,disableSticky:l=!1,inset:c=!1}=n,s=Object(bt.a)(n,Mi),u=Object(mt.a)({},n,{color:o,component:a,disableGutters:i,disableSticky:l,inset:c}),d=(e=>{const{classes:t,color:n,disableGutters:r,inset:o,disableSticky:a}=e,i={root:["root","default"!==n&&"color"+Object(Kn.a)(n),!r&&"gutters",o&&"inset",!a&&"sticky"]};return Object(Ft.a)(i,Ni,t)})(u);return Object(xt.jsx)(Ii,Object(mt.a)({as:a,className:Object(Dt.a)(d.root,r),ref:t,ownerState:u},s))}));Bi.muiSkipListHighlight=!0;var zi=Bi,Di=n(131),Fi=n.n(Di),Wi=n(132),$i=n.n(Wi);function Ui(){return a.createElement(a.Fragment,null,a.createElement(zi,{component:"div",inset:!0},"Saved reports"),a.createElement($a,null,a.createElement(Ga,null,a.createElement(Fi.a,null)),a.createElement(oi,{primary:"Graphs"})),a.createElement($a,null,a.createElement(Ga,null,a.createElement($i.a,null)),a.createElement(oi,{primary:"Files"})))}var Vi=n(136),Hi=n.n(Vi),qi=n(133),Gi=n.n(qi);function Yi(e){return Object(Cn.a)("MuiAlert",e)}var Ki=Object(kn.a)("MuiAlert",["root","action","icon","message","filled","filledSuccess","filledInfo","filledWarning","filledError","outlined","outlinedSuccess","outlinedInfo","outlinedWarning","outlinedError","standard","standardSuccess","standardInfo","standardWarning","standardError"]),Xi=Object(pa.a)(Object(xt.jsx)("path",{d:"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"}),"SuccessOutlined"),Ji=Object(pa.a)(Object(xt.jsx)("path",{d:"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"}),"ReportProblemOutlined"),Qi=Object(pa.a)(Object(xt.jsx)("path",{d:"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}),"ErrorOutline"),Zi=Object(pa.a)(Object(xt.jsx)("path",{d:"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"}),"InfoOutlined"),el=Object(pa.a)(Object(xt.jsx)("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}),"Close");const tl=["action","children","className","closeText","color","components","componentsProps","icon","iconMapping","onClose","role","severity","slotProps","slots","variant"],nl=Object(pt.a)(Yn,{name:"MuiAlert",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${Object(Kn.a)(n.color||n.severity)}`]]}})(({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?Un.b:Un.d,r="light"===e.palette.mode?Un.d:Un.b,o=t.color||t.severity;return Object(mt.a)({},e.typography.body2,{backgroundColor:"transparent",display:"flex",padding:"6px 16px"},o&&"standard"===t.variant&&{color:e.vars?e.vars.palette.Alert[o+"Color"]:n(e.palette[o].light,.6),backgroundColor:e.vars?e.vars.palette.Alert[o+"StandardBg"]:r(e.palette[o].light,.9),["& ."+Ki.icon]:e.vars?{color:e.vars.palette.Alert[o+"IconColor"]}:{color:e.palette[o].main}},o&&"outlined"===t.variant&&{color:e.vars?e.vars.palette.Alert[o+"Color"]:n(e.palette[o].light,.6),border:"1px solid "+(e.vars||e).palette[o].light,["& ."+Ki.icon]:e.vars?{color:e.vars.palette.Alert[o+"IconColor"]}:{color:e.palette[o].main}},o&&"filled"===t.variant&&Object(mt.a)({fontWeight:e.typography.fontWeightMedium},e.vars?{color:e.vars.palette.Alert[o+"FilledColor"],backgroundColor:e.vars.palette.Alert[o+"FilledBg"]}:{backgroundColor:"dark"===e.palette.mode?e.palette[o].dark:e.palette[o].main,color:e.palette.getContrastText(e.palette[o].main)}))}),rl=Object(pt.a)("div",{name:"MuiAlert",slot:"Icon",overridesResolver:(e,t)=>t.icon})({marginRight:12,padding:"7px 0",display:"flex",fontSize:22,opacity:.9}),ol=Object(pt.a)("div",{name:"MuiAlert",slot:"Message",overridesResolver:(e,t)=>t.message})({padding:"8px 0",minWidth:0,overflow:"auto"}),al=Object(pt.a)("div",{name:"MuiAlert",slot:"Action",overridesResolver:(e,t)=>t.action})({display:"flex",alignItems:"flex-start",padding:"4px 0 0 16px",marginLeft:"auto",marginRight:-8}),il={success:Object(xt.jsx)(Xi,{fontSize:"inherit"}),warning:Object(xt.jsx)(Ji,{fontSize:"inherit"}),error:Object(xt.jsx)(Qi,{fontSize:"inherit"}),info:Object(xt.jsx)(Zi,{fontSize:"inherit"})};var ll=a.forwardRef((function(e,t){var n,r,o,a,i,l;const c=Object(Pt.a)({props:e,name:"MuiAlert"}),{action:s,children:u,className:d,closeText:f="Close",color:p,components:h={},componentsProps:m={},icon:b,iconMapping:v=il,onClose:g,role:y="alert",severity:x="success",slotProps:O={},slots:w={},variant:j="standard"}=c,E=Object(bt.a)(c,tl),S=Object(mt.a)({},c,{color:p,severity:x,variant:j}),A=(e=>{const{variant:t,color:n,severity:r,classes:o}=e,a={root:["root",`${t}${Object(Kn.a)(n||r)}`,""+t],icon:["icon"],message:["message"],action:["action"]};return Object(Ft.a)(a,Yi,o)})(S),k=null!=(n=null!=(r=w.closeButton)?r:h.CloseButton)?n:jo,C=null!=(o=null!=(a=w.closeIcon)?a:h.CloseIcon)?o:el,T=null!=(i=O.closeButton)?i:m.closeButton,P=null!=(l=O.closeIcon)?l:m.closeIcon;return Object(xt.jsxs)(nl,Object(mt.a)({role:y,elevation:0,ownerState:S,className:Object(Dt.a)(A.root,d),ref:t},E,{children:[!1!==b?Object(xt.jsx)(rl,{ownerState:S,className:A.icon,children:b||v[x]||il[x]}):null,Object(xt.jsx)(ol,{ownerState:S,className:A.message,children:u}),null!=s?Object(xt.jsx)(al,{ownerState:S,className:A.action,children:s}):null,null==s&&g?Object(xt.jsx)(al,{ownerState:S,className:A.action,children:Object(xt.jsx)(k,Object(mt.a)({size:"small","aria-label":f,title:f,color:"inherit",onClick:g},T,{children:Object(xt.jsx)(C,Object(mt.a)({fontSize:"small"},P))}))}):null]}))})),cl=n(272),sl=n(226),ul=n(230);const dl=["onChange","maxRows","minRows","style","value"];function fl(e){return parseInt(e,10)||0}const pl={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};function hl(e){return null==e||0===Object.keys(e).length||0===e.outerHeightStyle&&!e.overflow}const ml=a.forwardRef((function(e,t){const{onChange:n,maxRows:r,minRows:o=1,style:i,value:c}=e,s=Object(bt.a)(e,dl),{current:u}=a.useRef(null!=c),d=a.useRef(null),f=Object(Wt.a)(t,d),p=a.useRef(null),h=a.useRef(0),[m,b]=a.useState({outerHeightStyle:0}),v=a.useCallback(()=>{const t=d.current,n=Object(Xt.a)(t).getComputedStyle(t);if("0px"===n.width)return{outerHeightStyle:0};const a=p.current;a.style.width=n.width,a.value=t.value||e.placeholder||"x","\n"===a.value.slice(-1)&&(a.value+=" ");const i=n.boxSizing,l=fl(n.paddingBottom)+fl(n.paddingTop),c=fl(n.borderBottomWidth)+fl(n.borderTopWidth),s=a.scrollHeight;a.value="x";const u=a.scrollHeight;let f=s;o&&(f=Math.max(Number(o)*u,f)),r&&(f=Math.min(Number(r)*u,f)),f=Math.max(f,u);return{outerHeightStyle:f+("border-box"===i?l+c:0),overflow:Math.abs(f-s)<=1}},[r,o,e.placeholder]),g=(e,t)=>{const{outerHeightStyle:n,overflow:r}=t;return h.current<20&&(n>0&&Math.abs((e.outerHeightStyle||0)-n)>1||e.overflow!==r)?(h.current+=1,{overflow:r,outerHeightStyle:n}):e},y=a.useCallback(()=>{const e=v();hl(e)||b(t=>g(t,e))},[v]);Object(un.a)(()=>{const e=()=>{h.current=0,(()=>{const e=v();hl(e)||l.flushSync(()=>{b(t=>g(t,e))})})()};let t;const n=Object(ul.a)(e),r=d.current,o=Object(Xt.a)(r);let a;return o.addEventListener("resize",n),"undefined"!=typeof ResizeObserver&&(a=new ResizeObserver(e),a.observe(r)),()=>{n.clear(),cancelAnimationFrame(t),o.removeEventListener("resize",n),a&&a.disconnect()}},[v]),Object(un.a)(()=>{y()}),a.useEffect(()=>{h.current=0},[c]);return Object(xt.jsxs)(a.Fragment,{children:[Object(xt.jsx)("textarea",Object(mt.a)({value:c,onChange:e=>{h.current=0,u||y(),n&&n(e)},ref:f,rows:o,style:Object(mt.a)({height:m.outerHeightStyle,overflow:m.overflow?"hidden":void 0},i)},s)),Object(xt.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:p,tabIndex:-1,style:Object(mt.a)({},pl,i,{paddingTop:0,paddingBottom:0})})]})}));function bl({props:e,states:t,muiFormControl:n}){return t.reduce((t,r)=>(t[r]=e[r],n&&void 0===e[r]&&(t[r]=n[r]),t),{})}var vl=a.createContext(void 0);function gl(){return a.useContext(vl)}function yl(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function xl(e,t=!1){return e&&(yl(e.value)&&""!==e.value||t&&yl(e.defaultValue)&&""!==e.defaultValue)}function Ol(e){return Object(Cn.a)("MuiInputBase",e)}var wl=Object(kn.a)("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]);const jl=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],El=(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t["color"+Object(Kn.a)(n.color)],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]},Sl=(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]},Al=Object(pt.a)("div",{name:"MuiInputBase",slot:"Root",overridesResolver:El})(({theme:e,ownerState:t})=>Object(mt.a)({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",["&."+wl.disabled]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&Object(mt.a)({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"})),kl=Object(pt.a)("input",{name:"MuiInputBase",slot:"Input",overridesResolver:Sl})(({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r=Object(mt.a)({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),o={opacity:"0 !important"},a=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5};return Object(mt.a)({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${wl.formControl} &`]:{"&::-webkit-input-placeholder":o,"&::-moz-placeholder":o,"&:-ms-input-placeholder":o,"&::-ms-input-placeholder":o,"&:focus::-webkit-input-placeholder":a,"&:focus::-moz-placeholder":a,"&:focus:-ms-input-placeholder":a,"&:focus::-ms-input-placeholder":a},["&."+wl.disabled]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})}),Cl=Object(xt.jsx)(Mt,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}});var Tl=a.forwardRef((function(e,t){var n;const r=Object(Pt.a)({props:e,name:"MuiInputBase"}),{"aria-describedby":o,autoComplete:i,autoFocus:l,className:c,components:s={},componentsProps:u={},defaultValue:d,disabled:f,disableInjectingGlobalStyles:p,endAdornment:h,fullWidth:m=!1,id:b,inputComponent:v="input",inputProps:g={},inputRef:y,maxRows:x,minRows:O,multiline:w=!1,name:j,onBlur:E,onChange:S,onClick:A,onFocus:k,onKeyDown:C,onKeyUp:T,placeholder:P,readOnly:R,renderSuffix:_,rows:L,slotProps:N={},slots:M={},startAdornment:I,type:B="text",value:z}=r,D=Object(bt.a)(r,jl),F=null!=g.value?g.value:z,{current:W}=a.useRef(null!=F),$=a.useRef(),U=a.useCallback(e=>{0},[]),V=Object(jn.a)($,y,g.ref,U),[H,q]=a.useState(!1),G=gl();const Y=bl({props:r,muiFormControl:G,states:["color","disabled","error","hiddenLabel","size","required","filled"]});Y.focused=G?G.focused:H,a.useEffect(()=>{!G&&f&&H&&(q(!1),E&&E())},[G,f,H,E]);const K=G&&G.onFilled,X=G&&G.onEmpty,J=a.useCallback(e=>{xl(e)?K&&K():X&&X()},[K,X]);Object(Ba.a)(()=>{W&&J({value:F})},[F,J,W]);a.useEffect(()=>{J($.current)},[]);let Q=v,Z=g;w&&"input"===Q&&(Z=L?Object(mt.a)({type:void 0,minRows:L,maxRows:L},Z):Object(mt.a)({type:void 0,maxRows:x,minRows:O},Z),Q=ml);a.useEffect(()=>{G&&G.setAdornedStart(Boolean(I))},[G,I]);const ee=Object(mt.a)({},r,{color:Y.color||"primary",disabled:Y.disabled,endAdornment:h,error:Y.error,focused:Y.focused,formControl:G,fullWidth:m,hiddenLabel:Y.hiddenLabel,multiline:w,size:Y.size,startAdornment:I,type:B}),te=(e=>{const{classes:t,color:n,disabled:r,error:o,endAdornment:a,focused:i,formControl:l,fullWidth:c,hiddenLabel:s,multiline:u,readOnly:d,size:f,startAdornment:p,type:h}=e,m={root:["root","color"+Object(Kn.a)(n),r&&"disabled",o&&"error",c&&"fullWidth",i&&"focused",l&&"formControl",f&&"medium"!==f&&"size"+Object(Kn.a)(f),u&&"multiline",p&&"adornedStart",a&&"adornedEnd",s&&"hiddenLabel",d&&"readOnly"],input:["input",r&&"disabled","search"===h&&"inputTypeSearch",u&&"inputMultiline","small"===f&&"inputSizeSmall",s&&"inputHiddenLabel",p&&"inputAdornedStart",a&&"inputAdornedEnd",d&&"readOnly"]};return Object(Ft.a)(m,Ol,t)})(ee),ne=M.root||s.Root||Al,re=N.root||u.root||{},oe=M.input||s.Input||kl;return Z=Object(mt.a)({},Z,null!=(n=N.input)?n:u.input),Object(xt.jsxs)(a.Fragment,{children:[!p&&Cl,Object(xt.jsxs)(ne,Object(mt.a)({},re,!$t(ne)&&{ownerState:Object(mt.a)({},ee,re.ownerState)},{ref:t,onClick:e=>{$.current&&e.currentTarget===e.target&&$.current.focus(),A&&A(e)}},D,{className:Object(Dt.a)(te.root,re.className,c,R&&"MuiInputBase-readOnly"),children:[I,Object(xt.jsx)(vl.Provider,{value:null,children:Object(xt.jsx)(oe,Object(mt.a)({ownerState:ee,"aria-invalid":Y.error,"aria-describedby":o,autoComplete:i,autoFocus:l,defaultValue:d,disabled:Y.disabled,id:b,onAnimationStart:e=>{J("mui-auto-fill-cancel"===e.animationName?$.current:{value:"x"})},name:j,placeholder:P,readOnly:R,required:Y.required,rows:L,value:F,onKeyDown:C,onKeyUp:T,type:B},Z,!$t(oe)&&{as:Q,ownerState:Object(mt.a)({},ee,Z.ownerState)},{ref:V,className:Object(Dt.a)(te.input,Z.className,R&&"MuiInputBase-readOnly"),onBlur:e=>{E&&E(e),g.onBlur&&g.onBlur(e),G&&G.onBlur?G.onBlur(e):q(!1)},onChange:(e,...t)=>{if(!W){const t=e.target||$.current;if(null==t)throw new Error(Object(sl.a)(1));J({value:t.value})}g.onChange&&g.onChange(e,...t),S&&S(e,...t)},onFocus:e=>{Y.disabled?e.stopPropagation():(k&&k(e),g.onFocus&&g.onFocus(e),G&&G.onFocus?G.onFocus(e):q(!0))}}))}),h,_?_(Object(mt.a)({},Y,{startAdornment:I})):null]}))]})}));function Pl(e){return Object(Cn.a)("MuiInput",e)}var Rl=Object(mt.a)({},wl,Object(kn.a)("MuiInput",["root","underline","input"]));const _l=["disableUnderline","components","componentsProps","fullWidth","inputComponent","multiline","slotProps","slots","type"],Ll=Object(pt.a)(Al,{shouldForwardProp:e=>Object(pt.b)(e)||"classes"===e,name:"MuiInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...El(e,t),!n.disableUnderline&&t.underline]}})(({theme:e,ownerState:t})=>{let n="light"===e.palette.mode?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return e.vars&&(n=`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`),Object(mt.a)({position:"relative"},t.formControl&&{"label + &":{marginTop:16}},!t.disableUnderline&&{"&::after":{borderBottom:"2px solid "+(e.vars||e).palette[t.color].main,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${Rl.focused}:after`]:{transform:"scaleX(1) translateX(0)"},["&."+Rl.error]:{"&::before, &::after":{borderBottomColor:(e.vars||e).palette.error.main}},"&::before":{borderBottom:"1px solid "+n,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${Rl.disabled}, .${Rl.error}):before`]:{borderBottom:"2px solid "+(e.vars||e).palette.text.primary,"@media (hover: none)":{borderBottom:"1px solid "+n}},[`&.${Rl.disabled}:before`]:{borderBottomStyle:"dotted"}})}),Nl=Object(pt.a)(kl,{name:"MuiInput",slot:"Input",overridesResolver:Sl})({}),Ml=a.forwardRef((function(e,t){var n,r,o,a;const i=Object(Pt.a)({props:e,name:"MuiInput"}),{disableUnderline:l,components:c={},componentsProps:s,fullWidth:u=!1,inputComponent:d="input",multiline:f=!1,slotProps:p,slots:h={},type:m="text"}=i,b=Object(bt.a)(i,_l),v=(e=>{const{classes:t,disableUnderline:n}=e,r={root:["root",!n&&"underline"],input:["input"]},o=Object(Ft.a)(r,Pl,t);return Object(mt.a)({},t,o)})(i),g={root:{ownerState:{disableUnderline:l}}},y=(null!=p?p:s)?Object(lr.a)(null!=p?p:s,g):g,x=null!=(n=null!=(r=h.root)?r:c.Root)?n:Ll,O=null!=(o=null!=(a=h.input)?a:c.Input)?o:Nl;return Object(xt.jsx)(Tl,Object(mt.a)({slots:{root:x,input:O},slotProps:y,fullWidth:u,inputComponent:d,multiline:f,ref:t,type:m},b,{classes:v}))}));Ml.muiName="Input";var Il=Ml;function Bl(e){return Object(Cn.a)("MuiFilledInput",e)}var zl=Object(mt.a)({},wl,Object(kn.a)("MuiFilledInput",["root","underline","input"]));const Dl=["disableUnderline","components","componentsProps","fullWidth","hiddenLabel","inputComponent","multiline","slotProps","slots","type"],Fl=Object(pt.a)(Al,{shouldForwardProp:e=>Object(pt.b)(e)||"classes"===e,name:"MuiFilledInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...El(e,t),!n.disableUnderline&&t.underline]}})(({theme:e,ownerState:t})=>{var n;const r="light"===e.palette.mode,o=r?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",a=r?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)",i=r?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)",l=r?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)";return Object(mt.a)({position:"relative",backgroundColor:e.vars?e.vars.palette.FilledInput.bg:a,borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:e.vars?e.vars.palette.FilledInput.hoverBg:i,"@media (hover: none)":{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:a}},["&."+zl.focused]:{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:a},["&."+zl.disabled]:{backgroundColor:e.vars?e.vars.palette.FilledInput.disabledBg:l}},!t.disableUnderline&&{"&::after":{borderBottom:"2px solid "+(null==(n=(e.vars||e).palette[t.color||"primary"])?void 0:n.main),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${zl.focused}:after`]:{transform:"scaleX(1) translateX(0)"},["&."+zl.error]:{"&::before, &::after":{borderBottomColor:(e.vars||e).palette.error.main}},"&::before":{borderBottom:"1px solid "+(e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`:o),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${zl.disabled}, .${zl.error}):before`]:{borderBottom:"1px solid "+(e.vars||e).palette.text.primary},[`&.${zl.disabled}:before`]:{borderBottomStyle:"dotted"}},t.startAdornment&&{paddingLeft:12},t.endAdornment&&{paddingRight:12},t.multiline&&Object(mt.a)({padding:"25px 12px 8px"},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.hiddenLabel&&"small"===t.size&&{paddingTop:8,paddingBottom:9}))}),Wl=Object(pt.a)(kl,{name:"MuiFilledInput",slot:"Input",overridesResolver:Sl})(({theme:e,ownerState:t})=>Object(mt.a)({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0},t.hiddenLabel&&"small"===t.size&&{paddingTop:8,paddingBottom:9},t.multiline&&{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0})),$l=a.forwardRef((function(e,t){var n,r,o,a;const i=Object(Pt.a)({props:e,name:"MuiFilledInput"}),{components:l={},componentsProps:c,fullWidth:s=!1,inputComponent:u="input",multiline:d=!1,slotProps:f,slots:p={},type:h="text"}=i,m=Object(bt.a)(i,Dl),b=Object(mt.a)({},i,{fullWidth:s,inputComponent:u,multiline:d,type:h}),v=(e=>{const{classes:t,disableUnderline:n}=e,r={root:["root",!n&&"underline"],input:["input"]},o=Object(Ft.a)(r,Bl,t);return Object(mt.a)({},t,o)})(i),g={root:{ownerState:b},input:{ownerState:b}},y=(null!=f?f:c)?Object(lr.a)(g,null!=f?f:c):g,x=null!=(n=null!=(r=p.root)?r:l.Root)?n:Fl,O=null!=(o=null!=(a=p.input)?a:l.Input)?o:Wl;return Object(xt.jsx)(Tl,Object(mt.a)({slots:{root:x,input:O},componentsProps:y,fullWidth:s,inputComponent:u,multiline:d,ref:t,type:h},m,{classes:v}))}));$l.muiName="Input";var Ul,Vl=$l;const Hl=["children","classes","className","label","notched"],ql=Object(pt.a)("fieldset",{shouldForwardProp:pt.b})({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),Gl=Object(pt.a)("legend",{shouldForwardProp:pt.b})(({ownerState:e,theme:t})=>Object(mt.a)({float:"unset",width:"auto",overflow:"hidden"},!e.withLabel&&{padding:0,lineHeight:"11px",transition:t.transitions.create("width",{duration:150,easing:t.transitions.easing.easeOut})},e.withLabel&&Object(mt.a)({display:"block",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:t.transitions.create("max-width",{duration:50,easing:t.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block",opacity:0,visibility:"visible"}},e.notched&&{maxWidth:"100%",transition:t.transitions.create("max-width",{duration:100,easing:t.transitions.easing.easeOut,delay:50})})));function Yl(e){return Object(Cn.a)("MuiOutlinedInput",e)}var Kl=Object(mt.a)({},wl,Object(kn.a)("MuiOutlinedInput",["root","notchedOutline","input"]));const Xl=["components","fullWidth","inputComponent","label","multiline","notched","slots","type"],Jl=Object(pt.a)(Al,{shouldForwardProp:e=>Object(pt.b)(e)||"classes"===e,name:"MuiOutlinedInput",slot:"Root",overridesResolver:El})(({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return Object(mt.a)({position:"relative",borderRadius:(e.vars||e).shape.borderRadius,["&:hover ."+Kl.notchedOutline]:{borderColor:(e.vars||e).palette.text.primary},"@media (hover: none)":{["&:hover ."+Kl.notchedOutline]:{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:n}},[`&.${Kl.focused} .${Kl.notchedOutline}`]:{borderColor:(e.vars||e).palette[t.color].main,borderWidth:2},[`&.${Kl.error} .${Kl.notchedOutline}`]:{borderColor:(e.vars||e).palette.error.main},[`&.${Kl.disabled} .${Kl.notchedOutline}`]:{borderColor:(e.vars||e).palette.action.disabled}},t.startAdornment&&{paddingLeft:14},t.endAdornment&&{paddingRight:14},t.multiline&&Object(mt.a)({padding:"16.5px 14px"},"small"===t.size&&{padding:"8.5px 14px"}))}),Ql=Object(pt.a)((function(e){const{className:t,label:n,notched:r}=e,o=Object(bt.a)(e,Hl),a=null!=n&&""!==n,i=Object(mt.a)({},e,{notched:r,withLabel:a});return Object(xt.jsx)(ql,Object(mt.a)({"aria-hidden":!0,className:t,ownerState:i},o,{children:Object(xt.jsx)(Gl,{ownerState:i,children:a?Object(xt.jsx)("span",{children:n}):Ul||(Ul=Object(xt.jsx)("span",{className:"notranslate",children:"​"}))})}))}),{name:"MuiOutlinedInput",slot:"NotchedOutline",overridesResolver:(e,t)=>t.notchedOutline})(({theme:e})=>{const t="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:t}}),Zl=Object(pt.a)(kl,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:Sl})(({theme:e,ownerState:t})=>Object(mt.a)({padding:"16.5px 14px"},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},"small"===t.size&&{padding:"8.5px 14px"},t.multiline&&{padding:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0})),ec=a.forwardRef((function(e,t){var n,r,o,i,l;const c=Object(Pt.a)({props:e,name:"MuiOutlinedInput"}),{components:s={},fullWidth:u=!1,inputComponent:d="input",label:f,multiline:p=!1,notched:h,slots:m={},type:b="text"}=c,v=Object(bt.a)(c,Xl),g=(e=>{const{classes:t}=e,n=Object(Ft.a)({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},Yl,t);return Object(mt.a)({},t,n)})(c),y=gl(),x=bl({props:c,muiFormControl:y,states:["color","disabled","error","focused","hiddenLabel","size","required"]}),O=Object(mt.a)({},c,{color:x.color||"primary",disabled:x.disabled,error:x.error,focused:x.focused,formControl:y,fullWidth:u,hiddenLabel:x.hiddenLabel,multiline:p,size:x.size,type:b}),w=null!=(n=null!=(r=m.root)?r:s.Root)?n:Jl,j=null!=(o=null!=(i=m.input)?i:s.Input)?o:Zl;return Object(xt.jsx)(Tl,Object(mt.a)({slots:{root:w,input:j},renderSuffix:e=>Object(xt.jsx)(Ql,{ownerState:O,className:g.notchedOutline,label:null!=f&&""!==f&&x.required?l||(l=Object(xt.jsxs)(a.Fragment,{children:[f," ","*"]})):f,notched:void 0!==h?h:Boolean(e.startAdornment||e.filled||e.focused)}),fullWidth:u,inputComponent:d,multiline:p,ref:t,type:b},v,{classes:Object(mt.a)({},g,{notchedOutline:null})}))}));ec.muiName="Input";var tc=ec;function nc(e){return Object(Cn.a)("MuiFormLabel",e)}var rc=Object(kn.a)("MuiFormLabel",["root","colorSecondary","focused","disabled","error","filled","required","asterisk"]);const oc=["children","className","color","component","disabled","error","filled","focused","required"],ac=Object(pt.a)("label",{name:"MuiFormLabel",slot:"Root",overridesResolver:({ownerState:e},t)=>Object(mt.a)({},t.root,"secondary"===e.color&&t.colorSecondary,e.filled&&t.filled)})(({theme:e,ownerState:t})=>Object(mt.a)({color:(e.vars||e).palette.text.secondary},e.typography.body1,{lineHeight:"1.4375em",padding:0,position:"relative",["&."+rc.focused]:{color:(e.vars||e).palette[t.color].main},["&."+rc.disabled]:{color:(e.vars||e).palette.text.disabled},["&."+rc.error]:{color:(e.vars||e).palette.error.main}})),ic=Object(pt.a)("span",{name:"MuiFormLabel",slot:"Asterisk",overridesResolver:(e,t)=>t.asterisk})(({theme:e})=>({["&."+rc.error]:{color:(e.vars||e).palette.error.main}}));var lc=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiFormLabel"}),{children:r,className:o,component:a="label"}=n,i=Object(bt.a)(n,oc),l=bl({props:n,muiFormControl:gl(),states:["color","required","focused","disabled","error","filled"]}),c=Object(mt.a)({},n,{color:l.color||"primary",component:a,disabled:l.disabled,error:l.error,filled:l.filled,focused:l.focused,required:l.required}),s=(e=>{const{classes:t,color:n,focused:r,disabled:o,error:a,filled:i,required:l}=e,c={root:["root","color"+Object(Kn.a)(n),o&&"disabled",a&&"error",i&&"filled",r&&"focused",l&&"required"],asterisk:["asterisk",a&&"error"]};return Object(Ft.a)(c,nc,t)})(c);return Object(xt.jsxs)(ac,Object(mt.a)({as:a,ownerState:c,className:Object(Dt.a)(s.root,o),ref:t},i,{children:[r,l.required&&Object(xt.jsxs)(ic,{ownerState:c,"aria-hidden":!0,className:s.asterisk,children:[" ","*"]})]}))}));function cc(e){return Object(Cn.a)("MuiInputLabel",e)}Object(kn.a)("MuiInputLabel",["root","focused","disabled","error","required","asterisk","formControl","sizeSmall","shrink","animated","standard","filled","outlined"]);const sc=["disableAnimation","margin","shrink","variant","className"],uc=Object(pt.a)(lc,{shouldForwardProp:e=>Object(pt.b)(e)||"classes"===e,name:"MuiInputLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{["& ."+rc.asterisk]:t.asterisk},t.root,n.formControl&&t.formControl,"small"===n.size&&t.sizeSmall,n.shrink&&t.shrink,!n.disableAnimation&&t.animated,n.focused&&t.focused,t[n.variant]]}})(({theme:e,ownerState:t})=>Object(mt.a)({display:"block",transformOrigin:"top left",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",maxWidth:"100%"},t.formControl&&{position:"absolute",left:0,top:0,transform:"translate(0, 20px) scale(1)"},"small"===t.size&&{transform:"translate(0, 17px) scale(1)"},t.shrink&&{transform:"translate(0, -1.5px) scale(0.75)",transformOrigin:"top left",maxWidth:"133%"},!t.disableAnimation&&{transition:e.transitions.create(["color","transform","max-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},"filled"===t.variant&&Object(mt.a)({zIndex:1,pointerEvents:"none",transform:"translate(12px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},"small"===t.size&&{transform:"translate(12px, 13px) scale(1)"},t.shrink&&Object(mt.a)({userSelect:"none",pointerEvents:"auto",transform:"translate(12px, 7px) scale(0.75)",maxWidth:"calc(133% - 24px)"},"small"===t.size&&{transform:"translate(12px, 4px) scale(0.75)"})),"outlined"===t.variant&&Object(mt.a)({zIndex:1,pointerEvents:"none",transform:"translate(14px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},"small"===t.size&&{transform:"translate(14px, 9px) scale(1)"},t.shrink&&{userSelect:"none",pointerEvents:"auto",maxWidth:"calc(133% - 32px)",transform:"translate(14px, -9px) scale(0.75)"})));var dc=a.forwardRef((function(e,t){const n=Object(Pt.a)({name:"MuiInputLabel",props:e}),{disableAnimation:r=!1,shrink:o,className:a}=n,i=Object(bt.a)(n,sc),l=gl();let c=o;void 0===c&&l&&(c=l.filled||l.focused||l.adornedStart);const s=bl({props:n,muiFormControl:l,states:["size","variant","required","focused"]}),u=Object(mt.a)({},n,{disableAnimation:r,formControl:l,shrink:c,size:s.size,variant:s.variant,required:s.required,focused:s.focused}),d=(e=>{const{classes:t,formControl:n,size:r,shrink:o,disableAnimation:a,variant:i,required:l}=e,c={root:["root",n&&"formControl",!a&&"animated",o&&"shrink",r&&"normal"!==r&&"size"+Object(Kn.a)(r),i],asterisk:[l&&"asterisk"]},s=Object(Ft.a)(c,cc,t);return Object(mt.a)({},t,s)})(u);return Object(xt.jsx)(uc,Object(mt.a)({"data-shrink":c,ownerState:u,ref:t,className:Object(Dt.a)(d.root,a)},i,{classes:d}))})),fc=n(60);function pc(e){return Object(Cn.a)("MuiFormControl",e)}Object(kn.a)("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]);const hc=["children","className","color","component","disabled","error","focused","fullWidth","hiddenLabel","margin","required","size","variant"],mc=Object(pt.a)("div",{name:"MuiFormControl",slot:"Root",overridesResolver:({ownerState:e},t)=>Object(mt.a)({},t.root,t["margin"+Object(Kn.a)(e.margin)],e.fullWidth&&t.fullWidth)})(({ownerState:e})=>Object(mt.a)({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},"normal"===e.margin&&{marginTop:16,marginBottom:8},"dense"===e.margin&&{marginTop:8,marginBottom:4},e.fullWidth&&{width:"100%"}));var bc=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiFormControl"}),{children:r,className:o,color:i="primary",component:l="div",disabled:c=!1,error:s=!1,focused:u,fullWidth:d=!1,hiddenLabel:f=!1,margin:p="none",required:h=!1,size:m="medium",variant:b="outlined"}=n,v=Object(bt.a)(n,hc),g=Object(mt.a)({},n,{color:i,component:l,disabled:c,error:s,fullWidth:d,hiddenLabel:f,margin:p,required:h,size:m,variant:b}),y=(e=>{const{classes:t,margin:n,fullWidth:r}=e,o={root:["root","none"!==n&&"margin"+Object(Kn.a)(n),r&&"fullWidth"]};return Object(Ft.a)(o,pc,t)})(g),[x,O]=a.useState(()=>{let e=!1;return r&&a.Children.forEach(r,t=>{if(!Object(fc.a)(t,["Input","Select"]))return;const n=Object(fc.a)(t,["Select"])?t.props.input:t;n&&n.props.startAdornment&&(e=!0)}),e}),[w,j]=a.useState(()=>{let e=!1;return r&&a.Children.forEach(r,t=>{Object(fc.a)(t,["Input","Select"])&&(xl(t.props,!0)||xl(t.props.inputProps,!0))&&(e=!0)}),e}),[E,S]=a.useState(!1);c&&E&&S(!1);const A=void 0===u||c?E:u;const k=a.useMemo(()=>({adornedStart:x,setAdornedStart:O,color:i,disabled:c,error:s,filled:w,focused:A,fullWidth:d,hiddenLabel:f,size:m,onBlur:()=>{S(!1)},onEmpty:()=>{j(!1)},onFilled:()=>{j(!0)},onFocus:()=>{S(!0)},registerEffect:void 0,required:h,variant:b}),[x,i,c,s,w,A,d,f,void 0,h,m,b]);return Object(xt.jsx)(vl.Provider,{value:k,children:Object(xt.jsx)(mc,Object(mt.a)({as:l,ownerState:g,className:Object(Dt.a)(y.root,o),ref:t},v,{children:r}))})}));function vc(e){return Object(Cn.a)("MuiFormHelperText",e)}var gc,yc=Object(kn.a)("MuiFormHelperText",["root","error","disabled","sizeSmall","sizeMedium","contained","focused","filled","required"]);const xc=["children","className","component","disabled","error","filled","focused","margin","required","variant"],Oc=Object(pt.a)("p",{name:"MuiFormHelperText",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.size&&t["size"+Object(Kn.a)(n.size)],n.contained&&t.contained,n.filled&&t.filled]}})(({theme:e,ownerState:t})=>Object(mt.a)({color:(e.vars||e).palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:3,marginRight:0,marginBottom:0,marginLeft:0,["&."+yc.disabled]:{color:(e.vars||e).palette.text.disabled},["&."+yc.error]:{color:(e.vars||e).palette.error.main}},"small"===t.size&&{marginTop:4},t.contained&&{marginLeft:14,marginRight:14}));var wc=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiFormHelperText"}),{children:r,className:o,component:a="p"}=n,i=Object(bt.a)(n,xc),l=bl({props:n,muiFormControl:gl(),states:["variant","size","disabled","error","filled","focused","required"]}),c=Object(mt.a)({},n,{component:a,contained:"filled"===l.variant||"outlined"===l.variant,variant:l.variant,size:l.size,disabled:l.disabled,error:l.error,filled:l.filled,focused:l.focused,required:l.required}),s=(e=>{const{classes:t,contained:n,size:r,disabled:o,error:a,filled:i,focused:l,required:c}=e,s={root:["root",o&&"disabled",a&&"error",r&&"size"+Object(Kn.a)(r),n&&"contained",l&&"focused",i&&"filled",c&&"required"]};return Object(Ft.a)(s,vc,t)})(c);return Object(xt.jsx)(Oc,Object(mt.a)({as:a,ownerState:c,className:Object(Dt.a)(s.root,o),ref:t},i,{children:" "===r?gc||(gc=Object(xt.jsx)("span",{className:"notranslate",children:"​"})):r}))})),jc=(n(98),n(32)),Ec=Jt;const Sc=["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"];function Ac(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function kc(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function Cc(e,t){if(void 0===t)return!0;let n=e.innerText;return void 0===n&&(n=e.textContent),n=n.trim().toLowerCase(),0!==n.length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join("")))}function Tc(e,t,n,r,o,a){let i=!1,l=o(e,t,!!t&&n);for(;l;){if(l===e.firstChild){if(i)return!1;i=!0}const t=!r&&(l.disabled||"true"===l.getAttribute("aria-disabled"));if(l.hasAttribute("tabindex")&&Cc(l,a)&&!t)return l.focus(),!0;l=o(e,l,n)}return!1}var Pc=a.forwardRef((function(e,t){const{actions:n,autoFocus:r=!1,autoFocusItem:o=!1,children:i,className:l,disabledItemsFocusable:c=!1,disableListWrap:s=!1,onKeyDown:u,variant:d="selectedMenu"}=e,f=Object(bt.a)(e,Sc),p=a.useRef(null),h=a.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});Object(Ba.a)(()=>{r&&p.current.focus()},[r]),a.useImperativeHandle(n,()=>({adjustStyleForScrollbar:(e,t)=>{const n=!p.current.style.width;if(e.clientHeight<p.current.clientHeight&&n){const n=Ec(Object(jc.a)(e))+"px";p.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=n,p.current.style.width=`calc(100% + ${n})`}return p.current}}),[]);const m=Object(jn.a)(p,t);let b=-1;a.Children.forEach(i,(e,t)=>{a.isValidElement(e)?(e.props.disabled||("selectedMenu"===d&&e.props.selected||-1===b)&&(b=t),b===t&&(e.props.disabled||e.props.muiSkipListHighlight||e.type.muiSkipListHighlight)&&(b+=1,b>=i.length&&(b=-1))):b===t&&(b+=1,b>=i.length&&(b=-1))});const v=a.Children.map(i,(e,t)=>{if(t===b){const t={};return o&&(t.autoFocus=!0),void 0===e.props.tabIndex&&"selectedMenu"===d&&(t.tabIndex=0),a.cloneElement(e,t)}return e});return Object(xt.jsx)(Tr,Object(mt.a)({role:"menu",ref:m,className:l,onKeyDown:e=>{const t=p.current,n=e.key,r=Object(jc.a)(t).activeElement;if("ArrowDown"===n)e.preventDefault(),Tc(t,r,s,c,Ac);else if("ArrowUp"===n)e.preventDefault(),Tc(t,r,s,c,kc);else if("Home"===n)e.preventDefault(),Tc(t,null,s,c,Ac);else if("End"===n)e.preventDefault(),Tc(t,null,s,c,kc);else if(1===n.length){const o=h.current,a=n.toLowerCase(),i=performance.now();o.keys.length>0&&(i-o.lastTime>500?(o.keys=[],o.repeating=!0,o.previousKeyMatched=!0):o.repeating&&a!==o.keys[0]&&(o.repeating=!1)),o.lastTime=i,o.keys.push(a);const l=r&&!o.repeating&&Cc(r,o);o.previousKeyMatched&&(l||Tc(t,r,!1,c,Ac,o))?e.preventDefault():o.previousKeyMatched=!1}u&&u(e)},tabIndex:r?0:-1},f,{children:v}))}));const Rc=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function _c(e){return`scale(${e}, ${e**2})`}const Lc={entering:{opacity:1,transform:_c(1)},entered:{opacity:1,transform:"none"}},Nc="undefined"!=typeof navigator&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),Mc=a.forwardRef((function(e,t){const{addEndListener:n,appear:r=!0,children:o,easing:i,in:l,onEnter:c,onEntered:s,onEntering:u,onExit:d,onExited:f,onExiting:p,style:h,timeout:m="auto",TransitionComponent:b=yn}=e,v=Object(bt.a)(e,Rc),g=Object(Qr.b)(),y=a.useRef(),x=xn(),O=a.useRef(null),w=Object(jn.a)(O,o.ref,t),j=e=>t=>{if(e){const n=O.current;void 0===t?e(n):e(n,t)}},E=j(u),S=j((e,t)=>{On(e);const{duration:n,delay:r,easing:o}=wn({style:h,timeout:m,easing:i},{mode:"enter"});let a;"auto"===m?(a=x.transitions.getAutoHeightDuration(e.clientHeight),y.current=a):a=n,e.style.transition=[x.transitions.create("opacity",{duration:a,delay:r}),x.transitions.create("transform",{duration:Nc?a:.666*a,delay:r,easing:o})].join(","),c&&c(e,t)}),A=j(s),k=j(p),C=j(e=>{const{duration:t,delay:n,easing:r}=wn({style:h,timeout:m,easing:i},{mode:"exit"});let o;"auto"===m?(o=x.transitions.getAutoHeightDuration(e.clientHeight),y.current=o):o=t,e.style.transition=[x.transitions.create("opacity",{duration:o,delay:n}),x.transitions.create("transform",{duration:Nc?o:.666*o,delay:Nc?n:n||.333*o,easing:r})].join(","),e.style.opacity=0,e.style.transform=_c(.75),d&&d(e)}),T=j(f);return Object(xt.jsx)(b,Object(mt.a)({appear:r,in:l,nodeRef:O,onEnter:S,onEntered:A,onEntering:E,onExit:C,onExited:T,onExiting:k,addEndListener:e=>{"auto"===m&&g.start(y.current||0,e),n&&n(O.current,e)},timeout:"auto"===m?null:m},v,{children:(e,t)=>a.cloneElement(o,Object(mt.a)({style:Object(mt.a)({opacity:0,transform:_c(.75),visibility:"exited"!==e||l?void 0:"hidden"},Lc[e],h,o.props.style),ref:w},t))}))}));Mc.muiSupportAuto=!0;var Ic=Mc;function Bc(e){return Object(Cn.a)("MuiPopover",e)}Object(kn.a)("MuiPopover",["root","paper"]);const zc=["onEntering"],Dc=["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","className","container","elevation","marginThreshold","open","PaperProps","slots","slotProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps","disableScrollLock"],Fc=["slotProps"];function Wc(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function $c(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function Uc(e){return[e.horizontal,e.vertical].map(e=>"number"==typeof e?e+"px":e).join(" ")}function Vc(e){return"function"==typeof e?e():e}const Hc=Object(pt.a)(Bn,{name:"MuiPopover",slot:"Root",overridesResolver:(e,t)=>t.root})({}),qc=Object(pt.a)(Yn,{name:"MuiPopover",slot:"Paper",overridesResolver:(e,t)=>t.paper})({position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0});var Gc=a.forwardRef((function(e,t){var n,r,o;const i=Object(Pt.a)({props:e,name:"MuiPopover"}),{action:l,anchorEl:c,anchorOrigin:s={vertical:"top",horizontal:"left"},anchorPosition:u,anchorReference:d="anchorEl",children:f,className:p,container:h,elevation:m=8,marginThreshold:b=16,open:v,PaperProps:g={},slots:y,slotProps:x,transformOrigin:O={vertical:"top",horizontal:"left"},TransitionComponent:w=Ic,transitionDuration:j="auto",TransitionProps:{onEntering:E}={},disableScrollLock:S=!1}=i,A=Object(bt.a)(i.TransitionProps,zc),k=Object(bt.a)(i,Dc),C=null!=(n=null==x?void 0:x.paper)?n:g,T=a.useRef(),P=Object(jn.a)(T,C.ref),R=Object(mt.a)({},i,{anchorOrigin:s,anchorReference:d,elevation:m,marginThreshold:b,externalPaperSlotProps:C,transformOrigin:O,TransitionComponent:w,transitionDuration:j,TransitionProps:A}),_=(e=>{const{classes:t}=e;return Object(Ft.a)({root:["root"],paper:["paper"]},Bc,t)})(R),L=a.useCallback(()=>{if("anchorPosition"===d)return u;const e=Vc(c),t=(e&&1===e.nodeType?e:Object(jc.a)(T.current).body).getBoundingClientRect();return{top:t.top+Wc(t,s.vertical),left:t.left+$c(t,s.horizontal)}},[c,s.horizontal,s.vertical,u,d]),N=a.useCallback(e=>({vertical:Wc(e,O.vertical),horizontal:$c(e,O.horizontal)}),[O.horizontal,O.vertical]),M=a.useCallback(e=>{const t={width:e.offsetWidth,height:e.offsetHeight},n=N(t);if("none"===d)return{top:null,left:null,transformOrigin:Uc(n)};const r=L();let o=r.top-n.vertical,a=r.left-n.horizontal;const i=o+t.height,l=a+t.width,s=Object(Dn.a)(Vc(c)),u=s.innerHeight-b,f=s.innerWidth-b;if(null!==b&&o<b){const e=o-b;o-=e,n.vertical+=e}else if(null!==b&&i>u){const e=i-u;o-=e,n.vertical+=e}if(null!==b&&a<b){const e=a-b;a-=e,n.horizontal+=e}else if(l>f){const e=l-f;a-=e,n.horizontal+=e}return{top:Math.round(o)+"px",left:Math.round(a)+"px",transformOrigin:Uc(n)}},[c,d,L,N,b]),[I,B]=a.useState(v),z=a.useCallback(()=>{const e=T.current;if(!e)return;const t=M(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin,B(!0)},[M]);a.useEffect(()=>(S&&window.addEventListener("scroll",z),()=>window.removeEventListener("scroll",z)),[c,S,z]);a.useEffect(()=>{v&&z()}),a.useImperativeHandle(l,()=>v?{updatePosition:()=>{z()}}:null,[v,z]),a.useEffect(()=>{if(!v)return;const e=Object(zn.a)(()=>{z()}),t=Object(Dn.a)(c);return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}},[c,v,z]);let D=j;"auto"!==j||w.muiSupportAuto||(D=void 0);const F=h||(c?Object(jc.a)(Vc(c)).body:void 0),W=null!=(r=null==y?void 0:y.root)?r:Hc,$=null!=(o=null==y?void 0:y.paper)?o:qc,U=qt({elementType:$,externalSlotProps:Object(mt.a)({},C,{style:I?C.style:Object(mt.a)({},C.style,{opacity:0})}),additionalProps:{elevation:m,ref:P},ownerState:R,className:Object(Dt.a)(_.paper,null==C?void 0:C.className)}),V=qt({elementType:W,externalSlotProps:(null==x?void 0:x.root)||{},externalForwardedProps:k,additionalProps:{ref:t,slotProps:{backdrop:{invisible:!0}},container:F,open:v},ownerState:R,className:Object(Dt.a)(_.root,p)}),{slotProps:H}=V,q=Object(bt.a)(V,Fc);return Object(xt.jsx)(W,Object(mt.a)({},q,!$t(W)&&{slotProps:H,disableScrollLock:S},{children:Object(xt.jsx)(w,Object(mt.a)({appear:!0,in:v,onEntering:(e,t)=>{E&&E(e,t),z()},onExited:()=>{B(!1)},timeout:D},A,{children:Object(xt.jsx)($,Object(mt.a)({},U,{children:f}))}))}))}));function Yc(e){return Object(Cn.a)("MuiMenu",e)}Object(kn.a)("MuiMenu",["root","paper","list"]);const Kc=["onEntering"],Xc=["autoFocus","children","className","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant","slots","slotProps"],Jc={vertical:"top",horizontal:"right"},Qc={vertical:"top",horizontal:"left"},Zc=Object(pt.a)(Gc,{shouldForwardProp:e=>Object(pt.b)(e)||"classes"===e,name:"MuiMenu",slot:"Root",overridesResolver:(e,t)=>t.root})({}),es=Object(pt.a)(qc,{name:"MuiMenu",slot:"Paper",overridesResolver:(e,t)=>t.paper})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),ts=Object(pt.a)(Pc,{name:"MuiMenu",slot:"List",overridesResolver:(e,t)=>t.list})({outline:0});var ns=a.forwardRef((function(e,t){var n,r;const o=Object(Pt.a)({props:e,name:"MuiMenu"}),{autoFocus:i=!0,children:l,className:c,disableAutoFocusItem:s=!1,MenuListProps:u={},onClose:d,open:f,PaperProps:p={},PopoverClasses:h,transitionDuration:m="auto",TransitionProps:{onEntering:b}={},variant:v="selectedMenu",slots:g={},slotProps:y={}}=o,x=Object(bt.a)(o.TransitionProps,Kc),O=Object(bt.a)(o,Xc),w=xn(),j="rtl"===w.direction,E=Object(mt.a)({},o,{autoFocus:i,disableAutoFocusItem:s,MenuListProps:u,onEntering:b,PaperProps:p,transitionDuration:m,TransitionProps:x,variant:v}),S=(e=>{const{classes:t}=e;return Object(Ft.a)({root:["root"],paper:["paper"],list:["list"]},Yc,t)})(E),A=i&&!s&&f,k=a.useRef(null);let C=-1;a.Children.map(l,(e,t)=>{a.isValidElement(e)&&(e.props.disabled||("selectedMenu"===v&&e.props.selected||-1===C)&&(C=t))});const T=null!=(n=g.paper)?n:es,P=null!=(r=y.paper)?r:p,R=qt({elementType:g.root,externalSlotProps:y.root,ownerState:E,className:[S.root,c]}),_=qt({elementType:T,externalSlotProps:P,ownerState:E,className:S.paper});return Object(xt.jsx)(Zc,Object(mt.a)({onClose:d,anchorOrigin:{vertical:"bottom",horizontal:j?"right":"left"},transformOrigin:j?Jc:Qc,slots:{paper:T,root:g.root},slotProps:{root:R,paper:_},open:f,ref:t,transitionDuration:m,TransitionProps:Object(mt.a)({onEntering:(e,t)=>{k.current&&k.current.adjustStyleForScrollbar(e,w),b&&b(e,t)}},x),ownerState:E},O,{classes:h,children:Object(xt.jsx)(ts,Object(mt.a)({onKeyDown:e=>{"Tab"===e.key&&(e.preventDefault(),d&&d(e,"tabKeyDown"))},actions:k,autoFocus:i&&(-1===C||s),autoFocusItem:A,variant:v},u,{className:Object(Dt.a)(S.list,u.className),children:l}))}))}));function rs(e){return Object(Cn.a)("MuiNativeSelect",e)}var os=Object(kn.a)("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]);const as=["className","disabled","error","IconComponent","inputRef","variant"],is=({ownerState:e,theme:t})=>Object(mt.a)({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":Object(mt.a)({},t.vars?{backgroundColor:`rgba(${t.vars.palette.common.onBackgroundChannel} / 0.05)`}:{backgroundColor:"light"===t.palette.mode?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)"},{borderRadius:0}),"&::-ms-expand":{display:"none"},["&."+os.disabled]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:(t.vars||t).palette.background.paper},"&&&":{paddingRight:24,minWidth:16}},"filled"===e.variant&&{"&&&":{paddingRight:32}},"outlined"===e.variant&&{borderRadius:(t.vars||t).shape.borderRadius,"&:focus":{borderRadius:(t.vars||t).shape.borderRadius},"&&&":{paddingRight:32}}),ls=Object(pt.a)("select",{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:pt.b,overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.select,t[n.variant],n.error&&t.error,{["&."+os.multiple]:t.multiple}]}})(is),cs=({ownerState:e,theme:t})=>Object(mt.a)({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:(t.vars||t).palette.action.active,["&."+os.disabled]:{color:(t.vars||t).palette.action.disabled}},e.open&&{transform:"rotate(180deg)"},"filled"===e.variant&&{right:7},"outlined"===e.variant&&{right:7}),ss=Object(pt.a)("svg",{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t["icon"+Object(Kn.a)(n.variant)],n.open&&t.iconOpen]}})(cs);var us=a.forwardRef((function(e,t){const{className:n,disabled:r,error:o,IconComponent:i,inputRef:l,variant:c="standard"}=e,s=Object(bt.a)(e,as),u=Object(mt.a)({},e,{disabled:r,variant:c,error:o}),d=(e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:a,error:i}=e,l={select:["select",n,r&&"disabled",o&&"multiple",i&&"error"],icon:["icon","icon"+Object(Kn.a)(n),a&&"iconOpen",r&&"disabled"]};return Object(Ft.a)(l,rs,t)})(u);return Object(xt.jsxs)(a.Fragment,{children:[Object(xt.jsx)(ls,Object(mt.a)({ownerState:u,className:Object(Dt.a)(d.select,n),disabled:r,ref:l||t},s)),e.multiple?null:Object(xt.jsx)(ss,{as:i,ownerState:u,className:d.icon})]})})),ds=n(48);function fs(e){return Object(Cn.a)("MuiSelect",e)}var ps,hs=Object(kn.a)("MuiSelect",["root","select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]);const ms=["aria-describedby","aria-label","autoFocus","autoWidth","children","className","defaultOpen","defaultValue","disabled","displayEmpty","error","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"],bs=Object(pt.a)("div",{name:"MuiSelect",slot:"Select",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{["&."+hs.select]:t.select},{["&."+hs.select]:t[n.variant]},{["&."+hs.error]:t.error},{["&."+hs.multiple]:t.multiple}]}})(is,{["&."+hs.select]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),vs=Object(pt.a)("svg",{name:"MuiSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t["icon"+Object(Kn.a)(n.variant)],n.open&&t.iconOpen]}})(cs),gs=Object(pt.a)("input",{shouldForwardProp:e=>Object(pt.c)(e)&&"classes"!==e,name:"MuiSelect",slot:"NativeInput",overridesResolver:(e,t)=>t.nativeInput})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function ys(e,t){return"object"==typeof t&&null!==t?e===t:String(e)===String(t)}function xs(e){return null==e||"string"==typeof e&&!e.trim()}var Os=a.forwardRef((function(e,t){var n;const{"aria-describedby":r,"aria-label":o,autoFocus:i,autoWidth:l,children:c,className:s,defaultOpen:u,defaultValue:d,disabled:f,displayEmpty:p,error:h=!1,IconComponent:m,inputRef:b,labelId:v,MenuProps:g={},multiple:y,name:x,onBlur:O,onChange:w,onClose:j,onFocus:E,onOpen:S,open:A,readOnly:k,renderValue:C,SelectDisplayProps:T={},tabIndex:P,value:R,variant:_="standard"}=e,L=Object(bt.a)(e,ms),[N,M]=Object(ds.a)({controlled:R,default:d,name:"Select"}),[I,B]=Object(ds.a)({controlled:A,default:u,name:"Select"}),z=a.useRef(null),D=a.useRef(null),[F,W]=a.useState(null),{current:$}=a.useRef(null!=A),[U,V]=a.useState(),H=Object(jn.a)(t,b),q=a.useCallback(e=>{D.current=e,e&&W(e)},[]),G=null==F?void 0:F.parentNode;a.useImperativeHandle(H,()=>({focus:()=>{D.current.focus()},node:z.current,value:N}),[N]),a.useEffect(()=>{u&&I&&F&&!$&&(V(l?null:G.clientWidth),D.current.focus())},[F,l]),a.useEffect(()=>{i&&D.current.focus()},[i]),a.useEffect(()=>{if(!v)return;const e=Object(jc.a)(D.current).getElementById(v);if(e){const t=()=>{getSelection().isCollapsed&&D.current.focus()};return e.addEventListener("click",t),()=>{e.removeEventListener("click",t)}}},[v]);const Y=(e,t)=>{e?S&&S(t):j&&j(t),$||(V(l?null:G.clientWidth),B(e))},K=a.Children.toArray(c),X=e=>t=>{let n;if(t.currentTarget.hasAttribute("tabindex")){if(y){n=Array.isArray(N)?N.slice():[];const t=N.indexOf(e.props.value);-1===t?n.push(e.props.value):n.splice(t,1)}else n=e.props.value;if(e.props.onClick&&e.props.onClick(t),N!==n&&(M(n),w)){const r=t.nativeEvent||t,o=new r.constructor(r.type,r);Object.defineProperty(o,"target",{writable:!0,value:{value:n,name:x}}),w(o,e)}y||Y(!1,t)}},J=null!==F&&I;let Q,Z;delete L["aria-invalid"];const ee=[];let te=!1,ne=!1;(xl({value:N})||p)&&(C?Q=C(N):te=!0);const re=K.map(e=>{if(!a.isValidElement(e))return null;let t;if(y){if(!Array.isArray(N))throw new Error(Object(sl.a)(2));t=N.some(t=>ys(t,e.props.value)),t&&te&&ee.push(e.props.children)}else t=ys(N,e.props.value),t&&te&&(Z=e.props.children);return t&&(ne=!0),a.cloneElement(e,{"aria-selected":t?"true":"false",onClick:X(e),onKeyUp:t=>{" "===t.key&&t.preventDefault(),e.props.onKeyUp&&e.props.onKeyUp(t)},role:"option",selected:t,value:void 0,"data-value":e.props.value})});te&&(Q=y?0===ee.length?null:ee.reduce((e,t,n)=>(e.push(t),n<ee.length-1&&e.push(", "),e),[]):Z);let oe,ae=U;!l&&$&&F&&(ae=G.clientWidth),oe=void 0!==P?P:f?null:0;const ie=T.id||(x?"mui-component-select-"+x:void 0),le=Object(mt.a)({},e,{variant:_,value:N,open:J,error:h}),ce=(e=>{const{classes:t,variant:n,disabled:r,multiple:o,open:a,error:i}=e,l={select:["select",n,r&&"disabled",o&&"multiple",i&&"error"],icon:["icon","icon"+Object(Kn.a)(n),a&&"iconOpen",r&&"disabled"],nativeInput:["nativeInput"]};return Object(Ft.a)(l,fs,t)})(le),se=Object(mt.a)({},g.PaperProps,null==(n=g.slotProps)?void 0:n.paper),ue=Object(cl.a)();return Object(xt.jsxs)(a.Fragment,{children:[Object(xt.jsx)(bs,Object(mt.a)({ref:q,tabIndex:oe,role:"combobox","aria-controls":ue,"aria-disabled":f?"true":void 0,"aria-expanded":J?"true":"false","aria-haspopup":"listbox","aria-label":o,"aria-labelledby":[v,ie].filter(Boolean).join(" ")||void 0,"aria-describedby":r,onKeyDown:e=>{if(!k){-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),Y(!0,e))}},onMouseDown:f||k?null:e=>{0===e.button&&(e.preventDefault(),D.current.focus(),Y(!0,e))},onBlur:e=>{!J&&O&&(Object.defineProperty(e,"target",{writable:!0,value:{value:N,name:x}}),O(e))},onFocus:E},T,{ownerState:le,className:Object(Dt.a)(T.className,ce.select,s),id:ie,children:xs(Q)?ps||(ps=Object(xt.jsx)("span",{className:"notranslate",children:"​"})):Q})),Object(xt.jsx)(gs,Object(mt.a)({"aria-invalid":h,value:Array.isArray(N)?N.join(","):N,name:x,ref:z,"aria-hidden":!0,onChange:e=>{const t=K.find(t=>t.props.value===e.target.value);void 0!==t&&(M(t.props.value),w&&w(e,t))},tabIndex:-1,disabled:f,className:ce.nativeInput,autoFocus:i,ownerState:le},L)),Object(xt.jsx)(vs,{as:m,className:ce.icon,ownerState:le}),Object(xt.jsx)(ns,Object(mt.a)({id:"menu-"+(x||""),anchorEl:G,open:J,onClose:e=>{Y(!1,e)},anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},g,{MenuListProps:Object(mt.a)({"aria-labelledby":v,role:"listbox","aria-multiselectable":y?"true":void 0,disableListWrap:!0,id:ue},g.MenuListProps),slotProps:Object(mt.a)({},g.slotProps,{paper:Object(mt.a)({},se,{style:Object(mt.a)({minWidth:ae},null!=se?se.style:null)})}),children:re}))]})})),ws=Object(pa.a)(Object(xt.jsx)("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown");const js=["autoWidth","children","classes","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"],Es=["root"],Ss={name:"MuiSelect",overridesResolver:(e,t)=>t.root,shouldForwardProp:e=>Object(pt.b)(e)&&"variant"!==e,slot:"Root"},As=Object(pt.a)(Il,Ss)(""),ks=Object(pt.a)(tc,Ss)(""),Cs=Object(pt.a)(Vl,Ss)(""),Ts=a.forwardRef((function(e,t){const n=Object(Pt.a)({name:"MuiSelect",props:e}),{autoWidth:r=!1,children:o,classes:i={},className:l,defaultOpen:c=!1,displayEmpty:s=!1,IconComponent:u=ws,id:d,input:f,inputProps:p,label:h,labelId:m,MenuProps:b,multiple:v=!1,native:g=!1,onClose:y,onOpen:x,open:O,renderValue:w,SelectDisplayProps:j,variant:E="outlined"}=n,S=Object(bt.a)(n,js),A=g?us:Os,k=bl({props:n,muiFormControl:gl(),states:["variant","error"]}),C=k.variant||E,T=Object(mt.a)({},n,{variant:C,classes:i}),P=(e=>{const{classes:t}=e;return t})(T),R=Object(bt.a)(P,Es),_=f||{standard:Object(xt.jsx)(As,{ownerState:T}),outlined:Object(xt.jsx)(ks,{label:h,ownerState:T}),filled:Object(xt.jsx)(Cs,{ownerState:T})}[C],L=Object(jn.a)(t,_.ref);return Object(xt.jsx)(a.Fragment,{children:a.cloneElement(_,Object(mt.a)({inputComponent:A,inputProps:Object(mt.a)({children:o,error:k.error,IconComponent:u,variant:C,type:void 0,multiple:v},g?{id:d}:{autoWidth:r,defaultOpen:c,displayEmpty:s,labelId:m,MenuProps:b,onClose:y,onOpen:x,open:O,renderValue:w,SelectDisplayProps:Object(mt.a)({id:d},j)},p,{classes:p?Object(lr.a)(R,p.classes):R},f?f.props.inputProps:{})},(v&&g||s)&&"outlined"===C?{notched:!0}:{},{ref:L,className:Object(Dt.a)(_.props.className,l,P.root)},!f&&{variant:C},S))})}));Ts.muiName="Select";var Ps=Ts;function Rs(e){return Object(Cn.a)("MuiTextField",e)}Object(kn.a)("MuiTextField",["root"]);const _s=["autoComplete","autoFocus","children","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","id","InputLabelProps","inputProps","InputProps","inputRef","label","maxRows","minRows","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","select","SelectProps","type","value","variant"],Ls={standard:Il,filled:Vl,outlined:tc},Ns=Object(pt.a)(bc,{name:"MuiTextField",slot:"Root",overridesResolver:(e,t)=>t.root})({});var Ms=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiTextField"}),{autoComplete:r,autoFocus:o=!1,children:a,className:i,color:l="primary",defaultValue:c,disabled:s=!1,error:u=!1,FormHelperTextProps:d,fullWidth:f=!1,helperText:p,id:h,InputLabelProps:m,inputProps:b,InputProps:v,inputRef:g,label:y,maxRows:x,minRows:O,multiline:w=!1,name:j,onBlur:E,onChange:S,onFocus:A,placeholder:k,required:C=!1,rows:T,select:P=!1,SelectProps:R,type:_,value:L,variant:N="outlined"}=n,M=Object(bt.a)(n,_s),I=Object(mt.a)({},n,{autoFocus:o,color:l,disabled:s,error:u,fullWidth:f,multiline:w,required:C,select:P,variant:N}),B=(e=>{const{classes:t}=e;return Object(Ft.a)({root:["root"]},Rs,t)})(I);const z={};"outlined"===N&&(m&&void 0!==m.shrink&&(z.notched=m.shrink),z.label=y),P&&(R&&R.native||(z.id=void 0),z["aria-describedby"]=void 0);const D=Object(cl.a)(h),F=p&&D?D+"-helper-text":void 0,W=y&&D?D+"-label":void 0,$=Ls[N],U=Object(xt.jsx)($,Object(mt.a)({"aria-describedby":F,autoComplete:r,autoFocus:o,defaultValue:c,fullWidth:f,multiline:w,name:j,rows:T,maxRows:x,minRows:O,type:_,value:L,id:D,inputRef:g,onBlur:E,onChange:S,onFocus:A,placeholder:k,inputProps:b},z,v));return Object(xt.jsxs)(Ns,Object(mt.a)({className:Object(Dt.a)(B.root,i),disabled:s,error:u,fullWidth:f,ref:t,required:C,color:l,variant:N,ownerState:I},M,{children:[null!=y&&""!==y&&Object(xt.jsx)(dc,Object(mt.a)({htmlFor:D,id:W},m,{children:y})),P?Object(xt.jsx)(Ps,Object(mt.a)({"aria-describedby":F,id:D,labelId:W,value:L,input:U},R,{children:a})):U,p&&Object(xt.jsx)(wc,Object(mt.a)({id:F},d,{children:p}))]}))})),Is=n(134),Bs=n.n(Is),zs=n(270);function Ds(e){return Object(Cn.a)("MuiButton",e)}var Fs=Object(kn.a)("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","iconSizeSmall","iconSizeMedium","iconSizeLarge"]);var Ws=a.createContext({});var $s=a.createContext(void 0);const Us=["children","color","component","className","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"],Vs=e=>Object(mt.a)({},"small"===e.size&&{"& > *:nth-of-type(1)":{fontSize:18}},"medium"===e.size&&{"& > *:nth-of-type(1)":{fontSize:20}},"large"===e.size&&{"& > *:nth-of-type(1)":{fontSize:22}}),Hs=Object(pt.a)(go,{shouldForwardProp:e=>Object(pt.b)(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${Object(Kn.a)(n.color)}`],t["size"+Object(Kn.a)(n.size)],t[`${n.variant}Size${Object(Kn.a)(n.size)}`],"inherit"===n.color&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth]}})(({theme:e,ownerState:t})=>{var n,r;const o="light"===e.palette.mode?e.palette.grey[300]:e.palette.grey[800],a="light"===e.palette.mode?e.palette.grey.A100:e.palette.grey[700];return Object(mt.a)({},e.typography.button,{minWidth:64,padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":Object(mt.a)({textDecoration:"none",backgroundColor:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:Object(Un.a)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"text"===t.variant&&"inherit"!==t.color&&{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Object(Un.a)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"outlined"===t.variant&&"inherit"!==t.color&&{border:"1px solid "+(e.vars||e).palette[t.color].main,backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Object(Un.a)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"contained"===t.variant&&{backgroundColor:e.vars?e.vars.palette.Button.inheritContainedHoverBg:a,boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2],backgroundColor:(e.vars||e).palette.grey[300]}},"contained"===t.variant&&"inherit"!==t.color&&{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}}),"&:active":Object(mt.a)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[8]}),["&."+Fs.focusVisible]:Object(mt.a)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[6]}),["&."+Fs.disabled]:Object(mt.a)({color:(e.vars||e).palette.action.disabled},"outlined"===t.variant&&{border:"1px solid "+(e.vars||e).palette.action.disabledBackground},"contained"===t.variant&&{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground})},"text"===t.variant&&{padding:"6px 8px"},"text"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main},"outlined"===t.variant&&{padding:"5px 15px",border:"1px solid currentColor"},"outlined"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:e.vars?`1px solid rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:"1px solid "+Object(Un.a)(e.palette[t.color].main,.5)},"contained"===t.variant&&{color:e.vars?e.vars.palette.text.primary:null==(n=(r=e.palette).getContrastText)?void 0:n.call(r,e.palette.grey[300]),backgroundColor:e.vars?e.vars.palette.Button.inheritContainedBg:o,boxShadow:(e.vars||e).shadows[2]},"contained"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main},"inherit"===t.color&&{color:"inherit",borderColor:"currentColor"},"small"===t.size&&"text"===t.variant&&{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"text"===t.variant&&{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"outlined"===t.variant&&{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"outlined"===t.variant&&{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"contained"===t.variant&&{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"contained"===t.variant&&{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},t.fullWidth&&{width:"100%"})},({ownerState:e})=>e.disableElevation&&{boxShadow:"none","&:hover":{boxShadow:"none"},["&."+Fs.focusVisible]:{boxShadow:"none"},"&:active":{boxShadow:"none"},["&."+Fs.disabled]:{boxShadow:"none"}}),qs=Object(pt.a)("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,t["iconSize"+Object(Kn.a)(n.size)]]}})(({ownerState:e})=>Object(mt.a)({display:"inherit",marginRight:8,marginLeft:-4},"small"===e.size&&{marginLeft:-2},Vs(e))),Gs=Object(pt.a)("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,t["iconSize"+Object(Kn.a)(n.size)]]}})(({ownerState:e})=>Object(mt.a)({display:"inherit",marginRight:-4,marginLeft:8},"small"===e.size&&{marginRight:-2},Vs(e)));var Ys=a.forwardRef((function(e,t){const n=a.useContext(Ws),r=a.useContext($s),o=Object(zs.a)(n,e),i=Object(Pt.a)({props:o,name:"MuiButton"}),{children:l,color:c="primary",component:s="button",className:u,disabled:d=!1,disableElevation:f=!1,disableFocusRipple:p=!1,endIcon:h,focusVisibleClassName:m,fullWidth:b=!1,size:v="medium",startIcon:g,type:y,variant:x="text"}=i,O=Object(bt.a)(i,Us),w=Object(mt.a)({},i,{color:c,component:s,disabled:d,disableElevation:f,disableFocusRipple:p,fullWidth:b,size:v,type:y,variant:x}),j=(e=>{const{color:t,disableElevation:n,fullWidth:r,size:o,variant:a,classes:i}=e,l={root:["root",a,`${a}${Object(Kn.a)(t)}`,"size"+Object(Kn.a)(o),`${a}Size${Object(Kn.a)(o)}`,"inherit"===t&&"colorInherit",n&&"disableElevation",r&&"fullWidth"],label:["label"],startIcon:["startIcon","iconSize"+Object(Kn.a)(o)],endIcon:["endIcon","iconSize"+Object(Kn.a)(o)]},c=Object(Ft.a)(l,Ds,i);return Object(mt.a)({},i,c)})(w),E=g&&Object(xt.jsx)(qs,{className:j.startIcon,ownerState:w,children:g}),S=h&&Object(xt.jsx)(Gs,{className:j.endIcon,ownerState:w,children:h}),A=r||"";return Object(xt.jsxs)(Hs,Object(mt.a)({ownerState:w,className:Object(Dt.a)(n.className,j.root,u,A),component:s,disabled:d,focusRipple:!p,focusVisibleClassName:Object(Dt.a)(j.focusVisible,m),ref:t,type:y},O,{classes:j,children:[E,l,S]}))}));function Ks(e){return Object(Cn.a)("MuiMenuItem",e)}var Xs=Object(kn.a)("MuiMenuItem",["root","focusVisible","dense","disabled","divider","gutters","selected"]);const Js=["autoFocus","component","dense","divider","disableGutters","focusVisibleClassName","role","tabIndex","className"],Qs=Object(pt.a)(go,{shouldForwardProp:e=>Object(pt.b)(e)||"classes"===e,name:"MuiMenuItem",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.dense&&t.dense,n.divider&&t.divider,!n.disableGutters&&t.gutters]}})(({theme:e,ownerState:t})=>Object(mt.a)({},e.typography.body1,{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minHeight:48,paddingTop:6,paddingBottom:6,boxSizing:"border-box",whiteSpace:"nowrap"},!t.disableGutters&&{paddingLeft:16,paddingRight:16},t.divider&&{borderBottom:"1px solid "+(e.vars||e).palette.divider,backgroundClip:"padding-box"},{"&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},["&."+Xs.selected]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:Object(Un.a)(e.palette.primary.main,e.palette.action.selectedOpacity),["&."+Xs.focusVisible]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:Object(Un.a)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${Xs.selected}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:Object(Un.a)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:Object(Un.a)(e.palette.primary.main,e.palette.action.selectedOpacity)}},["&."+Xs.focusVisible]:{backgroundColor:(e.vars||e).palette.action.focus},["&."+Xs.disabled]:{opacity:(e.vars||e).palette.action.disabledOpacity},["& + ."+Br.root]:{marginTop:e.spacing(1),marginBottom:e.spacing(1)},["& + ."+Br.inset]:{marginLeft:52},["& ."+ti.root]:{marginTop:0,marginBottom:0},["& ."+ti.inset]:{paddingLeft:36},["& ."+Va.root]:{minWidth:36}},!t.dense&&{[e.breakpoints.up("sm")]:{minHeight:"auto"}},t.dense&&Object(mt.a)({minHeight:32,paddingTop:4,paddingBottom:4},e.typography.body2,{[`& .${Va.root} svg`]:{fontSize:"1.25rem"}})));var Zs=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiMenuItem"}),{autoFocus:r=!1,component:o="li",dense:i=!1,divider:l=!1,disableGutters:c=!1,focusVisibleClassName:s,role:u="menuitem",tabIndex:d,className:f}=n,p=Object(bt.a)(n,Js),h=a.useContext(Sr),m=a.useMemo(()=>({dense:i||h.dense||!1,disableGutters:c}),[h.dense,i,c]),b=a.useRef(null);Object(Ba.a)(()=>{r&&b.current&&b.current.focus()},[r]);const v=Object(mt.a)({},n,{dense:m.dense,divider:l,disableGutters:c}),g=(e=>{const{disabled:t,dense:n,divider:r,disableGutters:o,selected:a,classes:i}=e,l={root:["root",n&&"dense",t&&"disabled",!o&&"gutters",r&&"divider",a&&"selected"]},c=Object(Ft.a)(l,Ks,i);return Object(mt.a)({},i,c)})(n),y=Object(jn.a)(b,t);let x;return n.disabled||(x=void 0!==d?d:-1),Object(xt.jsx)(Sr.Provider,{value:m,children:Object(xt.jsx)(Qs,Object(mt.a)({ref:y,role:u,tabIndex:x,component:o,focusVisibleClassName:Object(Dt.a)(g.focusVisible,s),className:Object(Dt.a)(g.root,f)},p,{ownerState:v,classes:g}))})})),eu=n(86),tu=n.n(eu),nu=n(135),ru=n.n(nu);function ou(e){return(ou="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function au(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */au=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var a=t&&t.prototype instanceof b?t:b,i=Object.create(a.prototype),l=new T(r||[]);return o(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",p="executing",h="completed",m={};function b(){}function v(){}function g(){}var y={};s(y,i,(function(){return this}));var x=Object.getPrototypeOf,O=x&&x(x(P([])));O&&O!==n&&r.call(O,i)&&(y=O);var w=g.prototype=b.prototype=Object.create(y);function j(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var c=d(e[o],e,a);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==ou(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function S(t,n,r){var o=f;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===h){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=A(l,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var s=d(t,n,r);if("normal"===s.type){if(o=r.done?h:"suspendedYield",s.arg===m)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=h,r.method="throw",r.arg=s.arg)}}}function A(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,A(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var a=d(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,m;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,m):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(ou(t)+" is not iterable")}return v.prototype=g,o(w,"constructor",{value:g,configurable:!0}),o(g,"constructor",{value:v,configurable:!0}),v.displayName=s(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,s(e,c,"GeneratorFunction")),e.prototype=Object.create(w),e},t.awrap=function(e){return{__await:e}},j(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new E(u(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},j(w),s(w,c,"Generator"),s(w,i,(function(){return this})),s(w,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,m):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),m}},t}function iu(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function lu(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){iu(a,r,o,i,l,"next",e)}function l(e){iu(a,r,o,i,l,"throw",e)}i(void 0)}))}}function cu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return su(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return su(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function su(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function uu(){return(uu=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function du(e){return a.createElement(Mr,uu({variant:"body2",color:"text.secondary",align:"center"},e),"Copyright © ",a.createElement(ia,{color:"inherit",target:"_blank",href:"https://github.com/walimorris/opensquare"},"OpenSquare")," ",(new Date).getFullYear(),".")}var fu={position:"absolute",borderRadius:"3%",top:"50%",left:"50%",transform:"translate(-50%, -50%)",height:"90vh",width:"60vw",bgcolor:"background.paper",border:"2px solid #000",boxShadow:24,p:4},pu={left:"90%"},hu={marginRight:"20%"};function mu(e){var t=cu(Object(a.useState)(!1),2),n=t[0],r=t[1],o=cu(Object(a.useState)(!1),2),i=o[0],l=o[1],c=cu(Object(a.useState)(e.userDetails.username),2),s=(c[0],c[1]),u=cu(Object(a.useState)(e.userDetails.userId),2),d=(u[0],u[1]),f=cu(Object(a.useState)(e.userDetails.createdAt),2),p=(f[0],f[1]),h=cu(Object(a.useState)(e.userDetails.email),2),m=h[0],b=h[1],v=cu(Object(a.useState)(e.userDetails.firstName),2),g=v[0],y=v[1],x=cu(Object(a.useState)(e.userDetails.organization),2),O=x[0],w=x[1],j=cu(Object(a.useState)(e.userDetails.profession),2),E=j[0],S=j[1],A=cu(Object(a.useState)(e.userDetails.ageRange),2),k=A[0],C=A[1],T={username:e.userDetails.username,userId:e.userDetails.userId,createdAt:e.userDetails.createdAt,email:e.userDetails.email,firstName:e.userDetails.firstName,org:e.userDetails.organization,prof:e.userDetails.profession,ageRange:e.userDetails.ageRange},P=cu(Object(a.useState)([]),2),R=P[0],_=P[1],L=cu(Object(a.useState)([]),2),N=L[0],M=L[1],I=cu(Object(a.useState)([]),2),B=I[0],z=I[1],D=function(){l(!1),r(!1)},F=function(){s(T.username),b(T.email),y(T.firstName),w(T.org),S(T.prof),C(T.ageRange),D()},W={method:"get",maxBodyLength:1/0,url:"/opensquare/api/dropdowns/organizations",headers:{"Content-Type":"application/json"},data:""},$={method:"get",maxBodyLength:1/0,url:"/opensquare/api/dropdowns/professions",headers:{"Content-Type":"application/json"},data:""},U={method:"get",maxBodyLength:1/0,url:"/opensquare/api/dropdowns/age_ranges",headers:{"Content-Type":"application/json"},data:""};function V(){return(V=lu(au().mark((function e(t){var n;return au().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),n=H(),console.log(JSON.stringify(n)),2!==Object.keys(n).length){e.next=8;break}console.log("no values need updating!"),l(!0),e.next=13;break;case 8:return l(!1),e.next=11,ft.request({method:"post",maxBodyLength:1/0,url:"/opensentop/api/actions/user_details/update",headers:{"Content-Type":"application/json"},data:JSON.stringify(n)}).then((function(e){console.log(e.data)})).catch((function(e){console.log(e)}));case 11:D(),location.reload(!0);case 13:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function H(){var e={};return e.userId=T.userId,e.createdAt=T.createdAt,T.firstName!==g&&(e.firstName=g),T.ageRange!==k&&(e.ageRange=k),T.email!==m&&(e.email=m),T.org!==O&&(e.organization=O),T.prof!==E&&(e.profession=E),e}return Object(a.useEffect)((function(){b(e.userDetails.email)}),[e]),Object(a.useEffect)((function(){y(e.userDetails.firstName)}),[e]),Object(a.useEffect)((function(){C(e.userDetails.ageRange)}),[e]),Object(a.useEffect)((function(){S(e.userDetails.profession)}),[e]),Object(a.useEffect)((function(){w(e.userDetails.organization)}),[e]),Object(a.useEffect)((function(){s(e.userDetails.username)}),[e]),Object(a.useEffect)((function(){p(e.userDetails.createdAt)}),[e]),Object(a.useEffect)((function(){d(e.userDetails.userId)}),[e]),Object(a.useEffect)((function(){l(!1)}),[]),Object(a.useEffect)((function(){function e(){return(e=lu(au().mark((function e(){return au().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ft.request(W).then((function(e){console.log(e.data),_(e.data)})).catch((function(e){console.log(e)}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[]),Object(a.useEffect)((function(){function e(){return(e=lu(au().mark((function e(){return au().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ft.request($).then((function(e){console.log(e.data),M(e.data)})).catch((function(e){console.log(e)}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[]),Object(a.useEffect)((function(){function e(){return(e=lu(au().mark((function e(){return au().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ft.request(U).then((function(e){console.log(e.data),z(e.data)})).catch((function(e){console.log(e)}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[]),a.createElement("div",null,a.createElement($a,{onClick:function(){return r(!0)}},a.createElement(Ga,null,a.createElement(Gi.a,null)),a.createElement(oi,{primary:"Profile Settings"})),a.createElement(Bn,{"aria-labelledby":"transition-modal-title","aria-describedby":"transition-modal-description",open:n,onClose:D,closeAfterTransition:!0,slots:{backdrop:_n},slotProps:{backdrop:{timeout:500}}},a.createElement(An,{in:n},a.createElement(mr,{sx:fu},a.createElement(jo,{sx:pu,color:"inherit",onClick:F},a.createElement(Bs.a,{fontSize:"large",color:"action",right:"50%"})),a.createElement(Mr,{id:"transition-modal-title",variant:"h6",component:"h2",sx:{marginLeft:"10%"}},"Profile Settings"),a.createElement(mr,{component:"form",sx:{"& .MuiTextField-root":{m:2,width:"100%"}},noValidate:!0,autoComplete:"off"},a.createElement("div",null,a.createElement(ll,{sx:{width:"75%",right:"50%",marginLeft:"12%",marginTop:"2%",marginBottom:"2%"},severity:"info"},"Settings are used for your site experience and notifications!")),a.createElement("div",null,a.createElement(Ms,{fullWidth:!0,size:"small",sx:hu,id:"outlined-search",value:g,onChange:function(e){return y(e.target.value)},label:"Preferred Name",style:{width:"75%",marginLeft:"12%"},type:"text"})),a.createElement("div",null,a.createElement(Ms,{fullWidth:!0,size:"small",sx:hu,id:"outlined-search",value:m,onChange:function(e){return b(e.target.value)},label:"Company/Personal email",style:{width:"75%",marginLeft:"12%"},type:"text"})),a.createElement("div",null,a.createElement(Ms,{fullWidth:!0,size:"small",sx:hu,value:O,onChange:function(e){return w(e.target.value)},id:"outlined-select-currency",select:!0,label:"Organization",style:{width:"75%",marginLeft:"12%"},helperText:"Please Select your organization"},R.map((function(e){return a.createElement(Zs,{key:e,value:e},e)})))),a.createElement("div",null,a.createElement(Ms,{fullWidth:!0,size:"small",sx:hu,id:"outlined-select-currency",value:E,onChange:function(e){return S(e.target.value)},select:!0,label:"Profession",style:{width:"75%",marginLeft:"12%"},helperText:"Please select your profession"},N.map((function(e){return a.createElement(Zs,{key:e,value:e},e)})))),a.createElement("div",null,a.createElement(Ms,{fullWidth:!0,size:"small",sx:hu,id:"outlined-select-currency",select:!0,value:k,onChange:function(e){return C(e.target.value)},label:"Age Group",style:{width:"75%",marginLeft:"12%"},helperText:"Please select your age group"},B.map((function(e){return a.createElement(Zs,{key:e,value:e},e)})))),a.createElement("div",null,i&&a.createElement(ll,{sx:{width:"75%",right:"50%",marginLeft:"12%",marginTop:"1%",marginBottom:"1%"},severity:"warning"},"There were no updates on user details!")),a.createElement("div",null,a.createElement(Ia,{direction:"row",spacing:30,sx:{marginTop:"3%",marginLeft:"15%"}},a.createElement(Ys,{variant:"outlined",onClick:F,startIcon:a.createElement(ru.a,null)},"Cancel"),a.createElement(Ys,{onClick:function(e){return V.apply(this,arguments)},variant:"contained",endIcon:a.createElement(tu.a,null)},"Update"))),a.createElement(du,{sx:{pt:4,marginTop:"4%"}}))))))}function bu(e){return a.createElement(a.Fragment,null,a.createElement(zi,{component:"div",inset:!0},"Settings"),a.createElement($a,null,a.createElement(Ga,null,a.createElement(Hi.a,null)),a.createElement(oi,{primary:"Documentation"})),a.createElement(mu,{userDetails:e.userDetails}))}function vu(e){return Object(Cn.a)("MuiCard",e)}Object(kn.a)("MuiCard",["root"]);const gu=["className","raised"],yu=Object(pt.a)(Yn,{name:"MuiCard",slot:"Root",overridesResolver:(e,t)=>t.root})(()=>({overflow:"hidden"}));var xu=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiCard"}),{className:r,raised:o=!1}=n,a=Object(bt.a)(n,gu),i=Object(mt.a)({},n,{raised:o}),l=(e=>{const{classes:t}=e;return Object(Ft.a)({root:["root"]},vu,t)})(i);return Object(xt.jsx)(yu,Object(mt.a)({className:Object(Dt.a)(l.root,r),elevation:o?8:void 0,ref:t,ownerState:i},a))}));function Ou(e){return Object(Cn.a)("MuiCardMedia",e)}Object(kn.a)("MuiCardMedia",["root","media","img"]);const wu=["children","className","component","image","src","style"],ju=Object(pt.a)("div",{name:"MuiCardMedia",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e,{isMediaComponent:r,isImageComponent:o}=n;return[t.root,r&&t.media,o&&t.img]}})(({ownerState:e})=>Object(mt.a)({display:"block",backgroundSize:"cover",backgroundRepeat:"no-repeat",backgroundPosition:"center"},e.isMediaComponent&&{width:"100%"},e.isImageComponent&&{objectFit:"cover"})),Eu=["video","audio","picture","iframe","img"],Su=["picture","img"];var Au=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiCardMedia"}),{children:r,className:o,component:a="div",image:i,src:l,style:c}=n,s=Object(bt.a)(n,wu),u=-1!==Eu.indexOf(a),d=!u&&i?Object(mt.a)({backgroundImage:`url("${i}")`},c):c,f=Object(mt.a)({},n,{component:a,isMediaComponent:u,isImageComponent:-1!==Su.indexOf(a)}),p=(e=>{const{classes:t,isMediaComponent:n,isImageComponent:r}=e,o={root:["root",n&&"media",r&&"img"]};return Object(Ft.a)(o,Ou,t)})(f);return Object(xt.jsx)(ju,Object(mt.a)({className:Object(Dt.a)(p.root,o),as:a,role:!u&&i?"img":void 0,ref:t,style:d,ownerState:f,src:u?i||l:void 0},s,{children:r}))}));function ku(e){return Object(Cn.a)("MuiCardActionArea",e)}var Cu=Object(kn.a)("MuiCardActionArea",["root","focusVisible","focusHighlight"]);const Tu=["children","className","focusVisibleClassName"],Pu=Object(pt.a)(go,{name:"MuiCardActionArea",slot:"Root",overridesResolver:(e,t)=>t.root})(({theme:e})=>({display:"block",textAlign:"inherit",borderRadius:"inherit",width:"100%",["&:hover ."+Cu.focusHighlight]:{opacity:(e.vars||e).palette.action.hoverOpacity,"@media (hover: none)":{opacity:0}},[`&.${Cu.focusVisible} .${Cu.focusHighlight}`]:{opacity:(e.vars||e).palette.action.focusOpacity}})),Ru=Object(pt.a)("span",{name:"MuiCardActionArea",slot:"FocusHighlight",overridesResolver:(e,t)=>t.focusHighlight})(({theme:e})=>({overflow:"hidden",pointerEvents:"none",position:"absolute",top:0,right:0,bottom:0,left:0,borderRadius:"inherit",opacity:0,backgroundColor:"currentcolor",transition:e.transitions.create("opacity",{duration:e.transitions.duration.short})}));var _u=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiCardActionArea"}),{children:r,className:o,focusVisibleClassName:a}=n,i=Object(bt.a)(n,Tu),l=n,c=(e=>{const{classes:t}=e;return Object(Ft.a)({root:["root"],focusHighlight:["focusHighlight"]},ku,t)})(l);return Object(xt.jsxs)(Pu,Object(mt.a)({className:Object(Dt.a)(c.root,o),focusVisibleClassName:Object(Dt.a)(a,c.focusVisible),ref:t,ownerState:l},i,{children:[r,Object(xt.jsx)(Ru,{className:c.focusHighlight,ownerState:l})]}))})),Lu=n(9),Nu=n.n(Lu);function Mu(e){return a.createElement(Mr,{component:"h2",variant:"h6",color:"primary",gutterBottom:!0},e.children)}Mu.propTypes={children:Nu.a.node};var Iu=Mu,Bu=n(137),zu=n.n(Bu),Du=n(70),Fu=n(61),Wu=n.n(Fu),$u=(n(110),n(62),n(106),function(e){return Wu()(e)&&e.indexOf("%")===e.length-1});var Uu=function(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o]};n(63),n(107),n(30);var Vu=function(e){return"string"==typeof e?e:e?e.displayName||e.name||"Component":""};function Hu(e){return(Hu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function qu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Gu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qu(Object(n),!0).forEach((function(t){Yu(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Yu(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Hu(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!==Hu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===Hu(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ku(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Xu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Xu(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ju=Object(a.forwardRef)((function(e,t){var n=e.aspect,r=e.initialDimension,o=void 0===r?{width:-1,height:-1}:r,l=e.width,c=void 0===l?"100%":l,s=e.height,u=void 0===s?"100%":s,d=e.minWidth,f=void 0===d?0:d,p=e.minHeight,h=e.maxHeight,m=e.children,b=e.debounce,v=void 0===b?0:b,g=e.id,y=e.className,x=e.onResize,O=e.style,w=void 0===O?{}:O,j=Object(a.useRef)(null),E=Object(a.useRef)();E.current=x,Object(a.useImperativeHandle)(t,(function(){return Object.assign(j.current,{get current(){return console.warn("The usage of ref.current.current is deprecated and will no longer be supported."),j.current}})}));var S=Ku(Object(a.useState)({containerWidth:o.width,containerHeight:o.height}),2),A=S[0],k=S[1],C=Object(a.useCallback)((function(e,t){k((function(n){var r=Math.round(e),o=Math.round(t);return n.containerWidth===r&&n.containerHeight===o?n:{containerWidth:r,containerHeight:o}}))}),[]);Object(a.useEffect)((function(){var e=function(e){var t,n=e[0].contentRect,r=n.width,o=n.height;C(r,o),null===(t=E.current)||void 0===t||t.call(E,r,o)};v>0&&(e=zu()(e,v,{trailing:!0,leading:!1}));var t=new ResizeObserver(e),n=j.current.getBoundingClientRect(),r=n.width,o=n.height;return C(r,o),t.observe(j.current),function(){t.disconnect()}}),[C,v]);var T=Object(a.useMemo)((function(){var e=A.containerWidth,t=A.containerHeight;if(e<0||t<0)return null;Uu($u(c)||$u(u),"The width(%s) and height(%s) are both fixed numbers,\n       maybe you don't need to use a ResponsiveContainer.",c,u),Uu(!n||n>0,"The aspect(%s) must be greater than zero.",n);var r=$u(c)?e:c,o=$u(u)?t:u;n&&n>0&&(r?o=r/n:o&&(r=o*n),h&&o>h&&(o=h)),Uu(r>0||o>0,"The width(%s) and height(%s) of chart should be greater than 0,\n       please check the style of container, or the props width(%s) and height(%s),\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\n       height and width.",r,o,c,u,f,p,n);var l=!Array.isArray(m)&&Object(Du.isElement)(m)&&Vu(m.type).endsWith("Chart");return i.a.Children.map(m,(function(e){return Object(Du.isElement)(e)?Object(a.cloneElement)(e,Gu({width:r,height:o},l?{style:Gu({height:"100%",width:"100%",maxHeight:o,maxWidth:r},e.props.style)}:{})):e}))}),[n,m,u,h,p,f,A,c]);return i.a.createElement("div",{id:g?"".concat(g):void 0,className:Object(Dt.a)("recharts-responsive-container",y),style:Gu(Gu({},w),{},{width:c,height:u,minWidth:f,minHeight:p,maxHeight:h}),ref:j},T)}));function Qu(){xn();return a.createElement(a.Fragment,null,a.createElement(Iu,null,"Today"),a.createElement(Ju,null,a.createElement(xu,null,a.createElement(_u,null,a.createElement(Au,{component:"iframe",style:{maxWidth:830,height:480,background:"#F1F5F4",border:"none",borderRadius:"2px",boxShadow:"0 2px 10px 0 rgba(70, 76, 79, .2)"},src:"https://charts.mongodb.com/charts-project-0-abbrz/embed/charts?id=65d4ea34-193b-4a49-8e71-508c0a11a970&maxDataAge=3600&theme=light&autoRefresh=true",alt:"Global: Opensquare Frequency of Analysis by Platform"})))))}var Zu=n(87),ed=n.n(Zu),td=n(111),nd={insert:"head",singleton:!1},rd=(ed()(td.a,nd),td.a.locals,{backlinkInfo:"OpenSquare digital targeting tools provides this backlink tool that gives you\nthe ability to query a url and expose its backlinks. A backlink is a link from\nsome other website (the referrer) to that web resource (the referent). A web\nresource may be (for example) a website, web page, or web directory. Opensquare",emailLookupInfo:"OpenSquare digital targeting tools provides this lookup tool that gives you\nthe ability to query our databases for disposable email domains. This feature\nalso provides lookup capabilities for known malicious email addresses. If you\nhave information for known domains or addresses that our databases don't have,\nplease email our team at ",nslookupInfo:"OpenSquare digital targeting tools provides this lookup tool that gives you\nthe ability to query the Domain Name System to obtain the mapping between\ndomain name and IP address, or other DNS records.",whoisInfo:"OpenSquare digital targeting tools provides this lookup tool that gives you\nthe ability to lookup the current registration data for domain names and\ninternet number resources. This tool uses the WHOIS (port 43) protocol.",youtubeInfo_1:"Opensquare Service Platforms provide a way for you to search popular social\nmedia sites and index large quantities of its public data. OpenSquare will\nnever expose private and protected data of any user or target.",youtubeInfo_2:"Opensquare's YouTube Platform allows agents to search within our databases for\nvideos, providing detailed information about the channel and it's content.\nSearched video results provide a full detailed log and transcripts. You have\nthe option to search videos based on terms, and the most relevant video's will\nbe provided. This is powered by a strong vector database that creates text\nembeddings on each video's transcript using OpenAI's Text Embedding Ada-002 Large\nLanguage Model. You can search YouTube video's providing a video identification\ncode. If video's aren't present in our database, they'll be added for the community.\nFeel free to provide any insights or feedback to our team at ",greetings:["How can I assist with your search today?","Back already?","Welcome back!","What can I do for you?","Miss me already, what's up?","Yo!"]});var od=function(e){switch(e){case 0:return"January";case 1:return"February";case 2:return"March";case 3:return"April";case 4:return"May";case 5:return"June";case 6:return"July";case 7:return"August";case 8:return"September";case 9:return"October";case 10:return"November";default:return"December"}},ad={getPublishDate:function(e){var t=new Date(Date.parse(e)),n=t.getDate(),r=od(t.getMonth()),o=t.getFullYear();return"".concat(n," ").concat(r,", ").concat(o)},getCurrentDate:function(){var e=new Date,t=e.getDate(),n=od(e.getMonth()),r=e.getFullYear();return"as of ".concat(t," ").concat(n,", ").concat(r)},getMonthString:od,getCurrentTime:function(){return(new Date).toTimeString().split(" ")[0]},getRandomInt:function(e){return Math.floor(Math.random()*e)},randomGreeting:function(){var e,t,n=rd.greetings.length;return rd.greetings[Math.floor((e=1,t=n+1,Math.random()*(t-e)+e))-1]}};function id(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||ld(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ld(e,t){if(e){if("string"==typeof e)return cd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cd(e,t):void 0}}function cd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var sd=["/images/youtube.png","/images/vkontakte.png","/images/twitter.png"];function ud(e){e.preventDefault()}function dd(e){var t;if(null!=e){var n,r=0,o=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=ld(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw a}}}}(new Map([["youtube",e.youtube],["twitter",e.twitter],["vkontakte",e.vkontakte]]));try{for(o.s();!(n=o.n()).done;){var a=id(n.value,2),i=a[0],l=a[1];l>r&&(r=l,t=i)}}catch(e){o.e(e)}finally{o.f()}if(void 0!==t)return function(e){var t;return sd.forEach((function(n){n.includes(e)&&(t=n)})),t}(t)}return sd[0]}function fd(e){var t=e.userDetails;return a.createElement(a.Fragment,null,a.createElement(Iu,null,"Your Favorite Platform"),a.createElement("img",{className:"platformImage",src:dd(t.platformAnalysisTracker),alt:"platform-image"}),a.createElement(Mr,{color:"text.secondary",sx:{flex:1}},ad.getCurrentDate()),a.createElement("div",null,a.createElement(ia,{color:"primary",href:"#",onClick:ud},"View past results")))}function pd(e){e.preventDefault()}function hd(){return a.createElement(a.Fragment,null,a.createElement(Iu,null,"Recent Platform Runs"),a.createElement(Mr,{component:"p",variant:"h4"},"--------"),a.createElement(Mr,{color:"text.secondary",sx:{flex:1}},"as of ",(e=new Date,t=e.getDate(),n=function(e){switch(e){case 0:return"January";case 1:return"February";case 2:return"March";case 3:return"April";case 4:return"May";case 5:return"June";case 6:return"July";case 7:return"August";case 8:return"September";case 9:return"October";case 10:return"November";default:return"December"}}(e.getMonth()),r=e.getFullYear(),"as of ".concat(t," ").concat(n,", ").concat(r))),a.createElement("div",null,a.createElement(ia,{color:"primary",href:"#",onClick:pd},"View More")));var e,t,n,r}var md=n(143),bd=n.n(md),vd=n(33),gd=n.n(vd),yd=n(138),xd=n.n(yd);function Od(e){return Object(Cn.a)("MuiCardActions",e)}Object(kn.a)("MuiCardActions",["root","spacing"]);const wd=["disableSpacing","className"],jd=Object(pt.a)("div",{name:"MuiCardActions",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disableSpacing&&t.spacing]}})(({ownerState:e})=>Object(mt.a)({display:"flex",alignItems:"center",padding:8},!e.disableSpacing&&{"& > :not(style) ~ :not(style)":{marginLeft:8}}));var Ed=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiCardActions"}),{disableSpacing:r=!1,className:o}=n,a=Object(bt.a)(n,wd),i=Object(mt.a)({},n,{disableSpacing:r}),l=(e=>{const{classes:t,disableSpacing:n}=e,r={root:["root",!n&&"spacing"]};return Object(Ft.a)(r,Od,t)})(i);return Object(xt.jsx)(jd,Object(mt.a)({className:Object(Dt.a)(l.root,o),ownerState:i,ref:t},a))}));function Sd(e){return Object(Cn.a)("MuiCardContent",e)}Object(kn.a)("MuiCardContent",["root"]);const Ad=["className","component"],kd=Object(pt.a)("div",{name:"MuiCardContent",slot:"Root",overridesResolver:(e,t)=>t.root})(()=>({padding:16,"&:last-child":{paddingBottom:24}}));var Cd=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiCardContent"}),{className:r,component:o="div"}=n,a=Object(bt.a)(n,Ad),i=Object(mt.a)({},n,{component:o}),l=(e=>{const{classes:t}=e;return Object(Ft.a)({root:["root"]},Sd,t)})(i);return Object(xt.jsx)(kd,Object(mt.a)({as:o,className:Object(Dt.a)(l.root,r),ownerState:i,ref:t},a))}));function Td(){return a.createElement(xu,{sx:{width:"60%",marginTop:"2%",marginLeft:"auto",marginRight:"auto"}},a.createElement(Au,{sx:{height:140},image:"/images/whois.png",title:"whois"}),a.createElement(Cd,null,a.createElement(Mr,{gutterBottom:!0,variant:"h5",component:"div"},"Whois"),a.createElement(Mr,{variant:"body2",color:"text.secondary"},rd.whoisInfo)),a.createElement(Ed,null,a.createElement(Ys,{target:"_blank",href:"https://lookup.icann.org/en",size:"small"},"Learn More")))}function Pd(e){return(Pd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Rd(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */Rd=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var a=t&&t.prototype instanceof b?t:b,i=Object.create(a.prototype),l=new T(r||[]);return o(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",p="executing",h="completed",m={};function b(){}function v(){}function g(){}var y={};s(y,i,(function(){return this}));var x=Object.getPrototypeOf,O=x&&x(x(P([])));O&&O!==n&&r.call(O,i)&&(y=O);var w=g.prototype=b.prototype=Object.create(y);function j(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var c=d(e[o],e,a);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==Pd(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function S(t,n,r){var o=f;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===h){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=A(l,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var s=d(t,n,r);if("normal"===s.type){if(o=r.done?h:"suspendedYield",s.arg===m)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=h,r.method="throw",r.arg=s.arg)}}}function A(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,A(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var a=d(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,m;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,m):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Pd(t)+" is not iterable")}return v.prototype=g,o(w,"constructor",{value:g,configurable:!0}),o(g,"constructor",{value:v,configurable:!0}),v.displayName=s(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,s(e,c,"GeneratorFunction")),e.prototype=Object.create(w),e},t.awrap=function(e){return{__await:e}},j(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new E(u(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},j(w),s(w,c,"Generator"),s(w,i,(function(){return this})),s(w,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,m):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),m}},t}function _d(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Ld(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){_d(a,r,o,i,l,"next",e)}function l(e){_d(a,r,o,i,l,"throw",e)}i(void 0)}))}}function Nd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Md(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Nd(Object(n),!0).forEach((function(t){Id(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Nd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Id(e,t,n){var r;return r=function(e,t){if("object"!=Pd(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=Pd(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(t,"string"),(t="symbol"==Pd(r)?r:String(r))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Bd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return zd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return zd(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Dd(){var e,t,n=Bd(a.useState({}),2),r=n[0],o=n[1],i=Object(pt.a)(Yn)((function(e){var t=e.theme;return Md(Md({backgroundColor:"dark"===t.palette.mode?"#1A2027":"#d8ecf3"},t.typography.body2),{},{padding:t.spacing(5),color:t.palette.text.secondary,textAlign:"left",maxWidth:"100%",palette:{background:{tertiary:"#d8ecf3"},text:{primary:"#fff"}}})}));function l(){return{timeout:6e3,signal:AbortSignal.timeout(6e3)}}function c(e){return s.apply(this,arguments)}function s(){return(s=Ld(Rd().mark((function e(t){return Rd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ft.get("/opensquare/api/footprints/whois?domain=".concat(t),l()).then((function(e){o(e.data)})).catch((function(e){console.log(e)}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function u(){return(u=Ld(Rd().mark((function e(t){var n,r;return Rd().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),n=document.getElementById("whoisSearch"),!(null!==(r=n.value.trim())&&r.length>0)){e.next=7;break}return n.value="",e.next=7,c(r);case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return Object(a.useEffect)((function(){console.log(r)}),[r]),a.createElement(a.Fragment,null,a.createElement(Qo,{item:!0,xs:12,justifyContent:"center",alignItems:"center"},a.createElement(Td,null),a.createElement(Yn,{component:"form",sx:{p:"2px 4px",display:"flex",width:"95%",marginLeft:"2.5%",marginTop:"5%",backgroundColor:"tertiary"}},a.createElement(Tl,{fullWidth:!0,sx:{ml:1,flex:1},placeholder:"Enter Domain address",id:"whoisSearch",inputProps:{"aria-label":"whois lookup search"}}),a.createElement(jo,{onClick:function(e){return function(e){return u.apply(this,arguments)}(e)},type:"submit",sx:{p:"10px"},"aria-label":"search"},a.createElement(gd.a,null)),a.createElement($r,{sx:{height:28,m:.5},orientation:"vertical"}),a.createElement(jo,{onClick:function(e){e.preventDefault(),window.open("https://google.com","_blank")},color:"primary",sx:{p:"10px"},"aria-label":"directions"},a.createElement(xd.a,null))),a.createElement(mr,{sx:{flexGrow:1,overflow:"hidden",px:3}},void 0!==r.domainName&&a.createElement(i,{sx:{my:1,mx:"auto",p:2}},a.createElement(Ia,{spacing:2,direction:"row"},a.createElement(Mr,{sx:{font:"primary",fontSize:"20px"},noWrap:!0},a.createElement("b",null,"Domain Information"))),a.createElement(Ia,{spacing:1,direction:"column",marginTop:"3%"},a.createElement(Mr,{noWrap:!0},a.createElement("b",null,"Name: ")," ",r.domainName),a.createElement(Mr,{noWrap:!0},a.createElement("b",null,"Registry Domain ID: ")," ",r.registryDomainId),a.createElement(Mr,{noWrap:!0},a.createElement("b",null,"Domain Status: "),a.createElement("a",{target:"_blank",href:(e=r.domainStatus,t=e.split(" ")[1],t.substring(1,t.length-1))},function(e){return e.split(" ")[0].trim()}(r.domainStatus))),a.createElement(Mr,{noWrap:!0},a.createElement("b",null,"NameServers: ")),a.createElement(Mr,{noWrap:!0},r.nameServer),a.createElement(Mr,{noWrap:!0},a.createElement("b",null,"Created: "),r.creationDate),a.createElement(Mr,{noWrap:!0},a.createElement("b",null,"Updated: "),r.updatedDate))),void 0!==r.adminCity&&a.createElement(i,{sx:{my:1,mx:"auto",p:2}},a.createElement(Ia,{spacing:2,direction:"row"},a.createElement(Mr,{sx:{font:"primary",fontSize:"20px"},noWrap:!0},a.createElement("b",null,"Contact Information"))),a.createElement(Ia,{spacing:1,direction:"column",marginTop:"3%"},a.createElement(Mr,null,a.createElement("b",null,"City: ")," ",r.adminCity),a.createElement(Mr,null,a.createElement("b",null,"Country: ")," ",r.adminCountry),a.createElement(Mr,null,a.createElement("b",null,"Email: ")," ",r.adminEmail),a.createElement(Mr,null,a.createElement("b",null,"Fax: ")," ",r.adminFax),a.createElement(Mr,null,a.createElement("b",null,"Name: "),r.adminName),a.createElement(Mr,null,a.createElement("b",null,"Organization: "),r.adminOrganization),a.createElement(Mr,null,a.createElement("b",null,"Phone: "),r.adminPhone),a.createElement(Mr,null,a.createElement("b",null,"Postal Code: ")," ",r.adminPostalCode),a.createElement(Mr,null,a.createElement("b",null,"Street: ")," ",r.adminStreet))),void 0!==r.registrar&&a.createElement(i,{sx:{my:1,mx:"auto",p:2}},a.createElement(Ia,{spacing:2,direction:"row"},a.createElement(Mr,{sx:{font:"primary",fontSize:"20px"},noWrap:!0},a.createElement("b",null,"Registrar Information"))),a.createElement(Ia,{spacing:1,direction:"column",marginTop:"3%"},a.createElement(Mr,null,a.createElement("b",null,"Registrar Name: ")," ",r.registrar),a.createElement(Mr,null,a.createElement("b",null,"Abuse contact email: ")," ",r.registrarAbuseContactEmail),a.createElement(Mr,null,a.createElement("b",null,"Abuse contact phone: "),r.registrarAbuseContactPhone),a.createElement(Mr,null,a.createElement("b",null,"IANA ID: "),r.registrarIanaId),a.createElement(Mr,null,a.createElement("b",null,"Registration expiration date: "),r.registrarRegistrationExpirationDate),a.createElement(Mr,null,a.createElement("b",null,"Registrar URL: ")," ",a.createElement("a",{target:"_blank",href:r.registrarUrl},r.registrarUrl)),a.createElement(Mr,null,a.createElement("b",null,"Registrar Whois Server: ")," ",r.registrarWhoisServer))),void 0!==r.dnssec&&a.createElement(i,{sx:{my:1,mx:"auto",p:2}},a.createElement(Ia,{spacing:2,direction:"row"},a.createElement(Mr,{sx:{font:"primary",fontSize:"20px"},noWrap:!0},a.createElement("b",null,"DNSSEC Information"))),a.createElement(Ia,{spacing:1,direction:"column",marginTop:"3%"},a.createElement(Mr,null,a.createElement("b",null,"Delegation Signed: ")," ",r.dnssec))))))}function Fd(){return a.createElement(xu,{sx:{width:"60%",marginTop:"2%",marginLeft:"auto",marginRight:"auto"}},a.createElement(Au,{sx:{height:140},image:"/images/nslookup.png",title:"nslookup"}),a.createElement(Cd,null,a.createElement(Mr,{gutterBottom:!0,variant:"h5",component:"div"},"NSLookup"),a.createElement(Mr,{variant:"body2",color:"text.secondary"},rd.nslookupInfo)),a.createElement(Ed,null,a.createElement(Ys,{target:"_blank",href:"https://docs.oracle.com/cd/E88353_01/html/E37839/nslookup-1.html",size:"small"},"Learn More")))}function Wd(e){return(Wd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $d(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */$d=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var a=t&&t.prototype instanceof b?t:b,i=Object.create(a.prototype),l=new T(r||[]);return o(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",p="executing",h="completed",m={};function b(){}function v(){}function g(){}var y={};s(y,i,(function(){return this}));var x=Object.getPrototypeOf,O=x&&x(x(P([])));O&&O!==n&&r.call(O,i)&&(y=O);var w=g.prototype=b.prototype=Object.create(y);function j(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var c=d(e[o],e,a);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==Wd(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function S(t,n,r){var o=f;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===h){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=A(l,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var s=d(t,n,r);if("normal"===s.type){if(o=r.done?h:"suspendedYield",s.arg===m)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=h,r.method="throw",r.arg=s.arg)}}}function A(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,A(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var a=d(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,m;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,m):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Wd(t)+" is not iterable")}return v.prototype=g,o(w,"constructor",{value:g,configurable:!0}),o(g,"constructor",{value:v,configurable:!0}),v.displayName=s(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,s(e,c,"GeneratorFunction")),e.prototype=Object.create(w),e},t.awrap=function(e){return{__await:e}},j(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new E(u(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},j(w),s(w,c,"Generator"),s(w,i,(function(){return this})),s(w,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,m):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),m}},t}function Ud(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Vd(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Ud(a,r,o,i,l,"next",e)}function l(e){Ud(a,r,o,i,l,"throw",e)}i(void 0)}))}}function Hd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function qd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Hd(Object(n),!0).forEach((function(t){Gd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Hd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Gd(e,t,n){var r;return r=function(e,t){if("object"!=Wd(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=Wd(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(t,"string"),(t="symbol"==Wd(r)?r:String(r))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Yd(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Kd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Kd(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Kd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Xd(){var e=Yd(a.useState([]),2),t=e[0],n=e[1],r=Object(pt.a)(Yn)((function(e){var t=e.theme;return qd(qd({backgroundColor:"dark"===t.palette.mode?"#1A2027":"#d8ecf3"},t.typography.body2),{},{padding:t.spacing(5),color:t.palette.text.secondary,textAlign:"left",maxWidth:"100%",palette:{background:{tertiary:"#d8ecf3"},text:{primary:"#fff"}}})}));function o(){return{timeout:3e3,signal:AbortSignal.timeout(6e3)}}function i(e){return l.apply(this,arguments)}function l(){return(l=Vd($d().mark((function e(t){return $d().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ft.get("/opensquare/api/footprints/nslookup?domain=".concat(t),o()).then((function(e){n(e.data)})).catch((function(e){console.log(e)}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function c(){return(c=Vd($d().mark((function e(t){var n,r;return $d().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),n=document.getElementById("nslookupSearch"),!(null!==(r=n.value.trim())&&r.length>0)){e.next=7;break}return n.value="",e.next=7,i(r);case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return Object(a.useEffect)((function(){console.log(t)}),[t]),a.createElement(a.Fragment,null,a.createElement(Qo,{item:!0,xs:12,justifyContent:"center",alignItems:"center"},a.createElement(Fd,null),a.createElement(Yn,{component:"form",sx:{p:"2px 4px",display:"flex",width:"95%",marginLeft:"2.5%",marginTop:"5%",backgroundColor:"tertiary"}},a.createElement(Tl,{fullWidth:!0,sx:{ml:1,flex:1},placeholder:"Enter Domain",id:"nslookupSearch",inputProps:{"aria-label":"nslookup lookup search"}}),a.createElement(jo,{onClick:function(e){return function(e){return c.apply(this,arguments)}(e)},type:"submit",sx:{p:"10px"},"aria-label":"search"},a.createElement(gd.a,null)),a.createElement($r,{sx:{height:28,m:.5},orientation:"vertical"})),void 0!==t.nsLookupFootPrintList&&a.createElement(mr,{sx:{flexGrow:1,overflow:"hidden",px:3}},t.nsLookupFootPrintList.map((function(e){return a.createElement(r,{sx:{my:1,mx:"auto",p:2}},a.createElement(Ia,{spacing:1,direction:"column",marginTop:"3%"},a.createElement(Mr,null,a.createElement("b",null,"Name: "),e.name),a.createElement(Mr,null,a.createElement("b",null,"Address: "),e.address)))})))))}function Jd(){return a.createElement(xu,{sx:{width:"60%",marginTop:"2%",marginLeft:"auto",marginRight:"auto"}},a.createElement(Au,{sx:{height:140},image:"/images/backlink-chain.png",title:"backlinks"}),a.createElement(Cd,null,a.createElement(Mr,{gutterBottom:!0,variant:"h5",component:"div"},"Backlink Chain"),a.createElement(Mr,{variant:"body2",color:"text.secondary"},rd.backlinkInfo,a.createElement("a",{target:"_blank",href:"https://support.google.com/webmasters/answer/9049606?hl=en"},"Google's")," powerful indexing capabilities to provide this service.",a.createElement("br",null),a.createElement("br",null),a.createElement("b",null,"Tips for Inquiry:"),a.createElement("br",null),a.createElement("b",null,"1."),a.createElement("i",null,"What sites are being back-linked from disposable email domains?"),a.createElement("br",null),a.createElement("b",null,"2."),a.createElement("i",null,"What sites are being back-linked from known malicious resources that you should be aware of?"),a.createElement("br",null),a.createElement("b",null,"3."),a.createElement("i",null,"How do backlink results effect the credibility of certain sites?"))),a.createElement(Ed,null,a.createElement(Ys,{target:"_blank",href:"https://en.wikipedia.org/wiki/Backlink",size:"small"},"Learn More")))}function Qd(e){var t=e.backlink,n=void 0!==e.backlink.pagemap&&void 0!==e.backlink.pagemap.metatags?e.backlink.pagemap.metatags[0]:void 0,r=t.snippet,o=t.title,i=t.formattedUrl,l=void 0!==n?n["og:description"]:void 0,c=void 0!==n?n["og:title"]:void 0;return a.createElement(xu,{sx:{height:"80%",width:"60%",marginTop:"2%",marginLeft:"auto",marginRight:"auto"}},a.createElement(Au,{sx:{width:"60%",height:200,marginLeft:"20%"},image:function(){if(void 0!==t.pageMap.cse_image){var e=t.pageMap.cse_image;if(e.length>0){var n=e[0].src;if(console.log(n),!n.includes("x-raw-image"))return n}}return"/images/default-image-thumbnail.png"}(),title:void 0!==c?c:o}),a.createElement(Cd,null,a.createElement(Mr,{gutterBottom:!0,variant:"h5",component:"div"},void 0!==c?c:o),a.createElement(Mr,{variant:"body2",color:"text.secondary"},void 0!==l?l:r)),a.createElement(Ed,null,a.createElement(Ys,{target:"_blank",href:i,size:"small"},"Navigate")))}function Zd(e){return(Zd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ef(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ef=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var a=t&&t.prototype instanceof b?t:b,i=Object.create(a.prototype),l=new T(r||[]);return o(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",p="executing",h="completed",m={};function b(){}function v(){}function g(){}var y={};s(y,i,(function(){return this}));var x=Object.getPrototypeOf,O=x&&x(x(P([])));O&&O!==n&&r.call(O,i)&&(y=O);var w=g.prototype=b.prototype=Object.create(y);function j(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var c=d(e[o],e,a);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==Zd(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function S(t,n,r){var o=f;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===h){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=A(l,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var s=d(t,n,r);if("normal"===s.type){if(o=r.done?h:"suspendedYield",s.arg===m)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=h,r.method="throw",r.arg=s.arg)}}}function A(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,A(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var a=d(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,m;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,m):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Zd(t)+" is not iterable")}return v.prototype=g,o(w,"constructor",{value:g,configurable:!0}),o(g,"constructor",{value:v,configurable:!0}),v.displayName=s(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,s(e,c,"GeneratorFunction")),e.prototype=Object.create(w),e},t.awrap=function(e){return{__await:e}},j(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new E(u(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},j(w),s(w,c,"Generator"),s(w,i,(function(){return this})),s(w,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,m):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),m}},t}function tf(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function nf(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){tf(a,r,o,i,l,"next",e)}function l(e){tf(a,r,o,i,l,"throw",e)}i(void 0)}))}}function rf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function of(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?rf(Object(n),!0).forEach((function(t){af(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):rf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function af(e,t,n){var r;return r=function(e,t){if("object"!=Zd(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=Zd(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(t,"string"),(t="symbol"==Zd(r)?r:String(r))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function lf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return cf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return cf(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function sf(){var e=lf(a.useState([]),2),t=e[0],n=e[1];Object(pt.a)(Yn)((function(e){var t=e.theme;return of(of({backgroundColor:"dark"===t.palette.mode?"#1A2027":"#d8ecf3"},t.typography.body2),{},{padding:t.spacing(5),color:t.palette.text.secondary,textAlign:"left",maxWidth:"100%",palette:{background:{tertiary:"#d8ecf3"},text:{primary:"#fff"}}})}));function r(){return{timeout:3e3,signal:AbortSignal.timeout(6e3)}}function o(e){return i.apply(this,arguments)}function i(){return(i=nf(ef().mark((function e(t){return ef().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ft.get("/opensquare/api/footprints/backlinks?url=".concat(t),r()).then((function(e){n(e.data)})).catch((function(e){console.log(e)}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function l(){return(l=nf(ef().mark((function e(t){var n,r;return ef().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),n=document.getElementById("backlinksSearch"),!(null!==(r=n.value.trim())&&r.length>0)){e.next=7;break}return n.value="",e.next=7,o(r);case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return Object(a.useEffect)((function(){console.log(t)}),[t]),a.createElement(a.Fragment,null,a.createElement(Qo,{item:!0,xs:12,justifyContent:"center",alignItems:"center"},a.createElement(Jd,null),a.createElement(Yn,{component:"form",sx:{p:"2px 4px",display:"flex",width:"95%",marginLeft:"2.5%",marginTop:"5%",backgroundColor:"tertiary"}},a.createElement(Tl,{fullWidth:!0,sx:{ml:1,flex:1},placeholder:"Enter Domain",id:"backlinksSearch",inputProps:{"aria-label":"backlink search"}}),a.createElement(jo,{onClick:function(e){return function(e){return l.apply(this,arguments)}(e)},type:"submit",sx:{p:"10px"},"aria-label":"search"},a.createElement(gd.a,null)),a.createElement($r,{sx:{height:28,m:.5},orientation:"vertical"})),t.length>0&&a.createElement(mr,{sx:{flexGrow:1,overflow:"hidden",px:3}},t.map((function(e){return a.createElement(Qd,{backlink:e})})))))}function uf(){return a.createElement(xu,{sx:{width:"60%",marginTop:"2%",marginLeft:"auto",marginRight:"auto"}},a.createElement(Au,{sx:{height:140},image:"/images/youtube.png",title:"YouTube Platform"}),a.createElement(Cd,null,a.createElement(Mr,{gutterBottom:!0,variant:"h5",component:"div"},"OpenSquare YouTube Platform"),a.createElement(Mr,{variant:"body2",color:"text.secondary"},rd.youtubeInfo_1,a.createElement("br",null),a.createElement("br",null),rd.youtubeInfo_2,a.createElement("b",null,"opensentop@gmail.com"),".")),a.createElement(Ed,null,a.createElement(Ys,{target:"_blank",href:"https://www.youtube.com/",size:"small"},"Documentation")))}function df(e){return Object(Cn.a)("MuiLinearProgress",e)}var ff=Object(kn.a)("MuiLinearProgress",["root","colorPrimary","colorSecondary","determinate","indeterminate","buffer","query","dashed","dashedColorPrimary","dashedColorSecondary","bar","barColorPrimary","barColorSecondary","bar1Indeterminate","bar1Determinate","bar1Buffer","bar2Indeterminate","bar2Buffer"]);const pf=["className","color","value","valueBuffer","variant"];let hf,mf,bf,vf,gf,yf,xf=e=>e;const Of=Object(Jr.c)(hf||(hf=xf`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`)),wf=Object(Jr.c)(mf||(mf=xf`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`)),jf=Object(Jr.c)(bf||(bf=xf`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`)),Ef=(e,t)=>"inherit"===t?"currentColor":e.vars?e.vars.palette.LinearProgress[t+"Bg"]:"light"===e.palette.mode?Object(Un.d)(e.palette[t].main,.62):Object(Un.b)(e.palette[t].main,.5),Sf=Object(pt.a)("span",{name:"MuiLinearProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t["color"+Object(Kn.a)(n.color)],t[n.variant]]}})(({ownerState:e,theme:t})=>Object(mt.a)({position:"relative",overflow:"hidden",display:"block",height:4,zIndex:0,"@media print":{colorAdjust:"exact"},backgroundColor:Ef(t,e.color)},"inherit"===e.color&&"buffer"!==e.variant&&{backgroundColor:"none","&::before":{content:'""',position:"absolute",left:0,top:0,right:0,bottom:0,backgroundColor:"currentColor",opacity:.3}},"buffer"===e.variant&&{backgroundColor:"transparent"},"query"===e.variant&&{transform:"rotate(180deg)"})),Af=Object(pt.a)("span",{name:"MuiLinearProgress",slot:"Dashed",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.dashed,t["dashedColor"+Object(Kn.a)(n.color)]]}})(({ownerState:e,theme:t})=>{const n=Ef(t,e.color);return Object(mt.a)({position:"absolute",marginTop:0,height:"100%",width:"100%"},"inherit"===e.color&&{opacity:.3},{backgroundImage:`radial-gradient(${n} 0%, ${n} 16%, transparent 42%)`,backgroundSize:"10px 10px",backgroundPosition:"0 -23px"})},Object(Jr.b)(vf||(vf=xf`
    animation: ${0} 3s infinite linear;
  `),jf)),kf=Object(pt.a)("span",{name:"MuiLinearProgress",slot:"Bar1",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.bar,t["barColor"+Object(Kn.a)(n.color)],("indeterminate"===n.variant||"query"===n.variant)&&t.bar1Indeterminate,"determinate"===n.variant&&t.bar1Determinate,"buffer"===n.variant&&t.bar1Buffer]}})(({ownerState:e,theme:t})=>Object(mt.a)({width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left",backgroundColor:"inherit"===e.color?"currentColor":(t.vars||t).palette[e.color].main},"determinate"===e.variant&&{transition:"transform .4s linear"},"buffer"===e.variant&&{zIndex:1,transition:"transform .4s linear"}),({ownerState:e})=>("indeterminate"===e.variant||"query"===e.variant)&&Object(Jr.b)(gf||(gf=xf`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    `),Of)),Cf=Object(pt.a)("span",{name:"MuiLinearProgress",slot:"Bar2",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.bar,t["barColor"+Object(Kn.a)(n.color)],("indeterminate"===n.variant||"query"===n.variant)&&t.bar2Indeterminate,"buffer"===n.variant&&t.bar2Buffer]}})(({ownerState:e,theme:t})=>Object(mt.a)({width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left"},"buffer"!==e.variant&&{backgroundColor:"inherit"===e.color?"currentColor":(t.vars||t).palette[e.color].main},"inherit"===e.color&&{opacity:.3},"buffer"===e.variant&&{backgroundColor:Ef(t,e.color),transition:"transform .4s linear"}),({ownerState:e})=>("indeterminate"===e.variant||"query"===e.variant)&&Object(Jr.b)(yf||(yf=xf`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
    `),wf));var Tf=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiLinearProgress"}),{className:r,color:o="primary",value:a,valueBuffer:i,variant:l="indeterminate"}=n,c=Object(bt.a)(n,pf),s=Object(mt.a)({},n,{color:o,variant:l}),u=(e=>{const{classes:t,variant:n,color:r}=e,o={root:["root","color"+Object(Kn.a)(r),n],dashed:["dashed","dashedColor"+Object(Kn.a)(r)],bar1:["bar","barColor"+Object(Kn.a)(r),("indeterminate"===n||"query"===n)&&"bar1Indeterminate","determinate"===n&&"bar1Determinate","buffer"===n&&"bar1Buffer"],bar2:["bar","buffer"!==n&&"barColor"+Object(Kn.a)(r),"buffer"===n&&"color"+Object(Kn.a)(r),("indeterminate"===n||"query"===n)&&"bar2Indeterminate","buffer"===n&&"bar2Buffer"]};return Object(Ft.a)(o,df,t)})(s),d=xn(),f={},p={bar1:{},bar2:{}};if("determinate"===l||"buffer"===l)if(void 0!==a){f["aria-valuenow"]=Math.round(a),f["aria-valuemin"]=0,f["aria-valuemax"]=100;let e=a-100;"rtl"===d.direction&&(e=-e),p.bar1.transform=`translateX(${e}%)`}else 0;if("buffer"===l)if(void 0!==i){let e=(i||0)-100;"rtl"===d.direction&&(e=-e),p.bar2.transform=`translateX(${e}%)`}else 0;return Object(xt.jsxs)(Sf,Object(mt.a)({className:Object(Dt.a)(u.root,r),ownerState:s,role:"progressbar"},f,{ref:t},c,{children:["buffer"===l?Object(xt.jsx)(Af,{className:u.dashed,ownerState:s}):null,Object(xt.jsx)(kf,{className:u.bar1,ownerState:s,style:p.bar1}),"determinate"===l?null:Object(xt.jsx)(Cf,{className:u.bar2,ownerState:s,style:p.bar2})]}))}));function Pf(e){return Object(Cn.a)("MuiCardHeader",e)}var Rf=Object(kn.a)("MuiCardHeader",["root","avatar","action","content","title","subheader"]);const _f=["action","avatar","className","component","disableTypography","subheader","subheaderTypographyProps","title","titleTypographyProps"],Lf=Object(pt.a)("div",{name:"MuiCardHeader",slot:"Root",overridesResolver:(e,t)=>Object(mt.a)({["& ."+Rf.title]:t.title,["& ."+Rf.subheader]:t.subheader},t.root)})({display:"flex",alignItems:"center",padding:16}),Nf=Object(pt.a)("div",{name:"MuiCardHeader",slot:"Avatar",overridesResolver:(e,t)=>t.avatar})({display:"flex",flex:"0 0 auto",marginRight:16}),Mf=Object(pt.a)("div",{name:"MuiCardHeader",slot:"Action",overridesResolver:(e,t)=>t.action})({flex:"0 0 auto",alignSelf:"flex-start",marginTop:-4,marginRight:-8,marginBottom:-4}),If=Object(pt.a)("div",{name:"MuiCardHeader",slot:"Content",overridesResolver:(e,t)=>t.content})({flex:"1 1 auto"});var Bf=a.forwardRef((function(e,t){const n=Object(Pt.a)({props:e,name:"MuiCardHeader"}),{action:r,avatar:o,className:a,component:i="div",disableTypography:l=!1,subheader:c,subheaderTypographyProps:s,title:u,titleTypographyProps:d}=n,f=Object(bt.a)(n,_f),p=Object(mt.a)({},n,{component:i,disableTypography:l}),h=(e=>{const{classes:t}=e;return Object(Ft.a)({root:["root"],avatar:["avatar"],action:["action"],content:["content"],title:["title"],subheader:["subheader"]},Pf,t)})(p);let m=u;null==m||m.type===Mr||l||(m=Object(xt.jsx)(Mr,Object(mt.a)({variant:o?"body2":"h5",className:h.title,component:"span",display:"block"},d,{children:m})));let b=c;return null==b||b.type===Mr||l||(b=Object(xt.jsx)(Mr,Object(mt.a)({variant:o?"body2":"body1",className:h.subheader,color:"text.secondary",component:"span",display:"block"},s,{children:b}))),Object(xt.jsxs)(Lf,Object(mt.a)({className:Object(Dt.a)(h.root,a),as:i,ref:t,ownerState:p},f,{children:[o&&Object(xt.jsx)(Nf,{className:h.avatar,ownerState:p,children:o}),Object(xt.jsxs)(If,{className:h.content,ownerState:p,children:[m,b]}),r&&Object(xt.jsx)(Mf,{className:h.action,ownerState:p,children:r})]}))})),zf=n(50),Df=n(139),Ff=n.n(Df),Wf=n(140),$f=n.n(Wf),Uf=["expand"];function Vf(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Hf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Hf(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Hf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function qf(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Gf(e){var t=Object(pt.a)((function(e){e.expand;var t=qf(e,Uf);return a.createElement(jo,t)}))((function(e){var t=e.theme;return{transform:e.expand?"rotate(180deg)":"rotate(0deg)",marginLeft:"auto",transition:t.transitions.create("transform",{duration:t.transitions.duration.shortest})}})),n=Vf(a.useState(!1),2),r=n[0],o=n[1],i=e.video,l=i.author,c=i.description,s=i.likeCount,u=i.publishDate,d=i.thumbnail,f=i.title,p=i.transcript,h=i.videoUrl,m=i.viewCount,b=ad.getPublishDate(u);return a.createElement(xu,{sx:{height:"80%",width:"60%",marginTop:"2%",marginLeft:"auto",marginRight:"auto",font:"Proxima Nova"}},a.createElement(Bf,{sx:{font:"Proxima Nova"},avatar:a.createElement(xa,{sx:{bgcolor:zf.a[500],width:76,height:76,fontSize:"10px"},"aria-label":"recipe"},l),title:f,subheader:b}),a.createElement(Au,{sx:{width:"30%",height:100,marginLeft:"35%"},component:"img",alt:"youtube image thumbnail",image:d}),a.createElement(Cd,null,a.createElement(Mr,{variant:"body2",color:"text.secondary",fontFamily:"Proxima Nova",fontSize:".95rem"},c)),a.createElement(Ed,{disableSpacing:!0},a.createElement(Ys,{target:"_blank",href:h,size:"small"},"Navigate"),a.createElement(jo,{sx:{marginLeft:"3%",font:"Proxima Nova",fontSize:".75rem",fontWeight:"400"},"aria-label":"like count"},a.createElement(Ff.a,null),s),a.createElement(jo,{sx:{marginLeft:"3%",font:"Proxima Nova",fontSize:".75rem",fontWeight:"400"},"aria-label":"view count"},a.createElement($f.a,null),m),a.createElement(t,{sx:{marginLeft:"55%"},expand:r,onClick:function(){o(!r)},"aria-expanded":r,"aria-label":"show more"},a.createElement(wi.a,null))),a.createElement(Ed,null),a.createElement(fi,{in:r,timeout:"auto",unmountOnExit:!0},a.createElement(Cd,null,a.createElement(Mr,{paragraph:!0,fontFamily:"Proxima Nova",fontSize:".95rem",fontWeight:"800"},"Video Transcript:"),a.createElement(Mr,{paragraph:!0,fontFamily:"Proxima Nova",fontSize:".95rem",fontWeight:"800"},p))))}function Yf(e){return Object(Cn.a)("MuiFormControlLabel",e)}var Kf=Object(kn.a)("MuiFormControlLabel",["root","labelPlacementStart","labelPlacementTop","labelPlacementBottom","disabled","label","error","required","asterisk"]);const Xf=["checked","className","componentsProps","control","disabled","disableTypography","inputRef","label","labelPlacement","name","onChange","required","slotProps","value"],Jf=Object(pt.a)("label",{name:"MuiFormControlLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{["& ."+Kf.label]:t.label},t.root,t["labelPlacement"+Object(Kn.a)(n.labelPlacement)]]}})(({theme:e,ownerState:t})=>Object(mt.a)({display:"inline-flex",alignItems:"center",cursor:"pointer",verticalAlign:"middle",WebkitTapHighlightColor:"transparent",marginLeft:-11,marginRight:16,["&."+Kf.disabled]:{cursor:"default"}},"start"===t.labelPlacement&&{flexDirection:"row-reverse",marginLeft:16,marginRight:-11},"top"===t.labelPlacement&&{flexDirection:"column-reverse",marginLeft:16},"bottom"===t.labelPlacement&&{flexDirection:"column",marginLeft:16},{["& ."+Kf.label]:{["&."+Kf.disabled]:{color:(e.vars||e).palette.text.disabled}}})),Qf=Object(pt.a)("span",{name:"MuiFormControlLabel",slot:"Asterisk",overridesResolver:(e,t)=>t.asterisk})(({theme:e})=>({["&."+Kf.error]:{color:(e.vars||e).palette.error.main}}));var Zf=a.forwardRef((function(e,t){var n,r;const o=Object(Pt.a)({props:e,name:"MuiFormControlLabel"}),{className:i,componentsProps:l={},control:c,disabled:s,disableTypography:u,label:d,labelPlacement:f="end",required:p,slotProps:h={}}=o,m=Object(bt.a)(o,Xf),b=gl(),v=null!=(n=null!=s?s:c.props.disabled)?n:null==b?void 0:b.disabled,g=null!=p?p:c.props.required,y={disabled:v,required:g};["checked","name","onChange","value","inputRef"].forEach(e=>{void 0===c.props[e]&&void 0!==o[e]&&(y[e]=o[e])});const x=bl({props:o,muiFormControl:b,states:["error"]}),O=Object(mt.a)({},o,{disabled:v,labelPlacement:f,required:g,error:x.error}),w=(e=>{const{classes:t,disabled:n,labelPlacement:r,error:o,required:a}=e,i={root:["root",n&&"disabled","labelPlacement"+Object(Kn.a)(r),o&&"error",a&&"required"],label:["label",n&&"disabled"],asterisk:["asterisk",o&&"error"]};return Object(Ft.a)(i,Yf,t)})(O),j=null!=(r=h.typography)?r:l.typography;let E=d;return null==E||E.type===Mr||u||(E=Object(xt.jsx)(Mr,Object(mt.a)({component:"span"},j,{className:Object(Dt.a)(w.label,null==j?void 0:j.className),children:E}))),Object(xt.jsxs)(Jf,Object(mt.a)({className:Object(Dt.a)(w.root,i),ownerState:O,ref:t},m,{children:[a.cloneElement(c,y),g?Object(xt.jsxs)(Ia,{display:"block",children:[E,Object(xt.jsxs)(Qf,{ownerState:O,"aria-hidden":!0,className:w.asterisk,children:[" ","*"]})]}):E]}))}));function ep(e){return Object(Cn.a)("PrivateSwitchBase",e)}Object(kn.a)("PrivateSwitchBase",["root","checked","disabled","input","edgeStart","edgeEnd"]);const tp=["autoFocus","checked","checkedIcon","className","defaultChecked","disabled","disableFocusRipple","edge","icon","id","inputProps","inputRef","name","onBlur","onChange","onFocus","readOnly","required","tabIndex","type","value"],np=Object(pt.a)(go)(({ownerState:e})=>Object(mt.a)({padding:9,borderRadius:"50%"},"start"===e.edge&&{marginLeft:"small"===e.size?-3:-12},"end"===e.edge&&{marginRight:"small"===e.size?-3:-12})),rp=Object(pt.a)("input",{shouldForwardProp:pt.b})({cursor:"inherit",position:"absolute",opacity:0,width:"100%",height:"100%",top:0,left:0,margin:0,padding:0,zIndex:1});var op=a.forwardRef((function(e,t){const{autoFocus:n,checked:r,checkedIcon:o,className:a,defaultChecked:i,disabled:l,disableFocusRipple:c=!1,edge:s=!1,icon:u,id:d,inputProps:f,inputRef:p,name:h,onBlur:m,onChange:b,onFocus:v,readOnly:g,required:y=!1,tabIndex:x,type:O,value:w}=e,j=Object(bt.a)(e,tp),[E,S]=Object(ds.a)({controlled:r,default:Boolean(i),name:"SwitchBase",state:"checked"}),A=gl();let k=l;A&&void 0===k&&(k=A.disabled);const C="checkbox"===O||"radio"===O,T=Object(mt.a)({},e,{checked:E,disabled:k,disableFocusRipple:c,edge:s}),P=(e=>{const{classes:t,checked:n,disabled:r,edge:o}=e,a={root:["root",n&&"checked",r&&"disabled",o&&"edge"+Object(Kn.a)(o)],input:["input"]};return Object(Ft.a)(a,ep,t)})(T);return Object(xt.jsxs)(np,Object(mt.a)({component:"span",className:Object(Dt.a)(P.root,a),centerRipple:!0,focusRipple:!c,disabled:k,tabIndex:null,role:void 0,onFocus:e=>{v&&v(e),A&&A.onFocus&&A.onFocus(e)},onBlur:e=>{m&&m(e),A&&A.onBlur&&A.onBlur(e)},ownerState:T,ref:t},j,{children:[Object(xt.jsx)(rp,Object(mt.a)({autoFocus:n,checked:r,defaultChecked:i,className:P.input,disabled:k,id:C?d:void 0,name:h,onChange:e=>{if(e.nativeEvent.defaultPrevented)return;const t=e.target.checked;S(t),b&&b(e,t)},readOnly:g,ref:p,required:y,ownerState:T,tabIndex:x,type:O},"checkbox"===O&&void 0===w?{}:{value:w},f)),E?o:u]}))})),ap=Object(pa.a)(Object(xt.jsx)("path",{d:"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"}),"CheckBoxOutlineBlank"),ip=Object(pa.a)(Object(xt.jsx)("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckBox"),lp=Object(pa.a)(Object(xt.jsx)("path",{d:"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"}),"IndeterminateCheckBox");function cp(e){return Object(Cn.a)("MuiCheckbox",e)}var sp=Object(kn.a)("MuiCheckbox",["root","checked","disabled","indeterminate","colorPrimary","colorSecondary","sizeSmall","sizeMedium"]);const up=["checkedIcon","color","icon","indeterminate","indeterminateIcon","inputProps","size","className"],dp=Object(pt.a)(op,{shouldForwardProp:e=>Object(pt.b)(e)||"classes"===e,name:"MuiCheckbox",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.indeterminate&&t.indeterminate,t["size"+Object(Kn.a)(n.size)],"default"!==n.color&&t["color"+Object(Kn.a)(n.color)]]}})(({theme:e,ownerState:t})=>Object(mt.a)({color:(e.vars||e).palette.text.secondary},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${"default"===t.color?e.vars.palette.action.activeChannel:e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:Object(Un.a)("default"===t.color?e.palette.action.active:e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"default"!==t.color&&{[`&.${sp.checked}, &.${sp.indeterminate}`]:{color:(e.vars||e).palette[t.color].main},["&."+sp.disabled]:{color:(e.vars||e).palette.action.disabled}})),fp=Object(xt.jsx)(ip,{}),pp=Object(xt.jsx)(ap,{}),hp=Object(xt.jsx)(lp,{});var mp=a.forwardRef((function(e,t){var n,r;const o=Object(Pt.a)({props:e,name:"MuiCheckbox"}),{checkedIcon:i=fp,color:l="primary",icon:c=pp,indeterminate:s=!1,indeterminateIcon:u=hp,inputProps:d,size:f="medium",className:p}=o,h=Object(bt.a)(o,up),m=s?u:c,b=s?u:i,v=Object(mt.a)({},o,{color:l,indeterminate:s,size:f}),g=(e=>{const{classes:t,indeterminate:n,color:r,size:o}=e,a={root:["root",n&&"indeterminate","color"+Object(Kn.a)(r),"size"+Object(Kn.a)(o)]},i=Object(Ft.a)(a,cp,t);return Object(mt.a)({},t,i)})(v);return Object(xt.jsx)(dp,Object(mt.a)({type:"checkbox",inputProps:Object(mt.a)({"data-indeterminate":s},d),icon:a.cloneElement(m,{fontSize:null!=(n=m.props.fontSize)?n:f}),checkedIcon:a.cloneElement(b,{fontSize:null!=(r=b.props.fontSize)?r:f}),ownerState:v,ref:t,className:Object(Dt.a)(g.root,p)},h,{classes:g}))}));var bp={50:"#fbe9e7",100:"#ffccbc",200:"#ffab91",300:"#ff8a65",400:"#ff7043",500:"#ff5722",600:"#f4511e",700:"#e64a19",800:"#d84315",900:"#bf360c",A100:"#ff9e80",A200:"#ff6e40",A400:"#ff3d00",A700:"#dd2c00"},vp=Object(ht.a)(),gp=function(e){var t=e.message?e.message:"no message",n=e.timestamp?e.timestamp:"",r=e.photoURL?e.photoURL:"dummy.js",o=e.displayName?e.displayName:"名無しさん";return i.a.createElement(i.a.Fragment,null,i.a.createElement(Tt,{theme:vp},i.a.createElement("div",{style:{display:"flex"}},i.a.createElement(xa,{style:{color:vp.palette.getContrastText(bp[500]),backgroundColor:bp[500],width:vp.spacing(4),height:vp.spacing(4)},alt:o,src:r}),i.a.createElement("div",null,i.a.createElement("div",{style:{marginLeft:"20px"}},o),i.a.createElement("div",{style:{position:"relative",marginLeft:"20px",marginBottom:"10px",padding:"10px",backgroundColor:"#A8DDFD",width:"60%",textAlign:"left",font:"400 .9em 'Open Sans', sans-serif",border:"1px solid #97C6E3",borderRadius:"10px"}},i.a.createElement("div",null,i.a.createElement("p",{style:{padding:0,margin:0}},t)),i.a.createElement("div",{style:{position:"absolute",fontSize:".85em",fontWeight:"300",marginTop:"10px",bottom:"-3px",right:"5px"}},n))))))},yp=function(e){var t=e.message?e.message:"no message",n=e.timestamp?e.timestamp:"";return i.a.createElement("div",{style:{display:"flex",justifyContent:"flex-end"}},i.a.createElement("div",{style:{position:"relative",marginRight:"20px",marginBottom:"10px",padding:"10px",backgroundColor:"#f8e896",width:"60%",textAlign:"left",font:"400 .9em 'Open Sans', sans-serif",border:"1px solid #dfd087",borderRadius:"10px"}},i.a.createElement("p",{style:{padding:0,margin:0}},t),i.a.createElement("div",{style:{position:"absolute",fontSize:".85em",fontWeight:"300",marginTop:"10px",bottom:"-3px",right:"5px"}},n)))};function xp(e){return(xp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Op(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */Op=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var a=t&&t.prototype instanceof b?t:b,i=Object.create(a.prototype),l=new T(r||[]);return o(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",p="executing",h="completed",m={};function b(){}function v(){}function g(){}var y={};s(y,i,(function(){return this}));var x=Object.getPrototypeOf,O=x&&x(x(P([])));O&&O!==n&&r.call(O,i)&&(y=O);var w=g.prototype=b.prototype=Object.create(y);function j(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var c=d(e[o],e,a);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==xp(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function S(t,n,r){var o=f;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===h){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=A(l,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var s=d(t,n,r);if("normal"===s.type){if(o=r.done?h:"suspendedYield",s.arg===m)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=h,r.method="throw",r.arg=s.arg)}}}function A(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,A(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var a=d(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,m;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,m):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(xp(t)+" is not iterable")}return v.prototype=g,o(w,"constructor",{value:g,configurable:!0}),o(g,"constructor",{value:v,configurable:!0}),v.displayName=s(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,s(e,c,"GeneratorFunction")),e.prototype=Object.create(w),e},t.awrap=function(e){return{__await:e}},j(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new E(u(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},j(w),s(w,c,"Generator"),s(w,i,(function(){return this})),s(w,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,m):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),m}},t}function wp(e){return function(e){if(Array.isArray(e))return kp(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Ap(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jp(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Ep(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){jp(a,r,o,i,l,"next",e)}function l(e){jp(a,r,o,i,l,"throw",e)}i(void 0)}))}}function Sp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||Ap(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ap(e,t){if(e){if("string"==typeof e)return kp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?kp(e,t):void 0}}function kp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Cp(){var e=Object(ht.a)(),t=Sp(Object(a.useState)(!0),2),n=t[0],r=(t[1],Sp(Object(a.useState)([]),2)),o=r[0],l=r[1],c=Sp(Object(a.useState)(!1),2),s=c[0],u=c[1];function d(){return{timeout:6e3,signal:AbortSignal.timeout(6e3)}}function f(){return(f=Ep(Op().mark((function e(t){var n,r;return Op().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),n=document.getElementById("standard-text"),!(null!==(r=n.value.trim())&&r.length>0)){e.next=11;break}return console.log("prompt: "+r),p(r),n.value="",e.next=9,m(r);case 9:h(e.sent);case 11:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function p(e){var t=i.a.createElement(yp,{message:e,timestamp:ad.getCurrentTime(),photoURL:"https://lh3.googleusercontent.com/a-/AOh14Gi4vkKYlfrbJ0QLJTg_DLjcYyyK7fYoWRpz2r4s=s96-c",displayName:"Me",avatarDisp:!0});l((function(e){return[].concat(wp(e),[t])}))}function h(e){var t=i.a.createElement(gp,{message:e,timestamp:ad.getCurrentTime(),photoURL:"https://lh3.googleusercontent.com/a-/AOh14Gi4vkKYlfrbJ0QLJTg_DLjcYyyK7fYoWRpz2r4s=s96-c",displayName:"Viki",avatarDisp:!0});l((function(e){return[].concat(wp(e),[t])}))}function m(e){return b.apply(this,arguments)}function b(){return(b=Ep(Op().mark((function e(t){var n;return Op().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,ft.get("/opensquare/api/rag/youtube/chat?prompt=".concat(t),d());case 3:if(null===(n=e.sent).data){e.next=7;break}return console.log(n.data),e.abrupt("return",n.data);case 7:e.next=12;break;case 9:e.prev=9,e.t0=e.catch(0),console.log(e.t0);case 12:case"end":return e.stop()}}),e,null,[[0,9]])})))).apply(this,arguments)}function v(){console.log("setting scroll");var e=document.querySelector("#viki-chat");e.scrollTop=e.scrollHeight-e.clientHeight}return Object(a.useEffect)((function(){var e=JSON.parse(localStorage.getItem("chatMessages"));if(e){var t=e.map((function(e){return"right"===e.type?i.a.createElement(yp,{key:e.key,message:e.message,timestamp:e.timestamp,photoURL:e.photoURL,displayName:e.displayName,avatarDisp:e.avatarDisp}):i.a.createElement(gp,{key:e.key,message:e.message,timestamp:e.timestamp,photoURL:e.photoURL,displayName:e.displayName,avatarDisp:e.avatarDisp})}));l(t),v()}}),[]),Object(a.useEffect)((function(){var e=o.map((function(e,t){return{type:e.type===yp?"right":"left",key:t,message:e.props.message,timestamp:e.props.timestamp,photoURL:e.props.photoURL,displayName:e.props.displayName,avatarDisp:e.props.avatarDisp}}));localStorage.setItem("chatMessages",JSON.stringify(e))}),[o]),Object(a.useEffect)((function(){n&&!s&&(h(ad.randomGreeting()),u(!0))}),[n,o,s]),i.a.createElement("div",{style:{width:"50vw",height:"100vh",display:"flex",alignItems:"center",justifyContent:"center"}},i.a.createElement(Yn,{id:"viki-chat",onClick:v},i.a.createElement(Yn,{id:"style-1",sx:{width:"calc( 100% - 20px )",margin:10,overflowY:"scroll",height:"calc( 100% - 80px )"}},o.map((function(e,t){return i.a.createElement("div",{key:t},e)}))),i.a.createElement(Tt,{theme:e},i.a.createElement("form",{style:{display:"flex",justifyContent:"center",width:"95%",margin:"".concat(e.spacing(0)," auto")},noValidate:!0,autoComplete:"off"},i.a.createElement(Ms,{style:{width:"100%"},id:"standard-text",label:"Chat with Viki"}),i.a.createElement(jo,{onClick:function(e){return function(e){return f.apply(this,arguments)}(e)},type:"submit",variant:"contained",color:"primary"},i.a.createElement(tu.a,null))))))}function Tp(e){return(Tp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Pp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Rp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Pp(Object(n),!0).forEach((function(t){_p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Pp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _p(e,t,n){var r;return r=function(e,t){if("object"!=Tp(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=Tp(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(t,"string"),(t="symbol"==Tp(r)?r:String(r))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Lp(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Np(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Np(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Np(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Mp(){var e=Lp(a.useState({right:!1}),2),t=e[0],n=e[1],r=function(e,r){return function(o){("keydown"!==o.type||"Tab"!==o.key&&"Shift"!==o.key)&&n(Rp(Rp({},t),{},_p({},e,r)))}};return a.createElement("div",null,a.createElement(a.Fragment,{key:"right"},a.createElement(Ys,{onClick:r("right",!0)},"Chat"),a.createElement(or,{anchor:"right",open:t.right,onClose:r("right",!1)},a.createElement(mr,{role:"presentation"},a.createElement(Cp,null)))))}function Ip(e){return(Ip="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Bp(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */Bp=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var a=t&&t.prototype instanceof b?t:b,i=Object.create(a.prototype),l=new T(r||[]);return o(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",p="executing",h="completed",m={};function b(){}function v(){}function g(){}var y={};s(y,i,(function(){return this}));var x=Object.getPrototypeOf,O=x&&x(x(P([])));O&&O!==n&&r.call(O,i)&&(y=O);var w=g.prototype=b.prototype=Object.create(y);function j(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var c=d(e[o],e,a);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==Ip(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function S(t,n,r){var o=f;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===h){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=A(l,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var s=d(t,n,r);if("normal"===s.type){if(o=r.done?h:"suspendedYield",s.arg===m)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=h,r.method="throw",r.arg=s.arg)}}}function A(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,A(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var a=d(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,m;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,m):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Ip(t)+" is not iterable")}return v.prototype=g,o(w,"constructor",{value:g,configurable:!0}),o(g,"constructor",{value:v,configurable:!0}),v.displayName=s(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,s(e,c,"GeneratorFunction")),e.prototype=Object.create(w),e},t.awrap=function(e){return{__await:e}},j(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new E(u(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},j(w),s(w,c,"Generator"),s(w,i,(function(){return this})),s(w,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,m):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),m}},t}function zp(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Dp(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){zp(a,r,o,i,l,"next",e)}function l(e){zp(a,r,o,i,l,"throw",e)}i(void 0)}))}}function Fp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Wp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Fp(Object(n),!0).forEach((function(t){$p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Fp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function $p(e,t,n){var r;return r=function(e,t){if("object"!=Ip(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=Ip(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(t,"string"),(t="symbol"==Ip(r)?r:String(r))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Up(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Vp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Vp(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Hp=function(e){e.isSelected;var t=Up(Object(a.useState)(""),2),n=t[0],r=(t[1],Up(Object(a.useState)(n),2)),o=(r[0],r[1],Up(Object(a.useState)("STARTING"),2)),i=(o[0],o[1],Up(Object(a.useState)(0),2)),l=(i[0],i[1],Up(Object(a.useState)(!1),2)),c=(l[0],l[1],Up(Object(a.useState)(""),2)),s=c[0],u=c[1],d=Up(Object(a.useState)([]),2),f=d[0],p=d[1],h=Up(a.useState(!0),2),m=h[0],b=h[1],v=Up(a.useState("Enter VideoId"),2),g=v[0],y=v[1];Object(pt.a)(Yn)((function(e){var t=e.theme;return Wp(Wp({backgroundColor:"dark"===t.palette.mode?"#1A2027":"#d8ecf3"},t.typography.body2),{},{padding:t.spacing(5),color:t.palette.text.secondary,textAlign:"left",maxWidth:"100%",palette:{background:{tertiary:"#d8ecf3"},text:{primary:"#fff"}}})})),Object(pt.a)(Tf)((function(e){var t=e.theme;return $p($p({height:10,borderRadius:5},"&.".concat(ff.colorPrimary),{backgroundColor:t.palette.grey["light"===t.palette.mode?200:800]}),"& .".concat(ff.bar),{borderRadius:5,backgroundColor:"light"===t.palette.mode?"#1a90ff":"#308fe8"})}));function x(){return(x=Dp(Bp().mark((function e(t){var n,r;return Bp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),n=document.getElementById("youtubeSearch"),!(null!==(r=n.value.trim())&&r.length>0)){e.next=13;break}if(u(s),n.value="",m){e.next=11;break}return e.next=9,w();case 9:e.next=13;break;case 11:return e.next=13,E();case 13:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function O(){return{timeout:3e3,signal:AbortSignal.timeout(6e3)}}Object(a.useEffect)((function(){console.log(f.data)}),[f.data]);function w(){return j.apply(this,arguments)}function j(){return(j=Dp(Bp().mark((function e(){return Bp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e){setTimeout((function(){e(ft.get("/opensquare/api/youtube/en/transcripts/search?q=".concat(s),O()).then((function(e){if(p(e.data),null!==e.data)return e})).catch((function(e){console.log(e)})))}),1e3)})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function E(){return S.apply(this,arguments)}function S(){return(S=Dp(Bp().mark((function e(){return Bp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e){setTimeout((function(){e(ft.get("/opensquare/api/youtube/en/video?videoId=".concat(s),O()).then((function(e){var t=[e.data];if(p(t),null!==e.data)return e})).catch((function(e){console.log(e)})))}),1e3)})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return Nu.a.number.isRequired,a.createElement(a.Fragment,null,a.createElement(Qo,{item:!0,xs:12,justifyContent:"center",alignItems:"center"},a.createElement(uf,null),a.createElement(Mp,null),a.createElement(Yn,{component:"form",sx:{p:"2px 4px",display:"flex",width:"95%",marginLeft:"2.5%",marginTop:"5%",backgroundColor:"tertiary"}},a.createElement(Tl,{fullWidth:!0,sx:{ml:1,flex:1},placeholder:g,id:"youtubeSearch",onChange:function(e){u(e.target.value)},inputProps:{"aria-label":"youtube video search"}}),a.createElement(jo,{onClick:function(e){return function(e){return x.apply(this,arguments)}(e)},type:"submit",sx:{p:"10px"},"aria-label":"search"},a.createElement(gd.a,null)),a.createElement(Zf,{label:"Search by VideoId",control:a.createElement(mp,{checked:m,onChange:function(e){var t=e.target.checked;b(t),y(t?"Enter VideoId":"Enter Search Query")},inputProps:{"aria-label":"controlled"}})}),a.createElement($r,{sx:{height:28,m:.5},orientation:"vertical"})),f.length>0&&a.createElement(mr,{sx:{flexGrow:1,overflow:"hidden",px:3}},f.map((function(e){return a.createElement(Gf,{video:e})})))))};function qp(){return a.createElement(xu,{sx:{width:"60%",marginTop:"2%",marginLeft:"auto",marginRight:"auto"}},a.createElement(Au,{sx:{height:140},image:"/images/disposable-email.jpeg",title:"emaillookup"}),a.createElement(Cd,null,a.createElement(Mr,{gutterBottom:!0,variant:"h5",component:"div"},"Email Lookup"),a.createElement(Mr,{variant:"body2",color:"text.secondary"},rd.emailLookupInfo,a.createElement("b",null,"opensentop@gmail.com"),".")),a.createElement(Ed,null,a.createElement(Ys,{target:"_blank",href:"https://en.wikipedia.org/wiki/Disposable_email_address",size:"small"},"Learn More")))}function Gp(e){return(Gp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Yp(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */Yp=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var a=t&&t.prototype instanceof b?t:b,i=Object.create(a.prototype),l=new T(r||[]);return o(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",p="executing",h="completed",m={};function b(){}function v(){}function g(){}var y={};s(y,i,(function(){return this}));var x=Object.getPrototypeOf,O=x&&x(x(P([])));O&&O!==n&&r.call(O,i)&&(y=O);var w=g.prototype=b.prototype=Object.create(y);function j(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var c=d(e[o],e,a);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==Gp(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function S(t,n,r){var o=f;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===h){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=A(l,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var s=d(t,n,r);if("normal"===s.type){if(o=r.done?h:"suspendedYield",s.arg===m)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=h,r.method="throw",r.arg=s.arg)}}}function A(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,A(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var a=d(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,m;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,m):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Gp(t)+" is not iterable")}return v.prototype=g,o(w,"constructor",{value:g,configurable:!0}),o(g,"constructor",{value:v,configurable:!0}),v.displayName=s(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,s(e,c,"GeneratorFunction")),e.prototype=Object.create(w),e},t.awrap=function(e){return{__await:e}},j(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new E(u(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},j(w),s(w,c,"Generator"),s(w,i,(function(){return this})),s(w,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,m):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),m}},t}function Kp(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Xp(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Kp(a,r,o,i,l,"next",e)}function l(e){Kp(a,r,o,i,l,"throw",e)}i(void 0)}))}}function Jp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Qp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Jp(Object(n),!0).forEach((function(t){Zp(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Jp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Zp(e,t,n){var r;return r=function(e,t){if("object"!=Gp(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=Gp(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(t,"string"),(t="symbol"==Gp(r)?r:String(r))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function eh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return th(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return th(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function th(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function nh(){var e=eh(a.useState([]),2),t=e[0],n=e[1],r=Object(pt.a)(Yn)((function(e){var t=e.theme;return Qp(Qp({backgroundColor:"dark"===t.palette.mode?"#1A2027":"#d8ecf3"},t.typography.body2),{},{padding:t.spacing(5),color:t.palette.text.secondary,textAlign:"left",maxWidth:"100%",palette:{background:{tertiary:"#d8ecf3"},text:{primary:"#fff"}}})}));function o(){return{timeout:3e3,signal:AbortSignal.timeout(6e3)}}function i(e){return l.apply(this,arguments)}function l(){return(l=Xp(Yp().mark((function e(t){return Yp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ft.get("/opensquare/api/verify/disposable?emailAddress=".concat(t),o()).then((function(e){n(e.data)})).catch((function(e){console.log(e)}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function c(){return(c=Xp(Yp().mark((function e(t){var n,r;return Yp().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),n=document.getElementById("emailLookupSearch"),!(null!==(r=n.value.trim())&&r.length>0)){e.next=7;break}return n.value="",e.next=7,i(r);case 7:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return Object(a.useEffect)((function(){console.log(t)}),[t]),a.createElement(a.Fragment,null,a.createElement(Qo,{item:!0,xs:12,justifyContent:"center",alignItems:"center"},a.createElement(qp,null),a.createElement(Yn,{component:"form",sx:{p:"2px 4px",display:"flex",width:"95%",marginLeft:"2.5%",marginTop:"5%",backgroundColor:"tertiary"}},a.createElement(Tl,{fullWidth:!0,sx:{ml:1,flex:1},placeholder:"Enter Email Address",id:"emailLookupSearch",inputProps:{"aria-label":"email lookup search"}}),a.createElement(jo,{onClick:function(e){return function(e){return c.apply(this,arguments)}(e)},type:"submit",sx:{p:"10px"},"aria-label":"search"},a.createElement(gd.a,null)),a.createElement($r,{sx:{height:28,m:.5},orientation:"vertical"})),void 0!==t.domainName&&a.createElement(mr,{sx:{flexGrow:1,overflow:"hidden",px:3}},a.createElement(r,{sx:{my:1,mx:"auto",p:2}},a.createElement(Ia,{spacing:1,direction:"column",marginTop:"3%"},a.createElement(Mr,null,a.createElement("b",null,"Domain")),a.createElement(Mr,null,a.createElement("b",null,"Address: "),t.domainName))))))}function rh(e){var t=e.notifications;return a.createElement(mr,{sx:{width:400}},a.createElement(Ca,{color:"primary",sx:{position:"absolute",height:"auto","& .MuiChip-label":{display:"block",whiteSpace:"normal"}},label:t[0].message}))}function oh(e){return(oh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ah(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ih(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ih(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ih(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function lh(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ch(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?lh(Object(n),!0).forEach((function(t){sh(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):lh(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function sh(e,t,n){var r;return r=function(e,t){if("object"!=oh(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=oh(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(t,"string"),(t="symbol"==oh(r)?r:String(r))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function uh(){return(uh=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function dh(e){return a.createElement(Mr,uh({variant:"body2",color:"text.secondary",align:"center"},e),"Copyright © ",a.createElement(ia,{color:"inherit",target:"_blank",href:"https://github.com/walimorris/opensquare"},"OpenSquare")," ",(new Date).getFullYear(),".")}var fh=Object(pt.a)(xr,{shouldForwardProp:function(e){return"open"!==e}})((function(e){var t=e.theme,n=e.open;return ch({zIndex:t.zIndex.drawer+1,transition:t.transitions.create(["width","margin"],{easing:t.transitions.easing.sharp,duration:t.transitions.duration.leavingScreen})},n&&{marginLeft:240,width:"calc(100% - ".concat(240,"px)"),transition:t.transitions.create(["width","margin"],{easing:t.transitions.easing.sharp,duration:t.transitions.duration.enteringScreen})})})),ph=Object(pt.a)(or,{shouldForwardProp:function(e){return"open"!==e}})((function(e){var t=e.theme,n=e.open;return{"& .MuiDrawer-paper":ch({position:"relative",whiteSpace:"nowrap",width:240,transition:t.transitions.create("width",{easing:t.transitions.easing.sharp,duration:t.transitions.duration.enteringScreen}),boxSizing:"border-box"},!n&&sh({overflowX:"hidden",transition:t.transitions.create("width",{easing:t.transitions.easing.sharp,duration:t.transitions.duration.leavingScreen}),width:t.spacing(7)},t.breakpoints.up("sm"),{width:t.spacing(9)}))}})),hh=Object(ht.a)({palette:{white:{main:"#ffffff",dark:"#f8f8f8",darker:"#f5f5f5"}}});function mh(e){var t=ah(a.useState(!0),2),n=t[0],r=t[1],o=ah(a.useState(!0),2),i=o[0],l=o[1],c=ah(a.useState(!0),2),s=c[0],u=c[1],d=ah(a.useState(!0),2),f=d[0],p=d[1],h=ah(a.useState(!1),2),m=h[0],b=h[1],v=ah(a.useState(!1),2),g=v[0],y=v[1],x=ah(a.useState(!1),2),O=x[0],w=x[1],j=ah(a.useState(!1),2),E=j[0],S=j[1],A=ah(a.useState(!1),2),k=A[0],C=A[1],T=e.globalNotifications,P=ah(a.useState(!1),2),R=P[0],_=P[1],L=function(){r(!n)},N=function(){return T.length};return a.createElement(Tt,{theme:hh},a.createElement(mr,{sx:{display:"flex"}},a.createElement(zt,null),a.createElement(fh,{position:"absolute",open:n},a.createElement(Er,{sx:{pr:"24px"}},a.createElement(jo,{edge:"start",color:"inherit","aria-label":"open drawer",onClick:L,sx:ch({marginRight:"36px"},n&&{display:"none"})},a.createElement(ca.a,null)),a.createElement(Mr,{component:"h1",variant:"h6",color:"inherit",noWrap:!0,sx:{flexGrow:1}},"Dashboard"),a.createElement(Ia,{direction:"row",spacing:1,sx:{marginRight:"65%"}},a.createElement(Ca,{avatar:a.createElement(xa,{alt:"W",src:"/images/professional_me.jpeg"}),label:"Avatar",variant:"outlined"})),a.createElement(jo,{color:"inherit",sx:{marginRight:"5%"}},a.createElement(Ro,{badgeContent:N(),color:"secondary"},a.createElement(fa.a,{onClick:function(){N()>0&&_(!R)}})),R&&a.createElement(Ro,null,a.createElement(rh,{notifications:T}))),a.createElement(Ys,{onClick:function(){window.location.href="/logout"},size:"small",color:"white",endIcon:a.createElement(bd.a,null)},"Logout"))),a.createElement(ph,{variant:"permanent",open:n},a.createElement(Er,{sx:{display:"flex",alignItems:"center",justifyContent:"flex-end",px:[1]}},a.createElement(jo,{onClick:L},a.createElement(ua.a,null))),a.createElement($r,null),a.createElement(Tr,{component:"nav"},a.createElement(Li,{handleToggleAll:function(e){console.log(e),function(e){"Dashboard"!==e||i&&f&&s?"Whois"===e?(l(!1),p(!1),u(!1),y(!1),w(!1),S(!1),C(!1),b(!0)):"NSLookup"===e?(l(!1),p(!1),u(!1),b(!1),w(!1),S(!1),C(!1),y(!0)):"BackLinks"===e?(l(!1),p(!1),u(!1),b(!1),y(!1),S(!1),C(!1),w(!0)):"EmailLookup"===e?(l(!1),p(!1),u(!1),b(!1),y(!1),w(!1),C(!1),S(!0)):"YouTube"===e&&(l(!1),p(!1),u(!1),b(!1),y(!1),w(!1),S(!1),C(!0)):(l(!0),p(!0),u(!0),b(!1),y(!1),w(!1),S(!1),C(!1))}(e)}}),a.createElement($r,{sx:{my:1}}),a.createElement(Ui,null),a.createElement($r,{sx:{my:1}}),a.createElement(bu,{userDetails:e.userDetails}))),a.createElement(mr,{component:"main",sx:{backgroundColor:function(e){return"light"===e.palette.mode?e.palette.grey[100]:e.palette.grey[900]},flexGrow:1,height:"100vh",overflow:"auto"}},a.createElement(Er,null),a.createElement(Wo,{maxWidth:"lg",sx:{mt:4,mb:4}},a.createElement(Qo,{container:!0,spacing:3},i&&a.createElement(Qo,{item:!0,xs:12,md:8,lg:9},a.createElement(Yn,{sx:{p:2,display:"flex",flexDirection:"column",height:580}},a.createElement(Qu,null))),s&&a.createElement(Qo,{item:!0,xs:12,md:4,lg:3},a.createElement(Yn,{sx:{p:2,display:"flex",flexDirection:"column",height:240}},a.createElement(fd,{userDetails:e.userDetails}))),f&&a.createElement(Qo,{item:!0,xs:12},a.createElement(Yn,{sx:{p:2,display:"flex",flexDirection:"column"}},a.createElement(hd,null))),m&&a.createElement(Qo,{item:!0,xs:12},a.createElement(Yn,{sx:{p:2,display:"flex",flexDirection:"column"}},a.createElement(Dd,null))),g&&a.createElement(Qo,{item:!0,xs:12},a.createElement(Yn,{sx:{p:2,display:"flex",flexDirection:"column"}},a.createElement(Xd,null))),O&&a.createElement(Qo,{item:!0,xs:12},a.createElement(Yn,{sx:{p:2,display:"flex",flexDirection:"column"}},a.createElement(sf,null))),E&&a.createElement(Qo,{item:!0,xs:12},a.createElement(Yn,{sx:{p:2,display:"flex",flexDirection:"column"}},a.createElement(nh,null))),k&&a.createElement(Qo,{item:!0,xs:12},a.createElement(Yn,{sx:{p:2,display:"flex",flexDirection:"column"}},a.createElement(Hp,{isSelected:!0})))),a.createElement(dh,{sx:{pt:4}})))))}var bh=n(112),vh={insert:"head",singleton:!1};ed()(bh.a,vh),bh.a.locals;function gh(e){return(gh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function yh(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */yh=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var a=t&&t.prototype instanceof b?t:b,i=Object.create(a.prototype),l=new T(r||[]);return o(i,"_invoke",{value:S(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",p="executing",h="completed",m={};function b(){}function v(){}function g(){}var y={};s(y,i,(function(){return this}));var x=Object.getPrototypeOf,O=x&&x(x(P([])));O&&O!==n&&r.call(O,i)&&(y=O);var w=g.prototype=b.prototype=Object.create(y);function j(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,l){var c=d(e[o],e,a);if("throw"!==c.type){var s=c.arg,u=s.value;return u&&"object"==gh(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(u).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(c.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function S(t,n,r){var o=f;return function(a,i){if(o===p)throw new Error("Generator is already running");if(o===h){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var c=A(l,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=p;var s=d(t,n,r);if("normal"===s.type){if(o=r.done?h:"suspendedYield",s.arg===m)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=h,r.method="throw",r.arg=s.arg)}}}function A(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,A(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var a=d(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,m;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,m):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(gh(t)+" is not iterable")}return v.prototype=g,o(w,"constructor",{value:g,configurable:!0}),o(g,"constructor",{value:v,configurable:!0}),v.displayName=s(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,s(e,c,"GeneratorFunction")),e.prototype=Object.create(w),e},t.awrap=function(e){return{__await:e}},j(E.prototype),s(E.prototype,l,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new E(u(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},j(w),s(w,c,"Generator"),s(w,i,(function(){return this})),s(w,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,m):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;C(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),m}},t}function xh(e,t,n,r,o,a,i){try{var l=e[a](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,o)}function Oh(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){xh(a,r,o,i,l,"next",e)}function l(e){xh(a,r,o,i,l,"throw",e)}i(void 0)}))}}function wh(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],c=!0,s=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);c=!0);}catch(e){s=!0,o=e}finally{try{if(!c&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw o}}return l}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return jh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return jh(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Eh=function(){var e=wh(Object(a.useState)({}),2),t=e[0],n=e[1],r=wh(Object(a.useState)({}),2),o=r[0],l=r[1],c={method:"post",maxBodyLength:1/0,url:"/opensentop/api/actions/user_details",headers:{"Content-Type":"application/json"}},s={method:"get",maxBodyLength:1/0,url:"/opensquare/admin/api/notifications/globalAll",headers:{"Content-Type":"application/json"}};Object(a.useEffect)((function(){function e(){return(e=Oh(yh().mark((function e(){return yh().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ft.request(c).then((function(e){console.log(e.data),n(e.data)})).catch((function(e){console.log(e)}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[]),Object(a.useEffect)((function(){function e(){return(e=Oh(yh().mark((function e(){return yh().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ft.request(s).then((function(e){console.log(e.data),l(e.data)})).catch((function(e){console.log(e)}));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}!function(){e.apply(this,arguments)}()}),[]);return i.a.createElement("div",{id:"app"},i.a.createElement(te,null,i.a.createElement(Z,null,i.a.createElement(J,{path:"/",element:i.a.createElement(mh,{userDetails:t,globalNotifications:o})}),i.a.createElement(J,{path:"/settings",element:i.a.createElement(ae,{userDetails:t})}),i.a.createElement(J,{path:"/about",element:i.a.createElement(le,null)}))))};c.a.render(i.a.createElement(Eh,null),document.getElementById("root"))},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(225);const o={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function a(e,t,n="Mui"){const a=o[t];return a?`${n}-${a}`:`${r.a.generate(e)}-${t}`}},function(e,t,n){"use strict";const r=e=>e,o=(()=>{let e=r;return{configure(t){e=t},generate:t=>e(t),reset(){e=r}}})();t.a=o},function(e,t,n){"use strict";function r(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(0),o=n(228);function a(...e){return r.useMemo(()=>e.every(e=>null==e)?null:t=>{e.forEach(e=>{Object(o.a)(e,t)})},e)}},function(e,t,n){"use strict";function r(e,t){"function"==typeof e?e(t):e&&(e.current=t)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(0),o=n(148);t.a=function(e){const t=r.useRef(e);return Object(o.a)(()=>{t.current=e}),r.useRef((...e)=>(0,t.current)(...e)).current}},function(e,t,n){"use strict";function r(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout(()=>{e.apply(this,r)},t)}return r.clear=()=>{clearTimeout(n)},r}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(149);function o(e){return Object(r.a)(e).defaultView||window}},function(e,t,n){"use strict";var r=n(1),o=n(4),a=n(147);const i=["values","unit","step"];function l(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:a=5}=e,l=Object(o.a)(e,i),c=(e=>{const t=Object.keys(e).map(t=>({key:t,val:e[t]}))||[];return t.sort((e,t)=>e.val-t.val),t.reduce((e,t)=>Object(r.a)({},e,{[t.key]:t.val}),{})})(t),s=Object.keys(c);function u(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function d(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-a/100}${n})`}function f(e,r){const o=s.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[s[o]]?t[s[o]]:r)-a/100}${n})`}return Object(r.a)({keys:s,values:c,up:u,down:d,between:f,only:function(e){return s.indexOf(e)+1<s.length?f(e,s[s.indexOf(e)+1]):u(e)},not:function(e){const t=s.indexOf(e);return 0===t?u(s[1]):t===s.length-1?d(s[t]):f(e,s[s.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},l)}var c={borderRadius:4},s=n(11);var u=n(121),d=n(59);function f(e,t){const n=this;if(n.vars&&"function"==typeof n.getColorSchemeSelector){return{[n.getColorSchemeSelector(e).replace(/(\[[^\]]+\])/,"*:where($1)")]:t}}return n.palette.mode===e?t:{}}const p=["breakpoints","palette","spacing","shape"];t.a=function(e={},...t){const{breakpoints:n={},palette:i={},spacing:h,shape:m={}}=e,b=Object(o.a)(e,p),v=l(n),g=function(e=8){if(e.mui)return e;const t=Object(s.a)({spacing:e}),n=(...e)=>{return(0===e.length?[1]:e).map(e=>{const n=t(e);return"number"==typeof n?n+"px":n}).join(" ")};return n.mui=!0,n}(h);let y=Object(a.a)({breakpoints:v,direction:"ltr",components:{},palette:Object(r.a)({mode:"light"},i),spacing:g,shape:Object(r.a)({},c,m)},b);return y.applyStyles=f,y=t.reduce((e,t)=>Object(a.a)(e,t),y),y.unstable_sxConfig=Object(r.a)({},d.a,null==b?void 0:b.unstable_sxConfig),y.unstable_sx=function(e){return Object(u.a)({sx:e,theme:this})},y}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(270);var o=n(57);function a({props:e,name:t,defaultTheme:n,themeId:a}){let i=Object(o.a)(n);a&&(i=i[a]||i);return function(e){const{theme:t,name:n,props:o}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?Object(r.a)(t.components[n].defaultProps,o):o}({theme:i,name:t,props:e})}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";function r(e,t,n){const r={};return Object.keys(e).forEach(o=>{r[o]=e[o].reduce((e,r)=>{if(r){const o=t(r);""!==o&&e.push(o),n&&n[r]&&e.push(n[r])}return e},[]).join(" ")}),r}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(224);function o(e,t,n="Mui"){const o={};return t.forEach(t=>{o[t]=Object(r.a)(e,t,n)}),o}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(1);function o(e,t){const n=Object(r.a)({},t);return Object.keys(e).forEach(a=>{if(a.toString().match(/^(components|slots)$/))n[a]=Object(r.a)({},e[a],n[a]);else if(a.toString().match(/^(componentsProps|slotProps)$/)){const i=e[a]||{},l=t[a];n[a]={},l&&Object.keys(l)?i&&Object.keys(i)?(n[a]=Object(r.a)({},l),Object.keys(i).forEach(e=>{n[a][e]=o(i[e],l[e])})):n[a]=l:n[a]=i}else void 0===n[a]&&(n[a]=e[a])}),n}},function(e,t,n){"use strict";function r(...e){return e.reduce((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)},()=>{})}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(0);let o=0;const a=r["useId".toString()];function i(e){if(void 0!==a){const t=a();return null!=e?e:t}return function(e){const[t,n]=r.useState(e),a=e||t;return r.useEffect(()=>{null==t&&(o+=1,n("mui-"+o))},[t]),a}(e)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));n(0);var r=n(47),o=n(2);function a(e){const{styles:t,defaultTheme:n={}}=e,a="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return Object(o.jsx)(r.a,{styles:a})}},function(e,t,n){"use strict";n.d(t,"c",(function(){return s})),n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d})),n.d(t,"d",(function(){return f}));var r=n(226);var o=function(e,t=Number.MIN_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,n))};function a(e,t=0,n=1){return o(e,t,n)}function i(e){if(e.type)return e;if("#"===e.charAt(0))return i(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map(e=>e+e)),n?`rgb${4===n.length?"a":""}(${n.map((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error(Object(r.a)(9,e));let o,a=e.substring(t+1,e.length-1);if("color"===n){if(a=a.split(" "),o=a.shift(),4===a.length&&"/"===a[3].charAt(0)&&(a[3]=a[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(o))throw new Error(Object(r.a)(10,o))}else a=a.split(",");return a=a.map(e=>parseFloat(e)),{type:n,values:a,colorSpace:o}}function l(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map((e,t)=>t<3?parseInt(e,10):e):-1!==t.indexOf("hsl")&&(r[1]=r[1]+"%",r[2]=r[2]+"%"),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:""+r.join(", "),`${t}(${r})`}function c(e){let t="hsl"===(e=i(e)).type||"hsla"===e.type?i(function(e){e=i(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,a=r*Math.min(o,1-o),c=(e,t=(e+n/30)%12)=>o-a*Math.max(Math.min(t-3,9-t,1),-1);let s="rgb";const u=[Math.round(255*c(0)),Math.round(255*c(8)),Math.round(255*c(4))];return"hsla"===e.type&&(s+="a",u.push(t[3])),l({type:s,values:u})}(e)).values:e.values;return t=t.map(t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4)),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function s(e,t){const n=c(e),r=c(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function u(e,t){return e=i(e),t=a(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]="/"+t:e.values[3]=t,l(e)}function d(e,t){if(e=i(e),t=a(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return l(e)}function f(e,t){if(e=i(e),t=a(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return l(e)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvc3R5bGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9jYXBpdGFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy91c2VUaGVtZVByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3BhY2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VGb3JrUmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC91dGlscy9jcmVhdGVTdmdJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vYnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3ZnSWNvbi9zdmdJY29uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TdmdJY29uL1N2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvY3JlYXRlU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vcmVhY3QvZGlzdC9lbW90aW9uLWVsZW1lbnQtYzM5NjE3ZDguYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3V0aWxzL2Rpc3QvZW1vdGlvbi11dGlscy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvaWRlbnRpZmllci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9TZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MvZGlzdC9lbW90aW9uLXVzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L2Vtb3Rpb24tdW5pdGxlc3MuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zZXJpYWxpemUvZGlzdC9lbW90aW9uLXNlcmlhbGl6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaGFzaC9kaXN0L2Vtb3Rpb24taGFzaC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9lbW90aW9uLWlzLXByb3AtdmFsaWQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsZWQvYmFzZS9kaXN0L2Vtb3Rpb24tc3R5bGVkLWJhc2UuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC9kaXN0L2Vtb3Rpb24tc3R5bGVkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3N0eWxlZC1lbmdpbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vcmVhY3QvZGlzdC9lbW90aW9uLXJlYWN0LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUNvbnRyb2xsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUNvbnRyb2xsZWQvdXNlQ29udHJvbGxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VFdmVudENhbGxiYWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9yZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUlzRm9jdXNWaXNpYmxlL3VzZUlzRm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvRXhwYW5kTW9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9ib3JkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3NzR3JpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3BhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zaXppbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZUZ1bmN0aW9uU3gvZGVmYXVsdFN4Q29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2lzTXVpRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vaXNNdWlFbGVtZW50L2lzTXVpRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNOaWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9lbW90aW9uLW1lbW9pemUuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi93ZWFrLW1lbW9pemUvZGlzdC9lbW90aW9uLXdlYWstbWVtb2l6ZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvb3duZXJXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY2hhcnRzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3Byb3BzVG9DbGFzc0tleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVN0eWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUcmFuc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lV2l0aG91dERlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL251bGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvU2VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2hlZXQvZGlzdC9lbW90aW9uLXNoZWV0LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvZGlzdC9zdHlsaXMubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9jYWNoZS9kaXN0L2Vtb3Rpb24tY2FjaGUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9kZXByZWNhdGVkUHJvcFR5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2RlcHJlY2F0ZWRQcm9wVHlwZS9kZXByZWNhdGVkUHJvcFR5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvc2V0UmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vcmVxdWlyZVByb3BGYWN0b3J5L3JlcXVpcmVQcm9wRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91bnN1cHBvcnRlZFByb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3Vuc3VwcG9ydGVkUHJvcC91bnN1cHBvcnRlZFByb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3JlYWN0L19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvRXhwYW5kTGVzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9PcGVuSW5OZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc05hTi5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jc3MvcGxhdGZvcm0tb3B0aW9ucy5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0cmVuZG1pY3JvL3JlYWN0LXNpZGVuYXYvZGlzdC9yZWFjdC1zaWRlbmF2LmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY2FwaXRhbGl6ZS9jYXBpdGFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L3N0eWxlRnVuY3Rpb25TeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9EYXNoYm9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvUGVvcGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0RldmljZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvRGV2aWNlc090aGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0JhckNoYXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0xheWVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9Zb3VUdWJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL1R3aXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvU3RhckJvcmRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9TdGFja2VkTGluZUNoYXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0ZpbGVQcmVzZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL01hbmFnZUFjY291bnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0Nsb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9JbnNlcnREcml2ZUZpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9PcGVuSW5Ccm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL1RodW1iVXBPZmZBbHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvVmlzaWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC9NZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL05vdGlmaWNhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvTG9nb3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0NoZXZyb25MZWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2dyZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL3B1cnBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvb3JhbmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ibHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9saWdodEJsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2dyZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9zaGFkb3dzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy96SW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVNaXhpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUxhenlSZWYvdXNlTGF6eVJlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlT25Nb3VudC91c2VPbk1vdW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VUaW1lb3V0L3VzZVRpbWVvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2RlZXBtZXJnZS9kZWVwbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUVuaGFuY2VkRWZmZWN0L3VzZUVuaGFuY2VkRWZmZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9vd25lckRvY3VtZW50L293bmVyRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL25vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9OdW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdHJpbW1lZEVuZEluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjaGFydHMvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1RvUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tZW1vaXplQ2FwcGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXBDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUNsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0hhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaENsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTGlzdENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUNsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9LZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0ByZW1peC1ydW4vcm91dGVyL2Rpc3Qvcm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2pzL3BhZ2VzL1NldHRpbmdzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2pzL3BhZ2VzL0Fib3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvVVJMU2VhcmNoUGFyYW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Jsb2IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9jb21tb24vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0hlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3BlZWRvbWV0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3ByaXZhdGUtdGhlbWluZy91c2VUaGVtZS9UaGVtZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvcHJpdmF0ZS10aGVtaW5nL3VzZVRoZW1lL3VzZVRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3ByaXZhdGUtdGhlbWluZy9UaGVtZVByb3ZpZGVyL25lc3RlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9wcml2YXRlLXRoZW1pbmcvVGhlbWVQcm92aWRlci9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vVGhlbWVQcm92aWRlci9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vR2xvYmFsU3R5bGVzL0dsb2JhbFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9HbG9iYWxTdHlsZXMvR2xvYmFsU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Nzc0Jhc2VsaW5lL0Nzc0Jhc2VsaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvaXNIb3N0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvZXh0cmFjdEV2ZW50SGFuZGxlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy9vbWl0RXZlbnRIYW5kbGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL3VzZVNsb3RQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL3Jlc29sdmVDb21wb25lbnRQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL3V0aWxzL21lcmdlU2xvdFByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvYXBwZW5kT3duZXJTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZ2V0U2Nyb2xsYmFyU2l6ZS9nZXRTY3JvbGxiYXJTaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdW5zdGFibGVfdXNlTW9kYWwvTW9kYWxNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdW5zdGFibGVfdXNlTW9kYWwvdXNlTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9Gb2N1c1RyYXAvRm9jdXNUcmFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvUG9ydGFsL1BvcnRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vdXRpbHMvcmVmbG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC90cmFuc2l0aW9ucy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9GYWRlL0ZhZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQmFja2Ryb3AvYmFja2Ryb3BDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JhY2tkcm9wL0JhY2tkcm9wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL01vZGFsL21vZGFsQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Nb2RhbC9Nb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TbGlkZS9TbGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvZ2V0T3ZlcmxheUFscGhhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1BhcGVyL3BhcGVyQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9QYXBlci9QYXBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9EcmF3ZXIvZHJhd2VyQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9EcmF3ZXIvRHJhd2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L2V4dGVuZFN4UHJvcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZUJveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Cb3gvYm94Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Cb3gvQm94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0FwcEJhci9hcHBCYXJDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0FwcEJhci9BcHBCYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVG9vbGJhci90b29sYmFyQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Ub29sYmFyL1Rvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdC9MaXN0Q29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaXN0L2xpc3RDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3QvTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5L3R5cG9ncmFwaHlDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1R5cG9ncmFwaHkvVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9EaXZpZGVyL2RpdmlkZXJDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0RpdmlkZXIvRGl2aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vdXRpbHMvQ2hpbGRNYXBwaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL1JpcHBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL3RvdWNoUmlwcGxlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL1RvdWNoUmlwcGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkJhc2UvYnV0dG9uQmFzZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9CdXR0b25CYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ljb25CdXR0b24vaWNvbkJ1dHRvbkNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSWNvbkJ1dHRvbi9JY29uQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VQcmV2aW91c1Byb3BzL3VzZVByZXZpb3VzUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQmFkZ2UvYmFkZ2VDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JhZGdlL0JhZGdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3plcm8tc3R5bGVkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXNlQmFkZ2UvdXNlQmFkZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9Db250YWluZXIvY3JlYXRlQ29udGFpbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NvbnRhaW5lci9Db250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvR3JpZC9HcmlkQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9HcmlkL2dyaWRDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0dyaWQvR3JpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaW5rL2xpbmtDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpbmsvZ2V0VGV4dERlY29yYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGluay9MaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9QZXJzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQXZhdGFyL2F2YXRhckNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQXZhdGFyL0F2YXRhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NoaXAvY2hpcENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2hpcC9DaGlwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vU3RhY2svY3JlYXRlU3RhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3RhY2svU3RhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1CdXR0b24vbGlzdEl0ZW1CdXR0b25DbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtQnV0dG9uL0xpc3RJdGVtQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtSWNvbi9saXN0SXRlbUljb25DbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtSWNvbi9MaXN0SXRlbUljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1UZXh0L2xpc3RJdGVtVGV4dENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1UZXh0L0xpc3RJdGVtVGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Db2xsYXBzZS9jb2xsYXBzZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ29sbGFwc2UvQ29sbGFwc2UuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvY29tcG9uZW50cy9NYWluTGlzdEl0ZW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RTdWJoZWFkZXIvbGlzdFN1YmhlYWRlckNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdFN1YmhlYWRlci9MaXN0U3ViaGVhZGVyLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2pzL2NvbXBvbmVudHMvU2Vjb25kYXJ5TGlzdEl0ZW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0FsZXJ0L2FsZXJ0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvU3VjY2Vzc091dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9SZXBvcnRQcm9ibGVtT3V0bGluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL0Vycm9yT3V0bGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvSW5mb091dGxpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9DbG9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9BbGVydC9BbGVydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9iYXNlL1RleHRhcmVhQXV0b3NpemUvVGV4dGFyZWFBdXRvc2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dEJhc2UvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlL2lucHV0QmFzZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlL0lucHV0QmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dC9pbnB1dENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXQvSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRmlsbGVkSW5wdXQvZmlsbGVkSW5wdXRDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ZpbGxlZElucHV0L0ZpbGxlZElucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL091dGxpbmVkSW5wdXQvTm90Y2hlZE91dGxpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvT3V0bGluZWRJbnB1dC9vdXRsaW5lZElucHV0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9PdXRsaW5lZElucHV0L091dGxpbmVkSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUxhYmVsL2Zvcm1MYWJlbENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUxhYmVsL0Zvcm1MYWJlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9JbnB1dExhYmVsL2lucHV0TGFiZWxDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0TGFiZWwvSW5wdXRMYWJlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUhlbHBlclRleHQvZm9ybUhlbHBlclRleHRDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Zvcm1IZWxwZXJUZXh0L0Zvcm1IZWxwZXJUZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2dldFNjcm9sbGJhclNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTWVudUxpc3QvTWVudUxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvR3Jvdy9Hcm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1BvcG92ZXIvcG9wb3ZlckNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvUG9wb3Zlci9Qb3BvdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL01lbnUvbWVudUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTWVudS9NZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL05hdGl2ZVNlbGVjdC9uYXRpdmVTZWxlY3RDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3RJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TZWxlY3Qvc2VsZWN0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TZWxlY3QvU2VsZWN0SW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU2VsZWN0L1NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UZXh0RmllbGQvdGV4dEZpZWxkQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UZXh0RmllbGQvVGV4dEZpZWxkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbi9idXR0b25DbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkdyb3VwL0J1dHRvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25Hcm91cC9CdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9NZW51SXRlbS9tZW51SXRlbUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTWVudUl0ZW0vTWVudUl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvY29tcG9uZW50cy9TZXR0aW5nc01vZGFsLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2pzL2NvbXBvbmVudHMvVGVydGlhcnlMaXN0SXRlbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZC9jYXJkQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DYXJkL0NhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZE1lZGlhL2NhcmRNZWRpYUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZE1lZGlhL0NhcmRNZWRpYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DYXJkQWN0aW9uQXJlYS9jYXJkQWN0aW9uQXJlYUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZEFjdGlvbkFyZWEvQ2FyZEFjdGlvbkFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvY29tcG9uZW50cy9UaXRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjaGFydHMvZXM2L3V0aWwvRGF0YVV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWNoYXJ0cy9lczYvdXRpbC9Mb2dVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjaGFydHMvZXM2L3V0aWwvUmVhY3RVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjaGFydHMvZXM2L2NvbXBvbmVudC9SZXNwb25zaXZlQ29udGFpbmVyLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2pzL2NvbXBvbmVudHMvQ2hhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY3NzL3BsYXRmb3JtLW9wdGlvbnMuY3NzPzkxOTIiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvdXRpbHMvU3RyaW5nVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy91dGlscy9GdW5jdGlvblV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvY29tcG9uZW50cy9Nb3N0QW5hbHl6ZWRQbGF0Zm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9jb21wb25lbnRzL09yZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DYXJkQWN0aW9ucy9jYXJkQWN0aW9uc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZEFjdGlvbnMvQ2FyZEFjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZENvbnRlbnQvY2FyZENvbnRlbnRDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NhcmRDb250ZW50L0NhcmRDb250ZW50LmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2pzL2NvbXBvbmVudHMvV2hvaXNDYXJkLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2pzL2NvbXBvbmVudHMvV2hvaXMuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvY29tcG9uZW50cy9Oc2xvb2t1cENhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvY29tcG9uZW50cy9Oc2xvb2t1cC5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9jb21wb25lbnRzL0JhY2tMaW5rSW5mb0NhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvY29tcG9uZW50cy9CYWNrTGlua0NhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvY29tcG9uZW50cy9CYWNrTGlua3MuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvY29tcG9uZW50cy9Zb3VUdWJlQ2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaW5lYXJQcm9ncmVzcy9saW5lYXJQcm9ncmVzc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGluZWFyUHJvZ3Jlc3MvTGluZWFyUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2FyZEhlYWRlci9jYXJkSGVhZGVyQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DYXJkSGVhZGVyL0NhcmRIZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvY29tcG9uZW50cy9Zb3VUdWJlVmlkZW9DYXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Zvcm1Db250cm9sTGFiZWwvZm9ybUNvbnRyb2xMYWJlbENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2xMYWJlbC9Gb3JtQ29udHJvbExhYmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N3aXRjaEJhc2VDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL1N3aXRjaEJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL0NoZWNrQm94T3V0bGluZUJsYW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2ludGVybmFsL3N2Zy1pY29ucy9DaGVja0JveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9pbnRlcm5hbC9zdmctaWNvbnMvSW5kZXRlcm1pbmF0ZUNoZWNrQm94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NoZWNrYm94L2NoZWNrYm94Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DaGVja2JveC9DaGVja2JveC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvZGVlcE9yYW5nZS5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9jb21wb25lbnRzL0NoYXREaXNwbGF5TWVzc2FnZS5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9jb21wb25lbnRzL0NoYXREaXNwbGF5LmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2pzL2NvbXBvbmVudHMvQ2hhdERpc3BsYXlBbmNob3IuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvY29tcG9uZW50cy9Zb3VUdWJlUGxhdGZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvY29tcG9uZW50cy9FbWFpbExvb2t1cENhcmQuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvY29tcG9uZW50cy9FbWFpbExvb2t1cC5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9qcy9jb21wb25lbnRzL05vdGlmaWNhdGlvbkNoaXAuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvanMvY29tcG9uZW50cy9EYXNoYm9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0cmVuZG1pY3JvL3JlYWN0LXNpZGVuYXYvZGlzdC9yZWFjdC1zaWRlbmF2LmNzcz9jMTMyIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL0NsYXNzTmFtZUdlbmVyYXRvci9DbGFzc05hbWVHZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2Zvcm1hdE11aUVycm9yTWVzc2FnZS9mb3JtYXRNdWlFcnJvck1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUZvcmtSZWYvdXNlRm9ya1JlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vc2V0UmVmL3NldFJlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlRXZlbnRDYWxsYmFjay91c2VFdmVudENhbGxiYWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9kZWJvdW5jZS9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vb3duZXJXaW5kb3cvb3duZXJXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVCcmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL3NoYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvYXBwbHlTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL2NyZWF0ZVNwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVByb3BzL3VzZVRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVByb3BzL2dldFRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2NvbXBvc2VDbGFzc2VzL2NvbXBvc2VDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3Jlc29sdmVQcm9wcy9yZXNvbHZlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2NyZWF0ZUNoYWluZWRGdW5jdGlvbi9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUlkL3VzZUlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbXVpL3N0eWxlZC1lbmdpbmUvR2xvYmFsU3R5bGVzL0dsb2JhbFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY2xhbXAvY2xhbXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jb2xvck1hbmlwdWxhdG9yLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsInRoaXMiLCJyb290U2hvdWxkRm9yd2FyZFByb3AiLCJwcm9wIiwic2xvdFNob3VsZEZvcndhcmRQcm9wIiwic3R5bGVkIiwidGhlbWVJZCIsImRlZmF1bHRUaGVtZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwia2V5cyIsImluZGV4T2YiLCJ0b1N0cmluZyIsImdldFByb3RvdHlwZU9mIiwia2luZE9mIiwiY2FjaGUiLCJ0aGluZyIsInN0ciIsInNsaWNlIiwidG9Mb3dlckNhc2UiLCJraW5kT2ZUZXN0IiwidHlwZSIsInR5cGVPZlRlc3QiLCJpc0FycmF5IiwiQXJyYXkiLCJpc1VuZGVmaW5lZCIsImlzQXJyYXlCdWZmZXIiLCJpc1N0cmluZyIsImlzRnVuY3Rpb24iLCJpc051bWJlciIsImlzT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInZhbCIsIml0ZXJhdG9yIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNGaWxlTGlzdCIsImlzVVJMU2VhcmNoUGFyYW1zIiwiZm9yRWFjaCIsIm9iaiIsImZuIiwiYWxsT3duS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJsZW4iLCJmaW5kS2V5IiwiX2tleSIsIl9nbG9iYWwiLCJnbG9iYWxUaGlzIiwic2VsZiIsIndpbmRvdyIsImdsb2JhbCIsImlzQ29udGV4dERlZmluZWQiLCJjb250ZXh0IiwiaXNUeXBlZEFycmF5IiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJpc0hUTUxGb3JtIiwiaXNSZWdFeHAiLCJyZWR1Y2VEZXNjcmlwdG9ycyIsInJlZHVjZXIiLCJkZXNjcmlwdG9ycyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJyZWR1Y2VkRGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9yIiwicmV0IiwiZGVmaW5lUHJvcGVydGllcyIsIkFMUEhBIiwiQUxQSEFCRVQiLCJESUdJVCIsIkFMUEhBX0RJR0lUIiwidG9VcHBlckNhc2UiLCJpc0FzeW5jRm4iLCJpc0J1ZmZlciIsImNvbnN0cnVjdG9yIiwiaXNGb3JtRGF0YSIsImtpbmQiLCJGb3JtRGF0YSIsImFwcGVuZCIsImlzQXJyYXlCdWZmZXJWaWV3IiwicmVzdWx0IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc0Jvb2xlYW4iLCJpc1N0cmVhbSIsInBpcGUiLCJtZXJnZSIsImNhc2VsZXNzIiwiYXNzaWduVmFsdWUiLCJ0YXJnZXRLZXkiLCJleHRlbmQiLCJhIiwiYiIsInRoaXNBcmciLCJ0cmltIiwicmVwbGFjZSIsInN0cmlwQk9NIiwiY29udGVudCIsImNoYXJDb2RlQXQiLCJpbmhlcml0cyIsInN1cGVyQ29uc3RydWN0b3IiLCJwcm9wcyIsInRvRmxhdE9iamVjdCIsInNvdXJjZU9iaiIsImRlc3RPYmoiLCJmaWx0ZXIiLCJwcm9wRmlsdGVyIiwibWVyZ2VkIiwiZW5kc1dpdGgiLCJzZWFyY2hTdHJpbmciLCJwb3NpdGlvbiIsIlN0cmluZyIsInVuZGVmaW5lZCIsImxhc3RJbmRleCIsInRvQXJyYXkiLCJhcnIiLCJmb3JFYWNoRW50cnkiLCJuZXh0IiwiZG9uZSIsInBhaXIiLCJtYXRjaEFsbCIsInJlZ0V4cCIsIm1hdGNoZXMiLCJleGVjIiwicHVzaCIsImhhc093blByb3AiLCJmcmVlemVNZXRob2RzIiwid3JpdGFibGUiLCJzZXQiLCJFcnJvciIsInRvT2JqZWN0U2V0IiwiYXJyYXlPclN0cmluZyIsImRlbGltaXRlciIsImRlZmluZSIsInNwbGl0IiwidG9DYW1lbENhc2UiLCJwMSIsInAyIiwibm9vcCIsInRvRmluaXRlTnVtYmVyIiwiZGVmYXVsdFZhbHVlIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJnZW5lcmF0ZVN0cmluZyIsInNpemUiLCJhbHBoYWJldCIsIk1hdGgiLCJyYW5kb20iLCJpc1NwZWNDb21wbGlhbnRGb3JtIiwidG9KU09OT2JqZWN0Iiwic3RhY2siLCJ2aXNpdCIsInJlZHVjZWRWYWx1ZSIsImlzVGhlbmFibGUiLCJ0aGVuIiwiY2F0Y2giLCJlIiwiZiIsInVzZVRoZW1lUHJvcHMiLCJwcm9wZXJ0aWVzIiwiZGlyZWN0aW9ucyIsIngiLCJ5IiwiYWxpYXNlcyIsIm1hcmdpblgiLCJtYXJnaW5ZIiwicGFkZGluZ1giLCJwYWRkaW5nWSIsImdldENzc1Byb3BlcnRpZXMiLCJhcmciLCJtZW1vaXplIiwiZGlyZWN0aW9uIiwibWFwIiwiZGlyIiwibWFyZ2luS2V5cyIsInBhZGRpbmdLZXlzIiwic3BhY2luZ0tleXMiLCJjcmVhdGVVbmFyeVVuaXQiLCJ0aGVtZSIsInRoZW1lS2V5IiwicHJvcE5hbWUiLCJfZ2V0UGF0aCIsInRoZW1lU3BhY2luZyIsImFicyIsImNyZWF0ZVVuYXJ5U3BhY2luZyIsImdldFZhbHVlIiwidHJhbnNmb3JtZXIiLCJwcm9wVmFsdWUiLCJ0cmFuc2Zvcm1lZCIsInJlc29sdmVDc3NQcm9wZXJ0eSIsInN0eWxlRnJvbVByb3BWYWx1ZSIsImNzc1Byb3BlcnRpZXMiLCJyZWR1Y2UiLCJhY2MiLCJjc3NQcm9wZXJ0eSIsImdldFN0eWxlRnJvbVByb3BWYWx1ZSIsIm1hcmdpbiIsInBhZGRpbmciLCJzcGFjaW5nIiwicHJvcFR5cGVzIiwiZmlsdGVyUHJvcHMiLCJBeGlvc0Vycm9yIiwibWVzc2FnZSIsImNvZGUiLCJjb25maWciLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInRvSlNPTiIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhdHVzIiwiZnJvbSIsImVycm9yIiwiY3VzdG9tUHJvcHMiLCJheGlvc0Vycm9yIiwiY2F1c2UiLCJnZXRQYXRoIiwicGF0aCIsImNoZWNrVmFycyIsInZhcnMiLCJpdGVtIiwiZ2V0U3R5bGVWYWx1ZSIsInRoZW1lTWFwcGluZyIsInRyYW5zZm9ybSIsInByb3BWYWx1ZUZpbmFsIiwidXNlclZhbHVlIiwib3B0aW9ucyIsIl91dGlscyIsImNyZWF0ZVN2Z0ljb24iLCJ2YWx1ZXMiLCJ4cyIsInNtIiwibWQiLCJsZyIsInhsIiwiZGVmYXVsdEJyZWFrcG9pbnRzIiwidXAiLCJoYW5kbGVCcmVha3BvaW50cyIsInRoZW1lQnJlYWtwb2ludHMiLCJicmVha3BvaW50cyIsImluZGV4IiwiYnJlYWtwb2ludCIsImNzc0tleSIsImNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCIsImJyZWFrcG9pbnRzSW5wdXQiLCJfYnJlYWtwb2ludHNJbnB1dCRrZXkiLCJyZW1vdmVVbnVzZWRCcmVha3BvaW50cyIsImJyZWFrcG9pbnRLZXlzIiwic3R5bGUiLCJicmVha3BvaW50T3V0cHV0IiwibWVyZ2VCcmVha3BvaW50c0luT3JkZXIiLCJzdHlsZXMiLCJlbXB0eUJyZWFrcG9pbnRzIiwibWVyZ2VkT3V0cHV0IiwicHJldiIsInJlc29sdmVCcmVha3BvaW50VmFsdWVzIiwiYnJlYWtwb2ludFZhbHVlcyIsImJhc2UiLCJjdXN0b21CYXNlIiwiYnJlYWtwb2ludHNLZXlzIiwiY29tcHV0ZUJyZWFrcG9pbnRzQmFzZSIsInByZXZpb3VzIiwiZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcyIsInNsb3QiLCJnZW5lcmF0ZVV0aWxpdHlDbGFzcyIsImdlbmVyYXRlVXRpbGl0eUNsYXNzZXMiLCJfZXhjbHVkZWQiLCJTdmdJY29uUm9vdCIsIm92ZXJyaWRlc1Jlc29sdmVyIiwib3duZXJTdGF0ZSIsInJvb3QiLCJjb2xvciIsImNhcGl0YWxpemUiLCJmb250U2l6ZSIsIl90aGVtZSR0cmFuc2l0aW9ucyIsIl90aGVtZSR0cmFuc2l0aW9ucyRjciIsIl90aGVtZSR0cmFuc2l0aW9uczIiLCJfdGhlbWUkdHlwb2dyYXBoeSIsIl90aGVtZSR0eXBvZ3JhcGh5JHB4VCIsIl90aGVtZSR0eXBvZ3JhcGh5MiIsIl90aGVtZSR0eXBvZ3JhcGh5MiRweCIsIl90aGVtZSR0eXBvZ3JhcGh5MyIsIl90aGVtZSR0eXBvZ3JhcGh5MyRweCIsIl9wYWxldHRlJG93bmVyU3RhdGUkYyIsIl9wYWxldHRlIiwiX3BhbGV0dGUyIiwiX3BhbGV0dGUzIiwidXNlclNlbGVjdCIsIndpZHRoIiwiaGVpZ2h0IiwiZGlzcGxheSIsImZpbGwiLCJoYXNTdmdBc0NoaWxkIiwiZmxleFNocmluayIsInRyYW5zaXRpb24iLCJ0cmFuc2l0aW9ucyIsImR1cmF0aW9uIiwic2hvcnRlciIsImluaGVyaXQiLCJzbWFsbCIsInR5cG9ncmFwaHkiLCJweFRvUmVtIiwibWVkaXVtIiwibGFyZ2UiLCJwYWxldHRlIiwibWFpbiIsImFjdGlvbiIsImFjdGl2ZSIsImRpc2FibGVkIiwiaW5Qcm9wcyIsInJlZiIsImNoaWxkcmVuIiwiY2xhc3NOYW1lIiwiY29tcG9uZW50IiwiaHRtbENvbG9yIiwiaW5oZXJpdFZpZXdCb3giLCJ0aXRsZUFjY2VzcyIsInZpZXdCb3giLCJvdGhlciIsImluc3RhbmNlRm9udFNpemUiLCJtb3JlIiwiY2xhc3NlcyIsInNsb3RzIiwiY29tcG9zZUNsYXNzZXMiLCJ1c2VVdGlsaXR5Q2xhc3NlcyIsImFzIiwiY2xzeCIsImZvY3VzYWJsZSIsInJvbGUiLCJtdWlOYW1lIiwiZGlzcGxheU5hbWUiLCJDb21wb25lbnQiLCJpc0Jyb3dzZXIiLCJFbW90aW9uQ2FjaGVDb250ZXh0IiwiSFRNTEVsZW1lbnQiLCJQcm92aWRlciIsIndpdGhFbW90aW9uQ2FjaGUiLCJmdW5jIiwiVGhlbWVDb250ZXh0IiwidHlwZVByb3BOYW1lIiwiY3JlYXRlRW1vdGlvblByb3BzIiwibmV3UHJvcHMiLCJJbnNlcnRpb24iLCJfcmVmIiwic2VyaWFsaXplZCIsImlzU3RyaW5nVGFnIiwiRW1vdGlvbiQxIiwiY3NzUHJvcCIsImNzcyIsInJlZ2lzdGVyZWQiLCJXcmFwcGVkQ29tcG9uZW50IiwicmVnaXN0ZXJlZFN0eWxlcyIsImdldFJlZ2lzdGVyZWRTdHlsZXMiLCJjbGFzc05hbWVzIiwicmF3Q2xhc3NOYW1lIiwicmVnaXN0ZXJTdHlsZXMiLCJpbnNlcnRTdHlsZXMiLCJpbnNlcnRlZCIsImN1cnJlbnQiLCJpbnNlcnQiLCJzaGVldCIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZXJyIiwiY29uc29sZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJkZWZhdWx0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfanN4UnVudGltZSIsImpzeCIsImNsb25lIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayIsInVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayIsInVuaXRsZXNzS2V5cyIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibXNHcmlkUm93IiwibXNHcmlkUm93U3BhbiIsIm1zR3JpZENvbHVtbiIsIm1zR3JpZENvbHVtblNwYW4iLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIldlYmtpdExpbmVDbGFtcCIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImh5cGhlbmF0ZVJlZ2V4IiwiYW5pbWF0aW9uUmVnZXgiLCJpc0N1c3RvbVByb3BlcnR5IiwiaXNQcm9jZXNzYWJsZVZhbHVlIiwicHJvY2Vzc1N0eWxlTmFtZSIsInN0eWxlTmFtZSIsIm1hdGNoIiwiY3Vyc29yIiwiaGFuZGxlSW50ZXJwb2xhdGlvbiIsIm1lcmdlZFByb3BzIiwiaW50ZXJwb2xhdGlvbiIsIl9fZW1vdGlvbl9zdHlsZXMiLCJhbmltIiwic3RyaW5nIiwiaW50ZXJwb2xhdGVkIiwiX2kiLCJjcmVhdGVTdHJpbmdGcm9tT2JqZWN0IiwicHJldmlvdXNDdXJzb3IiLCJjYWNoZWQiLCJsYWJlbFBhdHRlcm4iLCJhcmdzIiwic3RyaW5nTW9kZSIsInN0cmluZ3MiLCJyYXciLCJpZGVudGlmaWVyTmFtZSIsImsiLCJoIiwicmVhY3RQcm9wc1JlZ2V4IiwiaXNQcm9wVmFsaWQiLCJ0ZXN0IiwidGVzdE9taXRQcm9wc09uU3RyaW5nVGFnIiwidGVzdE9taXRQcm9wc09uQ29tcG9uZW50IiwiZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wIiwidGFnIiwiY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyIsImlzUmVhbCIsInNob3VsZEZvcndhcmRQcm9wIiwib3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wIiwiX19lbW90aW9uX2ZvcndhcmRQcm9wIiwibmV3U3R5bGVkIiwiY3JlYXRlU3R5bGVkIiwidGFyZ2V0Q2xhc3NOYW1lIiwiX19lbW90aW9uX3JlYWwiLCJiYXNlVGFnIiwiX19lbW90aW9uX2Jhc2UiLCJsYWJlbCIsImRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsInNob3VsZFVzZUFzIiwiU3R5bGVkIiwiRmluYWxUYWciLCJjbGFzc0ludGVycG9sYXRpb25zIiwiY29uY2F0IiwiZmluYWxTaG91bGRGb3J3YXJkUHJvcCIsImRlZmF1bHRQcm9wcyIsIndpdGhDb21wb25lbnQiLCJuZXh0VGFnIiwibmV4dE9wdGlvbnMiLCJ0YWdOYW1lIiwiaW50ZXJuYWxfcHJvY2Vzc1N0eWxlcyIsInByb2Nlc3NvciIsImlzVmlzaXRhYmxlIiwicmVtb3ZlQnJhY2tldHMiLCJyZW5kZXJLZXkiLCJkb3RzIiwidG9rZW4iLCJqb2luIiwicHJlZGljYXRlcyIsImZvcm1EYXRhIiwiVHlwZUVycm9yIiwibWV0YVRva2VucyIsImluZGV4ZXMiLCJvcHRpb24iLCJ2aXNpdG9yIiwiZGVmYXVsdFZpc2l0b3IiLCJ1c2VCbG9iIiwiQmxvYiIsImNvbnZlcnRWYWx1ZSIsInRvSVNPU3RyaW5nIiwiQnVmZmVyIiwiSlNPTiIsInN0cmluZ2lmeSIsInNvbWUiLCJpc0ZsYXRBcnJheSIsImVsIiwiZXhwb3NlZEhlbHBlcnMiLCJidWlsZCIsInBvcCIsIkdsb2JhbCIsInNlcmlhbGl6ZWROYW1lcyIsInNlcmlhbGl6ZWRTdHlsZXMiLCJzaG91bGRDYWNoZSIsImNvbXBhdCIsInJ1bGVzIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJub25jZSIsInNoZWV0UmVmIiwiY29udGFpbmVyIiwic3BlZWR5IiwiaXNTcGVlZHkiLCJyZWh5ZHJhdGluZyIsIm5vZGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0YWdzIiwiYmVmb3JlIiwic2V0QXR0cmlidXRlIiwiaHlkcmF0ZSIsImZsdXNoIiwic2hlZXRSZWZDdXJyZW50IiwiZWxlbWVudCIsIm5leHRFbGVtZW50U2libGluZyIsIl9sZW4iLCJrZXlmcmFtZXMiLCJpbnNlcnRhYmxlIiwiY29udHJvbGxlZCIsImRlZmF1bHRQcm9wIiwic3RhdGUiLCJpc0NvbnRyb2xsZWQiLCJ2YWx1ZVN0YXRlIiwic2V0VmFsdWUiLCJuZXdWYWx1ZSIsIjUwIiwiMTAwIiwiMjAwIiwiMzAwIiwiNDAwIiwiNTAwIiwiNjAwIiwiNzAwIiwiODAwIiwiOTAwIiwiQTEwMCIsIkEyMDAiLCJBNDAwIiwiQTcwMCIsImhhZEtleWJvYXJkRXZlbnQiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseSIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCIsImlucHV0VHlwZXNXaGl0ZWxpc3QiLCJ0ZXh0Iiwic2VhcmNoIiwidXJsIiwidGVsIiwiZW1haWwiLCJwYXNzd29yZCIsImRhdGUiLCJtb250aCIsIndlZWsiLCJ0aW1lIiwiZGF0ZXRpbWUiLCJoYW5kbGVLZXlEb3duIiwiZXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsImhhbmRsZVBvaW50ZXJEb3duIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlTdGF0ZSIsImlzRm9jdXNWaXNpYmxlIiwicmVhZE9ubHkiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5IiwiZG9jIiwib3duZXJEb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJpc0ZvY3VzVmlzaWJsZVJlZiIsIm9uRm9jdXMiLCJvbkJsdXIiLCJzdGFydCIsInN5c3RlbURlZmF1bHRUaGVtZSIsImhhbmRsZXJzIiwiYm9yZGVyVHJhbnNmb3JtIiwiY3JlYXRlQm9yZGVyU3R5bGUiLCJib3JkZXIiLCJib3JkZXJUb3AiLCJib3JkZXJSaWdodCIsImJvcmRlckJvdHRvbSIsImJvcmRlckxlZnQiLCJib3JkZXJDb2xvciIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwib3V0bGluZSIsIm91dGxpbmVDb2xvciIsImJvcmRlclJhZGl1cyIsImdhcCIsImNvbHVtbkdhcCIsInJvd0dhcCIsInBhbGV0dGVUcmFuc2Zvcm0iLCJzaXppbmdUcmFuc2Zvcm0iLCJtYXhXaWR0aCIsIl9wcm9wcyR0aGVtZSIsIl9wcm9wcyR0aGVtZTIiLCJ1bml0IiwibWluV2lkdGgiLCJtYXhIZWlnaHQiLCJtaW5IZWlnaHQiLCJkZWZhdWx0U3hDb25maWciLCJiZ2NvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwicHQiLCJwciIsInBiIiwicGwiLCJweCIsInB5IiwicGFkZGluZ1RvcCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdJbmxpbmUiLCJwYWRkaW5nSW5saW5lU3RhcnQiLCJwYWRkaW5nSW5saW5lRW5kIiwicGFkZGluZ0Jsb2NrIiwicGFkZGluZ0Jsb2NrU3RhcnQiLCJwYWRkaW5nQmxvY2tFbmQiLCJtdCIsIm1yIiwibWIiLCJtbCIsIm14IiwibXkiLCJtYXJnaW5Ub3AiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5JbmxpbmUiLCJtYXJnaW5JbmxpbmVTdGFydCIsIm1hcmdpbklubGluZUVuZCIsIm1hcmdpbkJsb2NrIiwibWFyZ2luQmxvY2tTdGFydCIsIm1hcmdpbkJsb2NrRW5kIiwiZGlzcGxheVByaW50Iiwib3ZlcmZsb3ciLCJ0ZXh0T3ZlcmZsb3ciLCJ2aXNpYmlsaXR5Iiwid2hpdGVTcGFjZSIsImZsZXhCYXNpcyIsImZsZXhEaXJlY3Rpb24iLCJmbGV4V3JhcCIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImFsaWduQ29udGVudCIsImFsaWduU2VsZiIsImp1c3RpZnlJdGVtcyIsImp1c3RpZnlTZWxmIiwiZ3JpZEF1dG9GbG93IiwiZ3JpZEF1dG9Db2x1bW5zIiwiZ3JpZEF1dG9Sb3dzIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsImdyaWRUZW1wbGF0ZVJvd3MiLCJncmlkVGVtcGxhdGVBcmVhcyIsImdyaWRBcmVhIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiYm94U2hhZG93IiwiYm94U2l6aW5nIiwiZm9udEZhbWlseSIsImZvbnRTdHlsZSIsImxldHRlclNwYWNpbmciLCJ0ZXh0VHJhbnNmb3JtIiwidGV4dEFsaWduIiwibXVpTmFtZXMiLCJfbXVpTmFtZSIsIl9lbGVtZW50JHR5cGUiLCJfcGF5bG9hZCIsImJhc2VHZXRUYWciLCJpc09iamVjdExpa2UiLCJiYXNlR2V0Iiwid2Vha01lbW9pemUiLCJXZWFrTWFwIiwiaGFzIiwiaXNFbXB0eSIsInByb3BzVG9DbGFzc0tleSIsInZhcmlhbnQiLCJjbGFzc0tleSIsInNvcnQiLCJ0cmFuc2Zvcm1WYXJpYW50cyIsInZhcmlhbnRzIiwibnVtT2ZDYWxsYmFja3MiLCJ2YXJpYW50c1N0eWxlcyIsImRlZmluaXRpb24iLCJ2YXJpYW50c1Jlc29sdmVyIiwiaXNNYXRjaCIsInByb3BzVG9DaGVjayIsImNyZWF0ZVRoZW1lIiwibG93ZXJjYXNlRmlyc3RMZXR0ZXIiLCJjaGFyQXQiLCJyZXNvbHZlVGhlbWUiLCJkZWZhdWx0T3ZlcnJpZGVzUmVzb2x2ZXIiLCJtdWlTdHlsZWRGdW5jdGlvblJlc29sdmVyIiwic3R5bGVkQXJnIiwicmVzb2x2ZWRTdHlsZXMiLCJvcHRpb25hbFZhcmlhbnRzIiwiaW5wdXQiLCJzeXN0ZW1TeCIsInN0eWxlRnVuY3Rpb25TeCIsIl9fbXVpX3N5c3RlbVN4IiwiaW5wdXRPcHRpb25zIiwiY29tcG9uZW50TmFtZSIsImNvbXBvbmVudFNsb3QiLCJza2lwVmFyaWFudHNSZXNvbHZlciIsImlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIiLCJza2lwU3giLCJpbnB1dFNraXBTeCIsInNob3VsZEZvcndhcmRQcm9wT3B0aW9uIiwiZGVmYXVsdFN0eWxlZFJlc29sdmVyIiwibXVpU3R5bGVkUmVzb2x2ZXIiLCJzdHlsZUFyZyIsImV4cHJlc3Npb25zIiwiZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lIiwic3R5bGVzQXJnIiwic3R5bGVkQXJnVmFyaWFudHMiLCJ0cmFuc2Zvcm1lZFN0eWxlc0FyZyIsInZhcmlhbnRTdHlsZSIsImRlZXBtZXJnZSIsInRyYW5zZm9ybWVkU3R5bGVBcmciLCJzdHlsZU92ZXJyaWRlcyIsImNvbXBvbmVudHMiLCJnZXRTdHlsZU92ZXJyaWRlcyIsInJlc29sdmVkU3R5bGVPdmVycmlkZXMiLCJlbnRyaWVzIiwic2xvdEtleSIsInNsb3RTdHlsZSIsIl90aGVtZSRjb21wb25lbnRzIiwidGhlbWVWYXJpYW50cyIsInRoZW1lVmFyaWFudHNSZXNvbHZlciIsImdldFZhcmlhbnRTdHlsZXMiLCJudW1PZkN1c3RvbUZuc0FwcGxpZWQiLCJwbGFjZWhvbGRlcnMiLCJ3aXRoQ29uZmlnIiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwiRnVuY3Rpb24iLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsInN5bVRvU3RyaW5nVGFnIiwibmF0aXZlQ3JlYXRlIiwiZ2V0TmF0aXZlIiwiZXEiLCJhcnJheSIsImlzS2V5YWJsZSIsImRhdGEiLCJfX2RhdGFfXyIsImVhc2luZyIsImVhc2VJbk91dCIsImVhc2VPdXQiLCJlYXNlSW4iLCJzaGFycCIsInNob3J0ZXN0Iiwic2hvcnQiLCJzdGFuZGFyZCIsImNvbXBsZXgiLCJlbnRlcmluZ1NjcmVlbiIsImxlYXZpbmdTY3JlZW4iLCJmb3JtYXRNcyIsIm1pbGxpc2Vjb25kcyIsInJvdW5kIiwiZ2V0QXV0b0hlaWdodER1cmF0aW9uIiwiY29uc3RhbnQiLCJjcmVhdGVUcmFuc2l0aW9ucyIsImlucHV0VHJhbnNpdGlvbnMiLCJtZXJnZWRFYXNpbmciLCJtZXJnZWREdXJhdGlvbiIsImR1cmF0aW9uT3B0aW9uIiwiZWFzaW5nT3B0aW9uIiwiZGVsYXkiLCJhbmltYXRlZFByb3AiLCJjb250ZXh0VGhlbWUiLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImxpc3QiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpZCIsImNvdW50IiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJzcGxpY2UiLCJfc2xpY2VkVG9BcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsImFycjIiLCJfaXRlbSIsImNzc01hcHBpbmciLCJiYXNlNjQiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiU3R5bGVTaGVldCIsIl90aGlzIiwiX2luc2VydFRhZyIsImluc2VydGlvblBvaW50IiwibmV4dFNpYmxpbmciLCJwcmVwZW5kIiwiY3RyIiwiX3Byb3RvIiwibm9kZXMiLCJydWxlIiwiY3JlYXRlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldHMiLCJvd25lck5vZGUiLCJzaGVldEZvclRhZyIsImluc2VydFJ1bGUiLCJjc3NSdWxlcyIsImciLCJmcm9tQ2hhckNvZGUiLCJPIiwiaiIsInoiLCJDIiwiQSIsIk0iLCJTIiwicSIsIkIiLCJEIiwiRSIsIkYiLCJHIiwiSCIsIkkiLCJKIiwicGFyZW50IiwibGluZSIsImNvbHVtbiIsInJldHVybiIsIksiLCJQIiwiUSIsIlIiLCJUIiwiVSIsIlYiLCJXIiwiWCIsInJlIiwiWiIsImVlIiwiYWUiLCJuZSIsImNlIiwic2UiLCJ1IiwidiIsInciLCIkIiwidWUiLCJpZSIsInRlIiwib2UiLCJsZSIsInBlIiwiYmVnaW4iLCJwb2ludHMiLCJjaGFyYWN0ZXIiLCJwYXJzZWQiLCJmaXhlZEVsZW1lbnRzIiwiaXNJbXBsaWNpdFJ1bGUiLCJwYXJlbnRSdWxlcyIsInJlbW92ZUxhYmVsIiwiZGVmYXVsdFN0eWxpc1BsdWdpbnMiLCJjYWxsYmFjayIsInByZWZpeCIsInNzclN0eWxlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZXRBdHRyaWJ1dGUiLCJzdHlsaXNQbHVnaW5zIiwiX2luc2VydCIsIm5vZGVzVG9IeWRyYXRlIiwiYXR0cmliIiwib21uaXByZXNlbnRQbHVnaW5zIiwiY3VycmVudFNoZWV0IiwiZmluYWxpemluZ1BsdWdpbnMiLCJzZXJpYWxpemVyIiwic2VsZWN0b3IiLCJ2YWxpZGF0b3IiLCJyZWFzb24iLCJ1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IiLCJjb25maWd1cmUiLCJnZW5lcmF0b3IiLCJDbGFzc05hbWVHZW5lcmF0b3IiLCJjb21wb25lbnROYW1lSW5FcnJvciIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0UHJvdG90eXBlIiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidGVzdDEiLCJ0ZXN0MiIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsInRvIiwiYmFzZUlzTmF0aXZlIiwiZ2V0VGhlbWVWYWx1ZSIsIl90aGVtZSR1bnN0YWJsZV9zeENvbiIsInN4IiwidW5zdGFibGVfc3hDb25maWciLCJ0cmF2ZXJzZSIsInN4SW5wdXQiLCJzeE9iamVjdCIsInN0eWxlS2V5IiwibWF5YmVGbiIsImJyZWFrcG9pbnRzVmFsdWVzIiwib2JqZWN0cyIsImFsbEtleXMiLCJ1bmlvbiIsIlNldCIsImV2ZXJ5Iiwib2JqZWN0c0hhdmVTYW1lS2V5cyIsInVuc3RhYmxlX2NyZWF0ZVN0eWxlRnVuY3Rpb25TeCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIl9fcHJvdG9fXyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiY3giLCJjeSIsImRlYm91bmNlIiwid2FpdCIsImxlYWRpbmciLCJ0cmFpbGluZyIsImJsYWNrIiwid2hpdGUiLCJsaWdodCIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJkaXZpZGVyIiwiYmFja2dyb3VuZCIsInBhcGVyIiwiaG92ZXIiLCJob3Zlck9wYWNpdHkiLCJzZWxlY3RlZCIsInNlbGVjdGVkT3BhY2l0eSIsImRpc2FibGVkQmFja2dyb3VuZCIsImRpc2FibGVkT3BhY2l0eSIsImZvY3VzIiwiZm9jdXNPcGFjaXR5IiwiYWN0aXZhdGVkT3BhY2l0eSIsImRhcmsiLCJpY29uIiwiYWRkTGlnaHRPckRhcmsiLCJpbnRlbnQiLCJzaGFkZSIsInRvbmFsT2Zmc2V0IiwidG9uYWxPZmZzZXRMaWdodCIsInRvbmFsT2Zmc2V0RGFyayIsImNyZWF0ZVBhbGV0dGUiLCJjb250cmFzdFRocmVzaG9sZCIsImdldERlZmF1bHRQcmltYXJ5IiwiZ2V0RGVmYXVsdFNlY29uZGFyeSIsInJlZCIsImdldERlZmF1bHRFcnJvciIsImluZm8iLCJnZXREZWZhdWx0SW5mbyIsInN1Y2Nlc3MiLCJnZXREZWZhdWx0U3VjY2VzcyIsIndhcm5pbmciLCJnZXREZWZhdWx0V2FybmluZyIsImdldENvbnRyYXN0VGV4dCIsImF1Z21lbnRDb2xvciIsIm1haW5TaGFkZSIsImxpZ2h0U2hhZGUiLCJkYXJrU2hhZGUiLCJjb250cmFzdFRleHQiLCJtb2RlcyIsImNvbW1vbiIsImdyZXkiLCJjYXNlQWxsQ2FwcyIsImRlZmF1bHRGb250RmFtaWx5IiwiY3JlYXRlVHlwb2dyYXBoeSIsImZvbnRXZWlnaHRMaWdodCIsImZvbnRXZWlnaHRSZWd1bGFyIiwiZm9udFdlaWdodE1lZGl1bSIsImZvbnRXZWlnaHRCb2xkIiwiaHRtbEZvbnRTaXplIiwiYWxsVmFyaWFudHMiLCJweFRvUmVtMiIsImNvZWYiLCJidWlsZFZhcmlhbnQiLCJjYXNpbmciLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJzdWJ0aXRsZTEiLCJzdWJ0aXRsZTIiLCJib2R5MSIsImJvZHkyIiwiYnV0dG9uIiwiY2FwdGlvbiIsIm92ZXJsaW5lIiwiY3JlYXRlU2hhZG93IiwibW9iaWxlU3RlcHBlciIsImZhYiIsInNwZWVkRGlhbCIsImFwcEJhciIsImRyYXdlciIsIm1vZGFsIiwic25hY2tiYXIiLCJ0b29sdGlwIiwibWl4aW5zSW5wdXQiLCJwYWxldHRlSW5wdXQiLCJ0cmFuc2l0aW9uc0lucHV0IiwidHlwb2dyYXBoeUlucHV0Iiwic3lzdGVtVGhlbWUiLCJtdWlUaGVtZSIsInRvb2xiYXIiLCJzaGFkb3dzIiwiYXJndW1lbnQiLCJ1bnN0YWJsZV9zeCIsIlVOSU5JVElBTElaRUQiLCJFTVBUWSIsIlRpbWVvdXQiLCJjdXJyZW50SWQiLCJjbGVhciIsImNsZWFyVGltZW91dCIsImRpc3Bvc2VFZmZlY3QiLCJzZXRUaW1lb3V0IiwidXNlVGltZW91dCIsInRpbWVvdXQiLCJpbml0IiwiaW5pdEFyZyIsInVzZUxhenlSZWYiLCJvdXRwdXQiLCJkZWVwQ2xvbmUiLCJ1c2VFbmhhbmNlZEVmZmVjdCIsImZvciIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJyZWZzIiwiaXNSZWFjdENvbXBvbmVudCIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkwiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIiQkdHlwZW9mIiwiX293bmVyIiwia2V5UHJlZml4IiwiZXNjYXBlIiwiYWEiLCJOIiwiWSIsImJhIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwic3VzcGVuc2UiLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiQ2hpbGRyZW4iLCJvbmx5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidmVyc2lvbiIsIm9uRXJyb3IiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJsYSIsIm1hIiwibmEiLCJvYSIsImN1cnJlbnRUYXJnZXQiLCJrYSIsInBhIiwicWEiLCJyYSIsInNhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJ0YSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidWEiLCJyZWdpc3RyYXRpb25OYW1lIiwidmEiLCJ3YSIsImRlcGVuZGVuY2llcyIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsInN0YXRlTm9kZSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJVYSIsIlZhIiwieGxpbmtIcmVmIiwiV2EiLCJYYSIsIlNhIiwiaXNOYU4iLCJUYSIsIlJhIiwic2V0QXR0cmlidXRlTlMiLCJZYSIsIlphIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJuYiIsInFiIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJyYiIsInNiIiwibm9kZU5hbWUiLCJ4YiIsIl92YWx1ZVRyYWNrZXIiLCJjb25maWd1cmFibGUiLCJzdG9wVHJhY2tpbmciLCJ0YiIsInliIiwiY2hlY2tlZCIsInpiIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJBYiIsImluaXRpYWxWYWx1ZSIsIkJiIiwiQ2IiLCJEYiIsIkViIiwiYWN0aXZlRWxlbWVudCIsIkdiIiwiRmIiLCJIYiIsImRlZmF1bHRTZWxlY3RlZCIsIkliIiwiSmIiLCJLYiIsIkxiIiwidGV4dENvbnRlbnQiLCJNYiIsIk5iIiwiT2IiLCJQYiIsIlFiIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJSYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwiU2IiLCJUYiIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlViIiwiVmIiLCJXYiIsImFuaW1hdGlvbiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsIk1hcCIsImNjIiwiZGMiLCJhbHRlcm5hdGUiLCJlZmZlY3RUYWciLCJlYyIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiZmMiLCJoYyIsImNoaWxkIiwic2libGluZyIsImdjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJtYyIsIm5jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwib2MiLCJwYyIsInFjIiwidG9wTGV2ZWxUeXBlIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwicmMiLCJldmVudFN5c3RlbUZsYWdzIiwic2MiLCJjb250YWluZXJJbmZvIiwidGMiLCJ1YyIsInZjIiwid2MiLCJ4YyIsInljIiwiemMiLCJBYyIsIkJjIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJLYyIsImJsb2NrZWRPbiIsIkxjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwiTWMiLCJOYyIsIlBjIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJRYyIsIlJjIiwiU2MiLCJUYyIsInNoaWZ0IiwiVWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJWYyIsIldjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJldmVudFByaW9yaXR5IiwiYmQiLCJjZCIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsIk9jIiwiamQiLCJsaW5lQ2xhbXAiLCJrZCIsImxkIiwic2V0UHJvcGVydHkiLCJzdWJzdHJpbmciLCJuZCIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIm9kIiwicGQiLCJpcyIsInFkIiwicmQiLCJzZCIsInRkIiwiYm9keSIsInVkIiwidmQiLCJvZmZzZXQiLCJ4ZCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwieWQiLCJjb250ZW50RWRpdGFibGUiLCJEZCIsIkVkIiwiRmQiLCJhdXRvRm9jdXMiLCJHZCIsIkhkIiwiSWQiLCJKZCIsIktkIiwicHJldmlvdXNTaWJsaW5nIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJQZCIsIlFkIiwiUmQiLCJTZCIsIlRkIiwiZGlzcGF0Y2hDb25maWciLCJVZCIsIl90YXJnZXRJbnN0IiwiVmQiLCJXZCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwiYmUiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJldmVudFBvb2wiLCJmZSIsImRlc3RydWN0b3IiLCJkZSIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJnZSIsImhlIiwiamUiLCJrZSIsImRvY3VtZW50TW9kZSIsIm1lIiwiYmVmb3JlSW5wdXQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInFlIiwia2V5Q29kZSIsImRldGFpbCIsInZlIiwibG9jYWxlIiwid2hpY2giLCJjaGFyIiwid2UiLCJyYW5nZSIsInhlIiwieWUiLCJjaGFuZ2UiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiZGV0YWNoRXZlbnQiLCJIZSIsIkllIiwiYXR0YWNoRXZlbnQiLCJKZSIsIktlIiwiTGUiLCJNZSIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJOZSIsInZpZXciLCJPZSIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZSIsImdldE1vZGlmaWVyU3RhdGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIldlIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlhlIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJZZSIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsInNlbGVjdCIsImVmIiwiZmYiLCJnZiIsImhmIiwiamYiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImtmIiwib25TZWxlY3QiLCJsZiIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJtZiIsImNsaXBib2FyZERhdGEiLCJuZiIsIm9mIiwiY2hhckNvZGUiLCJwZiIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJxZiIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJyZiIsInJlcGVhdCIsInNmIiwiZGF0YVRyYW5zZmVyIiwidGYiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwidWYiLCJ2ZiIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwid2YiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkRmIiwiRWYiLCJGZiIsImdldENoaWxkQ29udGV4dCIsIkdmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJIZiIsIklmIiwiSmYiLCJLZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiTGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJNZiIsInVuc3RhYmxlX25vdyIsIk5mIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJPZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiUGYiLCJRZiIsIlJmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJTZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlRmIiwiVWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJtZyIsIm5nIiwib2ciLCJwZyIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJxZyIsImZpcnN0Q29udGV4dCIsImV4cGlyYXRpb25UaW1lIiwicmciLCJzZyIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ0ZyIsInVnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJiYXNlUXVldWUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInZnIiwid2ciLCJzdXNwZW5zZUNvbmZpZyIsInBheWxvYWQiLCJ4ZyIsInlnIiwiemciLCJjYSIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkpnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIkdnIiwiSGciLCJJZyIsIktnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiTGciLCJNZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk5nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJPZyIsIlBnIiwiX3N0cmluZ1JlZiIsIlFnIiwiUmciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiU2ciLCJUZyIsImVsZW1lbnRUeXBlIiwiVWciLCJpbXBsZW1lbnRhdGlvbiIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZG9jdW1lbnRFbGVtZW50IiwiZWgiLCJmaCIsImdoIiwiaGgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJpaCIsInJlc3BvbmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJxdWV1ZSIsInVoIiwidmgiLCJ3aCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiZGVzdHJveSIsImRlcHMiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJOaCIsInJlYWRDb250ZXh0IiwidXNlUmVzcG9uZGVyIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJwZW5kaW5nUHJvcHMiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwiZWkiLCJmaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImdpIiwiaGkiLCJwZW5kaW5nQ29udGV4dCIsIm5pIiwicGkiLCJxaSIsImlpIiwicmV0cnlUaW1lIiwiamkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwia2kiLCJsaSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsRXhwaXJhdGlvbiIsInRhaWxNb2RlIiwibWkiLCJyaSIsInNpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIkJpIiwiV2Vha1NldCIsIkNpIiwiRmkiLCJFaSIsIkdpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJIaSIsIklpIiwiSmkiLCJLaSIsIkxpIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJEaSIsIk1pIiwiTmkiLCJPaSIsIlBpIiwiUWkiLCJpbnN0YW5jZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJSaSIsIlNpIiwiVGkiLCJVaSIsIlZpIiwiYWRkIiwiV2kiLCJYaSIsIllpIiwiWmkiLCIkaSIsImNvbXBvbmVudERpZENhdGNoIiwiYWoiLCJjb21wb25lbnRTdGFjayIsIlJqIiwiYmoiLCJjZWlsIiwiY2oiLCJkaiIsImtqIiwibGoiLCJtaiIsIm5qIiwib2oiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ3aiIsInRpbWVvdXRNcyIsInhqIiwieWoiLCJ6aiIsImxhc3RFeHBpcmVkVGltZSIsIkFqIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQaW5nZWRUaW1lIiwibmV4dEtub3duUGVuZGluZ0xldmVsIiwiY2FsbGJhY2tFeHBpcmF0aW9uVGltZSIsImNhbGxiYWNrUHJpb3JpdHkiLCJjYWxsYmFja05vZGUiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIklqIiwidGltZW91dEhhbmRsZSIsIkpqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIktqIiwiTWoiLCJOaiIsInBpbmdDYWNoZSIsIk9qIiwidWIiLCJQaiIsIlhjIiwiUWoiLCJTaiIsImZpcnN0U3VzcGVuZGVkVGltZSIsInJhbmdlQ291bnQiLCJ3YiIsImFjdGl2ZUVsZW1lbnREZXRhY2hlZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJUaiIsIndkIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIm1pbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJ2YiIsIlVqIiwiVmoiLCJXaiIsImhpZGRlbiIsIm9iIiwiWGoiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJaaiIsInBlbmRpbmdDaGlsZHJlbiIsImFrIiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsIkpjIiwiX2ludGVybmFsUm9vdCIsImdrIiwiaWsiLCJoYXNBdHRyaWJ1dGUiLCJoayIsImprIiwia2siLCJ1bm1vdW50IiwiZm9ybSIsIkxqIiwibGsiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiWWoiLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJqc3hzIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiTGF6eSIsIlBvcnRhbCIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsImllZWU3NTQiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJmcm9tU3RyaW5nIiwiY29weSIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJzbG93VG9TdHJpbmciLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiYXJyYXlJbmRleE9mIiwibGFzdEluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJyZWFkIiwiYnVmIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImZyb21CeXRlQXJyYXkiLCJyZXMiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZm9vIiwic3ViYXJyYXkiLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwicG9zIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiZXF1YWxzIiwiaW5zcGVjdCIsIm1heCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsIm91dCIsInRvSGV4IiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5Iiwic3RyaW5ndHJpbSIsImJhc2U2NGNsZWFuIiwic3JjIiwiZHN0IiwiYjY0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRtcCIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwibnVtIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsImxvZyIsIkxOMiIsIlN1c3BlbnNlTGlzdCIsImlzU3VzcGVuc2VMaXN0IiwiZ2V0TW9kdWxlSWQiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImJpZ2ludCIsImJvb2wiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJ0b051bWJlciIsIm5hdGl2ZU1heCIsIm5hdGl2ZU1pbiIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiY2FuY2VsIiwiYmFzZVRyaW0iLCJpc1N5bWJvbCIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50IiwiaXNCaW5hcnkiLCJ0cmltbWVkRW5kSW5kZXgiLCJyZVRyaW1TdGFydCIsInJlV2hpdGVzcGFjZSIsIm9iamVjdFByb3RvIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpc093biIsInVubWFza2VkIiwiY2FzdFBhdGgiLCJ0b0tleSIsImlzS2V5Iiwic3RyaW5nVG9QYXRoIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsIm1lbW9pemVDYXBwZWQiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwicXVvdGUiLCJzdWJTdHJpbmciLCJNYXBDYWNoZSIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsIm1hcENhY2hlQ2xlYXIiLCJtYXBDYWNoZURlbGV0ZSIsIm1hcENhY2hlR2V0IiwibWFwQ2FjaGVIYXMiLCJtYXBDYWNoZVNldCIsImVudHJ5IiwiSGFzaCIsIkxpc3RDYWNoZSIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJpc01hc2tlZCIsInRvU291cmNlIiwicmVJc0hvc3RDdG9yIiwiZnVuY1Byb3RvIiwiZnVuY1RvU3RyaW5nIiwicmVJc05hdGl2ZSIsIlJlZ0V4cCIsInVpZCIsImNvcmVKc0RhdGEiLCJtYXNrU3JjS2V5IiwiSUVfUFJPVE8iLCJsaXN0Q2FjaGVDbGVhciIsImxpc3RDYWNoZURlbGV0ZSIsImxpc3RDYWNoZUdldCIsImxpc3RDYWNoZUhhcyIsImxpc3RDYWNoZVNldCIsImFzc29jSW5kZXhPZiIsImdldE1hcERhdGEiLCJiYXNlVG9TdHJpbmciLCJhcnJheU1hcCIsInN5bWJvbFByb3RvIiwic3ltYm9sVG9TdHJpbmciLCJpdGVyYXRlZSIsIkFjdGlvbiIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2V0VXJsQmFzZWRIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsInBhdGhuYW1lIiwiaGFzaCIsImNyZWF0ZUxvY2F0aW9uIiwidXNyIiwiY3JlYXRlUGF0aCIsImludmFyaWFudCIsImNvbmQiLCJ3YXJuIiwiZ2V0SGlzdG9yeVN0YXRlIiwiaWR4IiwicGFyc2VQYXRoIiwicGFyc2VkUGF0aCIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwiZ2V0TG9jYXRpb24iLCJjcmVhdGVIcmVmIiwidmFsaWRhdGVMb2NhdGlvbiIsInY1Q29tcGF0IiwiaGlzdG9yeSIsIlBvcCIsImxpc3RlbmVyIiwiZ2V0SW5kZXgiLCJoYW5kbGVQb3AiLCJuZXh0SW5kZXgiLCJkZWx0YSIsImNyZWF0ZVVSTCIsIm9yaWdpbiIsIlVSTCIsInJlcGxhY2VTdGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJQdXNoIiwiaGlzdG9yeVN0YXRlIiwicHVzaFN0YXRlIiwiRE9NRXhjZXB0aW9uIiwiUmVwbGFjZSIsImdvIiwiUmVzdWx0VHlwZSIsIm1hdGNoUm91dGVzIiwicm91dGVzIiwibG9jYXRpb25BcmciLCJiYXNlbmFtZSIsInN0cmlwQmFzZW5hbWUiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJwYXJlbnRzTWV0YSIsInBhcmVudFBhdGgiLCJmbGF0dGVuUm91dGUiLCJyb3V0ZSIsInJlbGF0aXZlUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJjaGlsZHJlbkluZGV4Iiwic3RhcnRzV2l0aCIsImpvaW5QYXRocyIsInJvdXRlc01ldGEiLCJzY29yZSIsImNvbXB1dGVTY29yZSIsIl9yb3V0ZSRwYXRoIiwiZXhwbG9kZWQiLCJleHBsb2RlT3B0aW9uYWxTZWdtZW50cyIsInNlZ21lbnRzIiwiZmlyc3QiLCJyZXN0IiwiaXNPcHRpb25hbCIsInJlcXVpcmVkIiwicmVzdEV4cGxvZGVkIiwic3VicGF0aCIsImNvbXBhcmVJbmRleGVzIiwicmFua1JvdXRlQnJhbmNoZXMiLCJtYXRjaFJvdXRlQnJhbmNoIiwic2FmZWx5RGVjb2RlVVJJIiwicGFyYW1SZSIsImlzU3BsYXQiLCJpbml0aWFsU2NvcmUiLCJzZWdtZW50IiwiYnJhbmNoIiwibWF0Y2hlZFBhcmFtcyIsIm1hdGNoZWRQYXRobmFtZSIsInJlbWFpbmluZ1BhdGhuYW1lIiwibWF0Y2hQYXRoIiwicGFyYW1zIiwicGF0aG5hbWVCYXNlIiwibm9ybWFsaXplUGF0aG5hbWUiLCJwYXR0ZXJuIiwibWF0Y2hlciIsImNvbXBpbGVkUGFyYW1zIiwicmVnZXhwU291cmNlIiwiXyIsInBhcmFtTmFtZSIsImNvbXBpbGVQYXRoIiwiY2FwdHVyZUdyb3VwcyIsInNwbGF0VmFsdWUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzYWZlbHlEZWNvZGVVUklDb21wb25lbnQiLCJkZWNvZGVVUkkiLCJzdGFydEluZGV4IiwibmV4dENoYXIiLCJwYXRocyIsImlzUm91dGVFcnJvclJlc3BvbnNlIiwic3RhdHVzVGV4dCIsImludGVybmFsIiwidmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIiLCJ2YWxpZFJlcXVlc3RNZXRob2RzQXJyIiwiRGF0YVJvdXRlckNvbnRleHQiLCJEYXRhUm91dGVyU3RhdGVDb250ZXh0IiwiTmF2aWdhdGlvbkNvbnRleHQiLCJMb2NhdGlvbkNvbnRleHQiLCJSb3V0ZUNvbnRleHQiLCJvdXRsZXQiLCJpc0RhdGFSb3V0ZSIsIlJvdXRlRXJyb3JDb250ZXh0IiwidXNlSW5Sb3V0ZXJDb250ZXh0IiwidXNlTG9jYXRpb24iLCJ1c2VSb3V0ZXNJbXBsIiwiZGF0YVJvdXRlclN0YXRlIiwiZnV0dXJlIiwibmF2aWdhdG9yIiwicGFyZW50TWF0Y2hlcyIsInJvdXRlTWF0Y2giLCJwYXJlbnRQYXJhbXMiLCJwYXJlbnRQYXRobmFtZUJhc2UiLCJsb2NhdGlvbkZyb21Db250ZXh0IiwiX3BhcnNlZExvY2F0aW9uQXJnJHBhIiwicGFyc2VkTG9jYXRpb25BcmciLCJyZW5kZXJlZE1hdGNoZXMiLCJfcmVuZGVyTWF0Y2hlcyIsImVuY29kZUxvY2F0aW9uIiwibmF2aWdhdGlvblR5cGUiLCJEZWZhdWx0RXJyb3JDb21wb25lbnQiLCJfc3RhdGUkZXJyb3JzIiwidXNlRGF0YVJvdXRlclN0YXRlIiwiRGF0YVJvdXRlclN0YXRlSG9vayIsIlVzZVJvdXRlRXJyb3IiLCJyb3V0ZUlkIiwidXNlQ3VycmVudFJvdXRlSWQiLCJlcnJvcnMiLCJ1c2VSb3V0ZUVycm9yIiwicHJlU3R5bGVzIiwiZGVmYXVsdEVycm9yRWxlbWVudCIsInN1cGVyIiwicmV2YWxpZGF0aW9uIiwiZXJyb3JJbmZvIiwicm91dGVDb250ZXh0IiwiUmVuZGVyZWRSb3V0ZSIsImRhdGFSb3V0ZXJDb250ZXh0Iiwic3RhdGljIiwic3RhdGljQ29udGV4dCIsImVycm9yRWxlbWVudCIsIkVycm9yQm91bmRhcnkiLCJfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCIsIl9kYXRhUm91dGVyU3RhdGUyIiwiX2RhdGFSb3V0ZXJTdGF0ZSIsImVycm9ySW5kZXgiLCJmaW5kSW5kZXgiLCJyZW5kZXJGYWxsYmFjayIsImZhbGxiYWNrSW5kZXgiLCJ2N19wYXJ0aWFsSHlkcmF0aW9uIiwiSHlkcmF0ZUZhbGxiYWNrIiwiaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCIsImxvYWRlckRhdGEiLCJuZWVkc1RvUnVuTG9hZGVyIiwibG9hZGVyIiwicmVkdWNlUmlnaHQiLCJzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2siLCJhbHJlYWR5V2FybmVkIiwiZ2V0Q2hpbGRyZW4iLCJob29rTmFtZSIsInVzZVJvdXRlQ29udGV4dCIsInRoaXNSb3V0ZSIsIlJvdXRlIiwiX3Byb3BzIiwiUm91dGVyIiwiX3JlZjUiLCJiYXNlbmFtZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdGF0aWNQcm9wIiwibmF2aWdhdGlvbkNvbnRleHQiLCJ2N19yZWxhdGl2ZVNwbGF0UGF0aCIsImxvY2F0aW9uQ29udGV4dCIsInRyYWlsaW5nUGF0aG5hbWUiLCJSb3V0ZXMiLCJfcmVmNiIsInVzZVJvdXRlcyIsImNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiIsInRyZWVQYXRoIiwiaGFzRXJyb3JCb3VuZGFyeSIsInNob3VsZFJldmFsaWRhdGUiLCJoYW5kbGUiLCJQcm9taXNlIiwiX19yZWFjdFJvdXRlclZlcnNpb24iLCJCcm93c2VyUm91dGVyIiwiX3JlZjQiLCJoaXN0b3J5UmVmIiwic2V0U3RhdGVJbXBsIiwidjdfc3RhcnRUcmFuc2l0aW9uIiwibmV3U3RhdGUiLCJsaXN0ZW4iLCJEYXRhUm91dGVySG9vayIsIlJlYWN0IiwicmVxdWlyZSIsIlNldHRpbmdzIiwidXNlckRldGFpbHMiLCJBYm91dCIsImVuY29kZSIsImNoYXJNYXAiLCJBeGlvc1VSTFNlYXJjaFBhcmFtcyIsIl9wYWlycyIsInRvRm9ybURhdGEiLCJlbmNvZGVyIiwiX2VuY29kZSIsImJ1aWxkVVJMIiwic2VyaWFsaXplRm4iLCJzZXJpYWxpemUiLCJzZXJpYWxpemVkUGFyYW1zIiwidXRpbHMiLCJoYXNobWFya0luZGV4IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJzeW5jaHJvbm91cyIsInJ1bldoZW4iLCJzaWxlbnRKU09OUGFyc2luZyIsImZvcmNlZEpTT05QYXJzaW5nIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsIlVSTFNlYXJjaFBhcmFtcyIsInByb3RvY29scyIsImhhc0Jyb3dzZXJFbnYiLCJoYXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJwcm9kdWN0IiwiaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52IiwiV29ya2VyR2xvYmFsU2NvcGUiLCJpbXBvcnRTY3JpcHRzIiwiYnVpbGRQYXRoIiwiaXNOdW1lcmljS2V5IiwiaXNMYXN0IiwiYXJyYXlUb09iamVjdCIsInBhcnNlUHJvcFBhdGgiLCJkZWZhdWx0cyIsInRyYW5zaXRpb25hbCIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiaGVhZGVycyIsImNvbnRlbnRUeXBlIiwiZ2V0Q29udGVudFR5cGUiLCJoYXNKU09OQ29udGVudFR5cGUiLCJpc09iamVjdFBheWxvYWQiLCJzZXRDb250ZW50VHlwZSIsInBsYXRmb3JtIiwiaGVscGVycyIsImlzTm9kZSIsInRvVVJMRW5jb2RlZEZvcm0iLCJmb3JtU2VyaWFsaXplciIsIl9Gb3JtRGF0YSIsImVudiIsInJhd1ZhbHVlIiwicGFyc2VyIiwicGFyc2UiLCJzdHJpbmdpZnlTYWZlbHkiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsIkpTT05SZXF1ZXN0ZWQiLCJyZXNwb25zZVR5cGUiLCJzdHJpY3RKU09OUGFyc2luZyIsIkVSUl9CQURfUkVTUE9OU0UiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsIm1ldGhvZCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwiJGludGVybmFscyIsIm5vcm1hbGl6ZUhlYWRlciIsImhlYWRlciIsIm5vcm1hbGl6ZVZhbHVlIiwibWF0Y2hIZWFkZXJWYWx1ZSIsImlzSGVhZGVyTmFtZUZpbHRlciIsInZhbHVlT3JSZXdyaXRlIiwicmV3cml0ZSIsInNldEhlYWRlciIsIl92YWx1ZSIsIl9oZWFkZXIiLCJfcmV3cml0ZSIsImxIZWFkZXIiLCJzZXRIZWFkZXJzIiwicmF3SGVhZGVycyIsInBhcnNlSGVhZGVycyIsInRva2VucyIsInRva2Vuc1JFIiwicGFyc2VUb2tlbnMiLCJkZWxldGVkIiwiZGVsZXRlSGVhZGVyIiwiZm9ybWF0Iiwibm9ybWFsaXplZCIsImZvcm1hdEhlYWRlciIsInRhcmdldHMiLCJhc1N0cmluZ3MiLCJjb21wdXRlZCIsImFjY2Vzc29ycyIsImRlZmluZUFjY2Vzc29yIiwiYWNjZXNzb3JOYW1lIiwibWV0aG9kTmFtZSIsImFyZzEiLCJhcmcyIiwiYXJnMyIsImJ1aWxkQWNjZXNzb3JzIiwiYWNjZXNzb3IiLCJtYXBwZWQiLCJoZWFkZXJWYWx1ZSIsInRyYW5zZm9ybURhdGEiLCJmbnMiLCJub3JtYWxpemUiLCJpc0NhbmNlbCIsIl9fQ0FOQ0VMX18iLCJDYW5jZWxlZEVycm9yIiwiRVJSX0NBTkNFTEVEIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwiYnVpbGRGdWxsUGF0aCIsImJhc2VVUkwiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImNvbWJpbmVVUkxzIiwibXNpZSIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwib3JpZ2luVVJMIiwicmVzb2x2ZVVSTCIsInByb3RvY29sIiwiaG9zdCIsImhvc3RuYW1lIiwicG9ydCIsInJlcXVlc3RVUkwiLCJzYW1wbGVzQ291bnQiLCJ0aW1lc3RhbXBzIiwiZmlyc3RTYW1wbGVUUyIsImNodW5rTGVuZ3RoIiwic3RhcnRlZEF0IiwiYnl0ZXNDb3VudCIsInBhc3NlZCIsInByb2dyZXNzRXZlbnRSZWR1Y2VyIiwiaXNEb3dubG9hZFN0cmVhbSIsImJ5dGVzTm90aWZpZWQiLCJfc3BlZWRvbWV0ZXIiLCJsb2FkZWQiLCJ0b3RhbCIsImxlbmd0aENvbXB1dGFibGUiLCJwcm9ncmVzc0J5dGVzIiwicmF0ZSIsInByb2dyZXNzIiwiZXN0aW1hdGVkIiwiWE1MSHR0cFJlcXVlc3QiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsIm9uQ2FuY2VsZWQiLCJ3aXRoWFNSRlRva2VuIiwiY2FuY2VsVG9rZW4iLCJ1bnN1YnNjcmliZSIsInNpZ25hbCIsImF1dGgiLCJ1c2VybmFtZSIsImZ1bGxQYXRoIiwib25sb2FkZW5kIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwiRVJSX0JBRF9SRVFVRVNUIiwic2V0dGxlIiwicmVzcG9uc2VUZXh0Iiwib3BlbiIsInBhcmFtc1NlcmlhbGl6ZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJvbmFib3J0IiwiRUNPTk5BQk9SVEVEIiwib25lcnJvciIsIkVSUl9ORVRXT1JLIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsIkVUSU1FRE9VVCIsInhzcmZWYWx1ZSIsImNvb2tpZXMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwid2l0aENyZWRlbnRpYWxzIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImFib3J0Iiwic3Vic2NyaWJlIiwiYWJvcnRlZCIsInBhcnNlUHJvdG9jb2wiLCJzZW5kIiwia25vd25BZGFwdGVycyIsImh0dHAiLCJ4aHIiLCJyZW5kZXJSZWFzb24iLCJpc1Jlc29sdmVkSGFuZGxlIiwiYWRhcHRlcnMiLCJuYW1lT3JBZGFwdGVyIiwicmVqZWN0ZWRSZWFzb25zIiwicmVhc29ucyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaGVhZGVyc1RvT2JqZWN0IiwibWVyZ2VDb25maWciLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInZhbHVlRnJvbUNvbmZpZzIiLCJkZWZhdWx0VG9Db25maWcyIiwibWVyZ2VEaXJlY3RLZXlzIiwibWVyZ2VNYXAiLCJ0aW1lb3V0TWVzc2FnZSIsImRlY29tcHJlc3MiLCJiZWZvcmVSZWRpcmVjdCIsInRyYW5zcG9ydCIsImh0dHBBZ2VudCIsImh0dHBzQWdlbnQiLCJzb2NrZXRQYXRoIiwicmVzcG9uc2VFbmNvZGluZyIsImNvbmZpZ1ZhbHVlIiwidmFsaWRhdG9ycyIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsImZvcm1hdE1lc3NhZ2UiLCJvcHQiLCJkZXNjIiwib3B0cyIsIkVSUl9ERVBSRUNBVEVEIiwiYXNzZXJ0T3B0aW9ucyIsInNjaGVtYSIsImFsbG93VW5rbm93biIsIkVSUl9CQURfT1BUSU9OX1ZBTFVFIiwiRVJSX0JBRF9PUFRJT04iLCJpbnN0YW5jZUNvbmZpZyIsImludGVyY2VwdG9ycyIsImNvbmZpZ09yVXJsIiwiX3JlcXVlc3QiLCJkdW1teSIsImJvb2xlYW4iLCJmdW5jdGlvbiIsImNvbnRleHRIZWFkZXJzIiwicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCJzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4iLCJwcm9taXNlIiwiY2hhaW4iLCJuZXdDb25maWciLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJnZW5lcmF0ZUhUVFBNZXRob2QiLCJpc0Zvcm0iLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwiX2xpc3RlbmVycyIsIm9uZnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJIdHRwU3RhdHVzQ29kZSIsIkNvbnRpbnVlIiwiU3dpdGNoaW5nUHJvdG9jb2xzIiwiUHJvY2Vzc2luZyIsIkVhcmx5SGludHMiLCJPayIsIkNyZWF0ZWQiLCJBY2NlcHRlZCIsIk5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbiIsIk5vQ29udGVudCIsIlJlc2V0Q29udGVudCIsIlBhcnRpYWxDb250ZW50IiwiTXVsdGlTdGF0dXMiLCJBbHJlYWR5UmVwb3J0ZWQiLCJJbVVzZWQiLCJNdWx0aXBsZUNob2ljZXMiLCJNb3ZlZFBlcm1hbmVudGx5IiwiRm91bmQiLCJTZWVPdGhlciIsIk5vdE1vZGlmaWVkIiwiVXNlUHJveHkiLCJVbnVzZWQiLCJUZW1wb3JhcnlSZWRpcmVjdCIsIlBlcm1hbmVudFJlZGlyZWN0IiwiQmFkUmVxdWVzdCIsIlVuYXV0aG9yaXplZCIsIlBheW1lbnRSZXF1aXJlZCIsIkZvcmJpZGRlbiIsIk5vdEZvdW5kIiwiTWV0aG9kTm90QWxsb3dlZCIsIk5vdEFjY2VwdGFibGUiLCJQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJSZXF1ZXN0VGltZW91dCIsIkNvbmZsaWN0IiwiR29uZSIsIkxlbmd0aFJlcXVpcmVkIiwiUHJlY29uZGl0aW9uRmFpbGVkIiwiUGF5bG9hZFRvb0xhcmdlIiwiVXJpVG9vTG9uZyIsIlVuc3VwcG9ydGVkTWVkaWFUeXBlIiwiUmFuZ2VOb3RTYXRpc2ZpYWJsZSIsIkV4cGVjdGF0aW9uRmFpbGVkIiwiSW1BVGVhcG90IiwiTWlzZGlyZWN0ZWRSZXF1ZXN0IiwiVW5wcm9jZXNzYWJsZUVudGl0eSIsIkxvY2tlZCIsIkZhaWxlZERlcGVuZGVuY3kiLCJUb29FYXJseSIsIlVwZ3JhZGVSZXF1aXJlZCIsIlByZWNvbmRpdGlvblJlcXVpcmVkIiwiVG9vTWFueVJlcXVlc3RzIiwiUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlIiwiVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnMiLCJJbnRlcm5hbFNlcnZlckVycm9yIiwiTm90SW1wbGVtZW50ZWQiLCJCYWRHYXRld2F5IiwiU2VydmljZVVuYXZhaWxhYmxlIiwiR2F0ZXdheVRpbWVvdXQiLCJIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZCIsIlZhcmlhbnRBbHNvTmVnb3RpYXRlcyIsIkluc3VmZmljaWVudFN0b3JhZ2UiLCJMb29wRGV0ZWN0ZWQiLCJOb3RFeHRlbmRlZCIsIk5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkIiwiYXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJBeGlvcyIsIkNhbmNlbFRva2VuIiwiVkVSU0lPTiIsIkNhbmNlbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwiQXhpb3NIZWFkZXJzIiwiZm9ybVRvSlNPTiIsImdldEFkYXB0ZXIiLCJ1c2VUaGVtZSIsImxvY2FsVGhlbWUiLCJvdXRlclRoZW1lIiwibWVyZ2VPdXRlckxvY2FsVGhlbWUiLCJuZXN0ZWQiLCJFTVBUWV9USEVNRSIsInVzZVRoZW1lU2NvcGluZyIsInVwcGVyVGhlbWUiLCJpc1ByaXZhdGUiLCJyZXNvbHZlZFRoZW1lIiwibWVyZ2VkVGhlbWUiLCJ1c2VUaGVtZVdpdGhvdXREZWZhdWx0IiwidXBwZXJQcml2YXRlVGhlbWUiLCJlbmdpbmVUaGVtZSIsInByaXZhdGVUaGVtZSIsInRoZW1lSW5wdXQiLCJzY29wZWRUaGVtZSIsImdsb2JhbFN0eWxlcyIsImh0bWwiLCJlbmFibGVDb2xvclNjaGVtZSIsIldlYmtpdEZvbnRTbW9vdGhpbmciLCJNb3pPc3hGb250U21vb3RoaW5nIiwiV2Via2l0VGV4dFNpemVBZGp1c3QiLCJjb2xvclNjaGVtZSIsImNvbG9yU2NoZW1lU3R5bGVzIiwiY29sb3JTY2hlbWVzIiwic2NoZW1lIiwiX3NjaGVtZSRwYWxldHRlIiwiZ2V0Q29sb3JTY2hlbWVTZWxlY3RvciIsImRlZmF1bHRTdHlsZXMiLCJ0aGVtZU92ZXJyaWRlcyIsIk11aUNzc0Jhc2VsaW5lIiwiaXNIb3N0Q29tcG9uZW50IiwiZXh0cmFjdEV2ZW50SGFuZGxlcnMiLCJleGNsdWRlS2V5cyIsIm9taXRFdmVudEhhbmRsZXJzIiwidXNlU2xvdFByb3BzIiwicGFyYW1ldGVycyIsIl9wYXJhbWV0ZXJzJGFkZGl0aW9uYSIsImV4dGVybmFsU2xvdFByb3BzIiwic2tpcFJlc29sdmluZ1Nsb3RQcm9wcyIsInJlc29sdmVkQ29tcG9uZW50c1Byb3BzIiwiY29tcG9uZW50UHJvcHMiLCJzbG90U3RhdGUiLCJyZXNvbHZlQ29tcG9uZW50UHJvcHMiLCJpbnRlcm5hbFJlZiIsImdldFNsb3RQcm9wcyIsImFkZGl0aW9uYWxQcm9wcyIsImV4dGVybmFsRm9yd2FyZGVkUHJvcHMiLCJqb2luZWRDbGFzc2VzIiwibWVyZ2VkU3R5bGUiLCJldmVudEhhbmRsZXJzIiwiY29tcG9uZW50c1Byb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMiLCJvdGhlclByb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMiLCJpbnRlcm5hbFNsb3RQcm9wcyIsIm1lcmdlU2xvdFByb3BzIiwidXNlRm9ya1JlZiIsIm90aGVyUHJvcHMiLCJhcHBlbmRPd25lclN0YXRlIiwiZ2V0U2Nyb2xsYmFyU2l6ZSIsImRvY3VtZW50V2lkdGgiLCJjbGllbnRXaWR0aCIsImlubmVyV2lkdGgiLCJhcmlhSGlkZGVuIiwic2hvdyIsImdldFBhZGRpbmdSaWdodCIsIm93bmVyV2luZG93IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImFyaWFIaWRkZW5TaWJsaW5ncyIsIm1vdW50RWxlbWVudCIsImN1cnJlbnRFbGVtZW50IiwiZWxlbWVudHNUb0V4Y2x1ZGUiLCJpc05vdEV4Y2x1ZGVkRWxlbWVudCIsImlzTm90Rm9yYmlkZGVuRWxlbWVudCIsImlzRm9yYmlkZGVuVGFnTmFtZSIsImlzSW5wdXRIaWRkZW4iLCJpc0FyaWFIaWRkZW5Gb3JiaWRkZW5PbkVsZW1lbnQiLCJmaW5kSW5kZXhPZiIsIml0ZW1zIiwiaGFuZGxlQ29udGFpbmVyIiwicmVzdG9yZVN0eWxlIiwiZGlzYWJsZVNjcm9sbExvY2siLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJpc092ZXJmbG93aW5nIiwic2Nyb2xsYmFyU2l6ZSIsInNjcm9sbENvbnRhaW5lciIsIkRvY3VtZW50RnJhZ21lbnQiLCJwYXJlbnRFbGVtZW50IiwiY29udGFpbmVyV2luZG93Iiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwicmVtb3ZlUHJvcGVydHkiLCJkZWZhdWx0TWFuYWdlciIsImNvbnRhaW5lcnMiLCJtb2RhbHMiLCJtb2RhbEluZGV4IiwibW9kYWxSZWYiLCJoaWRkZW5TaWJsaW5ncyIsImdldEhpZGRlblNpYmxpbmdzIiwibW91bnQiLCJjb250YWluZXJJbmRleCIsInJlc3RvcmUiLCJhcmlhSGlkZGVuU3RhdGUiLCJuZXh0VG9wIiwidXNlTW9kYWwiLCJkaXNhYmxlRXNjYXBlS2V5RG93biIsIm1hbmFnZXIiLCJjbG9zZUFmdGVyVHJhbnNpdGlvbiIsIm9uVHJhbnNpdGlvbkVudGVyIiwib25UcmFuc2l0aW9uRXhpdGVkIiwib25DbG9zZSIsInJvb3RSZWYiLCJtb3VudE5vZGVSZWYiLCJoYW5kbGVSZWYiLCJleGl0ZWQiLCJzZXRFeGl0ZWQiLCJoYXNUcmFuc2l0aW9uIiwiZ2V0SGFzVHJhbnNpdGlvbiIsImFyaWFIaWRkZW5Qcm9wIiwiZ2V0TW9kYWwiLCJoYW5kbGVNb3VudGVkIiwiaGFuZGxlT3BlbiIsInVzZUV2ZW50Q2FsbGJhY2siLCJyZXNvbHZlZENvbnRhaW5lciIsImdldENvbnRhaW5lciIsImlzVG9wTW9kYWwiLCJoYW5kbGVQb3J0YWxSZWYiLCJoYW5kbGVDbG9zZSIsImNyZWF0ZUhhbmRsZUtleURvd24iLCJvdGhlckhhbmRsZXJzIiwiX290aGVySGFuZGxlcnMkb25LZXlEIiwib25LZXlEb3duIiwiY3JlYXRlSGFuZGxlQmFja2Ryb3BDbGljayIsIl9vdGhlckhhbmRsZXJzJG9uQ2xpYyIsImdldFJvb3RQcm9wcyIsInByb3BzRXZlbnRIYW5kbGVycyIsImV4dGVybmFsRXZlbnRIYW5kbGVycyIsImdldEJhY2tkcm9wUHJvcHMiLCJnZXRUcmFuc2l0aW9uUHJvcHMiLCJvbkVudGVyIiwiY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIiwib25FeGl0ZWQiLCJwb3J0YWxSZWYiLCJjYW5kaWRhdGVzU2VsZWN0b3IiLCJkZWZhdWx0R2V0VGFiYmFibGUiLCJyZWd1bGFyVGFiTm9kZXMiLCJvcmRlcmVkVGFiTm9kZXMiLCJub2RlVGFiSW5kZXgiLCJ0YWJpbmRleEF0dHIiLCJ0YWJJbmRleCIsImdldFRhYkluZGV4IiwiZ2V0UmFkaW8iLCJyb3ZpbmciLCJpc05vblRhYmJhYmxlUmFkaW8iLCJpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlIiwiZG9jdW1lbnRPcmRlciIsImRlZmF1bHRJc0VuYWJsZWQiLCJGb2N1c1RyYXAiLCJkaXNhYmxlQXV0b0ZvY3VzIiwiZGlzYWJsZUVuZm9yY2VGb2N1cyIsImRpc2FibGVSZXN0b3JlRm9jdXMiLCJnZXRUYWJiYWJsZSIsImlzRW5hYmxlZCIsImlnbm9yZU5leHRFbmZvcmNlRm9jdXMiLCJzZW50aW5lbFN0YXJ0Iiwic2VudGluZWxFbmQiLCJub2RlVG9SZXN0b3JlIiwicmVhY3RGb2N1c0V2ZW50VGFyZ2V0IiwiYWN0aXZhdGVkIiwibGFzdEtleWRvd24iLCJsb29wRm9jdXMiLCJjb250YWluIiwicm9vdEVsZW1lbnQiLCJoYXNGb2N1cyIsInRhYmJhYmxlIiwiX2xhc3RLZXlkb3duJGN1cnJlbnQiLCJfbGFzdEtleWRvd24kY3VycmVudDIiLCJpc1NoaWZ0VGFiIiwiZm9jdXNOZXh0IiwiZm9jdXNQcmV2aW91cyIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaGFuZGxlRm9jdXNTZW50aW5lbCIsImNoaWxkcmVuUHJvcHNIYW5kbGVyIiwiZm9yd2FyZGVkUmVmIiwiZGlzYWJsZVBvcnRhbCIsIm1vdW50Tm9kZSIsInNldE1vdW50Tm9kZSIsInNldFJlZiIsIl9zZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfUmVhY3QkQ29tcG9uZW50IiwiVHJhbnNpdGlvbiIsImluaXRpYWxTdGF0dXMiLCJhcHBlYXIiLCJpc01vdW50aW5nIiwiZW50ZXIiLCJhcHBlYXJTdGF0dXMiLCJpbiIsInVubW91bnRPbkV4aXQiLCJtb3VudE9uRW50ZXIiLCJuZXh0Q2FsbGJhY2siLCJwcmV2U3RhdGUiLCJ1cGRhdGVTdGF0dXMiLCJwcmV2UHJvcHMiLCJuZXh0U3RhdHVzIiwiY2FuY2VsTmV4dENhbGxiYWNrIiwiZ2V0VGltZW91dHMiLCJleGl0IiwibW91bnRpbmciLCJub2RlUmVmIiwiZm9yY2VSZWZsb3ciLCJwZXJmb3JtRW50ZXIiLCJwZXJmb3JtRXhpdCIsIl90aGlzMiIsImFwcGVhcmluZyIsIl9yZWYyIiwibWF5YmVOb2RlIiwibWF5YmVBcHBlYXJpbmciLCJ0aW1lb3V0cyIsImVudGVyVGltZW91dCIsInNhZmVTZXRTdGF0ZSIsIm9uRW50ZXJlZCIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJfdGhpczMiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJuZXh0U3RhdGUiLCJzZXROZXh0Q2FsbGJhY2siLCJfdGhpczQiLCJoYW5kbGVyIiwiZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciIsImFkZEVuZExpc3RlbmVyIiwiX3JlZjMiLCJtYXliZU5leHRDYWxsYmFjayIsIl90aGlzJHByb3BzIiwiY2hpbGRQcm9wcyIsIlRyYW5zaXRpb25Hcm91cENvbnRleHQiLCJVTk1PVU5URUQiLCJFWElURUQiLCJFTlRFUklORyIsIkVOVEVSRUQiLCJFWElUSU5HIiwicmVmbG93IiwiX3N0eWxlJHRyYW5zaXRpb25EdXJhIiwiX3N0eWxlJHRyYW5zaXRpb25UaW1pIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwiZW50ZXJpbmciLCJlbnRlcmVkIiwiZGVmYXVsdFRpbWVvdXQiLCJpblByb3AiLCJUcmFuc2l0aW9uQ29tcG9uZW50Iiwibm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayIsIm1heWJlSXNBcHBlYXJpbmciLCJoYW5kbGVFbnRlcmluZyIsImhhbmRsZUVudGVyIiwiaXNBcHBlYXJpbmciLCJ0cmFuc2l0aW9uUHJvcHMiLCJ3ZWJraXRUcmFuc2l0aW9uIiwiaGFuZGxlRW50ZXJlZCIsImhhbmRsZUV4aXRpbmciLCJoYW5kbGVFeGl0IiwiaGFuZGxlRXhpdGVkIiwiZ2V0QmFja2Ryb3BVdGlsaXR5Q2xhc3MiLCJCYWNrZHJvcFJvb3QiLCJpbnZpc2libGUiLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsIl9zbG90UHJvcHMkcm9vdCIsIl9zbG90cyRyb290IiwiY29tcG9uZW50c1Byb3BzIiwic2xvdFByb3BzIiwicm9vdFNsb3RQcm9wcyIsIlJvb3QiLCJnZXRNb2RhbFV0aWxpdHlDbGFzcyIsIk1vZGFsUm9vdCIsIk1vZGFsQmFja2Ryb3AiLCJiYWNrZHJvcCIsIl9zbG90cyRiYWNrZHJvcCIsIl9zbG90UHJvcHMkYmFja2Ryb3AiLCJCYWNrZHJvcENvbXBvbmVudCIsIkJhY2tkcm9wUHJvcHMiLCJoaWRlQmFja2Ryb3AiLCJrZWVwTW91bnRlZCIsIm9uQmFja2Ryb3BDbGljayIsInByb3BzV2l0aERlZmF1bHRzIiwiUm9vdFNsb3QiLCJCYWNrZHJvcFNsb3QiLCJCYWNrZHJvcCIsImJhY2tkcm9wU2xvdFByb3BzIiwicm9vdFByb3BzIiwiYmFja2Ryb3BQcm9wcyIsInNldFRyYW5zbGF0ZVZhbHVlIiwiY29udGFpbmVyUHJvcCIsImNvbnRhaW5lclByb3BQcm9wIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNvbnRhaW5lclJlY3QiLCJmYWtlVHJhbnNmb3JtIiwiY29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInRyYW5zZm9ybVZhbHVlcyIsImlubmVySGVpZ2h0IiwiZ2V0VHJhbnNsYXRlVmFsdWUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJkZWZhdWx0RWFzaW5nIiwiZWFzaW5nUHJvcCIsImNoaWxkcmVuUmVmIiwidXBkYXRlUG9zaXRpb24iLCJoYW5kbGVSZXNpemUiLCJlbGV2YXRpb24iLCJhbHBoYVZhbHVlIiwidG9GaXhlZCIsImdldFBhcGVyVXRpbGl0eUNsYXNzIiwiUGFwZXJSb290Iiwic3F1YXJlIiwicm91bmRlZCIsIl90aGVtZSR2YXJzJG92ZXJsYXlzIiwiYmFja2dyb3VuZEltYWdlIiwib3ZlcmxheXMiLCJnZXREcmF3ZXJVdGlsaXR5Q2xhc3MiLCJkb2NrZWQiLCJEcmF3ZXJSb290IiwiRHJhd2VyRG9ja2VkUm9vdCIsIkRyYXdlclBhcGVyIiwiYW5jaG9yIiwiV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmciLCJvcHBvc2l0ZURpcmVjdGlvbiIsImRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24iLCJhbmNob3JQcm9wIiwiTW9kYWxQcm9wcyIsIkJhY2tkcm9wUHJvcHNQcm9wIiwiUGFwZXJQcm9wcyIsIlNsaWRlUHJvcHMiLCJtb3VudGVkIiwiYW5jaG9ySW52YXJpYW50IiwiZ2V0QW5jaG9yIiwic2xpZGluZ0RyYXdlciIsImV4dGVuZFN4UHJvcCIsImluU3giLCJzeXN0ZW1Qcm9wcyIsIl9wcm9wcyR0aGVtZSR1bnN0YWJsZSIsInNwbGl0UHJvcHMiLCJmaW5hbFN4IiwiZGVmYXVsdENsYXNzTmFtZSIsImdlbmVyYXRlQ2xhc3NOYW1lIiwiQm94Um9vdCIsIl9leHRlbmRTeFByb3AiLCJjcmVhdGVCb3giLCJnZW5lcmF0ZSIsImdldEFwcEJhclV0aWxpdHlDbGFzcyIsImpvaW5WYXJzIiwidmFyMSIsInZhcjIiLCJBcHBCYXJSb290IiwiYmFja2dyb3VuZENvbG9yRGVmYXVsdCIsImVuYWJsZUNvbG9yT25EYXJrIiwiQXBwQmFyIiwiZGVmYXVsdEJnIiwiZGFya0JnIiwiZGFya0NvbG9yIiwiZ2V0VG9vbGJhclV0aWxpdHlDbGFzcyIsIlRvb2xiYXJSb290IiwiZGlzYWJsZUd1dHRlcnMiLCJndXR0ZXJzIiwiZ2V0TGlzdFV0aWxpdHlDbGFzcyIsIkxpc3RSb290IiwiZGlzYWJsZVBhZGRpbmciLCJkZW5zZSIsInN1YmhlYWRlciIsImxpc3RTdHlsZSIsImdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3MiLCJUeXBvZ3JhcGh5Um9vdCIsImFsaWduIiwibm9XcmFwIiwiZ3V0dGVyQm90dG9tIiwicGFyYWdyYXBoIiwiZm9udCIsImRlZmF1bHRWYXJpYW50TWFwcGluZyIsImNvbG9yVHJhbnNmb3JtYXRpb25zIiwidGV4dFByaW1hcnkiLCJ0ZXh0U2Vjb25kYXJ5IiwidGhlbWVQcm9wcyIsInRyYW5zZm9ybURlcHJlY2F0ZWRDb2xvcnMiLCJ2YXJpYW50TWFwcGluZyIsImdldERpdmlkZXJVdGlsaXR5Q2xhc3MiLCJEaXZpZGVyUm9vdCIsImFic29sdXRlIiwib3JpZW50YXRpb24iLCJ2ZXJ0aWNhbCIsImZsZXhJdGVtIiwid2l0aENoaWxkcmVuIiwid2l0aENoaWxkcmVuVmVydGljYWwiLCJ0ZXh0QWxpZ25SaWdodCIsInRleHRBbGlnbkxlZnQiLCJib3JkZXJXaWR0aCIsImJvcmRlclN0eWxlIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJkaXZpZGVyQ2hhbm5lbCIsImJvcmRlclJpZ2h0V2lkdGgiLCJEaXZpZGVyV3JhcHBlciIsIndyYXBwZXIiLCJ3cmFwcGVyVmVydGljYWwiLCJtdWlTa2lwTGlzdEhpZ2hsaWdodCIsImdldENoaWxkTWFwcGluZyIsIm1hcEZuIiwibWFwcGVyIiwiZ2V0UHJvcCIsImdldE5leHRDaGlsZE1hcHBpbmciLCJuZXh0UHJvcHMiLCJwcmV2Q2hpbGRNYXBwaW5nIiwibmV4dENoaWxkTWFwcGluZyIsImdldFZhbHVlRm9yS2V5IiwibmV4dEtleXNQZW5kaW5nIiwicGVuZGluZ0tleXMiLCJwcmV2S2V5IiwiY2hpbGRNYXBwaW5nIiwibmV4dEtleSIsInBlbmRpbmdOZXh0S2V5IiwibWVyZ2VDaGlsZE1hcHBpbmdzIiwiaGFzUHJldiIsImhhc05leHQiLCJwcmV2Q2hpbGQiLCJpc0xlYXZpbmciLCJUcmFuc2l0aW9uR3JvdXAiLCJSZWZlcmVuY2VFcnJvciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJjb250ZXh0VmFsdWUiLCJmaXJzdFJlbmRlciIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJjaGlsZEZhY3RvcnkiLCJwdWxzYXRlIiwicmlwcGxlWCIsInJpcHBsZVkiLCJyaXBwbGVTaXplIiwibGVhdmluZyIsInNldExlYXZpbmciLCJyaXBwbGVDbGFzc05hbWUiLCJyaXBwbGUiLCJyaXBwbGVWaXNpYmxlIiwicmlwcGxlUHVsc2F0ZSIsInJpcHBsZVN0eWxlcyIsImNoaWxkQ2xhc3NOYW1lIiwiY2hpbGRMZWF2aW5nIiwiY2hpbGRQdWxzYXRlIiwidGltZW91dElkIiwiX3QiLCJfdDIiLCJfdDMiLCJfdDQiLCJlbnRlcktleWZyYW1lIiwiZXhpdEtleWZyYW1lIiwicHVsc2F0ZUtleWZyYW1lIiwiVG91Y2hSaXBwbGVSb290IiwicG9pbnRlckV2ZW50cyIsIlRvdWNoUmlwcGxlUmlwcGxlIiwiY2VudGVyIiwiY2VudGVyUHJvcCIsInJpcHBsZXMiLCJzZXRSaXBwbGVzIiwicmlwcGxlQ2FsbGJhY2siLCJpZ25vcmluZ01vdXNlRG93biIsInN0YXJ0VGltZXIiLCJzdGFydFRpbWVyQ29tbWl0Iiwic3RhcnRDb21taXQiLCJvbGRSaXBwbGVzIiwiZmFrZUVsZW1lbnQiLCJzcXJ0Iiwic2l6ZVgiLCJzaXplWSIsInN0b3AiLCJnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzIiwiQnV0dG9uQmFzZVJvb3QiLCJ2ZXJ0aWNhbEFsaWduIiwiTW96QXBwZWFyYW5jZSIsIldlYmtpdEFwcGVhcmFuY2UiLCJ0ZXh0RGVjb3JhdGlvbiIsImNvbG9yQWRqdXN0IiwiY2VudGVyUmlwcGxlIiwiZGlzYWJsZVJpcHBsZSIsImRpc2FibGVUb3VjaFJpcHBsZSIsImZvY3VzUmlwcGxlIiwiTGlua0NvbXBvbmVudCIsIm9uQ29udGV4dE1lbnUiLCJvbkRyYWdMZWF2ZSIsIm9uRm9jdXNWaXNpYmxlIiwib25LZXlVcCIsIm9uTW91c2VEb3duIiwib25Nb3VzZUxlYXZlIiwib25Nb3VzZVVwIiwib25Ub3VjaEVuZCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaFN0YXJ0IiwiVG91Y2hSaXBwbGVQcm9wcyIsInRvdWNoUmlwcGxlUmVmIiwiYnV0dG9uUmVmIiwicmlwcGxlUmVmIiwiaGFuZGxlUmlwcGxlUmVmIiwiaGFuZGxlRm9jdXNWaXNpYmxlIiwiaGFuZGxlQmx1clZpc2libGUiLCJmb2N1c1Zpc2libGVSZWYiLCJ1c2VJc0ZvY3VzVmlzaWJsZSIsImZvY3VzVmlzaWJsZSIsInNldEZvY3VzVmlzaWJsZSIsIm1vdW50ZWRTdGF0ZSIsInNldE1vdW50ZWRTdGF0ZSIsImVuYWJsZVRvdWNoUmlwcGxlIiwidXNlUmlwcGxlSGFuZGxlciIsInJpcHBsZUFjdGlvbiIsImV2ZW50Q2FsbGJhY2siLCJza2lwUmlwcGxlQWN0aW9uIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlQ29udGV4dE1lbnUiLCJoYW5kbGVEcmFnTGVhdmUiLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlTW91c2VMZWF2ZSIsImhhbmRsZVRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsImhhbmRsZVRvdWNoTW92ZSIsImhhbmRsZUJsdXIiLCJoYW5kbGVGb2N1cyIsImlzTm9uTmF0aXZlQnV0dG9uIiwia2V5ZG93blJlZiIsImhhbmRsZUtleVVwIiwiQ29tcG9uZW50UHJvcCIsImJ1dHRvblByb3BzIiwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lIiwiY29tcG9zZWRDbGFzc2VzIiwiZ2V0SWNvbkJ1dHRvblV0aWxpdHlDbGFzcyIsIkljb25CdXR0b25Sb290IiwiZWRnZSIsImFjdGl2ZUNoYW5uZWwiLCJtYWluQ2hhbm5lbCIsImRpc2FibGVGb2N1c1JpcHBsZSIsImdldEJhZGdlVXRpbGl0eUNsYXNzIiwiQmFkZ2VSb290IiwiQmFkZ2VCYWRnZSIsImJhZGdlIiwiYW5jaG9yT3JpZ2luIiwiaG9yaXpvbnRhbCIsIm92ZXJsYXAiLCJfdGhlbWUkdmFycyIsIlJBRElVU19TVEFOREFSRCIsIl90aGVtZSR2YXJzMiIsIl90aGVtZSR2YXJzMyIsIlJBRElVU19ET1QiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJfc2xvdHMkYmFkZ2UiLCJfc2xvdFByb3BzJGJhZGdlIiwiYW5jaG9yT3JpZ2luUHJvcCIsIm92ZXJsYXBQcm9wIiwiY29sb3JQcm9wIiwiaW52aXNpYmxlUHJvcCIsIm1heFByb3AiLCJiYWRnZUNvbnRlbnQiLCJiYWRnZUNvbnRlbnRQcm9wIiwic2hvd1plcm8iLCJ2YXJpYW50UHJvcCIsImludmlzaWJsZUZyb21Ib29rIiwiZGlzcGxheVZhbHVlIiwiZGlzcGxheVZhbHVlRnJvbUhvb2siLCJ1c2VCYWRnZSIsIkJhZGdlU2xvdCIsIkJhZGdlIiwiYmFkZ2VTbG90UHJvcHMiLCJiYWRnZVByb3BzIiwiZGVmYXVsdENyZWF0ZVN0eWxlZENvbXBvbmVudCIsImZpeGVkIiwidXNlVGhlbWVQcm9wc0RlZmF1bHQiLCJjcmVhdGVTdHlsZWRDb21wb25lbnQiLCJDb250YWluZXJSb290IiwiYnJlYWtwb2ludFZhbHVlS2V5IiwiY3JlYXRlQ29udGFpbmVyIiwiZ2V0R3JpZFV0aWxpdHlDbGFzcyIsIkdSSURfU0laRVMiLCJ3cmFwIiwiZ2V0T2Zmc2V0IiwicGFyc2VGbG9hdCIsImV4dHJhY3RaZXJvVmFsdWVCcmVha3BvaW50S2V5cyIsIm5vblplcm9LZXkiLCJzb3J0ZWRCcmVha3BvaW50S2V5c0J5VmFsdWUiLCJHcmlkUm9vdCIsInplcm9NaW5XaWR0aCIsInNwYWNpbmdTdHlsZXMiLCJyZXNvbHZlU3BhY2luZ1N0eWxlcyIsImJyZWFrcG9pbnRzU3R5bGVzIiwiZGlyZWN0aW9uVmFsdWVzIiwicm93U3BhY2luZyIsInJvd1NwYWNpbmdWYWx1ZXMiLCJ6ZXJvVmFsdWVCcmVha3BvaW50S2V5cyIsIl96ZXJvVmFsdWVCcmVha3BvaW50SyIsImNvbHVtblNwYWNpbmciLCJjb2x1bW5TcGFjaW5nVmFsdWVzIiwiX3plcm9WYWx1ZUJyZWFrcG9pbnRLMiIsImNvbHVtbnNCcmVha3BvaW50VmFsdWVzIiwiY29sdW1uVmFsdWUiLCJmdWxsV2lkdGgiLCJzcGFjaW5nQ2xhc3NlcyIsInJlc29sdmVTcGFjaW5nQ2xhc3NlcyIsImJyZWFrcG9pbnRzQ2xhc3NlcyIsImNvbHVtbnNQcm9wIiwiY29sdW1uU3BhY2luZ1Byb3AiLCJyb3dTcGFjaW5nUHJvcCIsImNvbHVtbnNDb250ZXh0Iiwib3RoZXJGaWx0ZXJlZCIsImdldExpbmtVdGlsaXR5Q2xhc3MiLCJ0cmFuc2Zvcm1lZENvbG9yIiwiY2hhbm5lbENvbG9yIiwiTGlua1Jvb3QiLCJ1bmRlcmxpbmUiLCJ0ZXh0RGVjb3JhdGlvbkNvbG9yIiwiVHlwb2dyYXBoeUNsYXNzZXMiLCJoYW5kbGVyUmVmIiwiZ2V0QXZhdGFyVXRpbGl0eUNsYXNzIiwiQXZhdGFyUm9vdCIsImNvbG9yRGVmYXVsdCIsIkF2YXRhciIsImFwcGx5U3R5bGVzIiwiQXZhdGFySW1nIiwib2JqZWN0Rml0IiwidGV4dEluZGVudCIsIkF2YXRhckZhbGxiYWNrIiwiUGVyc29uIiwiYWx0IiwiY2hpbGRyZW5Qcm9wIiwiaW1nUHJvcHMiLCJzaXplcyIsInNyY1NldCIsImNyb3NzT3JpZ2luIiwicmVmZXJyZXJQb2xpY3kiLCJzZXRMb2FkZWQiLCJpbWFnZSIsIkltYWdlIiwib25sb2FkIiwic3Jjc2V0IiwidXNlTG9hZGVkIiwiaGFzSW1nIiwiaGFzSW1nTm90RmFpbGluZyIsImdldENoaXBVdGlsaXR5Q2xhc3MiLCJDaGlwUm9vdCIsImljb25Db2xvciIsImNsaWNrYWJsZSIsIm9uRGVsZXRlIiwiYXZhdGFyIiwiZGVsZXRlSWNvbiIsImRlbGV0YWJsZSIsInRleHRDb2xvciIsIkNoaXAiLCJkZWZhdWx0QXZhdGFyQ29sb3IiLCJhdmF0YXJDb2xvclByaW1hcnkiLCJhdmF0YXJDb2xvclNlY29uZGFyeSIsImF2YXRhclNtYWxsIiwiZGVmYXVsdEljb25Db2xvciIsInByaW1hcnlDaGFubmVsIiwiY29udHJhc3RUZXh0Q2hhbm5lbCIsInNlbGVjdGVkQ2hhbm5lbCIsImRlZmF1bHRCb3JkZXIiLCJpY29uU21hbGwiLCJkZWxldGVJY29uU21hbGwiLCJDaGlwTGFiZWwiLCJpc0RlbGV0ZUtleWJvYXJkRXZlbnQiLCJrZXlib2FyZEV2ZW50IiwiYXZhdGFyUHJvcCIsImNsaWNrYWJsZVByb3AiLCJkZWxldGVJY29uUHJvcCIsImljb25Qcm9wIiwic2tpcEZvY3VzV2hlbkRpc2FibGVkIiwiY2hpcFJlZiIsImhhbmRsZURlbGV0ZUljb25DbGljayIsIm1vcmVQcm9wcyIsImJsdXIiLCJqb2luQ2hpbGRyZW4iLCJzZXBhcmF0b3IiLCJjaGlsZHJlbkFycmF5Iiwic3BhY2luZ1ZhbHVlcyIsInByZXZpb3VzRGlyZWN0aW9uVmFsdWUiLCJ1c2VGbGV4R2FwIiwicm93IiwiU3RhY2tSb290IiwiY3JlYXRlU3RhY2siLCJnZXRMaXN0SXRlbUJ1dHRvblV0aWxpdHlDbGFzcyIsIkxpc3RJdGVtQnV0dG9uUm9vdCIsImFsaWduSXRlbXNGbGV4U3RhcnQiLCJiYWNrZ3JvdW5kQ2xpcCIsImNoaWxkQ29udGV4dCIsImxpc3RJdGVtUmVmIiwiZ2V0TGlzdEl0ZW1JY29uVXRpbGl0eUNsYXNzIiwiTGlzdEl0ZW1JY29uUm9vdCIsImdldExpc3RJdGVtVGV4dFV0aWxpdHlDbGFzcyIsIkxpc3RJdGVtVGV4dFJvb3QiLCJpbnNldCIsIm11bHRpbGluZSIsImRpc2FibGVUeXBvZ3JhcGh5IiwicHJpbWFyeVByb3AiLCJwcmltYXJ5VHlwb2dyYXBoeVByb3BzIiwic2Vjb25kYXJ5UHJvcCIsInNlY29uZGFyeVR5cG9ncmFwaHlQcm9wcyIsImdldENvbGxhcHNlVXRpbGl0eUNsYXNzIiwiQ29sbGFwc2VSb290IiwiY29sbGFwc2VkU2l6ZSIsIkNvbGxhcHNlV3JhcHBlciIsIkNvbGxhcHNlV3JhcHBlcklubmVyIiwid3JhcHBlcklubmVyIiwiY29sbGFwc2VkU2l6ZVByb3AiLCJ0aW1lciIsIndyYXBwZXJSZWYiLCJhdXRvVHJhbnNpdGlvbkR1cmF0aW9uIiwiaXNIb3Jpem9udGFsIiwiZ2V0V3JhcHBlclNpemUiLCJ3cmFwcGVyU2l6ZSIsImR1cmF0aW9uMiIsIm11aVN1cHBvcnRBdXRvIiwiTWFpbkxpc3RJdGVtcyIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJvcGVuUGxhdGZvcm0iLCJzZXRPcGVuUGxhdGZvcm0iLCJfUmVhY3QkdXNlU3RhdGU0Iiwib3BlblRhcmdldHMiLCJzZXRPcGVuVGFyZ2V0cyIsImhhbmRsZVBsYXRmb3JtQ2xpY2siLCJoYW5kbGVUYXJnZXRzQ2xpY2siLCJoYW5kbGVUcmlnZ2VyIiwiZGF0YUF0dHJpYnV0ZSIsImV4cGFuZEF0dHJpYnV0ZSIsInVzYWJsZVZhbHVlIiwiaGFuZGxlVG9nZ2xlQWxsIiwiTGlzdEl0ZW1CdXR0b24iLCJMaXN0SXRlbUljb24iLCJEYXNoYm9hcmRJY29uIiwiTGlzdEl0ZW1UZXh0IiwiUGVvcGxlSWNvbiIsIkV4cGFuZExlc3MiLCJFeHBhbmRNb3JlIiwiQ29sbGFwc2UiLCJMaXN0IiwiRGV2aWNlc0ljb24iLCJEZXZpY2VzT3RoZXJJY29uIiwiT3BlbkluTmV3SWNvbiIsIkJhckNoYXJ0SWNvbiIsIkxheWVyc0ljb24iLCJZb3VUdWJlSWNvbiIsIlR3aXR0ZXJJY29uIiwiU3RhckJvcmRlciIsImdldExpc3RTdWJoZWFkZXJVdGlsaXR5Q2xhc3MiLCJMaXN0U3ViaGVhZGVyUm9vdCIsImRpc2FibGVTdGlja3kiLCJzdGlja3kiLCJTZWNvbmRhcnlMaXN0SXRlbXMiLCJMaXN0U3ViaGVhZGVyIiwiU3RhY2tlZExpbmVDaGFydEljb24iLCJGaWxlUHJlc2VudEljb24iLCJnZXRBbGVydFV0aWxpdHlDbGFzcyIsIkFsZXJ0Um9vdCIsInNldmVyaXR5IiwiZ2V0Q29sb3IiLCJnZXRCYWNrZ3JvdW5kQ29sb3IiLCJBbGVydCIsIkFsZXJ0SWNvbiIsIkFsZXJ0TWVzc2FnZSIsIkFsZXJ0QWN0aW9uIiwiZGVmYXVsdEljb25NYXBwaW5nIiwiU3VjY2Vzc091dGxpbmVkIiwiUmVwb3J0UHJvYmxlbU91dGxpbmVkIiwiRXJyb3JPdXRsaW5lIiwiSW5mb091dGxpbmVkIiwiX3Nsb3RzJGNsb3NlQnV0dG9uIiwiX3Nsb3RzJGNsb3NlSWNvbiIsIl9zbG90UHJvcHMkY2xvc2VCdXR0byIsIl9zbG90UHJvcHMkY2xvc2VJY29uIiwiY2xvc2VUZXh0IiwiaWNvbk1hcHBpbmciLCJBbGVydENsb3NlQnV0dG9uIiwiY2xvc2VCdXR0b24iLCJDbG9zZUJ1dHRvbiIsIkFsZXJ0Q2xvc2VJY29uIiwiY2xvc2VJY29uIiwiQ2xvc2VJY29uIiwiQ2xvc2UiLCJjbG9zZUJ1dHRvblByb3BzIiwiY2xvc2VJY29uUHJvcHMiLCJ0aXRsZSIsIm91dGVySGVpZ2h0U3R5bGUiLCJvbkNoYW5nZSIsIm1heFJvd3MiLCJtaW5Sb3dzIiwiaW5wdXRSZWYiLCJzaGFkb3dSZWYiLCJyZW5kZXJzIiwiZ2V0VXBkYXRlZFN0YXRlIiwiaW5wdXRTaGFsbG93IiwicGxhY2Vob2xkZXIiLCJib3JkZXJUb3BXaWR0aCIsInNpbmdsZVJvd0hlaWdodCIsIm91dGVySGVpZ2h0IiwidXBkYXRlU3RhdGUiLCJzeW5jSGVpZ2h0Iiwic3luY0hlaWdodFdpdGhGbHVzaFN5bmMiLCJyQUYiLCJkZWJvdW5jZUhhbmRsZVJlc2l6ZSIsInJlc2l6ZU9ic2VydmVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsInJvd3MiLCJmb3JtQ29udHJvbFN0YXRlIiwic3RhdGVzIiwibXVpRm9ybUNvbnRyb2wiLCJ1c2VGb3JtQ29udHJvbCIsImhhc1ZhbHVlIiwiaXNGaWxsZWQiLCJTU1IiLCJnZXRJbnB1dEJhc2VVdGlsaXR5Q2xhc3MiLCJyb290T3ZlcnJpZGVzUmVzb2x2ZXIiLCJmb3JtQ29udHJvbCIsInN0YXJ0QWRvcm5tZW50IiwiYWRvcm5lZFN0YXJ0IiwiZW5kQWRvcm5tZW50IiwiYWRvcm5lZEVuZCIsInNpemVTbWFsbCIsImhpZGRlbkxhYmVsIiwiaW5wdXRPdmVycmlkZXNSZXNvbHZlciIsImlucHV0U2l6ZVNtYWxsIiwiaW5wdXRNdWx0aWxpbmUiLCJpbnB1dFR5cGVTZWFyY2giLCJpbnB1dEFkb3JuZWRTdGFydCIsImlucHV0QWRvcm5lZEVuZCIsImlucHV0SGlkZGVuTGFiZWwiLCJJbnB1dEJhc2VSb290IiwiSW5wdXRCYXNlQ29tcG9uZW50IiwiaW5wdXRQbGFjZWhvbGRlciIsInBsYWNlaG9sZGVySGlkZGVuIiwicGxhY2Vob2xkZXJWaXNpYmxlIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJXZWJraXRUZXh0RmlsbENvbG9yIiwicmVzaXplIiwiaW5wdXRHbG9iYWxTdHlsZXMiLCJfc2xvdFByb3BzJGlucHV0IiwiYXJpYURlc2NyaWJlZGJ5IiwiYXV0b0NvbXBsZXRlIiwiZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlcyIsImlucHV0Q29tcG9uZW50IiwiaW5wdXRQcm9wcyIsImlucHV0UHJvcHNQcm9wIiwiaW5wdXRSZWZQcm9wIiwicmVuZGVyU3VmZml4IiwidmFsdWVQcm9wIiwiaGFuZGxlSW5wdXRSZWZXYXJuaW5nIiwiaGFuZGxlSW5wdXRSZWYiLCJmb2N1c2VkIiwic2V0Rm9jdXNlZCIsImZjcyIsIm9uRmlsbGVkIiwib25FbXB0eSIsImNoZWNrRGlydHkiLCJJbnB1dENvbXBvbmVudCIsInNldEFkb3JuZWRTdGFydCIsIklucHV0Iiwib25BbmltYXRpb25TdGFydCIsImdldElucHV0VXRpbGl0eUNsYXNzIiwiSW5wdXRSb290IiwiZGlzYWJsZVVuZGVybGluZSIsImJvdHRvbUxpbmVDb2xvciIsIm9uQmFja2dyb3VuZENoYW5uZWwiLCJpbnB1dFVuZGVybGluZSIsImJvcmRlckJvdHRvbVN0eWxlIiwiSW5wdXRJbnB1dCIsIl9zbG90cyRpbnB1dCIsImNvbXBvbmVudHNQcm9wc1Byb3AiLCJpbnB1dENvbXBvbmVudHNQcm9wcyIsIklucHV0U2xvdCIsImdldEZpbGxlZElucHV0VXRpbGl0eUNsYXNzIiwiRmlsbGVkSW5wdXRSb290IiwiaG92ZXJCYWNrZ3JvdW5kIiwiRmlsbGVkSW5wdXQiLCJib3JkZXJUb3BMZWZ0UmFkaXVzIiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJob3ZlckJnIiwiZGlzYWJsZWRCZyIsIkZpbGxlZElucHV0SW5wdXQiLCJXZWJraXRCb3hTaGFkb3ciLCJjYXJldENvbG9yIiwiZmlsbGVkSW5wdXRDb21wb25lbnRzUHJvcHMiLCJfc3BhbiIsIk5vdGNoZWRPdXRsaW5lUm9vdCIsIk5vdGNoZWRPdXRsaW5lTGVnZW5kIiwiZmxvYXQiLCJ3aXRoTGFiZWwiLCJub3RjaGVkIiwiZ2V0T3V0bGluZWRJbnB1dFV0aWxpdHlDbGFzcyIsIk91dGxpbmVkSW5wdXRSb290Iiwibm90Y2hlZE91dGxpbmUiLCJPdXRsaW5lZElucHV0SW5wdXQiLCJfUmVhY3QkRnJhZ21lbnQiLCJmaWxsZWQiLCJnZXRGb3JtTGFiZWxVdGlsaXR5Q2xhc3NlcyIsIkZvcm1MYWJlbFJvb3QiLCJjb2xvclNlY29uZGFyeSIsIkFzdGVyaXNrQ29tcG9uZW50IiwiYXN0ZXJpc2siLCJnZXRJbnB1dExhYmVsVXRpbGl0eUNsYXNzZXMiLCJJbnB1dExhYmVsUm9vdCIsInNocmluayIsImRpc2FibGVBbmltYXRpb24iLCJhbmltYXRlZCIsInNocmlua1Byb3AiLCJnZXRGb3JtQ29udHJvbFV0aWxpdHlDbGFzc2VzIiwiRm9ybUNvbnRyb2xSb290IiwidmlzdWFsbHlGb2N1c2VkIiwiaW5pdGlhbEFkb3JuZWRTdGFydCIsImlzTXVpRWxlbWVudCIsInNldEZpbGxlZCIsImluaXRpYWxGaWxsZWQiLCJmb2N1c2VkU3RhdGUiLCJyZWdpc3RlckVmZmVjdCIsImdldEZvcm1IZWxwZXJUZXh0VXRpbGl0eUNsYXNzZXMiLCJGb3JtSGVscGVyVGV4dFJvb3QiLCJjb250YWluZWQiLCJuZXh0SXRlbSIsImRpc2FibGVMaXN0V3JhcCIsInByZXZpb3VzSXRlbSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJ0ZXh0Q3JpdGVyaWFNYXRjaGVzIiwibmV4dEZvY3VzIiwidGV4dENyaXRlcmlhIiwiaW5uZXJUZXh0IiwicmVwZWF0aW5nIiwibW92ZUZvY3VzIiwiY3VycmVudEZvY3VzIiwiZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSIsInRyYXZlcnNhbEZ1bmN0aW9uIiwid3JhcHBlZE9uY2UiLCJuZXh0Rm9jdXNEaXNhYmxlZCIsImFjdGlvbnMiLCJhdXRvRm9jdXNJdGVtIiwibGlzdFJlZiIsInRleHRDcml0ZXJpYVJlZiIsInByZXZpb3VzS2V5TWF0Y2hlZCIsImxhc3RUaW1lIiwiYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXIiLCJjb250YWluZXJFbGVtZW50Iiwibm9FeHBsaWNpdFdpZHRoIiwiYWN0aXZlSXRlbUluZGV4IiwibmV3Q2hpbGRQcm9wcyIsImNyaXRlcmlhIiwibG93ZXJLZXkiLCJjdXJyVGltZSIsImtlZXBGb2N1c09uQ3VycmVudCIsImdldFNjYWxlIiwiaXNXZWJLaXQxNTQiLCJhdXRvVGltZW91dCIsImdldFBvcG92ZXJVdGlsaXR5Q2xhc3MiLCJnZXRPZmZzZXRUb3AiLCJnZXRPZmZzZXRMZWZ0IiwiZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUiLCJyZXNvbHZlQW5jaG9yRWwiLCJhbmNob3JFbCIsIlBvcG92ZXJSb290IiwiUG9wb3ZlclBhcGVyIiwiX3Nsb3RQcm9wcyRwYXBlciIsIl9zbG90cyRwYXBlciIsImFuY2hvclBvc2l0aW9uIiwiYW5jaG9yUmVmZXJlbmNlIiwibWFyZ2luVGhyZXNob2xkIiwiUGFwZXJQcm9wc1Byb3AiLCJ0cmFuc2l0aW9uRHVyYXRpb25Qcm9wIiwiVHJhbnNpdGlvblByb3BzIiwiZXh0ZXJuYWxQYXBlclNsb3RQcm9wcyIsInBhcGVyUmVmIiwiaGFuZGxlUGFwZXJSZWYiLCJnZXRBbmNob3JPZmZzZXQiLCJyZXNvbHZlZEFuY2hvckVsIiwiYW5jaG9yUmVjdCIsImdldFRyYW5zZm9ybU9yaWdpbiIsImVsZW1SZWN0IiwiZ2V0UG9zaXRpb25pbmdTdHlsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiZWxlbVRyYW5zZm9ybU9yaWdpbiIsImhlaWdodFRocmVzaG9sZCIsIndpZHRoVGhyZXNob2xkIiwiZGlmZiIsImlzUG9zaXRpb25lZCIsInNldElzUG9zaXRpb25lZCIsInNldFBvc2l0aW9uaW5nU3R5bGVzIiwicG9zaXRpb25pbmciLCJQYXBlclNsb3QiLCJwYXBlclByb3BzIiwiX3VzZVNsb3RQcm9wcyIsInJvb3RTbG90UHJvcHNQcm9wIiwiZ2V0TWVudVV0aWxpdHlDbGFzcyIsIlJUTF9PUklHSU4iLCJMVFJfT1JJR0lOIiwiTWVudVJvb3QiLCJNZW51UGFwZXIiLCJNZW51TWVudUxpc3QiLCJkaXNhYmxlQXV0b0ZvY3VzSXRlbSIsIk1lbnVMaXN0UHJvcHMiLCJQb3BvdmVyQ2xhc3NlcyIsImlzUnRsIiwibWVudUxpc3RBY3Rpb25zUmVmIiwicGFwZXJFeHRlcm5hbFNsb3RQcm9wcyIsInBhcGVyU2xvdFByb3BzIiwiZ2V0TmF0aXZlU2VsZWN0VXRpbGl0eUNsYXNzZXMiLCJuYXRpdmVTZWxlY3RTZWxlY3RTdHlsZXMiLCJOYXRpdmVTZWxlY3RTZWxlY3QiLCJuYXRpdmVTZWxlY3RJY29uU3R5bGVzIiwiTmF0aXZlU2VsZWN0SWNvbiIsImljb25PcGVuIiwiSWNvbkNvbXBvbmVudCIsImdldFNlbGVjdFV0aWxpdHlDbGFzc2VzIiwiU2VsZWN0U2VsZWN0IiwiU2VsZWN0SWNvbiIsIlNlbGVjdE5hdGl2ZUlucHV0IiwibmF0aXZlSW5wdXQiLCJhcmVFcXVhbFZhbHVlcyIsIl9NZW51UHJvcHMkc2xvdFByb3BzIiwiYXJpYUxhYmVsIiwiYXV0b1dpZHRoIiwiZGVmYXVsdE9wZW4iLCJkaXNwbGF5RW1wdHkiLCJsYWJlbElkIiwiTWVudVByb3BzIiwib25PcGVuIiwib3BlblByb3AiLCJyZW5kZXJWYWx1ZSIsIlNlbGVjdERpc3BsYXlQcm9wcyIsInRhYkluZGV4UHJvcCIsInNldFZhbHVlU3RhdGUiLCJ1c2VDb250cm9sbGVkIiwib3BlblN0YXRlIiwic2V0T3BlblN0YXRlIiwiZGlzcGxheVJlZiIsImRpc3BsYXlOb2RlIiwic2V0RGlzcGxheU5vZGUiLCJpc09wZW5Db250cm9sbGVkIiwibWVudU1pbldpZHRoU3RhdGUiLCJzZXRNZW51TWluV2lkdGhTdGF0ZSIsImhhbmRsZURpc3BsYXlSZWYiLCJhbmNob3JFbGVtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpc0NvbGxhcHNlZCIsImhhbmRsZUl0ZW1DbGljayIsIml0ZW1JbmRleCIsImNsb25lZEV2ZW50IiwiZGlzcGxheVNpbmdsZSIsImRpc3BsYXlNdWx0aXBsZSIsImNvbXB1dGVEaXNwbGF5IiwiZm91bmRNYXRjaCIsIm1lbnVNaW5XaWR0aCIsImJ1dHRvbklkIiwibGlzdGJveElkIiwidXNlSWQiLCJmaW5kIiwiY2hpbGRJdGVtIiwic3R5bGVkUm9vdENvbmZpZyIsIlN0eWxlZElucHV0IiwiU3R5bGVkT3V0bGluZWRJbnB1dCIsIlN0eWxlZEZpbGxlZElucHV0IiwiY2xhc3Nlc1Byb3AiLCJBcnJvd0Ryb3BEb3duIiwibmF0aXZlIiwicmVzdE9mQ2xhc3NlcyIsIm91dGxpbmVkIiwiaW5wdXRDb21wb25lbnRSZWYiLCJnZXRUZXh0RmllbGRVdGlsaXR5Q2xhc3MiLCJ2YXJpYW50Q29tcG9uZW50IiwiVGV4dEZpZWxkUm9vdCIsIkZvcm1IZWxwZXJUZXh0UHJvcHMiLCJoZWxwZXJUZXh0IiwiaWRPdmVycmlkZSIsIklucHV0TGFiZWxQcm9wcyIsIklucHV0UHJvcHMiLCJTZWxlY3RQcm9wcyIsIklucHV0TW9yZSIsImhlbHBlclRleHRJZCIsImlucHV0TGFiZWxJZCIsIklucHV0RWxlbWVudCIsImh0bWxGb3IiLCJnZXRCdXR0b25VdGlsaXR5Q2xhc3MiLCJjb21tb25JY29uU3R5bGVzIiwiQnV0dG9uUm9vdCIsImNvbG9ySW5oZXJpdCIsImRpc2FibGVFbGV2YXRpb24iLCJfdGhlbWUkcGFsZXR0ZSRnZXRDb24iLCJfdGhlbWUkcGFsZXR0ZSIsImluaGVyaXRDb250YWluZWRCYWNrZ3JvdW5kQ29sb3IiLCJpbmhlcml0Q29udGFpbmVkSG92ZXJCYWNrZ3JvdW5kQ29sb3IiLCJCdXR0b24iLCJpbmhlcml0Q29udGFpbmVkSG92ZXJCZyIsImluaGVyaXRDb250YWluZWRCZyIsIkJ1dHRvblN0YXJ0SWNvbiIsInN0YXJ0SWNvbiIsIkJ1dHRvbkVuZEljb24iLCJlbmRJY29uIiwiY29udGV4dFByb3BzIiwiYnV0dG9uR3JvdXBCdXR0b25Db250ZXh0UG9zaXRpb25DbGFzc05hbWUiLCJyZXNvbHZlZFByb3BzIiwicmVzb2x2ZVByb3BzIiwiZW5kSWNvblByb3AiLCJzdGFydEljb25Qcm9wIiwicG9zaXRpb25DbGFzc05hbWUiLCJnZXRNZW51SXRlbVV0aWxpdHlDbGFzcyIsIk1lbnVJdGVtUm9vdCIsIm1lbnVJdGVtUmVmIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsImFzeW5jSXRlcmF0b3IiLCJHZW5lcmF0b3IiLCJDb250ZXh0IiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsIl9fYXdhaXQiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImRlbGVnYXRlIiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsIm1hcmsiLCJhd3JhcCIsImFzeW5jIiwicmV2ZXJzZSIsInJ2YWwiLCJjb21wbGV0ZSIsImZpbmlzaCIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsIl9hc3luY1RvR2VuZXJhdG9yIiwiQ29weXJpZ2h0IiwiVHlwb2dyYXBoeSIsIkxpbmsiLCJnZXRGdWxsWWVhciIsInNldHRpbmdzTW9kYWxDbG9zZUJ1dHRvbiIsInNldHRpbmdzTW9kYWxJbnB1dEZpZWxkIiwiU2V0dGluZ3NNb2RhbCIsIl91c2VTdGF0ZTIiLCJzZXRPcGVuIiwiX3VzZVN0YXRlNCIsInN1Ym1pdE9uTm9VcGRhdGVzIiwic2V0U3VibWl0T25Ob1VwZGF0ZXMiLCJfdXNlU3RhdGU2Iiwic2V0VXNlck5hbWUiLCJfdXNlU3RhdGU4Iiwic2V0VXNlcklkIiwiX3VzZVN0YXRlMTAiLCJzZXRDcmVhdGVkQXQiLCJfdXNlU3RhdGUxMiIsInNldEVtYWlsIiwiX3VzZVN0YXRlMTQiLCJwcmVmZXJyZWROYW1lIiwic2V0UHJlZmVycmVkTmFtZSIsIl91c2VTdGF0ZTE2Iiwib3JnIiwic2V0T3JnIiwiX3VzZVN0YXRlMTgiLCJwcm9mIiwic2V0UHJvZiIsIl91c2VTdGF0ZTIwIiwiYWdlUmFuZ2UiLCJzZXRBZ2VSYW5nZSIsInVzZXJJZCIsImNyZWF0ZWRBdCIsImZpcnN0TmFtZSIsIl91c2VTdGF0ZTIyIiwib3JnYW5pemF0aW9ucyIsInNldE9yZ2FuaXphdGlvbnMiLCJfdXNlU3RhdGUyNCIsInByb2Zlc3Npb25zIiwic2V0UHJvZmVzc2lvbnMiLCJfdXNlU3RhdGUyNiIsImFnZXMiLCJzZXRBZ2VzIiwiaGFuZGxlQ2FuY2VsQ2xvc2UiLCJvcmdhbml6YXRpb25zQ29uZmlnIiwicHJvZmVzc2lvbnNDb25maWciLCJhZ2VzQ29uZmlnIiwiX2hhbmRsZVVwZGF0ZVN1Ym1pdCIsIl9jYWxsZWU0IiwidXNlckRldGFpbHNVcGRhdGVPYmplY3QiLCJfY29udGV4dDQiLCJjcmVhdGVVc2VyRGV0YWlsc1VwZGF0ZU9iamVjdCIsInJlbG9hZCIsIm9yZ2FuaXphdGlvbiIsInByb2Zlc3Npb24iLCJfZmV0Y2hPcmdhbml6YXRpb25zIiwiX2NhbGxlZSIsImZldGNoT3JnYW5pemF0aW9ucyIsIl9mZXRjaFByb2Zlc3Npb25zIiwiX2NhbGxlZTIiLCJfY29udGV4dDIiLCJmZXRjaFByb2Zlc3Npb25zIiwiX2ZldGNoQWdlcyIsIl9jYWxsZWUzIiwiX2NvbnRleHQzIiwiZmV0Y2hBZ2VzIiwiTWFuYWdlQWNjb3VudHNJY29uIiwiTW9kYWwiLCJhcmlhLWxhYmVsbGVkYnkiLCJhcmlhLWRlc2NyaWJlZGJ5IiwiRmFkZSIsIkJveCIsIkljb25CdXR0b24iLCJub1ZhbGlkYXRlIiwiVGV4dEZpZWxkIiwiTWVudUl0ZW0iLCJTdGFjayIsIkNhbmNlbEljb24iLCJfeCIsIlNlbmRJY29uIiwiVGVydGlhcnlMaXN0SXRlbXMiLCJJbnNlcnREcml2ZUZpbGVJY29uIiwiZ2V0Q2FyZFV0aWxpdHlDbGFzcyIsIkNhcmRSb290IiwicmFpc2VkIiwiZ2V0Q2FyZE1lZGlhVXRpbGl0eUNsYXNzIiwiQ2FyZE1lZGlhUm9vdCIsImlzTWVkaWFDb21wb25lbnQiLCJpc0ltYWdlQ29tcG9uZW50IiwiYmFja2dyb3VuZFNpemUiLCJiYWNrZ3JvdW5kUmVwZWF0IiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiTUVESUFfQ09NUE9ORU5UUyIsIklNQUdFX0NPTVBPTkVOVFMiLCJjb21wb3NlZFN0eWxlIiwiZ2V0Q2FyZEFjdGlvbkFyZWFVdGlsaXR5Q2xhc3MiLCJDYXJkQWN0aW9uQXJlYVJvb3QiLCJmb2N1c0hpZ2hsaWdodCIsIkNhcmRBY3Rpb25BcmVhRm9jdXNIaWdobGlnaHQiLCJUaXRsZSIsImNvbmRpdGlvbiIsImdldERpc3BsYXlOYW1lIiwiQ29tcCIsIm93bktleXMiLCJfb2JqZWN0U3ByZWFkIiwiX2RlZmluZVByb3BlcnR5IiwiaGludCIsInByaW0iLCJ0b1ByaW1pdGl2ZSIsIl90b1ByaW1pdGl2ZSIsIl90b1Byb3BlcnR5S2V5IiwiUmVzcG9uc2l2ZUNvbnRhaW5lciIsImFzcGVjdCIsIl9yZWYkaW5pdGlhbERpbWVuc2lvbiIsImluaXRpYWxEaW1lbnNpb24iLCJfcmVmJHdpZHRoIiwiX3JlZiRoZWlnaHQiLCJfcmVmJG1pbldpZHRoIiwiX3JlZiRkZWJvdW5jZSIsIm9uUmVzaXplIiwiX3JlZiRzdHlsZSIsImNvbnRhaW5lclJlZiIsIm9uUmVzaXplUmVmIiwiY29udGFpbmVyV2lkdGgiLCJjb250YWluZXJIZWlnaHQiLCJzZXRTaXplcyIsInNldENvbnRhaW5lclNpemUiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsInJvdW5kZWRXaWR0aCIsInJvdW5kZWRIZWlnaHQiLCJfb25SZXNpemVSZWYkY3VycmVudCIsIl9lbnRyaWVzJDAkY29udGVudFJlYyIsImNvbnRlbnRSZWN0Iiwib2JzZXJ2ZXIiLCJfY29udGFpbmVyUmVmJGN1cnJlbnQiLCJjaGFydENvbnRlbnQiLCJjYWxjdWxhdGVkV2lkdGgiLCJjYWxjdWxhdGVkSGVpZ2h0IiwiaXNDaGFydHMiLCJDaGFydCIsIkNhcmQiLCJDYXJkQWN0aW9uQXJlYSIsIkNhcmRNZWRpYSIsImxvY2FscyIsImJhY2tsaW5rSW5mbyIsImVtYWlsTG9va3VwSW5mbyIsIm5zbG9va3VwSW5mbyIsIndob2lzSW5mbyIsInlvdXR1YmVJbmZvXzEiLCJ5b3V0dWJlSW5mb18yIiwiZ3JlZXRpbmdzIiwiZ2V0TW9udGhTdHJpbmciLCJtb250aEludCIsImdldFB1Ymxpc2hEYXRlIiwiZGF0ZVN0ciIsImRheSIsImdldERhdGUiLCJnZXRNb250aCIsInllYXIiLCJnZXRDdXJyZW50RGF0ZSIsImdldEN1cnJlbnRUaW1lIiwidG9UaW1lU3RyaW5nIiwiZ2V0UmFuZG9tSW50IiwicmFuZG9tR3JlZXRpbmciLCJtbiIsIlN0cmluZ1V0aWwiLCJpbWFnZXMiLCJnZXRNb3N0QW5hbHl6ZWRQbGF0Zm9ybUltYWdlIiwicGxhdGZvcm1BbmFseXNpc1RyYWNrZXIiLCJtYXhQbGF0Zm9ybSIsIl9zdGVwIiwibWF4VmFsdWUiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsIl9zdGVwJHZhbHVlIiwicmVzdWx0UGF0aCIsImltYWdlUGF0aCIsImdldEltYWdlUGF0aCIsIk1vc3RBbmFseXplZFBsYXRmb3JtIiwiRnVuY3Rpb25VdGlsIiwiRGVwb3NpdHMiLCJnZXRDYXJkQWN0aW9uc1V0aWxpdHlDbGFzcyIsIkNhcmRBY3Rpb25zUm9vdCIsImRpc2FibGVTcGFjaW5nIiwiZ2V0Q2FyZENvbnRlbnRVdGlsaXR5Q2xhc3MiLCJDYXJkQ29udGVudFJvb3QiLCJXaG9pc0NhcmQiLCJDYXJkQ29udGVudCIsIkNhcmRBY3Rpb25zIiwiV2hvaXMiLCJkb21haW5TdGF0dXMiLCJ3aG9pcyIsInNldFdob2lzIiwiSXRlbSIsIlBhcGVyIiwidGVydGlhcnkiLCJnZXRBeGlvc0NvbmZpZ3VyYXRpb24iLCJBYm9ydFNpZ25hbCIsImhhbmRsZVdob2lzRG9tYWluU2VhcmNoIiwiX2hhbmRsZVdob2lzRG9tYWluU2VhcmNoIiwicXVlcnkiLCJfaGFuZGxlU2VhcmNoIiwicXVlcnlFbGVtZW50IiwiR3JpZCIsIklucHV0QmFzZSIsIl94MiIsImhhbmRsZVNlYXJjaCIsImFyaWEtbGFiZWwiLCJTZWFyY2hJY29uIiwiRGl2aWRlciIsIk9wZW5JbkJyb3dzZXJJY29uIiwiZ2V0RG9tYWluU3RhdHVzIiwiTnNsb29rdXBDYXJkIiwiTnNsb29rdXAiLCJuc2xvb2t1cCIsInNldE5zbG9va3VwIiwiaGFuZGxlTnNsb29rdXBTZWFyY2giLCJfaGFuZGxlTnNsb29rdXBTZWFyY2giLCJuc0xvb2t1cEZvb3RQcmludExpc3QiLCJuc2xvb2t1cEl0ZW0iLCJhZGRyZXNzIiwiQmFja0xpbmtJbmZvQ2FyZCIsIkJhY2tMaW5rQ2FyZCIsImJhY2tsaW5rIiwicGFnZW1hcCIsIm1ldGF0YWdzIiwiYmFja2xpbmtEZXNjcmlwdGlvbiIsInNuaXBwZXQiLCJiYWNrbGlua1RpdGxlIiwiZm9ybWF0dGVkVXJsIiwibWV0YURlc2NyaXB0aW9uIiwibWV0YVRpdGxlIiwicGFnZU1hcCIsImNzZV9pbWFnZSIsImNzZSIsInJlbmRlckltYWdlIiwiQmFja0xpbmtzIiwiYmFja2xpbmtzIiwic2V0QmFja2xpbmtzIiwiaGFuZGxlQmFja2xpbmtzU2VhcmNoIiwiX2hhbmRsZUJhY2tsaW5rc1NlYXJjaCIsIllvdVR1YmVDYXJkIiwiZ2V0TGluZWFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MiLCJfdDUiLCJfdDYiLCJpbmRldGVybWluYXRlMUtleWZyYW1lIiwiaW5kZXRlcm1pbmF0ZTJLZXlmcmFtZSIsImJ1ZmZlcktleWZyYW1lIiwiZ2V0Q29sb3JTaGFkZSIsIkxpbmVhclByb2dyZXNzIiwiTGluZWFyUHJvZ3Jlc3NSb290IiwiTGluZWFyUHJvZ3Jlc3NEYXNoZWQiLCJkYXNoZWQiLCJMaW5lYXJQcm9ncmVzc0JhcjEiLCJiYXIiLCJiYXIxSW5kZXRlcm1pbmF0ZSIsImJhcjFEZXRlcm1pbmF0ZSIsImJhcjFCdWZmZXIiLCJMaW5lYXJQcm9ncmVzc0JhcjIiLCJiYXIySW5kZXRlcm1pbmF0ZSIsImJhcjJCdWZmZXIiLCJ2YWx1ZUJ1ZmZlciIsImJhcjEiLCJiYXIyIiwiaW5saW5lU3R5bGVzIiwiZ2V0Q2FyZEhlYWRlclV0aWxpdHlDbGFzcyIsIkNhcmRIZWFkZXJSb290IiwiQ2FyZEhlYWRlckF2YXRhciIsIkNhcmRIZWFkZXJBY3Rpb24iLCJDYXJkSGVhZGVyQ29udGVudCIsInN1YmhlYWRlclByb3AiLCJzdWJoZWFkZXJUeXBvZ3JhcGh5UHJvcHMiLCJ0aXRsZVByb3AiLCJ0aXRsZVR5cG9ncmFwaHlQcm9wcyIsIllvdVR1YmVWaWRlb0NhcmQiLCJleHBhbmQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleHBhbmRlZCIsInNldEV4cGFuZGVkIiwidmlkZW8iLCJhdXRob3IiLCJsaWtlQ291bnQiLCJwdWJsaXNoRGF0ZSIsInRodW1ibmFpbCIsInRyYW5zY3JpcHQiLCJ2aWRlb1VybCIsInZpZXdDb3VudCIsInB1Ymxpc2hlZERhdGUiLCJDYXJkSGVhZGVyIiwiVGh1bWJVcE9mZkFsdEljb24iLCJWaXNpYmlsaXR5SWNvbiIsImFyaWEtZXhwYW5kZWQiLCJFeHBhbmRNb3JlSWNvbiIsImdldEZvcm1Db250cm9sTGFiZWxVdGlsaXR5Q2xhc3NlcyIsIkZvcm1Db250cm9sTGFiZWxSb290IiwibGFiZWxQbGFjZW1lbnQiLCJfc2xvdFByb3BzJHR5cG9ncmFwaHkiLCJjb250cm9sIiwiZGlzYWJsZWRQcm9wIiwibGFiZWxQcm9wIiwicmVxdWlyZWRQcm9wIiwiY29udHJvbFByb3BzIiwidHlwb2dyYXBoeVNsb3RQcm9wcyIsImdldFN3aXRjaEJhc2VVdGlsaXR5Q2xhc3MiLCJTd2l0Y2hCYXNlUm9vdCIsIlN3aXRjaEJhc2VJbnB1dCIsImNoZWNrZWRQcm9wIiwiY2hlY2tlZEljb24iLCJzZXRDaGVja2VkU3RhdGUiLCJoYXNMYWJlbEZvciIsIm5ld0NoZWNrZWQiLCJnZXRDaGVja2JveFV0aWxpdHlDbGFzcyIsIkNoZWNrYm94Um9vdCIsImluZGV0ZXJtaW5hdGUiLCJkZWZhdWx0Q2hlY2tlZEljb24iLCJDaGVja0JveCIsImRlZmF1bHRJY29uIiwiQ2hlY2tCb3hPdXRsaW5lQmxhbmsiLCJkZWZhdWx0SW5kZXRlcm1pbmF0ZUljb24iLCJJbmRldGVybWluYXRlQ2hlY2tCb3giLCJfaWNvbiRwcm9wcyRmb250U2l6ZSIsIl9pbmRldGVybWluYXRlSWNvbiRwciIsImluZGV0ZXJtaW5hdGVJY29uIiwiaW5kZXRlcm1pbmF0ZUljb25Qcm9wIiwiTWVzc2FnZUxlZnQiLCJ0aW1lc3RhbXAiLCJwaG90b1VSTCIsIlRoZW1lUHJvdmlkZXIiLCJkZWVwT3JhbmdlIiwiTWVzc2FnZVJpZ2h0IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX2FycmF5V2l0aG91dEhvbGVzIiwiaXRlciIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJDaGF0RGlzcGxheSIsImlzQW5jaG9yT3BlbiIsIm1lc3NhZ2VzIiwic2V0TWVzc2FnZXMiLCJpbml0aWFsUHJvbXB0UmVuZGVyZWQiLCJzZXRJbml0aWFsUHJvbXB0UmVuZGVyZWQiLCJfb25Qcm9tcHRTdWJtaXQiLCJwcm9tcHRFbGVtZW50IiwicHJvbXB0IiwiY3JlYXRlUHJvbXB0TWVzc2FnZSIsImhhbmRsZUNoYXRQcm9tcHQiLCJjcmVhdGVQcm9tcHRSZXNwb25zZSIsInByb21wdE1lc3NhZ2UiLCJhdmF0YXJEaXNwIiwicHJvbXB0UmVzcG9uc2UiLCJfaGFuZGxlQ2hhdFByb21wdCIsInQwIiwic2V0Q2hhdFNjcm9sbCIsImNoYXRib3giLCJzdG9yZWRNZXNzYWdlcyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJkZXNlcmlhbGl6ZWRNZXNzYWdlcyIsInNlcmlhbGl6ZWRNZXNzYWdlcyIsInNldEl0ZW0iLCJvblByb21wdFN1Ym1pdCIsIkNoYXREaXNwbGF5QW5jaG9yIiwidG9nZ2xlRHJhd2VyIiwiRHJhd2VyIiwiWW91VHViZVBsYXRmb3JtIiwiaXNTZWxlY3RlZCIsInZpZGVvSWQiLCJzZWFyY2hRdWVyeSIsInNldFNlYXJjaFF1ZXJ5IiwieW91VHViZVNlYXJjaFJlc3VsdHMiLCJzZXRZb3VUdWJlU2VhcmNoUmVzdWx0cyIsInNldENoZWNrZWQiLCJzZWFyY2hIaW50Iiwic2V0U2VhcmNoSGludCIsImxpbmVhclByb2dyZXNzQ2xhc3NlcyIsImNvbG9yUHJpbWFyeSIsIl9vblNlYXJjaFN1Ym1pdCIsImhhbmRsZVZlY3RvcllvdVR1YmVTZWFyY2giLCJoYW5kbGVPcGVuU2VhcmNoRm9yWW91VHViZVZpZGVvSWQiLCJfaGFuZGxlVmVjdG9yWW91VHViZVNlYXJjaCIsIl9oYW5kbGVPcGVuU2VhcmNoRm9yWW91VHViZVZpZGVvSWQiLCJfY2FsbGVlNiIsIl9jb250ZXh0NiIsInNpbmdsZXRvbkxpc3QiLCJvblNlYXJjaFN1Ym1pdCIsIkZvcm1Db250cm9sTGFiZWwiLCJDaGVja2JveCIsImlzQ2hlY2tlZCIsIkVtYWlsTG9va3VwQ2FyZCIsIkVtYWlsTG9va3VwIiwiZW1haWxsb29rdXAiLCJzZXRFbWFpbExvb2t1cCIsImhhbmRsZUVtYWlsTG9va3VwU2VhcmNoIiwiX2hhbmRsZUVtYWlsTG9va3VwU2VhcmNoIiwiZG9tYWluTmFtZSIsIk5vdGlmaWNhdGlvbkNoaXAiLCJub3RpZmljYXRpb25zIiwiTXVpQXBwQmFyIiwiTXVpRHJhd2VyIiwiZGFya2VyIiwiRGFzaGJvYXJkIiwicmVuZGVyQ2hhcnQiLCJzZXRSZW5kZXJDaGFydCIsIl9SZWFjdCR1c2VTdGF0ZTYiLCJyZW5kZXJNb3N0QW5hbHl6ZWQiLCJzZXRSZW5kZXJNb3N0QW5hbHl6ZWQiLCJfUmVhY3QkdXNlU3RhdGU4IiwicmVuZGVyT3JkZXJzIiwic2V0UmVuZGVyT3JkZXJzIiwiX1JlYWN0JHVzZVN0YXRlMTAiLCJyZW5kZXJXaG9pcyIsInNldFJlbmRlcldob2lzIiwiX1JlYWN0JHVzZVN0YXRlMTIiLCJyZW5kZXJOc2xvb2t1cCIsInNldFJlbmRlck5zbG9va3VwIiwiX1JlYWN0JHVzZVN0YXRlMTQiLCJyZW5kZXJCYWNrbGlua3MiLCJzZXRSZW5kZXJCYWNrbGlua3MiLCJfUmVhY3QkdXNlU3RhdGUxNiIsInJlbmRlckVtYWlsTG9va3VwIiwic2V0UmVuZGVyRW1haWxMb29rdXAiLCJfUmVhY3QkdXNlU3RhdGUxOCIsInJlbmRlcllvdVR1YmVQbGF0Zm9ybSIsInNldFJlbmRlcllvdVR1YmVQbGF0Zm9ybSIsImdsb2JhbE5vdGlmaWNhdGlvbnMiLCJfUmVhY3QkdXNlU3RhdGUyMCIsInNob3dOb3RpZmljYXRpb25zIiwic2V0U2hvd05vdGlmaWNhdGlvbnMiLCJnZXROb3RpZmljYXRpb25Db3VudCIsIkNzc0Jhc2VsaW5lIiwiVG9vbGJhciIsIk1lbnVJY29uIiwiTm90aWZpY2F0aW9uc0ljb24iLCJMb2dvdXRJY29uIiwiQ2hldnJvbkxlZnRJY29uIiwiTWFpbkxpc3RJdGVtIiwiY2hpbGREYXRhIiwidG9nZ2xlQWxsIiwiQ29udGFpbmVyIiwiT3JkZXJzIiwiQXBwIiwic2V0VXNlckRldGFpbHMiLCJzZXRHbG9iYWxOb3RpZmljYXRpb25zIiwiZGV0YWlsc0NvbmZpZyIsImdsb2JhbE5vdGlmaWNhdGlvbnNDb25maWciLCJfZmV0Y2hVc2VyRGV0YWlscyIsImZldGNoVXNlckRldGFpbHMiLCJfZmV0Y2hHbG9iYWxOb3RpZmljYXRpb25zIiwiZmV0Y2hHbG9iYWxOb3RpZmljYXRpb25zIiwiUmVhY3RET00iLCJnbG9iYWxTdGF0ZUNsYXNzZXMiLCJjb21wbGV0ZWQiLCJnbG9iYWxTdGF0ZVByZWZpeCIsImdsb2JhbFN0YXRlQ2xhc3MiLCJkZWZhdWx0R2VuZXJhdG9yIiwiY3JlYXRlQ2xhc3NOYW1lR2VuZXJhdG9yIiwiZm9ybWF0TXVpRXJyb3JNZXNzYWdlIiwiY3JlYXRlQnJlYWtwb2ludHMiLCJzdGVwIiwic29ydGVkVmFsdWVzIiwiYnJlYWtwb2ludHNBc0FycmF5IiwiYnJlYWtwb2ludDEiLCJicmVha3BvaW50MiIsInNvcnRCcmVha3BvaW50c1ZhbHVlcyIsImRvd24iLCJiZXR3ZWVuIiwiZW5kSW5kZXgiLCJub3QiLCJrZXlJbmRleCIsInNwYWNpbmdJbnB1dCIsInNoYXBlSW5wdXQiLCJtdWkiLCJhcmdzSW5wdXQiLCJjcmVhdGVTcGFjaW5nIiwiZ2V0VGhlbWVQcm9wcyIsImdldFV0aWxpdHlDbGFzcyIsInV0aWxpdHlDbGFzcyIsImRlZmF1bHRTbG90UHJvcHMiLCJzbG90UHJvcE5hbWUiLCJmdW5jcyIsImdsb2JhbElkIiwibWF5YmVSZWFjdFVzZUlkIiwicmVhY3RJZCIsImRlZmF1bHRJZCIsInNldERlZmF1bHRJZCIsInVzZUdsb2JhbElkIiwiR2xvYmFsU3R5bGVzIiwiTUlOX1NBRkVfSU5URUdFUiIsIk1BWF9TQUZFX0lOVEVHRVIiLCJjbGFtcFdyYXBwZXIiLCJkZWNvbXBvc2VDb2xvciIsImNvbG9ycyIsImhleFRvUmdiIiwibWFya2VyIiwiY29sb3JTcGFjZSIsInJlY29tcG9zZUNvbG9yIiwiZ2V0THVtaW5hbmNlIiwicmdiIiwiaHNsVG9SZ2IiLCJnZXRDb250cmFzdFJhdGlvIiwiZm9yZWdyb3VuZCIsImx1bUEiLCJsdW1CIiwiYWxwaGEiLCJkYXJrZW4iLCJjb2VmZmljaWVudCIsImxpZ2h0ZW4iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixF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QUFHLEVBQUcsRUFBRyxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxJQUFLLEVB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TyxJQUFNMEMsRUFBTTFDLE9BQU8sSUFBTXcwSSxPQUN4QyxJQUFtQyxJQUEvQjl4SSxFQUFNL1AsS0FBS1YsUUFBUSxPQUM1QixJQUFLLElBQUlsRCxFQUFJLEVBQUdBLEVBQUksRUFBR0EsR0FBSyxFQUMxQjJULEVBQU0xQyxPQUFPalIsS0FBTyxJQUFNMlQsRUFBTTFDLE9BQU9qUixJQUFNeWxKLE9BRTFDLElBQXFDLElBQWpDOXhJLEVBQU0vUCxLQUFLVixRQUFRLFNBQzVCLElBQUssSUFBSWxELEVBQUksRUFBR0EsRUFBSSxFQUFHQSxHQUFLLEVBQzFCMlQsRUFBTTFDLE9BQU9qUixLQUFPLEVBQUkyVCxFQUFNMUMsT0FBT2pSLElBQU15bEosRUFHL0MsT0FBT1YsRUFBZXB4SSIsImZpbGUiOiJmcm9udGVuZC9zdGF0aWMvYnVpbHQvYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIyMyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyBjcmVhdGVTdHlsZWQsIHNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5pbXBvcnQgVEhFTUVfSUQgZnJvbSAnLi9pZGVudGlmaWVyJztcbmV4cG9ydCBjb25zdCByb290U2hvdWxkRm9yd2FyZFByb3AgPSBwcm9wID0+IHNob3VsZEZvcndhcmRQcm9wKHByb3ApICYmIHByb3AgIT09ICdjbGFzc2VzJztcbmV4cG9ydCBjb25zdCBzbG90U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcDtcbmNvbnN0IHN0eWxlZCA9IGNyZWF0ZVN0eWxlZCh7XG4gIHRoZW1lSWQ6IFRIRU1FX0lELFxuICBkZWZhdWx0VGhlbWUsXG4gIHJvb3RTaG91bGRGb3J3YXJkUHJvcFxufSk7XG5leHBvcnQgZGVmYXVsdCBzdHlsZWQ7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxuY29uc3Qge3RvU3RyaW5nfSA9IE9iamVjdC5wcm90b3R5cGU7XG5jb25zdCB7Z2V0UHJvdG90eXBlT2Z9ID0gT2JqZWN0O1xuXG5jb25zdCBraW5kT2YgPSAoY2FjaGUgPT4gdGhpbmcgPT4ge1xuICAgIGNvbnN0IHN0ciA9IHRvU3RyaW5nLmNhbGwodGhpbmcpO1xuICAgIHJldHVybiBjYWNoZVtzdHJdIHx8IChjYWNoZVtzdHJdID0gc3RyLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpKTtcbn0pKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG5jb25zdCBraW5kT2ZUZXN0ID0gKHR5cGUpID0+IHtcbiAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuICh0aGluZykgPT4ga2luZE9mKHRoaW5nKSA9PT0gdHlwZVxufVxuXG5jb25zdCB0eXBlT2ZUZXN0ID0gdHlwZSA9PiB0aGluZyA9PiB0eXBlb2YgdGhpbmcgPT09IHR5cGU7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCB7aXNBcnJheX0gPSBBcnJheTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VuZGVmaW5lZCA9IHR5cGVPZlRlc3QoJ3VuZGVmaW5lZCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIGlzRnVuY3Rpb24odmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKSAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0FycmF5QnVmZmVyID0ga2luZE9mVGVzdCgnQXJyYXlCdWZmZXInKTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIGxldCByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJpbmcgPSB0eXBlT2ZUZXN0KCdzdHJpbmcnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Z1bmN0aW9uID0gdHlwZU9mVGVzdCgnZnVuY3Rpb24nKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc051bWJlciA9IHR5cGVPZlRlc3QoJ251bWJlcicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJvb2xlYW5cbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJvb2xlYW4sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jvb2xlYW4gPSB0aGluZyA9PiB0aGluZyA9PT0gdHJ1ZSB8fCB0aGluZyA9PT0gZmFsc2U7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWwpID0+IHtcbiAgaWYgKGtpbmRPZih2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiAocHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsKSAmJiAhKFN5bWJvbC5pdGVyYXRvciBpbiB2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyZWFtID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGb3JtRGF0YSA9ICh0aGluZykgPT4ge1xuICBsZXQga2luZDtcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8IChcbiAgICAgIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiAoXG4gICAgICAgIChraW5kID0ga2luZE9mKHRoaW5nKSkgPT09ICdmb3JtZGF0YScgfHxcbiAgICAgICAgLy8gZGV0ZWN0IGZvcm0tZGF0YSBpbnN0YW5jZVxuICAgICAgICAoa2luZCA9PT0gJ29iamVjdCcgJiYgaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgRm9ybURhdGFdJylcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVVJMU2VhcmNoUGFyYW1zID0ga2luZE9mVGVzdCgnVVJMU2VhcmNoUGFyYW1zJyk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmNvbnN0IHRyaW0gPSAoc3RyKSA9PiBzdHIudHJpbSA/XG4gIHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXMgPSBmYWxzZV1cbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbiwge2FsbE93bktleXMgPSBmYWxzZX0gPSB7fSkge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBsZXQgbDtcblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgY29uc3Qga2V5cyA9IGFsbE93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQga2V5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iaiwga2V5KSB7XG4gIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgbGV0IF9rZXk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgX2tleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSA9PT0gX2tleS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gX2tleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSAoKCkgPT4ge1xuICAvKmVzbGludCBuby11bmRlZjowKi9cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gZ2xvYmFsVGhpcztcbiAgcmV0dXJuIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbn0pKCk7XG5cbmNvbnN0IGlzQ29udGV4dERlZmluZWQgPSAoY29udGV4dCkgPT4gIWlzVW5kZWZpbmVkKGNvbnRleHQpICYmIGNvbnRleHQgIT09IF9nbG9iYWw7XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgY29uc3Qge2Nhc2VsZXNzfSA9IGlzQ29udGV4dERlZmluZWQodGhpcykgJiYgdGhpcyB8fCB7fTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IGFzc2lnblZhbHVlID0gKHZhbCwga2V5KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0S2V5ID0gY2FzZWxlc3MgJiYgZmluZEtleShyZXN1bHQsIGtleSkgfHwga2V5O1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFt0YXJnZXRLZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2UocmVzdWx0W3RhcmdldEtleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFyZ3VtZW50c1tpXSAmJiBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzXVxuICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5jb25zdCBleHRlbmQgPSAoYSwgYiwgdGhpc0FyZywge2FsbE93bktleXN9PSB7fSkgPT4ge1xuICBmb3JFYWNoKGIsICh2YWwsIGtleSkgPT4ge1xuICAgIGlmICh0aGlzQXJnICYmIGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9LCB7YWxsT3duS2V5c30pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgaW5oZXJpdHMgPSAoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykgPT4ge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsICdzdXBlcicsIHtcbiAgICB2YWx1ZTogc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgfSk7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Qm9vbGVhbn0gW2ZpbHRlcl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wRmlsdGVyXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmNvbnN0IHRvRmxhdE9iamVjdCA9IChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlciwgcHJvcEZpbHRlcikgPT4ge1xuICBsZXQgcHJvcHM7XG4gIGxldCBpO1xuICBsZXQgcHJvcDtcbiAgY29uc3QgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBnZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3Qgb3IgbnVsbCBpZiBmYWlsZWRcbiAqXG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5jb25zdCB0b0FycmF5ID0gKHRoaW5nKSA9PiB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgbGV0IGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBDaGVja2luZyBpZiB0aGUgVWludDhBcnJheSBleGlzdHMgYW5kIGlmIGl0IGRvZXMsIGl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGVcbiAqIHRoaW5nIHBhc3NlZCBpbiBpcyBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5XG4gKlxuICogQHBhcmFtIHtUeXBlZEFycmF5fVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbmNvbnN0IGlzVHlwZWRBcnJheSA9IChUeXBlZEFycmF5ID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIHRoaW5nID0+IHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG4vKipcbiAqIEZvciBlYWNoIGVudHJ5IGluIHRoZSBvYmplY3QsIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGtleSBhbmQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggZW50cnkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGZvckVhY2hFbnRyeSA9IChvYmosIGZuKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG9iaiAmJiBvYmpbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBjb25zdCBpdGVyYXRvciA9IGdlbmVyYXRvci5jYWxsKG9iaik7XG5cbiAgbGV0IHJlc3VsdDtcblxuICB3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX1xcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBsZXQgcmV0O1xuICAgIGlmICgocmV0ID0gcmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopKSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlZHVjZWREZXNjcmlwdG9yc1tuYW1lXSA9IHJldCB8fCBkZXNjcmlwdG9yO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCByZWR1Y2VkRGVzY3JpcHRvcnMpO1xufVxuXG4vKipcbiAqIE1ha2VzIGFsbCBtZXRob2RzIHJlYWQtb25seVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICovXG5cbmNvbnN0IGZyZWV6ZU1ldGhvZHMgPSAob2JqKSA9PiB7XG4gIHJlZHVjZURlc2NyaXB0b3JzKG9iaiwgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICAvLyBza2lwIHJlc3RyaWN0ZWQgcHJvcHMgaW4gc3RyaWN0IG1vZGVcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopICYmIFsnYXJndW1lbnRzJywgJ2NhbGxlcicsICdjYWxsZWUnXS5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkZXNjcmlwdG9yLnNldCkge1xuICAgICAgZGVzY3JpcHRvci5zZXQgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IEVycm9yKCdDYW4gbm90IHJld3JpdGUgcmVhZC1vbmx5IG1ldGhvZCBcXCcnICsgbmFtZSArICdcXCcnKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgdG9PYmplY3RTZXQgPSAoYXJyYXlPclN0cmluZywgZGVsaW1pdGVyKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuXG4gIGNvbnN0IGRlZmluZSA9IChhcnIpID0+IHtcbiAgICBhcnIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBvYmpbdmFsdWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzQXJyYXkoYXJyYXlPclN0cmluZykgPyBkZWZpbmUoYXJyYXlPclN0cmluZykgOiBkZWZpbmUoU3RyaW5nKGFycmF5T3JTdHJpbmcpLnNwbGl0KGRlbGltaXRlcikpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuXG5jb25zdCB0b0Zpbml0ZU51bWJlciA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuXG5jb25zdCBBTFBIQSA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eidcblxuY29uc3QgRElHSVQgPSAnMDEyMzQ1Njc4OSc7XG5cbmNvbnN0IEFMUEhBQkVUID0ge1xuICBESUdJVCxcbiAgQUxQSEEsXG4gIEFMUEhBX0RJR0lUOiBBTFBIQSArIEFMUEhBLnRvVXBwZXJDYXNlKCkgKyBESUdJVFxufVxuXG5jb25zdCBnZW5lcmF0ZVN0cmluZyA9IChzaXplID0gMTYsIGFscGhhYmV0ID0gQUxQSEFCRVQuQUxQSEFfRElHSVQpID0+IHtcbiAgbGV0IHN0ciA9ICcnO1xuICBjb25zdCB7bGVuZ3RofSA9IGFscGhhYmV0O1xuICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgc3RyICs9IGFscGhhYmV0W01hdGgucmFuZG9tKCkgKiBsZW5ndGh8MF1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG5cbi8qKlxuICogSWYgdGhlIHRoaW5nIGlzIGEgRm9ybURhdGEgb2JqZWN0LCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaW5nIC0gVGhlIHRoaW5nIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NwZWNDb21wbGlhbnRGb3JtKHRoaW5nKSB7XG4gIHJldHVybiAhISh0aGluZyAmJiBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgdGhpbmdbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0Zvcm1EYXRhJyAmJiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdKTtcbn1cblxuY29uc3QgdG9KU09OT2JqZWN0ID0gKG9iaikgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBBcnJheSgxMCk7XG5cbiAgY29uc3QgdmlzaXQgPSAoc291cmNlLCBpKSA9PiB7XG5cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2Yoc291cmNlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYoISgndG9KU09OJyBpbiBzb3VyY2UpKSB7XG4gICAgICAgIHN0YWNrW2ldID0gc291cmNlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IHt9O1xuXG4gICAgICAgIGZvckVhY2goc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRWYWx1ZSA9IHZpc2l0KHZhbHVlLCBpICsgMSk7XG4gICAgICAgICAgIWlzVW5kZWZpbmVkKHJlZHVjZWRWYWx1ZSkgJiYgKHRhcmdldFtrZXldID0gcmVkdWNlZFZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhY2tbaV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgcmV0dXJuIHZpc2l0KG9iaiwgMCk7XG59XG5cbmNvbnN0IGlzQXN5bmNGbiA9IGtpbmRPZlRlc3QoJ0FzeW5jRnVuY3Rpb24nKTtcblxuY29uc3QgaXNUaGVuYWJsZSA9ICh0aGluZykgPT5cbiAgdGhpbmcgJiYgKGlzT2JqZWN0KHRoaW5nKSB8fCBpc0Z1bmN0aW9uKHRoaW5nKSkgJiYgaXNGdW5jdGlvbih0aGluZy50aGVuKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLmNhdGNoKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQsXG4gIGlzRGF0ZSxcbiAgaXNGaWxlLFxuICBpc0Jsb2IsXG4gIGlzUmVnRXhwLFxuICBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzVHlwZWRBcnJheSxcbiAgaXNGaWxlTGlzdCxcbiAgZm9yRWFjaCxcbiAgbWVyZ2UsXG4gIGV4dGVuZCxcbiAgdHJpbSxcbiAgc3RyaXBCT00sXG4gIGluaGVyaXRzLFxuICB0b0ZsYXRPYmplY3QsXG4gIGtpbmRPZixcbiAga2luZE9mVGVzdCxcbiAgZW5kc1dpdGgsXG4gIHRvQXJyYXksXG4gIGZvckVhY2hFbnRyeSxcbiAgbWF0Y2hBbGwsXG4gIGlzSFRNTEZvcm0sXG4gIGhhc093blByb3BlcnR5LFxuICBoYXNPd25Qcm9wOiBoYXNPd25Qcm9wZXJ0eSwgLy8gYW4gYWxpYXMgdG8gYXZvaWQgRVNMaW50IG5vLXByb3RvdHlwZS1idWlsdGlucyBkZXRlY3Rpb25cbiAgcmVkdWNlRGVzY3JpcHRvcnMsXG4gIGZyZWV6ZU1ldGhvZHMsXG4gIHRvT2JqZWN0U2V0LFxuICB0b0NhbWVsQ2FzZSxcbiAgbm9vcCxcbiAgdG9GaW5pdGVOdW1iZXIsXG4gIGZpbmRLZXksXG4gIGdsb2JhbDogX2dsb2JhbCxcbiAgaXNDb250ZXh0RGVmaW5lZCxcbiAgQUxQSEFCRVQsXG4gIGdlbmVyYXRlU3RyaW5nLFxuICBpc1NwZWNDb21wbGlhbnRGb3JtLFxuICB0b0pTT05PYmplY3QsXG4gIGlzQXN5bmNGbixcbiAgaXNUaGVuYWJsZVxufTtcbiIsImZ1bmN0aW9uIHIoZSl7dmFyIHQsZixuPVwiXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKW4rPWU7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlpZihBcnJheS5pc0FycmF5KGUpKXt2YXIgbz1lLmxlbmd0aDtmb3IodD0wO3Q8bzt0KyspZVt0XSYmKGY9cihlW3RdKSkmJihuJiYobis9XCIgXCIpLG4rPWYpfWVsc2UgZm9yKGYgaW4gZSllW2ZdJiYobiYmKG4rPVwiIFwiKSxuKz1mKTtyZXR1cm4gbn1leHBvcnQgZnVuY3Rpb24gY2xzeCgpe2Zvcih2YXIgZSx0LGY9MCxuPVwiXCIsbz1hcmd1bWVudHMubGVuZ3RoO2Y8bztmKyspKGU9YXJndW1lbnRzW2ZdKSYmKHQ9cihlKSkmJihuJiYobis9XCIgXCIpLG4rPXQpO3JldHVybiBufWV4cG9ydCBkZWZhdWx0IGNsc3g7IiwiaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBjYXBpdGFsaXplOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgdXNlVGhlbWVQcm9wcyBhcyBzeXN0ZW1Vc2VUaGVtZVByb3BzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5pbXBvcnQgVEhFTUVfSUQgZnJvbSAnLi9pZGVudGlmaWVyJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZVxufSkge1xuICByZXR1cm4gc3lzdGVtVXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHMsXG4gICAgbmFtZSxcbiAgICBkZWZhdWx0VGhlbWUsXG4gICAgdGhlbWVJZDogVEhFTUVfSURcbiAgfSk7XG59IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IHsgZ2V0UGF0aCB9IGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnLi9tZW1vaXplJztcbmNvbnN0IHByb3BlcnRpZXMgPSB7XG4gIG06ICdtYXJnaW4nLFxuICBwOiAncGFkZGluZydcbn07XG5jb25zdCBkaXJlY3Rpb25zID0ge1xuICB0OiAnVG9wJyxcbiAgcjogJ1JpZ2h0JyxcbiAgYjogJ0JvdHRvbScsXG4gIGw6ICdMZWZ0JyxcbiAgeDogWydMZWZ0JywgJ1JpZ2h0J10sXG4gIHk6IFsnVG9wJywgJ0JvdHRvbSddXG59O1xuY29uc3QgYWxpYXNlcyA9IHtcbiAgbWFyZ2luWDogJ214JyxcbiAgbWFyZ2luWTogJ215JyxcbiAgcGFkZGluZ1g6ICdweCcsXG4gIHBhZGRpbmdZOiAncHknXG59O1xuXG4vLyBtZW1vaXplKCkgaW1wYWN0OlxuLy8gRnJvbSAzMDAsMDAwIG9wcy9zZWNcbi8vIFRvIDM1MCwwMDAgb3BzL3NlY1xuY29uc3QgZ2V0Q3NzUHJvcGVydGllcyA9IG1lbW9pemUocHJvcCA9PiB7XG4gIC8vIEl0J3Mgbm90IGEgc2hvcnRoYW5kIG5vdGF0aW9uLlxuICBpZiAocHJvcC5sZW5ndGggPiAyKSB7XG4gICAgaWYgKGFsaWFzZXNbcHJvcF0pIHtcbiAgICAgIHByb3AgPSBhbGlhc2VzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3Byb3BdO1xuICAgIH1cbiAgfVxuICBjb25zdCBbYSwgYl0gPSBwcm9wLnNwbGl0KCcnKTtcbiAgY29uc3QgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2FdO1xuICBjb25zdCBkaXJlY3Rpb24gPSBkaXJlY3Rpb25zW2JdIHx8ICcnO1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShkaXJlY3Rpb24pID8gZGlyZWN0aW9uLm1hcChkaXIgPT4gcHJvcGVydHkgKyBkaXIpIDogW3Byb3BlcnR5ICsgZGlyZWN0aW9uXTtcbn0pO1xuZXhwb3J0IGNvbnN0IG1hcmdpbktleXMgPSBbJ20nLCAnbXQnLCAnbXInLCAnbWInLCAnbWwnLCAnbXgnLCAnbXknLCAnbWFyZ2luJywgJ21hcmdpblRvcCcsICdtYXJnaW5SaWdodCcsICdtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5YJywgJ21hcmdpblknLCAnbWFyZ2luSW5saW5lJywgJ21hcmdpbklubGluZVN0YXJ0JywgJ21hcmdpbklubGluZUVuZCcsICdtYXJnaW5CbG9jaycsICdtYXJnaW5CbG9ja1N0YXJ0JywgJ21hcmdpbkJsb2NrRW5kJ107XG5leHBvcnQgY29uc3QgcGFkZGluZ0tleXMgPSBbJ3AnLCAncHQnLCAncHInLCAncGInLCAncGwnLCAncHgnLCAncHknLCAncGFkZGluZycsICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdYJywgJ3BhZGRpbmdZJywgJ3BhZGRpbmdJbmxpbmUnLCAncGFkZGluZ0lubGluZVN0YXJ0JywgJ3BhZGRpbmdJbmxpbmVFbmQnLCAncGFkZGluZ0Jsb2NrJywgJ3BhZGRpbmdCbG9ja1N0YXJ0JywgJ3BhZGRpbmdCbG9ja0VuZCddO1xuY29uc3Qgc3BhY2luZ0tleXMgPSBbLi4ubWFyZ2luS2V5cywgLi4ucGFkZGluZ0tleXNdO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgdGhlbWVLZXksIGRlZmF1bHRWYWx1ZSwgcHJvcE5hbWUpIHtcbiAgdmFyIF9nZXRQYXRoO1xuICBjb25zdCB0aGVtZVNwYWNpbmcgPSAoX2dldFBhdGggPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSwgZmFsc2UpKSAhPSBudWxsID8gX2dldFBhdGggOiBkZWZhdWx0VmFsdWU7XG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBhYnMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhYnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhYnM7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIGFicyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEV4cGVjdGVkICR7cHJvcE5hbWV9IGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLCBnb3QgJHthYnN9LmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nICogYWJzO1xuICAgIH07XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVTcGFjaW5nKSkge1xuICAgIHJldHVybiBhYnMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhYnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhYnM7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYWJzKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCBhcnJheSB0eXBlIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG5vbiBpbnRlZ2VyIHZhbHVlcy5gICsgYFlvdSBzaG91bGQgZWl0aGVyIHVzZSBhbiBpbnRlZ2VyIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYXMgaW5kZXgsIG9yIGRlZmluZSB0aGUgXFxgdGhlbWUuJHt0aGVtZUtleX1cXGAgYXMgYSBudW1iZXIuYF0uam9pbignXFxuJykpO1xuICAgICAgICB9IGVsc2UgaWYgKGFicyA+IHRoZW1lU3BhY2luZy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIHZhbHVlIHByb3ZpZGVkICgke2Fic30pIG92ZXJmbG93cy5gLCBgVGhlIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOiAke0pTT04uc3RyaW5naWZ5KHRoZW1lU3BhY2luZyl9LmAsIGAke2Fic30gPiAke3RoZW1lU3BhY2luZy5sZW5ndGggLSAxfSwgeW91IG5lZWQgdG8gYWRkIHRoZSBtaXNzaW5nIHZhbHVlcy5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmdbYWJzXTtcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRoZW1lU3BhY2luZztcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCB2YWx1ZSAoJHt0aGVtZVNwYWNpbmd9KSBpcyBpbnZhbGlkLmAsICdJdCBzaG91bGQgYmUgYSBudW1iZXIsIGFuIGFycmF5IG9yIGEgZnVuY3Rpb24uJ10uam9pbignXFxuJykpO1xuICB9XG4gIHJldHVybiAoKSA9PiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5hcnlTcGFjaW5nKHRoZW1lKSB7XG4gIHJldHVybiBjcmVhdGVVbmFyeVVuaXQodGhlbWUsICdzcGFjaW5nJywgOCwgJ3NwYWNpbmcnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnc3RyaW5nJyB8fCBwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBwcm9wVmFsdWU7XG4gIH1cbiAgY29uc3QgYWJzID0gTWF0aC5hYnMocHJvcFZhbHVlKTtcbiAgY29uc3QgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1lcihhYnMpO1xuICBpZiAocHJvcFZhbHVlID49IDApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1lZCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gLXRyYW5zZm9ybWVkO1xuICB9XG4gIHJldHVybiBgLSR7dHJhbnNmb3JtZWR9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpIHtcbiAgcmV0dXJuIHByb3BWYWx1ZSA9PiBjc3NQcm9wZXJ0aWVzLnJlZHVjZSgoYWNjLCBjc3NQcm9wZXJ0eSkgPT4ge1xuICAgIGFjY1tjc3NQcm9wZXJ0eV0gPSBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5mdW5jdGlvbiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSB7XG4gIC8vIFVzaW5nIGEgaGFzaCBjb21wdXRhdGlvbiBvdmVyIGFuIGFycmF5IGl0ZXJhdGlvbiBjb3VsZCBiZSBmYXN0ZXIsIGJ1dCB3aXRoIG9ubHkgMjggaXRlbXMsXG4gIC8vIGl0J3MgZG9lc24ndCB3b3J0aCB0aGUgYnVuZGxlIHNpemUuXG4gIGlmIChrZXlzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgY3NzUHJvcGVydGllcyA9IGdldENzc1Byb3BlcnRpZXMocHJvcCk7XG4gIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcik7XG4gIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbn1cbmZ1bmN0aW9uIHN0eWxlKHByb3BzLCBrZXlzKSB7XG4gIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlTcGFjaW5nKHByb3BzLnRoZW1lKTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5tYXAocHJvcCA9PiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSkucmVkdWNlKG1lcmdlLCB7fSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFyZ2luKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgbWFyZ2luS2V5cyk7XG59XG5tYXJnaW4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IG1hcmdpbktleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xubWFyZ2luLmZpbHRlclByb3BzID0gbWFyZ2luS2V5cztcbmV4cG9ydCBmdW5jdGlvbiBwYWRkaW5nKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgcGFkZGluZ0tleXMpO1xufVxucGFkZGluZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gcGFkZGluZ0tleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xucGFkZGluZy5maWx0ZXJQcm9wcyA9IHBhZGRpbmdLZXlzO1xuZnVuY3Rpb24gc3BhY2luZyhwcm9wcykge1xuICByZXR1cm4gc3R5bGUocHJvcHMsIHNwYWNpbmdLZXlzKTtcbn1cbnNwYWNpbmcucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHNwYWNpbmdLZXlzLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbnNwYWNpbmcuZmlsdGVyUHJvcHMgPSBzcGFjaW5nS2V5cztcbmV4cG9ydCBkZWZhdWx0IHNwYWNpbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICBjb25zdCBjYWNoZSA9IHt9O1xuICByZXR1cm4gYXJnID0+IHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIHJlc3BvbnNlICYmICh0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2UpO1xufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB1dGlscy50b0pTT05PYmplY3QodGhpcy5jb25maWcpLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfVxufSk7XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zRXJyb3IucHJvdG90eXBlO1xuY29uc3QgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCcsXG4gICdFUlJfTk9UX1NVUFBPUlQnLFxuICAnRVJSX0lOVkFMSURfVVJMJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChjb2RlID0+IHtcbiAgZGVzY3JpcHRvcnNbY29kZV0gPSB7dmFsdWU6IGNvZGV9O1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEF4aW9zRXJyb3IsIGRlc2NyaXB0b3JzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IChlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpID0+IHtcbiAgY29uc3QgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcblxuICB1dGlscy50b0ZsYXRPYmplY3QoZXJyb3IsIGF4aW9zRXJyb3IsIGZ1bmN0aW9uIGZpbHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBFcnJvci5wcm90b3R5cGU7XG4gIH0sIHByb3AgPT4ge1xuICAgIHJldHVybiBwcm9wICE9PSAnaXNBeGlvc0Vycm9yJztcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IuY2F1c2UgPSBlcnJvcjtcblxuICBheGlvc0Vycm9yLm5hbWUgPSBlcnJvci5uYW1lO1xuXG4gIGN1c3RvbVByb3BzICYmIE9iamVjdC5hc3NpZ24oYXhpb3NFcnJvciwgY3VzdG9tUHJvcHMpO1xuXG4gIHJldHVybiBheGlvc0Vycm9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NFcnJvcjtcbiIsImltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhdGgob2JqLCBwYXRoLCBjaGVja1ZhcnMgPSB0cnVlKSB7XG4gIGlmICghcGF0aCB8fCB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIENTUyB2YXJpYWJsZXMgYXJlIHVzZWRcbiAgaWYgKG9iaiAmJiBvYmoudmFycyAmJiBjaGVja1ZhcnMpIHtcbiAgICBjb25zdCB2YWwgPSBgdmFycy4ke3BhdGh9YC5zcGxpdCgnLicpLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiBhY2MgJiYgYWNjW2l0ZW1dID8gYWNjW2l0ZW1dIDogbnVsbCwgb2JqKTtcbiAgICBpZiAodmFsICE9IG51bGwpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXRoLnNwbGl0KCcuJykucmVkdWNlKChhY2MsIGl0ZW0pID0+IHtcbiAgICBpZiAoYWNjICYmIGFjY1tpdGVtXSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjW2l0ZW1dO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSwgb2JqKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZVZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBwcm9wVmFsdWVGaW5hbCwgdXNlclZhbHVlID0gcHJvcFZhbHVlRmluYWwpIHtcbiAgbGV0IHZhbHVlO1xuICBpZiAodHlwZW9mIHRoZW1lTWFwcGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nKHByb3BWYWx1ZUZpbmFsKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRoZW1lTWFwcGluZykpIHtcbiAgICB2YWx1ZSA9IHRoZW1lTWFwcGluZ1twcm9wVmFsdWVGaW5hbF0gfHwgdXNlclZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gZ2V0UGF0aCh0aGVtZU1hcHBpbmcsIHByb3BWYWx1ZUZpbmFsKSB8fCB1c2VyVmFsdWU7XG4gIH1cbiAgaWYgKHRyYW5zZm9ybSkge1xuICAgIHZhbHVlID0gdHJhbnNmb3JtKHZhbHVlLCB1c2VyVmFsdWUsIHRoZW1lTWFwcGluZyk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gc3R5bGUob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgcHJvcCxcbiAgICBjc3NQcm9wZXJ0eSA9IG9wdGlvbnMucHJvcCxcbiAgICB0aGVtZUtleSxcbiAgICB0cmFuc2Zvcm1cbiAgfSA9IG9wdGlvbnM7XG5cbiAgLy8gZmFsc2UgcG9zaXRpdmVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG4gIGNvbnN0IGZuID0gcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wc1twcm9wXSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gICAgY29uc3QgdGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgICBjb25zdCB0aGVtZU1hcHBpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwge307XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlRmluYWwgPT4ge1xuICAgICAgbGV0IHZhbHVlID0gZ2V0U3R5bGVWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgaWYgKHByb3BWYWx1ZUZpbmFsID09PSB2YWx1ZSAmJiB0eXBlb2YgcHJvcFZhbHVlRmluYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEhhdmVuJ3QgZm91bmQgdmFsdWVcbiAgICAgICAgdmFsdWUgPSBnZXRTdHlsZVZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBgJHtwcm9wfSR7cHJvcFZhbHVlRmluYWwgPT09ICdkZWZhdWx0JyA/ICcnIDogY2FwaXRhbGl6ZShwcm9wVmFsdWVGaW5hbCl9YCwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgfVxuICAgICAgaWYgKGNzc1Byb3BlcnR5ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbY3NzUHJvcGVydHldOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9O1xuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICAgIFtwcm9wXTogcmVzcG9uc2l2ZVByb3BUeXBlXG4gIH0gOiB7fTtcbiAgZm4uZmlsdGVyUHJvcHMgPSBbcHJvcF07XG4gIHJldHVybiBmbjtcbn1cbmV4cG9ydCBkZWZhdWx0IHN0eWxlOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCB1c2VGb3JrUmVmOyIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG4ndXNlIGNsaWVudCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF91dGlscy5jcmVhdGVTdmdJY29uO1xuICB9XG59KTtcbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG11aS9tYXRlcmlhbC91dGlsc1wiKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcblxuLy8gVGhlIGJyZWFrcG9pbnQgKipzdGFydCoqIGF0IHRoaXMgdmFsdWUuXG4vLyBGb3IgaW5zdGFuY2Ugd2l0aCB0aGUgZmlyc3QgYnJlYWtwb2ludCB4czogW3hzLCBzbVsuXG5leHBvcnQgY29uc3QgdmFsdWVzID0ge1xuICB4czogMCxcbiAgLy8gcGhvbmVcbiAgc206IDYwMCxcbiAgLy8gdGFibGV0XG4gIG1kOiA5MDAsXG4gIC8vIHNtYWxsIGxhcHRvcFxuICBsZzogMTIwMCxcbiAgLy8gZGVza3RvcFxuICB4bDogMTUzNiAvLyBsYXJnZSBzY3JlZW5cbn07XG5jb25zdCBkZWZhdWx0QnJlYWtwb2ludHMgPSB7XG4gIC8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbiAgLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuICBrZXlzOiBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10sXG4gIHVwOiBrZXkgPT4gYEBtZWRpYSAobWluLXdpZHRoOiR7dmFsdWVzW2tleV19cHgpYFxufTtcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpIHtcbiAgY29uc3QgdGhlbWUgPSBwcm9wcy50aGVtZSB8fCB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIHByb3BWYWx1ZS5yZWR1Y2UoKGFjYywgaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKHRoZW1lQnJlYWtwb2ludHMua2V5c1tpbmRleF0pXSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbaW5kZXhdKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIC8vIGtleSBpcyBicmVha3BvaW50XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhlbWVCcmVha3BvaW50cy52YWx1ZXMgfHwgdmFsdWVzKS5pbmRleE9mKGJyZWFrcG9pbnQpICE9PSAtMSkge1xuICAgICAgICBjb25zdCBtZWRpYUtleSA9IHRoZW1lQnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCk7XG4gICAgICAgIGFjY1ttZWRpYUtleV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2JyZWFrcG9pbnRdLCBicmVha3BvaW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNzc0tleSA9IGJyZWFrcG9pbnQ7XG4gICAgICAgIGFjY1tjc3NLZXldID0gcHJvcFZhbHVlW2Nzc0tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuICBjb25zdCBvdXRwdXQgPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlKTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cbmZ1bmN0aW9uIGJyZWFrcG9pbnRzKHN0eWxlRnVuY3Rpb24pIHtcbiAgLy8gZmFsc2UgcG9zaXRpdmVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG4gIGNvbnN0IG5ld1N0eWxlRnVuY3Rpb24gPSBwcm9wcyA9PiB7XG4gICAgY29uc3QgdGhlbWUgPSBwcm9wcy50aGVtZSB8fCB7fTtcbiAgICBjb25zdCBiYXNlID0gc3R5bGVGdW5jdGlvbihwcm9wcyk7XG4gICAgY29uc3QgdGhlbWVCcmVha3BvaW50cyA9IHRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICBjb25zdCBleHRlbmRlZCA9IHRoZW1lQnJlYWtwb2ludHMua2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICBpZiAocHJvcHNba2V5XSkge1xuICAgICAgICBhY2MgPSBhY2MgfHwge307XG4gICAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKGtleSldID0gc3R5bGVGdW5jdGlvbihfZXh0ZW5kcyh7XG4gICAgICAgICAgdGhlbWVcbiAgICAgICAgfSwgcHJvcHNba2V5XSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBudWxsKTtcbiAgICByZXR1cm4gbWVyZ2UoYmFzZSwgZXh0ZW5kZWQpO1xuICB9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfZXh0ZW5kcyh7fSwgc3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMsIHtcbiAgICB4czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzbTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB4bDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSA6IHt9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsIC4uLnN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHNdO1xuICByZXR1cm4gbmV3U3R5bGVGdW5jdGlvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QoYnJlYWtwb2ludHNJbnB1dCA9IHt9KSB7XG4gIHZhciBfYnJlYWtwb2ludHNJbnB1dCRrZXk7XG4gIGNvbnN0IGJyZWFrcG9pbnRzSW5PcmRlciA9IChfYnJlYWtwb2ludHNJbnB1dCRrZXkgPSBicmVha3BvaW50c0lucHV0LmtleXMpID09IG51bGwgPyB2b2lkIDAgOiBfYnJlYWtwb2ludHNJbnB1dCRrZXkucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRTdHlsZUtleSA9IGJyZWFrcG9pbnRzSW5wdXQudXAoa2V5KTtcbiAgICBhY2NbYnJlYWtwb2ludFN0eWxlS2V5XSA9IHt9O1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIGJyZWFrcG9pbnRzSW5PcmRlciB8fCB7fTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhicmVha3BvaW50S2V5cywgc3R5bGUpIHtcbiAgcmV0dXJuIGJyZWFrcG9pbnRLZXlzLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50T3V0cHV0ID0gYWNjW2tleV07XG4gICAgY29uc3QgaXNCcmVha3BvaW50VW51c2VkID0gIWJyZWFrcG9pbnRPdXRwdXQgfHwgT2JqZWN0LmtleXMoYnJlYWtwb2ludE91dHB1dCkubGVuZ3RoID09PSAwO1xuICAgIGlmIChpc0JyZWFrcG9pbnRVbnVzZWQpIHtcbiAgICAgIGRlbGV0ZSBhY2Nba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwgc3R5bGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQnJlYWtwb2ludHNJbk9yZGVyKGJyZWFrcG9pbnRzSW5wdXQsIC4uLnN0eWxlcykge1xuICBjb25zdCBlbXB0eUJyZWFrcG9pbnRzID0gY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0KGJyZWFrcG9pbnRzSW5wdXQpO1xuICBjb25zdCBtZXJnZWRPdXRwdXQgPSBbZW1wdHlCcmVha3BvaW50cywgLi4uc3R5bGVzXS5yZWR1Y2UoKHByZXYsIG5leHQpID0+IGRlZXBtZXJnZShwcmV2LCBuZXh0KSwge30pO1xuICByZXR1cm4gcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMoT2JqZWN0LmtleXMoZW1wdHlCcmVha3BvaW50cyksIG1lcmdlZE91dHB1dCk7XG59XG5cbi8vIGNvbXB1dGUgYmFzZSBmb3IgcmVzcG9uc2l2ZSB2YWx1ZXM7IGUuZy4sXG4vLyBbMSwyLDNdID0+IHt4czogdHJ1ZSwgc206IHRydWUsIG1kOiB0cnVlfVxuLy8ge3hzOiAxLCBzbTogMiwgbWQ6IDN9ID0+IHt4czogdHJ1ZSwgc206IHRydWUsIG1kOiB0cnVlfVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVCcmVha3BvaW50c0Jhc2UoYnJlYWtwb2ludFZhbHVlcywgdGhlbWVCcmVha3BvaW50cykge1xuICAvLyBmaXhlZCB2YWx1ZVxuICBpZiAodHlwZW9mIGJyZWFrcG9pbnRWYWx1ZXMgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IGJhc2UgPSB7fTtcbiAgY29uc3QgYnJlYWtwb2ludHNLZXlzID0gT2JqZWN0LmtleXModGhlbWVCcmVha3BvaW50cyk7XG4gIGlmIChBcnJheS5pc0FycmF5KGJyZWFrcG9pbnRWYWx1ZXMpKSB7XG4gICAgYnJlYWtwb2ludHNLZXlzLmZvckVhY2goKGJyZWFrcG9pbnQsIGkpID0+IHtcbiAgICAgIGlmIChpIDwgYnJlYWtwb2ludFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgYmFzZVticmVha3BvaW50XSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYnJlYWtwb2ludHNLZXlzLmZvckVhY2goYnJlYWtwb2ludCA9PiB7XG4gICAgICBpZiAoYnJlYWtwb2ludFZhbHVlc1ticmVha3BvaW50XSAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VbYnJlYWtwb2ludF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBiYXNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgdmFsdWVzOiBicmVha3BvaW50VmFsdWVzLFxuICBicmVha3BvaW50czogdGhlbWVCcmVha3BvaW50cyxcbiAgYmFzZTogY3VzdG9tQmFzZVxufSkge1xuICBjb25zdCBiYXNlID0gY3VzdG9tQmFzZSB8fCBjb21wdXRlQnJlYWtwb2ludHNCYXNlKGJyZWFrcG9pbnRWYWx1ZXMsIHRoZW1lQnJlYWtwb2ludHMpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYmFzZSk7XG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBicmVha3BvaW50VmFsdWVzO1xuICB9XG4gIGxldCBwcmV2aW91cztcbiAgcmV0dXJuIGtleXMucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQsIGkpID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShicmVha3BvaW50VmFsdWVzKSkge1xuICAgICAgYWNjW2JyZWFrcG9pbnRdID0gYnJlYWtwb2ludFZhbHVlc1tpXSAhPSBudWxsID8gYnJlYWtwb2ludFZhbHVlc1tpXSA6IGJyZWFrcG9pbnRWYWx1ZXNbcHJldmlvdXNdO1xuICAgICAgcHJldmlvdXMgPSBpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJyZWFrcG9pbnRWYWx1ZXMgPT09ICdvYmplY3QnKSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdICE9IG51bGwgPyBicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdIDogYnJlYWtwb2ludFZhbHVlc1twcmV2aW91c107XG4gICAgICBwcmV2aW91cyA9IGJyZWFrcG9pbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXM7XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGJyZWFrcG9pbnRzOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU3ZnSWNvbicsIHNsb3QpO1xufVxuY29uc3Qgc3ZnSWNvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlTdmdJY29uJywgWydyb290JywgJ2NvbG9yUHJpbWFyeScsICdjb2xvclNlY29uZGFyeScsICdjb2xvckFjdGlvbicsICdjb2xvckVycm9yJywgJ2NvbG9yRGlzYWJsZWQnLCAnZm9udFNpemVJbmhlcml0JywgJ2ZvbnRTaXplU21hbGwnLCAnZm9udFNpemVNZWRpdW0nLCAnZm9udFNpemVMYXJnZSddKTtcbmV4cG9ydCBkZWZhdWx0IHN2Z0ljb25DbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJmb250U2l6ZVwiLCBcImh0bWxDb2xvclwiLCBcImluaGVyaXRWaWV3Qm94XCIsIFwidGl0bGVBY2Nlc3NcIiwgXCJ2aWV3Qm94XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcyB9IGZyb20gJy4vc3ZnSWNvbkNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xvcixcbiAgICBmb250U2l6ZSxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBjb2xvciAhPT0gJ2luaGVyaXQnICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgYGZvbnRTaXplJHtjYXBpdGFsaXplKGZvbnRTaXplKX1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFN2Z0ljb25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFN2Z0ljb25Sb290ID0gc3R5bGVkKCdzdmcnLCB7XG4gIG5hbWU6ICdNdWlTdmdJY29uJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBzdHlsZXNbYGZvbnRTaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuZm9udFNpemUpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR0cmFuc2l0aW9ucywgX3RoZW1lJHRyYW5zaXRpb25zJGNyLCBfdGhlbWUkdHJhbnNpdGlvbnMyLCBfdGhlbWUkdHlwb2dyYXBoeSwgX3RoZW1lJHR5cG9ncmFwaHkkcHhULCBfdGhlbWUkdHlwb2dyYXBoeTIsIF90aGVtZSR0eXBvZ3JhcGh5MiRweCwgX3RoZW1lJHR5cG9ncmFwaHkzLCBfdGhlbWUkdHlwb2dyYXBoeTMkcHgsIF9wYWxldHRlJG93bmVyU3RhdGUkYywgX3BhbGV0dGUsIF9wYWxldHRlMiwgX3BhbGV0dGUzO1xuICByZXR1cm4ge1xuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICB3aWR0aDogJzFlbScsXG4gICAgaGVpZ2h0OiAnMWVtJyxcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAvLyB0aGUgPHN2Zz4gd2lsbCBkZWZpbmUgdGhlIHByb3BlcnR5IHRoYXQgaGFzIGBjdXJyZW50Q29sb3JgXG4gICAgLy8gZS5nLiBoZXJvaWNvbnMgdXNlcyBmaWxsPVwibm9uZVwiIGFuZCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgIGZpbGw6IG93bmVyU3RhdGUuaGFzU3ZnQXNDaGlsZCA/IHVuZGVmaW5lZCA6ICdjdXJyZW50Q29sb3InLFxuICAgIGZsZXhTaHJpbms6IDAsXG4gICAgdHJhbnNpdGlvbjogKF90aGVtZSR0cmFuc2l0aW9ucyA9IHRoZW1lLnRyYW5zaXRpb25zKSA9PSBudWxsIHx8IChfdGhlbWUkdHJhbnNpdGlvbnMkY3IgPSBfdGhlbWUkdHJhbnNpdGlvbnMuY3JlYXRlKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHRyYW5zaXRpb25zJGNyLmNhbGwoX3RoZW1lJHRyYW5zaXRpb25zLCAnZmlsbCcsIHtcbiAgICAgIGR1cmF0aW9uOiAoX3RoZW1lJHRyYW5zaXRpb25zMiA9IHRoZW1lLnRyYW5zaXRpb25zKSA9PSBudWxsIHx8IChfdGhlbWUkdHJhbnNpdGlvbnMyID0gX3RoZW1lJHRyYW5zaXRpb25zMi5kdXJhdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0cmFuc2l0aW9uczIuc2hvcnRlclxuICAgIH0pLFxuICAgIGZvbnRTaXplOiB7XG4gICAgICBpbmhlcml0OiAnaW5oZXJpdCcsXG4gICAgICBzbWFsbDogKChfdGhlbWUkdHlwb2dyYXBoeSA9IHRoZW1lLnR5cG9ncmFwaHkpID09IG51bGwgfHwgKF90aGVtZSR0eXBvZ3JhcGh5JHB4VCA9IF90aGVtZSR0eXBvZ3JhcGh5LnB4VG9SZW0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHlwb2dyYXBoeSRweFQuY2FsbChfdGhlbWUkdHlwb2dyYXBoeSwgMjApKSB8fCAnMS4yNXJlbScsXG4gICAgICBtZWRpdW06ICgoX3RoZW1lJHR5cG9ncmFwaHkyID0gdGhlbWUudHlwb2dyYXBoeSkgPT0gbnVsbCB8fCAoX3RoZW1lJHR5cG9ncmFwaHkyJHB4ID0gX3RoZW1lJHR5cG9ncmFwaHkyLnB4VG9SZW0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHlwb2dyYXBoeTIkcHguY2FsbChfdGhlbWUkdHlwb2dyYXBoeTIsIDI0KSkgfHwgJzEuNXJlbScsXG4gICAgICBsYXJnZTogKChfdGhlbWUkdHlwb2dyYXBoeTMgPSB0aGVtZS50eXBvZ3JhcGh5KSA9PSBudWxsIHx8IChfdGhlbWUkdHlwb2dyYXBoeTMkcHggPSBfdGhlbWUkdHlwb2dyYXBoeTMucHhUb1JlbSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0eXBvZ3JhcGh5MyRweC5jYWxsKF90aGVtZSR0eXBvZ3JhcGh5MywgMzUpKSB8fCAnMi4xODc1cmVtJ1xuICAgIH1bb3duZXJTdGF0ZS5mb250U2l6ZV0sXG4gICAgLy8gVE9ETyB2NSBkZXByZWNhdGUsIHY2IHJlbW92ZSBmb3Igc3hcbiAgICBjb2xvcjogKF9wYWxldHRlJG93bmVyU3RhdGUkYyA9IChfcGFsZXR0ZSA9ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlKSA9PSBudWxsIHx8IChfcGFsZXR0ZSA9IF9wYWxldHRlW293bmVyU3RhdGUuY29sb3JdKSA9PSBudWxsID8gdm9pZCAwIDogX3BhbGV0dGUubWFpbikgIT0gbnVsbCA/IF9wYWxldHRlJG93bmVyU3RhdGUkYyA6IHtcbiAgICAgIGFjdGlvbjogKF9wYWxldHRlMiA9ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlKSA9PSBudWxsIHx8IChfcGFsZXR0ZTIgPSBfcGFsZXR0ZTIuYWN0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX3BhbGV0dGUyLmFjdGl2ZSxcbiAgICAgIGRpc2FibGVkOiAoX3BhbGV0dGUzID0gKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUpID09IG51bGwgfHwgKF9wYWxldHRlMyA9IF9wYWxldHRlMy5hY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfcGFsZXR0ZTMuZGlzYWJsZWQsXG4gICAgICBpbmhlcml0OiB1bmRlZmluZWRcbiAgICB9W293bmVyU3RhdGUuY29sb3JdXG4gIH07XG59KTtcbmNvbnN0IFN2Z0ljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdmdJY29uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlTdmdJY29uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdpbmhlcml0JyxcbiAgICAgIGNvbXBvbmVudCA9ICdzdmcnLFxuICAgICAgZm9udFNpemUgPSAnbWVkaXVtJyxcbiAgICAgIGh0bWxDb2xvcixcbiAgICAgIGluaGVyaXRWaWV3Qm94ID0gZmFsc2UsXG4gICAgICB0aXRsZUFjY2VzcyxcbiAgICAgIHZpZXdCb3ggPSAnMCAwIDI0IDI0J1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBoYXNTdmdBc0NoaWxkID0gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi50eXBlID09PSAnc3ZnJztcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGNvbXBvbmVudCxcbiAgICBmb250U2l6ZSxcbiAgICBpbnN0YW5jZUZvbnRTaXplOiBpblByb3BzLmZvbnRTaXplLFxuICAgIGluaGVyaXRWaWV3Qm94LFxuICAgIHZpZXdCb3gsXG4gICAgaGFzU3ZnQXNDaGlsZFxuICB9KTtcbiAgY29uc3QgbW9yZSA9IHt9O1xuICBpZiAoIWluaGVyaXRWaWV3Qm94KSB7XG4gICAgbW9yZS52aWV3Qm94ID0gdmlld0JveDtcbiAgfVxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoU3ZnSWNvblJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgY29sb3I6IGh0bWxDb2xvcixcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRpdGxlQWNjZXNzID8gdW5kZWZpbmVkIDogdHJ1ZSxcbiAgICByb2xlOiB0aXRsZUFjY2VzcyA/ICdpbWcnIDogdW5kZWZpbmVkLFxuICAgIHJlZjogcmVmXG4gIH0sIG1vcmUsIG90aGVyLCBoYXNTdmdBc0NoaWxkICYmIGNoaWxkcmVuLnByb3BzLCB7XG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjaGlsZHJlbjogW2hhc1N2Z0FzQ2hpbGQgPyBjaGlsZHJlbi5wcm9wcy5jaGlsZHJlbiA6IGNoaWxkcmVuLCB0aXRsZUFjY2VzcyA/IC8qI19fUFVSRV9fKi9fanN4KFwidGl0bGVcIiwge1xuICAgICAgY2hpbGRyZW46IHRpdGxlQWNjZXNzXG4gICAgfSkgOiBudWxsXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN2Z0ljb24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogTm9kZSBwYXNzZWQgaW50byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogWW91IGNhbiB1c2UgdGhlIGBodG1sQ29sb3JgIHByb3AgdG8gYXBwbHkgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCAnaW5oZXJpdCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnYWN0aW9uJywgJ2Rpc2FibGVkJywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBmb250U2l6ZSBhcHBsaWVkIHRvIHRoZSBpY29uLiBEZWZhdWx0cyB0byAyNHB4LCBidXQgY2FuIGJlIGNvbmZpZ3VyZSB0byBpbmhlcml0IGZvbnQgc2l6ZS5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIGZvbnRTaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnbGFyZ2UnLCAnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGh0bWxDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJvb3Qgbm9kZSB3aWxsIGluaGVyaXQgdGhlIGN1c3RvbSBgY29tcG9uZW50YCdzIHZpZXdCb3ggYW5kIHRoZSBgdmlld0JveGBcbiAgICogcHJvcCB3aWxsIGJlIGlnbm9yZWQuXG4gICAqIFVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIHJlZmVyZW5jZSBhIGN1c3RvbSBgY29tcG9uZW50YCBhbmQgaGF2ZSBgU3ZnSWNvbmAgcGFzcyB0aGF0XG4gICAqIGBjb21wb25lbnRgJ3Mgdmlld0JveCB0byB0aGUgcm9vdCBub2RlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW5oZXJpdFZpZXdCb3g6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHNoYXBlLXJlbmRlcmluZyBhdHRyaWJ1dGUuIFRoZSBiZWhhdmlvciBvZiB0aGUgZGlmZmVyZW50IG9wdGlvbnMgaXMgZGVzY3JpYmVkIG9uIHRoZVxuICAgKiBbTUROIFdlYiBEb2NzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlL3NoYXBlLXJlbmRlcmluZykuXG4gICAqIElmIHlvdSBhcmUgaGF2aW5nIGlzc3VlcyB3aXRoIGJsdXJyeSBpY29ucyB5b3Ugc2hvdWxkIGludmVzdGlnYXRlIHRoaXMgcHJvcC5cbiAgICovXG4gIHNoYXBlUmVuZGVyaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogUHJvdmlkZXMgYSBodW1hbi1yZWFkYWJsZSB0aXRsZSBmb3IgdGhlIGVsZW1lbnQgdGhhdCBjb250YWlucyBpdC5cbiAgICogaHR0cHM6Ly93d3cudzMub3JnL1RSL1NWRy1hY2Nlc3MvI0VxdWl2YWxlbnRcbiAgICovXG4gIHRpdGxlQWNjZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byByZWRlZmluZSB3aGF0IHRoZSBjb29yZGluYXRlcyB3aXRob3V0IHVuaXRzIG1lYW4gaW5zaWRlIGFuIFNWRyBlbGVtZW50LlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIFNWRyBlbGVtZW50IGlzIDUwMCAod2lkdGgpIGJ5IDIwMCAoaGVpZ2h0KSxcbiAgICogYW5kIHlvdSBwYXNzIHZpZXdCb3g9XCIwIDAgNTAgMjBcIixcbiAgICogdGhpcyBtZWFucyB0aGF0IHRoZSBjb29yZGluYXRlcyBpbnNpZGUgdGhlIFNWRyB3aWxsIGdvIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciAoMCwwKVxuICAgKiB0byBib3R0b20gcmlnaHQgKDUwLDIwKSBhbmQgZWFjaCB1bml0IHdpbGwgYmUgd29ydGggMTBweC5cbiAgICogQGRlZmF1bHQgJzAgMCAyNCAyNCdcbiAgICovXG4gIHZpZXdCb3g6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5TdmdJY29uLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5leHBvcnQgZGVmYXVsdCBTdmdJY29uOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU3ZnSWNvbiBmcm9tICcuLi9TdmdJY29uJztcblxuLyoqXG4gKiBQcml2YXRlIG1vZHVsZSByZXNlcnZlZCBmb3IgQG11aSBwYWNrYWdlcy5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN2Z0ljb24ocGF0aCwgZGlzcGxheU5hbWUpIHtcbiAgZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU3ZnSWNvbiwgX2V4dGVuZHMoe1xuICAgICAgXCJkYXRhLXRlc3RpZFwiOiBgJHtkaXNwbGF5TmFtZX1JY29uYCxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBwYXRoXG4gICAgfSkpO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gTmVlZCB0byBzZXQgYGRpc3BsYXlOYW1lYCBvbiB0aGUgaW5uZXIgY29tcG9uZW50IGZvciBSZWFjdC5tZW1vLlxuICAgIC8vIFJlYWN0IHByaW9yIHRvIDE2LjE0IGlnbm9yZXMgYGRpc3BsYXlOYW1lYCBvbiB0aGUgd3JhcHBlci5cbiAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBgJHtkaXNwbGF5TmFtZX1JY29uYDtcbiAgfVxuICBDb21wb25lbnQubXVpTmFtZSA9IFN2Z0ljb24ubXVpTmFtZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5tZW1vKCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDb21wb25lbnQpKTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VDb250ZXh0LCBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB3ZWFrTWVtb2l6ZSBmcm9tICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJy4uL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCByZWdpc3RlclN0eWxlcywgaW5zZXJ0U3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgfSBmcm9tICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciBpc0Jyb3dzZXIgPSBcIm9iamVjdFwiICE9PSAndW5kZWZpbmVkJztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG52YXIgRW1vdGlvbkNhY2hlQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL1JlYWN0LmNyZWF0ZUNvbnRleHQoIC8vIHdlJ3JlIGRvaW5nIHRoaXMgdG8gYXZvaWQgcHJlY29uc3RydWN0J3MgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIGluIHRoaXMgb25lIGNhc2Vcbi8vIGJlY2F1c2UgdGhpcyBtb2R1bGUgaXMgcHJpbWFyaWx5IGludGVuZGVkIGZvciB0aGUgYnJvd3NlciBhbmQgbm9kZVxuLy8gYnV0IGl0J3MgYWxzbyByZXF1aXJlZCBpbiByZWFjdCBuYXRpdmUgYW5kIHNpbWlsYXIgZW52aXJvbm1lbnRzIHNvbWV0aW1lc1xuLy8gYW5kIHdlIGNvdWxkIGhhdmUgYSBzcGVjaWFsIGJ1aWxkIGp1c3QgZm9yIHRoYXRcbi8vIGJ1dCB0aGlzIGlzIG11Y2ggZWFzaWVyIGFuZCB0aGUgbmF0aXZlIHBhY2thZ2VzXG4vLyBtaWdodCB1c2UgYSBkaWZmZXJlbnQgdGhlbWUgY29udGV4dCBpbiB0aGUgZnV0dXJlIGFueXdheVxudHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IC8qICNfX1BVUkVfXyAqL2NyZWF0ZUNhY2hlKHtcbiAga2V5OiAnY3NzJ1xufSkgOiBudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRW1vdGlvbkNhY2hlQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdFbW90aW9uQ2FjaGVDb250ZXh0Jztcbn1cblxudmFyIENhY2hlUHJvdmlkZXIgPSBFbW90aW9uQ2FjaGVDb250ZXh0LlByb3ZpZGVyO1xudmFyIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSA9IGZ1bmN0aW9uIHVzZUVtb3Rpb25DYWNoZSgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoRW1vdGlvbkNhY2hlQ29udGV4dCk7XG59O1xuXG52YXIgd2l0aEVtb3Rpb25DYWNoZSA9IGZ1bmN0aW9uIHdpdGhFbW90aW9uQ2FjaGUoZnVuYykge1xuICAvLyAkRmxvd0ZpeE1lXG4gIHJldHVybiAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIC8vIHRoZSBjYWNoZSB3aWxsIG5ldmVyIGJlIG51bGwgaW4gdGhlIGJyb3dzZXJcbiAgICB2YXIgY2FjaGUgPSB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xuICAgIHJldHVybiBmdW5jKHByb3BzLCBjYWNoZSwgcmVmKTtcbiAgfSk7XG59O1xuXG5pZiAoIWlzQnJvd3Nlcikge1xuICB3aXRoRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gd2l0aEVtb3Rpb25DYWNoZShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgdmFyIGNhY2hlID0gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcblxuICAgICAgaWYgKGNhY2hlID09PSBudWxsKSB7XG4gICAgICAgIC8vIHllcywgd2UncmUgcG90ZW50aWFsbHkgY3JlYXRpbmcgdGhpcyBvbiBldmVyeSByZW5kZXJcbiAgICAgICAgLy8gaXQgZG9lc24ndCBhY3R1YWxseSBtYXR0ZXIgdGhvdWdoIHNpbmNlIGl0J3Mgb25seSBvbiB0aGUgc2VydmVyXG4gICAgICAgIC8vIHNvIHRoZXJlIHdpbGwgb25seSBldmVyeSBiZSBhIHNpbmdsZSByZW5kZXJcbiAgICAgICAgLy8gdGhhdCBjb3VsZCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZSBiZWNhdXNlIG9mIHN1c3BlbnNlIGFuZCBldGMuIGJ1dCBmb3Igbm93LFxuICAgICAgICAvLyB0aGlzIHdvcmtzIGFuZCBpIGRvbid0IHdhbnQgdG8gb3B0aW1pc2UgZm9yIGEgZnV0dXJlIHRoaW5nIHRoYXQgd2UgYXJlbid0IHN1cmUgYWJvdXRcbiAgICAgICAgY2FjaGUgPSBjcmVhdGVDYWNoZSh7XG4gICAgICAgICAga2V5OiAnY3NzJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEVtb3Rpb25DYWNoZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgICB2YWx1ZTogY2FjaGVcbiAgICAgICAgfSwgZnVuYyhwcm9wcywgY2FjaGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jKHByb3BzLCBjYWNoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIFRoZW1lQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUaGVtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvblRoZW1lQ29udGV4dCc7XG59XG5cbnZhciB1c2VUaGVtZSA9IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xufTtcblxudmFyIGdldFRoZW1lID0gZnVuY3Rpb24gZ2V0VGhlbWUob3V0ZXJUaGVtZSwgdGhlbWUpIHtcbiAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IHRoZW1lKG91dGVyVGhlbWUpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKG1lcmdlZFRoZW1lID09IG51bGwgfHwgdHlwZW9mIG1lcmdlZFRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG1lcmdlZFRoZW1lKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLiB0aGVtZT17KCkgPT4gKHt9KX0hJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKHRoZW1lID09IG51bGwgfHwgdHlwZW9mIHRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHRoZW1lKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgbWFrZSB5b3VyIHRoZW1lIHByb3AgYSBwbGFpbiBvYmplY3QnKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgdGhlbWUpO1xufTtcblxudmFyIGNyZWF0ZUNhY2hlV2l0aFRoZW1lID0gLyogI19fUFVSRV9fICovd2Vha01lbW9pemUoZnVuY3Rpb24gKG91dGVyVGhlbWUpIHtcbiAgcmV0dXJuIHdlYWtNZW1vaXplKGZ1bmN0aW9uICh0aGVtZSkge1xuICAgIHJldHVybiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSk7XG4gIH0pO1xufSk7XG52YXIgVGhlbWVQcm92aWRlciA9IGZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9wcy50aGVtZSAhPT0gdGhlbWUpIHtcbiAgICB0aGVtZSA9IGNyZWF0ZUNhY2hlV2l0aFRoZW1lKHRoZW1lKShwcm9wcy50aGVtZSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRoZW1lXG4gIH0sIHByb3BzLmNoaWxkcmVuKTtcbn07XG5mdW5jdGlvbiB3aXRoVGhlbWUoQ29tcG9uZW50KSB7XG4gIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHZhciB0aGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICB0aGVtZTogdGhlbWUsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzKSk7XG4gIH07IC8vICRGbG93Rml4TWVcblxuXG4gIHZhciBXaXRoVGhlbWUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihyZW5kZXIpO1xuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSBcIldpdGhUaGVtZShcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIjtcbiAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50KTtcbn1cblxudmFyIGdldExhc3RQYXJ0ID0gZnVuY3Rpb24gZ2V0TGFzdFBhcnQoZnVuY3Rpb25OYW1lKSB7XG4gIC8vIFRoZSBtYXRjaCBtYXkgYmUgc29tZXRoaW5nIGxpa2UgJ09iamVjdC5jcmVhdGVFbW90aW9uUHJvcHMnIG9yXG4gIC8vICdMb2FkZXIucHJvdG90eXBlLnJlbmRlcidcbiAgdmFyIHBhcnRzID0gZnVuY3Rpb25OYW1lLnNwbGl0KCcuJyk7XG4gIHJldHVybiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcbn07XG5cbnZhciBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUgPSBmdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUobGluZSkge1xuICAvLyBWOFxuICB2YXIgbWF0Y2ggPSAvXlxccythdFxccysoW0EtWmEtejAtOSQuXSspXFxzLy5leGVjKGxpbmUpO1xuICBpZiAobWF0Y2gpIHJldHVybiBnZXRMYXN0UGFydChtYXRjaFsxXSk7IC8vIFNhZmFyaSAvIEZpcmVmb3hcblxuICBtYXRjaCA9IC9eKFtBLVphLXowLTkkLl0rKUAvLmV4ZWMobGluZSk7XG4gIGlmIChtYXRjaCkgcmV0dXJuIGdldExhc3RQYXJ0KG1hdGNoWzFdKTtcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciBpbnRlcm5hbFJlYWN0RnVuY3Rpb25OYW1lcyA9IC8qICNfX1BVUkVfXyAqL25ldyBTZXQoWydyZW5kZXJXaXRoSG9va3MnLCAncHJvY2Vzc0NoaWxkJywgJ2ZpbmlzaENsYXNzQ29tcG9uZW50JywgJ3JlbmRlclRvU3RyaW5nJ10pOyAvLyBUaGVzZSBpZGVudGlmaWVycyBjb21lIGZyb20gZXJyb3Igc3RhY2tzLCBzbyB0aGV5IGhhdmUgdG8gYmUgdmFsaWQgSlNcbi8vIGlkZW50aWZpZXJzLCB0aHVzIHdlIG9ubHkgbmVlZCB0byByZXBsYWNlIHdoYXQgaXMgYSB2YWxpZCBjaGFyYWN0ZXIgZm9yIEpTLFxuLy8gYnV0IG5vdCBmb3IgQ1NTLlxuXG52YXIgc2FuaXRpemVJZGVudGlmaWVyID0gZnVuY3Rpb24gc2FuaXRpemVJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgcmV0dXJuIGlkZW50aWZpZXIucmVwbGFjZSgvXFwkL2csICctJyk7XG59O1xuXG52YXIgZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZSA9IGZ1bmN0aW9uIGdldExhYmVsRnJvbVN0YWNrVHJhY2Uoc3RhY2tUcmFjZSkge1xuICBpZiAoIXN0YWNrVHJhY2UpIHJldHVybiB1bmRlZmluZWQ7XG4gIHZhciBsaW5lcyA9IHN0YWNrVHJhY2Uuc3BsaXQoJ1xcbicpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZnVuY3Rpb25OYW1lID0gZ2V0RnVuY3Rpb25OYW1lRnJvbVN0YWNrVHJhY2VMaW5lKGxpbmVzW2ldKTsgLy8gVGhlIGZpcnN0IGxpbmUgb2YgVjggc3RhY2sgdHJhY2VzIGlzIGp1c3QgXCJFcnJvclwiXG5cbiAgICBpZiAoIWZ1bmN0aW9uTmFtZSkgY29udGludWU7IC8vIElmIHdlIHJlYWNoIG9uZSBvZiB0aGVzZSwgd2UgaGF2ZSBnb25lIHRvbyBmYXIgYW5kIHNob3VsZCBxdWl0XG5cbiAgICBpZiAoaW50ZXJuYWxSZWFjdEZ1bmN0aW9uTmFtZXMuaGFzKGZ1bmN0aW9uTmFtZSkpIGJyZWFrOyAvLyBUaGUgY29tcG9uZW50IG5hbWUgaXMgdGhlIGZpcnN0IGZ1bmN0aW9uIGluIHRoZSBzdGFjayB0aGF0IHN0YXJ0cyB3aXRoIGFuXG4gICAgLy8gdXBwZXJjYXNlIGxldHRlclxuXG4gICAgaWYgKC9eW0EtWl0vLnRlc3QoZnVuY3Rpb25OYW1lKSkgcmV0dXJuIHNhbml0aXplSWRlbnRpZmllcihmdW5jdGlvbk5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciB0eXBlUHJvcE5hbWUgPSAnX19FTU9USU9OX1RZUEVfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgbGFiZWxQcm9wTmFtZSA9ICdfX0VNT1RJT05fTEFCRUxfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgY3JlYXRlRW1vdGlvblByb3BzID0gZnVuY3Rpb24gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBwcm9wcy5jc3MgPT09ICdzdHJpbmcnICYmIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgY3NzIGRlY2xhcmF0aW9uXG4gIHByb3BzLmNzcy5pbmRleE9mKCc6JykgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyaW5ncyBhcmUgbm90IGFsbG93ZWQgYXMgY3NzIHByb3AgdmFsdWVzLCBwbGVhc2Ugd3JhcCBpdCBpbiBhIGNzcyB0ZW1wbGF0ZSBsaXRlcmFsIGZyb20gJ0BlbW90aW9uL3JlYWN0JyBsaWtlIHRoaXM6IGNzc2BcIiArIHByb3BzLmNzcyArIFwiYFwiKTtcbiAgfVxuXG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wc1t0eXBlUHJvcE5hbWVdID0gdHlwZTsgLy8gRm9yIHBlcmZvcm1hbmNlLCBvbmx5IGNhbGwgZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZSBpbiBkZXZlbG9wbWVudCBhbmQgd2hlblxuICAvLyB0aGUgbGFiZWwgaGFzbid0IGFscmVhZHkgYmVlbiBjb21wdXRlZFxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICEhcHJvcHMuY3NzICYmICh0eXBlb2YgcHJvcHMuY3NzICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgcHJvcHMuY3NzLm5hbWUgIT09ICdzdHJpbmcnIHx8IHByb3BzLmNzcy5uYW1lLmluZGV4T2YoJy0nKSA9PT0gLTEpKSB7XG4gICAgdmFyIGxhYmVsID0gZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZShuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgaWYgKGxhYmVsKSBuZXdQcm9wc1tsYWJlbFByb3BOYW1lXSA9IGxhYmVsO1xuICB9XG5cbiAgcmV0dXJuIG5ld1Byb3BzO1xufTtcblxudmFyIEluc2VydGlvbiA9IGZ1bmN0aW9uIEluc2VydGlvbihfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBzZXJpYWxpemVkID0gX3JlZi5zZXJpYWxpemVkLFxuICAgICAgaXNTdHJpbmdUYWcgPSBfcmVmLmlzU3RyaW5nVGFnO1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIEVtb3Rpb24gPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICB2YXIgY3NzUHJvcCA9IHByb3BzLmNzczsgLy8gc28gdGhhdCB1c2luZyBgY3NzYCBmcm9tIGBlbW90aW9uYCBhbmQgcGFzc2luZyB0aGUgcmVzdWx0IHRvIHRoZSBjc3MgcHJvcCB3b3Jrc1xuICAvLyBub3QgcGFzc2luZyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBzZXJpYWxpemVTdHlsZXMgYmVjYXVzZSBpdCB3b3VsZFxuICAvLyBtYWtlIGNlcnRhaW4gYmFiZWwgb3B0aW1pc2F0aW9ucyBub3QgcG9zc2libGVcblxuICBpZiAodHlwZW9mIGNzc1Byb3AgPT09ICdzdHJpbmcnICYmIGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgIGNzc1Byb3AgPSBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdO1xuICB9XG5cbiAgdmFyIFdyYXBwZWRDb21wb25lbnQgPSBwcm9wc1t0eXBlUHJvcE5hbWVdO1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtjc3NQcm9wXTtcbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuXG4gIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgdW5kZWZpbmVkLCBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgdmFyIGxhYmVsRnJvbVN0YWNrID0gcHJvcHNbbGFiZWxQcm9wTmFtZV07XG5cbiAgICBpZiAobGFiZWxGcm9tU3RhY2spIHtcbiAgICAgIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3NlcmlhbGl6ZWQsICdsYWJlbDonICsgbGFiZWxGcm9tU3RhY2sgKyAnOyddKTtcbiAgICB9XG4gIH1cblxuICBjbGFzc05hbWUgKz0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpICYmIGtleSAhPT0gJ2NzcycgJiYga2V5ICE9PSB0eXBlUHJvcE5hbWUgJiYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgfHwga2V5ICE9PSBsYWJlbFByb3BOYW1lKSkge1xuICAgICAgbmV3UHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICB9XG5cbiAgbmV3UHJvcHMucmVmID0gcmVmO1xuICBuZXdQcm9wcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5zZXJ0aW9uLCB7XG4gICAgY2FjaGU6IGNhY2hlLFxuICAgIHNlcmlhbGl6ZWQ6IHNlcmlhbGl6ZWQsXG4gICAgaXNTdHJpbmdUYWc6IHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ID09PSAnc3RyaW5nJ1xuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgbmV3UHJvcHMpKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBFbW90aW9uLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25Dc3NQcm9wSW50ZXJuYWwnO1xufVxuXG52YXIgRW1vdGlvbiQxID0gRW1vdGlvbjtcblxuZXhwb3J0IHsgQ2FjaGVQcm92aWRlciBhcyBDLCBFbW90aW9uJDEgYXMgRSwgVGhlbWVDb250ZXh0IGFzIFQsIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSBhcyBfLCBUaGVtZVByb3ZpZGVyIGFzIGEsIHdpdGhUaGVtZSBhcyBiLCBjcmVhdGVFbW90aW9uUHJvcHMgYXMgYywgaGFzT3duUHJvcGVydHkgYXMgaCwgaXNCcm93c2VyIGFzIGksIHVzZVRoZW1lIGFzIHUsIHdpdGhFbW90aW9uQ2FjaGUgYXMgdyB9O1xuIiwidmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnO1xuZnVuY3Rpb24gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWVzKSB7XG4gIHZhciByYXdDbGFzc05hbWUgPSAnJztcbiAgY2xhc3NOYW1lcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIGlmIChyZWdpc3RlcmVkW2NsYXNzTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVnaXN0ZXJlZFN0eWxlcy5wdXNoKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSArIFwiO1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmF3Q2xhc3NOYW1lICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByYXdDbGFzc05hbWU7XG59XG52YXIgcmVnaXN0ZXJTdHlsZXMgPSBmdW5jdGlvbiByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gIGlmICggLy8gd2Ugb25seSBuZWVkIHRvIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSByZWdpc3RlcmVkIGNhY2hlIGlmIHRoZVxuICAvLyBjbGFzcyBuYW1lIGNvdWxkIGJlIHVzZWQgZnVydGhlciBkb3duXG4gIC8vIHRoZSB0cmVlIGJ1dCBpZiBpdCdzIGEgc3RyaW5nIHRhZywgd2Uga25vdyBpdCB3b24ndFxuICAvLyBzbyB3ZSBkb24ndCBoYXZlIHRvIGFkZCBpdCB0byByZWdpc3RlcmVkIGNhY2hlLlxuICAvLyB0aGlzIGltcHJvdmVzIG1lbW9yeSB1c2FnZSBzaW5jZSB3ZSBjYW4gYXZvaWQgc3RvcmluZyB0aGUgd2hvbGUgc3R5bGUgc3RyaW5nXG4gIChpc1N0cmluZ1RhZyA9PT0gZmFsc2UgfHwgLy8gd2UgbmVlZCB0byBhbHdheXMgc3RvcmUgaXQgaWYgd2UncmUgaW4gY29tcGF0IG1vZGUgYW5kXG4gIC8vIGluIG5vZGUgc2luY2UgZW1vdGlvbi1zZXJ2ZXIgcmVsaWVzIG9uIHdoZXRoZXIgYSBzdHlsZSBpcyBpblxuICAvLyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBrbm93IHdoZXRoZXIgYSBzdHlsZSBpcyBnbG9iYWwgb3Igbm90XG4gIC8vIGFsc28sIG5vdGUgdGhhdCB0aGlzIGNoZWNrIHdpbGwgYmUgZGVhZCBjb2RlIGVsaW1pbmF0ZWQgaW4gdGhlIGJyb3dzZXJcbiAgaXNCcm93c2VyID09PSBmYWxzZSApICYmIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID0gc2VyaWFsaXplZC5zdHlsZXM7XG4gIH1cbn07XG52YXIgaW5zZXJ0U3R5bGVzID0gZnVuY3Rpb24gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKGNhY2hlLmluc2VydGVkW3NlcmlhbGl6ZWQubmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBjdXJyZW50ID0gc2VyaWFsaXplZDtcblxuICAgIGRvIHtcbiAgICAgIGNhY2hlLmluc2VydChzZXJpYWxpemVkID09PSBjdXJyZW50ID8gXCIuXCIgKyBjbGFzc05hbWUgOiAnJywgY3VycmVudCwgY2FjaGUuc2hlZXQsIHRydWUpO1xuXG4gICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgIH0gd2hpbGUgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcywgcmVnaXN0ZXJTdHlsZXMgfTtcbiIsImV4cG9ydCBkZWZhdWx0ICckJG1hdGVyaWFsJzsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgdW5zdGFibGVfdXNlRW5oYW5jZWRFZmZlY3QgYXMgdXNlRW5oYW5jZWRFZmZlY3QgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUVuaGFuY2VkRWZmZWN0OyIsImltcG9ydCB7IHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgb3duZXJEb2N1bWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIGNsaWVudFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTUuNSAxNGgtLjc5bC0uMjgtLjI3QzE1LjQxIDEyLjU5IDE2IDExLjExIDE2IDkuNSAxNiA1LjkxIDEzLjA5IDMgOS41IDNTMyA1LjkxIDMgOS41IDUuOTEgMTYgOS41IDE2YzEuNjEgMCAzLjA5LS41OSA0LjIzLTEuNTdsLjI3LjI4di43OWw1IDQuOTlMMjAuNDkgMTl6bS02IDBDNy4wMSAxNCA1IDExLjk5IDUgOS41UzcuMDEgNSA5LjUgNSAxNCA3LjAxIDE0IDkuNSAxMS45OSAxNCA5LjUgMTRcIlxufSksICdTZWFyY2gnKTsiLCJpbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmZ1bmN0aW9uIG1lcmdlKGFjYywgaXRlbSkge1xuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gYWNjO1xuICB9XG4gIHJldHVybiBkZWVwbWVyZ2UoYWNjLCBpdGVtLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcCwgaXQncyB3YXkgZmFzdGVyLlxuICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IG1lcmdlOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudmFyIHN5bmNGYWxsYmFjayA9IGZ1bmN0aW9uIHN5bmNGYWxsYmFjayhjcmVhdGUpIHtcbiAgcmV0dXJuIGNyZWF0ZSgpO1xufTtcblxudmFyIHVzZUluc2VydGlvbkVmZmVjdCA9IFJlYWN0Wyd1c2VJbnNlcnRpb24nICsgJ0VmZmVjdCddID8gUmVhY3RbJ3VzZUluc2VydGlvbicgKyAnRWZmZWN0J10gOiBmYWxzZTtcbnZhciB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrID0gdXNlSW5zZXJ0aW9uRWZmZWN0IHx8IHN5bmNGYWxsYmFjaztcbnZhciB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2sgPSB1c2VJbnNlcnRpb25FZmZlY3QgfHwgUmVhY3QudXNlTGF5b3V0RWZmZWN0O1xuXG5leHBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrLCB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2sgfTtcbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBhc3BlY3RSYXRpbzogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IHsgdW5pdGxlc3NLZXlzIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBoYXNoU3RyaW5nIGZyb20gJ0BlbW90aW9uL2hhc2gnO1xuaW1wb3J0IHVuaXRsZXNzIGZyb20gJ0BlbW90aW9uL3VuaXRsZXNzJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xudmFyIFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SID0gXCJZb3UgaGF2ZSBwYXNzZWQgaW4gZmFsc3kgdmFsdWUgYXMgc3R5bGUgb2JqZWN0J3Mga2V5IChjYW4gaGFwcGVuIHdoZW4gaW4gZXhhbXBsZSB5b3UgcGFzcyB1bmV4cG9ydGVkIGNvbXBvbmVudCBhcyBjb21wdXRlZCBrZXkpLlwiO1xudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIGFuaW1hdGlvblJlZ2V4ID0gL19FTU9fKFteX10rPylfKFteXSo/KV9FTU9fL2c7XG5cbnZhciBpc0N1c3RvbVByb3BlcnR5ID0gZnVuY3Rpb24gaXNDdXN0b21Qcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gcHJvcGVydHkuY2hhckNvZGVBdCgxKSA9PT0gNDU7XG59O1xuXG52YXIgaXNQcm9jZXNzYWJsZVZhbHVlID0gZnVuY3Rpb24gaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nO1xufTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIGlzQ3VzdG9tUHJvcGVydHkoc3R5bGVOYW1lKSA/IHN0eWxlTmFtZSA6IHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgbmFtZTogcDEsXG4gICAgICAgICAgICAgIHN0eWxlczogcDIsXG4gICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBwMTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBjb250ZW50VmFsdWVQYXR0ZXJuID0gLyh2YXJ8YXR0cnxjb3VudGVycz98dXJsfGVsZW1lbnR8KCgocmVwZWF0aW5nLSk/KGxpbmVhcnxyYWRpYWwpKXxjb25pYyktZ3JhZGllbnQpXFwofChuby0pPyhvcGVufGNsb3NlKS1xdW90ZS87XG4gIHZhciBjb250ZW50VmFsdWVzID0gWydub3JtYWwnLCAnbm9uZScsICdpbml0aWFsJywgJ2luaGVyaXQnLCAndW5zZXQnXTtcbiAgdmFyIG9sZFByb2Nlc3NTdHlsZVZhbHVlID0gcHJvY2Vzc1N0eWxlVmFsdWU7XG4gIHZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuICB2YXIgaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG4gIHZhciBoeXBoZW5hdGVkQ2FjaGUgPSB7fTtcblxuICBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IGNvbnRlbnRWYWx1ZXMuaW5kZXhPZih2YWx1ZSkgPT09IC0xICYmICFjb250ZW50VmFsdWVQYXR0ZXJuLnRlc3QodmFsdWUpICYmICh2YWx1ZS5jaGFyQXQoMCkgIT09IHZhbHVlLmNoYXJBdCh2YWx1ZS5sZW5ndGggLSAxKSB8fCB2YWx1ZS5jaGFyQXQoMCkgIT09ICdcIicgJiYgdmFsdWUuY2hhckF0KDApICE9PSBcIidcIikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IHNlZW0gdG8gYmUgdXNpbmcgYSB2YWx1ZSBmb3IgJ2NvbnRlbnQnIHdpdGhvdXQgcXVvdGVzLCB0cnkgcmVwbGFjaW5nIGl0IHdpdGggYGNvbnRlbnQ6ICdcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIidgXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcm9jZXNzZWQgPSBvbGRQcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKTtcblxuICAgIGlmIChwcm9jZXNzZWQgIT09ICcnICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYga2V5LmluZGV4T2YoJy0nKSAhPT0gLTEgJiYgaHlwaGVuYXRlZENhY2hlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaHlwaGVuYXRlZENhY2hlW2tleV0gPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihcIlVzaW5nIGtlYmFiLWNhc2UgZm9yIGNzcyBwcm9wZXJ0aWVzIGluIG9iamVjdHMgaXMgbm90IHN1cHBvcnRlZC4gRGlkIHlvdSBtZWFuIFwiICsga2V5LnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykucmVwbGFjZShoeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoc3RyLCBfY2hhcikge1xuICAgICAgICByZXR1cm4gX2NoYXIudG9VcHBlckNhc2UoKTtcbiAgICAgIH0pICsgXCI/XCIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWQ7XG4gIH07XG59XG5cbnZhciBub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSA9ICdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCAnICsgJ0BlbW90aW9uL2JhYmVsLXBsdWdpbiwgdGhlIHN3YyBFbW90aW9uIHBsdWdpbiwgb3IgYW5vdGhlciBFbW90aW9uLWF3YXJlICcgKyAnY29tcGlsZXIgdHJhbnNmb3JtLic7XG5cbmZ1bmN0aW9uIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pIHtcbiAgaWYgKGludGVycG9sYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChpbnRlcnBvbGF0aW9uLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24udG9TdHJpbmcoKSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICBzd2l0Y2ggKHR5cGVvZiBpbnRlcnBvbGF0aW9uKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICB7XG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLmFuaW0gPT09IDEpIHtcbiAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICBuYW1lOiBpbnRlcnBvbGF0aW9uLm5hbWUsXG4gICAgICAgICAgICBzdHlsZXM6IGludGVycG9sYXRpb24uc3R5bGVzLFxuICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGlvbi5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGludGVycG9sYXRpb24ubmV4dDtcblxuICAgICAgICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIG5vdCB0aGUgbW9zdCBlZmZpY2llbnQgdGhpbmcgZXZlciBidXQgdGhpcyBpcyBhIHByZXR0eSByYXJlIGNhc2VcbiAgICAgICAgICAgIC8vIGFuZCB0aGVyZSB3aWxsIGJlIHZlcnkgZmV3IGl0ZXJhdGlvbnMgb2YgdGhpcyBnZW5lcmFsbHlcbiAgICAgICAgICAgIHdoaWxlIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5leHQubmFtZSxcbiAgICAgICAgICAgICAgICBzdHlsZXM6IG5leHQuc3R5bGVzLFxuICAgICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzdHlsZXMgPSBpbnRlcnBvbGF0aW9uLnN0eWxlcyArIFwiO1wiO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3R5bGVzICs9IGludGVycG9sYXRpb24ubWFwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbik7XG4gICAgICB9XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIGlmIChtZXJnZWRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzQ3Vyc29yID0gY3Vyc29yO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBpbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzKTtcbiAgICAgICAgICBjdXJzb3IgPSBwcmV2aW91c0N1cnNvcjtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRnVuY3Rpb25zIHRoYXQgYXJlIGludGVycG9sYXRlZCBpbiBjc3MgY2FsbHMgd2lsbCBiZSBzdHJpbmdpZmllZC5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIGhhdmUgYSBjc3MgY2FsbCBiYXNlZCBvbiBwcm9wcywgY3JlYXRlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY3NzIGNhbGwgbGlrZSB0aGlzXFxuJyArICdsZXQgZHluYW1pY1N0eWxlID0gKHByb3BzKSA9PiBjc3NgY29sb3I6ICR7cHJvcHMuY29sb3J9YFxcbicgKyAnSXQgY2FuIGJlIGNhbGxlZCBkaXJlY3RseSB3aXRoIHByb3BzIG9yIGludGVycG9sYXRlZCBpbiBhIHN0eWxlZCBjYWxsIGxpa2UgdGhpc1xcbicgKyBcImxldCBTb21lQ29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKWAke2R5bmFtaWNTdHlsZX1gXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBbXTtcbiAgICAgICAgdmFyIHJlcGxhY2VkID0gaW50ZXJwb2xhdGlvbi5yZXBsYWNlKGFuaW1hdGlvblJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gsIHAxLCBwMikge1xuICAgICAgICAgIHZhciBmYWtlVmFyTmFtZSA9IFwiYW5pbWF0aW9uXCIgKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgICBtYXRjaGVkLnB1c2goXCJjb25zdCBcIiArIGZha2VWYXJOYW1lICsgXCIgPSBrZXlmcmFtZXNgXCIgKyBwMi5yZXBsYWNlKC9eQGtleWZyYW1lcyBhbmltYXRpb24tXFx3Ky8sICcnKSArIFwiYFwiKTtcbiAgICAgICAgICByZXR1cm4gXCIke1wiICsgZmFrZVZhck5hbWUgKyBcIn1cIjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignYGtleWZyYW1lc2Agb3V0cHV0IGdvdCBpbnRlcnBvbGF0ZWQgaW50byBwbGFpbiBzdHJpbmcsIHBsZWFzZSB3cmFwIGl0IHdpdGggYGNzc2AuXFxuXFxuJyArICdJbnN0ZWFkIG9mIGRvaW5nIHRoaXM6XFxuXFxuJyArIFtdLmNvbmNhdChtYXRjaGVkLCBbXCJgXCIgKyByZXBsYWNlZCArIFwiYFwiXSkuam9pbignXFxuJykgKyAnXFxuXFxuWW91IHNob3VsZCB3cmFwIGl0IHdpdGggYGNzc2AgbGlrZSB0aGlzOlxcblxcbicgKyAoXCJjc3NgXCIgKyByZXBsYWNlZCArIFwiYFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gIH0gLy8gZmluYWxpemUgc3RyaW5nIHZhbHVlcyAocmVndWxhciBzdHJpbmdzIGFuZCBmdW5jdGlvbnMgaW50ZXJwb2xhdGVkIGludG8gY3NzIGNhbGxzKVxuXG5cbiAgaWYgKHJlZ2lzdGVyZWQgPT0gbnVsbCkge1xuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgdmFyIGNhY2hlZCA9IHJlZ2lzdGVyZWRbaW50ZXJwb2xhdGlvbl07XG4gIHJldHVybiBjYWNoZWQgIT09IHVuZGVmaW5lZCA/IGNhY2hlZCA6IGludGVycG9sYXRpb247XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9iaikge1xuICB2YXIgc3RyaW5nID0gJyc7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdHJpbmcgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqW2ldKSArIFwiO1wiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgICAgdmFyIHZhbHVlID0gb2JqW19rZXldO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAocmVnaXN0ZXJlZCAhPSBudWxsICYmIHJlZ2lzdGVyZWRbdmFsdWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzdHJpbmcgKz0gX2tleSArIFwie1wiICsgcmVnaXN0ZXJlZFt2YWx1ZV0gKyBcIn1cIjtcbiAgICAgICAgfSBlbHNlIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKF9rZXksIHZhbHVlKSArIFwiO1wiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoX2tleSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlWzBdID09PSAnc3RyaW5nJyAmJiAocmVnaXN0ZXJlZCA9PSBudWxsIHx8IHJlZ2lzdGVyZWRbdmFsdWVbMF1dID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHZhbHVlLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZVtfaV0pKSB7XG4gICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZVtfaV0pICsgXCI7XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpbnRlcnBvbGF0ZWQgPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCB2YWx1ZSk7XG5cbiAgICAgICAgICBzd2l0Y2ggKF9rZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgX2tleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoVU5ERUZJTkVEX0FTX09CSkVDVF9LRVlfRVJST1IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIn1cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBsYWJlbFBhdHRlcm4gPSAvbGFiZWw6XFxzKihbXlxccztcXG57XSspXFxzKig7fCQpL2c7XG52YXIgc291cmNlTWFwUGF0dGVybjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc291cmNlTWFwUGF0dGVybiA9IC9cXC9cXCojXFxzc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtcXFMrXFxzK1xcKlxcLy9nO1xufSAvLyB0aGlzIGlzIHRoZSBjdXJzb3IgZm9yIGtleWZyYW1lc1xuLy8ga2V5ZnJhbWVzIGFyZSBzdG9yZWQgb24gdGhlIFNlcmlhbGl6ZWRTdHlsZXMgb2JqZWN0IGFzIGEgbGlua2VkIGxpc3RcblxuXG52YXIgY3Vyc29yO1xudmFyIHNlcmlhbGl6ZVN0eWxlcyA9IGZ1bmN0aW9uIHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCByZWdpc3RlcmVkLCBtZXJnZWRQcm9wcykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnICYmIGFyZ3NbMF0gIT09IG51bGwgJiYgYXJnc1swXS5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhcmdzWzBdO1xuICB9XG5cbiAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICB2YXIgc3R5bGVzID0gJyc7XG4gIGN1cnNvciA9IHVuZGVmaW5lZDtcbiAgdmFyIHN0cmluZ3MgPSBhcmdzWzBdO1xuXG4gIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgc3RyaW5ncyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICB9XG5cbiAgICBzdHlsZXMgKz0gc3RyaW5nc1swXTtcbiAgfSAvLyB3ZSBzdGFydCBhdCAxIHNpbmNlIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgZmlyc3QgYXJnXG5cblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgYXJnc1tpXSk7XG5cbiAgICBpZiAoc3RyaW5nTW9kZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMgKz0gc3RyaW5nc1tpXTtcbiAgICB9XG4gIH1cblxuICB2YXIgc291cmNlTWFwO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgc3R5bGVzID0gc3R5bGVzLnJlcGxhY2Uoc291cmNlTWFwUGF0dGVybiwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICBzb3VyY2VNYXAgPSBtYXRjaDtcbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfSAvLyB1c2luZyBhIGdsb2JhbCByZWdleCB3aXRoIC5leGVjIGlzIHN0YXRlZnVsIHNvIGxhc3RJbmRleCBoYXMgdG8gYmUgcmVzZXQgZWFjaCB0aW1lXG5cblxuICBsYWJlbFBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgdmFyIGlkZW50aWZpZXJOYW1lID0gJyc7XG4gIHZhciBtYXRjaDsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YjgwOWMyY2YyOTQ5ODAwYTBmNjFmYjVcblxuICB3aGlsZSAoKG1hdGNoID0gbGFiZWxQYXR0ZXJuLmV4ZWMoc3R5bGVzKSkgIT09IG51bGwpIHtcbiAgICBpZGVudGlmaWVyTmFtZSArPSAnLScgKyAvLyAkRmxvd0ZpeE1lIHdlIGtub3cgaXQncyBub3QgbnVsbFxuICAgIG1hdGNoWzFdO1xuICB9XG5cbiAgdmFyIG5hbWUgPSBoYXNoU3RyaW5nKHN0eWxlcykgKyBpZGVudGlmaWVyTmFtZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWUgU2VyaWFsaXplZFN0eWxlcyB0eXBlIGRvZXNuJ3QgaGF2ZSB0b1N0cmluZyBwcm9wZXJ0eSAoYW5kIHdlIGRvbid0IHdhbnQgdG8gYWRkIGl0KVxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICBtYXA6IHNvdXJjZU1hcCxcbiAgICAgIG5leHQ6IGN1cnNvcixcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiWW91IGhhdmUgdHJpZWQgdG8gc3RyaW5naWZ5IG9iamVjdCByZXR1cm5lZCBmcm9tIGBjc3NgIGZ1bmN0aW9uLiBJdCBpc24ndCBzdXBwb3NlZCB0byBiZSB1c2VkIGRpcmVjdGx5IChlLmcuIGFzIHZhbHVlIG9mIHRoZSBgY2xhc3NOYW1lYCBwcm9wKSwgYnV0IHJhdGhlciBoYW5kZWQgdG8gZW1vdGlvbiBzbyBpdCBjYW4gaGFuZGxlIGl0IChlLmcuIGFzIHZhbHVlIG9mIGBjc3NgIHByb3ApLlwiO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgbmV4dDogY3Vyc29yXG4gIH07XG59O1xuXG5leHBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfTtcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanNcbi8vIFBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hYXBwbGVieS9zbWhhc2hlci9ibG9iLzYxYTA1MzBmMjgyNzdmMmU4NTBiZmMzOTYwMGNlNjFkMDJiNTE4ZGUvc3JjL011cm11ckhhc2gyLmNwcCNMMzctTDg2XG5mdW5jdGlvbiBtdXJtdXIyKHN0cikge1xuICAvLyAnbScgYW5kICdyJyBhcmUgbWl4aW5nIGNvbnN0YW50cyBnZW5lcmF0ZWQgb2ZmbGluZS5cbiAgLy8gVGhleSdyZSBub3QgcmVhbGx5ICdtYWdpYycsIHRoZXkganVzdCBoYXBwZW4gdG8gd29yayB3ZWxsLlxuICAvLyBjb25zdCBtID0gMHg1YmQxZTk5NTtcbiAgLy8gY29uc3QgciA9IDI0O1xuICAvLyBJbml0aWFsaXplIHRoZSBoYXNoXG4gIHZhciBoID0gMDsgLy8gTWl4IDQgYnl0ZXMgYXQgYSB0aW1lIGludG8gdGhlIGhhc2hcblxuICB2YXIgayxcbiAgICAgIGkgPSAwLFxuICAgICAgbGVuID0gc3RyLmxlbmd0aDtcblxuICBmb3IgKDsgbGVuID49IDQ7ICsraSwgbGVuIC09IDQpIHtcbiAgICBrID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQ7XG4gICAgayA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gICAgayBePVxuICAgIC8qIGsgPj4+IHI6ICovXG4gICAgayA+Pj4gMjQ7XG4gICAgaCA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNikgXlxuICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIEhhbmRsZSB0aGUgbGFzdCBmZXcgYnl0ZXMgb2YgdGhlIGlucHV0IGFycmF5XG5cblxuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmZikgPDwgODtcblxuICAgIGNhc2UgMTpcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICAgICAgaCA9XG4gICAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIERvIGEgZmV3IGZpbmFsIG1peGVzIG9mIHRoZSBoYXNoIHRvIGVuc3VyZSB0aGUgbGFzdCBmZXdcbiAgLy8gYnl0ZXMgYXJlIHdlbGwtaW5jb3Jwb3JhdGVkLlxuXG5cbiAgaCBePSBoID4+PiAxMztcbiAgaCA9XG4gIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgcmV0dXJuICgoaCBeIGggPj4+IDE1KSA+Pj4gMCkudG9TdHJpbmcoMzYpO1xufVxuXG5leHBvcnQgeyBtdXJtdXIyIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfHN1cHByZXNzSHlkcmF0aW9uV2FybmluZ3x2YWx1ZUxpbmt8YWJicnxhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxlbnRlcktleUhpbnR8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0cmFuc2xhdGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpbmNyZW1lbnRhbHxmYWxsYmFja3xpbmVydHxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8b258b3B0aW9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGlzUHJvcFZhbGlkID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgeyBpc1Byb3BWYWxpZCBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaXNQcm9wVmFsaWQgZnJvbSAnQGVtb3Rpb24vaXMtcHJvcC12YWxpZCc7XG5pbXBvcnQgeyB3aXRoRW1vdGlvbkNhY2hlLCBUaGVtZUNvbnRleHQgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCByZWdpc3RlclN0eWxlcywgaW5zZXJ0U3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgfSBmcm9tICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciB0ZXN0T21pdFByb3BzT25TdHJpbmdUYWcgPSBpc1Byb3BWYWxpZDtcblxudmFyIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCA9IGZ1bmN0aW9uIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudChrZXkpIHtcbiAgcmV0dXJuIGtleSAhPT0gJ3RoZW1lJztcbn07XG5cbnZhciBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AgPSBmdW5jdGlvbiBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AodGFnKSB7XG4gIHJldHVybiB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyAmJiAvLyA5NiBpcyBvbmUgbGVzcyB0aGFuIHRoZSBjaGFyIGNvZGVcbiAgLy8gZm9yIFwiYVwiIHNvIHRoaXMgaXMgY2hlY2tpbmcgdGhhdFxuICAvLyBpdCdzIGEgbG93ZXJjYXNlIGNoYXJhY3RlclxuICB0YWcuY2hhckNvZGVBdCgwKSA+IDk2ID8gdGVzdE9taXRQcm9wc09uU3RyaW5nVGFnIDogdGVzdE9taXRQcm9wc09uQ29tcG9uZW50O1xufTtcbnZhciBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzID0gZnVuY3Rpb24gY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyh0YWcsIG9wdGlvbnMsIGlzUmVhbCkge1xuICB2YXIgc2hvdWxkRm9yd2FyZFByb3A7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wID0gb3B0aW9ucy5zaG91bGRGb3J3YXJkUHJvcDtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3AgJiYgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wID8gZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgICByZXR1cm4gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcChwcm9wTmFtZSkgJiYgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wKHByb3BOYW1lKTtcbiAgICB9IDogb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzaG91bGRGb3J3YXJkUHJvcCAhPT0gJ2Z1bmN0aW9uJyAmJiBpc1JlYWwpIHtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3A7XG4gIH1cblxuICByZXR1cm4gc2hvdWxkRm9yd2FyZFByb3A7XG59O1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWQgPSBfcmVmLnNlcmlhbGl6ZWQsXG4gICAgICBpc1N0cmluZ1RhZyA9IF9yZWYuaXNTdHJpbmdUYWc7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgfSk7XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgY3JlYXRlU3R5bGVkID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVkKHRhZywgb3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0YWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgYXJlIHRyeWluZyB0byBjcmVhdGUgYSBzdHlsZWQgZWxlbWVudCB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuXFxuWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBpbXBvcnQgaXQuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzUmVhbCA9IHRhZy5fX2Vtb3Rpb25fcmVhbCA9PT0gdGFnO1xuICB2YXIgYmFzZVRhZyA9IGlzUmVhbCAmJiB0YWcuX19lbW90aW9uX2Jhc2UgfHwgdGFnO1xuICB2YXIgaWRlbnRpZmllck5hbWU7XG4gIHZhciB0YXJnZXRDbGFzc05hbWU7XG5cbiAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlkZW50aWZpZXJOYW1lID0gb3B0aW9ucy5sYWJlbDtcbiAgICB0YXJnZXRDbGFzc05hbWUgPSBvcHRpb25zLnRhcmdldDtcbiAgfVxuXG4gIHZhciBzaG91bGRGb3J3YXJkUHJvcCA9IGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHModGFnLCBvcHRpb25zLCBpc1JlYWwpO1xuICB2YXIgZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3AgfHwgZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKGJhc2VUYWcpO1xuICB2YXIgc2hvdWxkVXNlQXMgPSAhZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKCdhcycpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBzdHlsZXMgPSBpc1JlYWwgJiYgdGFnLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCA/IHRhZy5fX2Vtb3Rpb25fc3R5bGVzLnNsaWNlKDApIDogW107XG5cbiAgICBpZiAoaWRlbnRpZmllck5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3R5bGVzLnB1c2goXCJsYWJlbDpcIiArIGlkZW50aWZpZXJOYW1lICsgXCI7XCIpO1xuICAgIH1cblxuICAgIGlmIChhcmdzWzBdID09IG51bGwgfHwgYXJnc1swXS5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc3R5bGVzLnB1c2guYXBwbHkoc3R5bGVzLCBhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJnc1swXVswXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMucHVzaChhcmdzWzBdWzBdKTtcbiAgICAgIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgICAgIHZhciBpID0gMTtcblxuICAgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmdzWzBdW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlcy5wdXNoKGFyZ3NbaV0sIGFyZ3NbMF1baV0pO1xuICAgICAgfVxuICAgIH0gLy8gJEZsb3dGaXhNZTogd2UgbmVlZCB0byBjYXN0IFN0YXRlbGVzc0Z1bmN0aW9uYWxDb21wb25lbnQgdG8gb3VyIFByaXZhdGVTdHlsZWRDb21wb25lbnQgY2xhc3NcblxuXG4gICAgdmFyIFN0eWxlZCA9IHdpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSwgcmVmKSB7XG4gICAgICB2YXIgRmluYWxUYWcgPSBzaG91bGRVc2VBcyAmJiBwcm9wcy5hcyB8fCBiYXNlVGFnO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuICAgICAgdmFyIGNsYXNzSW50ZXJwb2xhdGlvbnMgPSBbXTtcbiAgICAgIHZhciBtZXJnZWRQcm9wcyA9IHByb3BzO1xuXG4gICAgICBpZiAocHJvcHMudGhlbWUgPT0gbnVsbCkge1xuICAgICAgICBtZXJnZWRQcm9wcyA9IHt9O1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgICAgIG1lcmdlZFByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVyZ2VkUHJvcHMudGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICBjbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKGNhY2hlLnJlZ2lzdGVyZWQsIGNsYXNzSW50ZXJwb2xhdGlvbnMsIHByb3BzLmNsYXNzTmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKHByb3BzLmNsYXNzTmFtZSAhPSBudWxsKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhzdHlsZXMuY29uY2F0KGNsYXNzSW50ZXJwb2xhdGlvbnMpLCBjYWNoZS5yZWdpc3RlcmVkLCBtZXJnZWRQcm9wcyk7XG4gICAgICBjbGFzc05hbWUgKz0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgICAgIGlmICh0YXJnZXRDbGFzc05hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjbGFzc05hbWUgKz0gXCIgXCIgKyB0YXJnZXRDbGFzc05hbWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmaW5hbFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkVXNlQXMgJiYgc2hvdWxkRm9yd2FyZFByb3AgPT09IHVuZGVmaW5lZCA/IGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcChGaW5hbFRhZykgOiBkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgX2tleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoc2hvdWxkVXNlQXMgJiYgX2tleSA9PT0gJ2FzJykgY29udGludWU7XG5cbiAgICAgICAgaWYgKCAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIGZpbmFsU2hvdWxkRm9yd2FyZFByb3AoX2tleSkpIHtcbiAgICAgICAgICBuZXdQcm9wc1tfa2V5XSA9IHByb3BzW19rZXldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgIG5ld1Byb3BzLnJlZiA9IHJlZjtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5zZXJ0aW9uLCB7XG4gICAgICAgIGNhY2hlOiBjYWNoZSxcbiAgICAgICAgc2VyaWFsaXplZDogc2VyaWFsaXplZCxcbiAgICAgICAgaXNTdHJpbmdUYWc6IHR5cGVvZiBGaW5hbFRhZyA9PT0gJ3N0cmluZydcbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGaW5hbFRhZywgbmV3UHJvcHMpKTtcbiAgICB9KTtcbiAgICBTdHlsZWQuZGlzcGxheU5hbWUgPSBpZGVudGlmaWVyTmFtZSAhPT0gdW5kZWZpbmVkID8gaWRlbnRpZmllck5hbWUgOiBcIlN0eWxlZChcIiArICh0eXBlb2YgYmFzZVRhZyA9PT0gJ3N0cmluZycgPyBiYXNlVGFnIDogYmFzZVRhZy5kaXNwbGF5TmFtZSB8fCBiYXNlVGFnLm5hbWUgfHwgJ0NvbXBvbmVudCcpICsgXCIpXCI7XG4gICAgU3R5bGVkLmRlZmF1bHRQcm9wcyA9IHRhZy5kZWZhdWx0UHJvcHM7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9yZWFsID0gU3R5bGVkO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fYmFzZSA9IGJhc2VUYWc7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9zdHlsZXMgPSBzdHlsZXM7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9mb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHlsZWQsICd0b1N0cmluZycsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgICAgaWYgKHRhcmdldENsYXNzTmFtZSA9PT0gdW5kZWZpbmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUic7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZTogY29lcmNlIHVuZGVmaW5lZCB0byBzdHJpbmdcblxuXG4gICAgICAgIHJldHVybiBcIi5cIiArIHRhcmdldENsYXNzTmFtZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFN0eWxlZC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gKG5leHRUYWcsIG5leHRPcHRpb25zKSB7XG4gICAgICByZXR1cm4gY3JlYXRlU3R5bGVkKG5leHRUYWcsIF9leHRlbmRzKHt9LCBvcHRpb25zLCBuZXh0T3B0aW9ucywge1xuICAgICAgICBzaG91bGRGb3J3YXJkUHJvcDogY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyhTdHlsZWQsIG5leHRPcHRpb25zLCB0cnVlKVxuICAgICAgfSkpLmFwcGx5KHZvaWQgMCwgc3R5bGVzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFN0eWxlZDtcbiAgfTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZVN0eWxlZCBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgY3JlYXRlU3R5bGVkIGZyb20gJy4uL2Jhc2UvZGlzdC9lbW90aW9uLXN0eWxlZC1iYXNlLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCAncmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIHRhZ3MgPSBbJ2EnLCAnYWJicicsICdhZGRyZXNzJywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdhdWRpbycsICdiJywgJ2Jhc2UnLCAnYmRpJywgJ2JkbycsICdiaWcnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsICdjaXRlJywgJ2NvZGUnLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RhdGEnLCAnZGF0YWxpc3QnLCAnZGQnLCAnZGVsJywgJ2RldGFpbHMnLCAnZGZuJywgJ2RpYWxvZycsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW0nLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaScsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lucycsICdrYmQnLCAna2V5Z2VuJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdsaW5rJywgJ21haW4nLCAnbWFwJywgJ21hcmsnLCAnbWFycXVlZScsICdtZW51JywgJ21lbnVpdGVtJywgJ21ldGEnLCAnbWV0ZXInLCAnbmF2JywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAnb3V0cHV0JywgJ3AnLCAncGFyYW0nLCAncGljdHVyZScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsICdycCcsICdydCcsICdydWJ5JywgJ3MnLCAnc2FtcCcsICdzY3JpcHQnLCAnc2VjdGlvbicsICdzZWxlY3QnLCAnc21hbGwnLCAnc291cmNlJywgJ3NwYW4nLCAnc3Ryb25nJywgJ3N0eWxlJywgJ3N1YicsICdzdW1tYXJ5JywgJ3N1cCcsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aW1lJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3UnLCAndWwnLCAndmFyJywgJ3ZpZGVvJywgJ3dicicsIC8vIFNWR1xuJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZm9yZWlnbk9iamVjdCcsICdnJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyR3JhZGllbnQnLCAnbWFzaycsICdwYXRoJywgJ3BhdHRlcm4nLCAncG9seWdvbicsICdwb2x5bGluZScsICdyYWRpYWxHcmFkaWVudCcsICdyZWN0JywgJ3N0b3AnLCAnc3ZnJywgJ3RleHQnLCAndHNwYW4nXTtcblxudmFyIG5ld1N0eWxlZCA9IGNyZWF0ZVN0eWxlZC5iaW5kKCk7XG50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZ05hbWUpIHtcbiAgLy8gJEZsb3dGaXhNZTogd2UgY2FuIGlnbm9yZSB0aGlzIGJlY2F1c2UgaXRzIGV4cG9zZWQgdHlwZSBpcyBkZWZpbmVkIGJ5IHRoZSBDcmVhdGVTdHlsZWQgdHlwZVxuICBuZXdTdHlsZWRbdGFnTmFtZV0gPSBuZXdTdHlsZWQodGFnTmFtZSk7XG59KTtcblxuZXhwb3J0IHsgbmV3U3R5bGVkIGFzIGRlZmF1bHQgfTtcbiIsIi8qKlxuICogQG11aS9zdHlsZWQtZW5naW5lIHY1LjE1LjdcbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIGNsaWVudCc7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5pbXBvcnQgZW1TdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3R5bGVzRmFjdG9yeSA9IGVtU3R5bGVkKHRhZywgb3B0aW9ucyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuICguLi5zdHlsZXMpID0+IHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnID8gYFwiJHt0YWd9XCJgIDogJ2NvbXBvbmVudCc7XG4gICAgICBpZiAoc3R5bGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBTZWVtcyBsaWtlIHlvdSBjYWxsZWQgXFxgc3R5bGVkKCR7Y29tcG9uZW50fSkoKVxcYCB3aXRob3V0IGEgXFxgc3R5bGVcXGAgYXJndW1lbnQuYCwgJ1lvdSBtdXN0IHByb3ZpZGUgYSBgc3R5bGVzYCBhcmd1bWVudDogYHN0eWxlZChcImRpdlwiKShzdHlsZVlvdUZvcmdvdFRvUGFzcylgLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH0gZWxzZSBpZiAoc3R5bGVzLnNvbWUoc3R5bGUgPT4gc3R5bGUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiB0aGUgc3R5bGVkKCR7Y29tcG9uZW50fSkoLi4uYXJncykgQVBJIHJlcXVpcmVzIGFsbCBpdHMgYXJncyB0byBiZSBkZWZpbmVkLmApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0eWxlc0ZhY3RvcnkoLi4uc3R5bGVzKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBzdHlsZXNGYWN0b3J5O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgY29uc3QgaW50ZXJuYWxfcHJvY2Vzc1N0eWxlcyA9ICh0YWcsIHByb2Nlc3NvcikgPT4ge1xuICAvLyBFbW90aW9uIGF0dGFjaGVzIGFsbCB0aGUgc3R5bGVzIGFzIGBfX2Vtb3Rpb25fc3R5bGVzYC5cbiAgLy8gUmVmOiBodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL2Jsb2IvMTZkOTcxZDBkYTIyOTU5NmQ2YmNjMzlkMjgyYmE5NzUzYzllZTdjZi9wYWNrYWdlcy9zdHlsZWQvc3JjL2Jhc2UuanMjTDE4NlxuICBpZiAoQXJyYXkuaXNBcnJheSh0YWcuX19lbW90aW9uX3N0eWxlcykpIHtcbiAgICB0YWcuX19lbW90aW9uX3N0eWxlcyA9IHByb2Nlc3Nvcih0YWcuX19lbW90aW9uX3N0eWxlcyk7XG4gIH1cbn07XG5leHBvcnQgeyBUaGVtZUNvbnRleHQsIGtleWZyYW1lcywgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTdHlsZWRFbmdpbmVQcm92aWRlciB9IGZyb20gJy4vU3R5bGVkRW5naW5lUHJvdmlkZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBHbG9iYWxTdHlsZXMgfSBmcm9tICcuL0dsb2JhbFN0eWxlcyc7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5jb25zdCBkZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFRoZW1lOyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG4vLyB0ZW1wb3JhcnkgaG90Zml4IHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMgdW50aWwgQXhpb3NVUkxTZWFyY2hQYXJhbXMgaXMgcmVmYWN0b3JlZFxuaW1wb3J0IFBsYXRmb3JtRm9ybURhdGEgZnJvbSAnLi4vcGxhdGZvcm0vbm9kZS9jbGFzc2VzL0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiB0aGluZyBpcyBhIGFycmF5IG9yIGpzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhpbmcgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIHZpc2l0ZWQuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmlzaXRhYmxlKHRoaW5nKSB7XG4gIHJldHVybiB1dGlscy5pc1BsYWluT2JqZWN0KHRoaW5nKSB8fCB1dGlscy5pc0FycmF5KHRoaW5nKTtcbn1cblxuLyoqXG4gKiBJdCByZW1vdmVzIHRoZSBicmFja2V0cyBmcm9tIHRoZSBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgd2l0aG91dCB0aGUgYnJhY2tldHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJyYWNrZXRzKGtleSkge1xuICByZXR1cm4gdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSA/IGtleS5zbGljZSgwLCAtMikgOiBrZXk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXRoLCBhIGtleSwgYW5kIGEgYm9vbGVhbiwgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjdXJyZW50IG9iamVjdCBiZWluZyBpdGVyYXRlZCBvdmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGRvdHMgLSBJZiB0cnVlLCB0aGUga2V5IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCBkb3RzIGluc3RlYWQgb2YgYnJhY2tldHMuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICovXG5mdW5jdGlvbiByZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIGtleTtcbiAgcmV0dXJuIHBhdGguY29uY2F0KGtleSkubWFwKGZ1bmN0aW9uIGVhY2godG9rZW4sIGkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB0b2tlbiA9IHJlbW92ZUJyYWNrZXRzKHRva2VuKTtcbiAgICByZXR1cm4gIWRvdHMgJiYgaSA/ICdbJyArIHRva2VuICsgJ10nIDogdG9rZW47XG4gIH0pLmpvaW4oZG90cyA/ICcuJyA6ICcnKTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgYXJyYXkgaXMgYW4gYXJyYXkgYW5kIG5vbmUgb2YgaXRzIGVsZW1lbnRzIGFyZSB2aXNpdGFibGUsIHRoZW4gaXQncyBhIGZsYXQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbGF0QXJyYXkoYXJyKSB7XG4gIHJldHVybiB1dGlscy5pc0FycmF5KGFycikgJiYgIWFyci5zb21lKGlzVmlzaXRhYmxlKTtcbn1cblxuY29uc3QgcHJlZGljYXRlcyA9IHV0aWxzLnRvRmxhdE9iamVjdCh1dGlscywge30sIG51bGwsIGZ1bmN0aW9uIGZpbHRlcihwcm9wKSB7XG4gIHJldHVybiAvXmlzW0EtWl0vLnRlc3QocHJvcCk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy52aXNpdG9yXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXRhVG9rZW5zID0gdHJ1ZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZG90cyA9IGZhbHNlXVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gW29wdGlvbnMuaW5kZXhlcyA9IGZhbHNlXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbi8qKlxuICogSXQgY29udmVydHMgYW4gb2JqZWN0IGludG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gY29udmVydCB0byBmb3JtIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgLSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSwgb3B0aW9ucykge1xuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyAoUGxhdGZvcm1Gb3JtRGF0YSB8fCBGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGZvcm1EYXRhKTtcblxuICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24odmlzaXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aXNpdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzLmlzQmxvYih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscy5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICgodXRpbHMuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSkgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0Zvcm1EYXRhO1xuIiwiaW1wb3J0IHsgaCBhcyBoYXNPd25Qcm9wZXJ0eSwgRSBhcyBFbW90aW9uLCBjIGFzIGNyZWF0ZUVtb3Rpb25Qcm9wcywgdyBhcyB3aXRoRW1vdGlvbkNhY2hlLCBUIGFzIFRoZW1lQ29udGV4dCwgaSBhcyBpc0Jyb3dzZXIkMSB9IGZyb20gJy4vZW1vdGlvbi1lbGVtZW50LWMzOTYxN2Q4LmJyb3dzZXIuZXNtLmpzJztcbmV4cG9ydCB7IEMgYXMgQ2FjaGVQcm92aWRlciwgVCBhcyBUaGVtZUNvbnRleHQsIGEgYXMgVGhlbWVQcm92aWRlciwgXyBhcyBfX3Vuc2FmZV91c2VFbW90aW9uQ2FjaGUsIHUgYXMgdXNlVGhlbWUsIHcgYXMgd2l0aEVtb3Rpb25DYWNoZSwgYiBhcyB3aXRoVGhlbWUgfSBmcm9tICcuL2Vtb3Rpb24tZWxlbWVudC1jMzk2MTdkOC5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbnNlcnRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzLCBnZXRSZWdpc3RlcmVkU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrLCB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrIH0gZnJvbSAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCAnQGVtb3Rpb24vY2FjaGUnO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0ICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0ICcuLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbnZhciBwa2cgPSB7XG5cdG5hbWU6IFwiQGVtb3Rpb24vcmVhY3RcIixcblx0dmVyc2lvbjogXCIxMS4xMS4zXCIsXG5cdG1haW46IFwiZGlzdC9lbW90aW9uLXJlYWN0LmNqcy5qc1wiLFxuXHRtb2R1bGU6IFwiZGlzdC9lbW90aW9uLXJlYWN0LmVzbS5qc1wiLFxuXHRicm93c2VyOiB7XG5cdFx0XCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5lc20uanNcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5icm93c2VyLmVzbS5qc1wiXG5cdH0sXG5cdGV4cG9ydHM6IHtcblx0XHRcIi5cIjoge1xuXHRcdFx0bW9kdWxlOiB7XG5cdFx0XHRcdHdvcmtlcjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuZXNtLmpzXCJcblx0XHRcdH0sXG5cdFx0XHRcImltcG9ydFwiOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmNqcy5tanNcIixcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmNqcy5qc1wiXG5cdFx0fSxcblx0XHRcIi4vanN4LXJ1bnRpbWVcIjoge1xuXHRcdFx0bW9kdWxlOiB7XG5cdFx0XHRcdHdvcmtlcjogXCIuL2pzeC1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtcnVudGltZS53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUuYnJvd3Nlci5lc20uanNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUuZXNtLmpzXCJcblx0XHRcdH0sXG5cdFx0XHRcImltcG9ydFwiOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmNqcy5tanNcIixcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmNqcy5qc1wiXG5cdFx0fSxcblx0XHRcIi4vX2lzb2xhdGVkLWhucnNcIjoge1xuXHRcdFx0bW9kdWxlOiB7XG5cdFx0XHRcdHdvcmtlcjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuZXNtLmpzXCJcblx0XHRcdH0sXG5cdFx0XHRcImltcG9ydFwiOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmNqcy5tanNcIixcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmNqcy5qc1wiXG5cdFx0fSxcblx0XHRcIi4vanN4LWRldi1ydW50aW1lXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS5icm93c2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL2pzeC1kZXYtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LWRldi1ydW50aW1lLmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJpbXBvcnRcIjogXCIuL2pzeC1kZXYtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LWRldi1ydW50aW1lLmNqcy5tanNcIixcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vanN4LWRldi1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtZGV2LXJ1bnRpbWUuY2pzLmpzXCJcblx0XHR9LFxuXHRcdFwiLi9wYWNrYWdlLmpzb25cIjogXCIuL3BhY2thZ2UuanNvblwiLFxuXHRcdFwiLi90eXBlcy9jc3MtcHJvcFwiOiBcIi4vdHlwZXMvY3NzLXByb3AuZC50c1wiLFxuXHRcdFwiLi9tYWNyb1wiOiB7XG5cdFx0XHR0eXBlczoge1xuXHRcdFx0XHRcImltcG9ydFwiOiBcIi4vbWFjcm8uZC5tdHNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9tYWNyby5kLnRzXCJcblx0XHRcdH0sXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL21hY3JvLmpzXCJcblx0XHR9XG5cdH0sXG5cdHR5cGVzOiBcInR5cGVzL2luZGV4LmQudHNcIixcblx0ZmlsZXM6IFtcblx0XHRcInNyY1wiLFxuXHRcdFwiZGlzdFwiLFxuXHRcdFwianN4LXJ1bnRpbWVcIixcblx0XHRcImpzeC1kZXYtcnVudGltZVwiLFxuXHRcdFwiX2lzb2xhdGVkLWhucnNcIixcblx0XHRcInR5cGVzLyouZC50c1wiLFxuXHRcdFwibWFjcm8uKlwiXG5cdF0sXG5cdHNpZGVFZmZlY3RzOiBmYWxzZSxcblx0YXV0aG9yOiBcIkVtb3Rpb24gQ29udHJpYnV0b3JzXCIsXG5cdGxpY2Vuc2U6IFwiTUlUXCIsXG5cdHNjcmlwdHM6IHtcblx0XHRcInRlc3Q6dHlwZXNjcmlwdFwiOiBcImR0c2xpbnQgdHlwZXNcIlxuXHR9LFxuXHRkZXBlbmRlbmNpZXM6IHtcblx0XHRcIkBiYWJlbC9ydW50aW1lXCI6IFwiXjcuMTguM1wiLFxuXHRcdFwiQGVtb3Rpb24vYmFiZWwtcGx1Z2luXCI6IFwiXjExLjExLjBcIixcblx0XHRcIkBlbW90aW9uL2NhY2hlXCI6IFwiXjExLjExLjBcIixcblx0XHRcIkBlbW90aW9uL3NlcmlhbGl6ZVwiOiBcIl4xLjEuM1wiLFxuXHRcdFwiQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3NcIjogXCJeMS4wLjFcIixcblx0XHRcIkBlbW90aW9uL3V0aWxzXCI6IFwiXjEuMi4xXCIsXG5cdFx0XCJAZW1vdGlvbi93ZWFrLW1lbW9pemVcIjogXCJeMC4zLjFcIixcblx0XHRcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCI6IFwiXjMuMy4xXCJcblx0fSxcblx0cGVlckRlcGVuZGVuY2llczoge1xuXHRcdHJlYWN0OiBcIj49MTYuOC4wXCJcblx0fSxcblx0cGVlckRlcGVuZGVuY2llc01ldGE6IHtcblx0XHRcIkB0eXBlcy9yZWFjdFwiOiB7XG5cdFx0XHRvcHRpb25hbDogdHJ1ZVxuXHRcdH1cblx0fSxcblx0ZGV2RGVwZW5kZW5jaWVzOiB7XG5cdFx0XCJAZGVmaW5pdGVseXR5cGVkL2R0c2xpbnRcIjogXCIwLjAuMTEyXCIsXG5cdFx0XCJAZW1vdGlvbi9jc3NcIjogXCIxMS4xMS4yXCIsXG5cdFx0XCJAZW1vdGlvbi9jc3MtcHJldHRpZmllclwiOiBcIjEuMS4zXCIsXG5cdFx0XCJAZW1vdGlvbi9zZXJ2ZXJcIjogXCIxMS4xMS4wXCIsXG5cdFx0XCJAZW1vdGlvbi9zdHlsZWRcIjogXCIxMS4xMS4wXCIsXG5cdFx0XCJodG1sLXRhZy1uYW1lc1wiOiBcIl4xLjEuMlwiLFxuXHRcdHJlYWN0OiBcIjE2LjE0LjBcIixcblx0XHRcInN2Zy10YWctbmFtZXNcIjogXCJeMS4xLjFcIixcblx0XHR0eXBlc2NyaXB0OiBcIl40LjUuNVwiXG5cdH0sXG5cdHJlcG9zaXRvcnk6IFwiaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi90cmVlL21haW4vcGFja2FnZXMvcmVhY3RcIixcblx0cHVibGlzaENvbmZpZzoge1xuXHRcdGFjY2VzczogXCJwdWJsaWNcIlxuXHR9LFxuXHRcInVtZDptYWluXCI6IFwiZGlzdC9lbW90aW9uLXJlYWN0LnVtZC5taW4uanNcIixcblx0cHJlY29uc3RydWN0OiB7XG5cdFx0ZW50cnlwb2ludHM6IFtcblx0XHRcdFwiLi9pbmRleC5qc1wiLFxuXHRcdFx0XCIuL2pzeC1ydW50aW1lLmpzXCIsXG5cdFx0XHRcIi4vanN4LWRldi1ydW50aW1lLmpzXCIsXG5cdFx0XHRcIi4vX2lzb2xhdGVkLWhucnMuanNcIlxuXHRcdF0sXG5cdFx0dW1kTmFtZTogXCJlbW90aW9uUmVhY3RcIixcblx0XHRleHBvcnRzOiB7XG5cdFx0XHRlbnZDb25kaXRpb25zOiBbXG5cdFx0XHRcdFwiYnJvd3NlclwiLFxuXHRcdFx0XHRcIndvcmtlclwiXG5cdFx0XHRdLFxuXHRcdFx0ZXh0cmE6IHtcblx0XHRcdFx0XCIuL3R5cGVzL2Nzcy1wcm9wXCI6IFwiLi90eXBlcy9jc3MtcHJvcC5kLnRzXCIsXG5cdFx0XHRcdFwiLi9tYWNyb1wiOiB7XG5cdFx0XHRcdFx0dHlwZXM6IHtcblx0XHRcdFx0XHRcdFwiaW1wb3J0XCI6IFwiLi9tYWNyby5kLm10c1wiLFxuXHRcdFx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9tYWNyby5kLnRzXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vbWFjcm8uanNcIlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG52YXIganN4ID0gZnVuY3Rpb24ganN4KHR5cGUsIHByb3BzKSB7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gIGlmIChwcm9wcyA9PSBudWxsIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCAnY3NzJykpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgfVxuXG4gIHZhciBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gIHZhciBjcmVhdGVFbGVtZW50QXJnQXJyYXkgPSBuZXcgQXJyYXkoYXJnc0xlbmd0aCk7XG4gIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVswXSA9IEVtb3Rpb247XG4gIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVsxXSA9IGNyZWF0ZUVtb3Rpb25Qcm9wcyh0eXBlLCBwcm9wcyk7XG5cbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmdzTGVuZ3RoOyBpKyspIHtcbiAgICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbaV0gPSBhcmdzW2ldO1xuICB9IC8vICRGbG93Rml4TWVcblxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50LmFwcGx5KG51bGwsIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSk7XG59O1xuXG52YXIgd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsID0gZmFsc2U7IC8vIG1haW50YWluIHBsYWNlIG92ZXIgcmVyZW5kZXJzLlxuLy8gaW5pdGlhbCByZW5kZXIgZnJvbSBicm93c2VyLCBpbnNlcnRCZWZvcmUgY29udGV4dC5zaGVldC50YWdzWzBdIG9yIGlmIGEgc3R5bGUgaGFzbid0IGJlZW4gaW5zZXJ0ZWQgdGhlcmUgeWV0LCBhcHBlbmRDaGlsZFxuLy8gaW5pdGlhbCBjbGllbnQtc2lkZSByZW5kZXIgZnJvbSBTU1IsIHVzZSBwbGFjZSBvZiBoeWRyYXRpbmcgdGFnXG5cbnZhciBHbG9iYWwgPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXdhcm5lZEFib3V0Q3NzUHJvcEZvckdsb2JhbCAmJiAoIC8vIGNoZWNrIGZvciBjbGFzc05hbWUgYXMgd2VsbCBzaW5jZSB0aGUgdXNlciBpc1xuICAvLyBwcm9iYWJseSB1c2luZyB0aGUgY3VzdG9tIGNyZWF0ZUVsZW1lbnQgd2hpY2hcbiAgLy8gbWVhbnMgaXQgd2lsbCBiZSB0dXJuZWQgaW50byBhIGNsYXNzTmFtZSBwcm9wXG4gIC8vICRGbG93Rml4TWUgSSBkb24ndCByZWFsbHkgd2FudCB0byBhZGQgaXQgdG8gdGhlIHR5cGUgc2luY2UgaXQgc2hvdWxkbid0IGJlIHVzZWRcbiAgcHJvcHMuY2xhc3NOYW1lIHx8IHByb3BzLmNzcykpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiSXQgbG9va3MgbGlrZSB5b3UncmUgdXNpbmcgdGhlIGNzcyBwcm9wIG9uIEdsb2JhbCwgZGlkIHlvdSBtZWFuIHRvIHVzZSB0aGUgc3R5bGVzIHByb3AgaW5zdGVhZD9cIik7XG4gICAgd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzdHlsZXMgPSBwcm9wcy5zdHlsZXM7XG4gIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKFtzdHlsZXNdLCB1bmRlZmluZWQsIFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KSk7XG5cbiAgaWYgKCFpc0Jyb3dzZXIkMSkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIHNlcmlhbGl6ZWROYW1lcyA9IHNlcmlhbGl6ZWQubmFtZTtcbiAgICB2YXIgc2VyaWFsaXplZFN0eWxlcyA9IHNlcmlhbGl6ZWQuc3R5bGVzO1xuICAgIHZhciBuZXh0ID0gc2VyaWFsaXplZC5uZXh0O1xuXG4gICAgd2hpbGUgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc2VyaWFsaXplZE5hbWVzICs9ICcgJyArIG5leHQubmFtZTtcbiAgICAgIHNlcmlhbGl6ZWRTdHlsZXMgKz0gbmV4dC5zdHlsZXM7XG4gICAgICBuZXh0ID0gbmV4dC5uZXh0O1xuICAgIH1cblxuICAgIHZhciBzaG91bGRDYWNoZSA9IGNhY2hlLmNvbXBhdCA9PT0gdHJ1ZTtcbiAgICB2YXIgcnVsZXMgPSBjYWNoZS5pbnNlcnQoXCJcIiwge1xuICAgICAgbmFtZTogc2VyaWFsaXplZE5hbWVzLFxuICAgICAgc3R5bGVzOiBzZXJpYWxpemVkU3R5bGVzXG4gICAgfSwgY2FjaGUuc2hlZXQsIHNob3VsZENhY2hlKTtcblxuICAgIGlmIChzaG91bGRDYWNoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiwgKF9yZWYgPSB7fSwgX3JlZltcImRhdGEtZW1vdGlvblwiXSA9IGNhY2hlLmtleSArIFwiLWdsb2JhbCBcIiArIHNlcmlhbGl6ZWROYW1lcywgX3JlZi5kYW5nZXJvdXNseVNldElubmVySFRNTCA9IHtcbiAgICAgIF9faHRtbDogcnVsZXNcbiAgICB9LCBfcmVmLm5vbmNlID0gY2FjaGUuc2hlZXQubm9uY2UsIF9yZWYpKTtcbiAgfSAvLyB5ZXMsIGkga25vdyB0aGVzZSBob29rcyBhcmUgdXNlZCBjb25kaXRpb25hbGx5XG4gIC8vIGJ1dCBpdCBpcyBiYXNlZCBvbiBhIGNvbnN0YW50IHRoYXQgd2lsbCBuZXZlciBjaGFuZ2UgYXQgcnVudGltZVxuICAvLyBpdCdzIGVmZmVjdGl2ZWx5IGxpa2UgaGF2aW5nIHR3byBpbXBsZW1lbnRhdGlvbnMgYW5kIHN3aXRjaGluZyB0aGVtIG91dFxuICAvLyBzbyBpdCdzIG5vdCBhY3R1YWxseSBicmVha2luZyBhbnl0aGluZ1xuXG5cbiAgdmFyIHNoZWV0UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIHVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGtleSA9IGNhY2hlLmtleSArIFwiLWdsb2JhbFwiOyAvLyB1c2UgY2FzZSBvZiBodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL2lzc3Vlcy8yNjc1XG5cbiAgICB2YXIgc2hlZXQgPSBuZXcgY2FjaGUuc2hlZXQuY29uc3RydWN0b3Ioe1xuICAgICAga2V5OiBrZXksXG4gICAgICBub25jZTogY2FjaGUuc2hlZXQubm9uY2UsXG4gICAgICBjb250YWluZXI6IGNhY2hlLnNoZWV0LmNvbnRhaW5lcixcbiAgICAgIHNwZWVkeTogY2FjaGUuc2hlZXQuaXNTcGVlZHlcbiAgICB9KTtcbiAgICB2YXIgcmVoeWRyYXRpbmcgPSBmYWxzZTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic3R5bGVbZGF0YS1lbW90aW9uPVxcXCJcIiArIGtleSArIFwiIFwiICsgc2VyaWFsaXplZC5uYW1lICsgXCJcXFwiXVwiKTtcblxuICAgIGlmIChjYWNoZS5zaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgc2hlZXQuYmVmb3JlID0gY2FjaGUuc2hlZXQudGFnc1swXTtcbiAgICB9XG5cbiAgICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgcmVoeWRyYXRpbmcgPSB0cnVlOyAvLyBjbGVhciB0aGUgaGFzaCBzbyB0aGlzIG5vZGUgd29uJ3QgYmUgcmVjb2duaXphYmxlIGFzIHJlaHlkcmF0YWJsZSBieSBvdGhlciA8R2xvYmFsLz5zXG5cbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nLCBrZXkpO1xuICAgICAgc2hlZXQuaHlkcmF0ZShbbm9kZV0pO1xuICAgIH1cblxuICAgIHNoZWV0UmVmLmN1cnJlbnQgPSBbc2hlZXQsIHJlaHlkcmF0aW5nXTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc2hlZXQuZmx1c2goKTtcbiAgICB9O1xuICB9LCBbY2FjaGVdKTtcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2hlZXRSZWZDdXJyZW50ID0gc2hlZXRSZWYuY3VycmVudDtcbiAgICB2YXIgc2hlZXQgPSBzaGVldFJlZkN1cnJlbnRbMF0sXG4gICAgICAgIHJlaHlkcmF0aW5nID0gc2hlZXRSZWZDdXJyZW50WzFdO1xuXG4gICAgaWYgKHJlaHlkcmF0aW5nKSB7XG4gICAgICBzaGVldFJlZkN1cnJlbnRbMV0gPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2VyaWFsaXplZC5uZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGluc2VydCBrZXlmcmFtZXNcbiAgICAgIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZC5uZXh0LCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoc2hlZXQudGFncy5sZW5ndGgpIHtcbiAgICAgIC8vIGlmIHRoaXMgZG9lc24ndCBleGlzdCB0aGVuIGl0IHdpbGwgYmUgbnVsbCBzbyB0aGUgc3R5bGUgZWxlbWVudCB3aWxsIGJlIGFwcGVuZGVkXG4gICAgICB2YXIgZWxlbWVudCA9IHNoZWV0LnRhZ3Nbc2hlZXQudGFncy5sZW5ndGggLSAxXS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICBzaGVldC5iZWZvcmUgPSBlbGVtZW50O1xuICAgICAgc2hlZXQuZmx1c2goKTtcbiAgICB9XG5cbiAgICBjYWNoZS5pbnNlcnQoXCJcIiwgc2VyaWFsaXplZCwgc2hlZXQsIGZhbHNlKTtcbiAgfSwgW2NhY2hlLCBzZXJpYWxpemVkLm5hbWVdKTtcbiAgcmV0dXJuIG51bGw7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgR2xvYmFsLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25HbG9iYWwnO1xufVxuXG5mdW5jdGlvbiBjc3MoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gc2VyaWFsaXplU3R5bGVzKGFyZ3MpO1xufVxuXG52YXIga2V5ZnJhbWVzID0gZnVuY3Rpb24ga2V5ZnJhbWVzKCkge1xuICB2YXIgaW5zZXJ0YWJsZSA9IGNzcy5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIHZhciBuYW1lID0gXCJhbmltYXRpb24tXCIgKyBpbnNlcnRhYmxlLm5hbWU7IC8vICRGbG93Rml4TWVcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBcIkBrZXlmcmFtZXMgXCIgKyBuYW1lICsgXCJ7XCIgKyBpbnNlcnRhYmxlLnN0eWxlcyArIFwifVwiLFxuICAgIGFuaW06IDEsXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwiX0VNT19cIiArIHRoaXMubmFtZSArIFwiX1wiICsgdGhpcy5zdHlsZXMgKyBcIl9FTU9fXCI7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGNsYXNzbmFtZXMgPSBmdW5jdGlvbiBjbGFzc25hbWVzKGFyZ3MpIHtcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3NbaV07XG4gICAgaWYgKGFyZyA9PSBudWxsKSBjb250aW51ZTtcbiAgICB2YXIgdG9BZGQgPSB2b2lkIDA7XG5cbiAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgIHRvQWRkID0gY2xhc3NuYW1lcyhhcmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmcuc3R5bGVzICE9PSB1bmRlZmluZWQgJiYgYXJnLm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdZb3UgaGF2ZSBwYXNzZWQgc3R5bGVzIGNyZWF0ZWQgd2l0aCBgY3NzYCBmcm9tIGBAZW1vdGlvbi9yZWFjdGAgcGFja2FnZSB0byB0aGUgYGN4YC5cXG4nICsgJ2BjeGAgaXMgbWVhbnQgdG8gY29tcG9zZSBjbGFzcyBuYW1lcyAoc3RyaW5ncykgc28geW91IHNob3VsZCBjb252ZXJ0IHRob3NlIHN0eWxlcyB0byBhIGNsYXNzIG5hbWUgYnkgcGFzc2luZyB0aGVtIHRvIHRoZSBgY3NzYCByZWNlaXZlZCBmcm9tIDxDbGFzc05hbWVzLz4gY29tcG9uZW50LicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0b0FkZCA9ICcnO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGFyZykge1xuICAgICAgICAgICAgICBpZiAoYXJnW2tdICYmIGspIHtcbiAgICAgICAgICAgICAgICB0b0FkZCAmJiAodG9BZGQgKz0gJyAnKTtcbiAgICAgICAgICAgICAgICB0b0FkZCArPSBrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIHRvQWRkID0gYXJnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRvQWRkKSB7XG4gICAgICBjbHMgJiYgKGNscyArPSAnICcpO1xuICAgICAgY2xzICs9IHRvQWRkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbHM7XG59O1xuXG5mdW5jdGlvbiBtZXJnZShyZWdpc3RlcmVkLCBjc3MsIGNsYXNzTmFtZSkge1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtdO1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWUpO1xuXG4gIGlmIChyZWdpc3RlcmVkU3R5bGVzLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG5cbiAgcmV0dXJuIHJhd0NsYXNzTmFtZSArIGNzcyhyZWdpc3RlcmVkU3R5bGVzKTtcbn1cblxudmFyIEluc2VydGlvbiA9IGZ1bmN0aW9uIEluc2VydGlvbihfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBzZXJpYWxpemVkQXJyID0gX3JlZi5zZXJpYWxpemVkQXJyO1xuICB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VyaWFsaXplZEFyci5sZW5ndGg7IGkrKykge1xuICAgICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkQXJyW2ldLCBmYWxzZSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBDbGFzc05hbWVzID0gLyogI19fUFVSRV9fICovd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlKSB7XG4gIHZhciBoYXNSZW5kZXJlZCA9IGZhbHNlO1xuICB2YXIgc2VyaWFsaXplZEFyciA9IFtdO1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgaWYgKGhhc1JlbmRlcmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3NzIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIHJlbmRlcicpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCBjYWNoZS5yZWdpc3RlcmVkKTtcbiAgICBzZXJpYWxpemVkQXJyLnB1c2goc2VyaWFsaXplZCk7IC8vIHJlZ2lzdHJhdGlvbiBoYXMgdG8gaGFwcGVuIGhlcmUgYXMgdGhlIHJlc3VsdCBvZiB0aGlzIG1pZ2h0IGdldCBjb25zdW1lZCBieSBgY3hgXG5cbiAgICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgZmFsc2UpO1xuICAgIHJldHVybiBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgfTtcblxuICB2YXIgY3ggPSBmdW5jdGlvbiBjeCgpIHtcbiAgICBpZiAoaGFzUmVuZGVyZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjeCBjYW4gb25seSBiZSB1c2VkIGR1cmluZyByZW5kZXInKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2UoY2FjaGUucmVnaXN0ZXJlZCwgY3NzLCBjbGFzc25hbWVzKGFyZ3MpKTtcbiAgfTtcblxuICB2YXIgY29udGVudCA9IHtcbiAgICBjc3M6IGNzcyxcbiAgICBjeDogY3gsXG4gICAgdGhlbWU6IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KVxuICB9O1xuICB2YXIgZWxlID0gcHJvcHMuY2hpbGRyZW4oY29udGVudCk7XG4gIGhhc1JlbmRlcmVkID0gdHJ1ZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgc2VyaWFsaXplZEFycjogc2VyaWFsaXplZEFyclxuICB9KSwgZWxlKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBDbGFzc05hbWVzLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25DbGFzc05hbWVzJztcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnOyAvLyAjMTcyNywgIzI5MDUgZm9yIHNvbWUgcmVhc29uIEplc3QgYW5kIFZpdGVzdCBldmFsdWF0ZSBtb2R1bGVzIHR3aWNlIGlmIHNvbWUgY29uc3VtaW5nIG1vZHVsZSBnZXRzIG1vY2tlZFxuXG4gIHZhciBpc1Rlc3RFbnYgPSB0eXBlb2YgamVzdCAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHZpICE9PSAndW5kZWZpbmVkJztcblxuICBpZiAoaXNCcm93c2VyICYmICFpc1Rlc3RFbnYpIHtcbiAgICAvLyBnbG9iYWxUaGlzIGhhcyB3aWRlIGJyb3dzZXIgc3VwcG9ydCAtIGh0dHBzOi8vY2FuaXVzZS5jb20vP3NlYXJjaD1nbG9iYWxUaGlzLCBOb2RlLmpzIDEyIGFuZCBsYXRlclxuICAgIHZhciBnbG9iYWxDb250ZXh0ID0gLy8gJEZsb3dJZ25vcmVcbiAgICB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICA6IGlzQnJvd3NlciA/IHdpbmRvdyA6IGdsb2JhbDtcbiAgICB2YXIgZ2xvYmFsS2V5ID0gXCJfX0VNT1RJT05fUkVBQ1RfXCIgKyBwa2cudmVyc2lvbi5zcGxpdCgnLicpWzBdICsgXCJfX1wiO1xuXG4gICAgaWYgKGdsb2JhbENvbnRleHRbZ2xvYmFsS2V5XSkge1xuICAgICAgY29uc29sZS53YXJuKCdZb3UgYXJlIGxvYWRpbmcgQGVtb3Rpb24vcmVhY3Qgd2hlbiBpdCBpcyBhbHJlYWR5IGxvYWRlZC4gUnVubmluZyAnICsgJ211bHRpcGxlIGluc3RhbmNlcyBtYXkgY2F1c2UgcHJvYmxlbXMuIFRoaXMgY2FuIGhhcHBlbiBpZiBtdWx0aXBsZSAnICsgJ3ZlcnNpb25zIGFyZSB1c2VkLCBvciBpZiBtdWx0aXBsZSBidWlsZHMgb2YgdGhlIHNhbWUgdmVyc2lvbiBhcmUgJyArICd1c2VkLicpO1xuICAgIH1cblxuICAgIGdsb2JhbENvbnRleHRbZ2xvYmFsS2V5XSA9IHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IHsgQ2xhc3NOYW1lcywgR2xvYmFsLCBqc3ggYXMgY3JlYXRlRWxlbWVudCwgY3NzLCBqc3gsIGtleWZyYW1lcyB9O1xuIiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1bnN0YWJsZV91c2VDb250cm9sbGVkIGFzIHVzZUNvbnRyb2xsZWQgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUNvbnRyb2xsZWQ7IiwiJ3VzZSBjbGllbnQnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcywgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDb250cm9sbGVkKHtcbiAgY29udHJvbGxlZCxcbiAgZGVmYXVsdDogZGVmYXVsdFByb3AsXG4gIG5hbWUsXG4gIHN0YXRlID0gJ3ZhbHVlJ1xufSkge1xuICAvLyBpc0NvbnRyb2xsZWQgaXMgaWdub3JlZCBpbiB0aGUgaG9vayBkZXBlbmRlbmN5IGxpc3RzIGFzIGl0IHNob3VsZCBuZXZlciBjaGFuZ2UuXG4gIGNvbnN0IHtcbiAgICBjdXJyZW50OiBpc0NvbnRyb2xsZWRcbiAgfSA9IFJlYWN0LnVzZVJlZihjb250cm9sbGVkICE9PSB1bmRlZmluZWQpO1xuICBjb25zdCBbdmFsdWVTdGF0ZSwgc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdFByb3ApO1xuICBjb25zdCB2YWx1ZSA9IGlzQ29udHJvbGxlZCA/IGNvbnRyb2xsZWQgOiB2YWx1ZVN0YXRlO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoaXNDb250cm9sbGVkICE9PSAoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgJHtpc0NvbnRyb2xsZWQgPyAnJyA6ICd1bid9Y29udHJvbGxlZCAke3N0YXRlfSBzdGF0ZSBvZiAke25hbWV9IHRvIGJlICR7aXNDb250cm9sbGVkID8gJ3VuJyA6ICcnfWNvbnRyb2xsZWQuYCwgJ0VsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLicsIGBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICR7bmFtZX0gYCArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4nLCBcIlRoZSBuYXR1cmUgb2YgdGhlIHN0YXRlIGlzIGRldGVybWluZWQgZHVyaW5nIHRoZSBmaXJzdCByZW5kZXIuIEl0J3MgY29uc2lkZXJlZCBjb250cm9sbGVkIGlmIHRoZSB2YWx1ZSBpcyBub3QgYHVuZGVmaW5lZGAuXCIsICdNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtzdGF0ZSwgbmFtZSwgY29udHJvbGxlZF0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGN1cnJlbnQ6IGRlZmF1bHRWYWx1ZVxuICAgIH0gPSBSZWFjdC51c2VSZWYoZGVmYXVsdFByb3ApO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoIWlzQ29udHJvbGxlZCAmJiBkZWZhdWx0VmFsdWUgIT09IGRlZmF1bHRQcm9wKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IEEgY29tcG9uZW50IGlzIGNoYW5naW5nIHRoZSBkZWZhdWx0ICR7c3RhdGV9IHN0YXRlIG9mIGFuIHVuY29udHJvbGxlZCAke25hbWV9IGFmdGVyIGJlaW5nIGluaXRpYWxpemVkLiBgICsgYFRvIHN1cHByZXNzIHRoaXMgd2FybmluZyBvcHQgdG8gdXNlIGEgY29udHJvbGxlZCAke25hbWV9LmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbSlNPTi5zdHJpbmdpZnkoZGVmYXVsdFByb3ApXSk7XG4gIH1cbiAgY29uc3Qgc2V0VmFsdWVJZlVuY29udHJvbGxlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1ZhbHVlID0+IHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4gW3ZhbHVlLCBzZXRWYWx1ZUlmVW5jb250cm9sbGVkXTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IHVuc3RhYmxlX3VzZUV2ZW50Q2FsbGJhY2sgYXMgdXNlRXZlbnRDYWxsYmFjayB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlRXZlbnRDYWxsYmFjazsiLCJjb25zdCByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHJlZDsiLCJpbXBvcnQgeyB1bnN0YWJsZV9kZWJvdW5jZSBhcyBkZWJvdW5jZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZGVib3VuY2U7IiwiJ3VzZSBjbGllbnQnO1xuXG4vLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvdjQuMS41L3NyYy9mb2N1cy12aXNpYmxlLmpzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUaW1lb3V0IH0gZnJvbSAnLi4vdXNlVGltZW91dC91c2VUaW1lb3V0JztcbmxldCBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbmxldCBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuY29uc3QgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gbmV3IFRpbWVvdXQoKTtcbmNvbnN0IGlucHV0VHlwZXNXaGl0ZWxpc3QgPSB7XG4gIHRleHQ6IHRydWUsXG4gIHNlYXJjaDogdHJ1ZSxcbiAgdXJsOiB0cnVlLFxuICB0ZWw6IHRydWUsXG4gIGVtYWlsOiB0cnVlLFxuICBwYXNzd29yZDogdHJ1ZSxcbiAgbnVtYmVyOiB0cnVlLFxuICBkYXRlOiB0cnVlLFxuICBtb250aDogdHJ1ZSxcbiAgd2VlazogdHJ1ZSxcbiAgdGltZTogdHJ1ZSxcbiAgZGF0ZXRpbWU6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWVcbn07XG5cbi8qKlxuICogQ29tcHV0ZXMgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBzaG91bGQgYXV0b21hdGljYWxseSB0cmlnZ2VyIHRoZVxuICogYGZvY3VzLXZpc2libGVgIGNsYXNzIGJlaW5nIGFkZGVkLCBpLmUuIHdoZXRoZXIgaXQgc2hvdWxkIGFsd2F5cyBtYXRjaFxuICogYDpmb2N1cy12aXNpYmxlYCB3aGVuIGZvY3VzZWQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShub2RlKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIHRhZ05hbWVcbiAgfSA9IG5vZGU7XG4gIGlmICh0YWdOYW1lID09PSAnSU5QVVQnICYmIGlucHV0VHlwZXNXaGl0ZWxpc3RbdHlwZV0gJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChub2RlLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEtlZXAgdHJhY2sgb2Ygb3VyIGtleWJvYXJkIG1vZGFsaXR5IHN0YXRlIHdpdGggYGhhZEtleWJvYXJkRXZlbnRgLlxuICogSWYgdGhlIG1vc3QgcmVjZW50IHVzZXIgaW50ZXJhY3Rpb24gd2FzIHZpYSB0aGUga2V5Ym9hcmQ7XG4gKiBhbmQgdGhlIGtleSBwcmVzcyBkaWQgbm90IGluY2x1ZGUgYSBtZXRhLCBhbHQvb3B0aW9uLCBvciBjb250cm9sIGtleTtcbiAqIHRoZW4gdGhlIG1vZGFsaXR5IGlzIGtleWJvYXJkLiBPdGhlcndpc2UsIHRoZSBtb2RhbGl0eSBpcyBub3Qga2V5Ym9hcmQuXG4gKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gKi9cbmZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG59XG5cbi8qKlxuICogSWYgYXQgYW55IHBvaW50IGEgdXNlciBjbGlja3Mgd2l0aCBhIHBvaW50aW5nIGRldmljZSwgZW5zdXJlIHRoYXQgd2UgY2hhbmdlXG4gKiB0aGUgbW9kYWxpdHkgYXdheSBmcm9tIGtleWJvYXJkLlxuICogVGhpcyBhdm9pZHMgdGhlIHNpdHVhdGlvbiB3aGVyZSBhIHVzZXIgcHJlc3NlcyBhIGtleSBvbiBhbiBhbHJlYWR5IGZvY3VzZWRcbiAqIGVsZW1lbnQsIGFuZCB0aGVuIGNsaWNrcyBvbiBhIGRpZmZlcmVudCBlbGVtZW50LCBmb2N1c2luZyBpdCB3aXRoIGFcbiAqIHBvaW50aW5nIGRldmljZSwgd2hpbGUgd2Ugc3RpbGwgdGhpbmsgd2UncmUgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZVBvaW50ZXJEb3duKCkge1xuICBoYWRLZXlib2FyZEV2ZW50ID0gZmFsc2U7XG59XG5mdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xuICBpZiAodGhpcy52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgLy8gSWYgdGhlIHRhYiBiZWNvbWVzIGFjdGl2ZSBhZ2FpbiwgdGhlIGJyb3dzZXIgd2lsbCBoYW5kbGUgY2FsbGluZyBmb2N1c1xuICAgIC8vIG9uIHRoZSBlbGVtZW50IChTYWZhcmkgYWN0dWFsbHkgY2FsbHMgaXQgdHdpY2UpLlxuICAgIC8vIElmIHRoaXMgdGFiIGNoYW5nZSBjYXVzZWQgYSBibHVyIG9uIGFuIGVsZW1lbnQgd2l0aCBmb2N1cy12aXNpYmxlLFxuICAgIC8vIHJlLWFwcGx5IHRoZSBjbGFzcyB3aGVuIHRoZSB1c2VyIHN3aXRjaGVzIGJhY2sgdG8gdGhlIHRhYi5cbiAgICBpZiAoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkpIHtcbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcHJlcGFyZShkb2MpIHtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0ZWFyZG93bihkb2MpIHtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cbmZ1bmN0aW9uIGlzRm9jdXNWaXNpYmxlKGV2ZW50KSB7XG4gIGNvbnN0IHtcbiAgICB0YXJnZXRcbiAgfSA9IGV2ZW50O1xuICB0cnkge1xuICAgIHJldHVybiB0YXJnZXQubWF0Y2hlcygnOmZvY3VzLXZpc2libGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBCcm93c2VycyBub3QgaW1wbGVtZW50aW5nIDpmb2N1cy12aXNpYmxlIHdpbGwgdGhyb3cgYSBTeW50YXhFcnJvci5cbiAgICAvLyBXZSB1c2Ugb3VyIG93biBoZXVyaXN0aWMgZm9yIHRob3NlIGJyb3dzZXJzLlxuICAgIC8vIFJldGhyb3cgbWlnaHQgYmUgYmV0dGVyIGlmIGl0J3Mgbm90IHRoZSBleHBlY3RlZCBlcnJvciBidXQgZG8gd2UgcmVhbGx5XG4gICAgLy8gd2FudCB0byBjcmFzaCBpZiBmb2N1cy12aXNpYmxlIG1hbGZ1bmN0aW9uZWQ/XG4gIH1cblxuICAvLyBObyBuZWVkIGZvciB2YWxpZEZvY3VzVGFyZ2V0IGNoZWNrLiBUaGUgdXNlciBkb2VzIHRoYXQgYnkgYXR0YWNoaW5nIGl0IHRvXG4gIC8vIGZvY3VzYWJsZSBldmVudHMgb25seS5cbiAgcmV0dXJuIGhhZEtleWJvYXJkRXZlbnQgfHwgZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkodGFyZ2V0KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUlzRm9jdXNWaXNpYmxlKCkge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VDYWxsYmFjayhub2RlID0+IHtcbiAgICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgICBwcmVwYXJlKG5vZGUub3duZXJEb2N1bWVudCk7XG4gICAgfVxuICB9LCBbXSk7XG4gIGNvbnN0IGlzRm9jdXNWaXNpYmxlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcblxuICAvKipcbiAgICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWRcbiAgICovXG4gIGZ1bmN0aW9uIGhhbmRsZUJsdXJWaXNpYmxlKCkge1xuICAgIC8vIGNoZWNraW5nIGFnYWluc3QgcG90ZW50aWFsIHN0YXRlIHZhcmlhYmxlIGRvZXMgbm90IHN1ZmZpY2UgaWYgd2UgZm9jdXMgYW5kIGJsdXIgc3luY2hyb25vdXNseS5cbiAgICAvLyBSZWFjdCB3b3VsZG4ndCBoYXZlIHRpbWUgdG8gdHJpZ2dlciBhIHJlLXJlbmRlciBzbyBgZm9jdXNWaXNpYmxlYCB3b3VsZCBiZSBzdGFsZS5cbiAgICAvLyBJZGVhbGx5IHdlIHdvdWxkIGFkanVzdCBgaXNGb2N1c1Zpc2libGUoZXZlbnQpYCB0byBsb29rIGF0IGByZWxhdGVkVGFyZ2V0YCBmb3IgYmx1ciBldmVudHMuXG4gICAgLy8gVGhpcyBkb2Vzbid0IHdvcmsgaW4gSUUxMSBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zNzUxXG4gICAgLy8gVE9ETzogY2hlY2sgYWdhaW4gaWYgUmVhY3QgcmVsZWFzZXMgdGhlaXIgaW50ZXJuYWwgY2hhbmdlcyB0byBmb2N1cyBldmVudCBoYW5kbGluZyAoaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMTkxODYpLlxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50KSB7XG4gICAgICAvLyBUbyBkZXRlY3QgYSB0YWIvd2luZG93IHN3aXRjaCwgd2UgbG9vayBmb3IgYSBibHVyIGV2ZW50IGZvbGxvd2VkXG4gICAgICAvLyByYXBpZGx5IGJ5IGEgdmlzaWJpbGl0eSBjaGFuZ2UuXG4gICAgICAvLyBJZiB3ZSBkb24ndCBzZWUgYSB2aXNpYmlsaXR5IGNoYW5nZSB3aXRoaW4gMTAwbXMsIGl0J3MgcHJvYmFibHkgYVxuICAgICAgLy8gcmVndWxhciBmb2N1cyBjaGFuZ2UuXG4gICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IHRydWU7XG4gICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQuc3RhcnQoMTAwLCAoKSA9PiB7XG4gICAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWRcbiAgICovXG4gIGZ1bmN0aW9uIGhhbmRsZUZvY3VzVmlzaWJsZShldmVudCkge1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZShldmVudCkpIHtcbiAgICAgIGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZlxuICB9O1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgdW5zdGFibGVfdXNlSXNGb2N1c1Zpc2libGUgYXMgdXNlSXNGb2N1c1Zpc2libGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVzZUlzRm9jdXNWaXNpYmxlOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHVzZVRoZW1lV2l0aG91dERlZmF1bHQgZnJvbSAnLi91c2VUaGVtZVdpdGhvdXREZWZhdWx0JztcbmV4cG9ydCBjb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuZnVuY3Rpb24gdXNlVGhlbWUoZGVmYXVsdFRoZW1lID0gc3lzdGVtRGVmYXVsdFRoZW1lKSB7XG4gIHJldHVybiB1c2VUaGVtZVdpdGhvdXREZWZhdWx0KGRlZmF1bHRUaGVtZSk7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VUaGVtZTsiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIGNsaWVudFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTYuNTkgOC41OSAxMiAxMy4xNyA3LjQxIDguNTkgNiAxMGw2IDYgNi02elwiXG59KSwgJ0V4cGFuZE1vcmUnKTsiLCJpbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5mdW5jdGlvbiBjb21wb3NlKC4uLnN0eWxlcykge1xuICBjb25zdCBoYW5kbGVycyA9IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IHtcbiAgICBzdHlsZS5maWx0ZXJQcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgYWNjW3Byb3BdID0gc3R5bGU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuXG4gIC8vIGZhbHNlIHBvc2l0aXZlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuICBjb25zdCBmbiA9IHByb3BzID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZSgoYWNjLCBwcm9wKSA9PiB7XG4gICAgICBpZiAoaGFuZGxlcnNbcHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlKGFjYywgaGFuZGxlcnNbcHJvcF0ocHJvcHMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9O1xuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHN0eWxlLnByb3BUeXBlcyksIHt9KSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IGFjYy5jb25jYXQoc3R5bGUuZmlsdGVyUHJvcHMpLCBbXSk7XG4gIHJldHVybiBmbjtcbn1cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2U7IiwiaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlVbml0LCBnZXRWYWx1ZSB9IGZyb20gJy4vc3BhY2luZyc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuZXhwb3J0IGZ1bmN0aW9uIGJvcmRlclRyYW5zZm9ybSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gYCR7dmFsdWV9cHggc29saWRgO1xufVxuZnVuY3Rpb24gY3JlYXRlQm9yZGVyU3R5bGUocHJvcCwgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBzdHlsZSh7XG4gICAgcHJvcCxcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybVxuICB9KTtcbn1cbmV4cG9ydCBjb25zdCBib3JkZXIgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyJywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBib3JkZXJUb3AgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyVG9wJywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBib3JkZXJSaWdodCA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJSaWdodCcsIGJvcmRlclRyYW5zZm9ybSk7XG5leHBvcnQgY29uc3QgYm9yZGVyQm90dG9tID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlckJvdHRvbScsIGJvcmRlclRyYW5zZm9ybSk7XG5leHBvcnQgY29uc3QgYm9yZGVyTGVmdCA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJMZWZ0JywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBib3JkZXJDb2xvciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJDb2xvcicpO1xuZXhwb3J0IGNvbnN0IGJvcmRlclRvcENvbG9yID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlclRvcENvbG9yJyk7XG5leHBvcnQgY29uc3QgYm9yZGVyUmlnaHRDb2xvciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJSaWdodENvbG9yJyk7XG5leHBvcnQgY29uc3QgYm9yZGVyQm90dG9tQ29sb3IgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyQm90dG9tQ29sb3InKTtcbmV4cG9ydCBjb25zdCBib3JkZXJMZWZ0Q29sb3IgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyTGVmdENvbG9yJyk7XG5leHBvcnQgY29uc3Qgb3V0bGluZSA9IGNyZWF0ZUJvcmRlclN0eWxlKCdvdXRsaW5lJywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBvdXRsaW5lQ29sb3IgPSBjcmVhdGVCb3JkZXJTdHlsZSgnb3V0bGluZUNvbG9yJyk7XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCBib3JkZXJSYWRpdXMgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5ib3JkZXJSYWRpdXMgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5ib3JkZXJSYWRpdXMgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NoYXBlLmJvcmRlclJhZGl1cycsIDQsICdib3JkZXJSYWRpdXMnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGJvcmRlclJhZGl1czogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmJvcmRlclJhZGl1cywgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5ib3JkZXJSYWRpdXMucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgYm9yZGVyUmFkaXVzOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmJvcmRlclJhZGl1cy5maWx0ZXJQcm9wcyA9IFsnYm9yZGVyUmFkaXVzJ107XG5jb25zdCBib3JkZXJzID0gY29tcG9zZShib3JkZXIsIGJvcmRlclRvcCwgYm9yZGVyUmlnaHQsIGJvcmRlckJvdHRvbSwgYm9yZGVyTGVmdCwgYm9yZGVyQ29sb3IsIGJvcmRlclRvcENvbG9yLCBib3JkZXJSaWdodENvbG9yLCBib3JkZXJCb3R0b21Db2xvciwgYm9yZGVyTGVmdENvbG9yLCBib3JkZXJSYWRpdXMsIG91dGxpbmUsIG91dGxpbmVDb2xvcik7XG5leHBvcnQgZGVmYXVsdCBib3JkZXJzOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgeyBjcmVhdGVVbmFyeVVuaXQsIGdldFZhbHVlIH0gZnJvbSAnLi9zcGFjaW5nJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcblxuLy8gZmFsc2UgcG9zaXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IGdhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmdhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmdhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdnYXAnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGdhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmdhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5nYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgZ2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmdhcC5maWx0ZXJQcm9wcyA9IFsnZ2FwJ107XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCBjb2x1bW5HYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5jb2x1bW5HYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5jb2x1bW5HYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAnY29sdW1uR2FwJyk7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBjb2x1bW5HYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5jb2x1bW5HYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuY29sdW1uR2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGNvbHVtbkdhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5jb2x1bW5HYXAuZmlsdGVyUHJvcHMgPSBbJ2NvbHVtbkdhcCddO1xuXG4vLyBmYWxzZSBwb3NpdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG5leHBvcnQgY29uc3Qgcm93R2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMucm93R2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMucm93R2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ3Jvd0dhcCcpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgcm93R2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMucm93R2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbnJvd0dhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICByb3dHYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xucm93R2FwLmZpbHRlclByb3BzID0gWydyb3dHYXAnXTtcbmV4cG9ydCBjb25zdCBncmlkQ29sdW1uID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZENvbHVtbidcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRSb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkUm93J1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9GbG93ID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9GbG93J1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9Db2x1bW5zID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9Db2x1bW5zJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9Sb3dzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9Sb3dzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlQ29sdW1ucyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZUNvbHVtbnMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVSb3dzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlUm93cydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZUFyZWFzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlQXJlYXMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXJlYSA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBcmVhJ1xufSk7XG5jb25zdCBncmlkID0gY29tcG9zZShnYXAsIGNvbHVtbkdhcCwgcm93R2FwLCBncmlkQ29sdW1uLCBncmlkUm93LCBncmlkQXV0b0Zsb3csIGdyaWRBdXRvQ29sdW1ucywgZ3JpZEF1dG9Sb3dzLCBncmlkVGVtcGxhdGVDb2x1bW5zLCBncmlkVGVtcGxhdGVSb3dzLCBncmlkVGVtcGxhdGVBcmVhcywgZ3JpZEFyZWEpO1xuZXhwb3J0IGRlZmF1bHQgZ3JpZDsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHBhbGV0dGVUcmFuc2Zvcm0odmFsdWUsIHVzZXJWYWx1ZSkge1xuICBpZiAodXNlclZhbHVlID09PSAnZ3JleScpIHtcbiAgICByZXR1cm4gdXNlclZhbHVlO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydCBjb25zdCBjb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2NvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBiZ2NvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYmdjb2xvcicsXG4gIGNzc1Byb3BlcnR5OiAnYmFja2dyb3VuZENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbn0pO1xuY29uc3QgcGFsZXR0ZSA9IGNvbXBvc2UoY29sb3IsIGJnY29sb3IsIGJhY2tncm91bmRDb2xvcik7XG5leHBvcnQgZGVmYXVsdCBwYWxldHRlOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cywgdmFsdWVzIGFzIGJyZWFrcG9pbnRzVmFsdWVzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5leHBvcnQgZnVuY3Rpb24gc2l6aW5nVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8PSAxICYmIHZhbHVlICE9PSAwID8gYCR7dmFsdWUgKiAxMDB9JWAgOiB2YWx1ZTtcbn1cbmV4cG9ydCBjb25zdCB3aWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1heFdpZHRoID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMubWF4V2lkdGggIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5tYXhXaWR0aCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiB7XG4gICAgICB2YXIgX3Byb3BzJHRoZW1lLCBfcHJvcHMkdGhlbWUyO1xuICAgICAgY29uc3QgYnJlYWtwb2ludCA9ICgoX3Byb3BzJHRoZW1lID0gcHJvcHMudGhlbWUpID09IG51bGwgfHwgKF9wcm9wcyR0aGVtZSA9IF9wcm9wcyR0aGVtZS5icmVha3BvaW50cykgPT0gbnVsbCB8fCAoX3Byb3BzJHRoZW1lID0gX3Byb3BzJHRoZW1lLnZhbHVlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9wcyR0aGVtZVtwcm9wVmFsdWVdKSB8fCBicmVha3BvaW50c1ZhbHVlc1twcm9wVmFsdWVdO1xuICAgICAgaWYgKCFicmVha3BvaW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWF4V2lkdGg6IHNpemluZ1RyYW5zZm9ybShwcm9wVmFsdWUpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoKChfcHJvcHMkdGhlbWUyID0gcHJvcHMudGhlbWUpID09IG51bGwgfHwgKF9wcm9wcyR0aGVtZTIgPSBfcHJvcHMkdGhlbWUyLmJyZWFrcG9pbnRzKSA9PSBudWxsID8gdm9pZCAwIDogX3Byb3BzJHRoZW1lMi51bml0KSAhPT0gJ3B4Jykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1heFdpZHRoOiBgJHticmVha3BvaW50fSR7cHJvcHMudGhlbWUuYnJlYWtwb2ludHMudW5pdH1gXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXhXaWR0aDogYnJlYWtwb2ludFxuICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMubWF4V2lkdGgsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xubWF4V2lkdGguZmlsdGVyUHJvcHMgPSBbJ21heFdpZHRoJ107XG5leHBvcnQgY29uc3QgbWluV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdtaW5XaWR0aCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBoZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWF4SGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbWF4SGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1pbkhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbkhlaWdodCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBzaXplV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICd3aWR0aCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBzaXplSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJveFNpemluZyA9IHN0eWxlKHtcbiAgcHJvcDogJ2JveFNpemluZydcbn0pO1xuY29uc3Qgc2l6aW5nID0gY29tcG9zZSh3aWR0aCwgbWF4V2lkdGgsIG1pbldpZHRoLCBoZWlnaHQsIG1heEhlaWdodCwgbWluSGVpZ2h0LCBib3hTaXppbmcpO1xuZXhwb3J0IGRlZmF1bHQgc2l6aW5nOyIsImltcG9ydCB7IHBhZGRpbmcsIG1hcmdpbiB9IGZyb20gJy4uL3NwYWNpbmcnO1xuaW1wb3J0IHsgYm9yZGVyUmFkaXVzLCBib3JkZXJUcmFuc2Zvcm0gfSBmcm9tICcuLi9ib3JkZXJzJztcbmltcG9ydCB7IGdhcCwgcm93R2FwLCBjb2x1bW5HYXAgfSBmcm9tICcuLi9jc3NHcmlkJztcbmltcG9ydCB7IHBhbGV0dGVUcmFuc2Zvcm0gfSBmcm9tICcuLi9wYWxldHRlJztcbmltcG9ydCB7IG1heFdpZHRoLCBzaXppbmdUcmFuc2Zvcm0gfSBmcm9tICcuLi9zaXppbmcnO1xuY29uc3QgZGVmYXVsdFN4Q29uZmlnID0ge1xuICAvLyBib3JkZXJzXG4gIGJvcmRlcjoge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyVG9wOiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJSaWdodDoge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyQm90dG9tOiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJMZWZ0OiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyVG9wQ29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlclJpZ2h0Q29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlckJvdHRvbUNvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJMZWZ0Q29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIG91dGxpbmU6IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIG91dGxpbmVDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyUmFkaXVzOiB7XG4gICAgdGhlbWVLZXk6ICdzaGFwZS5ib3JkZXJSYWRpdXMnLFxuICAgIHN0eWxlOiBib3JkZXJSYWRpdXNcbiAgfSxcbiAgLy8gcGFsZXR0ZVxuICBjb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gICAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG4gIH0sXG4gIGJnY29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICAgIGNzc1Byb3BlcnR5OiAnYmFja2dyb3VuZENvbG9yJyxcbiAgICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbiAgfSxcbiAgYmFja2dyb3VuZENvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbiAgfSxcbiAgLy8gc3BhY2luZ1xuICBwOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcHQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwcjoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBiOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGw6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBweDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHB5OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZzoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdUb3A6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nUmlnaHQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQm90dG9tOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0xlZnQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nWDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdZOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0lubGluZToge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdJbmxpbmVTdGFydDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdJbmxpbmVFbmQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQmxvY2s6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQmxvY2tTdGFydDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCbG9ja0VuZDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIG06IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG10OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtcjoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWI6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1sOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBteDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbXk6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbjoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luVG9wOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5SaWdodDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luQm90dG9tOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5MZWZ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5YOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5ZOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5JbmxpbmU6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbklubGluZVN0YXJ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5JbmxpbmVFbmQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkJsb2NrOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5CbG9ja1N0YXJ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5CbG9ja0VuZDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgLy8gZGlzcGxheVxuICBkaXNwbGF5UHJpbnQ6IHtcbiAgICBjc3NQcm9wZXJ0eTogZmFsc2UsXG4gICAgdHJhbnNmb3JtOiB2YWx1ZSA9PiAoe1xuICAgICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgICAgZGlzcGxheTogdmFsdWVcbiAgICAgIH1cbiAgICB9KVxuICB9LFxuICBkaXNwbGF5OiB7fSxcbiAgb3ZlcmZsb3c6IHt9LFxuICB0ZXh0T3ZlcmZsb3c6IHt9LFxuICB2aXNpYmlsaXR5OiB7fSxcbiAgd2hpdGVTcGFjZToge30sXG4gIC8vIGZsZXhib3hcbiAgZmxleEJhc2lzOiB7fSxcbiAgZmxleERpcmVjdGlvbjoge30sXG4gIGZsZXhXcmFwOiB7fSxcbiAganVzdGlmeUNvbnRlbnQ6IHt9LFxuICBhbGlnbkl0ZW1zOiB7fSxcbiAgYWxpZ25Db250ZW50OiB7fSxcbiAgb3JkZXI6IHt9LFxuICBmbGV4OiB7fSxcbiAgZmxleEdyb3c6IHt9LFxuICBmbGV4U2hyaW5rOiB7fSxcbiAgYWxpZ25TZWxmOiB7fSxcbiAganVzdGlmeUl0ZW1zOiB7fSxcbiAganVzdGlmeVNlbGY6IHt9LFxuICAvLyBncmlkXG4gIGdhcDoge1xuICAgIHN0eWxlOiBnYXBcbiAgfSxcbiAgcm93R2FwOiB7XG4gICAgc3R5bGU6IHJvd0dhcFxuICB9LFxuICBjb2x1bW5HYXA6IHtcbiAgICBzdHlsZTogY29sdW1uR2FwXG4gIH0sXG4gIGdyaWRDb2x1bW46IHt9LFxuICBncmlkUm93OiB7fSxcbiAgZ3JpZEF1dG9GbG93OiB7fSxcbiAgZ3JpZEF1dG9Db2x1bW5zOiB7fSxcbiAgZ3JpZEF1dG9Sb3dzOiB7fSxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczoge30sXG4gIGdyaWRUZW1wbGF0ZVJvd3M6IHt9LFxuICBncmlkVGVtcGxhdGVBcmVhczoge30sXG4gIGdyaWRBcmVhOiB7fSxcbiAgLy8gcG9zaXRpb25zXG4gIHBvc2l0aW9uOiB7fSxcbiAgekluZGV4OiB7XG4gICAgdGhlbWVLZXk6ICd6SW5kZXgnXG4gIH0sXG4gIHRvcDoge30sXG4gIHJpZ2h0OiB7fSxcbiAgYm90dG9tOiB7fSxcbiAgbGVmdDoge30sXG4gIC8vIHNoYWRvd3NcbiAgYm94U2hhZG93OiB7XG4gICAgdGhlbWVLZXk6ICdzaGFkb3dzJ1xuICB9LFxuICAvLyBzaXppbmdcbiAgd2lkdGg6IHtcbiAgICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxuICB9LFxuICBtYXhXaWR0aDoge1xuICAgIHN0eWxlOiBtYXhXaWR0aFxuICB9LFxuICBtaW5XaWR0aDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIGhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIG1heEhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIG1pbkhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIGJveFNpemluZzoge30sXG4gIC8vIHR5cG9ncmFwaHlcbiAgZm9udEZhbWlseToge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgZm9udFNpemU6IHtcbiAgICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG4gIH0sXG4gIGZvbnRTdHlsZToge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgZm9udFdlaWdodDoge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgbGV0dGVyU3BhY2luZzoge30sXG4gIHRleHRUcmFuc2Zvcm06IHt9LFxuICBsaW5lSGVpZ2h0OiB7fSxcbiAgdGV4dEFsaWduOiB7fSxcbiAgdHlwb2dyYXBoeToge1xuICAgIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0U3hDb25maWc7IiwiaW1wb3J0IHsgdW5zdGFibGVfaXNNdWlFbGVtZW50IGFzIGlzTXVpRWxlbWVudCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgaXNNdWlFbGVtZW50OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTXVpRWxlbWVudChlbGVtZW50LCBtdWlOYW1lcykge1xuICB2YXIgX211aU5hbWUsIF9lbGVtZW50JHR5cGU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkgJiYgbXVpTmFtZXMuaW5kZXhPZiggLy8gRm9yIHNlcnZlciBjb21wb25lbnRzIGBtdWlOYW1lYCBpcyBhdmFpYWxibGUgaW4gZWxlbWVudC50eXBlLl9wYXlsb2FkLnZhbHVlLm11aU5hbWVcbiAgLy8gcmVsZXZhbnQgaW5mbyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzI4MDdkNzgxYTA4ZGI4ZTk4NzM2ODdmY2NjMjVjMGYxMmI0ZmIzZDQvcGFja2FnZXMvcmVhY3Qvc3JjL1JlYWN0TGF6eS5qcyNMNDVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlXG4gIChfbXVpTmFtZSA9IGVsZW1lbnQudHlwZS5tdWlOYW1lKSAhPSBudWxsID8gX211aU5hbWUgOiAoX2VsZW1lbnQkdHlwZSA9IGVsZW1lbnQudHlwZSkgPT0gbnVsbCB8fCAoX2VsZW1lbnQkdHlwZSA9IF9lbGVtZW50JHR5cGUuX3BheWxvYWQpID09IG51bGwgfHwgKF9lbGVtZW50JHR5cGUgPSBfZWxlbWVudCR0eXBlLnZhbHVlKSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkdHlwZS5tdWlOYW1lKSAhPT0gLTE7XG59IiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3RyaW5nKDEpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaW5nO1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICogLy8gPT4gJ2RlZmF1bHQnXG4gKi9cbmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBudWxsaXNoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNOaWwobnVsbCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc05pbCh2b2lkIDApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOaWwoTmFOKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTmlsKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTmlsO1xuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgeyBtZW1vaXplIGFzIGRlZmF1bHQgfTtcbiIsInZhciB3ZWFrTWVtb2l6ZSA9IGZ1bmN0aW9uIHdlYWtNZW1vaXplKGZ1bmMpIHtcbiAgLy8gJEZsb3dGaXhNZSBmbG93IGRvZXNuJ3QgaW5jbHVkZSBhbGwgbm9uLXByaW1pdGl2ZSB0eXBlcyBhcyBhbGxvd2VkIGZvciB3ZWFrbWFwc1xuICB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZS5oYXMoYXJnKSkge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcmV0dXJuIGNhY2hlLmdldChhcmcpO1xuICAgIH1cblxuICAgIHZhciByZXQgPSBmdW5jKGFyZyk7XG4gICAgY2FjaGUuc2V0KGFyZywgcmV0KTtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xufTtcblxuZXhwb3J0IHsgd2Vha01lbW9pemUgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgdW5zdGFibGVfb3duZXJXaW5kb3cgYXMgb3duZXJXaW5kb3cgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IG93bmVyV2luZG93OyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ2YXJpYW50XCJdO1xuaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5mdW5jdGlvbiBpc0VtcHR5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA9PT0gMDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgc3RyaW5nIGNsYXNzS2V5IGJhc2VkIG9uIHRoZSBwcm9wZXJ0aWVzIHByb3ZpZGVkLiBJdCBzdGFydHMgd2l0aCB0aGVcbiAqIHZhcmlhbnQgaWYgZGVmaW5lZCwgYW5kIHRoZW4gaXQgYXBwZW5kcyBhbGwgb3RoZXIgcHJvcGVydGllcyBpbiBhbHBoYWJldGljYWwgb3JkZXIuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSB0aGUgcHJvcGVydGllcyBmb3Igd2hpY2ggdGhlIGNsYXNzS2V5IHNob3VsZCBiZSBjcmVhdGVkLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9wc1RvQ2xhc3NLZXkocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgICAgdmFyaWFudFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBsZXQgY2xhc3NLZXkgPSB2YXJpYW50IHx8ICcnO1xuICBPYmplY3Qua2V5cyhvdGhlcikuc29ydCgpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAoa2V5ID09PSAnY29sb3InKSB7XG4gICAgICBjbGFzc0tleSArPSBpc0VtcHR5KGNsYXNzS2V5KSA/IHByb3BzW2tleV0gOiBjYXBpdGFsaXplKHByb3BzW2tleV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbGFzc0tleSArPSBgJHtpc0VtcHR5KGNsYXNzS2V5KSA/IGtleSA6IGNhcGl0YWxpemUoa2V5KX0ke2NhcGl0YWxpemUocHJvcHNba2V5XS50b1N0cmluZygpKX1gO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjbGFzc0tleTtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wibmFtZVwiLCBcInNsb3RcIiwgXCJza2lwVmFyaWFudHNSZXNvbHZlclwiLCBcInNraXBTeFwiLCBcIm92ZXJyaWRlc1Jlc29sdmVyXCJdO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmltcG9ydCBzdHlsZWRFbmdpbmVTdHlsZWQsIHsgaW50ZXJuYWxfcHJvY2Vzc1N0eWxlcyBhcyBwcm9jZXNzU3R5bGVzIH0gZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCB7IGdldERpc3BsYXlOYW1lLCB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUsIGlzUGxhaW5PYmplY3QsIGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHByb3BzVG9DbGFzc0tleSBmcm9tICcuL3Byb3BzVG9DbGFzc0tleSc7XG5pbXBvcnQgc3R5bGVGdW5jdGlvblN4IGZyb20gJy4vc3R5bGVGdW5jdGlvblN4JztcbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi9ibG9iLzI2ZGVkNjEwOWZjZDhjYTk4NzVjYzJjZTQ1NjRmZWU2NzhhM2YzYzUvcGFja2FnZXMvc3R5bGVkL3NyYy91dGlscy5qcyNMNDBcbmZ1bmN0aW9uIGlzU3RyaW5nVGFnKHRhZykge1xuICByZXR1cm4gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgJiZcbiAgLy8gOTYgaXMgb25lIGxlc3MgdGhhbiB0aGUgY2hhciBjb2RlXG4gIC8vIGZvciBcImFcIiBzbyB0aGlzIGlzIGNoZWNraW5nIHRoYXRcbiAgLy8gaXQncyBhIGxvd2VyY2FzZSBjaGFyYWN0ZXJcbiAgdGFnLmNoYXJDb2RlQXQoMCkgPiA5Njtcbn1cbmNvbnN0IGdldFN0eWxlT3ZlcnJpZGVzID0gKG5hbWUsIHRoZW1lKSA9PiB7XG4gIGlmICh0aGVtZS5jb21wb25lbnRzICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0gJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXS5zdHlsZU92ZXJyaWRlcykge1xuICAgIHJldHVybiB0aGVtZS5jb21wb25lbnRzW25hbWVdLnN0eWxlT3ZlcnJpZGVzO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmNvbnN0IHRyYW5zZm9ybVZhcmlhbnRzID0gdmFyaWFudHMgPT4ge1xuICBsZXQgbnVtT2ZDYWxsYmFja3MgPSAwO1xuICBjb25zdCB2YXJpYW50c1N0eWxlcyA9IHt9O1xuICBpZiAodmFyaWFudHMpIHtcbiAgICB2YXJpYW50cy5mb3JFYWNoKGRlZmluaXRpb24gPT4ge1xuICAgICAgbGV0IGtleSA9ICcnO1xuICAgICAgaWYgKHR5cGVvZiBkZWZpbml0aW9uLnByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGtleSA9IGBjYWxsYmFjayR7bnVtT2ZDYWxsYmFja3N9YDtcbiAgICAgICAgbnVtT2ZDYWxsYmFja3MgKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleSA9IHByb3BzVG9DbGFzc0tleShkZWZpbml0aW9uLnByb3BzKTtcbiAgICAgIH1cbiAgICAgIHZhcmlhbnRzU3R5bGVzW2tleV0gPSBkZWZpbml0aW9uLnN0eWxlO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB2YXJpYW50c1N0eWxlcztcbn07XG5jb25zdCBnZXRWYXJpYW50U3R5bGVzID0gKG5hbWUsIHRoZW1lKSA9PiB7XG4gIGxldCB2YXJpYW50cyA9IFtdO1xuICBpZiAodGhlbWUgJiYgdGhlbWUuY29tcG9uZW50cyAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0udmFyaWFudHMpIHtcbiAgICB2YXJpYW50cyA9IHRoZW1lLmNvbXBvbmVudHNbbmFtZV0udmFyaWFudHM7XG4gIH1cbiAgcmV0dXJuIHRyYW5zZm9ybVZhcmlhbnRzKHZhcmlhbnRzKTtcbn07XG5jb25zdCB2YXJpYW50c1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMsIHZhcmlhbnRzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlID0ge31cbiAgfSA9IHByb3BzO1xuICBjb25zdCB2YXJpYW50c1N0eWxlcyA9IFtdO1xuICBsZXQgbnVtT2ZDYWxsYmFja3MgPSAwO1xuICBpZiAodmFyaWFudHMpIHtcbiAgICB2YXJpYW50cy5mb3JFYWNoKHZhcmlhbnQgPT4ge1xuICAgICAgbGV0IGlzTWF0Y2ggPSB0cnVlO1xuICAgICAgaWYgKHR5cGVvZiB2YXJpYW50LnByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IHByb3BzVG9DaGVjayA9IF9leHRlbmRzKHt9LCBwcm9wcywgb3duZXJTdGF0ZSk7XG4gICAgICAgIGlzTWF0Y2ggPSB2YXJpYW50LnByb3BzKHByb3BzVG9DaGVjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBPYmplY3Qua2V5cyh2YXJpYW50LnByb3BzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgaWYgKG93bmVyU3RhdGVba2V5XSAhPT0gdmFyaWFudC5wcm9wc1trZXldICYmIHByb3BzW2tleV0gIT09IHZhcmlhbnQucHJvcHNba2V5XSkge1xuICAgICAgICAgICAgaXNNYXRjaCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNNYXRjaCkge1xuICAgICAgICBpZiAodHlwZW9mIHZhcmlhbnQucHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXJpYW50c1N0eWxlcy5wdXNoKHN0eWxlc1tgY2FsbGJhY2ske251bU9mQ2FsbGJhY2tzfWBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXJpYW50c1N0eWxlcy5wdXNoKHN0eWxlc1twcm9wc1RvQ2xhc3NLZXkodmFyaWFudC5wcm9wcyldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YXJpYW50LnByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG51bU9mQ2FsbGJhY2tzICs9IDE7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHZhcmlhbnRzU3R5bGVzO1xufTtcbmNvbnN0IHRoZW1lVmFyaWFudHNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzLCB0aGVtZSwgbmFtZSkgPT4ge1xuICB2YXIgX3RoZW1lJGNvbXBvbmVudHM7XG4gIGNvbnN0IHRoZW1lVmFyaWFudHMgPSB0aGVtZSA9PSBudWxsIHx8IChfdGhlbWUkY29tcG9uZW50cyA9IHRoZW1lLmNvbXBvbmVudHMpID09IG51bGwgfHwgKF90aGVtZSRjb21wb25lbnRzID0gX3RoZW1lJGNvbXBvbmVudHNbbmFtZV0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkY29tcG9uZW50cy52YXJpYW50cztcbiAgcmV0dXJuIHZhcmlhbnRzUmVzb2x2ZXIocHJvcHMsIHN0eWxlcywgdGhlbWVWYXJpYW50cyk7XG59O1xuXG4vLyBVcGRhdGUgL3N5c3RlbS9zdHlsZWQvI2FwaSBpbiBjYXNlIGlmIHRoaXMgY2hhbmdlc1xuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZEZvcndhcmRQcm9wKHByb3ApIHtcbiAgcmV0dXJuIHByb3AgIT09ICdvd25lclN0YXRlJyAmJiBwcm9wICE9PSAndGhlbWUnICYmIHByb3AgIT09ICdzeCcgJiYgcHJvcCAhPT0gJ2FzJztcbn1cbmV4cG9ydCBjb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuY29uc3QgbG93ZXJjYXNlRmlyc3RMZXR0ZXIgPSBzdHJpbmcgPT4ge1xuICBpZiAoIXN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn07XG5mdW5jdGlvbiByZXNvbHZlVGhlbWUoe1xuICBkZWZhdWx0VGhlbWUsXG4gIHRoZW1lLFxuICB0aGVtZUlkXG59KSB7XG4gIHJldHVybiBpc0VtcHR5KHRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lW3RoZW1lSWRdIHx8IHRoZW1lO1xufVxuZnVuY3Rpb24gZGVmYXVsdE92ZXJyaWRlc1Jlc29sdmVyKHNsb3QpIHtcbiAgaWYgKCFzbG90KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXNbc2xvdF07XG59XG5jb25zdCBtdWlTdHlsZWRGdW5jdGlvblJlc29sdmVyID0gKHtcbiAgc3R5bGVkQXJnLFxuICBwcm9wcyxcbiAgZGVmYXVsdFRoZW1lLFxuICB0aGVtZUlkXG59KSA9PiB7XG4gIGNvbnN0IHJlc29sdmVkU3R5bGVzID0gc3R5bGVkQXJnKF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHRoZW1lOiByZXNvbHZlVGhlbWUoX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBkZWZhdWx0VGhlbWUsXG4gICAgICB0aGVtZUlkXG4gICAgfSkpXG4gIH0pKTtcbiAgbGV0IG9wdGlvbmFsVmFyaWFudHM7XG4gIGlmIChyZXNvbHZlZFN0eWxlcyAmJiByZXNvbHZlZFN0eWxlcy52YXJpYW50cykge1xuICAgIG9wdGlvbmFsVmFyaWFudHMgPSByZXNvbHZlZFN0eWxlcy52YXJpYW50cztcbiAgICBkZWxldGUgcmVzb2x2ZWRTdHlsZXMudmFyaWFudHM7XG4gIH1cbiAgaWYgKG9wdGlvbmFsVmFyaWFudHMpIHtcbiAgICBjb25zdCB2YXJpYW50c1N0eWxlcyA9IHZhcmlhbnRzUmVzb2x2ZXIocHJvcHMsIHRyYW5zZm9ybVZhcmlhbnRzKG9wdGlvbmFsVmFyaWFudHMpLCBvcHRpb25hbFZhcmlhbnRzKTtcbiAgICByZXR1cm4gW3Jlc29sdmVkU3R5bGVzLCAuLi52YXJpYW50c1N0eWxlc107XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVkU3R5bGVzO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZChpbnB1dCA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICB0aGVtZUlkLFxuICAgIGRlZmF1bHRUaGVtZSA9IHN5c3RlbURlZmF1bHRUaGVtZSxcbiAgICByb290U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcCxcbiAgICBzbG90U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcFxuICB9ID0gaW5wdXQ7XG4gIGNvbnN0IHN5c3RlbVN4ID0gcHJvcHMgPT4ge1xuICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uU3goX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICB0aGVtZTogcmVzb2x2ZVRoZW1lKF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBkZWZhdWx0VGhlbWUsXG4gICAgICAgIHRoZW1lSWRcbiAgICAgIH0pKVxuICAgIH0pKTtcbiAgfTtcbiAgc3lzdGVtU3guX19tdWlfc3lzdGVtU3ggPSB0cnVlO1xuICByZXR1cm4gKHRhZywgaW5wdXRPcHRpb25zID0ge30pID0+IHtcbiAgICAvLyBGaWx0ZXIgb3V0IHRoZSBgc3hgIHN0eWxlIGZ1bmN0aW9uIGZyb20gdGhlIHByZXZpb3VzIHN0eWxlZCBjb21wb25lbnQgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBzdHlsZXMgZ2VuZXJhdGVkIGJ5IHRoZSBjb21wb3NpdGUgY29tcG9uZW50cy5cbiAgICBwcm9jZXNzU3R5bGVzKHRhZywgc3R5bGVzID0+IHN0eWxlcy5maWx0ZXIoc3R5bGUgPT4gIShzdHlsZSAhPSBudWxsICYmIHN0eWxlLl9fbXVpX3N5c3RlbVN4KSkpO1xuICAgIGNvbnN0IHtcbiAgICAgICAgbmFtZTogY29tcG9uZW50TmFtZSxcbiAgICAgICAgc2xvdDogY29tcG9uZW50U2xvdCxcbiAgICAgICAgc2tpcFZhcmlhbnRzUmVzb2x2ZXI6IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIsXG4gICAgICAgIHNraXBTeDogaW5wdXRTa2lwU3gsXG4gICAgICAgIC8vIFRPRE8gdjY6IHJlbW92ZSBgbG93ZXJjYXNlRmlyc3RMZXR0ZXIoKWAgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxuICAgICAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICAgICAgb3ZlcnJpZGVzUmVzb2x2ZXIgPSBkZWZhdWx0T3ZlcnJpZGVzUmVzb2x2ZXIobG93ZXJjYXNlRmlyc3RMZXR0ZXIoY29tcG9uZW50U2xvdCkpXG4gICAgICB9ID0gaW5wdXRPcHRpb25zLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGlucHV0T3B0aW9ucywgX2V4Y2x1ZGVkKTtcblxuICAgIC8vIGlmIHNraXBWYXJpYW50c1Jlc29sdmVyIG9wdGlvbiBpcyBkZWZpbmVkLCB0YWtlIHRoZSB2YWx1ZSwgb3RoZXJ3aXNlLCB0cnVlIGZvciByb290IGFuZCBmYWxzZSBmb3Igb3RoZXIgc2xvdHMuXG4gICAgY29uc3Qgc2tpcFZhcmlhbnRzUmVzb2x2ZXIgPSBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyICE9PSB1bmRlZmluZWQgPyBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyIDpcbiAgICAvLyBUT0RPIHY2OiByZW1vdmUgYFJvb3RgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICBjb21wb25lbnRTbG90ICYmIGNvbXBvbmVudFNsb3QgIT09ICdSb290JyAmJiBjb21wb25lbnRTbG90ICE9PSAncm9vdCcgfHwgZmFsc2U7XG4gICAgY29uc3Qgc2tpcFN4ID0gaW5wdXRTa2lwU3ggfHwgZmFsc2U7XG4gICAgbGV0IGxhYmVsO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICAvLyBUT0RPIHY2OiByZW1vdmUgYGxvd2VyY2FzZUZpcnN0TGV0dGVyKClgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAgICAgLy8gRm9yIG1vcmUgZGV0YWlsczogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM3OTA4XG4gICAgICAgIGxhYmVsID0gYCR7Y29tcG9uZW50TmFtZX0tJHtsb3dlcmNhc2VGaXJzdExldHRlcihjb21wb25lbnRTbG90IHx8ICdSb290Jyl9YDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2hvdWxkRm9yd2FyZFByb3A7XG5cbiAgICAvLyBUT0RPIHY2OiByZW1vdmUgYFJvb3RgIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2VcbiAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICBpZiAoY29tcG9uZW50U2xvdCA9PT0gJ1Jvb3QnIHx8IGNvbXBvbmVudFNsb3QgPT09ICdyb290Jykge1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSByb290U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfSBlbHNlIGlmIChjb21wb25lbnRTbG90KSB7XG4gICAgICAvLyBhbnkgb3RoZXIgc2xvdCBzcGVjaWZpZWRcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2xvdFNob3VsZEZvcndhcmRQcm9wO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmdUYWcodGFnKSkge1xuICAgICAgLy8gZm9yIHN0cmluZyAoaHRtbCkgdGFnLCBwcmVzZXJ2ZSB0aGUgYmVoYXZpb3IgaW4gZW1vdGlvbiAmIHN0eWxlZC1jb21wb25lbnRzLlxuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGRlZmF1bHRTdHlsZWRSZXNvbHZlciA9IHN0eWxlZEVuZ2luZVN0eWxlZCh0YWcsIF9leHRlbmRzKHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbixcbiAgICAgIGxhYmVsXG4gICAgfSwgb3B0aW9ucykpO1xuICAgIGNvbnN0IG11aVN0eWxlZFJlc29sdmVyID0gKHN0eWxlQXJnLCAuLi5leHByZXNzaW9ucykgPT4ge1xuICAgICAgY29uc3QgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lID0gZXhwcmVzc2lvbnMgPyBleHByZXNzaW9ucy5tYXAoc3R5bGVzQXJnID0+IHtcbiAgICAgICAgLy8gT24gdGhlIHNlcnZlciBFbW90aW9uIGRvZXNuJ3QgdXNlIFJlYWN0LmZvcndhcmRSZWYgZm9yIGNyZWF0aW5nIGNvbXBvbmVudHMsIHNvIHRoZSBjcmVhdGVkXG4gICAgICAgIC8vIGNvbXBvbmVudCBzdGF5cyBhcyBhIGZ1bmN0aW9uLiBUaGlzIGNvbmRpdGlvbiBtYWtlcyBzdXJlIHRoYXQgd2UgZG8gbm90IGludGVycG9sYXRlIGZ1bmN0aW9uc1xuICAgICAgICAvLyB3aGljaCBhcmUgYmFzaWNhbGx5IGNvbXBvbmVudHMgdXNlZCBhcyBhIHNlbGVjdG9ycy5cbiAgICAgICAgaWYgKHR5cGVvZiBzdHlsZXNBcmcgPT09ICdmdW5jdGlvbicgJiYgc3R5bGVzQXJnLl9fZW1vdGlvbl9yZWFsICE9PSBzdHlsZXNBcmcpIHtcbiAgICAgICAgICByZXR1cm4gcHJvcHMgPT4gbXVpU3R5bGVkRnVuY3Rpb25SZXNvbHZlcih7XG4gICAgICAgICAgICBzdHlsZWRBcmc6IHN0eWxlc0FyZyxcbiAgICAgICAgICAgIHByb3BzLFxuICAgICAgICAgICAgZGVmYXVsdFRoZW1lLFxuICAgICAgICAgICAgdGhlbWVJZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1BsYWluT2JqZWN0KHN0eWxlc0FyZykpIHtcbiAgICAgICAgICBsZXQgdHJhbnNmb3JtZWRTdHlsZXNBcmcgPSBzdHlsZXNBcmc7XG4gICAgICAgICAgbGV0IHN0eWxlZEFyZ1ZhcmlhbnRzO1xuICAgICAgICAgIGlmIChzdHlsZXNBcmcgJiYgc3R5bGVzQXJnLnZhcmlhbnRzKSB7XG4gICAgICAgICAgICBzdHlsZWRBcmdWYXJpYW50cyA9IHN0eWxlc0FyZy52YXJpYW50cztcbiAgICAgICAgICAgIGRlbGV0ZSB0cmFuc2Zvcm1lZFN0eWxlc0FyZy52YXJpYW50cztcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkU3R5bGVzQXJnID0gcHJvcHMgPT4ge1xuICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gc3R5bGVzQXJnO1xuICAgICAgICAgICAgICBjb25zdCB2YXJpYW50U3R5bGVzID0gdmFyaWFudHNSZXNvbHZlcihwcm9wcywgdHJhbnNmb3JtVmFyaWFudHMoc3R5bGVkQXJnVmFyaWFudHMpLCBzdHlsZWRBcmdWYXJpYW50cyk7XG4gICAgICAgICAgICAgIHZhcmlhbnRTdHlsZXMuZm9yRWFjaCh2YXJpYW50U3R5bGUgPT4ge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGRlZXBtZXJnZShyZXN1bHQsIHZhcmlhbnRTdHlsZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVkU3R5bGVzQXJnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHlsZXNBcmc7XG4gICAgICB9KSA6IFtdO1xuICAgICAgbGV0IHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBzdHlsZUFyZztcbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHN0eWxlQXJnKSkge1xuICAgICAgICBsZXQgc3R5bGVkQXJnVmFyaWFudHM7XG4gICAgICAgIGlmIChzdHlsZUFyZyAmJiBzdHlsZUFyZy52YXJpYW50cykge1xuICAgICAgICAgIHN0eWxlZEFyZ1ZhcmlhbnRzID0gc3R5bGVBcmcudmFyaWFudHM7XG4gICAgICAgICAgZGVsZXRlIHRyYW5zZm9ybWVkU3R5bGVBcmcudmFyaWFudHM7XG4gICAgICAgICAgdHJhbnNmb3JtZWRTdHlsZUFyZyA9IHByb3BzID0+IHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBzdHlsZUFyZztcbiAgICAgICAgICAgIGNvbnN0IHZhcmlhbnRTdHlsZXMgPSB2YXJpYW50c1Jlc29sdmVyKHByb3BzLCB0cmFuc2Zvcm1WYXJpYW50cyhzdHlsZWRBcmdWYXJpYW50cyksIHN0eWxlZEFyZ1ZhcmlhbnRzKTtcbiAgICAgICAgICAgIHZhcmlhbnRTdHlsZXMuZm9yRWFjaCh2YXJpYW50U3R5bGUgPT4ge1xuICAgICAgICAgICAgICByZXN1bHQgPSBkZWVwbWVyZ2UocmVzdWx0LCB2YXJpYW50U3R5bGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0eWxlQXJnID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAvLyBPbiB0aGUgc2VydmVyIEVtb3Rpb24gZG9lc24ndCB1c2UgUmVhY3QuZm9yd2FyZFJlZiBmb3IgY3JlYXRpbmcgY29tcG9uZW50cywgc28gdGhlIGNyZWF0ZWRcbiAgICAgIC8vIGNvbXBvbmVudCBzdGF5cyBhcyBhIGZ1bmN0aW9uLiBUaGlzIGNvbmRpdGlvbiBtYWtlcyBzdXJlIHRoYXQgd2UgZG8gbm90IGludGVycG9sYXRlIGZ1bmN0aW9uc1xuICAgICAgLy8gd2hpY2ggYXJlIGJhc2ljYWxseSBjb21wb25lbnRzIHVzZWQgYXMgYSBzZWxlY3RvcnMuXG4gICAgICBzdHlsZUFyZy5fX2Vtb3Rpb25fcmVhbCAhPT0gc3R5bGVBcmcpIHtcbiAgICAgICAgLy8gSWYgdGhlIHR5cGUgaXMgZnVuY3Rpb24sIHdlIG5lZWQgdG8gZGVmaW5lIHRoZSBkZWZhdWx0IHRoZW1lLlxuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gcHJvcHMgPT4gbXVpU3R5bGVkRnVuY3Rpb25SZXNvbHZlcih7XG4gICAgICAgICAgc3R5bGVkQXJnOiBzdHlsZUFyZyxcbiAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICBkZWZhdWx0VGhlbWUsXG4gICAgICAgICAgdGhlbWVJZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wb25lbnROYW1lICYmIG92ZXJyaWRlc1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHByb3BzID0+IHtcbiAgICAgICAgICBjb25zdCB0aGVtZSA9IHJlc29sdmVUaGVtZShfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgIGRlZmF1bHRUaGVtZSxcbiAgICAgICAgICAgIHRoZW1lSWRcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgY29uc3Qgc3R5bGVPdmVycmlkZXMgPSBnZXRTdHlsZU92ZXJyaWRlcyhjb21wb25lbnROYW1lLCB0aGVtZSk7XG4gICAgICAgICAgaWYgKHN0eWxlT3ZlcnJpZGVzKSB7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzID0ge307XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhzdHlsZU92ZXJyaWRlcykuZm9yRWFjaCgoW3Nsb3RLZXksIHNsb3RTdHlsZV0pID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlc1tzbG90S2V5XSA9IHR5cGVvZiBzbG90U3R5bGUgPT09ICdmdW5jdGlvbicgPyBzbG90U3R5bGUoX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgICAgfSkpIDogc2xvdFN0eWxlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gb3ZlcnJpZGVzUmVzb2x2ZXIocHJvcHMsIHJlc29sdmVkU3R5bGVPdmVycmlkZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSAmJiAhc2tpcFZhcmlhbnRzUmVzb2x2ZXIpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLnB1c2gocHJvcHMgPT4ge1xuICAgICAgICAgIGNvbnN0IHRoZW1lID0gcmVzb2x2ZVRoZW1lKF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgICAgZGVmYXVsdFRoZW1lLFxuICAgICAgICAgICAgdGhlbWVJZFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICByZXR1cm4gdGhlbWVWYXJpYW50c1Jlc29sdmVyKHByb3BzLCBnZXRWYXJpYW50U3R5bGVzKGNvbXBvbmVudE5hbWUsIHRoZW1lKSwgdGhlbWUsIGNvbXBvbmVudE5hbWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghc2tpcFN4KSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHN5c3RlbVN4KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG51bU9mQ3VzdG9tRm5zQXBwbGllZCA9IGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5sZW5ndGggLSBleHByZXNzaW9ucy5sZW5ndGg7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZUFyZykgJiYgbnVtT2ZDdXN0b21GbnNBcHBsaWVkID4gMCkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlcnMgPSBuZXcgQXJyYXkobnVtT2ZDdXN0b21GbnNBcHBsaWVkKS5maWxsKCcnKTtcbiAgICAgICAgLy8gSWYgdGhlIHR5cGUgaXMgYXJyYXksIHRoYW4gd2UgbmVlZCB0byBhZGQgcGxhY2Vob2xkZXJzIGluIHRoZSB0ZW1wbGF0ZSBmb3IgdGhlIG92ZXJyaWRlcywgdmFyaWFudHMgYW5kIHRoZSBzeCBzdHlsZXMuXG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBbLi4uc3R5bGVBcmcsIC4uLnBsYWNlaG9sZGVyc107XG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcucmF3ID0gWy4uLnN0eWxlQXJnLnJhdywgLi4ucGxhY2Vob2xkZXJzXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IENvbXBvbmVudCA9IGRlZmF1bHRTdHlsZWRSZXNvbHZlcih0cmFuc2Zvcm1lZFN0eWxlQXJnLCAuLi5leHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgbGV0IGRpc3BsYXlOYW1lO1xuICAgICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICAgIGRpc3BsYXlOYW1lID0gYCR7Y29tcG9uZW50TmFtZX0ke2NhcGl0YWxpemUoY29tcG9uZW50U2xvdCB8fCAnJyl9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlzcGxheU5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGRpc3BsYXlOYW1lID0gYFN0eWxlZCgke2dldERpc3BsYXlOYW1lKHRhZyl9KWA7XG4gICAgICAgIH1cbiAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICB9XG4gICAgICBpZiAodGFnLm11aU5hbWUpIHtcbiAgICAgICAgQ29tcG9uZW50Lm11aU5hbWUgPSB0YWcubXVpTmFtZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgfTtcbiAgICBpZiAoZGVmYXVsdFN0eWxlZFJlc29sdmVyLndpdGhDb25maWcpIHtcbiAgICAgIG11aVN0eWxlZFJlc29sdmVyLndpdGhDb25maWcgPSBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZztcbiAgICB9XG4gICAgcmV0dXJuIG11aVN0eWxlZFJlc29sdmVyO1xuICB9O1xufSIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUNyZWF0ZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG4iLCJ2YXIgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXBEYXRhO1xuIiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImR1cmF0aW9uXCIsIFwiZWFzaW5nXCIsIFwiZGVsYXlcIl07XG4vLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cbmV4cG9ydCBjb25zdCBlYXNpbmcgPSB7XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uIGVhc2luZyBjdXJ2ZS5cbiAgZWFzZUluT3V0OiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgZW50ZXIgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5IGZyb20gb2ZmLXNjcmVlbiBhbmRcbiAgLy8gc2xvd2x5IGRlY2VsZXJhdGUgdG8gYSByZXN0aW5nIHBvaW50LlxuICBlYXNlT3V0OiAnY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgbGVhdmUgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCBkZWNlbGVyYXRlIHdoZW4gb2ZmLXNjcmVlbi5cbiAgZWFzZUluOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSknLFxuICAvLyBUaGUgc2hhcnAgY3VydmUgaXMgdXNlZCBieSBvYmplY3RzIHRoYXQgbWF5IHJldHVybiB0byB0aGUgc2NyZWVuIGF0IGFueSB0aW1lLlxuICBzaGFycDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknXG59O1xuXG4vLyBGb2xsb3cgaHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctY29tbW9uLWR1cmF0aW9uc1xuLy8gdG8gbGVhcm4gd2hlbiB1c2Ugd2hhdCB0aW1pbmdcbmV4cG9ydCBjb25zdCBkdXJhdGlvbiA9IHtcbiAgc2hvcnRlc3Q6IDE1MCxcbiAgc2hvcnRlcjogMjAwLFxuICBzaG9ydDogMjUwLFxuICAvLyBtb3N0IGJhc2ljIHJlY29tbWVuZGVkIHRpbWluZ1xuICBzdGFuZGFyZDogMzAwLFxuICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgaW4gY29tcGxleCBhbmltYXRpb25zXG4gIGNvbXBsZXg6IDM3NSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgZW50ZXJpbmcgc2NyZWVuXG4gIGVudGVyaW5nU2NyZWVuOiAyMjUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGxlYXZpbmcgc2NyZWVuXG4gIGxlYXZpbmdTY3JlZW46IDE5NVxufTtcbmZ1bmN0aW9uIGZvcm1hdE1zKG1pbGxpc2Vjb25kcykge1xuICByZXR1cm4gYCR7TWF0aC5yb3VuZChtaWxsaXNlY29uZHMpfW1zYDtcbn1cbmZ1bmN0aW9uIGdldEF1dG9IZWlnaHREdXJhdGlvbihoZWlnaHQpIHtcbiAgaWYgKCFoZWlnaHQpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBjb25zdGFudCA9IGhlaWdodCAvIDM2O1xuXG4gIC8vIGh0dHBzOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9KDQrJTJCKzE1KyorKHgrJTJGKzM2KykrKiorMC4yNSslMkIrKHgrJTJGKzM2KSslMkYrNSkrKisxMFxuICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogY29uc3RhbnQgKiogMC4yNSArIGNvbnN0YW50IC8gNSkgKiAxMCk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9ucyhpbnB1dFRyYW5zaXRpb25zKSB7XG4gIGNvbnN0IG1lcmdlZEVhc2luZyA9IF9leHRlbmRzKHt9LCBlYXNpbmcsIGlucHV0VHJhbnNpdGlvbnMuZWFzaW5nKTtcbiAgY29uc3QgbWVyZ2VkRHVyYXRpb24gPSBfZXh0ZW5kcyh7fSwgZHVyYXRpb24sIGlucHV0VHJhbnNpdGlvbnMuZHVyYXRpb24pO1xuICBjb25zdCBjcmVhdGUgPSAocHJvcHMgPSBbJ2FsbCddLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbk9wdGlvbiA9IG1lcmdlZER1cmF0aW9uLnN0YW5kYXJkLFxuICAgICAgICBlYXNpbmc6IGVhc2luZ09wdGlvbiA9IG1lcmdlZEVhc2luZy5lYXNlSW5PdXQsXG4gICAgICAgIGRlbGF5ID0gMFxuICAgICAgfSA9IG9wdGlvbnMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGlzU3RyaW5nID0gdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICAgIC8vIElFMTEgc3VwcG9ydCwgcmVwbGFjZSB3aXRoIE51bWJlci5pc05hTlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgICAgY29uc3QgaXNOdW1iZXIgPSB2YWx1ZSA9PiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xuICAgICAgaWYgKCFpc1N0cmluZyhwcm9wcykgJiYgIUFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTnVtYmVyKGR1cmF0aW9uT3B0aW9uKSAmJiAhaXNTdHJpbmcoZHVyYXRpb25PcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogQXJndW1lbnQgXCJkdXJhdGlvblwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kICR7ZHVyYXRpb25PcHRpb259LmApO1xuICAgICAgfVxuICAgICAgaWYgKCFpc1N0cmluZyhlYXNpbmdPcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuICAgICAgaWYgKCFpc051bWJlcihkZWxheSkgJiYgIWlzU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwiZGVsYXlcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBTZWNvbmcgYXJndW1lbnQgb2YgdHJhbnNpdGlvbi5jcmVhdGUgbXVzdCBiZSBhbiBvYmplY3QuJywgXCJBcmd1bWVudHMgc2hvdWxkIGJlIGVpdGhlciBgY3JlYXRlKCdwcm9wMScsIG9wdGlvbnMpYCBvciBgY3JlYXRlKFsncHJvcDEnLCAncHJvcDInXSwgb3B0aW9ucylgXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICAgIGlmIChPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVW5yZWNvZ25pemVkIGFyZ3VtZW50KHMpIFske09iamVjdC5rZXlzKG90aGVyKS5qb2luKCcsJyl9XS5gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHByb3BzKSA/IHByb3BzIDogW3Byb3BzXSkubWFwKGFuaW1hdGVkUHJvcCA9PiBgJHthbmltYXRlZFByb3B9ICR7dHlwZW9mIGR1cmF0aW9uT3B0aW9uID09PSAnc3RyaW5nJyA/IGR1cmF0aW9uT3B0aW9uIDogZm9ybWF0TXMoZHVyYXRpb25PcHRpb24pfSAke2Vhc2luZ09wdGlvbn0gJHt0eXBlb2YgZGVsYXkgPT09ICdzdHJpbmcnID8gZGVsYXkgOiBmb3JtYXRNcyhkZWxheSl9YCkuam9pbignLCcpO1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGdldEF1dG9IZWlnaHREdXJhdGlvbixcbiAgICBjcmVhdGVcbiAgfSwgaW5wdXRUcmFuc2l0aW9ucywge1xuICAgIGVhc2luZzogbWVyZ2VkRWFzaW5nLFxuICAgIGR1cmF0aW9uOiBtZXJnZWREdXJhdGlvblxuICB9KTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRoZW1lQ29udGV4dCB9IGZyb20gJ0BtdWkvc3R5bGVkLWVuZ2luZSc7XG5mdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBudWxsKSB7XG4gIGNvbnN0IGNvbnRleHRUaGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgcmV0dXJuICFjb250ZXh0VGhlbWUgfHwgaXNPYmplY3RFbXB0eShjb250ZXh0VGhlbWUpID8gZGVmYXVsdFRoZW1lIDogY29udGV4dFRoZW1lO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlVGhlbWU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHN0cmljdFxuZXhwb3J0IGRlZmF1bHQgbnVsbDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2UgY2xpZW50XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0yLjAxIDIxIDIzIDEyIDIuMDEgMyAyIDEwbDE1IDItMTUgMnpcIlxufSksICdTZW5kJyk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyICYmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl0pOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiLypcblxuQmFzZWQgb2ZmIGdsYW1vcidzIFN0eWxlU2hlZXQsIHRoYW5rcyBTdW5pbCDinaTvuI9cblxuaGlnaCBwZXJmb3JtYW5jZSBTdHlsZVNoZWV0IGZvciBjc3MtaW4tanMgc3lzdGVtc1xuXG4tIHVzZXMgbXVsdGlwbGUgc3R5bGUgdGFncyBiZWhpbmQgdGhlIHNjZW5lcyBmb3IgbWlsbGlvbnMgb2YgcnVsZXNcbi0gdXNlcyBgaW5zZXJ0UnVsZWAgZm9yIGFwcGVuZGluZyBpbiBwcm9kdWN0aW9uIGZvciAqbXVjaCogZmFzdGVyIHBlcmZvcm1hbmNlXG5cbi8vIHVzYWdlXG5cbmltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCdcblxubGV0IHN0eWxlU2hlZXQgPSBuZXcgU3R5bGVTaGVldCh7IGtleTogJycsIGNvbnRhaW5lcjogZG9jdW1lbnQuaGVhZCB9KVxuXG5zdHlsZVNoZWV0Lmluc2VydCgnI2JveCB7IGJvcmRlcjogMXB4IHNvbGlkIHJlZDsgfScpXG4tIGFwcGVuZHMgYSBjc3MgcnVsZSBpbnRvIHRoZSBzdHlsZXNoZWV0XG5cbnN0eWxlU2hlZXQuZmx1c2goKVxuLSBlbXB0aWVzIHRoZSBzdHlsZXNoZWV0IG9mIGFsbCBpdHMgY29udGVudHNcblxuKi9cbi8vICRGbG93Rml4TWVcbmZ1bmN0aW9uIHNoZWV0Rm9yVGFnKHRhZykge1xuICBpZiAodGFnLnNoZWV0KSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiB0YWcuc2hlZXQ7XG4gIH0gLy8gdGhpcyB3ZWlyZG5lc3MgYnJvdWdodCB0byB5b3UgYnkgZmlyZWZveFxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLm93bmVyTm9kZSA9PT0gdGFnKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICByZXR1cm4gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nLCBvcHRpb25zLmtleSk7XG5cbiAgaWYgKG9wdGlvbnMubm9uY2UgIT09IHVuZGVmaW5lZCkge1xuICAgIHRhZy5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgb3B0aW9ucy5ub25jZSk7XG4gIH1cblxuICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1zJywgJycpO1xuICByZXR1cm4gdGFnO1xufVxuXG52YXIgU3R5bGVTaGVldCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8vIFVzaW5nIE5vZGUgaW5zdGVhZCBvZiBIVE1MRWxlbWVudCBzaW5jZSBjb250YWluZXIgbWF5IGJlIGEgU2hhZG93Um9vdFxuICBmdW5jdGlvbiBTdHlsZVNoZWV0KG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5faW5zZXJ0VGFnID0gZnVuY3Rpb24gKHRhZykge1xuICAgICAgdmFyIGJlZm9yZTtcblxuICAgICAgaWYgKF90aGlzLnRhZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmIChfdGhpcy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmluc2VydGlvblBvaW50Lm5leHRTaWJsaW5nO1xuICAgICAgICB9IGVsc2UgaWYgKF90aGlzLnByZXBlbmQpIHtcbiAgICAgICAgICBiZWZvcmUgPSBfdGhpcy5jb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiZWZvcmUgPSBfdGhpcy5iZWZvcmU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJlZm9yZSA9IF90aGlzLnRhZ3NbX3RoaXMudGFncy5sZW5ndGggLSAxXS5uZXh0U2libGluZztcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY29udGFpbmVyLmluc2VydEJlZm9yZSh0YWcsIGJlZm9yZSk7XG5cbiAgICAgIF90aGlzLnRhZ3MucHVzaCh0YWcpO1xuICAgIH07XG5cbiAgICB0aGlzLmlzU3BlZWR5ID0gb3B0aW9ucy5zcGVlZHkgPT09IHVuZGVmaW5lZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgOiBvcHRpb25zLnNwZWVkeTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG4gICAgdGhpcy5ub25jZSA9IG9wdGlvbnMubm9uY2U7IC8vIGtleSBpcyB0aGUgdmFsdWUgb2YgdGhlIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGUsIGl0J3MgdXNlZCB0byBpZGVudGlmeSBkaWZmZXJlbnQgc2hlZXRzXG5cbiAgICB0aGlzLmtleSA9IG9wdGlvbnMua2V5O1xuICAgIHRoaXMuY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXI7XG4gICAgdGhpcy5wcmVwZW5kID0gb3B0aW9ucy5wcmVwZW5kO1xuICAgIHRoaXMuaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuICAgIHRoaXMuYmVmb3JlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uaHlkcmF0ZSA9IGZ1bmN0aW9uIGh5ZHJhdGUobm9kZXMpIHtcbiAgICBub2Rlcy5mb3JFYWNoKHRoaXMuX2luc2VydFRhZyk7XG4gIH07XG5cbiAgX3Byb3RvLmluc2VydCA9IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG4gICAgLy8gdGhlIG1heCBsZW5ndGggaXMgaG93IG1hbnkgcnVsZXMgd2UgaGF2ZSBwZXIgc3R5bGUgdGFnLCBpdCdzIDY1MDAwIGluIHNwZWVkeSBtb2RlXG4gICAgLy8gaXQncyAxIGluIGRldiBiZWNhdXNlIHdlIGluc2VydCBzb3VyY2UgbWFwcyB0aGF0IG1hcCBhIHNpbmdsZSBydWxlIHRvIGEgbG9jYXRpb25cbiAgICAvLyBhbmQgeW91IGNhbiBvbmx5IGhhdmUgb25lIHNvdXJjZSBtYXAgcGVyIHN0eWxlIHRhZ1xuICAgIGlmICh0aGlzLmN0ciAlICh0aGlzLmlzU3BlZWR5ID8gNjUwMDAgOiAxKSA9PT0gMCkge1xuICAgICAgdGhpcy5faW5zZXJ0VGFnKGNyZWF0ZVN0eWxlRWxlbWVudCh0aGlzKSk7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMudGFnc1t0aGlzLnRhZ3MubGVuZ3RoIC0gMV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGlzSW1wb3J0UnVsZSA9IHJ1bGUuY2hhckNvZGVBdCgwKSA9PT0gNjQgJiYgcnVsZS5jaGFyQ29kZUF0KDEpID09PSAxMDU7XG5cbiAgICAgIGlmIChpc0ltcG9ydFJ1bGUgJiYgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUpIHtcbiAgICAgICAgLy8gdGhpcyB3b3VsZCBvbmx5IGNhdXNlIHByb2JsZW0gaW4gc3BlZWR5IG1vZGVcbiAgICAgICAgLy8gYnV0IHdlIGRvbid0IHdhbnQgZW5hYmxpbmcgc3BlZWR5IHRvIGFmZmVjdCB0aGUgb2JzZXJ2YWJsZSBiZWhhdmlvclxuICAgICAgICAvLyBzbyB3ZSByZXBvcnQgdGhpcyBlcnJvciBhdCBhbGwgdGltZXNcbiAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSdyZSBhdHRlbXB0aW5nIHRvIGluc2VydCB0aGUgZm9sbG93aW5nIHJ1bGU6XFxuXCIgKyBydWxlICsgJ1xcblxcbmBAaW1wb3J0YCBydWxlcyBtdXN0IGJlIGJlZm9yZSBhbGwgb3RoZXIgdHlwZXMgb2YgcnVsZXMgaW4gYSBzdHlsZXNoZWV0IGJ1dCBvdGhlciBydWxlcyBoYXZlIGFscmVhZHkgYmVlbiBpbnNlcnRlZC4gUGxlYXNlIGVuc3VyZSB0aGF0IGBAaW1wb3J0YCBydWxlcyBhcmUgYmVmb3JlIGFsbCBvdGhlciBydWxlcy4nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2FscmVhZHlJbnNlcnRlZE9yZGVySW5zZW5zaXRpdmVSdWxlID0gdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgfHwgIWlzSW1wb3J0UnVsZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1NwZWVkeSkge1xuICAgICAgdmFyIHNoZWV0ID0gc2hlZXRGb3JUYWcodGFnKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gdGhpcyBpcyB0aGUgdWx0cmFmYXN0IHZlcnNpb24sIHdvcmtzIGFjcm9zcyBicm93c2Vyc1xuICAgICAgICAvLyB0aGUgYmlnIGRyYXdiYWNrIGlzIHRoYXQgdGhlIGNzcyB3b24ndCBiZSBlZGl0YWJsZSBpbiBkZXZ0b29sc1xuICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICEvOigtbW96LXBsYWNlaG9sZGVyfC1tb3otZm9jdXMtaW5uZXJ8LW1vei1mb2N1c3Jpbmd8LW1zLWlucHV0LXBsYWNlaG9sZGVyfC1tb3otcmVhZC13cml0ZXwtbW96LXJlYWQtb25seXwtbXMtY2xlYXJ8LW1zLWV4cGFuZHwtbXMtcmV2ZWFsKXsvLnRlc3QocnVsZSkpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlcmUgd2FzIGEgcHJvYmxlbSBpbnNlcnRpbmcgdGhlIGZvbGxvd2luZyBydWxlOiBcXFwiXCIgKyBydWxlICsgXCJcXFwiXCIsIGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShydWxlKSk7XG4gICAgfVxuXG4gICAgdGhpcy5jdHIrKztcbiAgfTtcblxuICBfcHJvdG8uZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgdGhpcy50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgcmV0dXJuIHRhZy5wYXJlbnROb2RlICYmIHRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhZyk7XG4gICAgfSk7XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRoaXMuX2FscmVhZHlJbnNlcnRlZE9yZGVySW5zZW5zaXRpdmVSdWxlID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdHlsZVNoZWV0O1xufSgpO1xuXG5leHBvcnQgeyBTdHlsZVNoZWV0IH07XG4iLCJ2YXIgZT1cIi1tcy1cIjt2YXIgcj1cIi1tb3otXCI7dmFyIGE9XCItd2Via2l0LVwiO3ZhciBuPVwiY29tbVwiO3ZhciBjPVwicnVsZVwiO3ZhciBzPVwiZGVjbFwiO3ZhciB0PVwiQHBhZ2VcIjt2YXIgdT1cIkBtZWRpYVwiO3ZhciBpPVwiQGltcG9ydFwiO3ZhciBmPVwiQGNoYXJzZXRcIjt2YXIgbz1cIkB2aWV3cG9ydFwiO3ZhciBsPVwiQHN1cHBvcnRzXCI7dmFyIHY9XCJAZG9jdW1lbnRcIjt2YXIgcD1cIkBuYW1lc3BhY2VcIjt2YXIgaD1cIkBrZXlmcmFtZXNcIjt2YXIgYj1cIkBmb250LWZhY2VcIjt2YXIgdz1cIkBjb3VudGVyLXN0eWxlXCI7dmFyIGQ9XCJAZm9udC1mZWF0dXJlLXZhbHVlc1wiO3ZhciAkPVwiQGxheWVyXCI7dmFyIGc9TWF0aC5hYnM7dmFyIGs9U3RyaW5nLmZyb21DaGFyQ29kZTt2YXIgbT1PYmplY3QuYXNzaWduO2Z1bmN0aW9uIHgoZSxyKXtyZXR1cm4gTyhlLDApXjQ1PygoKHI8PDJeTyhlLDApKTw8Ml5PKGUsMSkpPDwyXk8oZSwyKSk8PDJeTyhlLDMpOjB9ZnVuY3Rpb24geShlKXtyZXR1cm4gZS50cmltKCl9ZnVuY3Rpb24gaihlLHIpe3JldHVybihlPXIuZXhlYyhlKSk/ZVswXTplfWZ1bmN0aW9uIHooZSxyLGEpe3JldHVybiBlLnJlcGxhY2UocixhKX1mdW5jdGlvbiBDKGUscil7cmV0dXJuIGUuaW5kZXhPZihyKX1mdW5jdGlvbiBPKGUscil7cmV0dXJuIGUuY2hhckNvZGVBdChyKXwwfWZ1bmN0aW9uIEEoZSxyLGEpe3JldHVybiBlLnNsaWNlKHIsYSl9ZnVuY3Rpb24gTShlKXtyZXR1cm4gZS5sZW5ndGh9ZnVuY3Rpb24gUyhlKXtyZXR1cm4gZS5sZW5ndGh9ZnVuY3Rpb24gcShlLHIpe3JldHVybiByLnB1c2goZSksZX1mdW5jdGlvbiBCKGUscil7cmV0dXJuIGUubWFwKHIpLmpvaW4oXCJcIil9dmFyIEQ9MTt2YXIgRT0xO3ZhciBGPTA7dmFyIEc9MDt2YXIgSD0wO3ZhciBJPVwiXCI7ZnVuY3Rpb24gSihlLHIsYSxuLGMscyx0KXtyZXR1cm57dmFsdWU6ZSxyb290OnIscGFyZW50OmEsdHlwZTpuLHByb3BzOmMsY2hpbGRyZW46cyxsaW5lOkQsY29sdW1uOkUsbGVuZ3RoOnQscmV0dXJuOlwiXCJ9fWZ1bmN0aW9uIEsoZSxyKXtyZXR1cm4gbShKKFwiXCIsbnVsbCxudWxsLFwiXCIsbnVsbCxudWxsLDApLGUse2xlbmd0aDotZS5sZW5ndGh9LHIpfWZ1bmN0aW9uIEwoKXtyZXR1cm4gSH1mdW5jdGlvbiBOKCl7SD1HPjA/TyhJLC0tRyk6MDtpZihFLS0sSD09PTEwKUU9MSxELS07cmV0dXJuIEh9ZnVuY3Rpb24gUCgpe0g9RzxGP08oSSxHKyspOjA7aWYoRSsrLEg9PT0xMClFPTEsRCsrO3JldHVybiBIfWZ1bmN0aW9uIFEoKXtyZXR1cm4gTyhJLEcpfWZ1bmN0aW9uIFIoKXtyZXR1cm4gR31mdW5jdGlvbiBUKGUscil7cmV0dXJuIEEoSSxlLHIpfWZ1bmN0aW9uIFUoZSl7c3dpdGNoKGUpe2Nhc2UgMDpjYXNlIDk6Y2FzZSAxMDpjYXNlIDEzOmNhc2UgMzI6cmV0dXJuIDU7Y2FzZSAzMzpjYXNlIDQzOmNhc2UgNDQ6Y2FzZSA0NzpjYXNlIDYyOmNhc2UgNjQ6Y2FzZSAxMjY6Y2FzZSA1OTpjYXNlIDEyMzpjYXNlIDEyNTpyZXR1cm4gNDtjYXNlIDU4OnJldHVybiAzO2Nhc2UgMzQ6Y2FzZSAzOTpjYXNlIDQwOmNhc2UgOTE6cmV0dXJuIDI7Y2FzZSA0MTpjYXNlIDkzOnJldHVybiAxfXJldHVybiAwfWZ1bmN0aW9uIFYoZSl7cmV0dXJuIEQ9RT0xLEY9TShJPWUpLEc9MCxbXX1mdW5jdGlvbiBXKGUpe3JldHVybiBJPVwiXCIsZX1mdW5jdGlvbiBYKGUpe3JldHVybiB5KFQoRy0xLHJlKGU9PT05MT9lKzI6ZT09PTQwP2UrMTplKSkpfWZ1bmN0aW9uIFkoZSl7cmV0dXJuIFcoXyhWKGUpKSl9ZnVuY3Rpb24gWihlKXt3aGlsZShIPVEoKSlpZihIPDMzKVAoKTtlbHNlIGJyZWFrO3JldHVybiBVKGUpPjJ8fFUoSCk+Mz9cIlwiOlwiIFwifWZ1bmN0aW9uIF8oZSl7d2hpbGUoUCgpKXN3aXRjaChVKEgpKXtjYXNlIDA6cShuZShHLTEpLGUpO2JyZWFrO2Nhc2UgMjpxKFgoSCksZSk7YnJlYWs7ZGVmYXVsdDpxKGsoSCksZSl9cmV0dXJuIGV9ZnVuY3Rpb24gZWUoZSxyKXt3aGlsZSgtLXImJlAoKSlpZihIPDQ4fHxIPjEwMnx8SD41NyYmSDw2NXx8SD43MCYmSDw5NylicmVhaztyZXR1cm4gVChlLFIoKSsocjw2JiZRKCk9PTMyJiZQKCk9PTMyKSl9ZnVuY3Rpb24gcmUoZSl7d2hpbGUoUCgpKXN3aXRjaChIKXtjYXNlIGU6cmV0dXJuIEc7Y2FzZSAzNDpjYXNlIDM5OmlmKGUhPT0zNCYmZSE9PTM5KXJlKEgpO2JyZWFrO2Nhc2UgNDA6aWYoZT09PTQxKXJlKGUpO2JyZWFrO2Nhc2UgOTI6UCgpO2JyZWFrfXJldHVybiBHfWZ1bmN0aW9uIGFlKGUscil7d2hpbGUoUCgpKWlmKGUrSD09PTQ3KzEwKWJyZWFrO2Vsc2UgaWYoZStIPT09NDIrNDImJlEoKT09PTQ3KWJyZWFrO3JldHVyblwiLypcIitUKHIsRy0xKStcIipcIitrKGU9PT00Nz9lOlAoKSl9ZnVuY3Rpb24gbmUoZSl7d2hpbGUoIVUoUSgpKSlQKCk7cmV0dXJuIFQoZSxHKX1mdW5jdGlvbiBjZShlKXtyZXR1cm4gVyhzZShcIlwiLG51bGwsbnVsbCxudWxsLFtcIlwiXSxlPVYoZSksMCxbMF0sZSkpfWZ1bmN0aW9uIHNlKGUscixhLG4sYyxzLHQsdSxpKXt2YXIgZj0wO3ZhciBvPTA7dmFyIGw9dDt2YXIgdj0wO3ZhciBwPTA7dmFyIGg9MDt2YXIgYj0xO3ZhciB3PTE7dmFyIGQ9MTt2YXIgJD0wO3ZhciBnPVwiXCI7dmFyIG09Yzt2YXIgeD1zO3ZhciB5PW47dmFyIGo9Zzt3aGlsZSh3KXN3aXRjaChoPSQsJD1QKCkpe2Nhc2UgNDA6aWYoaCE9MTA4JiZPKGosbC0xKT09NTgpe2lmKEMoais9eihYKCQpLFwiJlwiLFwiJlxcZlwiKSxcIiZcXGZcIikhPS0xKWQ9LTE7YnJlYWt9Y2FzZSAzNDpjYXNlIDM5OmNhc2UgOTE6ais9WCgkKTticmVhaztjYXNlIDk6Y2FzZSAxMDpjYXNlIDEzOmNhc2UgMzI6ais9WihoKTticmVhaztjYXNlIDkyOmorPWVlKFIoKS0xLDcpO2NvbnRpbnVlO2Nhc2UgNDc6c3dpdGNoKFEoKSl7Y2FzZSA0MjpjYXNlIDQ3OnEodWUoYWUoUCgpLFIoKSkscixhKSxpKTticmVhaztkZWZhdWx0OmorPVwiL1wifWJyZWFrO2Nhc2UgMTIzKmI6dVtmKytdPU0oaikqZDtjYXNlIDEyNSpiOmNhc2UgNTk6Y2FzZSAwOnN3aXRjaCgkKXtjYXNlIDA6Y2FzZSAxMjU6dz0wO2Nhc2UgNTkrbzppZihkPT0tMSlqPXooaiwvXFxmL2csXCJcIik7aWYocD4wJiZNKGopLWwpcShwPjMyP2llKGorXCI7XCIsbixhLGwtMSk6aWUoeihqLFwiIFwiLFwiXCIpK1wiO1wiLG4sYSxsLTIpLGkpO2JyZWFrO2Nhc2UgNTk6ais9XCI7XCI7ZGVmYXVsdDpxKHk9dGUoaixyLGEsZixvLGMsdSxnLG09W10seD1bXSxsKSxzKTtpZigkPT09MTIzKWlmKG89PT0wKXNlKGoscix5LHksbSxzLGwsdSx4KTtlbHNlIHN3aXRjaCh2PT09OTkmJk8oaiwzKT09PTExMD8xMDA6dil7Y2FzZSAxMDA6Y2FzZSAxMDg6Y2FzZSAxMDk6Y2FzZSAxMTU6c2UoZSx5LHksbiYmcSh0ZShlLHkseSwwLDAsYyx1LGcsYyxtPVtdLGwpLHgpLGMseCxsLHUsbj9tOngpO2JyZWFrO2RlZmF1bHQ6c2Uoaix5LHkseSxbXCJcIl0seCwwLHUseCl9fWY9bz1wPTAsYj1kPTEsZz1qPVwiXCIsbD10O2JyZWFrO2Nhc2UgNTg6bD0xK00oaikscD1oO2RlZmF1bHQ6aWYoYjwxKWlmKCQ9PTEyMyktLWI7ZWxzZSBpZigkPT0xMjUmJmIrKz09MCYmTigpPT0xMjUpY29udGludWU7c3dpdGNoKGorPWsoJCksJCpiKXtjYXNlIDM4OmQ9bz4wPzE6KGorPVwiXFxmXCIsLTEpO2JyZWFrO2Nhc2UgNDQ6dVtmKytdPShNKGopLTEpKmQsZD0xO2JyZWFrO2Nhc2UgNjQ6aWYoUSgpPT09NDUpais9WChQKCkpO3Y9USgpLG89bD1NKGc9ais9bmUoUigpKSksJCsrO2JyZWFrO2Nhc2UgNDU6aWYoaD09PTQ1JiZNKGopPT0yKWI9MH19cmV0dXJuIHN9ZnVuY3Rpb24gdGUoZSxyLGEsbixzLHQsdSxpLGYsbyxsKXt2YXIgdj1zLTE7dmFyIHA9cz09PTA/dDpbXCJcIl07dmFyIGg9UyhwKTtmb3IodmFyIGI9MCx3PTAsZD0wO2I8bjsrK2IpZm9yKHZhciAkPTAsaz1BKGUsdisxLHY9Zyh3PXVbYl0pKSxtPWU7JDxoOysrJClpZihtPXkodz4wP3BbJF0rXCIgXCIrazp6KGssLyZcXGYvZyxwWyRdKSkpZltkKytdPW07cmV0dXJuIEooZSxyLGEscz09PTA/YzppLGYsbyxsKX1mdW5jdGlvbiB1ZShlLHIsYSl7cmV0dXJuIEooZSxyLGEsbixrKEwoKSksQShlLDIsLTIpLDApfWZ1bmN0aW9uIGllKGUscixhLG4pe3JldHVybiBKKGUscixhLHMsQShlLDAsbiksQShlLG4rMSwtMSksbil9ZnVuY3Rpb24gZmUobixjLHMpe3N3aXRjaCh4KG4sYykpe2Nhc2UgNTEwMzpyZXR1cm4gYStcInByaW50LVwiK24rbjtjYXNlIDU3Mzc6Y2FzZSA0MjAxOmNhc2UgMzE3NzpjYXNlIDM0MzM6Y2FzZSAxNjQxOmNhc2UgNDQ1NzpjYXNlIDI5MjE6Y2FzZSA1NTcyOmNhc2UgNjM1NjpjYXNlIDU4NDQ6Y2FzZSAzMTkxOmNhc2UgNjY0NTpjYXNlIDMwMDU6Y2FzZSA2MzkxOmNhc2UgNTg3OTpjYXNlIDU2MjM6Y2FzZSA2MTM1OmNhc2UgNDU5OTpjYXNlIDQ4NTU6Y2FzZSA0MjE1OmNhc2UgNjM4OTpjYXNlIDUxMDk6Y2FzZSA1MzY1OmNhc2UgNTYyMTpjYXNlIDM4Mjk6cmV0dXJuIGErbituO2Nhc2UgNDc4OTpyZXR1cm4gcituK247Y2FzZSA1MzQ5OmNhc2UgNDI0NjpjYXNlIDQ4MTA6Y2FzZSA2OTY4OmNhc2UgMjc1NjpyZXR1cm4gYStuK3IrbitlK24rbjtjYXNlIDU5MzY6c3dpdGNoKE8obixjKzExKSl7Y2FzZSAxMTQ6cmV0dXJuIGErbitlK3oobiwvW3N2aF1cXHcrLVt0YmxyXXsyfS8sXCJ0YlwiKStuO2Nhc2UgMTA4OnJldHVybiBhK24rZSt6KG4sL1tzdmhdXFx3Ky1bdGJscl17Mn0vLFwidGItcmxcIikrbjtjYXNlIDQ1OnJldHVybiBhK24rZSt6KG4sL1tzdmhdXFx3Ky1bdGJscl17Mn0vLFwibHJcIikrbn1jYXNlIDY4Mjg6Y2FzZSA0MjY4OmNhc2UgMjkwMzpyZXR1cm4gYStuK2UrbituO2Nhc2UgNjE2NTpyZXR1cm4gYStuK2UrXCJmbGV4LVwiK24rbjtjYXNlIDUxODc6cmV0dXJuIGErbit6KG4sLyhcXHcrKS4rKDpbXl0rKS8sYStcImJveC0kMSQyXCIrZStcImZsZXgtJDEkMlwiKStuO2Nhc2UgNTQ0MzpyZXR1cm4gYStuK2UrXCJmbGV4LWl0ZW0tXCIreihuLC9mbGV4LXwtc2VsZi9nLFwiXCIpKyghaihuLC9mbGV4LXxiYXNlbGluZS8pP2UrXCJncmlkLXJvdy1cIit6KG4sL2ZsZXgtfC1zZWxmL2csXCJcIik6XCJcIikrbjtjYXNlIDQ2NzU6cmV0dXJuIGErbitlK1wiZmxleC1saW5lLXBhY2tcIit6KG4sL2FsaWduLWNvbnRlbnR8ZmxleC18LXNlbGYvZyxcIlwiKStuO2Nhc2UgNTU0ODpyZXR1cm4gYStuK2UreihuLFwic2hyaW5rXCIsXCJuZWdhdGl2ZVwiKStuO2Nhc2UgNTI5MjpyZXR1cm4gYStuK2UreihuLFwiYmFzaXNcIixcInByZWZlcnJlZC1zaXplXCIpK247Y2FzZSA2MDYwOnJldHVybiBhK1wiYm94LVwiK3oobixcIi1ncm93XCIsXCJcIikrYStuK2UreihuLFwiZ3Jvd1wiLFwicG9zaXRpdmVcIikrbjtjYXNlIDQ1NTQ6cmV0dXJuIGEreihuLC8oW14tXSkodHJhbnNmb3JtKS9nLFwiJDFcIithK1wiJDJcIikrbjtjYXNlIDYxODc6cmV0dXJuIHooeih6KG4sLyh6b29tLXxncmFiKS8sYStcIiQxXCIpLC8oaW1hZ2Utc2V0KS8sYStcIiQxXCIpLG4sXCJcIikrbjtjYXNlIDU0OTU6Y2FzZSAzOTU5OnJldHVybiB6KG4sLyhpbWFnZS1zZXRcXChbXl0qKS8sYStcIiQxXCIrXCIkYCQxXCIpO2Nhc2UgNDk2ODpyZXR1cm4geih6KG4sLyguKzopKGZsZXgtKT8oLiopLyxhK1wiYm94LXBhY2s6JDNcIitlK1wiZmxleC1wYWNrOiQzXCIpLC9zListYlteO10rLyxcImp1c3RpZnlcIikrYStuK247Y2FzZSA0MjAwOmlmKCFqKG4sL2ZsZXgtfGJhc2VsaW5lLykpcmV0dXJuIGUrXCJncmlkLWNvbHVtbi1hbGlnblwiK0EobixjKStuO2JyZWFrO2Nhc2UgMjU5MjpjYXNlIDMzNjA6cmV0dXJuIGUreihuLFwidGVtcGxhdGUtXCIsXCJcIikrbjtjYXNlIDQzODQ6Y2FzZSAzNjE2OmlmKHMmJnMuc29tZSgoZnVuY3Rpb24oZSxyKXtyZXR1cm4gYz1yLGooZS5wcm9wcywvZ3JpZC1cXHcrLWVuZC8pfSkpKXtyZXR1cm5+QyhuKyhzPXNbY10udmFsdWUpLFwic3BhblwiKT9uOmUreihuLFwiLXN0YXJ0XCIsXCJcIikrbitlK1wiZ3JpZC1yb3ctc3BhbjpcIisofkMocyxcInNwYW5cIik/aihzLC9cXGQrLyk6K2oocywvXFxkKy8pLStqKG4sL1xcZCsvKSkrXCI7XCJ9cmV0dXJuIGUreihuLFwiLXN0YXJ0XCIsXCJcIikrbjtjYXNlIDQ4OTY6Y2FzZSA0MTI4OnJldHVybiBzJiZzLnNvbWUoKGZ1bmN0aW9uKGUpe3JldHVybiBqKGUucHJvcHMsL2dyaWQtXFx3Ky1zdGFydC8pfSkpP246ZSt6KHoobixcIi1lbmRcIixcIi1zcGFuXCIpLFwic3BhbiBcIixcIlwiKStuO2Nhc2UgNDA5NTpjYXNlIDM1ODM6Y2FzZSA0MDY4OmNhc2UgMjUzMjpyZXR1cm4geihuLC8oLispLWlubGluZSguKykvLGErXCIkMSQyXCIpK247Y2FzZSA4MTE2OmNhc2UgNzA1OTpjYXNlIDU3NTM6Y2FzZSA1NTM1OmNhc2UgNTQ0NTpjYXNlIDU3MDE6Y2FzZSA0OTMzOmNhc2UgNDY3NzpjYXNlIDU1MzM6Y2FzZSA1Nzg5OmNhc2UgNTAyMTpjYXNlIDQ3NjU6aWYoTShuKS0xLWM+Nilzd2l0Y2goTyhuLGMrMSkpe2Nhc2UgMTA5OmlmKE8obixjKzQpIT09NDUpYnJlYWs7Y2FzZSAxMDI6cmV0dXJuIHoobiwvKC4rOikoLispLShbXl0rKS8sXCIkMVwiK2ErXCIkMi0kM1wiK1wiJDFcIityKyhPKG4sYyszKT09MTA4P1wiJDNcIjpcIiQyLSQzXCIpKStuO2Nhc2UgMTE1OnJldHVybn5DKG4sXCJzdHJldGNoXCIpP2ZlKHoobixcInN0cmV0Y2hcIixcImZpbGwtYXZhaWxhYmxlXCIpLGMscykrbjpufWJyZWFrO2Nhc2UgNTE1MjpjYXNlIDU5MjA6cmV0dXJuIHoobiwvKC4rPyk6KFxcZCspKFxccypcXC9cXHMqKHNwYW4pP1xccyooXFxkKykpPyguKikvLChmdW5jdGlvbihyLGEsYyxzLHQsdSxpKXtyZXR1cm4gZSthK1wiOlwiK2MraSsocz9lK2ErXCItc3BhbjpcIisodD91Oit1LStjKStpOlwiXCIpK259KSk7Y2FzZSA0OTQ5OmlmKE8obixjKzYpPT09MTIxKXJldHVybiB6KG4sXCI6XCIsXCI6XCIrYSkrbjticmVhaztjYXNlIDY0NDQ6c3dpdGNoKE8obixPKG4sMTQpPT09NDU/MTg6MTEpKXtjYXNlIDEyMDpyZXR1cm4geihuLC8oLis6KShbXjtcXHMhXSspKDt8KFxccyspPyEuKyk/LyxcIiQxXCIrYSsoTyhuLDE0KT09PTQ1P1wiaW5saW5lLVwiOlwiXCIpK1wiYm94JDNcIitcIiQxXCIrYStcIiQyJDNcIitcIiQxXCIrZStcIiQyYm94JDNcIikrbjtjYXNlIDEwMDpyZXR1cm4geihuLFwiOlwiLFwiOlwiK2UpK259YnJlYWs7Y2FzZSA1NzE5OmNhc2UgMjY0NzpjYXNlIDIxMzU6Y2FzZSAzOTI3OmNhc2UgMjM5MTpyZXR1cm4geihuLFwic2Nyb2xsLVwiLFwic2Nyb2xsLXNuYXAtXCIpK259cmV0dXJuIG59ZnVuY3Rpb24gb2UoZSxyKXt2YXIgYT1cIlwiO3ZhciBuPVMoZSk7Zm9yKHZhciBjPTA7YzxuO2MrKylhKz1yKGVbY10sYyxlLHIpfHxcIlwiO3JldHVybiBhfWZ1bmN0aW9uIGxlKGUscixhLHQpe3N3aXRjaChlLnR5cGUpe2Nhc2UgJDppZihlLmNoaWxkcmVuLmxlbmd0aClicmVhaztjYXNlIGk6Y2FzZSBzOnJldHVybiBlLnJldHVybj1lLnJldHVybnx8ZS52YWx1ZTtjYXNlIG46cmV0dXJuXCJcIjtjYXNlIGg6cmV0dXJuIGUucmV0dXJuPWUudmFsdWUrXCJ7XCIrb2UoZS5jaGlsZHJlbix0KStcIn1cIjtjYXNlIGM6ZS52YWx1ZT1lLnByb3BzLmpvaW4oXCIsXCIpfXJldHVybiBNKGE9b2UoZS5jaGlsZHJlbix0KSk/ZS5yZXR1cm49ZS52YWx1ZStcIntcIithK1wifVwiOlwiXCJ9ZnVuY3Rpb24gdmUoZSl7dmFyIHI9UyhlKTtyZXR1cm4gZnVuY3Rpb24oYSxuLGMscyl7dmFyIHQ9XCJcIjtmb3IodmFyIHU9MDt1PHI7dSsrKXQrPWVbdV0oYSxuLGMscyl8fFwiXCI7cmV0dXJuIHR9fWZ1bmN0aW9uIHBlKGUpe3JldHVybiBmdW5jdGlvbihyKXtpZighci5yb290KWlmKHI9ci5yZXR1cm4pZShyKX19ZnVuY3Rpb24gaGUobix0LHUsaSl7aWYobi5sZW5ndGg+LTEpaWYoIW4ucmV0dXJuKXN3aXRjaChuLnR5cGUpe2Nhc2UgczpuLnJldHVybj1mZShuLnZhbHVlLG4ubGVuZ3RoLHUpO3JldHVybjtjYXNlIGg6cmV0dXJuIG9lKFtLKG4se3ZhbHVlOnoobi52YWx1ZSxcIkBcIixcIkBcIithKX0pXSxpKTtjYXNlIGM6aWYobi5sZW5ndGgpcmV0dXJuIEIobi5wcm9wcywoZnVuY3Rpb24oYyl7c3dpdGNoKGooYywvKDo6cGxhY1xcdyt8OnJlYWQtXFx3KykvKSl7Y2FzZVwiOnJlYWQtb25seVwiOmNhc2VcIjpyZWFkLXdyaXRlXCI6cmV0dXJuIG9lKFtLKG4se3Byb3BzOlt6KGMsLzoocmVhZC1cXHcrKS8sXCI6XCIrcitcIiQxXCIpXX0pXSxpKTtjYXNlXCI6OnBsYWNlaG9sZGVyXCI6cmV0dXJuIG9lKFtLKG4se3Byb3BzOlt6KGMsLzoocGxhY1xcdyspLyxcIjpcIithK1wiaW5wdXQtJDFcIildfSksSyhuLHtwcm9wczpbeihjLC86KHBsYWNcXHcrKS8sXCI6XCIrcitcIiQxXCIpXX0pLEsobix7cHJvcHM6W3ooYywvOihwbGFjXFx3KykvLGUrXCJpbnB1dC0kMVwiKV19KV0saSl9cmV0dXJuXCJcIn0pKX19ZnVuY3Rpb24gYmUoZSl7c3dpdGNoKGUudHlwZSl7Y2FzZSBjOmUucHJvcHM9ZS5wcm9wcy5tYXAoKGZ1bmN0aW9uKHIpe3JldHVybiBCKFkociksKGZ1bmN0aW9uKHIsYSxuKXtzd2l0Y2goTyhyLDApKXtjYXNlIDEyOnJldHVybiBBKHIsMSxNKHIpKTtjYXNlIDA6Y2FzZSA0MDpjYXNlIDQzOmNhc2UgNjI6Y2FzZSAxMjY6cmV0dXJuIHI7Y2FzZSA1ODppZihuWysrYV09PT1cImdsb2JhbFwiKW5bYV09XCJcIixuWysrYV09XCJcXGZcIitBKG5bYV0sYT0xLC0xKTtjYXNlIDMyOnJldHVybiBhPT09MT9cIlwiOnI7ZGVmYXVsdDpzd2l0Y2goYSl7Y2FzZSAwOmU9cjtyZXR1cm4gUyhuKT4xP1wiXCI6cjtjYXNlIGE9UyhuKS0xOmNhc2UgMjpyZXR1cm4gYT09PTI/citlK2U6citlO2RlZmF1bHQ6cmV0dXJuIHJ9fX0pKX0pKX19ZXhwb3J0e2YgYXMgQ0hBUlNFVCxuIGFzIENPTU1FTlQsdyBhcyBDT1VOVEVSX1NUWUxFLHMgYXMgREVDTEFSQVRJT04sdiBhcyBET0NVTUVOVCxiIGFzIEZPTlRfRkFDRSxkIGFzIEZPTlRfRkVBVFVSRV9WQUxVRVMsaSBhcyBJTVBPUlQsaCBhcyBLRVlGUkFNRVMsJCBhcyBMQVlFUix1IGFzIE1FRElBLHIgYXMgTU9aLGUgYXMgTVMscCBhcyBOQU1FU1BBQ0UsdCBhcyBQQUdFLGMgYXMgUlVMRVNFVCxsIGFzIFNVUFBPUlRTLG8gYXMgVklFV1BPUlQsYSBhcyBXRUJLSVQsZyBhcyBhYnMsViBhcyBhbGxvYyxxIGFzIGFwcGVuZCxtIGFzIGFzc2lnbixSIGFzIGNhcmV0LEwgYXMgY2hhcixIIGFzIGNoYXJhY3RlcixJIGFzIGNoYXJhY3RlcnMsTyBhcyBjaGFyYXQsRSBhcyBjb2x1bW4sQiBhcyBjb21iaW5lLHVlIGFzIGNvbW1lbnQsYWUgYXMgY29tbWVudGVyLGNlIGFzIGNvbXBpbGUsSyBhcyBjb3B5LFcgYXMgZGVhbGxvYyxpZSBhcyBkZWNsYXJhdGlvbixYIGFzIGRlbGltaXQscmUgYXMgZGVsaW1pdGVyLGVlIGFzIGVzY2FwaW5nLGsgYXMgZnJvbSx4IGFzIGhhc2gsbmUgYXMgaWRlbnRpZmllcixDIGFzIGluZGV4b2YsRiBhcyBsZW5ndGgsRCBhcyBsaW5lLGogYXMgbWF0Y2gsdmUgYXMgbWlkZGxld2FyZSxiZSBhcyBuYW1lc3BhY2UsUCBhcyBuZXh0LEogYXMgbm9kZSxzZSBhcyBwYXJzZSxRIGFzIHBlZWssRyBhcyBwb3NpdGlvbixmZSBhcyBwcmVmaXgsaGUgYXMgcHJlZml4ZXIsTiBhcyBwcmV2LHogYXMgcmVwbGFjZSx0ZSBhcyBydWxlc2V0LHBlIGFzIHJ1bGVzaGVldCxvZSBhcyBzZXJpYWxpemUsUyBhcyBzaXplb2YsVCBhcyBzbGljZSxsZSBhcyBzdHJpbmdpZnksTSBhcyBzdHJsZW4sQSBhcyBzdWJzdHIsVSBhcyB0b2tlbixZIGFzIHRva2VuaXplLF8gYXMgdG9rZW5pemVyLHkgYXMgdHJpbSxaIGFzIHdoaXRlc3BhY2V9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGlzLm1qcy5tYXBcbiIsImltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCc7XG5pbXBvcnQgeyBkZWFsbG9jLCBhbGxvYywgbmV4dCwgdG9rZW4sIGZyb20sIHBlZWssIGRlbGltaXQsIHNsaWNlLCBwb3NpdGlvbiwgUlVMRVNFVCwgY29tYmluZSwgbWF0Y2gsIHNlcmlhbGl6ZSwgY29weSwgcmVwbGFjZSwgV0VCS0lULCBNT1osIE1TLCBLRVlGUkFNRVMsIERFQ0xBUkFUSU9OLCBoYXNoLCBjaGFyYXQsIHN0cmxlbiwgaW5kZXhvZiwgc3RyaW5naWZ5LCBDT01NRU5ULCBydWxlc2hlZXQsIG1pZGRsZXdhcmUsIGNvbXBpbGUgfSBmcm9tICdzdHlsaXMnO1xuaW1wb3J0ICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0ICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyA9IGZ1bmN0aW9uIGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyhiZWdpbiwgcG9pbnRzLCBpbmRleCkge1xuICB2YXIgcHJldmlvdXMgPSAwO1xuICB2YXIgY2hhcmFjdGVyID0gMDtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHByZXZpb3VzID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHBlZWsoKTsgLy8gJlxcZlxuXG4gICAgaWYgKHByZXZpb3VzID09PSAzOCAmJiBjaGFyYWN0ZXIgPT09IDEyKSB7XG4gICAgICBwb2ludHNbaW5kZXhdID0gMTtcbiAgICB9XG5cbiAgICBpZiAodG9rZW4oY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbmV4dCgpO1xuICB9XG5cbiAgcmV0dXJuIHNsaWNlKGJlZ2luLCBwb3NpdGlvbik7XG59O1xuXG52YXIgdG9SdWxlcyA9IGZ1bmN0aW9uIHRvUnVsZXMocGFyc2VkLCBwb2ludHMpIHtcbiAgLy8gcHJldGVuZCB3ZSd2ZSBzdGFydGVkIHdpdGggYSBjb21tYVxuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIGNoYXJhY3RlciA9IDQ0O1xuXG4gIGRvIHtcbiAgICBzd2l0Y2ggKHRva2VuKGNoYXJhY3RlcikpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgLy8gJlxcZlxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSAzOCAmJiBwZWVrKCkgPT09IDEyKSB7XG4gICAgICAgICAgLy8gdGhpcyBpcyBub3QgMTAwJSBjb3JyZWN0LCB3ZSBkb24ndCBhY2NvdW50IGZvciBsaXRlcmFsIHNlcXVlbmNlcyBoZXJlIC0gbGlrZSBmb3IgZXhhbXBsZSBxdW90ZWQgc3RyaW5nc1xuICAgICAgICAgIC8vIHN0eWxpcyBpbnNlcnRzIFxcZiBhZnRlciAmIHRvIGtub3cgd2hlbiAmIHdoZXJlIGl0IHNob3VsZCByZXBsYWNlIHRoaXMgc2VxdWVuY2Ugd2l0aCB0aGUgY29udGV4dCBzZWxlY3RvclxuICAgICAgICAgIC8vIGFuZCB3aGVuIGl0IHNob3VsZCBqdXN0IGNvbmNhdGVuYXRlIHRoZSBvdXRlciBhbmQgaW5uZXIgc2VsZWN0b3JzXG4gICAgICAgICAgLy8gaXQncyB2ZXJ5IHVubGlrZWx5IGZvciB0aGlzIHNlcXVlbmNlIHRvIGFjdHVhbGx5IGFwcGVhciBpbiBhIGRpZmZlcmVudCBjb250ZXh0LCBzbyB3ZSBqdXN0IGxldmVyYWdlIHRoaXMgZmFjdCBoZXJlXG4gICAgICAgICAgcG9pbnRzW2luZGV4XSA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyhwb3NpdGlvbiAtIDEsIHBvaW50cywgaW5kZXgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGRlbGltaXQoY2hhcmFjdGVyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNDpcbiAgICAgICAgLy8gY29tbWFcbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gNDQpIHtcbiAgICAgICAgICAvLyBjb2xvblxuICAgICAgICAgIHBhcnNlZFsrK2luZGV4XSA9IHBlZWsoKSA9PT0gNTggPyAnJlxcZicgOiAnJztcbiAgICAgICAgICBwb2ludHNbaW5kZXhdID0gcGFyc2VkW2luZGV4XS5sZW5ndGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgLy8gZmFsbHRocm91Z2hcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBmcm9tKGNoYXJhY3Rlcik7XG4gICAgfVxuICB9IHdoaWxlIChjaGFyYWN0ZXIgPSBuZXh0KCkpO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG52YXIgZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcyh2YWx1ZSwgcG9pbnRzKSB7XG4gIHJldHVybiBkZWFsbG9jKHRvUnVsZXMoYWxsb2ModmFsdWUpLCBwb2ludHMpKTtcbn07IC8vIFdlYWtTZXQgd291bGQgYmUgbW9yZSBhcHByb3ByaWF0ZSwgYnV0IG9ubHkgV2Vha01hcCBpcyBzdXBwb3J0ZWQgaW4gSUUxMVxuXG5cbnZhciBmaXhlZEVsZW1lbnRzID0gLyogI19fUFVSRV9fICovbmV3IFdlYWtNYXAoKTtcbnZhciBjb21wYXQgPSBmdW5jdGlvbiBjb21wYXQoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC50eXBlICE9PSAncnVsZScgfHwgIWVsZW1lbnQucGFyZW50IHx8IC8vIHBvc2l0aXZlIC5sZW5ndGggaW5kaWNhdGVzIHRoYXQgdGhpcyBydWxlIGNvbnRhaW5zIHBzZXVkb1xuICAvLyBuZWdhdGl2ZSAubGVuZ3RoIGluZGljYXRlcyB0aGF0IHRoaXMgcnVsZSBoYXMgYmVlbiBhbHJlYWR5IHByZWZpeGVkXG4gIGVsZW1lbnQubGVuZ3RoIDwgMSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsdWUsXG4gICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudDtcbiAgdmFyIGlzSW1wbGljaXRSdWxlID0gZWxlbWVudC5jb2x1bW4gPT09IHBhcmVudC5jb2x1bW4gJiYgZWxlbWVudC5saW5lID09PSBwYXJlbnQubGluZTtcblxuICB3aGlsZSAocGFyZW50LnR5cGUgIT09ICdydWxlJykge1xuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgaWYgKCFwYXJlbnQpIHJldHVybjtcbiAgfSAvLyBzaG9ydC1jaXJjdWl0IGZvciB0aGUgc2ltcGxlc3QgY2FzZVxuXG5cbiAgaWYgKGVsZW1lbnQucHJvcHMubGVuZ3RoID09PSAxICYmIHZhbHVlLmNoYXJDb2RlQXQoMCkgIT09IDU4XG4gIC8qIGNvbG9uICovXG4gICYmICFmaXhlZEVsZW1lbnRzLmdldChwYXJlbnQpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIGlmIHRoaXMgaXMgYW4gaW1wbGljaXRseSBpbnNlcnRlZCBydWxlICh0aGUgb25lIGVhZ2VybHkgaW5zZXJ0ZWQgYXQgdGhlIGVhY2ggbmV3IG5lc3RlZCBsZXZlbClcbiAgLy8gdGhlbiB0aGUgcHJvcHMgaGFzIGFscmVhZHkgYmVlbiBtYW5pcHVsYXRlZCBiZWZvcmVoYW5kIGFzIHRoZXkgdGhhdCBhcnJheSBpcyBzaGFyZWQgYmV0d2VlbiBpdCBhbmQgaXRzIFwicnVsZSBwYXJlbnRcIlxuXG5cbiAgaWYgKGlzSW1wbGljaXRSdWxlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZml4ZWRFbGVtZW50cy5zZXQoZWxlbWVudCwgdHJ1ZSk7XG4gIHZhciBwb2ludHMgPSBbXTtcbiAgdmFyIHJ1bGVzID0gZ2V0UnVsZXModmFsdWUsIHBvaW50cyk7XG4gIHZhciBwYXJlbnRSdWxlcyA9IHBhcmVudC5wcm9wcztcblxuICBmb3IgKHZhciBpID0gMCwgayA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcGFyZW50UnVsZXMubGVuZ3RoOyBqKyssIGsrKykge1xuICAgICAgZWxlbWVudC5wcm9wc1trXSA9IHBvaW50c1tpXSA/IHJ1bGVzW2ldLnJlcGxhY2UoLyZcXGYvZywgcGFyZW50UnVsZXNbal0pIDogcGFyZW50UnVsZXNbal0gKyBcIiBcIiArIHJ1bGVzW2ldO1xuICAgIH1cbiAgfVxufTtcbnZhciByZW1vdmVMYWJlbCA9IGZ1bmN0aW9uIHJlbW92ZUxhYmVsKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQudHlwZSA9PT0gJ2RlY2wnKSB7XG4gICAgdmFyIHZhbHVlID0gZWxlbWVudC52YWx1ZTtcblxuICAgIGlmICggLy8gY2hhcmNvZGUgZm9yIGxcbiAgICB2YWx1ZS5jaGFyQ29kZUF0KDApID09PSAxMDggJiYgLy8gY2hhcmNvZGUgZm9yIGJcbiAgICB2YWx1ZS5jaGFyQ29kZUF0KDIpID09PSA5OCkge1xuICAgICAgLy8gdGhpcyBpZ25vcmVzIGxhYmVsXG4gICAgICBlbGVtZW50W1wicmV0dXJuXCJdID0gJyc7XG4gICAgICBlbGVtZW50LnZhbHVlID0gJyc7XG4gICAgfVxuICB9XG59O1xudmFyIGlnbm9yZUZsYWcgPSAnZW1vdGlvbi1kaXNhYmxlLXNlcnZlci1yZW5kZXJpbmctdW5zYWZlLXNlbGVjdG9yLXdhcm5pbmctcGxlYXNlLWRvLW5vdC11c2UtdGhpcy10aGUtd2FybmluZy1leGlzdHMtZm9yLWEtcmVhc29uJztcblxudmFyIGlzSWdub3JpbmdDb21tZW50ID0gZnVuY3Rpb24gaXNJZ25vcmluZ0NvbW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC50eXBlID09PSAnY29tbScgJiYgZWxlbWVudC5jaGlsZHJlbi5pbmRleE9mKGlnbm9yZUZsYWcpID4gLTE7XG59O1xuXG52YXIgY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0gPSBmdW5jdGlvbiBjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybShjYWNoZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbikge1xuICAgIGlmIChlbGVtZW50LnR5cGUgIT09ICdydWxlJyB8fCBjYWNoZS5jb21wYXQpIHJldHVybjtcbiAgICB2YXIgdW5zYWZlUHNldWRvQ2xhc3NlcyA9IGVsZW1lbnQudmFsdWUubWF0Y2goLyg6Zmlyc3R8Om50aHw6bnRoLWxhc3QpLWNoaWxkL2cpO1xuXG4gICAgaWYgKHVuc2FmZVBzZXVkb0NsYXNzZXMpIHtcbiAgICAgIHZhciBpc05lc3RlZCA9ICEhZWxlbWVudC5wYXJlbnQ7IC8vIGluIG5lc3RlZCBydWxlcyBjb21tZW50cyBiZWNvbWUgY2hpbGRyZW4gb2YgdGhlIFwiYXV0by1pbnNlcnRlZFwiIHJ1bGUgYW5kIHRoYXQncyBhbHdheXMgdGhlIGBlbGVtZW50LnBhcmVudGBcbiAgICAgIC8vXG4gICAgICAvLyBjb25zaWRlcmluZyB0aGlzIGlucHV0OlxuICAgICAgLy8gLmEge1xuICAgICAgLy8gICAuYiAvKiBjb21tICovIHt9XG4gICAgICAvLyAgIGNvbG9yOiBob3RwaW5rO1xuICAgICAgLy8gfVxuICAgICAgLy8gd2UgZ2V0IG91dHB1dCBjb3JyZXNwb25kaW5nIHRvIHRoaXM6XG4gICAgICAvLyAuYSB7XG4gICAgICAvLyAgICYge1xuICAgICAgLy8gICAgIC8qIGNvbW0gKi9cbiAgICAgIC8vICAgICBjb2xvcjogaG90cGluaztcbiAgICAgIC8vICAgfVxuICAgICAgLy8gICAuYiB7fVxuICAgICAgLy8gfVxuXG4gICAgICB2YXIgY29tbWVudENvbnRhaW5lciA9IGlzTmVzdGVkID8gZWxlbWVudC5wYXJlbnQuY2hpbGRyZW4gOiAvLyBnbG9iYWwgcnVsZSBhdCB0aGUgcm9vdCBsZXZlbFxuICAgICAgY2hpbGRyZW47XG5cbiAgICAgIGZvciAodmFyIGkgPSBjb21tZW50Q29udGFpbmVyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhciBub2RlID0gY29tbWVudENvbnRhaW5lcltpXTtcblxuICAgICAgICBpZiAobm9kZS5saW5lIDwgZWxlbWVudC5saW5lKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gLy8gaXQgaXMgcXVpdGUgd2VpcmQgYnV0IGNvbW1lbnRzIGFyZSAqdXN1YWxseSogcHV0IGF0IGBjb2x1bW46IGVsZW1lbnQuY29sdW1uIC0gMWBcbiAgICAgICAgLy8gc28gd2Ugc2VlayAqZnJvbSB0aGUgZW5kKiBmb3IgdGhlIG5vZGUgdGhhdCBpcyBlYXJsaWVyIHRoYW4gdGhlIHJ1bGUncyBgZWxlbWVudGAgYW5kIGNoZWNrIHRoYXRcbiAgICAgICAgLy8gdGhpcyB3aWxsIGFsc28gbWF0Y2ggaW5wdXRzIGxpa2UgdGhpczpcbiAgICAgICAgLy8gLmEge1xuICAgICAgICAvLyAgIC8qIGNvbW0gKi9cbiAgICAgICAgLy8gICAuYiB7fVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGJ1dCB0aGF0IGlzIGZpbmVcbiAgICAgICAgLy9cbiAgICAgICAgLy8gaXQgd291bGQgYmUgdGhlIGVhc2llc3QgdG8gY2hhbmdlIHRoZSBwbGFjZW1lbnQgb2YgdGhlIGNvbW1lbnQgdG8gYmUgdGhlIGZpcnN0IGNoaWxkIG9mIHRoZSBydWxlOlxuICAgICAgICAvLyAuYSB7XG4gICAgICAgIC8vICAgLmIgeyAvKiBjb21tICovIH1cbiAgICAgICAgLy8gfVxuICAgICAgICAvLyB3aXRoIHN1Y2ggaW5wdXRzIHdlIHdvdWxkbid0IGhhdmUgdG8gc2VhcmNoIGZvciB0aGUgY29tbWVudCBhdCBhbGxcbiAgICAgICAgLy8gVE9ETzogY29uc2lkZXIgY2hhbmdpbmcgdGhpcyBjb21tZW50IHBsYWNlbWVudCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uXG5cblxuICAgICAgICBpZiAobm9kZS5jb2x1bW4gPCBlbGVtZW50LmNvbHVtbikge1xuICAgICAgICAgIGlmIChpc0lnbm9yaW5nQ29tbWVudChub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHVuc2FmZVBzZXVkb0NsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAodW5zYWZlUHNldWRvQ2xhc3MpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZSBwc2V1ZG8gY2xhc3MgXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3MgKyBcIlxcXCIgaXMgcG90ZW50aWFsbHkgdW5zYWZlIHdoZW4gZG9pbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLiBUcnkgY2hhbmdpbmcgaXQgdG8gXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3Muc3BsaXQoJy1jaGlsZCcpWzBdICsgXCItb2YtdHlwZVxcXCIuXCIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGlzSW1wb3J0UnVsZSA9IGZ1bmN0aW9uIGlzSW1wb3J0UnVsZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnR5cGUuY2hhckNvZGVBdCgxKSA9PT0gMTA1ICYmIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDApID09PSA2NDtcbn07XG5cbnZhciBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMgPSBmdW5jdGlvbiBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKCFpc0ltcG9ydFJ1bGUoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59OyAvLyB1c2UgdGhpcyB0byByZW1vdmUgaW5jb3JyZWN0IGVsZW1lbnRzIGZyb20gZnVydGhlciBwcm9jZXNzaW5nXG4vLyBzbyB0aGV5IGRvbid0IGdldCBoYW5kZWQgdG8gdGhlIGBzaGVldGAgKG9yIGFueXRoaW5nIGVsc2UpXG4vLyBhcyB0aGF0IGNvdWxkIHBvdGVudGlhbGx5IGxlYWQgdG8gYWRkaXRpb25hbCBsb2dzIHdoaWNoIGluIHR1cm4gY291bGQgYmUgb3ZlcmhlbG1pbmcgdG8gdGhlIHVzZXJcblxuXG52YXIgbnVsbGlmeUVsZW1lbnQgPSBmdW5jdGlvbiBudWxsaWZ5RWxlbWVudChlbGVtZW50KSB7XG4gIGVsZW1lbnQudHlwZSA9ICcnO1xuICBlbGVtZW50LnZhbHVlID0gJyc7XG4gIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgZWxlbWVudC5jaGlsZHJlbiA9ICcnO1xuICBlbGVtZW50LnByb3BzID0gJyc7XG59O1xuXG52YXIgaW5jb3JyZWN0SW1wb3J0QWxhcm0gPSBmdW5jdGlvbiBpbmNvcnJlY3RJbXBvcnRBbGFybShlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4pIHtcbiAgaWYgKCFpc0ltcG9ydFJ1bGUoZWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWxlbWVudC5wYXJlbnQpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiYEBpbXBvcnRgIHJ1bGVzIGNhbid0IGJlIG5lc3RlZCBpbnNpZGUgb3RoZXIgcnVsZXMuIFBsZWFzZSBtb3ZlIGl0IHRvIHRoZSB0b3AgbGV2ZWwgYW5kIHB1dCBpdCBiZWZvcmUgcmVndWxhciBydWxlcy4gS2VlcCBpbiBtaW5kIHRoYXQgdGhleSBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiBnbG9iYWwgc3R5bGVzLlwiKTtcbiAgICBudWxsaWZ5RWxlbWVudChlbGVtZW50KTtcbiAgfSBlbHNlIGlmIChpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgYWZ0ZXIgb3RoZXIgcnVsZXMuIFBsZWFzZSBwdXQgeW91ciBgQGltcG9ydGAgcnVsZXMgYmVmb3JlIHlvdXIgb3RoZXIgcnVsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuXG5mdW5jdGlvbiBwcmVmaXgodmFsdWUsIGxlbmd0aCkge1xuICBzd2l0Y2ggKGhhc2godmFsdWUsIGxlbmd0aCkpIHtcbiAgICAvLyBjb2xvci1hZGp1c3RcbiAgICBjYXNlIDUxMDM6XG4gICAgICByZXR1cm4gV0VCS0lUICsgJ3ByaW50LScgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGFuaW1hdGlvbiwgYW5pbWF0aW9uLShkZWxheXxkaXJlY3Rpb258ZHVyYXRpb258ZmlsbC1tb2RlfGl0ZXJhdGlvbi1jb3VudHxuYW1lfHBsYXktc3RhdGV8dGltaW5nLWZ1bmN0aW9uKVxuXG4gICAgY2FzZSA1NzM3OlxuICAgIGNhc2UgNDIwMTpcbiAgICBjYXNlIDMxNzc6XG4gICAgY2FzZSAzNDMzOlxuICAgIGNhc2UgMTY0MTpcbiAgICBjYXNlIDQ0NTc6XG4gICAgY2FzZSAyOTIxOiAvLyB0ZXh0LWRlY29yYXRpb24sIGZpbHRlciwgY2xpcC1wYXRoLCBiYWNrZmFjZS12aXNpYmlsaXR5LCBjb2x1bW4sIGJveC1kZWNvcmF0aW9uLWJyZWFrXG5cbiAgICBjYXNlIDU1NzI6XG4gICAgY2FzZSA2MzU2OlxuICAgIGNhc2UgNTg0NDpcbiAgICBjYXNlIDMxOTE6XG4gICAgY2FzZSA2NjQ1OlxuICAgIGNhc2UgMzAwNTogLy8gbWFzaywgbWFzay1pbWFnZSwgbWFzay0obW9kZXxjbGlwfHNpemUpLCBtYXNrLShyZXBlYXR8b3JpZ2luKSwgbWFzay1wb3NpdGlvbiwgbWFzay1jb21wb3NpdGUsXG5cbiAgICBjYXNlIDYzOTE6XG4gICAgY2FzZSA1ODc5OlxuICAgIGNhc2UgNTYyMzpcbiAgICBjYXNlIDYxMzU6XG4gICAgY2FzZSA0NTk5OlxuICAgIGNhc2UgNDg1NTogLy8gYmFja2dyb3VuZC1jbGlwLCBjb2x1bW5zLCBjb2x1bW4tKGNvdW50fGZpbGx8Z2FwfHJ1bGV8cnVsZS1jb2xvcnxydWxlLXN0eWxlfHJ1bGUtd2lkdGh8c3Bhbnx3aWR0aClcblxuICAgIGNhc2UgNDIxNTpcbiAgICBjYXNlIDYzODk6XG4gICAgY2FzZSA1MTA5OlxuICAgIGNhc2UgNTM2NTpcbiAgICBjYXNlIDU2MjE6XG4gICAgY2FzZSAzODI5OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYXBwZWFyYW5jZSwgdXNlci1zZWxlY3QsIHRyYW5zZm9ybSwgaHlwaGVucywgdGV4dC1zaXplLWFkanVzdFxuXG4gICAgY2FzZSA1MzQ5OlxuICAgIGNhc2UgNDI0NjpcbiAgICBjYXNlIDQ4MTA6XG4gICAgY2FzZSA2OTY4OlxuICAgIGNhc2UgMjc1NjpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1PWiArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGZsZXgsIGZsZXgtZGlyZWN0aW9uXG5cbiAgICBjYXNlIDY4Mjg6XG4gICAgY2FzZSA0MjY4OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIG9yZGVyXG5cbiAgICBjYXNlIDYxNjU6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LScgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGFsaWduLWl0ZW1zXG5cbiAgICBjYXNlIDUxODc6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyByZXBsYWNlKHZhbHVlLCAvKFxcdyspLisoOlteXSspLywgV0VCS0lUICsgJ2JveC0kMSQyJyArIE1TICsgJ2ZsZXgtJDEkMicpICsgdmFsdWU7XG4gICAgLy8gYWxpZ24tc2VsZlxuXG4gICAgY2FzZSA1NDQzOlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC1pdGVtLScgKyByZXBsYWNlKHZhbHVlLCAvZmxleC18LXNlbGYvLCAnJykgKyB2YWx1ZTtcbiAgICAvLyBhbGlnbi1jb250ZW50XG5cbiAgICBjYXNlIDQ2NzU6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWxpbmUtcGFjaycgKyByZXBsYWNlKHZhbHVlLCAvYWxpZ24tY29udGVudHxmbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtc2hyaW5rXG5cbiAgICBjYXNlIDU1NDg6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtYmFzaXNcblxuICAgIGNhc2UgNTI5MjpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyB2YWx1ZTtcbiAgICAvLyBmbGV4LWdyb3dcblxuICAgIGNhc2UgNjA2MDpcbiAgICAgIHJldHVybiBXRUJLSVQgKyAnYm94LScgKyByZXBsYWNlKHZhbHVlLCAnLWdyb3cnLCAnJykgKyBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2dyb3cnLCAncG9zaXRpdmUnKSArIHZhbHVlO1xuICAgIC8vIHRyYW5zaXRpb25cblxuICAgIGNhc2UgNDU1NDpcbiAgICAgIHJldHVybiBXRUJLSVQgKyByZXBsYWNlKHZhbHVlLCAvKFteLV0pKHRyYW5zZm9ybSkvZywgJyQxJyArIFdFQktJVCArICckMicpICsgdmFsdWU7XG4gICAgLy8gY3Vyc29yXG5cbiAgICBjYXNlIDYxODc6XG4gICAgICByZXR1cm4gcmVwbGFjZShyZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oem9vbS18Z3JhYikvLCBXRUJLSVQgKyAnJDEnKSwgLyhpbWFnZS1zZXQpLywgV0VCS0lUICsgJyQxJyksIHZhbHVlLCAnJykgKyB2YWx1ZTtcbiAgICAvLyBiYWNrZ3JvdW5kLCBiYWNrZ3JvdW5kLWltYWdlXG5cbiAgICBjYXNlIDU0OTU6XG4gICAgY2FzZSAzOTU5OlxuICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oaW1hZ2Utc2V0XFwoW15dKikvLCBXRUJLSVQgKyAnJDEnICsgJyRgJDEnKTtcbiAgICAvLyBqdXN0aWZ5LWNvbnRlbnRcblxuICAgIGNhc2UgNDk2ODpcbiAgICAgIHJldHVybiByZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oLis6KShmbGV4LSk/KC4qKS8sIFdFQktJVCArICdib3gtcGFjazokMycgKyBNUyArICdmbGV4LXBhY2s6JDMnKSwgL3MuKy1iW147XSsvLCAnanVzdGlmeScpICsgV0VCS0lUICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyAobWFyZ2lufHBhZGRpbmcpLWlubGluZS0oc3RhcnR8ZW5kKVxuXG4gICAgY2FzZSA0MDk1OlxuICAgIGNhc2UgMzU4MzpcbiAgICBjYXNlIDQwNjg6XG4gICAgY2FzZSAyNTMyOlxuICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLispLWlubGluZSguKykvLCBXRUJLSVQgKyAnJDEkMicpICsgdmFsdWU7XG4gICAgLy8gKG1pbnxtYXgpPyh3aWR0aHxoZWlnaHR8aW5saW5lLXNpemV8YmxvY2stc2l6ZSlcblxuICAgIGNhc2UgODExNjpcbiAgICBjYXNlIDcwNTk6XG4gICAgY2FzZSA1NzUzOlxuICAgIGNhc2UgNTUzNTpcbiAgICBjYXNlIDU0NDU6XG4gICAgY2FzZSA1NzAxOlxuICAgIGNhc2UgNDkzMzpcbiAgICBjYXNlIDQ2Nzc6XG4gICAgY2FzZSA1NTMzOlxuICAgIGNhc2UgNTc4OTpcbiAgICBjYXNlIDUwMjE6XG4gICAgY2FzZSA0NzY1OlxuICAgICAgLy8gc3RyZXRjaCwgbWF4LWNvbnRlbnQsIG1pbi1jb250ZW50LCBmaWxsLWF2YWlsYWJsZVxuICAgICAgaWYgKHN0cmxlbih2YWx1ZSkgLSAxIC0gbGVuZ3RoID4gNikgc3dpdGNoIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDEpKSB7XG4gICAgICAgIC8vIChtKWF4LWNvbnRlbnQsIChtKWluLWNvbnRlbnRcbiAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgLy8gLVxuICAgICAgICAgIGlmIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDQpICE9PSA0NSkgYnJlYWs7XG4gICAgICAgIC8vIChmKWlsbC1hdmFpbGFibGUsIChmKWl0LWNvbnRlbnRcblxuICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKC4rKS0oW15dKykvLCAnJDEnICsgV0VCS0lUICsgJyQyLSQzJyArICckMScgKyBNT1ogKyAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAzKSA9PSAxMDggPyAnJDMnIDogJyQyLSQzJykpICsgdmFsdWU7XG4gICAgICAgIC8vIChzKXRyZXRjaFxuXG4gICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgIHJldHVybiB+aW5kZXhvZih2YWx1ZSwgJ3N0cmV0Y2gnKSA/IHByZWZpeChyZXBsYWNlKHZhbHVlLCAnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBsZW5ndGgpICsgdmFsdWUgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIC8vIHBvc2l0aW9uOiBzdGlja3lcblxuICAgIGNhc2UgNDk0OTpcbiAgICAgIC8vIChzKXRpY2t5P1xuICAgICAgaWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkgIT09IDExNSkgYnJlYWs7XG4gICAgLy8gZGlzcGxheTogKGZsZXh8aW5saW5lLWZsZXgpXG5cbiAgICBjYXNlIDY0NDQ6XG4gICAgICBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgc3RybGVuKHZhbHVlKSAtIDMgLSAofmluZGV4b2YodmFsdWUsICchaW1wb3J0YW50JykgJiYgMTApKSkge1xuICAgICAgICAvLyBzdGljKGspeVxuICAgICAgICBjYXNlIDEwNzpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgJzonLCAnOicgKyBXRUJLSVQpICsgdmFsdWU7XG4gICAgICAgIC8vIChpbmxpbmUtKT9mbChlKXhcblxuICAgICAgICBjYXNlIDEwMTpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKFteOyFdKykoO3whLispPy8sICckMScgKyBXRUJLSVQgKyAoY2hhcmF0KHZhbHVlLCAxNCkgPT09IDQ1ID8gJ2lubGluZS0nIDogJycpICsgJ2JveCQzJyArICckMScgKyBXRUJLSVQgKyAnJDIkMycgKyAnJDEnICsgTVMgKyAnJDJib3gkMycpICsgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIC8vIHdyaXRpbmctbW9kZVxuXG4gICAgY2FzZSA1OTM2OlxuICAgICAgc3dpdGNoIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDExKSkge1xuICAgICAgICAvLyB2ZXJ0aWNhbC1sKHIpXG4gICAgICAgIGNhc2UgMTE0OlxuICAgICAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgL1tzdmhdXFx3Ky1bdGJscl17Mn0vLCAndGInKSArIHZhbHVlO1xuICAgICAgICAvLyB2ZXJ0aWNhbC1yKGwpXG5cbiAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0Yi1ybCcpICsgdmFsdWU7XG4gICAgICAgIC8vIGhvcml6b250YWwoLSl0YlxuXG4gICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICdscicpICsgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgdmFsdWUgKyB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIHByZWZpeGVyID0gZnVuY3Rpb24gcHJlZml4ZXIoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuICBpZiAoZWxlbWVudC5sZW5ndGggPiAtMSkgaWYgKCFlbGVtZW50W1wicmV0dXJuXCJdKSBzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuICAgIGNhc2UgREVDTEFSQVRJT046XG4gICAgICBlbGVtZW50W1wicmV0dXJuXCJdID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBLRVlGUkFNRVM6XG4gICAgICByZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgdmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpXG4gICAgICB9KV0sIGNhbGxiYWNrKTtcblxuICAgIGNhc2UgUlVMRVNFVDpcbiAgICAgIGlmIChlbGVtZW50Lmxlbmd0aCkgcmV0dXJuIGNvbWJpbmUoZWxlbWVudC5wcm9wcywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHN3aXRjaCAobWF0Y2godmFsdWUsIC8oOjpwbGFjXFx3K3w6cmVhZC1cXHcrKS8pKSB7XG4gICAgICAgICAgLy8gOnJlYWQtKG9ubHl8d3JpdGUpXG4gICAgICAgICAgY2FzZSAnOnJlYWQtb25seSc6XG4gICAgICAgICAgY2FzZSAnOnJlYWQtd3JpdGUnOlxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocmVhZC1cXHcrKS8sICc6JyArIE1PWiArICckMScpXVxuICAgICAgICAgICAgfSldLCBjYWxsYmFjayk7XG4gICAgICAgICAgLy8gOnBsYWNlaG9sZGVyXG5cbiAgICAgICAgICBjYXNlICc6OnBsYWNlaG9sZGVyJzpcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIFdFQktJVCArICdpbnB1dC0kMScpXVxuICAgICAgICAgICAgfSksIGNvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIE1PWiArICckMScpXVxuICAgICAgICAgICAgfSksIGNvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sIE1TICsgJ2lucHV0LSQxJyldXG4gICAgICAgICAgICB9KV0sIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFN0eWxpc1BsdWdpbnMgPSBbcHJlZml4ZXJdO1xuXG52YXIgY3JlYXRlQ2FjaGUgPSBmdW5jdGlvbiBjcmVhdGVDYWNoZShvcHRpb25zKSB7XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAha2V5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGhhdmUgdG8gY29uZmlndXJlIGBrZXlgIGZvciB5b3VyIGNhY2hlLiBQbGVhc2UgbWFrZSBzdXJlIGl0J3MgdW5pcXVlIChhbmQgbm90IGVxdWFsIHRvICdjc3MnKSBhcyBpdCdzIHVzZWQgZm9yIGxpbmtpbmcgc3R5bGVzIHRvIHlvdXIgY2FjaGUuXFxuXCIgKyBcIklmIG11bHRpcGxlIGNhY2hlcyBzaGFyZSB0aGUgc2FtZSBrZXkgdGhleSBtaWdodCBcXFwiZmlnaHRcXFwiIGZvciBlYWNoIG90aGVyJ3Mgc3R5bGUgZWxlbWVudHMuXCIpO1xuICB9XG5cbiAgaWYgKGtleSA9PT0gJ2NzcycpIHtcbiAgICB2YXIgc3NyU3R5bGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW2RhdGEtZW1vdGlvbl06bm90KFtkYXRhLXNdKVwiKTsgLy8gZ2V0IFNTUmVkIHN0eWxlcyBvdXQgb2YgdGhlIHdheSBvZiBSZWFjdCdzIGh5ZHJhdGlvblxuICAgIC8vIGRvY3VtZW50LmhlYWQgaXMgYSBzYWZlIHBsYWNlIHRvIG1vdmUgdGhlbSB0byh0aG91Z2ggbm90ZSBkb2N1bWVudC5oZWFkIGlzIG5vdCBuZWNlc3NhcmlseSB0aGUgbGFzdCBwbGFjZSB0aGV5IHdpbGwgYmUpXG4gICAgLy8gbm90ZSB0aGlzIHZlcnkgdmVyeSBpbnRlbnRpb25hbGx5IHRhcmdldHMgYWxsIHN0eWxlIGVsZW1lbnRzIHJlZ2FyZGxlc3Mgb2YgdGhlIGtleSB0byBlbnN1cmVcbiAgICAvLyB0aGF0IGNyZWF0aW5nIGEgY2FjaGUgd29ya3MgaW5zaWRlIG9mIHJlbmRlciBvZiBhIFJlYWN0IGNvbXBvbmVudFxuXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChzc3JTdHlsZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAvLyB3ZSB3YW50IHRvIG9ubHkgbW92ZSBlbGVtZW50cyB3aGljaCBoYXZlIGEgc3BhY2UgaW4gdGhlIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgIC8vIGJlY2F1c2UgdGhhdCBpbmRpY2F0ZXMgdGhhdCBpdCBpcyBhbiBFbW90aW9uIDExIHNlcnZlci1zaWRlIHJlbmRlcmVkIHN0eWxlIGVsZW1lbnRzXG4gICAgICAvLyB3aGlsZSB3ZSB3aWxsIGFscmVhZHkgaWdub3JlIEVtb3Rpb24gMTEgY2xpZW50LXNpZGUgaW5zZXJ0ZWQgc3R5bGVzIGJlY2F1c2Ugb2YgdGhlIDpub3QoW2RhdGEtc10pIHBhcnQgaW4gdGhlIHNlbGVjdG9yXG4gICAgICAvLyBFbW90aW9uIDEwIGNsaWVudC1zaWRlIGluc2VydGVkIHN0eWxlcyBkaWQgbm90IGhhdmUgZGF0YS1zIChidXQgaW1wb3J0YW50bHkgZGlkIG5vdCBoYXZlIGEgc3BhY2UgaW4gdGhlaXIgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZXMpXG4gICAgICAvLyBzbyBjaGVja2luZyBmb3IgdGhlIHNwYWNlIGVuc3VyZXMgdGhhdCBsb2FkaW5nIEVtb3Rpb24gMTEgYWZ0ZXIgRW1vdGlvbiAxMCBoYXMgaW5zZXJ0ZWQgc29tZSBzdHlsZXNcbiAgICAgIC8vIHdpbGwgbm90IHJlc3VsdCBpbiB0aGUgRW1vdGlvbiAxMCBzdHlsZXMgYmVpbmcgZGVzdHJveWVkXG4gICAgICB2YXIgZGF0YUVtb3Rpb25BdHRyaWJ1dGUgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJyk7XG5cbiAgICAgIGlmIChkYXRhRW1vdGlvbkF0dHJpYnV0ZS5pbmRleE9mKCcgJykgPT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1zJywgJycpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHN0eWxpc1BsdWdpbnMgPSBvcHRpb25zLnN0eWxpc1BsdWdpbnMgfHwgZGVmYXVsdFN0eWxpc1BsdWdpbnM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgaWYgKC9bXmEtei1dLy50ZXN0KGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVtb3Rpb24ga2V5IG11c3Qgb25seSBjb250YWluIGxvd2VyIGNhc2UgYWxwaGFiZXRpY2FsIGNoYXJhY3RlcnMgYW5kIC0gYnV0IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgcGFzc2VkXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbnNlcnRlZCA9IHt9O1xuICB2YXIgY29udGFpbmVyO1xuICB2YXIgbm9kZXNUb0h5ZHJhdGUgPSBbXTtcblxuICB7XG4gICAgY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXIgfHwgZG9jdW1lbnQuaGVhZDtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKCAvLyB0aGlzIG1lYW5zIHdlIHdpbGwgaWdub3JlIGVsZW1lbnRzIHdoaWNoIGRvbid0IGhhdmUgYSBzcGFjZSBpbiB0aGVtIHdoaWNoXG4gICAgLy8gbWVhbnMgdGhhdCB0aGUgc3R5bGUgZWxlbWVudHMgd2UncmUgbG9va2luZyBhdCBhcmUgb25seSBFbW90aW9uIDExIHNlcnZlci1yZW5kZXJlZCBzdHlsZSBlbGVtZW50c1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb25ePVxcXCJcIiArIGtleSArIFwiIFxcXCJdXCIpLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIGF0dHJpYiA9IG5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1lbW90aW9uXCIpLnNwbGl0KCcgJyk7IC8vICRGbG93Rml4TWVcblxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhdHRyaWIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW5zZXJ0ZWRbYXR0cmliW2ldXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIG5vZGVzVG9IeWRyYXRlLnB1c2gobm9kZSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgX2luc2VydDtcblxuICB2YXIgb21uaXByZXNlbnRQbHVnaW5zID0gW2NvbXBhdCwgcmVtb3ZlTGFiZWxdO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgb21uaXByZXNlbnRQbHVnaW5zLnB1c2goY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0oe1xuICAgICAgZ2V0IGNvbXBhdCgpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlLmNvbXBhdDtcbiAgICAgIH1cblxuICAgIH0pLCBpbmNvcnJlY3RJbXBvcnRBbGFybSk7XG4gIH1cblxuICB7XG4gICAgdmFyIGN1cnJlbnRTaGVldDtcbiAgICB2YXIgZmluYWxpemluZ1BsdWdpbnMgPSBbc3RyaW5naWZ5LCBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmICghZWxlbWVudC5yb290KSB7XG4gICAgICAgIGlmIChlbGVtZW50W1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgY3VycmVudFNoZWV0Lmluc2VydChlbGVtZW50W1wicmV0dXJuXCJdKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnZhbHVlICYmIGVsZW1lbnQudHlwZSAhPT0gQ09NTUVOVCkge1xuICAgICAgICAgIC8vIGluc2VydCBlbXB0eSBydWxlIGluIG5vbi1wcm9kdWN0aW9uIGVudmlyb25tZW50c1xuICAgICAgICAgIC8vIHNvIEBlbW90aW9uL2plc3QgY2FuIGdyYWIgYGtleWAgZnJvbSB0aGUgKEpTKURPTSBmb3IgY2FjaGVzIHdpdGhvdXQgYW55IHJ1bGVzIGluc2VydGVkIHlldFxuICAgICAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQoZWxlbWVudC52YWx1ZSArIFwie31cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IDogcnVsZXNoZWV0KGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KHJ1bGUpO1xuICAgIH0pXTtcbiAgICB2YXIgc2VyaWFsaXplciA9IG1pZGRsZXdhcmUob21uaXByZXNlbnRQbHVnaW5zLmNvbmNhdChzdHlsaXNQbHVnaW5zLCBmaW5hbGl6aW5nUGx1Z2lucykpO1xuXG4gICAgdmFyIHN0eWxpcyA9IGZ1bmN0aW9uIHN0eWxpcyhzdHlsZXMpIHtcbiAgICAgIHJldHVybiBzZXJpYWxpemUoY29tcGlsZShzdHlsZXMpLCBzZXJpYWxpemVyKTtcbiAgICB9O1xuXG4gICAgX2luc2VydCA9IGZ1bmN0aW9uIGluc2VydChzZWxlY3Rvciwgc2VyaWFsaXplZCwgc2hlZXQsIHNob3VsZENhY2hlKSB7XG4gICAgICBjdXJyZW50U2hlZXQgPSBzaGVldDtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjdXJyZW50U2hlZXQgPSB7XG4gICAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQocnVsZSkge1xuICAgICAgICAgICAgc2hlZXQuaW5zZXJ0KHJ1bGUgKyBzZXJpYWxpemVkLm1hcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBzdHlsaXMoc2VsZWN0b3IgPyBzZWxlY3RvciArIFwie1wiICsgc2VyaWFsaXplZC5zdHlsZXMgKyBcIn1cIiA6IHNlcmlhbGl6ZWQuc3R5bGVzKTtcblxuICAgICAgaWYgKHNob3VsZENhY2hlKSB7XG4gICAgICAgIGNhY2hlLmluc2VydGVkW3NlcmlhbGl6ZWQubmFtZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgY2FjaGUgPSB7XG4gICAga2V5OiBrZXksXG4gICAgc2hlZXQ6IG5ldyBTdHlsZVNoZWV0KHtcbiAgICAgIGtleToga2V5LFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICAgIHNwZWVkeTogb3B0aW9ucy5zcGVlZHksXG4gICAgICBwcmVwZW5kOiBvcHRpb25zLnByZXBlbmQsXG4gICAgICBpbnNlcnRpb25Qb2ludDogb3B0aW9ucy5pbnNlcnRpb25Qb2ludFxuICAgIH0pLFxuICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgIGluc2VydGVkOiBpbnNlcnRlZCxcbiAgICByZWdpc3RlcmVkOiB7fSxcbiAgICBpbnNlcnQ6IF9pbnNlcnRcbiAgfTtcbiAgY2FjaGUuc2hlZXQuaHlkcmF0ZShub2Rlc1RvSHlkcmF0ZSk7XG4gIHJldHVybiBjYWNoZTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZUNhY2hlIGFzIGRlZmF1bHQgfTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsImltcG9ydCB7IHVuc3RhYmxlX2NyZWF0ZUNoYWluZWRGdW5jdGlvbiBhcyBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbjsiLCJpbXBvcnQgeyB1bnN0YWJsZV9kZXByZWNhdGVkUHJvcFR5cGUgYXMgZGVwcmVjYXRlZFByb3BUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBkZXByZWNhdGVkUHJvcFR5cGU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVwcmVjYXRlZFByb3BUeXBlKHZhbGlkYXRvciwgcmVhc29uKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuICgpID0+IG51bGw7XG4gIH1cbiAgcmV0dXJuIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpID0+IHtcbiAgICBjb25zdCBjb21wb25lbnROYW1lU2FmZSA9IGNvbXBvbmVudE5hbWUgfHwgJzw8YW5vbnltb3VzPj4nO1xuICAgIGNvbnN0IHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG4gICAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGBUaGUgJHtsb2NhdGlvbn0gXFxgJHtwcm9wRnVsbE5hbWVTYWZlfVxcYCBvZiBgICsgYFxcYCR7Y29tcG9uZW50TmFtZVNhZmV9XFxgIGlzIGRlcHJlY2F0ZWQuICR7cmVhc29ufWApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9zZXRSZWYgYXMgc2V0UmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBzZXRSZWY7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1bnN0YWJsZV91c2VJZCBhcyB1c2VJZCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgdXNlSWQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgYXMgQ2xhc3NOYW1lR2VuZXJhdG9yIH0gZnJvbSAnQG11aS9iYXNlL0NsYXNzTmFtZUdlbmVyYXRvcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNhcGl0YWxpemUgfSBmcm9tICcuL2NhcGl0YWxpemUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gfSBmcm9tICcuL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNyZWF0ZVN2Z0ljb24gfSBmcm9tICcuL2NyZWF0ZVN2Z0ljb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkZWJvdW5jZSB9IGZyb20gJy4vZGVib3VuY2UnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBkZXByZWNhdGVkUHJvcFR5cGUgfSBmcm9tICcuL2RlcHJlY2F0ZWRQcm9wVHlwZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGlzTXVpRWxlbWVudCB9IGZyb20gJy4vaXNNdWlFbGVtZW50JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb3duZXJEb2N1bWVudCB9IGZyb20gJy4vb3duZXJEb2N1bWVudCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIG93bmVyV2luZG93IH0gZnJvbSAnLi9vd25lcldpbmRvdyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHJlcXVpcmVQcm9wRmFjdG9yeSB9IGZyb20gJy4vcmVxdWlyZVByb3BGYWN0b3J5JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc2V0UmVmIH0gZnJvbSAnLi9zZXRSZWYnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1bnN0YWJsZV91c2VFbmhhbmNlZEVmZmVjdCB9IGZyb20gJy4vdXNlRW5oYW5jZWRFZmZlY3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1bnN0YWJsZV91c2VJZCB9IGZyb20gJy4vdXNlSWQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1bnN1cHBvcnRlZFByb3AgfSBmcm9tICcuL3Vuc3VwcG9ydGVkUHJvcCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUNvbnRyb2xsZWQgfSBmcm9tICcuL3VzZUNvbnRyb2xsZWQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VFdmVudENhbGxiYWNrIH0gZnJvbSAnLi91c2VFdmVudENhbGxiYWNrJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlRm9ya1JlZiB9IGZyb20gJy4vdXNlRm9ya1JlZic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUlzRm9jdXNWaXNpYmxlIH0gZnJvbSAnLi91c2VJc0ZvY3VzVmlzaWJsZSc7XG4vLyBUT0RPOiByZW1vdmUgdGhpcyBleHBvcnQgb25jZSBDbGFzc05hbWVHZW5lcmF0b3IgaXMgc3RhYmxlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgY29uc3QgdW5zdGFibGVfQ2xhc3NOYW1lR2VuZXJhdG9yID0ge1xuICBjb25maWd1cmU6IGdlbmVyYXRvciA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2FybihbJ01VSTogYENsYXNzTmFtZUdlbmVyYXRvcmAgaW1wb3J0IGZyb20gYEBtdWkvbWF0ZXJpYWwvdXRpbHNgIGlzIG91dGRhdGVkIGFuZCBtaWdodCBjYXVzZSB1bmV4cGVjdGVkIGlzc3Vlcy4nLCAnJywgXCJZb3Ugc2hvdWxkIHVzZSBgaW1wb3J0IHsgdW5zdGFibGVfQ2xhc3NOYW1lR2VuZXJhdG9yIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9jbGFzc05hbWUnYCBpbnN0ZWFkXCIsICcnLCAnVGhlIGRldGFpbCBvZiB0aGUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvaXNzdWVzLzMwMDExI2lzc3VlY29tbWVudC0xMDI0OTkzNDAxJywgJycsICdUaGUgdXBkYXRlZCBkb2N1bWVudGF0aW9uOiBodHRwczovL211aS5jb20vZ3VpZGVzL2NsYXNzbmFtZS1nZW5lcmF0b3IvJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgICBDbGFzc05hbWVHZW5lcmF0b3IuY29uZmlndXJlKGdlbmVyYXRvcik7XG4gIH1cbn07IiwiaW1wb3J0IHsgdW5zdGFibGVfcmVxdWlyZVByb3BGYWN0b3J5IGFzIHJlcXVpcmVQcm9wRmFjdG9yeSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgcmVxdWlyZVByb3BGYWN0b3J5OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZVByb3BGYWN0b3J5KGNvbXBvbmVudE5hbWVJbkVycm9yLCBDb21wb25lbnQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKCkgPT4gbnVsbDtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mb3JiaWQtZm9yZWlnbi1wcm9wLXR5cGVzXG4gIGNvbnN0IHByZXZQcm9wVHlwZXMgPSBDb21wb25lbnQgPyBfZXh0ZW5kcyh7fSwgQ29tcG9uZW50LnByb3BUeXBlcykgOiBudWxsO1xuICBjb25zdCByZXF1aXJlUHJvcCA9IHJlcXVpcmVkUHJvcCA9PiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCAuLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcbiAgICBjb25zdCBkZWZhdWx0VHlwZUNoZWNrZXIgPSBwcmV2UHJvcFR5cGVzID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UHJvcFR5cGVzW3Byb3BGdWxsTmFtZVNhZmVdO1xuICAgIGlmIChkZWZhdWx0VHlwZUNoZWNrZXIpIHtcbiAgICAgIGNvbnN0IHR5cGVDaGVja2VyUmVzdWx0ID0gZGVmYXVsdFR5cGVDaGVja2VyKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgLi4uYXJncyk7XG4gICAgICBpZiAodHlwZUNoZWNrZXJSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVDaGVja2VyUmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXByb3BzW3JlcXVpcmVkUHJvcF0pIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYFRoZSBwcm9wIFxcYCR7cHJvcEZ1bGxOYW1lU2FmZX1cXGAgb2YgYCArIGBcXGAke2NvbXBvbmVudE5hbWVJbkVycm9yfVxcYCBjYW4gb25seSBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggdGhlIFxcYCR7cmVxdWlyZWRQcm9wfVxcYCBwcm9wLmApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbiAgcmV0dXJuIHJlcXVpcmVQcm9wO1xufSIsImltcG9ydCB7IHVuc3RhYmxlX3Vuc3VwcG9ydGVkUHJvcCBhcyB1bnN1cHBvcnRlZFByb3AgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IHVuc3VwcG9ydGVkUHJvcDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bnN1cHBvcnRlZFByb3AocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcbiAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihgVGhlIHByb3AgXFxgJHtwcm9wRnVsbE5hbWVTYWZlfVxcYCBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgcmVtb3ZlIGl0LmApO1xuICB9XG4gIHJldHVybiBudWxsO1xufSIsImltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyQxIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLy8gdGhpcyBmaWxlIGlzb2xhdGVzIHRoaXMgcGFja2FnZSB0aGF0IGlzIG5vdCB0cmVlLXNoYWtlYWJsZVxuLy8gYW5kIGlmIHRoaXMgbW9kdWxlIGRvZXNuJ3QgYWN0dWFsbHkgY29udGFpbiBhbnkgbG9naWMgb2YgaXRzIG93blxuLy8gdGhlbiBSb2xsdXAganVzdCB1c2UgJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJyBkaXJlY3RseSBpbiBvdGhlciBjaHVua3NcblxudmFyIGhvaXN0Tm9uUmVhY3RTdGF0aWNzID0gKGZ1bmN0aW9uICh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCkge1xuICByZXR1cm4gaG9pc3ROb25SZWFjdFN0YXRpY3MkMSh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCk7XG59KTtcblxuZXhwb3J0IHsgaG9pc3ROb25SZWFjdFN0YXRpY3MgYXMgZGVmYXVsdCB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBOdW1iZXJgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gKiBjbGFzc2lmaWVkIGFzIG51bWJlcnMsIHVzZSB0aGUgYF8uaXNGaW5pdGVgIG1ldGhvZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTnVtYmVyKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc051bWJlcignMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IG51bWJlclRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOdW1iZXI7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwibTEyIDgtNiA2IDEuNDEgMS40MUwxMiAxMC44M2w0LjU5IDQuNThMMTggMTR6XCJcbn0pLCAnRXhwYW5kTGVzcycpOyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2UgY2xpZW50XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0xOSAxOUg1VjVoN1YzSDVjLTEuMTEgMC0yIC45LTIgMnYxNGMwIDEuMS44OSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMnYtN2gtMnpNMTQgM3YyaDMuNTlsLTkuODMgOS44MyAxLjQxIDEuNDFMMTkgNi40MVYxMGgyVjN6XCJcbn0pLCAnT3BlbkluTmV3Jyk7IiwidmFyIGlzTnVtYmVyID0gcmVxdWlyZSgnLi9pc051bWJlcicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICogW2BOdW1iZXIuaXNOYU5gXShodHRwczovL21kbi5pby9OdW1iZXIvaXNOYU4pIGFuZCBpcyBub3QgdGhlIHNhbWUgYXNcbiAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICogYHVuZGVmaW5lZGAgYW5kIG90aGVyIG5vbi1udW1iZXIgdmFsdWVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNOYU4oTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogaXNOYU4odW5kZWZpbmVkKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAvLyBQZXJmb3JtIHRoZSBgdG9TdHJpbmdUYWdgIGNoZWNrIGZpcnN0IHRvIGF2b2lkIGVycm9ycyB3aXRoIHNvbWVcbiAgLy8gQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05hTjtcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnBsYXRmb3JtSW1hZ2Uge1xcbiAgICBoZWlnaHQ6IDc1cHg7XFxuICAgIHdpZHRoOiA3NXB4O1xcbiAgICBtYXJnaW4tbGVmdDogMzIlO1xcbn1cXG5cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9mcm9udGVuZC9jc3MvcGxhdGZvcm0tb3B0aW9ucy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxZQUFZO0lBQ1osV0FBVztJQUNYLGdCQUFnQjtBQUNwQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucGxhdGZvcm1JbWFnZSB7XFxuICAgIGhlaWdodDogNzVweDtcXG4gICAgd2lkdGg6IDc1cHg7XFxuICAgIG1hcmdpbi1sZWZ0OiAzMiU7XFxufVxcblxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIvKiEgcmVhY3Qtc2lkZW5hdiB2MC41LjAgfCAoYykgMjAyMCBUcmVuZCBNaWNybyBJbmMuIHwgTUlUIHwgaHR0cHM6Ly9naXRodWIuY29tL3RyZW5kbWljcm8tZnJvbnRlbmQvcmVhY3Qtc2lkZW5hdiAqL1xcbi5zaWRlbmF2LS0tc2lkZW5hdi0tLV8ydEJQIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiAxMDA2O1xcbiAgbWluLXdpZHRoOiA2NHB4O1xcbiAgYmFja2dyb3VuZDogI2RiM2Q0NDtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogbWluLXdpZHRoIDAuMnM7XFxuICAtbW96LXRyYW5zaXRpb246IG1pbi13aWR0aCAwLjJzO1xcbiAgLW8tdHJhbnNpdGlvbjogbWluLXdpZHRoIDAuMnM7XFxuICAtbXMtdHJhbnNpdGlvbjogbWluLXdpZHRoIDAuMnM7XFxuICB0cmFuc2l0aW9uOiBtaW4td2lkdGggMC4ycztcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LS0tXzJ0QlAuc2lkZW5hdi0tLWNvbGxhcHNlZC0tLUxRREV2IC5zaWRlbmF2LS0tc2lkZW5hdi1uYXYtLS0zdHZpaiAuc2lkZW5hdi0tLXNpZGVuYXYtbmF2aXRlbS0tLXV3SUotIC5zaWRlbmF2LS0tc2lkZW5hdi1zdWJuYXYtLS0xRU42MSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4uc2lkZW5hdi0tLXNpZGVuYXYtLS1fMnRCUC5zaWRlbmF2LS0tY29sbGFwc2VkLS0tTFFERXYgLnNpZGVuYXYtLS1zaWRlbmF2LW5hdi0tLTN0dmlqIC5zaWRlbmF2LS0tc2lkZW5hdi1uYXZpdGVtLS0tdXdJSi06aG92ZXIgPiAuc2lkZW5hdi0tLXNpZGVuYXYtc3VibmF2LS0tMUVONjEge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi0tLV8ydEJQLnNpZGVuYXYtLS1leHBhbmRlZC0tLTFLZFVMIHtcXG4gIG1pbi13aWR0aDogMjQwcHg7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi0tLV8ydEJQLnNpZGVuYXYtLS1leHBhbmRlZC0tLTFLZFVMIC5zaWRlbmF2LS0tc2lkZW5hdi1uYXYtLS0zdHZpaiA+IC5zaWRlbmF2LS0tc2lkZW5hdi1uYXZpdGVtLS0tdXdJSi0gLnNpZGVuYXYtLS1uYXZpY29uLS0tM2dDUm8gKyAuc2lkZW5hdi0tLW5hdnRleHQtLS0xQUVfZiB7XFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbiAgb3BhY2l0eTogMTtcXG4gIC1tcy1maWx0ZXI6IG5vbmU7XFxuICBmaWx0ZXI6IG5vbmU7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBsaW5lYXI7XFxuICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBsaW5lYXI7XFxuICAtby10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMnMgbGluZWFyO1xcbiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBsaW5lYXI7XFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMnMgbGluZWFyO1xcbn1cXG4uc2lkZW5hdi0tLXNpZGVuYXYtLS1fMnRCUC5zaWRlbmF2LS0tZXhwYW5kZWQtLS0xS2RVTCAuc2lkZW5hdi0tLXNpZGVuYXYtbmF2LS0tM3R2aWogPiAuc2lkZW5hdi0tLXNpZGVuYXYtbmF2aXRlbS0tLXV3SUotLnNpZGVuYXYtLS1leHBhbmRhYmxlLS0tM19kcjcgPiAuc2lkZW5hdi0tLW5hdml0ZW0tLS05dUw1VCB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi0tLV8ydEJQLnNpZGVuYXYtLS1leHBhbmRlZC0tLTFLZFVMIC5zaWRlbmF2LS0tc2lkZW5hdi1zdWJuYXYtLS0xRU42MSB7XFxuICBwb3NpdGlvbjogc3RhdGljO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICBjbGVhcjogYm90aDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiBub25lO1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LS0tXzJ0QlAuc2lkZW5hdi0tLWV4cGFuZGVkLS0tMUtkVUwgLnNpZGVuYXYtLS1zaWRlbmF2LW5hdi0tLTN0dmlqID4gLnNpZGVuYXYtLS1zaWRlbmF2LW5hdml0ZW0tLS11d0lKLS5zaWRlbmF2LS0tZXhwYW5kZWQtLS0xS2RVTCAuc2lkZW5hdi0tLXNpZGVuYXYtc3VibmF2LS0tMUVONjEge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi0tLV8ydEJQLnNpZGVuYXYtLS1leHBhbmRlZC0tLTFLZFVMIC5zaWRlbmF2LS0tc2lkZW5hdi1zdWJuYXYtLS0xRU42MSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4uc2lkZW5hdi0tLXNpZGVuYXYtLS1fMnRCUC5zaWRlbmF2LS0tZXhwYW5kZWQtLS0xS2RVTCAuc2lkZW5hdi0tLXNpZGVuYXYtc3VibmF2LS0tMUVONjEgPiAuc2lkZW5hdi0tLXNpZGVuYXYtc3VibmF2aXRlbS0tLTFjRDQ3IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LS0tXzJ0QlAuc2lkZW5hdi0tLWV4cGFuZGVkLS0tMUtkVUwgLnNpZGVuYXYtLS1zaWRlbmF2LXN1Ym5hdi0tLTFFTjYxID4gLnNpZGVuYXYtLS1zaWRlbmF2LXN1Ym5hdml0ZW0tLS0xY0Q0Nzo6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCIgXFxcIjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAyOHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgei1pbmRleDogLTE7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi0tLV8ydEJQLnNpZGVuYXYtLS1leHBhbmRlZC0tLTFLZFVMIC5zaWRlbmF2LS0tc2lkZW5hdi1zdWJuYXYtLS0xRU42MSA+IC5zaWRlbmF2LS0tc2lkZW5hdi1zdWJuYXZpdGVtLS0tMWNENDc6Zmlyc3QtY2hpbGQge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LS0tXzJ0QlAuc2lkZW5hdi0tLWV4cGFuZGVkLS0tMUtkVUwgLnNpZGVuYXYtLS1zaWRlbmF2LXN1Ym5hdi0tLTFFTjYxID4gLnNpZGVuYXYtLS1zaWRlbmF2LXN1Ym5hdml0ZW0tLS0xY0Q0Nzpob3Zlcjo6YmVmb3JlIHtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBvcGFjaXR5OiAwLjE1O1xcbiAgLW1zLWZpbHRlcjogXFxcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5BbHBoYShPcGFjaXR5PTE1KVxcXCI7XFxuICBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9MTUpO1xcbn1cXG4uc2lkZW5hdi0tLXNpZGVuYXYtLS1fMnRCUC5zaWRlbmF2LS0tZXhwYW5kZWQtLS0xS2RVTCAuc2lkZW5hdi0tLXNpZGVuYXYtc3VibmF2LS0tMUVONjEgPiAuc2lkZW5hdi0tLXNpZGVuYXYtc3VibmF2aXRlbS0tLTFjRDQ3OjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIiBcXFwiO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDI4cHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICB6LWluZGV4OiAtMTtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LS0tXzJ0QlAuc2lkZW5hdi0tLWV4cGFuZGVkLS0tMUtkVUwgLnNpZGVuYXYtLS1zaWRlbmF2LXN1Ym5hdi0tLTFFTjYxID4gLnNpZGVuYXYtLS1zaWRlbmF2LXN1Ym5hdml0ZW0tLS0xY0Q0Ny5zaWRlbmF2LS0tc2VsZWN0ZWQtLS0xRUszeSA+IC5zaWRlbmF2LS0tbmF2aXRlbS0tLTl1TDVUIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uc2lkZW5hdi0tLXNpZGVuYXYtLS1fMnRCUC5zaWRlbmF2LS0tZXhwYW5kZWQtLS0xS2RVTCAuc2lkZW5hdi0tLXNpZGVuYXYtc3VibmF2LS0tMUVONjEgPiAuc2lkZW5hdi0tLXNpZGVuYXYtc3VibmF2aXRlbS0tLTFjRDQ3LnNpZGVuYXYtLS1zZWxlY3RlZC0tLTFFSzN5ID4gLnNpZGVuYXYtLS1uYXZpdGVtLS0tOXVMNVQ6OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiIFxcXCI7XFxuICB3aWR0aDogMnB4O1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAgbGVmdDogMTBweDtcXG4gIHRvcDogNHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm9yZGVyLWxlZnQ6IDJweCAjZmZmIHNvbGlkO1xcbn1cXG4uc2lkZW5hdi0tLXNpZGVuYXYtLS1fMnRCUC5zaWRlbmF2LS0tZXhwYW5kZWQtLS0xS2RVTCAuc2lkZW5hdi0tLXNpZGVuYXYtc3VibmF2LS0tMUVONjEgPiAuc2lkZW5hdi0tLXNpZGVuYXYtc3VibmF2aXRlbS0tLTFjRDQ3OmhvdmVyID4gLnNpZGVuYXYtLS1uYXZpdGVtLS0tOXVMNVQge1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LS0tXzJ0QlAuc2lkZW5hdi0tLWV4cGFuZGVkLS0tMUtkVUwgLnNpZGVuYXYtLS1zaWRlbmF2LXN1Ym5hdi0tLTFFTjYxID4gLnNpZGVuYXYtLS1zaWRlbmF2LXN1Ym5hdml0ZW0tLS0xY0Q0NyA+IC5zaWRlbmF2LS0tbmF2aXRlbS0tLTl1TDVUIHtcXG4gIGNvbG9yOiAjZjlkY2RkO1xcbiAgcGFkZGluZzogMCAxNHB4IDAgMjBweDtcXG4gIGxpbmUtaGVpZ2h0OiAyOHB4O1xcbn1cXG4uc2lkZW5hdi0tLXNpZGVuYXYtdG9nZ2xlLS0tMUtSalIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICB3aWR0aDogNjRweDtcXG4gIGhlaWdodDogNjRweDtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxuICBib3JkZXI6IDA7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4uc2lkZW5hdi0tLXNpZGVuYXYtdG9nZ2xlLS0tMUtSalI6Zm9jdXMge1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LXRvZ2dsZS0tLTFLUmpSIC5zaWRlbmF2LS0taWNvbi1iYXItLS11MWYwMiB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAyMHB4O1xcbiAgaGVpZ2h0OiAycHg7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXItcmFkaXVzOiAxcHg7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCAwLjE1cztcXG4gIC1tb3otdHJhbnNpdGlvbjogYWxsIDAuMTVzO1xcbiAgLW8tdHJhbnNpdGlvbjogYWxsIDAuMTVzO1xcbiAgLW1zLXRyYW5zaXRpb246IGFsbCAwLjE1cztcXG4gIHRyYW5zaXRpb246IGFsbCAwLjE1cztcXG4gIG9wYWNpdHk6IDAuNztcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGEoT3BhY2l0eT03MClcXFwiO1xcbiAgZmlsdGVyOiBhbHBoYShvcGFjaXR5PTcwKTtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LXRvZ2dsZS0tLTFLUmpSIC5zaWRlbmF2LS0taWNvbi1iYXItLS11MWYwMiArIC5zaWRlbmF2LS0taWNvbi1iYXItLS11MWYwMiB7XFxuICBtYXJnaW4tdG9wOiA0cHg7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi0tLV8ydEJQLnNpZGVuYXYtLS1leHBhbmRlZC0tLTFLZFVMIC5zaWRlbmF2LS0tc2lkZW5hdi10b2dnbGUtLS0xS1JqUiAuc2lkZW5hdi0tLWljb24tYmFyLS0tdTFmMDIge1xcbiAgd2lkdGg6IDI1cHg7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi0tLV8ydEJQLnNpZGVuYXYtLS1leHBhbmRlZC0tLTFLZFVMIC5zaWRlbmF2LS0tc2lkZW5hdi10b2dnbGUtLS0xS1JqUiAuc2lkZW5hdi0tLWljb24tYmFyLS0tdTFmMDI6bnRoLWNoaWxkKDEpIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xcbiAgLW1vei10cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XFxuICAtby10cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XFxuICAtbXMtdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xcbn1cXG4uc2lkZW5hdi0tLXNpZGVuYXYtLS1fMnRCUC5zaWRlbmF2LS0tZXhwYW5kZWQtLS0xS2RVTCAuc2lkZW5hdi0tLXNpZGVuYXYtdG9nZ2xlLS0tMUtSalIgLnNpZGVuYXYtLS1pY29uLWJhci0tLXUxZjAyOm50aC1jaGlsZCgyKSB7XFxuICBvcGFjaXR5OiAwO1xcbiAgLW1zLWZpbHRlcjogXFxcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5BbHBoYShPcGFjaXR5PTApXFxcIjtcXG4gIGZpbHRlcjogYWxwaGEob3BhY2l0eT0wKTtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LS0tXzJ0QlAuc2lkZW5hdi0tLWV4cGFuZGVkLS0tMUtkVUwgLnNpZGVuYXYtLS1zaWRlbmF2LXRvZ2dsZS0tLTFLUmpSIC5zaWRlbmF2LS0taWNvbi1iYXItLS11MWYwMjpudGgtY2hpbGQoMykge1xcbiAgbWFyZ2luLXRvcDogLThweDtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcXG4gIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcXG4gIC1vLXRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XFxuICAtbXMtdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcXG4gIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi1uYXYtLS0zdHZpaiB7XFxuICBmbG9hdDogbGVmdDtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBjbGVhcjogYm90aDtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LW5hdi0tLTN0dmlqID4gLnNpZGVuYXYtLS1zaWRlbmF2LW5hdml0ZW0tLS11d0lKLSB7XFxuICBjbGVhcjogYm90aDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LW5hdi0tLTN0dmlqID4gLnNpZGVuYXYtLS1zaWRlbmF2LW5hdml0ZW0tLS11d0lKLS5zaWRlbmF2LS0taGlnaGxpZ2h0ZWQtLS1vVXg5dSA+IC5zaWRlbmF2LS0tbmF2aXRlbS0tLTl1TDVUIHtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LW5hdi0tLTN0dmlqID4gLnNpZGVuYXYtLS1zaWRlbmF2LW5hdml0ZW0tLS11d0lKLTpob3ZlciA+IC5zaWRlbmF2LS0tbmF2aXRlbS0tLTl1TDVUOjphZnRlciB7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgb3BhY2l0eTogMC4xNTtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGEoT3BhY2l0eT0xNSlcXFwiO1xcbiAgZmlsdGVyOiBhbHBoYShvcGFjaXR5PTE1KTtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LW5hdi0tLTN0dmlqID4gLnNpZGVuYXYtLS1zaWRlbmF2LW5hdml0ZW0tLS11d0lKLS5zaWRlbmF2LS0taGlnaGxpZ2h0ZWQtLS1vVXg5dSA+IC5zaWRlbmF2LS0tbmF2aXRlbS0tLTl1TDVUOjphZnRlcixcXG4uc2lkZW5hdi0tLXNpZGVuYXYtbmF2LS0tM3R2aWogPiAuc2lkZW5hdi0tLXNpZGVuYXYtbmF2aXRlbS0tLXV3SUotOmhvdmVyLnNpZGVuYXYtLS1oaWdobGlnaHRlZC0tLW9VeDl1ID4gLnNpZGVuYXYtLS1uYXZpdGVtLS0tOXVMNVQ6OmFmdGVyIHtcXG4gIGJhY2tncm91bmQ6ICMwMDA7XFxuICBvcGFjaXR5OiAwLjI7XFxuICAtbXMtZmlsdGVyOiBcXFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkFscGhhKE9wYWNpdHk9MjApXFxcIjtcXG4gIGZpbHRlcjogYWxwaGEob3BhY2l0eT0yMCk7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi1uYXYtLS0zdHZpaiA+IC5zaWRlbmF2LS0tc2lkZW5hdi1uYXZpdGVtLS0tdXdJSi0uc2lkZW5hdi0tLWhpZ2hsaWdodGVkLS0tb1V4OXUuc2lkZW5hdi0tLWV4cGFuZGVkLS0tMUtkVUwgPiAuc2lkZW5hdi0tLW5hdml0ZW0tLS05dUw1VDo6YWZ0ZXIsXFxuLnNpZGVuYXYtLS1zaWRlbmF2LW5hdi0tLTN0dmlqID4gLnNpZGVuYXYtLS1zaWRlbmF2LW5hdml0ZW0tLS11d0lKLTpob3Zlci5zaWRlbmF2LS0taGlnaGxpZ2h0ZWQtLS1vVXg5dS5zaWRlbmF2LS0tZXhwYW5kZWQtLS0xS2RVTCA+IC5zaWRlbmF2LS0tbmF2aXRlbS0tLTl1TDVUOjphZnRlciB7XFxuICBiYWNrZ3JvdW5kOiAjMDAwO1xcbiAgb3BhY2l0eTogMC4yNTtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGEoT3BhY2l0eT0yNSlcXFwiO1xcbiAgZmlsdGVyOiBhbHBoYShvcGFjaXR5PTI1KTtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LW5hdi0tLTN0dmlqID4gLnNpZGVuYXYtLS1zaWRlbmF2LW5hdml0ZW0tLS11d0lKLS5zaWRlbmF2LS0taGlnaGxpZ2h0ZWQtLS1vVXg5dS5zaWRlbmF2LS0tc2VsZWN0ZWQtLS0xRUszeS5zaWRlbmF2LS0tZXhwYW5kZWQtLS0xS2RVTCA+IC5zaWRlbmF2LS0tbmF2aXRlbS0tLTl1TDVUOjphZnRlcixcXG4uc2lkZW5hdi0tLXNpZGVuYXYtbmF2LS0tM3R2aWogPiAuc2lkZW5hdi0tLXNpZGVuYXYtbmF2aXRlbS0tLXV3SUotOmhvdmVyLnNpZGVuYXYtLS1oaWdobGlnaHRlZC0tLW9VeDl1LnNpZGVuYXYtLS1zZWxlY3RlZC0tLTFFSzN5LnNpZGVuYXYtLS1leHBhbmRlZC0tLTFLZFVMID4gLnNpZGVuYXYtLS1uYXZpdGVtLS0tOXVMNVQ6OmFmdGVyIHtcXG4gIGJhY2tncm91bmQ6ICMwMDA7XFxuICBvcGFjaXR5OiAwLjI7XFxuICAtbXMtZmlsdGVyOiBcXFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkFscGhhKE9wYWNpdHk9MjApXFxcIjtcXG4gIGZpbHRlcjogYWxwaGEob3BhY2l0eT0yMCk7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi1uYXYtLS0zdHZpaiA+IC5zaWRlbmF2LS0tc2lkZW5hdi1uYXZpdGVtLS0tdXdJSi06aG92ZXIgPiAuc2lkZW5hdi0tLW5hdml0ZW0tLS05dUw1VCAuc2lkZW5hdi0tLW5hdmljb24tLS0zZ0NSbyxcXG4uc2lkZW5hdi0tLXNpZGVuYXYtbmF2LS0tM3R2aWogPiAuc2lkZW5hdi0tLXNpZGVuYXYtbmF2aXRlbS0tLXV3SUotLnNpZGVuYXYtLS1oaWdobGlnaHRlZC0tLW9VeDl1ID4gLnNpZGVuYXYtLS1uYXZpdGVtLS0tOXVMNVQgLnNpZGVuYXYtLS1uYXZpY29uLS0tM2dDUm8ge1xcbiAgb3BhY2l0eTogMTtcXG4gIC1tcy1maWx0ZXI6IG5vbmU7XFxuICBmaWx0ZXI6IG5vbmU7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi1uYXYtLS0zdHZpaiA+IC5zaWRlbmF2LS0tc2lkZW5hdi1uYXZpdGVtLS0tdXdJSi06aG92ZXIgPiAuc2lkZW5hdi0tLW5hdml0ZW0tLS05dUw1VCAuc2lkZW5hdi0tLW5hdmljb24tLS0zZ0NSbyxcXG4uc2lkZW5hdi0tLXNpZGVuYXYtbmF2LS0tM3R2aWogPiAuc2lkZW5hdi0tLXNpZGVuYXYtbmF2aXRlbS0tLXV3SUotOmhvdmVyID4gLnNpZGVuYXYtLS1uYXZpdGVtLS0tOXVMNVQgLnNpZGVuYXYtLS1uYXZ0ZXh0LS0tMUFFX2YsXFxuLnNpZGVuYXYtLS1zaWRlbmF2LW5hdi0tLTN0dmlqID4gLnNpZGVuYXYtLS1zaWRlbmF2LW5hdml0ZW0tLS11d0lKLS5zaWRlbmF2LS0taGlnaGxpZ2h0ZWQtLS1vVXg5dSA+IC5zaWRlbmF2LS0tbmF2aXRlbS0tLTl1TDVUIC5zaWRlbmF2LS0tbmF2aWNvbi0tLTNnQ1JvLFxcbi5zaWRlbmF2LS0tc2lkZW5hdi1uYXYtLS0zdHZpaiA+IC5zaWRlbmF2LS0tc2lkZW5hdi1uYXZpdGVtLS0tdXdJSi0uc2lkZW5hdi0tLWhpZ2hsaWdodGVkLS0tb1V4OXUgPiAuc2lkZW5hdi0tLW5hdml0ZW0tLS05dUw1VCAuc2lkZW5hdi0tLW5hdnRleHQtLS0xQUVfZiB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LW5hdi0tLTN0dmlqID4gLnNpZGVuYXYtLS1zaWRlbmF2LW5hdml0ZW0tLS11d0lKLTpob3ZlciA+IC5zaWRlbmF2LS0tbmF2aXRlbS0tLTl1TDVUIC5zaWRlbmF2LS0tbmF2aWNvbi0tLTNnQ1JvID4gKixcXG4uc2lkZW5hdi0tLXNpZGVuYXYtbmF2LS0tM3R2aWogPiAuc2lkZW5hdi0tLXNpZGVuYXYtbmF2aXRlbS0tLXV3SUotOmhvdmVyID4gLnNpZGVuYXYtLS1uYXZpdGVtLS0tOXVMNVQgLnNpZGVuYXYtLS1uYXZ0ZXh0LS0tMUFFX2YgPiAqLFxcbi5zaWRlbmF2LS0tc2lkZW5hdi1uYXYtLS0zdHZpaiA+IC5zaWRlbmF2LS0tc2lkZW5hdi1uYXZpdGVtLS0tdXdJSi0uc2lkZW5hdi0tLWhpZ2hsaWdodGVkLS0tb1V4OXUgPiAuc2lkZW5hdi0tLW5hdml0ZW0tLS05dUw1VCAuc2lkZW5hdi0tLW5hdmljb24tLS0zZ0NSbyA+ICosXFxuLnNpZGVuYXYtLS1zaWRlbmF2LW5hdi0tLTN0dmlqID4gLnNpZGVuYXYtLS1zaWRlbmF2LW5hdml0ZW0tLS11d0lKLS5zaWRlbmF2LS0taGlnaGxpZ2h0ZWQtLS1vVXg5dSA+IC5zaWRlbmF2LS0tbmF2aXRlbS0tLTl1TDVUIC5zaWRlbmF2LS0tbmF2dGV4dC0tLTFBRV9mID4gKiB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LW5hdi0tLTN0dmlqID4gLnNpZGVuYXYtLS1zaWRlbmF2LW5hdml0ZW0tLS11d0lKLSA+IC5zaWRlbmF2LS0tbmF2aXRlbS0tLTl1TDVUIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbGluZS1oZWlnaHQ6IDUwcHg7XFxuICBoZWlnaHQ6IDUwcHg7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgY29sb3I6ICNmZmY7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi1uYXYtLS0zdHZpaiA+IC5zaWRlbmF2LS0tc2lkZW5hdi1uYXZpdGVtLS0tdXdJSi0gPiAuc2lkZW5hdi0tLW5hdml0ZW0tLS05dUw1VDpmb2N1cyB7XFxuICBvdXRsaW5lOiAwO1xcbn1cXG4uc2lkZW5hdi0tLXNpZGVuYXYtbmF2LS0tM3R2aWogPiAuc2lkZW5hdi0tLXNpZGVuYXYtbmF2aXRlbS0tLXV3SUotID4gLnNpZGVuYXYtLS1uYXZpdGVtLS0tOXVMNVQ6OmFmdGVyIHtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICB0b3A6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIG9wYWNpdHk6IDA7XFxuICAtbXMtZmlsdGVyOiBcXFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkFscGhhKE9wYWNpdHk9MClcXFwiO1xcbiAgZmlsdGVyOiBhbHBoYShvcGFjaXR5PTApO1xcbiAgei1pbmRleDogLTE7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi1uYXYtLS0zdHZpaiA+IC5zaWRlbmF2LS0tc2lkZW5hdi1uYXZpdGVtLS0tdXdJSi0gPiAuc2lkZW5hdi0tLW5hdml0ZW0tLS05dUw1VCAuc2lkZW5hdi0tLW5hdmljb24tLS0zZ0NSbyxcXG4uc2lkZW5hdi0tLXNpZGVuYXYtbmF2LS0tM3R2aWogPiAuc2lkZW5hdi0tLXNpZGVuYXYtbmF2aXRlbS0tLXV3SUotID4gLnNpZGVuYXYtLS1uYXZpdGVtLS0tOXVMNVQgLnNpZGVuYXYtLS1uYXZ0ZXh0LS0tMUFFX2Yge1xcbiAgY29sb3I6ICNmOWRjZGQ7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi1uYXYtLS0zdHZpaiA+IC5zaWRlbmF2LS0tc2lkZW5hdi1uYXZpdGVtLS0tdXdJSi0gPiAuc2lkZW5hdi0tLW5hdml0ZW0tLS05dUw1VCAuc2lkZW5hdi0tLW5hdmljb24tLS0zZ0NSbyA+ICosXFxuLnNpZGVuYXYtLS1zaWRlbmF2LW5hdi0tLTN0dmlqID4gLnNpZGVuYXYtLS1zaWRlbmF2LW5hdml0ZW0tLS11d0lKLSA+IC5zaWRlbmF2LS0tbmF2aXRlbS0tLTl1TDVUIC5zaWRlbmF2LS0tbmF2dGV4dC0tLTFBRV9mID4gKiB7XFxuICBjb2xvcjogI2Y5ZGNkZDtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LW5hdi0tLTN0dmlqID4gLnNpZGVuYXYtLS1zaWRlbmF2LW5hdml0ZW0tLS11d0lKLSA+IC5zaWRlbmF2LS0tbmF2aXRlbS0tLTl1TDVUIC5zaWRlbmF2LS0tbmF2aWNvbi0tLTNnQ1JvIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICB3aWR0aDogNjRweDtcXG4gIGhlaWdodDogNTBweDtcXG4gIG1hcmdpbi1yaWdodDogLTZweDtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgb3BhY2l0eTogMC43O1xcbiAgLW1zLWZpbHRlcjogXFxcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5BbHBoYShPcGFjaXR5PTcwKVxcXCI7XFxuICBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9NzApO1xcbiAgbGluZS1oZWlnaHQ6IDUwcHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi1uYXYtLS0zdHZpaiA+IC5zaWRlbmF2LS0tc2lkZW5hdi1uYXZpdGVtLS0tdXdJSi0gPiAuc2lkZW5hdi0tLW5hdml0ZW0tLS05dUw1VCAuc2lkZW5hdi0tLW5hdmljb24tLS0zZ0NSbyArIC5zaWRlbmF2LS0tbmF2dGV4dC0tLTFBRV9mIHtcXG4gIHdpZHRoOiAwO1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgb3BhY2l0eTogMDtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGEoT3BhY2l0eT0wKVxcXCI7XFxuICBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9MCk7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IHZpc2liaWxpdHkgMHMgMC4ycywgb3BhY2l0eSAwLjJzIGxpbmVhcjtcXG4gIC1tb3otdHJhbnNpdGlvbjogdmlzaWJpbGl0eSAwcyAwLjJzLCBvcGFjaXR5IDAuMnMgbGluZWFyO1xcbiAgLW8tdHJhbnNpdGlvbjogdmlzaWJpbGl0eSAwcyAwLjJzLCBvcGFjaXR5IDAuMnMgbGluZWFyO1xcbiAgLW1zLXRyYW5zaXRpb246IHZpc2liaWxpdHkgMHMgMC4ycywgb3BhY2l0eSAwLjJzIGxpbmVhcjtcXG4gIHRyYW5zaXRpb246IHZpc2liaWxpdHkgMHMgMC4ycywgb3BhY2l0eSAwLjJzIGxpbmVhcjtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LXN1Ym5hdi0tLTFFTjYxIHtcXG4gIG1pbi13aWR0aDogMjAwcHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDY0cHg7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgYm9yZGVyOiAxcHggI2JiYiBzb2xpZDtcXG4gIC13ZWJraXQtYm94LXNoYWRvdzogMnB4IDJweCAxMHB4IHJnYmEoMCwwLDAsMC4xNSk7XFxuICBib3gtc2hhZG93OiAycHggMnB4IDEwcHggcmdiYSgwLDAsMCwwLjE1KTtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LXN1Ym5hdi0tLTFFTjYxID4gLnNpZGVuYXYtLS1zaWRlbmF2LXN1Ym5hdml0ZW0tLS0xY0Q0NzpmaXJzdC1jaGlsZCB7XFxuICBtYXJnaW46IDAgMjRweDtcXG4gIGxpbmUtaGVpZ2h0OiA0OHB4O1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4ICNjY2Mgc29saWQ7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbn1cXG4uc2lkZW5hdi0tLXNpZGVuYXYtc3VibmF2LS0tMUVONjEgPiAuc2lkZW5hdi0tLXNpZGVuYXYtc3VibmF2aXRlbS0tLTFjRDQ3Om50aC1jaGlsZCgyKSB7XFxuICBtYXJnaW4tdG9wOiA4cHg7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi1zdWJuYXYtLS0xRU42MSA+IC5zaWRlbmF2LS0tc2lkZW5hdi1zdWJuYXZpdGVtLS0tMWNENDc6bGFzdC1jaGlsZCB7XFxuICBtYXJnaW4tYm90dG9tOiA4cHg7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi1zdWJuYXYtLS0xRU42MSA+IC5zaWRlbmF2LS0tc2lkZW5hdi1zdWJuYXZpdGVtLS0tMWNENDcuc2lkZW5hdi0tLXNlbGVjdGVkLS0tMUVLM3kgPiAuc2lkZW5hdi0tLW5hdml0ZW0tLS05dUw1VCB7XFxuICBjb2xvcjogI2RiM2Q0NDtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LXN1Ym5hdi0tLTFFTjYxID4gLnNpZGVuYXYtLS1zaWRlbmF2LXN1Ym5hdml0ZW0tLS0xY0Q0Ny5zaWRlbmF2LS0tc2VsZWN0ZWQtLS0xRUszeSA+IC5zaWRlbmF2LS0tbmF2aXRlbS0tLTl1TDVUOmhvdmVyIHtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi1zdWJuYXYtLS0xRU42MSA+IC5zaWRlbmF2LS0tc2lkZW5hdi1zdWJuYXZpdGVtLS0tMWNENDcgPiAuc2lkZW5hdi0tLW5hdml0ZW0tLS05dUw1VCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGNvbG9yOiAjMjIyO1xcbiAgZm9udC1zaXplOiAxM3B4O1xcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XFxuICBwYWRkaW5nOiAwIDI0cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5zaWRlbmF2LS0tc2lkZW5hdi1zdWJuYXYtLS0xRU42MSA+IC5zaWRlbmF2LS0tc2lkZW5hdi1zdWJuYXZpdGVtLS0tMWNENDcgPiAuc2lkZW5hdi0tLW5hdml0ZW0tLS05dUw1VDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiAjZWVlO1xcbn1cXG4uc2lkZW5hdi0tLXNpZGVuYXYtc3VibmF2LS0tMUVONjEgPiAuc2lkZW5hdi0tLXNpZGVuYXYtc3VibmF2aXRlbS0tLTFjRDQ3ID4gLnNpZGVuYXYtLS1uYXZpdGVtLS0tOXVMNVQ6Zm9jdXMge1xcbiAgb3V0bGluZTogMDtcXG59XFxuLnNpZGVuYXYtLS1zaWRlbmF2LS0tXzJ0QlAge1xcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xcbn1cXG4uc2lkZW5hdi0tLXNpZGVuYXYtLS1fMnRCUCAqLFxcbi5zaWRlbmF2LS0tc2lkZW5hdi0tLV8ydEJQICo6YmVmb3JlLFxcbi5zaWRlbmF2LS0tc2lkZW5hdi0tLV8ydEJQICo6YWZ0ZXIge1xcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBpbmhlcml0O1xcbiAgLW1vei1ib3gtc2l6aW5nOiBpbmhlcml0O1xcbiAgYm94LXNpemluZzogaW5oZXJpdDtcXG59XFxuXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtc2lkZW5hdi5jc3MubWFwKi9cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvQHRyZW5kbWljcm8vcmVhY3Qtc2lkZW5hdi9kaXN0L3JlYWN0LXNpZGVuYXYuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLG1IQUFtSDtBQUNuSDtFQUNFLGtCQUFrQjtFQUNsQixNQUFNO0VBQ04sU0FBUztFQUNULE9BQU87RUFDUCxhQUFhO0VBQ2IsZUFBZTtFQUNmLG1CQUFtQjtFQUNuQixrQ0FBa0M7RUFDbEMsK0JBQStCO0VBQy9CLDZCQUE2QjtFQUM3Qiw4QkFBOEI7RUFDOUIsMEJBQTBCO0FBQzVCO0FBQ0E7RUFDRSxhQUFhO0FBQ2Y7QUFDQTtFQUNFLGNBQWM7QUFDaEI7QUFDQTtFQUNFLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsbUJBQW1CO0VBQ25CLFVBQVU7RUFDVixnQkFBZ0I7RUFDaEIsWUFBWTtFQUNaLHVDQUF1QztFQUN2QyxvQ0FBb0M7RUFDcEMsa0NBQWtDO0VBQ2xDLG1DQUFtQztFQUNuQywrQkFBK0I7QUFDakM7QUFDQTtFQUNFLGVBQWU7QUFDakI7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQixZQUFZO0VBQ1osV0FBVztFQUNYLFdBQVc7RUFDWCxXQUFXO0VBQ1gsdUJBQXVCO0VBQ3ZCLGdCQUFnQjtFQUNoQix3QkFBd0I7RUFDeEIsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxjQUFjO0FBQ2hCO0FBQ0E7RUFDRSxhQUFhO0FBQ2Y7QUFDQTtFQUNFLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsWUFBWTtFQUNaLFdBQVc7RUFDWCxZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLE1BQU07RUFDTixXQUFXO0FBQ2I7QUFDQTtFQUNFLGFBQWE7QUFDZjtBQUNBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGFBQWE7RUFDYixpRUFBaUU7RUFDakUseUJBQXlCO0FBQzNCO0FBQ0E7RUFDRSxZQUFZO0VBQ1osV0FBVztFQUNYLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsTUFBTTtFQUNOLFdBQVc7QUFDYjtBQUNBO0VBQ0UsV0FBVztBQUNiO0FB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RUFDdkQsbURBQW1EO0FBQ3JEO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixVQUFVO0VBQ1YsU0FBUztFQUNULE1BQU07RUFDTixVQUFVO0VBQ1YsZ0JBQWdCO0VBQ2hCLHNCQUFzQjtFQUN0QixpREFBaUQ7RUFDakQseUNBQXlDO0FBQzNDO0FBQ0E7RUFDRSxjQUFjO0VBQ2QsaUJBQWlCO0VBQ2pCLDZCQUE2QjtFQUM3QixlQUFlO0VBQ2YsbUJBQW1CO0FBQ3JCO0FBQ0E7RUFDRSxlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLGNBQWM7RUFDZCxpQkFBaUI7RUFDakIsZ0JBQWdCO0VBQ2hCLGVBQWU7QUFDakI7QUFDQTtFQUNFLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsY0FBYztFQUNkLHFCQUFxQjtFQUNyQixXQUFXO0VBQ1gsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsZUFBZTtBQUNqQjtBQUNBO0VBQ0UsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxVQUFVO0FBQ1o7QUFDQTtFQUNFLDhCQUE4QjtFQUM5QiwyQkFBMkI7RUFDM0Isc0JBQXNCO0VBQ3RCLGlCQUFpQjtBQUNuQjtBQUNBOzs7RUFHRSwyQkFBMkI7RUFDM0Isd0JBQXdCO0VBQ3hCLG1CQUFtQjtBQUNyQjs7QUFFQSwyQ0FBMkNcIixcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJpbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbi8vIEl0IHNob3VsZCB0byBiZSBub3RlZCB0aGF0IHRoaXMgZnVuY3Rpb24gaXNuJ3QgZXF1aXZhbGVudCB0byBgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemVgLlxuLy9cbi8vIEEgc3RyaWN0IGNhcGl0YWxpemF0aW9uIHNob3VsZCB1cHBlcmNhc2UgdGhlIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQgaW4gdGhlIHNlbnRlbmNlLlxuLy8gV2Ugb25seSBoYW5kbGUgdGhlIGZpcnN0IHdvcmQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogXFxgY2FwaXRhbGl6ZShzdHJpbmcpXFxgIGV4cGVjdHMgYSBzdHJpbmcgYXJndW1lbnQuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNykpO1xuICB9XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzO1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgYmFzZUlzTmF0aXZlID0gcmVxdWlyZSgnLi9fYmFzZUlzTmF0aXZlJyksXG4gICAgZ2V0VmFsdWUgPSByZXF1aXJlKCcuL19nZXRWYWx1ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5hdGl2ZTtcbiIsImltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4uL21lcmdlJztcbmltcG9ydCB7IGdldFBhdGgsIGdldFN0eWxlVmFsdWUgYXMgZ2V0VmFsdWUgfSBmcm9tICcuLi9zdHlsZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cywgY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0LCByZW1vdmVVbnVzZWRCcmVha3BvaW50cyB9IGZyb20gJy4uL2JyZWFrcG9pbnRzJztcbmltcG9ydCBkZWZhdWx0U3hDb25maWcgZnJvbSAnLi9kZWZhdWx0U3hDb25maWcnO1xuZnVuY3Rpb24gb2JqZWN0c0hhdmVTYW1lS2V5cyguLi5vYmplY3RzKSB7XG4gIGNvbnN0IGFsbEtleXMgPSBvYmplY3RzLnJlZHVjZSgoa2V5cywgb2JqZWN0KSA9PiBrZXlzLmNvbmNhdChPYmplY3Qua2V5cyhvYmplY3QpKSwgW10pO1xuICBjb25zdCB1bmlvbiA9IG5ldyBTZXQoYWxsS2V5cyk7XG4gIHJldHVybiBvYmplY3RzLmV2ZXJ5KG9iamVjdCA9PiB1bmlvbi5zaXplID09PSBPYmplY3Qua2V5cyhvYmplY3QpLmxlbmd0aCk7XG59XG5mdW5jdGlvbiBjYWxsSWZGbihtYXliZUZuLCBhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXliZUZuID09PSAnZnVuY3Rpb24nID8gbWF5YmVGbihhcmcpIDogbWF5YmVGbjtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIHVuc3RhYmxlX2NyZWF0ZVN0eWxlRnVuY3Rpb25TeCgpIHtcbiAgZnVuY3Rpb24gZ2V0VGhlbWVWYWx1ZShwcm9wLCB2YWwsIHRoZW1lLCBjb25maWcpIHtcbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIFtwcm9wXTogdmFsLFxuICAgICAgdGhlbWVcbiAgICB9O1xuICAgIGNvbnN0IG9wdGlvbnMgPSBjb25maWdbcHJvcF07XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbcHJvcF06IHZhbFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgY3NzUHJvcGVydHkgPSBwcm9wLFxuICAgICAgdGhlbWVLZXksXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICBzdHlsZVxuICAgIH0gPSBvcHRpb25zO1xuICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gVE9ETyB2NjogcmVtb3ZlLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM4MTIzXG4gICAgaWYgKHRoZW1lS2V5ID09PSAndHlwb2dyYXBoeScgJiYgdmFsID09PSAnaW5oZXJpdCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtwcm9wXTogdmFsXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB0aGVtZU1hcHBpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwge307XG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICByZXR1cm4gc3R5bGUocHJvcHMpO1xuICAgIH1cbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgaWYgKHByb3BWYWx1ZUZpbmFsID09PSB2YWx1ZSAmJiB0eXBlb2YgcHJvcFZhbHVlRmluYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEhhdmVuJ3QgZm91bmQgdmFsdWVcbiAgICAgICAgdmFsdWUgPSBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgYCR7cHJvcH0ke3Byb3BWYWx1ZUZpbmFsID09PSAnZGVmYXVsdCcgPyAnJyA6IGNhcGl0YWxpemUocHJvcFZhbHVlRmluYWwpfWAsIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH1cbiAgICAgIGlmIChjc3NQcm9wZXJ0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2Nzc1Byb3BlcnR5XTogdmFsdWVcbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHZhbCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBzdHlsZUZ1bmN0aW9uU3gocHJvcHMpIHtcbiAgICB2YXIgX3RoZW1lJHVuc3RhYmxlX3N4Q29uO1xuICAgIGNvbnN0IHtcbiAgICAgIHN4LFxuICAgICAgdGhlbWUgPSB7fVxuICAgIH0gPSBwcm9wcyB8fCB7fTtcbiAgICBpZiAoIXN4KSB7XG4gICAgICByZXR1cm4gbnVsbDsgLy8gRW1vdGlvbiAmIHN0eWxlZC1jb21wb25lbnRzIHdpbGwgbmVnbGVjdCBudWxsXG4gICAgfVxuICAgIGNvbnN0IGNvbmZpZyA9IChfdGhlbWUkdW5zdGFibGVfc3hDb24gPSB0aGVtZS51bnN0YWJsZV9zeENvbmZpZykgIT0gbnVsbCA/IF90aGVtZSR1bnN0YWJsZV9zeENvbiA6IGRlZmF1bHRTeENvbmZpZztcblxuICAgIC8qXG4gICAgICogUmVjZWl2ZSBgc3hJbnB1dGAgYXMgb2JqZWN0IG9yIGNhbGxiYWNrXG4gICAgICogYW5kIHRoZW4gcmVjdXJzaXZlbHkgY2hlY2sga2V5cyAmIHZhbHVlcyB0byBjcmVhdGUgbWVkaWEgcXVlcnkgb2JqZWN0IHN0eWxlcy5cbiAgICAgKiAodGhlIHJlc3VsdCB3aWxsIGJlIHVzZWQgaW4gYHN0eWxlZGApXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhdmVyc2Uoc3hJbnB1dCkge1xuICAgICAgbGV0IHN4T2JqZWN0ID0gc3hJbnB1dDtcbiAgICAgIGlmICh0eXBlb2Ygc3hJbnB1dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzeE9iamVjdCA9IHN4SW5wdXQodGhlbWUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3hJbnB1dCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gdmFsdWVcbiAgICAgICAgcmV0dXJuIHN4SW5wdXQ7XG4gICAgICB9XG4gICAgICBpZiAoIXN4T2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgZW1wdHlCcmVha3BvaW50cyA9IGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCh0aGVtZS5icmVha3BvaW50cyk7XG4gICAgICBjb25zdCBicmVha3BvaW50c0tleXMgPSBPYmplY3Qua2V5cyhlbXB0eUJyZWFrcG9pbnRzKTtcbiAgICAgIGxldCBjc3MgPSBlbXB0eUJyZWFrcG9pbnRzO1xuICAgICAgT2JqZWN0LmtleXMoc3hPYmplY3QpLmZvckVhY2goc3R5bGVLZXkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGNhbGxJZkZuKHN4T2JqZWN0W3N0eWxlS2V5XSwgdGhlbWUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnW3N0eWxlS2V5XSkge1xuICAgICAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGdldFRoZW1lVmFsdWUoc3R5bGVLZXksIHZhbHVlLCB0aGVtZSwgY29uZmlnKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCBicmVha3BvaW50c1ZhbHVlcyA9IGhhbmRsZUJyZWFrcG9pbnRzKHtcbiAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICB9LCB2YWx1ZSwgeCA9PiAoe1xuICAgICAgICAgICAgICAgIFtzdHlsZUtleV06IHhcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICBpZiAob2JqZWN0c0hhdmVTYW1lS2V5cyhicmVha3BvaW50c1ZhbHVlcywgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY3NzW3N0eWxlS2V5XSA9IHN0eWxlRnVuY3Rpb25TeCh7XG4gICAgICAgICAgICAgICAgICBzeDogdmFsdWUsXG4gICAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgYnJlYWtwb2ludHNWYWx1ZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgZ2V0VGhlbWVWYWx1ZShzdHlsZUtleSwgdmFsdWUsIHRoZW1lLCBjb25maWcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzS2V5cywgY3NzKTtcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc3gpID8gc3gubWFwKHRyYXZlcnNlKSA6IHRyYXZlcnNlKHN4KTtcbiAgfVxuICByZXR1cm4gc3R5bGVGdW5jdGlvblN4O1xufVxuY29uc3Qgc3R5bGVGdW5jdGlvblN4ID0gdW5zdGFibGVfY3JlYXRlU3R5bGVGdW5jdGlvblN4KCk7XG5zdHlsZUZ1bmN0aW9uU3guZmlsdGVyUHJvcHMgPSBbJ3N4J107XG5leHBvcnQgZGVmYXVsdCBzdHlsZUZ1bmN0aW9uU3g7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTMgMTNoOFYzSDN6bTAgOGg4di02SDN6bTEwIDBoOFYxMWgtOHptMC0xOHY2aDhWM3pcIlxufSksICdEYXNoYm9hcmQnKTsiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIGNsaWVudFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTYgMTFjMS42NiAwIDIuOTktMS4zNCAyLjk5LTNTMTcuNjYgNSAxNiA1Yy0xLjY2IDAtMyAxLjM0LTMgM3MxLjM0IDMgMyAzbS04IDBjMS42NiAwIDIuOTktMS4zNCAyLjk5LTNTOS42NiA1IDggNUM2LjM0IDUgNSA2LjM0IDUgOHMxLjM0IDMgMyAzbTAgMmMtMi4zMyAwLTcgMS4xNy03IDMuNVYxOWgxNHYtMi41YzAtMi4zMy00LjY3LTMuNS03LTMuNW04IDBjLS4yOSAwLS42Mi4wMi0uOTcuMDUgMS4xNi44NCAxLjk3IDEuOTcgMS45NyAzLjQ1VjE5aDZ2LTIuNWMwLTIuMzMtNC42Ny0zLjUtNy0zLjVcIlxufSksICdQZW9wbGUnKTsiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIGNsaWVudFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNNCA2aDE4VjRINGMtMS4xIDAtMiAuOS0yIDJ2MTFIMHYzaDE0di0zSDR6bTE5IDJoLTZjLS41NSAwLTEgLjQ1LTEgMXYxMGMwIC41NS40NSAxIDEgMWg2Yy41NSAwIDEtLjQ1IDEtMVY5YzAtLjU1LS40NS0xLTEtMW0tMSA5aC00di03aDR6XCJcbn0pLCAnRGV2aWNlcycpOyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2UgY2xpZW50XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0zIDZoMThWNEgzYy0xLjEgMC0yIC45LTIgMnYxMmMwIDEuMS45IDIgMiAyaDR2LTJIM3ptMTAgNkg5djEuNzhjLS42MS41NS0xIDEuMzMtMSAyLjIycy4zOSAxLjY3IDEgMi4yMlYyMGg0di0xLjc4Yy42MS0uNTUgMS0xLjM0IDEtMi4yMnMtLjM5LTEuNjctMS0yLjIyem0tMiA1LjVjLS44MyAwLTEuNS0uNjctMS41LTEuNXMuNjctMS41IDEuNS0xLjUgMS41LjY3IDEuNSAxLjUtLjY3IDEuNS0xLjUgMS41TTIyIDhoLTZjLS41IDAtMSAuNS0xIDF2MTBjMCAuNS41IDEgMSAxaDZjLjUgMCAxLS41IDEtMVY5YzAtLjUtLjUtMS0xLTFtLTEgMTBoLTR2LThoNHpcIlxufSksICdEZXZpY2VzT3RoZXInKTsiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIGNsaWVudFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNNCA5aDR2MTFINHptMTIgNGg0djdoLTR6bS02LTloNHYxNmgtNHpcIlxufSksICdCYXJDaGFydCcpOyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2UgY2xpZW50XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIm0xMS45OSAxOC41NC03LjM3LTUuNzNMMyAxNC4wN2w5IDcgOS03LTEuNjMtMS4yN3pNMTIgMTZsNy4zNi01LjczTDIxIDlsLTktNy05IDcgMS42MyAxLjI3elwiXG59KSwgJ0xheWVycycpOyIsIlwidXNlIHN0cmljdFwiO1xuJ3VzZSBjbGllbnQnO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShlKSB7IGlmIChcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYWtNYXApIHJldHVybiBudWxsOyB2YXIgciA9IG5ldyBXZWFrTWFwKCksIHQgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBlID8gdCA6IHI7IH0pKGUpOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChlLCByKSB7IGlmICghciAmJiBlICYmIGUuX19lc01vZHVsZSkgcmV0dXJuIGU7IGlmIChudWxsID09PSBlIHx8IFwib2JqZWN0XCIgIT0gdHlwZW9mIGUgJiYgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBlKSByZXR1cm4geyBkZWZhdWx0OiBlIH07IHZhciB0ID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKHIpOyBpZiAodCAmJiB0LmhhcyhlKSkgcmV0dXJuIHQuZ2V0KGUpOyB2YXIgbiA9IHsgX19wcm90b19fOiBudWxsIH0sIGEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIgdSBpbiBlKSBpZiAoXCJkZWZhdWx0XCIgIT09IHUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIHUpKSB7IHZhciBpID0gYSA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgdSkgOiBudWxsOyBpICYmIChpLmdldCB8fCBpLnNldCkgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgdSwgaSkgOiBuW3VdID0gZVt1XTsgfSByZXR1cm4gbi5kZWZhdWx0ID0gZSwgdCAmJiB0LnNldChlLCBuKSwgbjsgfVxudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTAgMTVsNS4xOS0zTDEwIDl2Nm0xMS41Ni03LjgzYy4xMy40Ny4yMiAxLjEuMjggMS45LjA3LjguMSAxLjQ5LjEgMi4wOUwyMiAxMmMwIDIuMTktLjE2IDMuOC0uNDQgNC44My0uMjUuOS0uODMgMS40OC0xLjczIDEuNzMtLjQ3LjEzLTEuMzMuMjItMi42NS4yOC0xLjMuMDctMi40OS4xLTMuNTkuMUwxMiAxOWMtNC4xOSAwLTYuOC0uMTYtNy44My0uNDQtLjktLjI1LTEuNDgtLjgzLTEuNzMtMS43My0uMTMtLjQ3LS4yMi0xLjEtLjI4LTEuOS0uMDctLjgtLjEtMS40OS0uMS0yLjA5TDIgMTJjMC0yLjE5LjE2LTMuOC40NC00LjgzLjI1LS45LjgzLTEuNDggMS43My0xLjczLjQ3LS4xMyAxLjMzLS4yMiAyLjY1LS4yOCAxLjMtLjA3IDIuNDktLjEgMy41OS0uMUwxMiA1YzQuMTkgMCA2LjguMTYgNy44My40NC45LjI1IDEuNDguODMgMS43MyAxLjczelwiXG59KSwgJ1lvdVR1YmUnKTsiLCJcInVzZSBzdHJpY3RcIjtcbid1c2UgY2xpZW50JztcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoZSkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKSByZXR1cm4gbnVsbDsgdmFyIHIgPSBuZXcgV2Vha01hcCgpLCB0ID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSA/IHQgOiByOyB9KShlKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoZSwgcikgeyBpZiAoIXIgJiYgZSAmJiBlLl9fZXNNb2R1bGUpIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9IHR5cGVvZiBlICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShyKTsgaWYgKHQgJiYgdC5oYXMoZSkpIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7IF9fcHJvdG9fXzogbnVsbCB9LCBhID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIHUgaW4gZSkgaWYgKFwiZGVmYXVsdFwiICE9PSB1ICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCB1KSkgeyB2YXIgaSA9IGEgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHUpIDogbnVsbDsgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIHUsIGkpIDogblt1XSA9IGVbdV07IH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH1cbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTIyLjQ2IDZjLS43Ny4zNS0xLjYuNTgtMi40Ni42OS44OC0uNTMgMS41Ni0xLjM3IDEuODgtMi4zOC0uODMuNS0xLjc1Ljg1LTIuNzIgMS4wNUMxOC4zNyA0LjUgMTcuMjYgNCAxNiA0Yy0yLjM1IDAtNC4yNyAxLjkyLTQuMjcgNC4yOSAwIC4zNC4wNC42Ny4xMS45OEM4LjI4IDkuMDkgNS4xMSA3LjM4IDMgNC43OWMtLjM3LjYzLS41OCAxLjM3LS41OCAyLjE1IDAgMS40OS43NSAyLjgxIDEuOTEgMy41Ni0uNzEgMC0xLjM3LS4yLTEuOTUtLjV2LjAzYzAgMi4wOCAxLjQ4IDMuODIgMy40NCA0LjIxYTQuMjIgNC4yMiAwIDAgMS0xLjkzLjA3IDQuMjggNC4yOCAwIDAgMCA0IDIuOTggOC41MjEgOC41MjEgMCAwIDEtNS4zMyAxLjg0Yy0uMzQgMC0uNjgtLjAyLTEuMDItLjA2QzMuNDQgMjAuMjkgNS43IDIxIDguMTIgMjEgMTYgMjEgMjAuMzMgMTQuNDYgMjAuMzMgOC43OWMwLS4xOSAwLS4zNy0uMDEtLjU2Ljg0LS42IDEuNTYtMS4zNiAyLjE0LTIuMjN6XCJcbn0pLCAnVHdpdHRlcicpOyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2UgY2xpZW50XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIm0yMiA5LjI0LTcuMTktLjYyTDEyIDIgOS4xOSA4LjYzIDIgOS4yNGw1LjQ2IDQuNzNMNS44MiAyMSAxMiAxNy4yNyAxOC4xOCAyMWwtMS42My03LjAzek0xMiAxNS40bC0zLjc2IDIuMjcgMS00LjI4LTMuMzItMi44OCA0LjM4LS4zOEwxMiA2LjFsMS43MSA0LjA0IDQuMzguMzgtMy4zMiAyLjg4IDEgNC4yOHpcIlxufSksICdTdGFyQm9yZGVyJyk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwibTIgMTkuOTkgNy41LTcuNTEgNCA0IDcuMDktNy45N0wyMiA5LjkybC04LjUgOS41Ni00LTQtNiA2LjAxem0xLjUtNC41IDYtNi4wMSA0IDRMMjIgMy45MmwtMS40MS0xLjQxLTcuMDkgNy45Ny00LTRMMiAxMy45OXpcIlxufSksICdTdGFja2VkTGluZUNoYXJ0Jyk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE1IDJINmMtMS4xIDAtMiAuOS0yIDJ2MTZjMCAxLjEuOSAyIDIgMmgxMmMxLjEgMCAyLS45IDItMlY3ek02IDIwVjRoOHY0aDR2MTJ6bTEwLTEwdjVjMCAyLjIxLTEuNzkgNC00IDRzLTQtMS43OS00LTRWOC41YzAtMS40NyAxLjI2LTIuNjQgMi43Ni0yLjQ5IDEuMy4xMyAyLjI0IDEuMzIgMi4yNCAyLjYzVjE1aC0yVjguNWMwLS4yOC0uMjItLjUtLjUtLjVzLS41LjIyLS41LjVWMTVjMCAxLjEuOSAyIDIgMnMyLS45IDItMnYtNXpcIlxufSksICdGaWxlUHJlc2VudCcpOyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2UgY2xpZW50XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoWy8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcImNpcmNsZVwiLCB7XG4gIGN4OiBcIjEwXCIsXG4gIGN5OiBcIjhcIixcbiAgcjogXCI0XCJcbn0sIFwiMFwiKSwgLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEwLjY3IDEzLjAyYy0uMjItLjAxLS40NC0uMDItLjY3LS4wMi0yLjQyIDAtNC42OC42Ny02LjYxIDEuODItLjg4LjUyLTEuMzkgMS41LTEuMzkgMi41M1YyMGg5LjI2Yy0uNzktMS4xMy0xLjI2LTIuNTEtMS4yNi00IDAtMS4wNy4yNS0yLjA3LjY3LTIuOThNMjAuNzUgMTZjMC0uMjItLjAzLS40Mi0uMDYtLjYzbDEuMTQtMS4wMS0xLTEuNzMtMS40NS40OWMtLjMyLS4yNy0uNjgtLjQ4LTEuMDgtLjYzTDE4IDExaC0ybC0uMyAxLjQ5Yy0uNC4xNS0uNzYuMzYtMS4wOC42M2wtMS40NS0uNDktMSAxLjczIDEuMTQgMS4wMWMtLjAzLjIxLS4wNi40MS0uMDYuNjNzLjAzLjQyLjA2LjYzbC0xLjE0IDEuMDEgMSAxLjczIDEuNDUtLjQ5Yy4zMi4yNy42OC40OCAxLjA4LjYzTDE2IDIxaDJsLjMtMS40OWMuNC0uMTUuNzYtLjM2IDEuMDgtLjYzbDEuNDUuNDkgMS0xLjczLTEuMTQtMS4wMWMuMDMtLjIxLjA2LS40MS4wNi0uNjNNMTcgMThjLTEuMSAwLTItLjktMi0ycy45LTIgMi0yIDIgLjkgMiAyLS45IDItMiAyXCJcbn0sIFwiMVwiKV0sICdNYW5hZ2VBY2NvdW50cycpOyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2UgY2xpZW50XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0xOSA2LjQxIDE3LjU5IDUgMTIgMTAuNTkgNi40MSA1IDUgNi40MSAxMC41OSAxMiA1IDE3LjU5IDYuNDEgMTkgMTIgMTMuNDEgMTcuNTkgMTkgMTkgMTcuNTkgMTMuNDEgMTJ6XCJcbn0pLCAnQ2xvc2UnKTsiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIGNsaWVudFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgMkM2LjQ3IDIgMiA2LjQ3IDIgMTJzNC40NyAxMCAxMCAxMCAxMC00LjQ3IDEwLTEwUzE3LjUzIDIgMTIgMm01IDEzLjU5TDE1LjU5IDE3IDEyIDEzLjQxIDguNDEgMTcgNyAxNS41OSAxMC41OSAxMiA3IDguNDEgOC40MSA3IDEyIDEwLjU5IDE1LjU5IDcgMTcgOC40MSAxMy40MSAxMnpcIlxufSksICdDYW5jZWwnKTsiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIGNsaWVudFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNNiAyYy0xLjEgMC0xLjk5LjktMS45OSAyTDQgMjBjMCAxLjEuODkgMiAxLjk5IDJIMThjMS4xIDAgMi0uOSAyLTJWOGwtNi02em03IDdWMy41TDE4LjUgOXpcIlxufSksICdJbnNlcnREcml2ZUZpbGUnKTsiLCJ2YXIgZGVib3VuY2UgPSByZXF1aXJlKCcuL2RlYm91bmNlJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICpcbiAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdGhyb3R0bGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIGNsaWVudFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTkgNEg1Yy0xLjExIDAtMiAuOS0yIDJ2MTJjMCAxLjEuODkgMiAyIDJoNHYtMkg1VjhoMTR2MTBoLTR2Mmg0YzEuMSAwIDItLjkgMi0yVjZjMC0xLjEtLjg5LTItMi0ybS03IDYtNCA0aDN2Nmgydi02aDN6XCJcbn0pLCAnT3BlbkluQnJvd3NlcicpOyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2UgY2xpZW50XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIm0xMy4xMSA1LjcyLS41NyAyLjg5Yy0uMTIuNTkuMDQgMS4yLjQyIDEuNjYuMzguNDYuOTQuNzMgMS41NC43M0gyMHYxLjA4TDE3LjQzIDE4SDkuMzRjLS4xOCAwLS4zNC0uMTYtLjM0LS4zNFY5Ljgyek0xNCAyIDcuNTkgOC40MUM3LjIxIDguNzkgNyA5LjMgNyA5LjgzdjcuODNDNyAxOC45NSA4LjA1IDIwIDkuMzQgMjBoOC4xYy43MSAwIDEuMzYtLjM3IDEuNzItLjk3bDIuNjctNi4xNWMuMTEtLjI1LjE3LS41Mi4xNy0uOFYxMWMwLTEuMS0uOS0yLTItMmgtNS41bC45Mi00LjY1Yy4wNS0uMjIuMDItLjQ2LS4wOC0uNjYtLjIzLS40NS0uNTItLjg2LS44OC0xLjIyek00IDlIMnYxMWgyYy41NSAwIDEtLjQ1IDEtMXYtOWMwLS41NS0uNDUtMS0xLTFcIlxufSksICdUaHVtYlVwT2ZmQWx0Jyk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDQuNUM3IDQuNSAyLjczIDcuNjEgMSAxMmMxLjczIDQuMzkgNiA3LjUgMTEgNy41czkuMjctMy4xMSAxMS03LjVjLTEuNzMtNC4zOS02LTcuNS0xMS03LjVNMTIgMTdjLTIuNzYgMC01LTIuMjQtNS01czIuMjQtNSA1LTUgNSAyLjI0IDUgNS0yLjI0IDUtNSA1bTAtOGMtMS42NiAwLTMgMS4zNC0zIDNzMS4zNCAzIDMgMyAzLTEuMzQgMy0zLTEuMzQtMy0zLTNcIlxufSksICdWaXNpYmlsaXR5Jyk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTMgMThoMTh2LTJIM3ptMC01aDE4di0ySDN6bTAtN3YyaDE4VjZ6XCJcbn0pLCAnTWVudScpOyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2UgY2xpZW50XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgX2RlZmF1bHQgPSBleHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0xMiAyMmMxLjEgMCAyLS45IDItMmgtNGMwIDEuMS44OSAyIDIgMm02LTZ2LTVjMC0zLjA3LTEuNjQtNS42NC00LjUtNi4zMlY0YzAtLjgzLS42Ny0xLjUtMS41LTEuNXMtMS41LjY3LTEuNSAxLjV2LjY4QzcuNjMgNS4zNiA2IDcuOTIgNiAxMXY1bC0yIDJ2MWgxNnYtMXpcIlxufSksICdOb3RpZmljYXRpb25zJyk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciBfZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwibTE3IDctMS40MSAxLjQxTDE4LjE3IDExSDh2MmgxMC4xN2wtMi41OCAyLjU4TDE3IDE3bDUtNXpNNCA1aDhWM0g0Yy0xLjEgMC0yIC45LTIgMnYxNGMwIDEuMS45IDIgMiAyaDh2LTJINHpcIlxufSksICdMb2dvdXQnKTsiLCJcInVzZSBzdHJpY3RcIjtcblwidXNlIGNsaWVudFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgX2NyZWF0ZVN2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2NyZWF0ZVN2Z0ljb25cIikpO1xudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTUuNDEgNy40MSAxNCA2bC02IDYgNiA2IDEuNDEtMS40MUwxMC44MyAxMnpcIlxufSksICdDaGV2cm9uTGVmdCcpOyIsImNvbnN0IGNvbW1vbiA9IHtcbiAgYmxhY2s6ICcjMDAwJyxcbiAgd2hpdGU6ICcjZmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1vbjsiLCJjb25zdCBncmV5ID0ge1xuICA1MDogJyNmYWZhZmEnLFxuICAxMDA6ICcjZjVmNWY1JyxcbiAgMjAwOiAnI2VlZWVlZScsXG4gIDMwMDogJyNlMGUwZTAnLFxuICA0MDA6ICcjYmRiZGJkJyxcbiAgNTAwOiAnIzllOWU5ZScsXG4gIDYwMDogJyM3NTc1NzUnLFxuICA3MDA6ICcjNjE2MTYxJyxcbiAgODAwOiAnIzQyNDI0MicsXG4gIDkwMDogJyMyMTIxMjEnLFxuICBBMTAwOiAnI2Y1ZjVmNScsXG4gIEEyMDA6ICcjZWVlZWVlJyxcbiAgQTQwMDogJyNiZGJkYmQnLFxuICBBNzAwOiAnIzYxNjE2MSdcbn07XG5leHBvcnQgZGVmYXVsdCBncmV5OyIsImNvbnN0IHB1cnBsZSA9IHtcbiAgNTA6ICcjZjNlNWY1JyxcbiAgMTAwOiAnI2UxYmVlNycsXG4gIDIwMDogJyNjZTkzZDgnLFxuICAzMDA6ICcjYmE2OGM4JyxcbiAgNDAwOiAnI2FiNDdiYycsXG4gIDUwMDogJyM5YzI3YjAnLFxuICA2MDA6ICcjOGUyNGFhJyxcbiAgNzAwOiAnIzdiMWZhMicsXG4gIDgwMDogJyM2YTFiOWEnLFxuICA5MDA6ICcjNGExNDhjJyxcbiAgQTEwMDogJyNlYTgwZmMnLFxuICBBMjAwOiAnI2UwNDBmYicsXG4gIEE0MDA6ICcjZDUwMGY5JyxcbiAgQTcwMDogJyNhYTAwZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgcHVycGxlOyIsImNvbnN0IG9yYW5nZSA9IHtcbiAgNTA6ICcjZmZmM2UwJyxcbiAgMTAwOiAnI2ZmZTBiMicsXG4gIDIwMDogJyNmZmNjODAnLFxuICAzMDA6ICcjZmZiNzRkJyxcbiAgNDAwOiAnI2ZmYTcyNicsXG4gIDUwMDogJyNmZjk4MDAnLFxuICA2MDA6ICcjZmI4YzAwJyxcbiAgNzAwOiAnI2Y1N2MwMCcsXG4gIDgwMDogJyNlZjZjMDAnLFxuICA5MDA6ICcjZTY1MTAwJyxcbiAgQTEwMDogJyNmZmQxODAnLFxuICBBMjAwOiAnI2ZmYWI0MCcsXG4gIEE0MDA6ICcjZmY5MTAwJyxcbiAgQTcwMDogJyNmZjZkMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgb3JhbmdlOyIsImNvbnN0IGJsdWUgPSB7XG4gIDUwOiAnI2UzZjJmZCcsXG4gIDEwMDogJyNiYmRlZmInLFxuICAyMDA6ICcjOTBjYWY5JyxcbiAgMzAwOiAnIzY0YjVmNicsXG4gIDQwMDogJyM0MmE1ZjUnLFxuICA1MDA6ICcjMjE5NmYzJyxcbiAgNjAwOiAnIzFlODhlNScsXG4gIDcwMDogJyMxOTc2ZDInLFxuICA4MDA6ICcjMTU2NWMwJyxcbiAgOTAwOiAnIzBkNDdhMScsXG4gIEExMDA6ICcjODJiMWZmJyxcbiAgQTIwMDogJyM0NDhhZmYnLFxuICBBNDAwOiAnIzI5NzlmZicsXG4gIEE3MDA6ICcjMjk2MmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGJsdWU7IiwiY29uc3QgbGlnaHRCbHVlID0ge1xuICA1MDogJyNlMWY1ZmUnLFxuICAxMDA6ICcjYjNlNWZjJyxcbiAgMjAwOiAnIzgxZDRmYScsXG4gIDMwMDogJyM0ZmMzZjcnLFxuICA0MDA6ICcjMjliNmY2JyxcbiAgNTAwOiAnIzAzYTlmNCcsXG4gIDYwMDogJyMwMzliZTUnLFxuICA3MDA6ICcjMDI4OGQxJyxcbiAgODAwOiAnIzAyNzdiZCcsXG4gIDkwMDogJyMwMTU3OWInLFxuICBBMTAwOiAnIzgwZDhmZicsXG4gIEEyMDA6ICcjNDBjNGZmJyxcbiAgQTQwMDogJyMwMGIwZmYnLFxuICBBNzAwOiAnIzAwOTFlYSdcbn07XG5leHBvcnQgZGVmYXVsdCBsaWdodEJsdWU7IiwiY29uc3QgZ3JlZW4gPSB7XG4gIDUwOiAnI2U4ZjVlOScsXG4gIDEwMDogJyNjOGU2YzknLFxuICAyMDA6ICcjYTVkNmE3JyxcbiAgMzAwOiAnIzgxYzc4NCcsXG4gIDQwMDogJyM2NmJiNmEnLFxuICA1MDA6ICcjNGNhZjUwJyxcbiAgNjAwOiAnIzQzYTA0NycsXG4gIDcwMDogJyMzODhlM2MnLFxuICA4MDA6ICcjMmU3ZDMyJyxcbiAgOTAwOiAnIzFiNWUyMCcsXG4gIEExMDA6ICcjYjlmNmNhJyxcbiAgQTIwMDogJyM2OWYwYWUnLFxuICBBNDAwOiAnIzAwZTY3NicsXG4gIEE3MDA6ICcjMDBjODUzJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZWVuOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm1vZGVcIiwgXCJjb250cmFzdFRocmVzaG9sZFwiLCBcInRvbmFsT2Zmc2V0XCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBkYXJrZW4sIGdldENvbnRyYXN0UmF0aW8sIGxpZ2h0ZW4gfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgY29tbW9uIGZyb20gJy4uL2NvbG9ycy9jb21tb24nO1xuaW1wb3J0IGdyZXkgZnJvbSAnLi4vY29sb3JzL2dyZXknO1xuaW1wb3J0IHB1cnBsZSBmcm9tICcuLi9jb2xvcnMvcHVycGxlJztcbmltcG9ydCByZWQgZnJvbSAnLi4vY29sb3JzL3JlZCc7XG5pbXBvcnQgb3JhbmdlIGZyb20gJy4uL2NvbG9ycy9vcmFuZ2UnO1xuaW1wb3J0IGJsdWUgZnJvbSAnLi4vY29sb3JzL2JsdWUnO1xuaW1wb3J0IGxpZ2h0Qmx1ZSBmcm9tICcuLi9jb2xvcnMvbGlnaHRCbHVlJztcbmltcG9ydCBncmVlbiBmcm9tICcuLi9jb2xvcnMvZ3JlZW4nO1xuZXhwb3J0IGNvbnN0IGxpZ2h0ID0ge1xuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHRleHQuXG4gIHRleHQ6IHtcbiAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgdGV4dC5cbiAgICBwcmltYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjg3KScsXG4gICAgLy8gU2Vjb25kYXJ5IHRleHQuXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjYpJyxcbiAgICAvLyBEaXNhYmxlZCB0ZXh0IGhhdmUgZXZlbiBsb3dlciB2aXN1YWwgcHJvbWluZW5jZS5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknXG4gIH0sXG4gIC8vIFRoZSBjb2xvciB1c2VkIHRvIGRpdmlkZSBkaWZmZXJlbnQgZWxlbWVudHMuXG4gIGRpdmlkZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgLy8gVGhlIGJhY2tncm91bmQgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHN1cmZhY2VzLlxuICAvLyBDb25zaXN0ZW5jeSBiZXR3ZWVuIHRoZXNlIHZhbHVlcyBpcyBpbXBvcnRhbnQuXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogY29tbW9uLndoaXRlLFxuICAgIGRlZmF1bHQ6IGNvbW1vbi53aGl0ZVxuICB9LFxuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIGFjdGlvbiBlbGVtZW50cy5cbiAgYWN0aW9uOiB7XG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGFjdGl2ZSBhY3Rpb24gbGlrZSBhbiBpY29uIGJ1dHRvbi5cbiAgICBhY3RpdmU6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gaG92ZXJlZCBhY3Rpb24uXG4gICAgaG92ZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMDQpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDQsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgc2VsZWN0ZWQgYWN0aW9uLlxuICAgIHNlbGVjdGVkOiAncmdiYSgwLCAwLCAwLCAwLjA4KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjA4LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4yNiknLFxuICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjEyXG4gIH1cbn07XG5leHBvcnQgY29uc3QgZGFyayA9IHtcbiAgdGV4dDoge1xuICAgIHByaW1hcnk6IGNvbW1vbi53aGl0ZSxcbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknLFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBpY29uOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJ1xuICB9LFxuICBkaXZpZGVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogJyMxMjEyMTInLFxuICAgIGRlZmF1bHQ6ICcjMTIxMjEyJ1xuICB9LFxuICBhY3Rpb246IHtcbiAgICBhY3RpdmU6IGNvbW1vbi53aGl0ZSxcbiAgICBob3ZlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wOCxcbiAgICBzZWxlY3RlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNiknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4xNixcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMjRcbiAgfVxufTtcbmZ1bmN0aW9uIGFkZExpZ2h0T3JEYXJrKGludGVudCwgZGlyZWN0aW9uLCBzaGFkZSwgdG9uYWxPZmZzZXQpIHtcbiAgY29uc3QgdG9uYWxPZmZzZXRMaWdodCA9IHRvbmFsT2Zmc2V0LmxpZ2h0IHx8IHRvbmFsT2Zmc2V0O1xuICBjb25zdCB0b25hbE9mZnNldERhcmsgPSB0b25hbE9mZnNldC5kYXJrIHx8IHRvbmFsT2Zmc2V0ICogMS41O1xuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gbGlnaHRlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXRMaWdodCk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkYXJrJykge1xuICAgICAgaW50ZW50LmRhcmsgPSBkYXJrZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0RGFyayk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0UHJpbWFyeShtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IGJsdWVbMjAwXSxcbiAgICAgIGxpZ2h0OiBibHVlWzUwXSxcbiAgICAgIGRhcms6IGJsdWVbNDAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBibHVlWzcwMF0sXG4gICAgbGlnaHQ6IGJsdWVbNDAwXSxcbiAgICBkYXJrOiBibHVlWzgwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRTZWNvbmRhcnkobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBwdXJwbGVbMjAwXSxcbiAgICAgIGxpZ2h0OiBwdXJwbGVbNTBdLFxuICAgICAgZGFyazogcHVycGxlWzQwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogcHVycGxlWzUwMF0sXG4gICAgbGlnaHQ6IHB1cnBsZVszMDBdLFxuICAgIGRhcms6IHB1cnBsZVs3MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0RXJyb3IobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiByZWRbNTAwXSxcbiAgICAgIGxpZ2h0OiByZWRbMzAwXSxcbiAgICAgIGRhcms6IHJlZFs3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IHJlZFs3MDBdLFxuICAgIGxpZ2h0OiByZWRbNDAwXSxcbiAgICBkYXJrOiByZWRbODAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdEluZm8obW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBsaWdodEJsdWVbNDAwXSxcbiAgICAgIGxpZ2h0OiBsaWdodEJsdWVbMzAwXSxcbiAgICAgIGRhcms6IGxpZ2h0Qmx1ZVs3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IGxpZ2h0Qmx1ZVs3MDBdLFxuICAgIGxpZ2h0OiBsaWdodEJsdWVbNTAwXSxcbiAgICBkYXJrOiBsaWdodEJsdWVbOTAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFN1Y2Nlc3MobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBncmVlbls0MDBdLFxuICAgICAgbGlnaHQ6IGdyZWVuWzMwMF0sXG4gICAgICBkYXJrOiBncmVlbls3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IGdyZWVuWzgwMF0sXG4gICAgbGlnaHQ6IGdyZWVuWzUwMF0sXG4gICAgZGFyazogZ3JlZW5bOTAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFdhcm5pbmcobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBvcmFuZ2VbNDAwXSxcbiAgICAgIGxpZ2h0OiBvcmFuZ2VbMzAwXSxcbiAgICAgIGRhcms6IG9yYW5nZVs3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46ICcjZWQ2YzAyJyxcbiAgICAvLyBjbG9zZXN0IHRvIG9yYW5nZVs4MDBdIHRoYXQgcGFzcyAzOjEuXG4gICAgbGlnaHQ6IG9yYW5nZVs1MDBdLFxuICAgIGRhcms6IG9yYW5nZVs5MDBdXG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQYWxldHRlKHBhbGV0dGUpIHtcbiAgY29uc3Qge1xuICAgICAgbW9kZSA9ICdsaWdodCcsXG4gICAgICBjb250cmFzdFRocmVzaG9sZCA9IDMsXG4gICAgICB0b25hbE9mZnNldCA9IDAuMlxuICAgIH0gPSBwYWxldHRlLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocGFsZXR0ZSwgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSB8fCBnZXREZWZhdWx0UHJpbWFyeShtb2RlKTtcbiAgY29uc3Qgc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnkgfHwgZ2V0RGVmYXVsdFNlY29uZGFyeShtb2RlKTtcbiAgY29uc3QgZXJyb3IgPSBwYWxldHRlLmVycm9yIHx8IGdldERlZmF1bHRFcnJvcihtb2RlKTtcbiAgY29uc3QgaW5mbyA9IHBhbGV0dGUuaW5mbyB8fCBnZXREZWZhdWx0SW5mbyhtb2RlKTtcbiAgY29uc3Qgc3VjY2VzcyA9IHBhbGV0dGUuc3VjY2VzcyB8fCBnZXREZWZhdWx0U3VjY2Vzcyhtb2RlKTtcbiAgY29uc3Qgd2FybmluZyA9IHBhbGV0dGUud2FybmluZyB8fCBnZXREZWZhdWx0V2FybmluZyhtb2RlKTtcblxuICAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgLy8gQm9vdHN0cmFwOiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8xZDZlMzcxMGRkNDQ3ZGUxYTIwMGYyOWU4ZmE1MjFmOGEwOTA4ZjcwL3Njc3MvX2Z1bmN0aW9ucy5zY3NzI0w1OVxuICAvLyBhbmQgbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9hYzQ2Yjg4NjNjNGRhYjlmYzIyYzRjNjYyZGM2YmQxYjY1ZGQ2NTJmL3BhY2thZ2VzL21kYy10aGVtZS9fZnVuY3Rpb25zLnNjc3MjTDU0XG4gIGZ1bmN0aW9uIGdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kKSB7XG4gICAgY29uc3QgY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBkYXJrLnRleHQucHJpbWFyeSkgPj0gY29udHJhc3RUaHJlc2hvbGQgPyBkYXJrLnRleHQucHJpbWFyeSA6IGxpZ2h0LnRleHQucHJpbWFyeTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc3QgY29udHJhc3QgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG4gICAgICBpZiAoY29udHJhc3QgPCAzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBjb250cmFzdCByYXRpbyBvZiAke2NvbnRyYXN0fToxIGZvciAke2NvbnRyYXN0VGV4dH0gb24gJHtiYWNrZ3JvdW5kfWAsICdmYWxscyBiZWxvdyB0aGUgV0NBRyByZWNvbW1lbmRlZCBhYnNvbHV0ZSBtaW5pbXVtIGNvbnRyYXN0IHJhdGlvIG9mIDM6MS4nLCAnaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jdmlzdWFsLWF1ZGlvLWNvbnRyYXN0LWNvbnRyYXN0J10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG4gIGNvbnN0IGF1Z21lbnRDb2xvciA9ICh7XG4gICAgY29sb3IsXG4gICAgbmFtZSxcbiAgICBtYWluU2hhZGUgPSA1MDAsXG4gICAgbGlnaHRTaGFkZSA9IDMwMCxcbiAgICBkYXJrU2hhZGUgPSA3MDBcbiAgfSkgPT4ge1xuICAgIGNvbG9yID0gX2V4dGVuZHMoe30sIGNvbG9yKTtcbiAgICBpZiAoIWNvbG9yLm1haW4gJiYgY29sb3JbbWFpblNoYWRlXSkge1xuICAgICAgY29sb3IubWFpbiA9IGNvbG9yW21haW5TaGFkZV07XG4gICAgfVxuICAgIGlmICghY29sb3IuaGFzT3duUHJvcGVydHkoJ21haW4nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFRoZSBjb2xvciR7bmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnfSBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXG5UaGUgY29sb3Igb2JqZWN0IG5lZWRzIHRvIGhhdmUgYSBcXGBtYWluXFxgIHByb3BlcnR5IG9yIGEgXFxgJHttYWluU2hhZGV9XFxgIHByb3BlcnR5LmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDExLCBuYW1lID8gYCAoJHtuYW1lfSlgIDogJycsIG1haW5TaGFkZSkpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbG9yLm1haW4gIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVGhlIGNvbG9yJHtuYW1lID8gYCAoJHtuYW1lfSlgIDogJyd9IHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cblxcYGNvbG9yLm1haW5cXGAgc2hvdWxkIGJlIGEgc3RyaW5nLCBidXQgXFxgJHtKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKX1cXGAgd2FzIHByb3ZpZGVkIGluc3RlYWQuXG5cbkRpZCB5b3UgaW50ZW5kIHRvIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBhcHByb2FjaGVzP1xuXG5pbXBvcnQgeyBncmVlbiB9IGZyb20gXCJAbXVpL21hdGVyaWFsL2NvbG9yc1wiO1xuXG5jb25zdCB0aGVtZTEgPSBjcmVhdGVUaGVtZSh7IHBhbGV0dGU6IHtcbiAgcHJpbWFyeTogZ3JlZW4sXG59IH0pO1xuXG5jb25zdCB0aGVtZTIgPSBjcmVhdGVUaGVtZSh7IHBhbGV0dGU6IHtcbiAgcHJpbWFyeTogeyBtYWluOiBncmVlbls1MDBdIH0sXG59IH0pO2AgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEyLCBuYW1lID8gYCAoJHtuYW1lfSlgIDogJycsIEpTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pKSk7XG4gICAgfVxuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnbGlnaHQnLCBsaWdodFNoYWRlLCB0b25hbE9mZnNldCk7XG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdkYXJrJywgZGFya1NoYWRlLCB0b25hbE9mZnNldCk7XG4gICAgaWYgKCFjb2xvci5jb250cmFzdFRleHQpIHtcbiAgICAgIGNvbG9yLmNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0VGV4dChjb2xvci5tYWluKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9O1xuICBjb25zdCBtb2RlcyA9IHtcbiAgICBkYXJrLFxuICAgIGxpZ2h0XG4gIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCFtb2Rlc1ttb2RlXSkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgcGFsZXR0ZSBtb2RlIFxcYCR7bW9kZX1cXGAgaXMgbm90IHN1cHBvcnRlZC5gKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcGFsZXR0ZU91dHB1dCA9IGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgLy8gQSBjb2xsZWN0aW9uIG9mIGNvbW1vbiBjb2xvcnMuXG4gICAgY29tbW9uOiBfZXh0ZW5kcyh7fSwgY29tbW9uKSxcbiAgICAvLyBwcmV2ZW50IG11dGFibGUgb2JqZWN0LlxuICAgIC8vIFRoZSBwYWxldHRlIG1vZGUsIGNhbiBiZSBsaWdodCBvciBkYXJrLlxuICAgIG1vZGUsXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwcmltYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHByaW1hcnk6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogcHJpbWFyeSxcbiAgICAgIG5hbWU6ICdwcmltYXJ5J1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgc2Vjb25kYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHNlY29uZGFyeTogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBzZWNvbmRhcnksXG4gICAgICBuYW1lOiAnc2Vjb25kYXJ5JyxcbiAgICAgIG1haW5TaGFkZTogJ0E0MDAnLFxuICAgICAgbGlnaHRTaGFkZTogJ0EyMDAnLFxuICAgICAgZGFya1NoYWRlOiAnQTcwMCdcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IGludGVyZmFjZSBlbGVtZW50cyB0aGF0IHRoZSB1c2VyIHNob3VsZCBiZSBtYWRlIGF3YXJlIG9mLlxuICAgIGVycm9yOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IGVycm9yLFxuICAgICAgbmFtZTogJ2Vycm9yJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIGFjdGlvbnMgb3IgaW1wb3J0YW50IG1lc3NhZ2VzLlxuICAgIHdhcm5pbmc6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogd2FybmluZyxcbiAgICAgIG5hbWU6ICd3YXJuaW5nJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBwcmVzZW50IGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyIHRoYXQgaXMgbmV1dHJhbCBhbmQgbm90IG5lY2Vzc2FyaWx5IGltcG9ydGFudC5cbiAgICBpbmZvOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IGluZm8sXG4gICAgICBuYW1lOiAnaW5mbydcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHN1Y2Nlc3NmdWwgY29tcGxldGlvbiBvZiBhbiBhY3Rpb24gdGhhdCB1c2VyIHRyaWdnZXJlZC5cbiAgICBzdWNjZXNzOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHN1Y2Nlc3MsXG4gICAgICBuYW1lOiAnc3VjY2VzcydcbiAgICB9KSxcbiAgICAvLyBUaGUgZ3JleSBjb2xvcnMuXG4gICAgZ3JleSxcbiAgICAvLyBVc2VkIGJ5IGBnZXRDb250cmFzdFRleHQoKWAgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0IGJldHdlZW5cbiAgICAvLyB0aGUgYmFja2dyb3VuZCBhbmQgdGhlIHRleHQuXG4gICAgY29udHJhc3RUaHJlc2hvbGQsXG4gICAgLy8gVGFrZXMgYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCByZXR1cm5zIHRoZSB0ZXh0IGNvbG9yIHRoYXQgbWF4aW1pemVzIHRoZSBjb250cmFzdC5cbiAgICBnZXRDb250cmFzdFRleHQsXG4gICAgLy8gR2VuZXJhdGUgYSByaWNoIGNvbG9yIG9iamVjdC5cbiAgICBhdWdtZW50Q29sb3IsXG4gICAgLy8gVXNlZCBieSB0aGUgZnVuY3Rpb25zIGJlbG93IHRvIHNoaWZ0IGEgY29sb3IncyBsdW1pbmFuY2UgYnkgYXBwcm94aW1hdGVseVxuICAgIC8vIHR3byBpbmRleGVzIHdpdGhpbiBpdHMgdG9uYWwgcGFsZXR0ZS5cbiAgICAvLyBFLmcuLCBzaGlmdCBmcm9tIFJlZCA1MDAgdG8gUmVkIDMwMCBvciBSZWQgNzAwLlxuICAgIHRvbmFsT2Zmc2V0XG4gIH0sIG1vZGVzW21vZGVdKSwgb3RoZXIpO1xuICByZXR1cm4gcGFsZXR0ZU91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZm9udEZhbWlseVwiLCBcImZvbnRTaXplXCIsIFwiZm9udFdlaWdodExpZ2h0XCIsIFwiZm9udFdlaWdodFJlZ3VsYXJcIiwgXCJmb250V2VpZ2h0TWVkaXVtXCIsIFwiZm9udFdlaWdodEJvbGRcIiwgXCJodG1sRm9udFNpemVcIiwgXCJhbGxWYXJpYW50c1wiLCBcInB4VG9SZW1cIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmZ1bmN0aW9uIHJvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMWU1KSAvIDFlNTtcbn1cbmNvbnN0IGNhc2VBbGxDYXBzID0ge1xuICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJ1xufTtcbmNvbnN0IGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG5cbi8qKlxuICogQHNlZSBAbGlua3todHRwczovL20yLm1hdGVyaWFsLmlvL2Rlc2lnbi90eXBvZ3JhcGh5L3RoZS10eXBlLXN5c3RlbS5odG1sfVxuICogQHNlZSBAbGlua3todHRwczovL20yLm1hdGVyaWFsLmlvL2Rlc2lnbi90eXBvZ3JhcGh5L3VuZGVyc3RhbmRpbmctdHlwb2dyYXBoeS5odG1sfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgY29uc3QgX3JlZiA9IHR5cGVvZiB0eXBvZ3JhcGh5ID09PSAnZnVuY3Rpb24nID8gdHlwb2dyYXBoeShwYWxldHRlKSA6IHR5cG9ncmFwaHksXG4gICAge1xuICAgICAgZm9udEZhbWlseSA9IGRlZmF1bHRGb250RmFtaWx5LFxuICAgICAgLy8gVGhlIGRlZmF1bHQgZm9udCBzaXplIG9mIHRoZSBNYXRlcmlhbCBTcGVjaWZpY2F0aW9uLlxuICAgICAgZm9udFNpemUgPSAxNCxcbiAgICAgIC8vIHB4XG4gICAgICBmb250V2VpZ2h0TGlnaHQgPSAzMDAsXG4gICAgICBmb250V2VpZ2h0UmVndWxhciA9IDQwMCxcbiAgICAgIGZvbnRXZWlnaHRNZWRpdW0gPSA1MDAsXG4gICAgICBmb250V2VpZ2h0Qm9sZCA9IDcwMCxcbiAgICAgIC8vIFRlbGwgTVVJIHdoYXQncyB0aGUgZm9udC1zaXplIG9uIHRoZSBodG1sIGVsZW1lbnQuXG4gICAgICAvLyAxNnB4IGlzIHRoZSBkZWZhdWx0IGZvbnQtc2l6ZSB1c2VkIGJ5IGJyb3dzZXJzLlxuICAgICAgaHRtbEZvbnRTaXplID0gMTYsXG4gICAgICAvLyBBcHBseSB0aGUgQ1NTIHByb3BlcnRpZXMgdG8gYWxsIHRoZSB2YXJpYW50cy5cbiAgICAgIGFsbFZhcmlhbnRzLFxuICAgICAgcHhUb1JlbTogcHhUb1JlbTJcbiAgICB9ID0gX3JlZixcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBmb250U2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogYGZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBodG1sRm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBodG1sRm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgfVxuICBjb25zdCBjb2VmID0gZm9udFNpemUgLyAxNDtcbiAgY29uc3QgcHhUb1JlbSA9IHB4VG9SZW0yIHx8IChzaXplID0+IGAke3NpemUgLyBodG1sRm9udFNpemUgKiBjb2VmfXJlbWApO1xuICBjb25zdCBidWlsZFZhcmlhbnQgPSAoZm9udFdlaWdodCwgc2l6ZSwgbGluZUhlaWdodCwgbGV0dGVyU3BhY2luZywgY2FzaW5nKSA9PiBfZXh0ZW5kcyh7XG4gICAgZm9udEZhbWlseSxcbiAgICBmb250V2VpZ2h0LFxuICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgIC8vIFVuaXRsZXNzIGZvbGxvd2luZyBodHRwczovL21leWVyd2ViLmNvbS9lcmljL3Rob3VnaHRzLzIwMDYvMDIvMDgvdW5pdGxlc3MtbGluZS1oZWlnaHRzL1xuICAgIGxpbmVIZWlnaHRcbiAgfSwgZm9udEZhbWlseSA9PT0gZGVmYXVsdEZvbnRGYW1pbHkgPyB7XG4gICAgbGV0dGVyU3BhY2luZzogYCR7cm91bmQobGV0dGVyU3BhY2luZyAvIHNpemUpfWVtYFxuICB9IDoge30sIGNhc2luZywgYWxsVmFyaWFudHMpO1xuICBjb25zdCB2YXJpYW50cyA9IHtcbiAgICBoMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgOTYsIDEuMTY3LCAtMS41KSxcbiAgICBoMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgNjAsIDEuMiwgLTAuNSksXG4gICAgaDM6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgNDgsIDEuMTY3LCAwKSxcbiAgICBoNDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAzNCwgMS4yMzUsIDAuMjUpLFxuICAgIGg1OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDI0LCAxLjMzNCwgMCksXG4gICAgaDY6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAyMCwgMS42LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNzUsIDAuMTUpLFxuICAgIHN1YnRpdGxlMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjU3LCAwLjEpLFxuICAgIGJvZHkxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjUsIDAuMTUpLFxuICAgIGJvZHkyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE0LCAxLjQzLCAwLjE1KSxcbiAgICBidXR0b246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS43NSwgMC40LCBjYXNlQWxsQ2FwcyksXG4gICAgY2FwdGlvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMS42NiwgMC40KSxcbiAgICBvdmVybGluZTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMi42NiwgMSwgY2FzZUFsbENhcHMpLFxuICAgIC8vIFRPRE8gdjY6IFJlbW92ZSBoYW5kbGluZyBvZiAnaW5oZXJpdCcgdmFyaWFudCBmcm9tIHRoZSB0aGVtZSBhcyBpdCBpcyBhbHJlYWR5IGhhbmRsZWQgaW4gTWF0ZXJpYWwgVUkncyBUeXBvZ3JhcGh5IGNvbXBvbmVudC4gQWxzbywgcmVtZW1iZXIgdG8gcmVtb3ZlIHRoZSBhc3NvY2lhdGVkIHR5cGVzLlxuICAgIGluaGVyaXQ6IHtcbiAgICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcbiAgICAgIGZvbnRXZWlnaHQ6ICdpbmhlcml0JyxcbiAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCcsXG4gICAgICBsaW5lSGVpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICBsZXR0ZXJTcGFjaW5nOiAnaW5oZXJpdCdcbiAgICB9XG4gIH07XG4gIHJldHVybiBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIGh0bWxGb250U2l6ZSxcbiAgICBweFRvUmVtLFxuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0LFxuICAgIGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgZm9udFdlaWdodEJvbGRcbiAgfSwgdmFyaWFudHMpLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcbiAgfSk7XG59IiwiY29uc3Qgc2hhZG93S2V5VW1icmFPcGFjaXR5ID0gMC4yO1xuY29uc3Qgc2hhZG93S2V5UGVudW1icmFPcGFjaXR5ID0gMC4xNDtcbmNvbnN0IHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5ID0gMC4xMjtcbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdyguLi5weCkge1xuICByZXR1cm4gW2Ake3B4WzBdfXB4ICR7cHhbMV19cHggJHtweFsyXX1weCAke3B4WzNdfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dLZXlVbWJyYU9wYWNpdHl9KWAsIGAke3B4WzRdfXB4ICR7cHhbNV19cHggJHtweFs2XX1weCAke3B4WzddfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHl9KWAsIGAke3B4WzhdfXB4ICR7cHhbOV19cHggJHtweFsxMF19cHggJHtweFsxMV19cHggcmdiYSgwLDAsMCwke3NoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5fSlgXS5qb2luKCcsJyk7XG59XG5cbi8vIFZhbHVlcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYmU4NzQ3Zjk0NTc0NjY5Y2I1ZTdhZGQxYTdjNTRmYTQxYTg5Y2VjNy9wYWNrYWdlcy9tZGMtZWxldmF0aW9uL192YXJpYWJsZXMuc2Nzc1xuY29uc3Qgc2hhZG93cyA9IFsnbm9uZScsIGNyZWF0ZVNoYWRvdygwLCAyLCAxLCAtMSwgMCwgMSwgMSwgMCwgMCwgMSwgMywgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCAxLCAtMiwgMCwgMiwgMiwgMCwgMCwgMSwgNSwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCAzLCAtMiwgMCwgMywgNCwgMCwgMCwgMSwgOCwgMCksIGNyZWF0ZVNoYWRvdygwLCAyLCA0LCAtMSwgMCwgNCwgNSwgMCwgMCwgMSwgMTAsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDUsIDgsIDAsIDAsIDEsIDE0LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA2LCAxMCwgMCwgMCwgMSwgMTgsIDApLCBjcmVhdGVTaGFkb3coMCwgNCwgNSwgLTIsIDAsIDcsIDEwLCAxLCAwLCAyLCAxNiwgMSksIGNyZWF0ZVNoYWRvdygwLCA1LCA1LCAtMywgMCwgOCwgMTAsIDEsIDAsIDMsIDE0LCAyKSwgY3JlYXRlU2hhZG93KDAsIDUsIDYsIC0zLCAwLCA5LCAxMiwgMSwgMCwgMywgMTYsIDIpLCBjcmVhdGVTaGFkb3coMCwgNiwgNiwgLTMsIDAsIDEwLCAxNCwgMSwgMCwgNCwgMTgsIDMpLCBjcmVhdGVTaGFkb3coMCwgNiwgNywgLTQsIDAsIDExLCAxNSwgMSwgMCwgNCwgMjAsIDMpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEyLCAxNywgMiwgMCwgNSwgMjIsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEzLCAxOSwgMiwgMCwgNSwgMjQsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOSwgLTQsIDAsIDE0LCAyMSwgMiwgMCwgNSwgMjYsIDQpLCBjcmVhdGVTaGFkb3coMCwgOCwgOSwgLTUsIDAsIDE1LCAyMiwgMiwgMCwgNiwgMjgsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTAsIC01LCAwLCAxNiwgMjQsIDIsIDAsIDYsIDMwLCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDExLCAtNSwgMCwgMTcsIDI2LCAyLCAwLCA2LCAzMiwgNSksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMSwgLTUsIDAsIDE4LCAyOCwgMiwgMCwgNywgMzQsIDYpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTIsIC02LCAwLCAxOSwgMjksIDIsIDAsIDcsIDM2LCA2KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIwLCAzMSwgMywgMCwgOCwgMzgsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjEsIDMzLCAzLCAwLCA4LCA0MCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTQsIC02LCAwLCAyMiwgMzUsIDMsIDAsIDgsIDQyLCA3KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNCwgLTcsIDAsIDIzLCAzNiwgMywgMCwgOSwgNDQsIDgpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE1LCAtNywgMCwgMjQsIDM4LCAzLCAwLCA5LCA0NiwgOCldO1xuZXhwb3J0IGRlZmF1bHQgc2hhZG93czsiLCIvLyBXZSBuZWVkIHRvIGNlbnRyYWxpemUgdGhlIHpJbmRleCBkZWZpbml0aW9ucyBhcyB0aGV5IHdvcmtcbi8vIGxpa2UgZ2xvYmFsIHZhbHVlcyBpbiB0aGUgYnJvd3Nlci5cbmNvbnN0IHpJbmRleCA9IHtcbiAgbW9iaWxlU3RlcHBlcjogMTAwMCxcbiAgZmFiOiAxMDUwLFxuICBzcGVlZERpYWw6IDEwNTAsXG4gIGFwcEJhcjogMTEwMCxcbiAgZHJhd2VyOiAxMjAwLFxuICBtb2RhbDogMTMwMCxcbiAgc25hY2tiYXI6IDE0MDAsXG4gIHRvb2x0aXA6IDE1MDBcbn07XG5leHBvcnQgZGVmYXVsdCB6SW5kZXg7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGZyb20gXCJAbXVpL3V0aWxzL2Zvcm1hdE11aUVycm9yTWVzc2FnZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJtaXhpbnNcIiwgXCJzcGFjaW5nXCIsIFwicGFsZXR0ZVwiLCBcInRyYW5zaXRpb25zXCIsIFwidHlwb2dyYXBoeVwiLCBcInNoYXBlXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBjcmVhdGVUaGVtZSBhcyBzeXN0ZW1DcmVhdGVUaGVtZSwgdW5zdGFibGVfZGVmYXVsdFN4Q29uZmlnIGFzIGRlZmF1bHRTeENvbmZpZywgdW5zdGFibGVfc3R5bGVGdW5jdGlvblN4IGFzIHN0eWxlRnVuY3Rpb25TeCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmltcG9ydCBjcmVhdGVNaXhpbnMgZnJvbSAnLi9jcmVhdGVNaXhpbnMnO1xuaW1wb3J0IGNyZWF0ZVBhbGV0dGUgZnJvbSAnLi9jcmVhdGVQYWxldHRlJztcbmltcG9ydCBjcmVhdGVUeXBvZ3JhcGh5IGZyb20gJy4vY3JlYXRlVHlwb2dyYXBoeSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25zIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbnMnO1xuaW1wb3J0IHpJbmRleCBmcm9tICcuL3pJbmRleCc7XG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgICAgbWl4aW5zOiBtaXhpbnNJbnB1dCA9IHt9LFxuICAgICAgcGFsZXR0ZTogcGFsZXR0ZUlucHV0ID0ge30sXG4gICAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnNJbnB1dCA9IHt9LFxuICAgICAgdHlwb2dyYXBoeTogdHlwb2dyYXBoeUlucHV0ID0ge31cbiAgICB9ID0gb3B0aW9ucyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG4gIGlmIChvcHRpb25zLnZhcnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogXFxgdmFyc1xcYCBpcyBhIHByaXZhdGUgZmllbGQgdXNlZCBmb3IgQ1NTIHZhcmlhYmxlcyBzdXBwb3J0LlxuUGxlYXNlIHVzZSBhbm90aGVyIG5hbWUuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTgpKTtcbiAgfVxuICBjb25zdCBwYWxldHRlID0gY3JlYXRlUGFsZXR0ZShwYWxldHRlSW5wdXQpO1xuICBjb25zdCBzeXN0ZW1UaGVtZSA9IHN5c3RlbUNyZWF0ZVRoZW1lKG9wdGlvbnMpO1xuICBsZXQgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoc3lzdGVtVGhlbWUsIHtcbiAgICBtaXhpbnM6IGNyZWF0ZU1peGlucyhzeXN0ZW1UaGVtZS5icmVha3BvaW50cywgbWl4aW5zSW5wdXQpLFxuICAgIHBhbGV0dGUsXG4gICAgLy8gRG9uJ3QgdXNlIFsuLi5zaGFkb3dzXSB1bnRpbCB5b3UndmUgdmVyaWZpZWQgaXRzIHRyYW5zcGlsZWQgY29kZSBpcyBub3QgaW52b2tpbmcgdGhlIGl0ZXJhdG9yIHByb3RvY29sLlxuICAgIHNoYWRvd3M6IHNoYWRvd3Muc2xpY2UoKSxcbiAgICB0eXBvZ3JhcGh5OiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dCksXG4gICAgdHJhbnNpdGlvbnM6IGNyZWF0ZVRyYW5zaXRpb25zKHRyYW5zaXRpb25zSW5wdXQpLFxuICAgIHpJbmRleDogX2V4dGVuZHMoe30sIHpJbmRleClcbiAgfSk7XG4gIG11aVRoZW1lID0gZGVlcG1lcmdlKG11aVRoZW1lLCBvdGhlcik7XG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoKGFjYywgYXJndW1lbnQpID0+IGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KSwgbXVpVGhlbWUpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRPRE8gdjY6IFJlZmFjdG9yIHRvIHVzZSBnbG9iYWxTdGF0ZUNsYXNzZXNNYXBwaW5nIGZyb20gQG11aS91dGlscyBvbmNlIGByZWFkT25seWAgc3RhdGUgY2xhc3MgaXMgdXNlZCBpbiBSYXRpbmcgY29tcG9uZW50LlxuICAgIGNvbnN0IHN0YXRlQ2xhc3NlcyA9IFsnYWN0aXZlJywgJ2NoZWNrZWQnLCAnY29tcGxldGVkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2V4cGFuZGVkJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ3NlbGVjdGVkJ107XG4gICAgY29uc3QgdHJhdmVyc2UgPSAobm9kZSwgY29tcG9uZW50KSA9PiB7XG4gICAgICBsZXQga2V5O1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluLCBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgZm9yIChrZXkgaW4gbm9kZSkge1xuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGVba2V5XTtcbiAgICAgICAgaWYgKHN0YXRlQ2xhc3Nlcy5pbmRleE9mKGtleSkgIT09IC0xICYmIE9iamVjdC5rZXlzKGNoaWxkKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlQ2xhc3MgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnJywga2V5KTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGAke2NvbXBvbmVudH1cXGAgY29tcG9uZW50IGluY3JlYXNlcyBgICsgYHRoZSBDU1Mgc3BlY2lmaWNpdHkgb2YgdGhlIFxcYCR7a2V5fVxcYCBpbnRlcm5hbCBzdGF0ZS5gLCAnWW91IGNhbiBub3Qgb3ZlcnJpZGUgaXQgbGlrZSB0aGlzOiAnLCBKU09OLnN0cmluZ2lmeShub2RlLCBudWxsLCAyKSwgJycsIGBJbnN0ZWFkLCB5b3UgbmVlZCB0byB1c2UgdGhlICcmLiR7c3RhdGVDbGFzc30nIHN5bnRheDpgLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICAgICAgICBbYCYuJHtzdGF0ZUNsYXNzfWBdOiBjaGlsZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBudWxsLCAyKSwgJycsICdodHRwczovL211aS5jb20vci9zdGF0ZS1jbGFzc2VzLWd1aWRlJ10uam9pbignXFxuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZW1vdmUgdGhlIHN0eWxlIHRvIHByZXZlbnQgZ2xvYmFsIGNvbmZsaWN0cy5cbiAgICAgICAgICBub2RlW2tleV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmtleXMobXVpVGhlbWUuY29tcG9uZW50cykuZm9yRWFjaChjb21wb25lbnQgPT4ge1xuICAgICAgY29uc3Qgc3R5bGVPdmVycmlkZXMgPSBtdWlUaGVtZS5jb21wb25lbnRzW2NvbXBvbmVudF0uc3R5bGVPdmVycmlkZXM7XG4gICAgICBpZiAoc3R5bGVPdmVycmlkZXMgJiYgY29tcG9uZW50LmluZGV4T2YoJ011aScpID09PSAwKSB7XG4gICAgICAgIHRyYXZlcnNlKHN0eWxlT3ZlcnJpZGVzLCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4Q29uZmlnID0gX2V4dGVuZHMoe30sIGRlZmF1bHRTeENvbmZpZywgb3RoZXIgPT0gbnVsbCA/IHZvaWQgMCA6IG90aGVyLnVuc3RhYmxlX3N4Q29uZmlnKTtcbiAgbXVpVGhlbWUudW5zdGFibGVfc3ggPSBmdW5jdGlvbiBzeChwcm9wcykge1xuICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uU3goe1xuICAgICAgc3g6IHByb3BzLFxuICAgICAgdGhlbWU6IHRoaXNcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIG11aVRoZW1lO1xufVxubGV0IHdhcm5lZE9uY2UgPSBmYWxzZTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNdWlUaGVtZSguLi5hcmdzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCF3YXJuZWRPbmNlKSB7XG4gICAgICB3YXJuZWRPbmNlID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IHRoZSBjcmVhdGVNdWlUaGVtZSBmdW5jdGlvbiB3YXMgcmVuYW1lZCB0byBjcmVhdGVUaGVtZS4nLCAnJywgXCJZb3Ugc2hvdWxkIHVzZSBgaW1wb3J0IHsgY3JlYXRlVGhlbWUgfSBmcm9tICdAbXVpL21hdGVyaWFsL3N0eWxlcydgXCJdLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVRoZW1lKC4uLmFyZ3MpO1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGhlbWU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIG1peGlucykge1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIG1pbkhlaWdodDogNTYsXG4gICAgICBbYnJlYWtwb2ludHMudXAoJ3hzJyldOiB7XG4gICAgICAgICdAbWVkaWEgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJzoge1xuICAgICAgICAgIG1pbkhlaWdodDogNDhcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFticmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgICAgbWluSGVpZ2h0OiA2NFxuICAgICAgfVxuICAgIH1cbiAgfSwgbWl4aW5zKTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmNvbnN0IFVOSU5JVElBTElaRUQgPSB7fTtcblxuLyoqXG4gKiBBIFJlYWN0LnVzZVJlZigpIHRoYXQgaXMgaW5pdGlhbGl6ZWQgbGF6aWx5IHdpdGggYSBmdW5jdGlvbi4gTm90ZSB0aGF0IGl0IGFjY2VwdHMgYW4gb3B0aW9uYWxcbiAqIGluaXRpYWxpemF0aW9uIGFyZ3VtZW50LCBzbyB0aGUgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24gZG9lc24ndCBuZWVkIHRvIGJlIGFuIGlubGluZSBjbG9zdXJlLlxuICpcbiAqIEB1c2FnZVxuICogICBjb25zdCByZWYgPSB1c2VMYXp5UmVmKHNvcnRDb2x1bW5zLCBjb2x1bW5zKVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VMYXp5UmVmKGluaXQsIGluaXRBcmcpIHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKFVOSU5JVElBTElaRUQpO1xuICBpZiAocmVmLmN1cnJlbnQgPT09IFVOSU5JVElBTElaRUQpIHtcbiAgICByZWYuY3VycmVudCA9IGluaXQoaW5pdEFyZyk7XG4gIH1cbiAgcmV0dXJuIHJlZjtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmNvbnN0IEVNUFRZID0gW107XG5cbi8qKlxuICogQSBSZWFjdC51c2VFZmZlY3QgZXF1aXZhbGVudCB0aGF0IHJ1bnMgb25jZSwgd2hlbiB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZU9uTW91bnQoZm4pIHtcbiAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzICovXG4gIFJlYWN0LnVzZUVmZmVjdChmbiwgRU1QVFkpO1xuICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAqL1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHVzZUxhenlSZWYgZnJvbSAnLi4vdXNlTGF6eVJlZi91c2VMYXp5UmVmJztcbmltcG9ydCB1c2VPbk1vdW50IGZyb20gJy4uL3VzZU9uTW91bnQvdXNlT25Nb3VudCc7XG5leHBvcnQgY2xhc3MgVGltZW91dCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY3VycmVudElkID0gMDtcbiAgICB0aGlzLmNsZWFyID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuY3VycmVudElkICE9PSAwKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmN1cnJlbnRJZCk7XG4gICAgICAgIHRoaXMuY3VycmVudElkID0gMDtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuZGlzcG9zZUVmZmVjdCA9ICgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmNsZWFyO1xuICAgIH07XG4gIH1cbiAgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVvdXQoKTtcbiAgfVxuICAvKipcbiAgICogRXhlY3V0ZXMgYGZuYCBhZnRlciBgZGVsYXlgLCBjbGVhcmluZyBhbnkgcHJldmlvdXNseSBzY2hlZHVsZWQgY2FsbC5cbiAgICovXG4gIHN0YXJ0KGRlbGF5LCBmbikge1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgICB0aGlzLmN1cnJlbnRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5jdXJyZW50SWQgPSAwO1xuICAgICAgZm4oKTtcbiAgICB9LCBkZWxheSk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRpbWVvdXQoKSB7XG4gIGNvbnN0IHRpbWVvdXQgPSB1c2VMYXp5UmVmKFRpbWVvdXQuY3JlYXRlKS5jdXJyZW50O1xuICB1c2VPbk1vdW50KHRpbWVvdXQuZGlzcG9zZUVmZmVjdCk7XG4gIHJldHVybiB0aW1lb3V0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9pcy1wbGFpbi1vYmovYmxvYi9tYWluL2luZGV4LmpzXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChpdGVtKSB7XG4gIGlmICh0eXBlb2YgaXRlbSAhPT0gJ29iamVjdCcgfHwgaXRlbSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoaXRlbSk7XG4gIHJldHVybiAocHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gaXRlbSkgJiYgIShTeW1ib2wuaXRlcmF0b3IgaW4gaXRlbSk7XG59XG5mdW5jdGlvbiBkZWVwQ2xvbmUoc291cmNlKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgb3V0cHV0W2tleV0gPSBkZWVwQ2xvbmUoc291cmNlW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucyA9IHtcbiAgY2xvbmU6IHRydWVcbn0pIHtcbiAgY29uc3Qgb3V0cHV0ID0gb3B0aW9ucy5jbG9uZSA/IF9leHRlbmRzKHt9LCB0YXJnZXQpIDogdGFyZ2V0O1xuICBpZiAoaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIGlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgLy8gQXZvaWQgcHJvdG90eXBlIHBvbGx1dGlvblxuICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pICYmIGtleSBpbiB0YXJnZXQgJiYgaXNQbGFpbk9iamVjdCh0YXJnZXRba2V5XSkpIHtcbiAgICAgICAgLy8gU2luY2UgYG91dHB1dGAgaXMgYSBjbG9uZSBvZiBgdGFyZ2V0YCBhbmQgd2UgaGF2ZSBuYXJyb3dlZCBgdGFyZ2V0YCBpbiB0aGlzIGJsb2NrIHdlIGNhbiBjYXN0IHRvIHRoZSBzYW1lIHR5cGUuXG4gICAgICAgIG91dHB1dFtrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuY2xvbmUpIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSA/IGRlZXBDbG9uZShzb3VyY2Vba2V5XSkgOiBzb3VyY2Vba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBBIHZlcnNpb24gb2YgYFJlYWN0LnVzZUxheW91dEVmZmVjdGAgdGhhdCBkb2VzIG5vdCBzaG93IGEgd2FybmluZyB3aGVuIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAqIFRoaXMgaXMgdXNlZnVsIGZvciBlZmZlY3RzIHRoYXQgYXJlIG9ubHkgbmVlZGVkIGZvciBjbGllbnQtc2lkZSByZW5kZXJpbmcgYnV0IG5vdCBmb3IgU1NSLlxuICpcbiAqIEJlZm9yZSB5b3UgdXNlIHRoaXMgaG9vaywgbWFrZSBzdXJlIHRvIHJlYWQgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZ2FlYXJvbi9lN2Q5N2NkZjM4YTI5MDc5MjRlYTEyZTRlYmRmM2M4NVxuICogYW5kIGNvbmZpcm0gaXQgZG9lc24ndCBhcHBseSB0byB5b3VyIHVzZS1jYXNlLlxuICovXG5jb25zdCB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuZXhwb3J0IGRlZmF1bHQgdXNlRW5oYW5jZWRFZmZlY3Q7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJEb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbn0iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjE0LjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHo9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxBPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6XG42MDExNixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEU9e307ZnVuY3Rpb24gRihhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfUYucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ri5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKEMoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRygpe31HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2woSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsYyl7dmFyIGUsZD17fSxnPW51bGwsaz1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihrPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixlKSYmIUwuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaD1BcnJheShmKSxtPTA7bTxmO20rKyloW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49aH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtlXSYmKGRbZV09ZltlXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjprLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZyxRPVtdO2Z1bmN0aW9uIFIoYSxiLGMsZSl7aWYoUS5sZW5ndGgpe3ZhciBkPVEucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1jO2QuY29udGV4dD1lO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpjLGNvbnRleHQ6ZSxjb3VudDowfX1cbmZ1bmN0aW9uIFMoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5RLmxlbmd0aCYmUS5wdXNoKGEpfVxuZnVuY3Rpb24gVChhLGIsYyxlKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gYyhlLGEsXCJcIj09PWI/XCIuXCIrVShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaz0wO2s8YS5sZW5ndGg7aysrKXtkPWFba107dmFyIGY9YitVKGQsayk7Zys9VChkLGYsYyxlKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaz1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1UoZCxrKyspLGcrPVQoZCxmLGMsZSk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl0aHJvdyBjPVwiXCIrYSxFcnJvcihDKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFYoYSxiLGMpe3JldHVybiBudWxsPT1hPzA6VChhLFwiXCIsYixjKX1mdW5jdGlvbiBVKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBXKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGFhKGEsYixjKXt2YXIgZT1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1goYSxlLGMsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTyhhKSYmKGE9TihhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2MpKSxlLnB1c2goYSkpfWZ1bmN0aW9uIFgoYSxiLGMsZSxkKXt2YXIgZz1cIlwiO251bGwhPWMmJihnPShcIlwiK2MpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIik7Yj1SKGIsZyxlLGQpO1YoYSxhYSxiKTtTKGIpfXZhciBZPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFooKXt2YXIgYT1ZLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoQygzMjEpKTtyZXR1cm4gYX1cbnZhciBiYT17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpZLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOntzdXNwZW5zZTpudWxsfSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07ZXhwb3J0cy5DaGlsZHJlbj17bWFwOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdO1goYSxlLG51bGwsYixjKTtyZXR1cm4gZX0sZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVIobnVsbCxudWxsLGIsYyk7VihhLFcsYik7UyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFYoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtYKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoQygxNDMpKTtyZXR1cm4gYX19O1xuZXhwb3J0cy5Db21wb25lbnQ9RjtleHBvcnRzLkZyYWdtZW50PXI7ZXhwb3J0cy5Qcm9maWxlcj11O2V4cG9ydHMuUHVyZUNvbXBvbmVudD1IO2V4cG9ydHMuU3RyaWN0TW9kZT10O2V4cG9ydHMuU3VzcGVuc2U9eTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWJhO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKEMoMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksZz1hLnJlZixrPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoZz1iLnJlZixrPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihoIGluIGIpSy5jYWxsKGIsaCkmJiFMLmhhc093blByb3BlcnR5KGgpJiYoZVtoXT12b2lkIDA9PT1iW2hdJiZ2b2lkIDAhPT1mP2ZbaF06YltoXSl9dmFyIGg9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1oKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8aCl7Zj1BcnJheShoKTtmb3IodmFyIG09MDttPGg7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmcscHJvcHM6ZSxfb3duZXI6a319O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eix0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTQuMFwiO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xNC4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7XG5mdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsayl7ZGE9ITE7ZWE9bnVsbDtiYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxrKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgbD1lYTtkYT0hMTtlYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtmYXx8KGZhPSEwLGhhPWwpfX12YXIgbGE9bnVsbCxtYT1udWxsLG5hPW51bGw7XG5mdW5jdGlvbiBvYShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9bmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH12YXIgcGE9bnVsbCxxYT17fTtcbmZ1bmN0aW9uIHJhKCl7aWYocGEpZm9yKHZhciBhIGluIHFhKXt2YXIgYj1xYVthXSxjPXBhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighc2FbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7c2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZih0YS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTt0YVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ1YShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIHVhKGEsYixjKXtpZih2YVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7dmFbYV09Yjt3YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBzYT1bXSx0YT17fSx2YT17fSx3YT17fTtmdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighcWEuaGFzT3duUHJvcGVydHkoYyl8fHFhW2NdIT09ZCl7aWYocWFbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO3FhW2NdPWQ7Yj0hMH19YiYmcmEoKX12YXIgeWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLHphPW51bGwsQWE9bnVsbCxCYT1udWxsO1xuZnVuY3Rpb24gQ2EoYSl7aWYoYT1tYShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHphKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9bGEoYiksemEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRGEoYSl7QWE/QmE/QmEucHVzaChhKTpCYT1bYV06QWE9YX1mdW5jdGlvbiBFYSgpe2lmKEFhKXt2YXIgYT1BYSxiPUJhO0JhPUFhPW51bGw7Q2EoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUNhKGJbYV0pfX1mdW5jdGlvbiBGYShhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEdhKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSGEoKXt9dmFyIElhPUZhLEphPSExLEthPSExO2Z1bmN0aW9uIExhKCl7aWYobnVsbCE9PUFhfHxudWxsIT09QmEpSGEoKSxFYSgpfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKEthKXJldHVybiBhKGIsYyk7S2E9ITA7dHJ5e3JldHVybiBJYShhLGIsYyl9ZmluYWxseXtLYT0hMSxMYSgpfX12YXIgTmE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLE9hPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksUGE9e30sUWE9e307XG5mdW5jdGlvbiBSYShhKXtpZihPYS5jYWxsKFFhLGEpKXJldHVybiEwO2lmKE9hLmNhbGwoUGEsYSkpcmV0dXJuITE7aWYoTmEudGVzdChhKSlyZXR1cm4gUWFbYV09ITA7UGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gU2EoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBUYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxTYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mfXZhciBDPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0NbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciBVYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFZhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFxuVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuQy54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwKX0pO3ZhciBXYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoV2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbmZ1bmN0aW9uIFhhKGEsYixjLGQpe3ZhciBlPUMuaGFzT3duUHJvcGVydHkoYik/Q1tiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KFRhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9SYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIFlhPS9eKC4qKVtcXFxcXFwvXS8sRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFphPUU/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsJGE9RT9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGFiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGJiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGNiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGRiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGViPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZmI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGdiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGhiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGliPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxqYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGtiPUU/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsbGI9RT9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsbWI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIG5iKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1tYiYmYVttYl18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiBvYihhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfX1cbmZ1bmN0aW9uIHBiKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNiOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJiOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGI6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgaWI6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZWI6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGdiOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBqYjpyZXR1cm4gcGIoYS50eXBlKTtjYXNlIGxiOnJldHVybiBwYihhLnJlbmRlcik7Y2FzZSBrYjppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIHBiKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIHFiKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1wYihhLnR5cGUpO2M9bnVsbDtkJiYoYz1wYihkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFlhLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiByYihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gc2IoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIHRiKGEpe3ZhciBiPXNiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiB4YihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9dGIoYSkpfWZ1bmN0aW9uIHliKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1zYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIHpiKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEFiKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXJiKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQmIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZYYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gQ2IoYSxiKXtCYihhLGIpO3ZhciBjPXJiKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0RiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkRiKGEsYi50eXBlLHJiKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gRWIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIERiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBGYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIityYihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnJiKGMpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9cmIoYi52YWx1ZSksZD1yYihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIExiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE1iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE5iKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gT2IoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP05iKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFBiLFFiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BiPVBifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVBiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFJiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gU2IoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGI9e2FuaW1hdGlvbmVuZDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWI9e30sVmI9e307XG55YSYmKFZiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2IoYSl7aWYoVWJbYV0pcmV0dXJuIFViW2FdO2lmKCFUYlthXSlyZXR1cm4gYTt2YXIgYj1UYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYilyZXR1cm4gVWJbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYj1XYihcImFuaW1hdGlvbmVuZFwiKSxZYj1XYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYj1XYihcImFuaW1hdGlvbnN0YXJ0XCIpLCRiPVdiKFwidHJhbnNpdGlvbmVuZFwiKSxhYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmM9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24gY2MoYSl7dmFyIGI9YmMuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBNYXAsYmMuc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24gZGMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZWMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBmYyhhKXtpZihkYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBnYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1kYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBmYyhlKSxhO2lmKGY9PT1kKXJldHVybiBmYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhjKGEpe2E9Z2MoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBqYyhhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIga2M9bnVsbDtcbmZ1bmN0aW9uIGxjKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKylvYShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZvYShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gbWMoYSl7bnVsbCE9PWEmJihrYz1pYyhrYyxhKSk7YT1rYztrYz1udWxsO2lmKGEpe2pjKGEsbGMpO2lmKGtjKXRocm93IEVycm9yKHUoOTUpKTtpZihmYSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9fVxuZnVuY3Rpb24gbmMoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIG9jKGEpe2lmKCF5YSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgcGM9W107ZnVuY3Rpb24gcWMoYSl7YS50b3BMZXZlbFR5cGU9bnVsbDthLm5hdGl2ZUV2ZW50PW51bGw7YS50YXJnZXRJbnN0PW51bGw7YS5hbmNlc3RvcnMubGVuZ3RoPTA7MTA+cGMubGVuZ3RoJiZwYy5wdXNoKGEpfVxuZnVuY3Rpb24gcmMoYSxiLGMsZCl7aWYocGMubGVuZ3RoKXt2YXIgZT1wYy5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1kO2UubmF0aXZlRXZlbnQ9YjtlLnRhcmdldEluc3Q9YztyZXR1cm4gZX1yZXR1cm57dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX19XG5mdW5jdGlvbiBzYyhhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9dGMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9bmMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTt2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9YS5ldmVudFN5c3RlbUZsYWdzOzA9PT1jJiYoZ3w9NjQpO2Zvcih2YXIgaD1udWxsLGs9MDtrPHNhLmxlbmd0aDtrKyspe3ZhciBsPXNhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9XG5pYyhoLGwpKX1tYyhoKX19ZnVuY3Rpb24gdWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjp2YyhiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6dmMoYixcImZvY3VzXCIsITApO3ZjKGIsXCJibHVyXCIsITApO2Muc2V0KFwiYmx1clwiLG51bGwpO2Muc2V0KFwiZm9jdXNcIixudWxsKTticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6b2MoYSkmJnZjKGIsYSwhMCk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFjLmluZGV4T2YoYSkmJkYoYSxiKX1jLnNldChhLG51bGwpfX1cbnZhciB3Yyx4Yyx5Yyx6Yz0hMSxBYz1bXSxCYz1udWxsLENjPW51bGwsRGM9bnVsbCxFYz1uZXcgTWFwLEZjPW5ldyBNYXAsR2M9W10sSGM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSxJYz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBKYyhhLGIpe3ZhciBjPWNjKGIpO0hjLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSk7SWMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KX1mdW5jdGlvbiBLYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZSxjb250YWluZXI6ZH19XG5mdW5jdGlvbiBMYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkJjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpDYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpEYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6RWMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6RmMuZGVsZXRlKGIucG9pbnRlcklkKX19ZnVuY3Rpb24gTWMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1LYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1OYyhiKSxudWxsIT09YiYmeGMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO3JldHVybiBhfVxuZnVuY3Rpb24gT2MoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIEJjPU1jKEJjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBDYz1NYyhDYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gRGM9TWMoRGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtFYy5zZXQoZixNYyhFYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsRmMuc2V0KGYsTWMoRmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gUGMoYSl7dmFyIGI9dGMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1kYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1lYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7eWMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIFFjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPU5jKGIpO251bGwhPT1jJiZ4YyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gU2MoYSxiLGMpe1FjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBUYygpe2Zvcih6Yz0hMTswPEFjLmxlbmd0aDspe3ZhciBhPUFjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1OYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJndjKGEpO2JyZWFrfXZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOkFjLnNoaWZ0KCl9bnVsbCE9PUJjJiZRYyhCYykmJihCYz1udWxsKTtudWxsIT09Q2MmJlFjKENjKSYmKENjPW51bGwpO251bGwhPT1EYyYmUWMoRGMpJiYoRGM9bnVsbCk7RWMuZm9yRWFjaChTYyk7RmMuZm9yRWFjaChTYyl9ZnVuY3Rpb24gVWMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLHpjfHwoemM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVGMpKSl9XG5mdW5jdGlvbiBWYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBVYyhiLGEpfWlmKDA8QWMubGVuZ3RoKXtVYyhBY1swXSxhKTtmb3IodmFyIGM9MTtjPEFjLmxlbmd0aDtjKyspe3ZhciBkPUFjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09QmMmJlVjKEJjLGEpO251bGwhPT1DYyYmVWMoQ2MsYSk7bnVsbCE9PURjJiZVYyhEYyxhKTtFYy5mb3JFYWNoKGIpO0ZjLmZvckVhY2goYik7Zm9yKGM9MDtjPEdjLmxlbmd0aDtjKyspZD1HY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8R2MubGVuZ3RoJiYoYz1HY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylQYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJkdjLnNoaWZ0KCl9XG52YXIgV2M9e30sWWM9bmV3IE1hcCxaYz1uZXcgTWFwLCRjPVtcImFib3J0XCIsXCJhYm9ydFwiLFhiLFwiYW5pbWF0aW9uRW5kXCIsWWIsXCJhbmltYXRpb25JdGVyYXRpb25cIixaYixcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcblwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLCRiLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBhZChhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXSxmPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO2Y9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmYsY2FwdHVyZWQ6ZitcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltkXSxldmVudFByaW9yaXR5OmJ9O1pjLnNldChkLGIpO1ljLnNldChkLGYpO1djW2VdPWZ9fVxuYWQoXCJibHVyIGJsdXIgY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXMgZm9jdXMgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSwwKTtcbmFkKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO2FkKCRjLDIpO2Zvcih2YXIgYmQ9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLGNkPTA7Y2Q8YmQubGVuZ3RoO2NkKyspWmMuc2V0KGJkW2NkXSwwKTtcbnZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIEYoYSxiKXt2YyhiLGEsITEpfWZ1bmN0aW9uIHZjKGEsYixjKXt2YXIgZD1aYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWQ/MjpkKXtjYXNlIDA6ZD1nZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2Nhc2UgMTpkPWhkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7ZGVmYXVsdDpkPWlkLmJpbmQobnVsbCxiLDEsYSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBnZChhLGIsYyxkKXtKYXx8SGEoKTt2YXIgZT1pZCxmPUphO0phPSEwO3RyeXtHYShlLGEsYixjLGQpfWZpbmFsbHl7KEphPWYpfHxMYSgpfX1mdW5jdGlvbiBoZChhLGIsYyxkKXtlZChkZCxpZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaWQoYSxiLGMsZCl7aWYoZmQpaWYoMDxBYy5sZW5ndGgmJi0xPEhjLmluZGV4T2YoYSkpYT1LYyhudWxsLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZXt2YXIgZT1SYyhhLGIsYyxkKTtpZihudWxsPT09ZSlMYyhhLGQpO2Vsc2UgaWYoLTE8SGMuaW5kZXhPZihhKSlhPUtjKGUsYSxiLGMsZCksQWMucHVzaChhKTtlbHNlIGlmKCFPYyhlLGEsYixjLGQpKXtMYyhhLGQpO2E9cmMoYSxkLG51bGwsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9fX19XG5mdW5jdGlvbiBSYyhhLGIsYyxkKXtjPW5jKGQpO2M9dGMoYyk7aWYobnVsbCE9PWMpe3ZhciBlPWRjKGMpO2lmKG51bGw9PT1lKWM9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7Yz1lYyhlKTtpZihudWxsIT09YylyZXR1cm4gYztjPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtjPW51bGx9ZWxzZSBlIT09YyYmKGM9bnVsbCl9fWE9cmMoYSxkLGMsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9cmV0dXJuIG51bGx9XG52YXIgamQ9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sa2Q9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGpkKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2tkLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7amRbYl09amRbYV19KX0pO2Z1bmN0aW9uIGxkKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxqZC5oYXNPd25Qcm9wZXJ0eShhKSYmamRbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gbWQoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bGQoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgbmQ9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIG9kKGEsYil7aWYoYil7aWYobmRbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDEzNyxhLFwiXCIpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHUoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHUoNjIsXCJcIikpO319XG5mdW5jdGlvbiBwZChhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHFkPU1iLmh0bWw7ZnVuY3Rpb24gcmQoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9Y2MoYSk7Yj13YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl1YyhiW2RdLGEsYyl9ZnVuY3Rpb24gc2QoKXt9XG5mdW5jdGlvbiB0ZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gdWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfWZ1bmN0aW9uIHZkKGEsYil7dmFyIGM9dWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9dWQoYyl9fVxuZnVuY3Rpb24gd2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT93ZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9ZnVuY3Rpb24geGQoKXtmb3IodmFyIGE9d2luZG93LGI9dGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9dGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9XG5mdW5jdGlvbiB5ZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfXZhciB6ZD1cIiRcIixBZD1cIi8kXCIsQmQ9XCIkP1wiLENkPVwiJCFcIixEZD1udWxsLEVkPW51bGw7ZnVuY3Rpb24gRmQoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gR2QoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBIZD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxJZD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gSmQoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9XG5mdW5jdGlvbiBLZChhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT16ZHx8Yz09PUNkfHxjPT09QmQpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlIGM9PT1BZCYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIExkPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE1kPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGQsTmQ9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMZCxPZD1cIl9fcmVhY3RDb250YWluZXJlJFwiK0xkO1xuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YVtNZF07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbT2RdfHxjW01kXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPUtkKGEpO251bGwhPT1hOyl7aWYoYz1hW01kXSlyZXR1cm4gYzthPUtkKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBOYyhhKXthPWFbTWRdfHxhW09kXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gUGQoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHUoMzMpKTt9ZnVuY3Rpb24gUWQoYSl7cmV0dXJuIGFbTmRdfHxudWxsfVxuZnVuY3Rpb24gUmQoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFNkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9bGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLFxuYix0eXBlb2YgYykpO3JldHVybiBjfWZ1bmN0aW9uIFRkKGEsYixjKXtpZihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVWQoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1SZChiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspVGQoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylUZChjW2JdLFwiYnViYmxlZFwiLGEpfX1cbmZ1bmN0aW9uIFZkKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gV2QoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWZChhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWGQoYSl7amMoYSxVZCl9dmFyIFlkPW51bGwsWmQ9bnVsbCwkZD1udWxsO1xuZnVuY3Rpb24gYWUoKXtpZigkZClyZXR1cm4gJGQ7dmFyIGEsYj1aZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiAkZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGJlKCl7cmV0dXJuITB9ZnVuY3Rpb24gY2UoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEcoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2JlOmNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Y2U7cmV0dXJuIHRoaXN9XG5uKEcucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YmUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YmUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9YmV9LGlzUGVyc2lzdGVudDpjZSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1jZTt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0cuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRy5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtkZShjKTtyZXR1cm4gY307ZGUoRyk7ZnVuY3Rpb24gZWUoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBmZShhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBkZShhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1lZTthLnJlbGVhc2U9ZmV9dmFyIGdlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxoZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaWU9WzksMTMsMjcsMzJdLGplPXlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxrZT1udWxsO3lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihrZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGxlPXlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYha2UsbWU9eWEmJighamV8fGtlJiY4PGtlJiYxMT49a2UpLG5lPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLG9lPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHBlPSExO1xuZnVuY3Rpb24gcWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1pZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHJlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHNlPSExO2Z1bmN0aW9uIHRlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiByZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7cGU9ITA7cmV0dXJuIG5lO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PW5lJiZwZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHNlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFqZSYmcWUoYSxiKT8oYT1hZSgpLCRkPVpkPVlkPW51bGwsc2U9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIG1lJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB2ZT17ZXZlbnRUeXBlczpvZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKGplKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPW9lLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPW9lLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1vZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2Ugc2U/cWUoYSxjKSYmKGY9b2UuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1vZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhtZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihzZXx8ZiE9PW9lLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PW9lLmNvbXBvc2l0aW9uRW5kJiZzZSYmKGU9YWUoKSk6KFlkPWQsWmQ9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsc2U9ITApKSxmPWdlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9cmUoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFhkKGYpLGU9Zik6ZT1udWxsOyhhPWxlP3RlKGEsYyk6dWUoYSxjKSk/KGI9aGUuZ2V0UG9vbGVkKG9lLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxYZChiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSx3ZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiB4ZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXdlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciB5ZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiB6ZShhLGIsYyl7YT1HLmdldFBvb2xlZCh5ZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0RhKGMpO1hkKGEpO3JldHVybiBhfXZhciBBZT1udWxsLEJlPW51bGw7ZnVuY3Rpb24gQ2UoYSl7bWMoYSl9ZnVuY3Rpb24gRGUoYSl7dmFyIGI9UGQoYSk7aWYoeWIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgRmU9ITE7eWEmJihGZT1vYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIEdlKCl7QWUmJihBZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSksQmU9QWU9bnVsbCl9ZnVuY3Rpb24gSGUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkRlKEJlKSlpZihhPXplKEJlLGEsbmMoYSkpLEphKW1jKGEpO2Vsc2V7SmE9ITA7dHJ5e0ZhKENlLGEpfWZpbmFsbHl7SmE9ITEsTGEoKX19fWZ1bmN0aW9uIEllKGEsYixjKXtcImZvY3VzXCI9PT1hPyhHZSgpLEFlPWIsQmU9YyxBZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSkpOlwiYmx1clwiPT09YSYmR2UoKX1mdW5jdGlvbiBKZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBEZShCZSl9ZnVuY3Rpb24gS2UoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBEZShiKX1mdW5jdGlvbiBMZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBEZShiKX1cbnZhciBNZT17ZXZlbnRUeXBlczp5ZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkZlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9QZChiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUVlO2Vsc2UgaWYoeGUoZSkpaWYoRmUpZz1MZTtlbHNle2c9SmU7dmFyIGg9SWV9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPUtlKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiB6ZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkRiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LE5lPUcuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxcbk9lPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZShhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9lW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gUWUoKXtyZXR1cm4gUGV9XG52YXIgUmU9MCxTZT0wLFRlPSExLFVlPSExLFZlPU5lLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1SZTtSZT1hLnNjcmVlblg7cmV0dXJuIFRlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooVGU9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1TZTtTZT1hLnNjcmVlblk7cmV0dXJuIFVlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooVWU9ITAsMCl9fSksV2U9VmUuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLFhlPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxZZT17ZXZlbnRUeXBlczpYZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtmPWQud2luZG93PT09ZD9kOihmPWQub3duZXJEb2N1bWVudCk/Zi5kZWZhdWx0Vmlld3x8Zi5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP3RjKGIpOm51bGwsbnVsbCE9PWIpe3ZhciBoPWRjKGIpO2lmKGIhPT1ofHw1IT09Yi50YWcmJjYhPT1iLnRhZyliPW51bGx9fWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1cbmEpe3ZhciBrPVZlO3ZhciBsPVhlLm1vdXNlTGVhdmU7dmFyIG09WGUubW91c2VFbnRlcjt2YXIgcD1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaz1XZSxsPVhlLnBvaW50ZXJMZWF2ZSxtPVhlLnBvaW50ZXJFbnRlcixwPVwicG9pbnRlclwiO2E9bnVsbD09Zz9mOlBkKGcpO2Y9bnVsbD09Yj9mOlBkKGIpO2w9ay5nZXRQb29sZWQobCxnLGMsZCk7bC50eXBlPXArXCJsZWF2ZVwiO2wudGFyZ2V0PWE7bC5yZWxhdGVkVGFyZ2V0PWY7Yz1rLmdldFBvb2xlZChtLGIsYyxkKTtjLnR5cGU9cCtcImVudGVyXCI7Yy50YXJnZXQ9ZjtjLnJlbGF0ZWRUYXJnZXQ9YTtkPWc7cD1iO2lmKGQmJnApYTp7az1kO209cDtnPTA7Zm9yKGE9azthO2E9UmQoYSkpZysrO2E9MDtmb3IoYj1tO2I7Yj1SZChiKSlhKys7Zm9yKDswPGctYTspaz1SZChrKSxnLS07Zm9yKDswPGEtZzspbT1SZChtKSxhLS07Zm9yKDtnLS07KXtpZihrPT09bXx8az09PW0uYWx0ZXJuYXRlKWJyZWFrIGE7XG5rPVJkKGspO209UmQobSl9az1udWxsfWVsc2Ugaz1udWxsO209aztmb3Ioaz1bXTtkJiZkIT09bTspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2sucHVzaChkKTtkPVJkKGQpfWZvcihkPVtdO3AmJnAhPT1tOyl7Zz1wLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ZC5wdXNoKHApO3A9UmQocCl9Zm9yKHA9MDtwPGsubGVuZ3RoO3ArKylWZChrW3BdLFwiYnViYmxlZFwiLGwpO2ZvcihwPWQubGVuZ3RoOzA8cC0tOylWZChkW3BdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm4gMD09PShlJjY0KT9bbF06W2wsY119fTtmdW5jdGlvbiBaZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyICRlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOlplLGFmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBiZihhLGIpe2lmKCRlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighYWYuY2FsbChiLGNbZF0pfHwhJGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciBjZj15YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLGRmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxlZj1udWxsLGZmPW51bGwsZ2Y9bnVsbCxoZj0hMTtcbmZ1bmN0aW9uIGpmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoaGZ8fG51bGw9PWVmfHxlZiE9PXRkKGMpKXJldHVybiBudWxsO2M9ZWY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmeWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gZ2YmJmJmKGdmLGMpP251bGw6KGdmPWMsYT1HLmdldFBvb2xlZChkZi5zZWxlY3QsZmYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1lZixYZChhKSxhKX1cbnZhciBrZj17ZXZlbnRUeXBlczpkZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXtlPWZ8fChkLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCk7aWYoIShmPSFlKSl7YTp7ZT1jYyhlKTtmPXdhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9QZChiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKHhlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKWVmPWUsZmY9YixnZj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6Z2Y9ZmY9ZWY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6aGY9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBoZj0hMSxqZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihjZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGpmKGMsZCl9cmV0dXJuIG51bGx9fSxsZj1HLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksbWY9Ry5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxuZj1OZS5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIG9mKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHBmPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxxZj17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0scmY9TmUuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXBmW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9mKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9xZlthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2YoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2YoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxzZj1WZS5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdGY9TmUuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWV9KSx1Zj1HLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx2Zj1WZS5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHdmPXtldmVudFR5cGVzOldjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9WWMuZ2V0KGEpO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2YoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXJmO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1uZjticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVxuVmU7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1zZjticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXRmO2JyZWFrO2Nhc2UgWGI6Y2FzZSBZYjpjYXNlIFpiOmE9bGY7YnJlYWs7Y2FzZSAkYjphPXVmO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPU5lO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9dmY7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1tZjticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVxuV2U7YnJlYWs7ZGVmYXVsdDphPUd9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtYZChiKTtyZXR1cm4gYn19O2lmKHBhKXRocm93IEVycm9yKHUoMTAxKSk7cGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7cmEoKTt2YXIgeGY9TmM7bGE9UWQ7bWE9eGY7bmE9UGQ7eGEoe1NpbXBsZUV2ZW50UGx1Z2luOndmLEVudGVyTGVhdmVFdmVudFBsdWdpbjpZZSxDaGFuZ2VFdmVudFBsdWdpbjpNZSxTZWxlY3RFdmVudFBsdWdpbjprZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnZlfSk7dmFyIHlmPVtdLHpmPS0xO2Z1bmN0aW9uIEgoYSl7MD56Znx8KGEuY3VycmVudD15Zlt6Zl0seWZbemZdPW51bGwsemYtLSl9XG5mdW5jdGlvbiBJKGEsYil7emYrKzt5Zlt6Zl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBBZj17fSxKPXtjdXJyZW50OkFmfSxLPXtjdXJyZW50OiExfSxCZj1BZjtmdW5jdGlvbiBDZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEFmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIERmKCl7SChLKTtIKEopfWZ1bmN0aW9uIEVmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1BZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiKTtJKEssYyl9ZnVuY3Rpb24gRmYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih1KDEwOCxwYihiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBuKHt9LGMse30sZCl9ZnVuY3Rpb24gR2YoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEFmO0JmPUouY3VycmVudDtJKEosYSk7SShLLEsuY3VycmVudCk7cmV0dXJuITB9XG5mdW5jdGlvbiBIZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhhPUZmKGEsYixCZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoSyksSChKKSxJKEosYSkpOkgoSyk7SShLLGMpfVxudmFyIElmPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEpmPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxLZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLExmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LE1mPXIudW5zdGFibGVfbm93LE5mPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsT2Y9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxQZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFFmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksUmY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxTZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxUZj17fSxVZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFZmPXZvaWQgMCE9PUxmP0xmOmZ1bmN0aW9uKCl7fSxXZj1udWxsLFhmPW51bGwsWWY9ITEsWmY9TWYoKSwkZj0xRTQ+WmY/TWY6ZnVuY3Rpb24oKXtyZXR1cm4gTWYoKS1aZn07XG5mdW5jdGlvbiBhZygpe3N3aXRjaChOZigpKXtjYXNlIE9mOnJldHVybiA5OTtjYXNlIFBmOnJldHVybiA5ODtjYXNlIFFmOnJldHVybiA5NztjYXNlIFJmOnJldHVybiA5NjtjYXNlIFNmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBiZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gT2Y7Y2FzZSA5ODpyZXR1cm4gUGY7Y2FzZSA5NzpyZXR1cm4gUWY7Y2FzZSA5NjpyZXR1cm4gUmY7Y2FzZSA5NTpyZXR1cm4gU2Y7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gY2coYSxiKXthPWJnKGEpO3JldHVybiBJZihhLGIpfWZ1bmN0aW9uIGRnKGEsYixjKXthPWJnKGEpO3JldHVybiBKZihhLGIsYyl9ZnVuY3Rpb24gZWcoYSl7bnVsbD09PVdmPyhXZj1bYV0sWGY9SmYoT2YsZmcpKTpXZi5wdXNoKGEpO3JldHVybiBUZn1mdW5jdGlvbiBnZygpe2lmKG51bGwhPT1YZil7dmFyIGE9WGY7WGY9bnVsbDtLZihhKX1mZygpfVxuZnVuY3Rpb24gZmcoKXtpZighWWYmJm51bGwhPT1XZil7WWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9V2Y7Y2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO1dmPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PVdmJiYoV2Y9V2Yuc2xpY2UoYSsxKSksSmYoT2YsZ2cpLGM7fWZpbmFsbHl7WWY9ITF9fX1mdW5jdGlvbiBoZyhhLGIsYyl7Yy89MTA7cmV0dXJuIDEwNzM3NDE4MjEtKCgoMTA3Mzc0MTgyMS1hK2IvMTApL2N8MCkrMSkqY31mdW5jdGlvbiBpZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn12YXIgamc9e2N1cnJlbnQ6bnVsbH0sa2c9bnVsbCxsZz1udWxsLG1nPW51bGw7ZnVuY3Rpb24gbmcoKXttZz1sZz1rZz1udWxsfVxuZnVuY3Rpb24gb2coYSl7dmFyIGI9amcuY3VycmVudDtIKGpnKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHBnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHFnKGEsYil7a2c9YTttZz1sZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJihyZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBzZyhhLGIpe2lmKG1nIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YiltZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09bGcpe2lmKG51bGw9PT1rZyl0aHJvdyBFcnJvcih1KDMwOCkpO2xnPWI7a2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBsZz1sZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgdGc9ITE7ZnVuY3Rpb24gdWcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxiYXNlUXVldWU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHZnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGJhc2VRdWV1ZTphLmJhc2VRdWV1ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB3ZyhhLGIpe2E9e2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9O3JldHVybiBhLm5leHQ9YX1mdW5jdGlvbiB4ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIHlnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJnZnKGMsYSk7YT1hLnVwZGF0ZVF1ZXVlO2M9YS5iYXNlUXVldWU7bnVsbD09PWM/KGEuYmFzZVF1ZXVlPWIubmV4dD1iLGIubmV4dD1iKTooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yil9XG5mdW5jdGlvbiB6ZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3RnPSExO3ZhciBmPWUuYmFzZVF1ZXVlLGc9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09Zyl7aWYobnVsbCE9PWYpe3ZhciBoPWYubmV4dDtmLm5leHQ9Zy5uZXh0O2cubmV4dD1ofWY9ZztlLnNoYXJlZC5wZW5kaW5nPW51bGw7aD1hLmFsdGVybmF0ZTtudWxsIT09aCYmKGg9aC51cGRhdGVRdWV1ZSxudWxsIT09aCYmKGguYmFzZVF1ZXVlPWcpKX1pZihudWxsIT09Zil7aD1mLm5leHQ7dmFyIGs9ZS5iYXNlU3RhdGUsbD0wLG09bnVsbCxwPW51bGwseD1udWxsO2lmKG51bGwhPT1oKXt2YXIgej1oO2Rve2c9ei5leHBpcmF0aW9uVGltZTtpZihnPGQpe3ZhciBjYT17ZXhwaXJhdGlvblRpbWU6ei5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PXg/KHA9eD1cbmNhLG09ayk6eD14Lm5leHQ9Y2E7Zz5sJiYobD1nKX1lbHNle251bGwhPT14JiYoeD14Lm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9KTtBZyhnLHouc3VzcGVuc2VDb25maWcpO2E6e3ZhciBEPWEsdD16O2c9YjtjYT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOkQ9dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBEKXtrPUQuY2FsbChjYSxrLGcpO2JyZWFrIGF9az1EO2JyZWFrIGE7Y2FzZSAzOkQuZWZmZWN0VGFnPUQuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDpEPXQucGF5bG9hZDtnPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBEP0QuY2FsbChjYSxrLGcpOkQ7aWYobnVsbD09PWd8fHZvaWQgMD09PWcpYnJlYWsgYTtrPW4oe30sayxnKTticmVhayBhO2Nhc2UgMjp0Zz0hMH19bnVsbCE9PXouY2FsbGJhY2smJlxuKGEuZWZmZWN0VGFnfD0zMixnPWUuZWZmZWN0cyxudWxsPT09Zz9lLmVmZmVjdHM9W3pdOmcucHVzaCh6KSl9ej16Lm5leHQ7aWYobnVsbD09PXp8fHo9PT1oKWlmKGc9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09ZylicmVhaztlbHNlIHo9Zi5uZXh0PWcubmV4dCxnLm5leHQ9aCxlLmJhc2VRdWV1ZT1mPWcsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpfW51bGw9PT14P209azp4Lm5leHQ9cDtlLmJhc2VTdGF0ZT1tO2UuYmFzZVF1ZXVlPXg7QmcobCk7YS5leHBpcmF0aW9uVGltZT1sO2EubWVtb2l6ZWRTdGF0ZT1rfX1cbmZ1bmN0aW9uIENnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9ZTtlPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQpdGhyb3cgRXJyb3IodSgxOTEsZCkpO2QuY2FsbChlKX19fXZhciBEZz1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxFZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBGZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgSmc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2RjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1HZygpLGQ9RGcuc3VzcGVuc2U7XG5jPUhnKGMsYSxkKTtkPXdnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7eGcoYSxkKTtJZyhhLGMpfX07ZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hYmYoYyxkKXx8IWJmKGUsZik6ITB9XG5mdW5jdGlvbiBMZyhhLGIsYyl7dmFyIGQ9ITEsZT1BZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1zZyhmKTooZT1MKGIpP0JmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0NmKGEsZSk6QWYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1KZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUVnO3VnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9c2coZik6KGY9TChiKT9CZjpKLmN1cnJlbnQsZS5jb250ZXh0PUNmKGEsZikpO3pnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihGZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSx6ZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIE9nPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBQZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RWcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFFnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiBSZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1TZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1UZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1QZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1WZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9V2coYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1UZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYz1VZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1QZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgJGE6cmV0dXJuIGI9VmcoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKE9nKGIpfHxcbm5iKGIpKXJldHVybiBiPVdnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1FnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWFiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSAkYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihPZyhjKXx8bmIoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1FnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1hYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSAkYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihPZyhkKXx8bmIoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1FnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gY2EoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLG09Zyx5PWc9MCxBPW51bGw7bnVsbCE9PW0mJnk8aC5sZW5ndGg7eSsrKXttLmluZGV4Pnk/KEE9bSxtPW51bGwpOkE9bS5zaWJsaW5nO3ZhciBxPXgoZSxtLGhbeV0sayk7aWYobnVsbD09PXEpe251bGw9PT1tJiYobT1BKTticmVha31hJiZcbm0mJm51bGw9PT1xLmFsdGVybmF0ZSYmYihlLG0pO2c9ZihxLGcseSk7bnVsbD09PXQ/bD1xOnQuc2libGluZz1xO3Q9cTttPUF9aWYoeT09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksbDtpZihudWxsPT09bSl7Zm9yKDt5PGgubGVuZ3RoO3krKyltPXAoZSxoW3ldLGspLG51bGwhPT1tJiYoZz1mKG0sZyx5KSxudWxsPT09dD9sPW06dC5zaWJsaW5nPW0sdD1tKTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7eTxoLmxlbmd0aDt5KyspQT16KG0sZSx5LGhbeV0sayksbnVsbCE9PUEmJihhJiZudWxsIT09QS5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1BLmtleT95OkEua2V5KSxnPWYoQSxnLHkpLG51bGw9PT10P2w9QTp0LnNpYmxpbmc9QSx0PUEpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gRChlLGcsaCxsKXt2YXIgaz1uYihoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2Ygayl0aHJvdyBFcnJvcih1KDE1MCkpO2g9ay5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1rPW51bGwsdD1nLHk9Zz0wLEE9bnVsbCxxPWgubmV4dCgpO251bGwhPT10JiYhcS5kb25lO3krKyxxPWgubmV4dCgpKXt0LmluZGV4Pnk/KEE9dCx0PW51bGwpOkE9dC5zaWJsaW5nO3ZhciBEPXgoZSx0LHEudmFsdWUsbCk7aWYobnVsbD09PUQpe251bGw9PT10JiYodD1BKTticmVha31hJiZ0JiZudWxsPT09RC5hbHRlcm5hdGUmJmIoZSx0KTtnPWYoRCxnLHkpO251bGw9PT1tP2s9RDptLnNpYmxpbmc9RDttPUQ7dD1BfWlmKHEuZG9uZSlyZXR1cm4gYyhlLHQpLGs7aWYobnVsbD09PXQpe2Zvcig7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXAoZSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTtyZXR1cm4ga31mb3IodD1kKGUsdCk7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXoodCxlLHkscS52YWx1ZSxsKSxudWxsIT09cSYmKGEmJm51bGwhPT1cbnEuYWx0ZXJuYXRlJiZ0LmRlbGV0ZShudWxsPT09cS5rZXk/eTpxLmtleSksZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBrfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1hYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBaYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PWFiKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLFxuay5zaWJsaW5nKTtkPWUoayxmLnByb3BzKTtkLnJlZj1QZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWFiPyhkPVdnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1VZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1QZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgJGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9XG5kLnNpYmxpbmd9ZD1WZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1UZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihPZyhmKSlyZXR1cm4gY2EoYSxkLGYsaCk7aWYobmIoZikpcmV0dXJuIEQoYSxkLGYsaCk7bCYmUWcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFhnPVJnKCEwKSxZZz1SZyghMSksWmc9e30sJGc9e2N1cnJlbnQ6Wmd9LGFoPXtjdXJyZW50OlpnfSxiaD17Y3VycmVudDpaZ307XG5mdW5jdGlvbiBjaChhKXtpZihhPT09WmcpdGhyb3cgRXJyb3IodSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBkaChhLGIpe0koYmgsYik7SShhaCxhKTtJKCRnLFpnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOk9iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1PYihiLGEpfUgoJGcpO0koJGcsYil9ZnVuY3Rpb24gZWgoKXtIKCRnKTtIKGFoKTtIKGJoKX1mdW5jdGlvbiBmaChhKXtjaChiaC5jdXJyZW50KTt2YXIgYj1jaCgkZy5jdXJyZW50KTt2YXIgYz1PYihiLGEudHlwZSk7YiE9PWMmJihJKGFoLGEpLEkoJGcsYykpfWZ1bmN0aW9uIGdoKGEpe2FoLmN1cnJlbnQ9PT1hJiYoSCgkZyksSChhaCkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gaGgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09QmR8fGMuZGF0YT09PUNkKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIGloKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIGpoPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsa2g9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsbGg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxtaD0hMTtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gbmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighJGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIG9oKGEsYixjLGQsZSxmKXtsaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5leHBpcmF0aW9uVGltZT0wO2poLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/cGg6cWg7YT1jKGQsZSk7aWYoYi5leHBpcmF0aW9uVGltZT09PWxoKXtmPTA7ZG97Yi5leHBpcmF0aW9uVGltZT0wO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IodSgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtqaC5jdXJyZW50PXJoO2E9YyhkLGUpfXdoaWxlKGIuZXhwaXJhdGlvblRpbWU9PT1saCl9amguY3VycmVudD1zaDtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O2xoPTA7UD1PPU49bnVsbDttaD0hMTtpZihiKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB0aCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiB1aCgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gdmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiB3aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5leHBpcmF0aW9uVGltZTtpZihsPGxoKXt2YXIgbT17ZXhwaXJhdGlvblRpbWU6ay5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW0sZj1kKTpoPWgubmV4dD1tO2w+Ti5leHBpcmF0aW9uVGltZSYmXG4oTi5leHBpcmF0aW9uVGltZT1sLEJnKGwpKX1lbHNlIG51bGwhPT1oJiYoaD1oLm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLEFnKGwsay5zdXNwZW5zZUNvbmZpZyksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7JGUoZCxiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTskZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24geWgoYSl7dmFyIGI9dGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6dmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gQmgoKXtyZXR1cm4gdWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIENoKGEsYixjLGQpe3ZhciBlPXRoKCk7Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gRGgoYSxiLGMsZCl7dmFyIGU9dWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZuaChkLGcuZGVwcykpe0FoKGIsYyxmLGQpO3JldHVybn19Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLGYsZCl9ZnVuY3Rpb24gRWgoYSxiKXtyZXR1cm4gQ2goNTE2LDQsYSxiKX1mdW5jdGlvbiBGaChhLGIpe3JldHVybiBEaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEdoKGEsYil7cmV0dXJuIERoKDQsMixhLGIpfVxuZnVuY3Rpb24gSGgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBJaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIERoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBKaCgpe31mdW5jdGlvbiBLaChhLGIpe3RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9ZnVuY3Rpb24gTGgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBNaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBOaChhLGIsYyl7dmFyIGQ9YWcoKTtjZyg5OD5kPzk4OmQsZnVuY3Rpb24oKXthKCEwKX0pO2NnKDk3PGQ/OTc6ZCxmdW5jdGlvbigpe3ZhciBkPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXthKCExKSxjKCl9ZmluYWxseXtraC5zdXNwZW5zZT1kfX0pfVxuZnVuY3Rpb24gemgoYSxiLGMpe3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXtleHBpcmF0aW9uVGltZTpkLHN1c3BlbnNlQ29uZmlnOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGY9Yi5wZW5kaW5nO251bGw9PT1mP2UubmV4dD1lOihlLm5leHQ9Zi5uZXh0LGYubmV4dD1lKTtiLnBlbmRpbmc9ZTtmPWEuYWx0ZXJuYXRlO2lmKGE9PT1OfHxudWxsIT09ZiYmZj09PU4pbWg9ITAsZS5leHBpcmF0aW9uVGltZT1saCxOLmV4cGlyYXRpb25UaW1lPWxoO2Vsc2V7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09Znx8MD09PWYuZXhwaXJhdGlvblRpbWUpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuZWFnZXJSZWR1Y2VyPWY7ZS5lYWdlclN0YXRlPWg7aWYoJGUoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fUlnKGEsXG5kKX19XG52YXIgc2g9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LHBoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpLaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpFaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gQ2goNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQ2goNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz10aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLFxuYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPXRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnloLHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz15aChhKSxkPWNbMF0sZT1jWzFdO0VoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1cbmN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eWgoITEpLGM9YlswXTtiPWJbMV07cmV0dXJuW0toKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHFoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6d2gsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHdoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXdoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVxud2godmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHJoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6eGgsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHhoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXhoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXhoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsXG5iLGEpLFtiLGFdKSxjXX19LE9oPW51bGwsUGg9bnVsbCxRaD0hMTtmdW5jdGlvbiBSaChhLGIpe3ZhciBjPVNoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBUaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVWgoYSl7aWYoUWgpe3ZhciBiPVBoO2lmKGIpe3ZhciBjPWI7aWYoIVRoKGEsYikpe2I9SmQoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFUaChhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO1FoPSExO09oPWE7cmV0dXJufVJoKE9oLGMpfU9oPWE7UGg9SmQoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsUWg9ITEsT2g9YX19ZnVuY3Rpb24gVmgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO09oPWF9XG5mdW5jdGlvbiBXaChhKXtpZihhIT09T2gpcmV0dXJuITE7aWYoIVFoKXJldHVybiBWaChhKSxRaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUdkKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1QaDtiOylSaChhLGIpLGI9SmQoYi5uZXh0U2libGluZyk7VmgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1BZCl7aWYoMD09PWIpe1BoPUpkKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PXpkJiZjIT09Q2QmJmMhPT1CZHx8YisrfWE9YS5uZXh0U2libGluZ31QaD1udWxsfX1lbHNlIFBoPU9oP0pkKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoKXtQaD1PaD1udWxsO1FoPSExfXZhciBZaD1XYS5SZWFjdEN1cnJlbnRPd25lcixyZz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WWcoYixudWxsLGMsZCk6WGcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gWmgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3FnKGIsZSk7ZD1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFiaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxjaShhLGIsZyxkLGUsZik7YT1VZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmJmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuICRoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVNnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2koYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmYmYoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocmc9ITEsZTxmKT8oYi5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLCRoKGEsYixmKSk6ZGkoYSxiLGMsZCxmKX1mdW5jdGlvbiBlaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGRpKGEsYixjLGQsZSl7dmFyIGY9TChjKT9CZjpKLmN1cnJlbnQ7Zj1DZihiLGYpO3FnKGIsZSk7Yz1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXtpZihMKGMpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7cWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLExnKGIsYyxkKSxOZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKTt0Zz0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT14O3pnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHx4IT09a3x8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9dGd8fEtnKGIsYyxoLGQseCxrLGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLHZnKGEsYiksaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6aWcoYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKSx0Zz0hMSxrPWIubWVtb2l6ZWRTdGF0ZSxnLnN0YXRlPWssemcoYixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUsaCE9PWR8fGshPT14fHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT10Z3x8S2coYixjLGgsZCxrLHgsbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWwsZD1tKTpcbihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gZ2koYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlLGYpe2VpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZIZihiLGMsITEpLCRoKGEsYixmKTtkPWIuc3RhdGVOb2RlO1loLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVhnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WGcoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmSGYoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0VmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkVmKGEsYi5jb250ZXh0LCExKTtkaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgaWk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiBqaShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmVWgoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WWcoYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1hLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2Q9U2coZCxlKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1YZyhiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1cbmN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVhnKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24ga2koYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3BnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsRXhwaXJhdGlvbj0wLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1IoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5lZmZlY3RUYWd8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYma2koYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpa2koYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShNLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1oaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO2xpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWhoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1saShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6bGkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZCZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVNnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIG5pLG9pLHBpLHFpO1xubmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O29pPWZ1bmN0aW9uKCl7fTtcbnBpPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtjaCgkZy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9emIoZyxmKTtkPXpiKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HYihnLGYpO2Q9R2IoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1JYihnLGYpO2Q9SWIoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1zZCl9b2QoYyxkKTt2YXIgaCxrO2M9bnVsbDtmb3IoaCBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGgpJiZmLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mW2hdKWlmKFwic3R5bGVcIj09PVxuaClmb3IoayBpbiBnPWZbaF0sZylnLmhhc093blByb3BlcnR5KGspJiYoY3x8KGM9e30pLGNba109XCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWgmJlwiY2hpbGRyZW5cIiE9PWgmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goaCxudWxsKSk7Zm9yKGggaW4gZCl7dmFyIGw9ZFtoXTtnPW51bGwhPWY/ZltoXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShoKSYmbCE9PWcmJihudWxsIT1sfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1oKWlmKGcpe2ZvcihrIGluIGcpIWcuaGFzT3duUHJvcGVydHkoayl8fGwmJmwuaGFzT3duUHJvcGVydHkoayl8fChjfHwoYz17fSksY1trXT1cIlwiKTtmb3IoayBpbiBsKWwuaGFzT3duUHJvcGVydHkoaykmJmdba10hPT1sW2tdJiYoY3x8KGM9e30pLFxuY1trXT1sW2tdKX1lbHNlIGN8fChhfHwoYT1bXSksYS5wdXNoKGgsYykpLGM9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8obD1sP2wuX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmchPT1sJiYoYT1hfHxbXSkucHVzaChoLGwpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiZyZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7aWYoYi51cGRhdGVRdWV1ZT1lKWIuZWZmZWN0VGFnfD00fX07XG5xaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZWZmZWN0VGFnfD00KX07ZnVuY3Rpb24gcmkoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gc2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDM6cmV0dXJuIGVoKCksSChLKSxIKEopLGM9Yi5zdGF0ZU5vZGUsYy5wZW5kaW5nQ29udGV4dCYmKGMuY29udGV4dD1jLnBlbmRpbmdDb250ZXh0LGMucGVuZGluZ0NvbnRleHQ9bnVsbCksbnVsbCE9PWEmJm51bGwhPT1hLmNoaWxkfHwhV2goYil8fChiLmVmZmVjdFRhZ3w9NCksb2koYiksbnVsbDtjYXNlIDU6Z2goYik7Yz1jaChiaC5jdXJyZW50KTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXBpKGEsYixlLGQsYyksYS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xucmV0dXJuIG51bGx9YT1jaCgkZy5jdXJyZW50KTtpZihXaChiKSl7ZD1iLnN0YXRlTm9kZTtlPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtNZF09YjtkW05kXT1mO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPGFjLmxlbmd0aDthKyspRihhY1thXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpBYihkLGYpO0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihkLGYpLEYoXCJpbnZhbGlkXCIsZCkscmQoYyxcIm9uQ2hhbmdlXCIpfW9kKGUsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJihhPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTp2YS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmcmQoYyxnKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoZCk7RWIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihkKTtMYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmXG4oZC5vbmNsaWNrPXNkKX1jPWE7Yi51cGRhdGVRdWV1ZT1jO251bGwhPT1jJiYoYi5lZmZlY3RUYWd8PTQpfWVsc2V7Zz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDthPT09cWQmJihhPU5iKGUpKTthPT09cWQ/XCJzY3JpcHRcIj09PWU/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChlLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxlKTthW01kXT1iO2FbTmRdPWQ7bmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9cGQoZSxkKTtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLFxuYSk7aD1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYy5sZW5ndGg7aCsrKUYoYWNbaF0sYSk7aD1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsYSk7RihcImxvYWRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixhKTtGKFwic3VibWl0XCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpBYihhLGQpO2g9emIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD1HYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07aD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGEsXG5kKTtoPUliKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPWR9b2QoZSxoKTt2YXIgaz1oO2ZvcihmIGluIGspaWYoay5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGw9a1tmXTtcInN0eWxlXCI9PT1mP21kKGEsbCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8obD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1sJiZRYihhLGwpKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD8oXCJ0ZXh0YXJlYVwiIT09ZXx8XCJcIiE9PWwpJiZSYihhLGwpOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmUmIoYSxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJih2YS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1sJiZyZChjLGYpOm51bGwhPWwmJlhhKGEsZixsLGcpKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoYSk7RWIoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGEpO0xiKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIityYihkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2M9ZC52YWx1ZTtudWxsIT1jP0hiKGEsISFkLm11bHRpcGxlLGMsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZIYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYoYS5vbmNsaWNrPXNkKX1GZChlLGQpJiYoYi5lZmZlY3RUYWd8PTQpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlxaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbmM9Y2goYmguY3VycmVudCk7Y2goJGcuY3VycmVudCk7V2goYik/KGM9Yi5zdGF0ZU5vZGUsZD1iLm1lbW9pemVkUHJvcHMsY1tNZF09YixjLm5vZGVWYWx1ZSE9PWQmJihiLmVmZmVjdFRhZ3w9NCkpOihjPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksY1tNZF09YixiLnN0YXRlTm9kZT1jKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9YyxiO2M9bnVsbCE9PWQ7ZD0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJldoKGIpOihlPWEubWVtb2l6ZWRTdGF0ZSxkPW51bGwhPT1lLGN8fG51bGw9PT1lfHwoZT1hLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihmPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWY/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9Zik6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PVxuZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpKTtpZihjJiYhZCYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlTPT09dGkmJihTPXVpKTtlbHNle2lmKFM9PT10aXx8Uz09PXVpKVM9dmk7MCE9PXdpJiZudWxsIT09VCYmKHhpKFQsVSkseWkoVCx3aSkpfWlmKGN8fGQpYi5lZmZlY3RUYWd8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG9pKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYiksbnVsbDtjYXNlIDE3OnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDE5OkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZT0wIT09KGIuZWZmZWN0VGFnJjY0KTtmPWQucmVuZGVyaW5nO2lmKG51bGw9PT1mKWlmKGUpcmkoZCwhMSk7ZWxzZXtpZihTIT09dGl8fG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJlxuNjQpKWZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXthPWhoKGYpO2lmKG51bGwhPT1hKXtiLmVmZmVjdFRhZ3w9NjQ7cmkoZCwhMSk7ZT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1lJiYoYi51cGRhdGVRdWV1ZT1lLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2ZvcihkPWIuY2hpbGQ7bnVsbCE9PWQ7KWU9ZCxmPWMsZS5lZmZlY3RUYWcmPTIsZS5uZXh0RWZmZWN0PW51bGwsZS5maXJzdEVmZmVjdD1udWxsLGUubGFzdEVmZmVjdD1udWxsLGE9ZS5hbHRlcm5hdGUsbnVsbD09PWE/KGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGUuZXhwaXJhdGlvblRpbWU9ZixlLmNoaWxkPW51bGwsZS5tZW1vaXplZFByb3BzPW51bGwsZS5tZW1vaXplZFN0YXRlPW51bGwsZS51cGRhdGVRdWV1ZT1udWxsLGUuZGVwZW5kZW5jaWVzPW51bGwpOihlLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lLFxuZS5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLGUuY2hpbGQ9YS5jaGlsZCxlLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzLGUubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGUsZS51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGY9YS5kZXBlbmRlbmNpZXMsZS5kZXBlbmRlbmNpZXM9bnVsbD09PWY/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Zi5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Zi5maXJzdENvbnRleHQscmVzcG9uZGVyczpmLnJlc3BvbmRlcnN9KSxkPWQuc2libGluZztJKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9Zj1mLnNpYmxpbmd9fWVsc2V7aWYoIWUpaWYoYT1oaChmKSxudWxsIT09YSl7aWYoYi5lZmZlY3RUYWd8PTY0LGU9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZWZmZWN0VGFnfD00KSxyaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWYuYWx0ZXJuYXRlKXJldHVybiBiPVxuYi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMiokZigpLWQucmVuZGVyaW5nU3RhcnRUaW1lPmQudGFpbEV4cGlyYXRpb24mJjE8YyYmKGIuZWZmZWN0VGFnfD02NCxlPSEwLHJpKGQsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWMtMSk7ZC5pc0JhY2t3YXJkcz8oZi5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1mKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWY6Yi5jaGlsZD1mLGQubGFzdD1mKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oMD09PWQudGFpbEV4cGlyYXRpb24mJihkLnRhaWxFeHBpcmF0aW9uPSRmKCkrNTAwKSxjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT0kZigpLGMuc2libGluZz1udWxsLGI9TS5jdXJyZW50LEkoTSxlP2ImMXwyOmImMSksYyk6bnVsbH10aHJvdyBFcnJvcih1KDE1NixcbmIudGFnKSk7fWZ1bmN0aW9uIHppKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRGYoKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih1KDI4NSkpO2EuZWZmZWN0VGFnPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBnaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoTSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKE0pLG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBBaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOnFiKGIpfX1cbnZhciBCaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBDaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPXFiKGMpKTtudWxsIT09YyYmcGIoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmcGIoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gRGkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe0VpKGEsYyl9fWZ1bmN0aW9uIEZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0VpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEdpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmlnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEhpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuZGVzdHJveTtjLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWQmJmQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIElpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1cbmZ1bmN0aW9uIEppKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpJaSgzLGMpO3JldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmlnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWI9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmQ2coYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1DZyhjLGIsYSl9cmV0dXJuO1xuY2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJjQmJkZkKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmVmMoYykpKSk7cmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gS2koYSxiLGMpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBMaSYmTGkoYik7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtjZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7RWkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOkZpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJkRpKGIsYyk7YnJlYWs7Y2FzZSA1OkZpKGIpO2JyZWFrO2Nhc2UgNDpNaShhLGIsYyl9fVxuZnVuY3Rpb24gTmkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO251bGwhPT1iJiZOaShiKX1mdW5jdGlvbiBPaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFBpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKE9pKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihSYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8T2koYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP1FpKGEsYyxiKTpSaShhLGMsYil9XG5mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9c2QpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUWkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylRaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBSaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFJpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUmkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gTWkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihLaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrIGE7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihLaShhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmKGU9ITEpfWQuc2libGluZy5yZXR1cm49ZC5yZXR1cm47ZD1kLnNpYmxpbmd9fVxuZnVuY3Rpb24gU2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOkhpKDMsYik7cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW05kXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZCYihjLGQpO3BkKGEsZSk7Yj1wZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/bWQoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1FiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9SYihjLGgpOlhhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpDYihjLGQpO2JyZWFrO1xuY2FzZSBcInRleHRhcmVhXCI6S2IoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9IYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SGIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkhiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsVmMoYi5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/XG5kPSExOihkPSEwLGM9Yi5jaGlsZCxUaT0kZigpKTtpZihudWxsIT09YylhOmZvcihhPWM7Oyl7aWYoNT09PWEudGFnKWY9YS5zdGF0ZU5vZGUsZD8oZj1mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9bGQoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtmPWEuY2hpbGQuc2libGluZztmLnJldHVybj1hO2E9XG5mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1jKWJyZWFrO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfVVpKGIpO3JldHVybjtjYXNlIDE5OlVpKGIpO3JldHVybjtjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31mdW5jdGlvbiBVaShhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBCaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVZpLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxudmFyIFdpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFhpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7WWl8fChZaT0hMCxaaT1kKTtDaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uICRpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe0NpKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1haj9haj1uZXcgU2V0KFt0aGlzXSk6YWouYWRkKHRoaXMpLENpKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxudmFyIGJqPU1hdGguY2VpbCxjaj1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGRqPVdhLlJlYWN0Q3VycmVudE93bmVyLFY9MCxlaj04LGZqPTE2LGdqPTMyLHRpPTAsaGo9MSxpaj0yLHVpPTMsdmk9NCxqaj01LFc9VixUPW51bGwsWD1udWxsLFU9MCxTPXRpLGtqPW51bGwsbGo9MTA3Mzc0MTgyMyxtaj0xMDczNzQxODIzLG5qPW51bGwsd2k9MCxvaj0hMSxUaT0wLHBqPTUwMCxZPW51bGwsWWk9ITEsWmk9bnVsbCxhaj1udWxsLHFqPSExLHJqPW51bGwsc2o9OTAsdGo9bnVsbCx1aj0wLHZqPW51bGwsd2o9MDtmdW5jdGlvbiBHZygpe3JldHVybihXJihmanxnaikpIT09Vj8xMDczNzQxODIxLSgkZigpLzEwfDApOjAhPT13aj93ajp3aj0xMDczNzQxODIxLSgkZigpLzEwfDApfVxuZnVuY3Rpb24gSGcoYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD1hZygpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVyZmaikhPT1WKXJldHVybiBVO2lmKG51bGwhPT1jKWE9aGcoYSxjLnRpbWVvdXRNc3wwfHw1RTMsMjUwKTtlbHNlIHN3aXRjaChkKXtjYXNlIDk5OmE9MTA3Mzc0MTgyMzticmVhaztjYXNlIDk4OmE9aGcoYSwxNTAsMTAwKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT1oZyhhLDVFMywyNTApO2JyZWFrO2Nhc2UgOTU6YT0yO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjYpKTt9bnVsbCE9PVQmJmE9PT1VJiYtLWE7cmV0dXJuIGF9XG5mdW5jdGlvbiBJZyhhLGIpe2lmKDUwPHVqKXRocm93IHVqPTAsdmo9bnVsbCxFcnJvcih1KDE4NSkpO2E9eGooYSxiKTtpZihudWxsIT09YSl7dmFyIGM9YWcoKTsxMDczNzQxODIzPT09Yj8oVyZlaikhPT1WJiYoVyYoZmp8Z2opKT09PVY/eWooYSk6KFooYSksVz09PVYmJmdnKCkpOlooYSk7KFcmNCk9PT1WfHw5OCE9PWMmJjk5IT09Y3x8KG51bGw9PT10aj90aj1uZXcgTWFwKFtbYSxiXV0pOihjPXRqLmdldChhKSwodm9pZCAwPT09Y3x8Yz5iKSYmdGouc2V0KGEsYikpKX19XG5mdW5jdGlvbiB4aihhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufW51bGwhPT1lJiYoVD09PWUmJihCZyhiKSxTPT09dmkmJnhpKGUsVSkpLHlpKGUsYikpO3JldHVybiBlfVxuZnVuY3Rpb24gemooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMCE9PWIpcmV0dXJuIGI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7aWYoIUFqKGEsYikpcmV0dXJuIGI7dmFyIGM9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO2E9Yz5hP2M6YTtyZXR1cm4gMj49YSYmYiE9PWE/MDphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWVnKHlqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj16aihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9R2coKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09VGYmJktmKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9lZyh5ai5iaW5kKG51bGwsYSkpOmRnKGQsQmouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLSRmKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBCaihhLGIpe3dqPTA7aWYoYilyZXR1cm4gYj1HZygpLENqKGEsYiksWihhKSxudWxsO3ZhciBjPXpqKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmM9PT1VfHxFaihhLGMpO2lmKG51bGwhPT1YKXt2YXIgZD1XO1d8PWZqO3ZhciBlPUZqKCk7ZG8gdHJ5e0dqKCk7YnJlYWt9Y2F0Y2goaCl7SGooYSxoKX13aGlsZSgxKTtuZygpO1c9ZDtjai5jdXJyZW50PWU7aWYoUz09PWhqKXRocm93IGI9a2osRWooYSxjKSx4aShhLGMpLFooYSksYjtpZihudWxsPT09WClzd2l0Y2goZT1hLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1jLGQ9UyxUPW51bGwsZCl7Y2FzZSB0aTpjYXNlIGhqOnRocm93IEVycm9yKHUoMzQ1KSk7Y2FzZSBpajpDaihhLDI8Yz8yOmMpO2JyZWFrO2Nhc2UgdWk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7XG5jPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZigxMDczNzQxODIzPT09bGomJihlPVRpK3BqLSRmKCksMTA8ZSkpe2lmKG9qKXt2YXIgZj1hLmxhc3RQaW5nZWRUaW1lO2lmKDA9PT1mfHxmPj1jKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha319Zj16aihhKTtpZigwIT09ZiYmZiE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPWQ7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxlKTticmVha31KaihhKTticmVhaztjYXNlIHZpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKG9qJiYoZT1hLmxhc3RQaW5nZWRUaW1lLDA9PT1lfHxlPj1jKSl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9ZT16aihhKTtpZigwIT09ZSYmZSE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPVxuZDticmVha30xMDczNzQxODIzIT09bWo/ZD0xMCooMTA3Mzc0MTgyMS1taiktJGYoKToxMDczNzQxODIzPT09bGo/ZD0wOihkPTEwKigxMDczNzQxODIxLWxqKS01RTMsZT0kZigpLGM9MTAqKDEwNzM3NDE4MjEtYyktZSxkPWUtZCwwPmQmJihkPTApLGQ9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqYmooZC8xOTYwKSktZCxjPGQmJihkPWMpKTtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugamo6aWYoMTA3Mzc0MTgyMyE9PWxqJiZudWxsIT09bmope2Y9bGo7dmFyIGc9bmo7ZD1nLmJ1c3lNaW5EdXJhdGlvbk1zfDA7MD49ZD9kPTA6KGU9Zy5idXN5RGVsYXlNc3wwLGY9JGYoKS0oMTAqKDEwNzM3NDE4MjEtZiktKGcudGltZW91dE1zfDB8fDVFMykpLGQ9Zjw9ZT8wOmUrZC1mKTtpZigxMDxkKXt4aShhLGMpO2EudGltZW91dEhhbmRsZT1cbkhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha319SmooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyOSkpO31aKGEpO2lmKGEuY2FsbGJhY2tOb2RlPT09YilyZXR1cm4gQmouYmluZChudWxsLGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHlqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2I9MCE9PWI/YjoxMDczNzQxODIzO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmI9PT1VfHxFaihhLGIpO2lmKG51bGwhPT1YKXt2YXIgYz1XO1d8PWZqO3ZhciBkPUZqKCk7ZG8gdHJ5e0tqKCk7YnJlYWt9Y2F0Y2goZSl7SGooYSxlKX13aGlsZSgxKTtuZygpO1c9Yztjai5jdXJyZW50PWQ7aWYoUz09PWhqKXRocm93IGM9a2osRWooYSxiKSx4aShhLGIpLFooYSksYztpZihudWxsIT09WCl0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VD1udWxsO0pqKGEpO1ooYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTGooKXtpZihudWxsIT09dGope3ZhciBhPXRqO3RqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7Q2ooYyxhKTtaKGMpfSk7Z2coKX19XG5mdW5jdGlvbiBNaihhLGIpe3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fWZ1bmN0aW9uIE5qKGEsYil7dmFyIGM9VztXJj0tMjtXfD1lajt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fVxuZnVuY3Rpb24gRWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsSWQoYykpO2lmKG51bGwhPT1YKWZvcihjPVgucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmRGYoKTticmVhaztjYXNlIDM6ZWgoKTtIKEspO0goSik7YnJlYWs7Y2FzZSA1OmdoKGQpO2JyZWFrO2Nhc2UgNDplaCgpO2JyZWFrO2Nhc2UgMTM6SChNKTticmVhaztjYXNlIDE5OkgoTSk7YnJlYWs7Y2FzZSAxMDpvZyhkKX1jPWMucmV0dXJufVQ9YTtYPVNnKGEuY3VycmVudCxudWxsKTtVPWI7Uz10aTtraj1udWxsO21qPWxqPTEwNzM3NDE4MjM7bmo9bnVsbDt3aT0wO29qPSExfVxuZnVuY3Rpb24gSGooYSxiKXtkb3t0cnl7bmcoKTtqaC5jdXJyZW50PXNoO2lmKG1oKWZvcih2YXIgYz1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWM7KXt2YXIgZD1jLnF1ZXVlO251bGwhPT1kJiYoZC5wZW5kaW5nPW51bGwpO2M9Yy5uZXh0fWxoPTA7UD1PPU49bnVsbDttaD0hMTtpZihudWxsPT09WHx8bnVsbD09PVgucmV0dXJuKXJldHVybiBTPWhqLGtqPWIsWD1udWxsO2E6e3ZhciBlPWEsZj1YLnJldHVybixnPVgsaD1iO2I9VTtnLmVmZmVjdFRhZ3w9MjA0ODtnLmZpcnN0RWZmZWN0PWcubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1oJiZcIm9iamVjdFwiPT09dHlwZW9mIGgmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLnRoZW4pe3ZhciBrPWg7aWYoMD09PShnLm1vZGUmMikpe3ZhciBsPWcuYWx0ZXJuYXRlO2w/KGcudXBkYXRlUXVldWU9bC51cGRhdGVRdWV1ZSxnLm1lbW9pemVkU3RhdGU9bC5tZW1vaXplZFN0YXRlLGcuZXhwaXJhdGlvblRpbWU9bC5leHBpcmF0aW9uVGltZSk6KGcudXBkYXRlUXVldWU9XG5udWxsLGcubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgbT0wIT09KE0uY3VycmVudCYxKSxwPWY7ZG97dmFyIHg7aWYoeD0xMz09PXAudGFnKXt2YXIgej1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXopeD1udWxsIT09ei5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIGNhPXAubWVtb2l6ZWRQcm9wczt4PXZvaWQgMD09PWNhLmZhbGxiYWNrPyExOiEwIT09Y2EudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6bT8hMTohMH19aWYoeCl7dmFyIEQ9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09RCl7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtwLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBELmFkZChrKTtpZigwPT09KHAubW9kZSYyKSl7cC5lZmZlY3RUYWd8PTY0O2cuZWZmZWN0VGFnJj0tMjk4MTtpZigxPT09Zy50YWcpaWYobnVsbD09PWcuYWx0ZXJuYXRlKWcudGFnPTE3O2Vsc2V7dmFyIHk9d2coMTA3Mzc0MTgyMyxudWxsKTt5LnRhZz0yO3hnKGcseSl9Zy5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO1xuYnJlYWsgYX1oPXZvaWQgMDtnPWI7dmFyIEE9ZS5waW5nQ2FjaGU7bnVsbD09PUE/KEE9ZS5waW5nQ2FjaGU9bmV3IFdpLGg9bmV3IFNldCxBLnNldChrLGgpKTooaD1BLmdldChrKSx2b2lkIDA9PT1oJiYoaD1uZXcgU2V0LEEuc2V0KGssaCkpKTtpZighaC5oYXMoZykpe2guYWRkKGcpO3ZhciBxPU9qLmJpbmQobnVsbCxlLGssZyk7ay50aGVuKHEscSl9cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7aD1FcnJvcigocGIoZy50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK3FiKGcpKX1TIT09XG5qaiYmKFM9aWopO2g9QWkoaCxnKTtwPWY7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6az1oO3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgQj1YaShwLGssYik7eWcocCxCKTticmVhayBhO2Nhc2UgMTprPWg7dmFyIHc9cC50eXBlLHViPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dWImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1Yi5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyh1YikpKSl7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciB2Yj0kaShwLGssYik7eWcocCx2Yik7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WD1QaihYKX1jYXRjaChYYyl7Yj1YYztjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIEZqKCl7dmFyIGE9Y2ouY3VycmVudDtjai5jdXJyZW50PXNoO3JldHVybiBudWxsPT09YT9zaDphfWZ1bmN0aW9uIEFnKGEsYil7YTxsaiYmMjxhJiYobGo9YSk7bnVsbCE9PWImJmE8bWomJjI8YSYmKG1qPWEsbmo9Yil9ZnVuY3Rpb24gQmcoYSl7YT53aSYmKHdpPWEpfWZ1bmN0aW9uIEtqKCl7Zm9yKDtudWxsIT09WDspWD1RaihYKX1mdW5jdGlvbiBHaigpe2Zvcig7bnVsbCE9PVgmJiFVZigpOylYPVFqKFgpfWZ1bmN0aW9uIFFqKGEpe3ZhciBiPVJqKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1QaihhKSk7ZGouY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gUGooYSl7WD1hO2Rve3ZhciBiPVguYWx0ZXJuYXRlO2E9WC5yZXR1cm47aWYoMD09PShYLmVmZmVjdFRhZyYyMDQ4KSl7Yj1zaShiLFgsVSk7aWYoMT09PVV8fDEhPT1YLmNoaWxkRXhwaXJhdGlvblRpbWUpe2Zvcih2YXIgYz0wLGQ9WC5jaGlsZDtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWUsZj1kLmNoaWxkRXhwaXJhdGlvblRpbWU7ZT5jJiYoYz1lKTtmPmMmJihjPWYpO2Q9ZC5zaWJsaW5nfVguY2hpbGRFeHBpcmF0aW9uVGltZT1jfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1hJiYwPT09KGEuZWZmZWN0VGFnJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PVguZmlyc3RFZmZlY3QpLG51bGwhPT1YLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WC5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PVgubGFzdEVmZmVjdCksMTxYLmVmZmVjdFRhZyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YOmEuZmlyc3RFZmZlY3Q9WCxhLmxhc3RFZmZlY3Q9WCkpfWVsc2V7Yj16aShYKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9WC5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1g9YX13aGlsZShudWxsIT09WCk7Uz09PXRpJiYoUz1qaik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSWooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBKaihhKXt2YXIgYj1hZygpO2NnKDk5LFNqLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG8gRGooKTt3aGlsZShudWxsIT09cmopO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrLGQ9YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih1KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTA7YS5jYWxsYmFja1ByaW9yaXR5PTkwO2EubmV4dEtub3duUGVuZGluZ0xldmVsPTA7dmFyIGU9SWooYyk7YS5maXJzdFBlbmRpbmdUaW1lPWU7ZDw9YS5sYXN0U3VzcGVuZGVkVGltZT9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6ZDw9YS5maXJzdFN1c3BlbmRlZFRpbWUmJihhLmZpcnN0U3VzcGVuZGVkVGltZT1cbmQtMSk7ZDw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7ZDw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKTthPT09VCYmKFg9VD1udWxsLFU9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZSl7dmFyIGY9VztXfD1najtkai5jdXJyZW50PW51bGw7RGQ9ZmQ7dmFyIGc9eGQoKTtpZih5ZChnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyl2YXIgaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7aD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGs9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCk7aWYoayYmMCE9PWsucmFuZ2VDb3VudCl7aD1rLmFuY2hvck5vZGU7dmFyIGw9ay5hbmNob3JPZmZzZXQsXG5tPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxtLm5vZGVUeXBlfWNhdGNoKHdiKXtoPW51bGw7YnJlYWsgYX12YXIgcD0wLHg9LTEsej0tMSxjYT0wLEQ9MCx0PWcseT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEE7Oyl7dCE9PWh8fDAhPT1sJiYzIT09dC5ub2RlVHlwZXx8KHg9cCtsKTt0IT09bXx8MCE9PWsmJjMhPT10Lm5vZGVUeXBlfHwoej1wK2spOzM9PT10Lm5vZGVUeXBlJiYocCs9dC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KEE9dC5maXJzdENoaWxkKSlicmVhazt5PXQ7dD1BfWZvcig7Oyl7aWYodD09PWcpYnJlYWsgYjt5PT09aCYmKytjYT09PWwmJih4PXApO3k9PT1tJiYrK0Q9PT1rJiYoej1wKTtpZihudWxsIT09KEE9dC5uZXh0U2libGluZykpYnJlYWs7dD15O3k9dC5wYXJlbnROb2RlfXQ9QX1oPS0xPT09eHx8LTE9PT16P251bGw6e3N0YXJ0OngsZW5kOnp9fWVsc2UgaD1udWxsfWg9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1cbm51bGw7RWQ9e2FjdGl2ZUVsZW1lbnREZXRhY2hlZDpudWxsLGZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7WT1lO2RvIHRyeXtUaigpfWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPWU7ZG8gdHJ5e2ZvcihnPWEsaD1iO251bGwhPT1ZOyl7dmFyIHE9WS5lZmZlY3RUYWc7cSYxNiYmUmIoWS5zdGF0ZU5vZGUsXCJcIik7aWYocSYxMjgpe3ZhciBCPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1CKXt2YXIgdz1CLnJlZjtudWxsIT09dyYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3P3cobnVsbCk6dy5jdXJyZW50PW51bGwpfX1zd2l0Y2gocSYxMDM4KXtjYXNlIDI6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSAxMDI0OlkuZWZmZWN0VGFnJj0tMTAyNTticmVhaztjYXNlIDEwMjg6WS5lZmZlY3RUYWcmPVxuLTEwMjU7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0OlNpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpsPVksTWkoZyxsLGgpLE5pKGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7dz1FZDtCPXhkKCk7cT13LmZvY3VzZWRFbGVtO2g9dy5zZWxlY3Rpb25SYW5nZTtpZihCIT09cSYmcSYmcS5vd25lckRvY3VtZW50JiZ3ZChxLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHEpKXtudWxsIT09aCYmeWQocSkmJihCPWguc3RhcnQsdz1oLmVuZCx2b2lkIDA9PT13JiYodz1CKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBxPyhxLnNlbGVjdGlvblN0YXJ0PUIscS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odyxxLnZhbHVlLmxlbmd0aCkpOih3PShCPXEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZCLmRlZmF1bHRWaWV3fHx3aW5kb3csdy5nZXRTZWxlY3Rpb24mJlxuKHc9dy5nZXRTZWxlY3Rpb24oKSxsPXEudGV4dENvbnRlbnQubGVuZ3RoLGc9TWF0aC5taW4oaC5zdGFydCxsKSxoPXZvaWQgMD09PWguZW5kP2c6TWF0aC5taW4oaC5lbmQsbCksIXcuZXh0ZW5kJiZnPmgmJihsPWgsaD1nLGc9bCksbD12ZChxLGcpLG09dmQocSxoKSxsJiZtJiYoMSE9PXcucmFuZ2VDb3VudHx8dy5hbmNob3JOb2RlIT09bC5ub2RlfHx3LmFuY2hvck9mZnNldCE9PWwub2Zmc2V0fHx3LmZvY3VzTm9kZSE9PW0ubm9kZXx8dy5mb2N1c09mZnNldCE9PW0ub2Zmc2V0KSYmKEI9Qi5jcmVhdGVSYW5nZSgpLEIuc2V0U3RhcnQobC5ub2RlLGwub2Zmc2V0KSx3LnJlbW92ZUFsbFJhbmdlcygpLGc+aD8ody5hZGRSYW5nZShCKSx3LmV4dGVuZChtLm5vZGUsbS5vZmZzZXQpKTooQi5zZXRFbmQobS5ub2RlLG0ub2Zmc2V0KSx3LmFkZFJhbmdlKEIpKSkpKSk7Qj1bXTtmb3Iodz1xO3c9dy5wYXJlbnROb2RlOykxPT09dy5ub2RlVHlwZSYmQi5wdXNoKHtlbGVtZW50OncsbGVmdDp3LnNjcm9sbExlZnQsXG50b3A6dy5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgcS5mb2N1cyYmcS5mb2N1cygpO2ZvcihxPTA7cTxCLmxlbmd0aDtxKyspdz1CW3FdLHcuZWxlbWVudC5zY3JvbGxMZWZ0PXcubGVmdCx3LmVsZW1lbnQuc2Nyb2xsVG9wPXcudG9wfWZkPSEhRGQ7RWQ9RGQ9bnVsbDthLmN1cnJlbnQ9YztZPWU7ZG8gdHJ5e2ZvcihxPWE7bnVsbCE9PVk7KXt2YXIgdWI9WS5lZmZlY3RUYWc7dWImMzYmJkppKHEsWS5hbHRlcm5hdGUsWSk7aWYodWImMTI4KXtCPXZvaWQgMDt2YXIgdmI9WS5yZWY7aWYobnVsbCE9PXZiKXt2YXIgWGM9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6Qj1YYzticmVhaztkZWZhdWx0OkI9WGN9XCJmdW5jdGlvblwiPT09dHlwZW9mIHZiP3ZiKEIpOnZiLmN1cnJlbnQ9Qn19WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPVxubnVsbDtWZigpO1c9Zn1lbHNlIGEuY3VycmVudD1jO2lmKHFqKXFqPSExLHJqPWEsc2o9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswPT09YiYmKGFqPW51bGwpOzEwNzM3NDE4MjM9PT1iP2E9PT12aj91aisrOih1aj0wLHZqPWEpOnVqPTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIFVqJiZVaihjLnN0YXRlTm9kZSxkKTtaKGEpO2lmKFlpKXRocm93IFlpPSExLGE9WmksWmk9bnVsbCxhO2lmKChXJmVqKSE9PVYpcmV0dXJuIG51bGw7Z2coKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBUaigpe2Zvcig7bnVsbCE9PVk7KXt2YXIgYT1ZLmVmZmVjdFRhZzswIT09KGEmMjU2KSYmR2koWS5hbHRlcm5hdGUsWSk7MD09PShhJjUxMil8fHFqfHwocWo9ITAsZGcoOTcsZnVuY3Rpb24oKXtEaigpO3JldHVybiBudWxsfSkpO1k9WS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIERqKCl7aWYoOTAhPT1zail7dmFyIGE9OTc8c2o/OTc6c2o7c2o9OTA7cmV0dXJuIGNnKGEsVmopfX1mdW5jdGlvbiBWaigpe2lmKG51bGw9PT1yailyZXR1cm4hMTt2YXIgYT1yajtyaj1udWxsO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMzMSkpO3ZhciBiPVc7V3w9Z2o7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoMCE9PShjLmVmZmVjdFRhZyY1MTIpKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOkhpKDUsYyksSWkoNSxjKX19Y2F0Y2goZCl7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMzApKTtFaShhLGQpfWM9YS5uZXh0RWZmZWN0O2EubmV4dEVmZmVjdD1udWxsO2E9Y31XPWI7Z2coKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFdqKGEsYixjKXtiPUFpKGMsYik7Yj1YaShhLGIsMTA3Mzc0MTgyMyk7eGcoYSxiKTthPXhqKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlooYSl9ZnVuY3Rpb24gRWkoYSxiKXtpZigzPT09YS50YWcpV2ooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtXaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyhkKSkpe2E9QWkoYixhKTthPSRpKGMsYSwxMDczNzQxODIzKTt4ZyhjLGEpO2M9eGooYywxMDczNzQxODIzKTtudWxsIT09YyYmWihjKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBPaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1Q9PT1hJiZVPT09Yz9TPT09dml8fFM9PT11aSYmMTA3Mzc0MTgyMz09PWxqJiYkZigpLVRpPHBqP0VqKGEsVSk6b2o9ITA6QWooYSxjKSYmKGI9YS5sYXN0UGluZ2VkVGltZSwwIT09YiYmYjxjfHwoYS5sYXN0UGluZ2VkVGltZT1jLFooYSkpKX1mdW5jdGlvbiBWaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPUdnKCksYj1IZyhiLGEsbnVsbCkpO2E9eGooYSxiKTtudWxsIT09YSYmWihhKX12YXIgUmo7XG5Saj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8Sy5jdXJyZW50KXJnPSEwO2Vsc2V7aWYoZDxjKXtyZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpoaShiKTtYaCgpO2JyZWFrO2Nhc2UgNTpmaChiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmR2YoYik7YnJlYWs7Y2FzZSA0OmRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtlPWIudHlwZS5fY29udGV4dDtJKGpnLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtcbmlmKDAhPT1kJiZkPj1jKXJldHVybiBqaShhLGIsYyk7SShNLE0uY3VycmVudCYxKTtiPSRoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SShNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBtaShhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SShNLE0uY3VycmVudCk7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuICRoKGEsYixjKX1yZz0hMX19ZWxzZSByZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1DZihiLEouY3VycmVudCk7cWcoYixjKTtlPW9oKG51bGwsXG5iLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoTChkKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dWcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkZnKGIsZCxnLGEpO2UudXBkYXRlcj1KZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO05nKGIsZCxhLGMpO2I9Z2kobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUihudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjphOntlPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1cbm51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztvYihlKTtpZigxIT09ZS5fc3RhdHVzKXRocm93IGUuX3Jlc3VsdDtlPWUuX3Jlc3VsdDtiLnR5cGU9ZTtmPWIudGFnPVhqKGUpO2E9aWcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9ZGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPWZpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmgobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haShudWxsLGIsZSxpZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHUoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZmkoYSxiLGQsZSxjKTtcbmNhc2UgMzpoaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHUoMjgyKSk7ZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3ZnKGEsYik7emcoYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlYaCgpLGI9JGgoYSxiLGMpO2Vsc2V7aWYoZT1iLnN0YXRlTm9kZS5oeWRyYXRlKVBoPUpkKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksT2g9YixlPVFoPSEwO2lmKGUpZm9yKGM9WWcoYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZWZmZWN0VGFnPWMuZWZmZWN0VGFnJi0zfDEwMjQsYz1jLnNpYmxpbmc7ZWxzZSBSKGEsYixkLGMpLFhoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZmgoYiksbnVsbD09PWEmJlVoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6XG5udWxsLGc9ZS5jaGlsZHJlbixHZChkLGUpP2c9bnVsbDpudWxsIT09ZiYmR2QoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksZWkoYSxiKSxiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFIoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJlVoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gamkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WGcoYixudWxsLGQsYyk6UihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksWmgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBSKGEsXG5iLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKGpnLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9JGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj0kaChhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09XG5rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD13ZyhjLG51bGwpLGwudGFnPTIseGcoaCxsKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtsPWguYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO3BnKGgucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9XG5nfVIoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4scWcoYixjKSxlPXNnKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1pZyhlLGIucGVuZGluZ1Byb3BzKSxmPWlnKGUudHlwZSxmKSxhaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gY2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTChkKT8oYT0hMCxHZihiKSk6YT0hMSxxZyhiLGMpLExnKGIsZCxlKSxOZyhiLGQsZSxjKSxnaShudWxsLFxuYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fTt2YXIgVWo9bnVsbCxMaT1udWxsO2Z1bmN0aW9uIFlqKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1VqPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O0xpPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gWmooYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBTaChhLGIsYyxkKXtyZXR1cm4gbmV3IFpqKGEsYixjLGQpfVxuZnVuY3Rpb24gYmkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBYaihhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdiKXJldHVybiAxMTtpZihhPT09amIpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gU2coYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1TaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFVnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm4gV2coYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYjpnPTg7ZXw9NzticmVhaztjYXNlIGJiOmc9ODtlfD0xO2JyZWFrO2Nhc2UgY2I6cmV0dXJuIGE9U2goMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1jYixhLnR5cGU9Y2IsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYjpyZXR1cm4gYT1TaCgxMyxjLGIsZSksYS50eXBlPWhiLGEuZWxlbWVudFR5cGU9aGIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBpYjpyZXR1cm4gYT1TaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1pYixhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGI6Zz1cbjEwO2JyZWFrIGE7Y2FzZSBlYjpnPTk7YnJlYWsgYTtjYXNlIGdiOmc9MTE7YnJlYWsgYTtjYXNlIGpiOmc9MTQ7YnJlYWsgYTtjYXNlIGtiOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBsYjpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1TaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFdnKGEsYixjLGQpe2E9U2goNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIFRnKGEsYixjKXthPVNoKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFZnKGEsYixjKXtiPVNoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYWsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIEFqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiB4aShhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24geWkoYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBDaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIGJrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUdnKCksZz1EZy5zdXNwZW5zZTtmPUhnKGYsZSxnKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKGRjKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHUoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHUoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEwoaykpe2M9RmYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9QWY7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj13ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PVxuZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO3hnKGUsYik7SWcoZSxmKTtyZXR1cm4gZn1mdW5jdGlvbiBjayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGRrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQmJmEucmV0cnlUaW1lPGImJihhLnJldHJ5VGltZT1iKX1mdW5jdGlvbiBlayhhLGIpe2RrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZkayhhLGIpfVxuZnVuY3Rpb24gZmsoYSxiLGMpe2M9bnVsbCE9YyYmITA9PT1jLmh5ZHJhdGU7dmFyIGQ9bmV3IGFrKGEsYixjKSxlPVNoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtkLmN1cnJlbnQ9ZTtlLnN0YXRlTm9kZT1kO3VnKGUpO2FbT2RdPWQuY3VycmVudDtjJiYwIT09YiYmSmMoYSw5PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudCk7dGhpcy5faW50ZXJuYWxSb290PWR9ZmsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtiayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtmay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztiayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbT2RdPW51bGx9KX07XG5mdW5jdGlvbiBnayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gaGsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBmayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIGlrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7aC5jYWxsKGEpfX1iayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWhrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2suY2FsbChhKX19TmooZnVuY3Rpb24oKXtiayhiLGcsYSxlKX0pfXJldHVybiBjayhnKX1mdW5jdGlvbiBqayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxud2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aGcoR2coKSwxNTAsMTAwKTtJZyhhLGIpO2VrKGEsYil9fTt4Yz1mdW5jdGlvbihhKXsxMz09PWEudGFnJiYoSWcoYSwzKSxlayhhLDMpKX07eWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9R2coKTtiPUhnKGIsYSxudWxsKTtJZyhhLGIpO2VrKGEsYil9fTtcbnphPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Q2IoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVFkKGQpO2lmKCFlKXRocm93IEVycm9yKHUoOTApKTt5YihkKTtDYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2IoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhiKGEsISFjLm11bHRpcGxlLGIsITEpfX07RmE9TWo7XG5HYT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVc7V3w9NDt0cnl7cmV0dXJuIGNnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1c9ZixXPT09ViYmZ2coKX19O0hhPWZ1bmN0aW9uKCl7KFcmKDF8Zmp8Z2opKT09PVYmJihMaigpLERqKCkpfTtJYT1mdW5jdGlvbihhLGIpe3ZhciBjPVc7V3w9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fTtmdW5jdGlvbiBrayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBqayhhLGIsbnVsbCxjKX12YXIgbGs9e0V2ZW50czpbTmMsUGQsUWQseGEsdGEsWGQsZnVuY3Rpb24oYSl7amMoYSxXZCl9LERhLEVhLGlkLG1jLERqLHtjdXJyZW50OiExfV19O1xuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFlqKG4oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGMoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp0YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjE0LjBcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9bGs7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9a2s7ZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IodSgxODgpKTt0aHJvdyBFcnJvcih1KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWhjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07XG5leHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDE4NykpO3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGNnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1c9YyxnZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITAsYyl9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITEsYyl9O1xuZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFnayhhKSl0aHJvdyBFcnJvcih1KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oTmooZnVuY3Rpb24oKXtpayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbT2RdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1NajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiBrayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIWdrKGMpKXRocm93IEVycm9yKHUoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyKXRocm93IEVycm9yKHUoMzgpKTtyZXR1cm4gaWsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjE0LjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTkuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciBBPXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpfWlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiB3JiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5ub3cpZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdy5ub3coKX07ZWxzZXt2YXIgQj14Lm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCktQn19dmFyIEM9ITEsRD1udWxsLEU9LTEsRj01LEc9MDtrPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUd9O2w9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTpGPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgSD1uZXcgTWVzc2FnZUNoYW5uZWwsST1ILnBvcnQyO0gucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtHPWErRjt0cnl7RCghMCxhKT9JLnBvc3RNZXNzYWdlKG51bGwpOihDPSExLEQ9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSS5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBDPSExfTtmPWZ1bmN0aW9uKGEpe0Q9YTtDfHwoQz0hMCxJLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0U9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihFKTtFPS0xfX1mdW5jdGlvbiBKKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEsoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEwoYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE0oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SyhuLGMpKXZvaWQgMCE9PXImJjA+SyhyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SyhyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTj1bXSxPPVtdLFA9MSxRPW51bGwsUj0zLFM9ITEsVD0hMSxVPSExO1xuZnVuY3Rpb24gVihhKXtmb3IodmFyIGI9TChPKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU0oTyk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlNKE8pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSihOLGIpO2Vsc2UgYnJlYWs7Yj1MKE8pfX1mdW5jdGlvbiBXKGEpe1U9ITE7VihhKTtpZighVClpZihudWxsIT09TChOKSlUPSEwLGYoWCk7ZWxzZXt2YXIgYj1MKE8pO251bGwhPT1iJiZnKFcsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWChhLGIpe1Q9ITE7VSYmKFU9ITEsaCgpKTtTPSEwO3ZhciBjPVI7dHJ5e1YoYik7Zm9yKFE9TChOKTtudWxsIT09USYmKCEoUS5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1RLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtRLmNhbGxiYWNrPW51bGw7Uj1RLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChRLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/US5jYWxsYmFjaz1lOlE9PT1MKE4pJiZNKE4pO1YoYil9ZWxzZSBNKE4pO1E9TChOKX1pZihudWxsIT09USl2YXIgbT0hMDtlbHNle3ZhciBuPUwoTyk7bnVsbCE9PW4mJmcoVyxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7UT1udWxsLFI9YyxTPSExfX1cbmZ1bmN0aW9uIFkoYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgWj1sO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtUfHxTfHwoVD0hMCxmKFgpKX07XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFJ9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTChOKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChSKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1SfXZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Uj1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9WjtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVI7Uj1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7dmFyIGU9Yy5kZWxheTtlPVwibnVtYmVyXCI9PT10eXBlb2YgZSYmMDxlP2QrZTpkO2M9XCJudW1iZXJcIj09PXR5cGVvZiBjLnRpbWVvdXQ/Yy50aW1lb3V0OlkoYSl9ZWxzZSBjPVkoYSksZT1kO2M9ZStjO2E9e2lkOlArKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6ZSxleHBpcmF0aW9uVGltZTpjLHNvcnRJbmRleDotMX07ZT5kPyhhLnNvcnRJbmRleD1lLEooTyxhKSxudWxsPT09TChOKSYmYT09PUwoTykmJihVP2goKTpVPSEwLGcoVyxlLWQpKSk6KGEuc29ydEluZGV4PWMsSihOLGEpLFR8fFN8fChUPSEwLGYoWCkpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtWKGEpO3ZhciBiPUwoTik7cmV0dXJuIGIhPT1RJiZudWxsIT09USYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxRLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVI7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1I9Y319fTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTQuMFxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmPXJlcXVpcmUoXCJyZWFjdFwiKSxnPTYwMTAzO2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIGg9U3ltYm9sLmZvcjtnPWgoXCJyZWFjdC5lbGVtZW50XCIpO2V4cG9ydHMuRnJhZ21lbnQ9aChcInJlYWN0LmZyYWdtZW50XCIpfXZhciBtPWYuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIsbj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGspe3ZhciBiLGQ9e30sZT1udWxsLGw9bnVsbDt2b2lkIDAhPT1rJiYoZT1cIlwiK2spO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGw9YS5yZWYpO2ZvcihiIGluIGEpbi5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmcsdHlwZTpjLGtleTplLHJlZjpsLHByb3BzOmQsX293bmVyOm0uY3VycmVudH19ZXhwb3J0cy5qc3g9cTtleHBvcnRzLmpzeHM9cTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xuZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKVxuXG4gICAgaWYgKHRoYXQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhhdFxuICAgIH1cblxuICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gdGhhdFxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIGtNYXhMZW5ndGgoKS50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcilcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDE2IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlICYgKDB4ZmYgPDwgKDggKiAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSkpKSA+Pj5cbiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOFxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikge1xuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCA0KTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmZcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICB2YXIgbGVuID0gZW5kIC0gc3RhcnRcbiAgdmFyIGlcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIGlzbmFuICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gdmFsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8qISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYj1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxjPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksZD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksZT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksZj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksZz1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksaD1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxrPVN5bWJvbC5mb3IoXCJyZWFjdC5zZXJ2ZXJfY29udGV4dFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxtPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLHA9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikscT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSx0PVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIiksdTt1PVN5bWJvbC5mb3IoXCJyZWFjdC5tb2R1bGUucmVmZXJlbmNlXCIpO1xuZnVuY3Rpb24gdihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgcj1hLiQkdHlwZW9mO3N3aXRjaChyKXtjYXNlIGI6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgZDpjYXNlIGY6Y2FzZSBlOmNhc2UgbTpjYXNlIG46cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIGg6Y2FzZSBsOmNhc2UgcTpjYXNlIHA6Y2FzZSBnOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHJ9fWNhc2UgYzpyZXR1cm4gcn19fWV4cG9ydHMuQ29udGV4dENvbnN1bWVyPWg7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9ZztleHBvcnRzLkVsZW1lbnQ9YjtleHBvcnRzLkZvcndhcmRSZWY9bDtleHBvcnRzLkZyYWdtZW50PWQ7ZXhwb3J0cy5MYXp5PXE7ZXhwb3J0cy5NZW1vPXA7ZXhwb3J0cy5Qb3J0YWw9YztleHBvcnRzLlByb2ZpbGVyPWY7ZXhwb3J0cy5TdHJpY3RNb2RlPWU7ZXhwb3J0cy5TdXNwZW5zZT1tO1xuZXhwb3J0cy5TdXNwZW5zZUxpc3Q9bjtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09aH07ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWd9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ifTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWx9O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWR9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09cX07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1wfTtcbmV4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1jfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1mfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWV9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PW19O2V4cG9ydHMuaXNTdXNwZW5zZUxpc3Q9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1ufTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1kfHxhPT09Znx8YT09PWV8fGE9PT1tfHxhPT09bnx8YT09PXR8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cXx8YS4kJHR5cGVvZj09PXB8fGEuJCR0eXBlb2Y9PT1nfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWx8fGEuJCR0eXBlb2Y9PT11fHx2b2lkIDAhPT1hLmdldE1vZHVsZUlkKT8hMDohMX07ZXhwb3J0cy50eXBlT2Y9djtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBiaWdpbnQ6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIG5vdyA9IHJlcXVpcmUoJy4vbm93JyksXG4gICAgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgIHJldHVybiBtYXhpbmdcbiAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgIDogdGltZVdhaXRpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICB9XG4gICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgIH1cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIH1cbiAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICByZXR1cm4gZGVib3VuY2VkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYm91bmNlO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgRGF0ZVxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gKiB9LCBfLm5vdygpKTtcbiAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gKi9cbnZhciBub3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbm93O1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIGJhc2VUcmltID0gcmVxdWlyZSgnLi9fYmFzZVRyaW0nKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IGJhc2VUcmltKHZhbHVlKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9OdW1iZXI7XG4iLCJ2YXIgdHJpbW1lZEVuZEluZGV4ID0gcmVxdWlyZSgnLi9fdHJpbW1lZEVuZEluZGV4Jyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW1TdGFydCA9IC9eXFxzKy87XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udHJpbWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byB0cmltLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUcmltKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nXG4gICAgPyBzdHJpbmcuc2xpY2UoMCwgdHJpbW1lZEVuZEluZGV4KHN0cmluZykgKyAxKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJylcbiAgICA6IHN0cmluZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVHJpbTtcbiIsIi8qKiBVc2VkIHRvIG1hdGNoIGEgc2luZ2xlIHdoaXRlc3BhY2UgY2hhcmFjdGVyLiAqL1xudmFyIHJlV2hpdGVzcGFjZSA9IC9cXHMvO1xuXG4vKipcbiAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2VcbiAqIGNoYXJhY3RlciBvZiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIuXG4gKi9cbmZ1bmN0aW9uIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpIHtcbiAgdmFyIGluZGV4ID0gc3RyaW5nLmxlbmd0aDtcblxuICB3aGlsZSAoaW5kZXgtLSAmJiByZVdoaXRlc3BhY2UudGVzdChzdHJpbmcuY2hhckF0KGluZGV4KSkpIHt9XG4gIHJldHVybiBpbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0cmltbWVkRW5kSW5kZXg7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IDAsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICB9XG4gIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0O1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgc3RyaW5nVG9QYXRoID0gcmVxdWlyZSgnLi9fc3RyaW5nVG9QYXRoJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG5mdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdFBhdGg7XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXk7XG4iLCJ2YXIgbWVtb2l6ZUNhcHBlZCA9IHJlcXVpcmUoJy4vX21lbW9pemVDYXBwZWQnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgfVxuICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1RvUGF0aDtcbiIsInZhciBtZW1vaXplID0gcmVxdWlyZSgnLi9tZW1vaXplJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbnZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH0pO1xuXG4gIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplQ2FwcGVkO1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gKlxuICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcik7XG4gKiAvLyA9PiBbMywgNF1cbiAqXG4gKiBvYmplY3QuYSA9IDI7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddXG4gKlxuICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxubWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemU7XG4iLCJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuIiwidmFyIGhhc2hDbGVhciA9IHJlcXVpcmUoJy4vX2hhc2hDbGVhcicpLFxuICAgIGhhc2hEZWxldGUgPSByZXF1aXJlKCcuL19oYXNoRGVsZXRlJyksXG4gICAgaGFzaEdldCA9IHJlcXVpcmUoJy4vX2hhc2hHZXQnKSxcbiAgICBoYXNoSGFzID0gcmVxdWlyZSgnLi9faGFzaEhhcycpLFxuICAgIGhhc2hTZXQgPSByZXF1aXJlKCcuL19oYXNoU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG4iLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWYWx1ZTtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVDbGVhcjtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZURlbGV0ZTtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUdldDtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlSGFzO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwidmFyIGJhc2VUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VUb1N0cmluZycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9TdHJpbmc7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVG9TdHJpbmc7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TWFwO1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0tleTtcbiIsIi8qKlxuICogQHJlbWl4LXJ1bi9yb3V0ZXIgdjEuMTUuMFxuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBUeXBlcyBhbmQgQ29uc3RhbnRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiBBY3Rpb25zIHJlcHJlc2VudCB0aGUgdHlwZSBvZiBjaGFuZ2UgdG8gYSBsb2NhdGlvbiB2YWx1ZS5cbiAqL1xudmFyIEFjdGlvbjtcbihmdW5jdGlvbiAoQWN0aW9uKSB7XG4gIC8qKlxuICAgKiBBIFBPUCBpbmRpY2F0ZXMgYSBjaGFuZ2UgdG8gYW4gYXJiaXRyYXJ5IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXG4gICAqL1xuICBBY3Rpb25bXCJQb3BcIl0gPSBcIlBPUFwiO1xuICAvKipcbiAgICogQSBQVVNIIGluZGljYXRlcyBhIG5ldyBlbnRyeSBiZWluZyBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaCBhcyB3aGVuXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcbiAgICogZW50cmllcyBpbiB0aGUgc3RhY2sgYXJlIGxvc3QuXG4gICAqL1xuICBBY3Rpb25bXCJQdXNoXCJdID0gXCJQVVNIXCI7XG4gIC8qKlxuICAgKiBBIFJFUExBQ0UgaW5kaWNhdGVzIHRoZSBlbnRyeSBhdCB0aGUgY3VycmVudCBpbmRleCBpbiB0aGUgaGlzdG9yeSBzdGFja1xuICAgKiBiZWluZyByZXBsYWNlZCBieSBhIG5ldyBvbmUuXG4gICAqL1xuICBBY3Rpb25bXCJSZXBsYWNlXCJdID0gXCJSRVBMQUNFXCI7XG59KShBY3Rpb24gfHwgKEFjdGlvbiA9IHt9KSk7XG5jb25zdCBQb3BTdGF0ZUV2ZW50VHlwZSA9IFwicG9wc3RhdGVcIjtcbi8qKlxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxuICogaW4gc3RhdGVmdWwgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzIGxpa2UgdGVzdHMgYW5kIFJlYWN0IE5hdGl2ZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgbGV0IHtcbiAgICBpbml0aWFsRW50cmllcyA9IFtcIi9cIl0sXG4gICAgaW5pdGlhbEluZGV4LFxuICAgIHY1Q29tcGF0ID0gZmFsc2VcbiAgfSA9IG9wdGlvbnM7XG4gIGxldCBlbnRyaWVzOyAvLyBEZWNsYXJlIHNvIHdlIGNhbiBhY2Nlc3MgZnJvbSBjcmVhdGVNZW1vcnlMb2NhdGlvblxuICBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKChlbnRyeSwgaW5kZXgpID0+IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKGVudHJ5LCB0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIgPyBudWxsIDogZW50cnkuc3RhdGUsIGluZGV4ID09PSAwID8gXCJkZWZhdWx0XCIgOiB1bmRlZmluZWQpKTtcbiAgbGV0IGluZGV4ID0gY2xhbXBJbmRleChpbml0aWFsSW5kZXggPT0gbnVsbCA/IGVudHJpZXMubGVuZ3RoIC0gMSA6IGluaXRpYWxJbmRleCk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuICBmdW5jdGlvbiBjbGFtcEluZGV4KG4pIHtcbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgMCksIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uKCkge1xuICAgIHJldHVybiBlbnRyaWVzW2luZGV4XTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUsIGtleSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGVudHJpZXMgPyBnZXRDdXJyZW50TG9jYXRpb24oKS5wYXRobmFtZSA6IFwiL1wiLCB0bywgc3RhdGUsIGtleSk7XG4gICAgd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLCBcInJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBtZW1vcnkgaGlzdG9yeTogXCIgKyBKU09OLnN0cmluZ2lmeSh0bykpO1xuICAgIHJldHVybiBsb2NhdGlvbjtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSB7XG4gICAgZ2V0IGluZGV4KCkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfSxcbiAgICBjcmVhdGVIcmVmLFxuICAgIGNyZWF0ZVVSTCh0bykge1xuICAgICAgcmV0dXJuIG5ldyBVUkwoY3JlYXRlSHJlZih0byksIFwiaHR0cDovL2xvY2FsaG9zdFwiKTtcbiAgICB9LFxuICAgIGVuY29kZUxvY2F0aW9uKHRvKSB7XG4gICAgICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLnBhdGhuYW1lIHx8IFwiXCIsXG4gICAgICAgIHNlYXJjaDogcGF0aC5zZWFyY2ggfHwgXCJcIixcbiAgICAgICAgaGFzaDogcGF0aC5oYXNoIHx8IFwiXCJcbiAgICAgIH07XG4gICAgfSxcbiAgICBwdXNoKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGluZGV4ICs9IDE7XG4gICAgICBlbnRyaWVzLnNwbGljZShpbmRleCwgZW50cmllcy5sZW5ndGgsIG5leHRMb2NhdGlvbik7XG4gICAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhOiAxXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSk7XG4gICAgICBlbnRyaWVzW2luZGV4XSA9IG5leHRMb2NhdGlvbjtcbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgICAgZGVsdGE6IDBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnbyhkZWx0YSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICAgIGxldCBuZXh0SW5kZXggPSBjbGFtcEluZGV4KGluZGV4ICsgZGVsdGEpO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGVudHJpZXNbbmV4dEluZGV4XTtcbiAgICAgIGluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGxpc3Rlbihmbikge1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8qKlxuICogQnJvd3NlciBoaXN0b3J5IHN0b3JlcyB0aGUgbG9jYXRpb24gaW4gcmVndWxhciBVUkxzLiBUaGlzIGlzIHRoZSBzdGFuZGFyZCBmb3JcbiAqIG1vc3Qgd2ViIGFwcHMsIGJ1dCBpdCByZXF1aXJlcyBzb21lIGNvbmZpZ3VyYXRpb24gb24gdGhlIHNlcnZlciB0byBlbnN1cmUgeW91XG4gKiBzZXJ2ZSB0aGUgc2FtZSBhcHAgYXQgbXVsdGlwbGUgVVJMcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWJyb3dzZXJoaXN0b3J5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VyTG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KSB7XG4gICAgbGV0IHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0gPSB3aW5kb3cubG9jYXRpb247XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFwiXCIsIHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0sXG4gICAgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VySHJlZih3aW5kb3csIHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cbiAgcmV0dXJuIGdldFVybEJhc2VkSGlzdG9yeShjcmVhdGVCcm93c2VyTG9jYXRpb24sIGNyZWF0ZUJyb3dzZXJIcmVmLCBudWxsLCBvcHRpb25zKTtcbn1cbi8qKlxuICogSGFzaCBoaXN0b3J5IHN0b3JlcyB0aGUgbG9jYXRpb24gaW4gd2luZG93LmxvY2F0aW9uLmhhc2guIFRoaXMgbWFrZXMgaXQgaWRlYWxcbiAqIGZvciBzaXR1YXRpb25zIHdoZXJlIHlvdSBkb24ndCB3YW50IHRvIHNlbmQgdGhlIGxvY2F0aW9uIHRvIHRoZSBzZXJ2ZXIgZm9yXG4gKiBzb21lIHJlYXNvbiwgZWl0aGVyIGJlY2F1c2UgeW91IGRvIGNhbm5vdCBjb25maWd1cmUgaXQgb3IgdGhlIFVSTCBzcGFjZSBpc1xuICogcmVzZXJ2ZWQgZm9yIHNvbWV0aGluZyBlbHNlLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlaGFzaGhpc3RvcnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgICBoYXNoID0gXCJcIlxuICAgIH0gPSBwYXJzZVBhdGgod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpKTtcbiAgICAvLyBIYXNoIFVSTCBzaG91bGQgYWx3YXlzIGhhdmUgYSBsZWFkaW5nIC8ganVzdCBsaWtlIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZVxuICAgIC8vIGRvZXMsIHNvIGlmIGFuIGFwcCBlbmRzIHVwIGF0IGEgcm91dGUgbGlrZSAvI3NvbWV0aGluZyB0aGVuIHdlIGFkZCBhXG4gICAgLy8gbGVhZGluZyBzbGFzaCBzbyBhbGwgb2Ygb3VyIHBhdGgtbWF0Y2hpbmcgYmVoYXZlcyB0aGUgc2FtZSBhcyBpZiBpdCB3b3VsZFxuICAgIC8vIGluIGEgYnJvd3NlciByb3V0ZXIuICBUaGlzIGlzIHBhcnRpY3VsYXJseSBpbXBvcnRhbnQgd2hlbiB0aGVyZSBleGlzdHMgYVxuICAgIC8vIHJvb3Qgc3BsYXQgcm91dGUgKDxSb3V0ZSBwYXRoPVwiKlwiPikgc2luY2UgdGhhdCBtYXRjaGVzIGludGVybmFsbHkgYWdhaW5zdFxuICAgIC8vIFwiLypcIiBhbmQgd2UnZCBleHBlY3QgLyNzb21ldGhpbmcgdG8gNDA0IGluIGEgaGFzaCByb3V0ZXIgYXBwLlxuICAgIGlmICghcGF0aG5hbWUuc3RhcnRzV2l0aChcIi9cIikgJiYgIXBhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuXCIpKSB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiICsgcGF0aG5hbWU7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihcIlwiLCB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2hcbiAgICB9LFxuICAgIC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuICAgIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS51c3IgfHwgbnVsbCwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLmtleSB8fCBcImRlZmF1bHRcIik7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaEhyZWYod2luZG93LCB0bykge1xuICAgIGxldCBiYXNlID0gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJiYXNlXCIpO1xuICAgIGxldCBocmVmID0gXCJcIjtcbiAgICBpZiAoYmFzZSAmJiBiYXNlLmdldEF0dHJpYnV0ZShcImhyZWZcIikpIHtcbiAgICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIGxldCBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gaHJlZiArIFwiI1wiICsgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0bykpO1xuICB9XG4gIGZ1bmN0aW9uIHZhbGlkYXRlSGFzaExvY2F0aW9uKGxvY2F0aW9uLCB0bykge1xuICAgIHdhcm5pbmcobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnB1c2goXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIik7XG4gIH1cbiAgcmV0dXJuIGdldFVybEJhc2VkSGlzdG9yeShjcmVhdGVIYXNoTG9jYXRpb24sIGNyZWF0ZUhhc2hIcmVmLCB2YWxpZGF0ZUhhc2hMb2NhdGlvbiwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBpbnZhcmlhbnQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBoaXN0b3J5IVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2UsIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDgpO1xufVxuLyoqXG4gKiBGb3IgYnJvd3Nlci1iYXNlZCBoaXN0b3JpZXMsIHdlIGNvbWJpbmUgdGhlIHN0YXRlIGFuZCBrZXkgaW50byBhbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCkge1xuICByZXR1cm4ge1xuICAgIHVzcjogbG9jYXRpb24uc3RhdGUsXG4gICAga2V5OiBsb2NhdGlvbi5rZXksXG4gICAgaWR4OiBpbmRleFxuICB9O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgTG9jYXRpb24gb2JqZWN0IHdpdGggYSB1bmlxdWUga2V5IGZyb20gdGhlIGdpdmVuIFBhdGhcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24oY3VycmVudCwgdG8sIHN0YXRlLCBrZXkpIHtcbiAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICBzdGF0ZSA9IG51bGw7XG4gIH1cbiAgbGV0IGxvY2F0aW9uID0gX2V4dGVuZHMoe1xuICAgIHBhdGhuYW1lOiB0eXBlb2YgY3VycmVudCA9PT0gXCJzdHJpbmdcIiA/IGN1cnJlbnQgOiBjdXJyZW50LnBhdGhuYW1lLFxuICAgIHNlYXJjaDogXCJcIixcbiAgICBoYXNoOiBcIlwiXG4gIH0sIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bywge1xuICAgIHN0YXRlLFxuICAgIC8vIFRPRE86IFRoaXMgY291bGQgYmUgY2xlYW5lZCB1cC4gIHB1c2gvcmVwbGFjZSBzaG91bGQgcHJvYmFibHkganVzdCB0YWtlXG4gICAgLy8gZnVsbCBMb2NhdGlvbnMgbm93IGFuZCBhdm9pZCB0aGUgbmVlZCB0byBydW4gdGhyb3VnaCB0aGlzIGZsb3cgYXQgYWxsXG4gICAgLy8gQnV0IHRoYXQncyBhIHByZXR0eSBiaWcgcmVmYWN0b3IgdG8gdGhlIGN1cnJlbnQgdGVzdCBzdWl0ZSBzbyBnb2luZyB0b1xuICAgIC8vIGtlZXAgYXMgaXMgZm9yIHRoZSB0aW1lIGJlaW5nIGFuZCBqdXN0IGxldCBhbnkgaW5jb21pbmcga2V5cyB0YWtlIHByZWNlZGVuY2VcbiAgICBrZXk6IHRvICYmIHRvLmtleSB8fCBrZXkgfHwgY3JlYXRlS2V5KClcbiAgfSk7XG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIHN0cmluZyBVUkwgcGF0aCBmcm9tIHRoZSBnaXZlbiBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVQYXRoKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCJcbiAgfSA9IF9yZWY7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSBcIj9cIikgcGF0aG5hbWUgKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gXCI/XCIgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gXCIjXCIpIHBhdGhuYW1lICs9IGhhc2guY2hhckF0KDApID09PSBcIiNcIiA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRobmFtZTtcbn1cbi8qKlxuICogUGFyc2VzIGEgc3RyaW5nIFVSTCBwYXRoIGludG8gaXRzIHNlcGFyYXRlIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIGxldCBwYXJzZWRQYXRoID0ge307XG4gIGlmIChwYXRoKSB7XG4gICAgbGV0IGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZihcIiNcIik7XG4gICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLmhhc2ggPSBwYXRoLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuICAgIGxldCBzZWFyY2hJbmRleCA9IHBhdGguaW5kZXhPZihcIj9cIik7XG4gICAgaWYgKHNlYXJjaEluZGV4ID49IDApIHtcbiAgICAgIHBhcnNlZFBhdGguc2VhcmNoID0gcGF0aC5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgICB9XG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHBhcnNlZFBhdGgucGF0aG5hbWUgPSBwYXRoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyc2VkUGF0aDtcbn1cbmZ1bmN0aW9uIGdldFVybEJhc2VkSGlzdG9yeShnZXRMb2NhdGlvbiwgY3JlYXRlSHJlZiwgdmFsaWRhdGVMb2NhdGlvbiwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGxldCB7XG4gICAgd2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gIGxldCBpbmRleCA9IGdldEluZGV4KCk7XG4gIC8vIEluZGV4IHNob3VsZCBvbmx5IGJlIG51bGwgd2hlbiB3ZSBpbml0aWFsaXplLiBJZiBub3QsIGl0J3MgYmVjYXVzZSB0aGVcbiAgLy8gdXNlciBjYWxsZWQgaGlzdG9yeS5wdXNoU3RhdGUgb3IgaGlzdG9yeS5yZXBsYWNlU3RhdGUgZGlyZWN0bHksIGluIHdoaWNoXG4gIC8vIGNhc2Ugd2Ugc2hvdWxkIGxvZyBhIHdhcm5pbmcgYXMgaXQgd2lsbCByZXN1bHQgaW4gYnVncy5cbiAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICBpbmRleCA9IDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoX2V4dGVuZHMoe30sIGdsb2JhbEhpc3Rvcnkuc3RhdGUsIHtcbiAgICAgIGlkeDogaW5kZXhcbiAgICB9KSwgXCJcIik7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0SW5kZXgoKSB7XG4gICAgbGV0IHN0YXRlID0gZ2xvYmFsSGlzdG9yeS5zdGF0ZSB8fCB7XG4gICAgICBpZHg6IG51bGxcbiAgICB9O1xuICAgIHJldHVybiBzdGF0ZS5pZHg7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKCkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgbGV0IG5leHRJbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGRlbHRhID0gbmV4dEluZGV4ID09IG51bGwgPyBudWxsIDogbmV4dEluZGV4IC0gaW5kZXg7XG4gICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG4gICAgaW5kZXggPSBnZXRJbmRleCgpICsgMTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCk7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgLy8gdHJ5Li4uY2F0Y2ggYmVjYXVzZSBpT1MgbGltaXRzIHVzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHMgOi9cbiAgICB0cnkge1xuICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZiB0aGUgZXhjZXB0aW9uIGlzIGJlY2F1c2UgYHN0YXRlYCBjYW4ndCBiZSBzZXJpYWxpemVkLCBsZXQgdGhhdCB0aHJvd1xuICAgICAgLy8gb3V0d2FyZHMganVzdCBsaWtlIGEgcmVwbGFjZSBjYWxsIHdvdWxkIHNvIHRoZSBkZXYga25vd3MgdGhlIGNhdXNlXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9uYXYtaGlzdG9yeS1hcGlzLmh0bWwjc2hhcmVkLWhpc3RvcnktcHVzaC9yZXBsYWNlLXN0YXRlLXN0ZXBzXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zdHJ1Y3R1cmVkLWRhdGEuaHRtbCNzdHJ1Y3R1cmVkc2VyaWFsaXplaW50ZXJuYWxcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbiAmJiBlcnJvci5uYW1lID09PSBcIkRhdGFDbG9uZUVycm9yXCIpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICAvLyBUaGV5IGFyZSBnb2luZyB0byBsb3NlIHN0YXRlIGhlcmUsIGJ1dCB0aGVyZSBpcyBubyByZWFsXG4gICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgIH1cbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGE6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7XG4gICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTtcbiAgICBpbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3RvcnlTdGF0ZSwgXCJcIiwgdXJsKTtcbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGE6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVVUkwodG8pIHtcbiAgICAvLyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIGlzIFwibnVsbFwiICh0aGUgbGl0ZXJhbCBzdHJpbmcgdmFsdWUpIGluIEZpcmVmb3hcbiAgICAvLyB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsIG5vdGFibHkgd2hlbiBzZXJ2aW5nIGZyb20gYSBsb2NhbCBIVE1MIGZpbGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODc4Mjk3XG4gICAgbGV0IGJhc2UgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICE9PSBcIm51bGxcIiA/IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gOiB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICBsZXQgaHJlZiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gICAgaW52YXJpYW50KGJhc2UsIFwiTm8gd2luZG93LmxvY2F0aW9uLihvcmlnaW58aHJlZikgYXZhaWxhYmxlIHRvIGNyZWF0ZSBVUkwgZm9yIGhyZWY6IFwiICsgaHJlZik7XG4gICAgcmV0dXJuIG5ldyBVUkwoaHJlZiwgYmFzZSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0TG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KTtcbiAgICB9LFxuICAgIGxpc3Rlbihmbikge1xuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgaGlzdG9yeSBvbmx5IGFjY2VwdHMgb25lIGFjdGl2ZSBsaXN0ZW5lclwiKTtcbiAgICAgIH1cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgICBsaXN0ZW5lciA9IG51bGw7XG4gICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlSHJlZih0bykge1xuICAgICAgcmV0dXJuIGNyZWF0ZUhyZWYod2luZG93LCB0byk7XG4gICAgfSxcbiAgICBjcmVhdGVVUkwsXG4gICAgZW5jb2RlTG9jYXRpb24odG8pIHtcbiAgICAgIC8vIEVuY29kZSBhIExvY2F0aW9uIHRoZSBzYW1lIHdheSB3aW5kb3cubG9jYXRpb24gd291bGRcbiAgICAgIGxldCB1cmwgPSBjcmVhdGVVUkwodG8pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWU6IHVybC5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoOiB1cmwuc2VhcmNoLFxuICAgICAgICBoYXNoOiB1cmwuaGFzaFxuICAgICAgfTtcbiAgICB9LFxuICAgIHB1c2gsXG4gICAgcmVwbGFjZSxcbiAgICBnbyhuKSB7XG4gICAgICByZXR1cm4gZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuLy8jZW5kcmVnaW9uXG5cbnZhciBSZXN1bHRUeXBlO1xuKGZ1bmN0aW9uIChSZXN1bHRUeXBlKSB7XG4gIFJlc3VsdFR5cGVbXCJkYXRhXCJdID0gXCJkYXRhXCI7XG4gIFJlc3VsdFR5cGVbXCJkZWZlcnJlZFwiXSA9IFwiZGVmZXJyZWRcIjtcbiAgUmVzdWx0VHlwZVtcInJlZGlyZWN0XCJdID0gXCJyZWRpcmVjdFwiO1xuICBSZXN1bHRUeXBlW1wiZXJyb3JcIl0gPSBcImVycm9yXCI7XG59KShSZXN1bHRUeXBlIHx8IChSZXN1bHRUeXBlID0ge30pKTtcbmNvbnN0IGltbXV0YWJsZVJvdXRlS2V5cyA9IG5ldyBTZXQoW1wibGF6eVwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJwYXRoXCIsIFwiaWRcIiwgXCJpbmRleFwiLCBcImNoaWxkcmVuXCJdKTtcbmZ1bmN0aW9uIGlzSW5kZXhSb3V0ZShyb3V0ZSkge1xuICByZXR1cm4gcm91dGUuaW5kZXggPT09IHRydWU7XG59XG4vLyBXYWxrIHRoZSByb3V0ZSB0cmVlIGdlbmVyYXRpbmcgdW5pcXVlIElEcyB3aGVyZSBuZWNlc3NhcnksIHNvIHdlIGFyZSB3b3JraW5nXG4vLyBzb2xlbHkgd2l0aCBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCdzIHdpdGhpbiB0aGUgUm91dGVyXG5mdW5jdGlvbiBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCBwYXJlbnRQYXRoLCBtYW5pZmVzdCkge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG4gIGlmIChtYW5pZmVzdCA9PT0gdm9pZCAwKSB7XG4gICAgbWFuaWZlc3QgPSB7fTtcbiAgfVxuICByZXR1cm4gcm91dGVzLm1hcCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgbGV0IHRyZWVQYXRoID0gWy4uLnBhcmVudFBhdGgsIGluZGV4XTtcbiAgICBsZXQgaWQgPSB0eXBlb2Ygcm91dGUuaWQgPT09IFwic3RyaW5nXCIgPyByb3V0ZS5pZCA6IHRyZWVQYXRoLmpvaW4oXCItXCIpO1xuICAgIGludmFyaWFudChyb3V0ZS5pbmRleCAhPT0gdHJ1ZSB8fCAhcm91dGUuY2hpbGRyZW4sIFwiQ2Fubm90IHNwZWNpZnkgY2hpbGRyZW4gb24gYW4gaW5kZXggcm91dGVcIik7XG4gICAgaW52YXJpYW50KCFtYW5pZmVzdFtpZF0sIFwiRm91bmQgYSByb3V0ZSBpZCBjb2xsaXNpb24gb24gaWQgXFxcIlwiICsgaWQgKyBcIlxcXCIuICBSb3V0ZSBcIiArIFwiaWQncyBtdXN0IGJlIGdsb2JhbGx5IHVuaXF1ZSB3aXRoaW4gRGF0YSBSb3V0ZXIgdXNhZ2VzXCIpO1xuICAgIGlmIChpc0luZGV4Um91dGUocm91dGUpKSB7XG4gICAgICBsZXQgaW5kZXhSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlKSwge1xuICAgICAgICBpZFxuICAgICAgfSk7XG4gICAgICBtYW5pZmVzdFtpZF0gPSBpbmRleFJvdXRlO1xuICAgICAgcmV0dXJuIGluZGV4Um91dGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXRoT3JMYXlvdXRSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlKSwge1xuICAgICAgICBpZCxcbiAgICAgICAgY2hpbGRyZW46IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICBtYW5pZmVzdFtpZF0gPSBwYXRoT3JMYXlvdXRSb3V0ZTtcbiAgICAgIGlmIChyb3V0ZS5jaGlsZHJlbikge1xuICAgICAgICBwYXRoT3JMYXlvdXRSb3V0ZS5jaGlsZHJlbiA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGUuY2hpbGRyZW4sIG1hcFJvdXRlUHJvcGVydGllcywgdHJlZVBhdGgsIG1hbmlmZXN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXRoT3JMYXlvdXRSb3V0ZTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBNYXRjaGVzIHRoZSBnaXZlbiByb3V0ZXMgdG8gYSBsb2NhdGlvbiBhbmQgcmV0dXJucyB0aGUgbWF0Y2ggZGF0YS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL21hdGNoLXJvdXRlc1xuICovXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge1xuICAgIGJhc2VuYW1lID0gXCIvXCI7XG4gIH1cbiAgbGV0IGxvY2F0aW9uID0gdHlwZW9mIGxvY2F0aW9uQXJnID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uQXJnKSA6IGxvY2F0aW9uQXJnO1xuICBsZXQgcGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiLCBiYXNlbmFtZSk7XG4gIGlmIChwYXRobmFtZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgbGV0IGJyYW5jaGVzID0gZmxhdHRlblJvdXRlcyhyb3V0ZXMpO1xuICByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcyk7XG4gIGxldCBtYXRjaGVzID0gbnVsbDtcbiAgZm9yIChsZXQgaSA9IDA7IG1hdGNoZXMgPT0gbnVsbCAmJiBpIDwgYnJhbmNoZXMubGVuZ3RoOyArK2kpIHtcbiAgICBtYXRjaGVzID0gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2hlc1tpXSxcbiAgICAvLyBJbmNvbWluZyBwYXRobmFtZXMgYXJlIGdlbmVyYWxseSBlbmNvZGVkIGZyb20gZWl0aGVyIHdpbmRvdy5sb2NhdGlvblxuICAgIC8vIG9yIGZyb20gcm91dGVyLm5hdmlnYXRlLCBidXQgd2Ugd2FudCB0byBtYXRjaCBhZ2FpbnN0IHRoZSB1bmVuY29kZWRcbiAgICAvLyBwYXRocyBpbiB0aGUgcm91dGUgZGVmaW5pdGlvbnMuICBNZW1vcnkgcm91dGVyIGxvY2F0aW9ucyB3b24ndCBiZVxuICAgIC8vIGVuY29kZWQgaGVyZSBidXQgdGhlcmUgYWxzbyBzaG91bGRuJ3QgYmUgYW55dGhpbmcgdG8gZGVjb2RlIHNvIHRoaXNcbiAgICAvLyBzaG91bGQgYmUgYSBzYWZlIG9wZXJhdGlvbi4gIFRoaXMgYXZvaWRzIG5lZWRpbmcgbWF0Y2hSb3V0ZXMgdG8gYmVcbiAgICAvLyBoaXN0b3J5LWF3YXJlLlxuICAgIHNhZmVseURlY29kZVVSSShwYXRobmFtZSkpO1xuICB9XG4gIHJldHVybiBtYXRjaGVzO1xufVxuZnVuY3Rpb24gY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gobWF0Y2gsIGxvYWRlckRhdGEpIHtcbiAgbGV0IHtcbiAgICByb3V0ZSxcbiAgICBwYXRobmFtZSxcbiAgICBwYXJhbXNcbiAgfSA9IG1hdGNoO1xuICByZXR1cm4ge1xuICAgIGlkOiByb3V0ZS5pZCxcbiAgICBwYXRobmFtZSxcbiAgICBwYXJhbXMsXG4gICAgZGF0YTogbG9hZGVyRGF0YVtyb3V0ZS5pZF0sXG4gICAgaGFuZGxlOiByb3V0ZS5oYW5kbGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGZsYXR0ZW5Sb3V0ZXMocm91dGVzLCBicmFuY2hlcywgcGFyZW50c01ldGEsIHBhcmVudFBhdGgpIHtcbiAgaWYgKGJyYW5jaGVzID09PSB2b2lkIDApIHtcbiAgICBicmFuY2hlcyA9IFtdO1xuICB9XG4gIGlmIChwYXJlbnRzTWV0YSA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50c01ldGEgPSBbXTtcbiAgfVxuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFwiXCI7XG4gIH1cbiAgbGV0IGZsYXR0ZW5Sb3V0ZSA9IChyb3V0ZSwgaW5kZXgsIHJlbGF0aXZlUGF0aCkgPT4ge1xuICAgIGxldCBtZXRhID0ge1xuICAgICAgcmVsYXRpdmVQYXRoOiByZWxhdGl2ZVBhdGggPT09IHVuZGVmaW5lZCA/IHJvdXRlLnBhdGggfHwgXCJcIiA6IHJlbGF0aXZlUGF0aCxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09IHRydWUsXG4gICAgICBjaGlsZHJlbkluZGV4OiBpbmRleCxcbiAgICAgIHJvdXRlXG4gICAgfTtcbiAgICBpZiAobWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgIGludmFyaWFudChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKHBhcmVudFBhdGgpLCBcIkFic29sdXRlIHJvdXRlIHBhdGggXFxcIlwiICsgbWV0YS5yZWxhdGl2ZVBhdGggKyBcIlxcXCIgbmVzdGVkIHVuZGVyIHBhdGggXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiIGlzIG5vdCB2YWxpZC4gQW4gYWJzb2x1dGUgY2hpbGQgcm91dGUgcGF0aCBcIikgKyBcIm11c3Qgc3RhcnQgd2l0aCB0aGUgY29tYmluZWQgcGF0aCBvZiBhbGwgaXRzIHBhcmVudCByb3V0ZXMuXCIpO1xuICAgICAgbWV0YS5yZWxhdGl2ZVBhdGggPSBtZXRhLnJlbGF0aXZlUGF0aC5zbGljZShwYXJlbnRQYXRoLmxlbmd0aCk7XG4gICAgfVxuICAgIGxldCBwYXRoID0gam9pblBhdGhzKFtwYXJlbnRQYXRoLCBtZXRhLnJlbGF0aXZlUGF0aF0pO1xuICAgIGxldCByb3V0ZXNNZXRhID0gcGFyZW50c01ldGEuY29uY2F0KG1ldGEpO1xuICAgIC8vIEFkZCB0aGUgY2hpbGRyZW4gYmVmb3JlIGFkZGluZyB0aGlzIHJvdXRlIHRvIHRoZSBhcnJheSwgc28gd2UgdHJhdmVyc2UgdGhlXG4gICAgLy8gcm91dGUgdHJlZSBkZXB0aC1maXJzdCBhbmQgY2hpbGQgcm91dGVzIGFwcGVhciBiZWZvcmUgdGhlaXIgcGFyZW50cyBpblxuICAgIC8vIHRoZSBcImZsYXR0ZW5lZFwiIHZlcnNpb24uXG4gICAgaWYgKHJvdXRlLmNoaWxkcmVuICYmIHJvdXRlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgIC8vIE91ciB0eXBlcyBrbm93IGJldHRlciwgYnV0IHJ1bnRpbWUgSlMgbWF5IG5vdCFcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgIHJvdXRlLmluZGV4ICE9PSB0cnVlLCBcIkluZGV4IHJvdXRlcyBtdXN0IG5vdCBoYXZlIGNoaWxkIHJvdXRlcy4gUGxlYXNlIHJlbW92ZSBcIiArIChcImFsbCBjaGlsZCByb3V0ZXMgZnJvbSByb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIuXCIpKTtcbiAgICAgIGZsYXR0ZW5Sb3V0ZXMocm91dGUuY2hpbGRyZW4sIGJyYW5jaGVzLCByb3V0ZXNNZXRhLCBwYXRoKTtcbiAgICB9XG4gICAgLy8gUm91dGVzIHdpdGhvdXQgYSBwYXRoIHNob3VsZG4ndCBldmVyIG1hdGNoIGJ5IHRoZW1zZWx2ZXMgdW5sZXNzIHRoZXkgYXJlXG4gICAgLy8gaW5kZXggcm91dGVzLCBzbyBkb24ndCBhZGQgdGhlbSB0byB0aGUgbGlzdCBvZiBwb3NzaWJsZSBicmFuY2hlcy5cbiAgICBpZiAocm91dGUucGF0aCA9PSBudWxsICYmICFyb3V0ZS5pbmRleCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBicmFuY2hlcy5wdXNoKHtcbiAgICAgIHBhdGgsXG4gICAgICBzY29yZTogY29tcHV0ZVNjb3JlKHBhdGgsIHJvdXRlLmluZGV4KSxcbiAgICAgIHJvdXRlc01ldGFcbiAgICB9KTtcbiAgfTtcbiAgcm91dGVzLmZvckVhY2goKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIHZhciBfcm91dGUkcGF0aDtcbiAgICAvLyBjb2Fyc2UtZ3JhaW4gY2hlY2sgZm9yIG9wdGlvbmFsIHBhcmFtc1xuICAgIGlmIChyb3V0ZS5wYXRoID09PSBcIlwiIHx8ICEoKF9yb3V0ZSRwYXRoID0gcm91dGUucGF0aCkgIT0gbnVsbCAmJiBfcm91dGUkcGF0aC5pbmNsdWRlcyhcIj9cIikpKSB7XG4gICAgICBmbGF0dGVuUm91dGUocm91dGUsIGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgZXhwbG9kZWQgb2YgZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMocm91dGUucGF0aCkpIHtcbiAgICAgICAgZmxhdHRlblJvdXRlKHJvdXRlLCBpbmRleCwgZXhwbG9kZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBicmFuY2hlcztcbn1cbi8qKlxuICogQ29tcHV0ZXMgYWxsIGNvbWJpbmF0aW9ucyBvZiBvcHRpb25hbCBwYXRoIHNlZ21lbnRzIGZvciBhIGdpdmVuIHBhdGgsXG4gKiBleGNsdWRpbmcgY29tYmluYXRpb25zIHRoYXQgYXJlIGFtYmlndW91cyBhbmQgb2YgbG93ZXIgcHJpb3JpdHkuXG4gKlxuICogRm9yIGV4YW1wbGUsIGAvb25lLzp0d28/L3RocmVlLzpmb3VyPy86Zml2ZT9gIGV4cGxvZGVzIHRvOlxuICogLSBgL29uZS90aHJlZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZWBcbiAqIC0gYC9vbmUvdGhyZWUvOmZvdXJgXG4gKiAtIGAvb25lL3RocmVlLzpmaXZlYFxuICogLSBgL29uZS86dHdvL3RocmVlLzpmb3VyYFxuICogLSBgL29uZS86dHdvL3RocmVlLzpmaXZlYFxuICogLSBgL29uZS90aHJlZS86Zm91ci86Zml2ZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91ci86Zml2ZWBcbiAqL1xuZnVuY3Rpb24gZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMocGF0aCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgaWYgKHNlZ21lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuICBsZXQgW2ZpcnN0LCAuLi5yZXN0XSA9IHNlZ21lbnRzO1xuICAvLyBPcHRpb25hbCBwYXRoIHNlZ21lbnRzIGFyZSBkZW5vdGVkIGJ5IGEgdHJhaWxpbmcgYD9gXG4gIGxldCBpc09wdGlvbmFsID0gZmlyc3QuZW5kc1dpdGgoXCI/XCIpO1xuICAvLyBDb21wdXRlIHRoZSBjb3JyZXNwb25kaW5nIHJlcXVpcmVkIHNlZ21lbnQ6IGBmb28/YCAtPiBgZm9vYFxuICBsZXQgcmVxdWlyZWQgPSBmaXJzdC5yZXBsYWNlKC9cXD8kLywgXCJcIik7XG4gIGlmIChyZXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIEludGVwcmV0IGVtcHR5IHN0cmluZyBhcyBvbWl0dGluZyBhbiBvcHRpb25hbCBzZWdtZW50XG4gICAgLy8gYFtcIm9uZVwiLCBcIlwiLCBcInRocmVlXCJdYCBjb3JyZXNwb25kcyB0byBvbWl0dGluZyBgOnR3b2AgZnJvbSBgL29uZS86dHdvPy90aHJlZWAgLT4gYC9vbmUvdGhyZWVgXG4gICAgcmV0dXJuIGlzT3B0aW9uYWwgPyBbcmVxdWlyZWQsIFwiXCJdIDogW3JlcXVpcmVkXTtcbiAgfVxuICBsZXQgcmVzdEV4cGxvZGVkID0gZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMocmVzdC5qb2luKFwiL1wiKSk7XG4gIGxldCByZXN1bHQgPSBbXTtcbiAgLy8gQWxsIGNoaWxkIHBhdGhzIHdpdGggdGhlIHByZWZpeC4gIERvIHRoaXMgZm9yIGFsbCBjaGlsZHJlbiBiZWZvcmUgdGhlXG4gIC8vIG9wdGlvbmFsIHZlcnNpb24gZm9yIGFsbCBjaGlsZHJlbiwgc28gd2UgZ2V0IGNvbnNpc3RlbnQgb3JkZXJpbmcgd2hlcmUgdGhlXG4gIC8vIHBhcmVudCBvcHRpb25hbCBhc3BlY3QgaXMgcHJlZmVycmVkIGFzIHJlcXVpcmVkLiAgT3RoZXJ3aXNlLCB3ZSBjYW4gZ2V0XG4gIC8vIGNoaWxkIHNlY3Rpb25zIGludGVyc3BlcnNlZCB3aGVyZSBkZWVwZXIgb3B0aW9uYWwgc2VnbWVudHMgYXJlIGhpZ2hlciB0aGFuXG4gIC8vIHBhcmVudCBvcHRpb25hbCBzZWdtZW50cywgd2hlcmUgZm9yIGV4YW1wbGUsIC86dHdvIHdvdWxkIGV4cGxvZGUgX2VhcmxpZXJfXG4gIC8vIHRoZW4gLzpvbmUuICBCeSBhbHdheXMgaW5jbHVkaW5nIHRoZSBwYXJlbnQgYXMgcmVxdWlyZWQgX2ZvciBhbGwgY2hpbGRyZW5fXG4gIC8vIGZpcnN0LCB3ZSBhdm9pZCB0aGlzIGlzc3VlXG4gIHJlc3VsdC5wdXNoKC4uLnJlc3RFeHBsb2RlZC5tYXAoc3VicGF0aCA9PiBzdWJwYXRoID09PSBcIlwiID8gcmVxdWlyZWQgOiBbcmVxdWlyZWQsIHN1YnBhdGhdLmpvaW4oXCIvXCIpKSk7XG4gIC8vIFRoZW4sIGlmIHRoaXMgaXMgYW4gb3B0aW9uYWwgdmFsdWUsIGFkZCBhbGwgY2hpbGQgdmVyc2lvbnMgd2l0aG91dFxuICBpZiAoaXNPcHRpb25hbCkge1xuICAgIHJlc3VsdC5wdXNoKC4uLnJlc3RFeHBsb2RlZCk7XG4gIH1cbiAgLy8gZm9yIGFic29sdXRlIHBhdGhzLCBlbnN1cmUgYC9gIGluc3RlYWQgb2YgZW1wdHkgc2VnbWVudFxuICByZXR1cm4gcmVzdWx0Lm1hcChleHBsb2RlZCA9PiBwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpICYmIGV4cGxvZGVkID09PSBcIlwiID8gXCIvXCIgOiBleHBsb2RlZCk7XG59XG5mdW5jdGlvbiByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcykge1xuICBicmFuY2hlcy5zb3J0KChhLCBiKSA9PiBhLnNjb3JlICE9PSBiLnNjb3JlID8gYi5zY29yZSAtIGEuc2NvcmUgLy8gSGlnaGVyIHNjb3JlIGZpcnN0XG4gIDogY29tcGFyZUluZGV4ZXMoYS5yb3V0ZXNNZXRhLm1hcChtZXRhID0+IG1ldGEuY2hpbGRyZW5JbmRleCksIGIucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpKSk7XG59XG5jb25zdCBwYXJhbVJlID0gL146W1xcdy1dKyQvO1xuY29uc3QgZHluYW1pY1NlZ21lbnRWYWx1ZSA9IDM7XG5jb25zdCBpbmRleFJvdXRlVmFsdWUgPSAyO1xuY29uc3QgZW1wdHlTZWdtZW50VmFsdWUgPSAxO1xuY29uc3Qgc3RhdGljU2VnbWVudFZhbHVlID0gMTA7XG5jb25zdCBzcGxhdFBlbmFsdHkgPSAtMjtcbmNvbnN0IGlzU3BsYXQgPSBzID0+IHMgPT09IFwiKlwiO1xuZnVuY3Rpb24gY29tcHV0ZVNjb3JlKHBhdGgsIGluZGV4KSB7XG4gIGxldCBzZWdtZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBsZXQgaW5pdGlhbFNjb3JlID0gc2VnbWVudHMubGVuZ3RoO1xuICBpZiAoc2VnbWVudHMuc29tZShpc1NwbGF0KSkge1xuICAgIGluaXRpYWxTY29yZSArPSBzcGxhdFBlbmFsdHk7XG4gIH1cbiAgaWYgKGluZGV4KSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IGluZGV4Um91dGVWYWx1ZTtcbiAgfVxuICByZXR1cm4gc2VnbWVudHMuZmlsdGVyKHMgPT4gIWlzU3BsYXQocykpLnJlZHVjZSgoc2NvcmUsIHNlZ21lbnQpID0+IHNjb3JlICsgKHBhcmFtUmUudGVzdChzZWdtZW50KSA/IGR5bmFtaWNTZWdtZW50VmFsdWUgOiBzZWdtZW50ID09PSBcIlwiID8gZW1wdHlTZWdtZW50VmFsdWUgOiBzdGF0aWNTZWdtZW50VmFsdWUpLCBpbml0aWFsU2NvcmUpO1xufVxuZnVuY3Rpb24gY29tcGFyZUluZGV4ZXMoYSwgYikge1xuICBsZXQgc2libGluZ3MgPSBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5zbGljZSgwLCAtMSkuZXZlcnkoKG4sIGkpID0+IG4gPT09IGJbaV0pO1xuICByZXR1cm4gc2libGluZ3MgP1xuICAvLyBJZiB0d28gcm91dGVzIGFyZSBzaWJsaW5ncywgd2Ugc2hvdWxkIHRyeSB0byBtYXRjaCB0aGUgZWFybGllciBzaWJsaW5nXG4gIC8vIGZpcnN0LiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gaGF2ZSBmaW5lLWdyYWluZWQgY29udHJvbCBvdmVyIHRoZSBtYXRjaGluZ1xuICAvLyBiZWhhdmlvciBieSBzaW1wbHkgcHV0dGluZyByb3V0ZXMgd2l0aCBpZGVudGljYWwgcGF0aHMgaW4gdGhlIG9yZGVyIHRoZXlcbiAgLy8gd2FudCB0aGVtIHRyaWVkLlxuICBhW2EubGVuZ3RoIC0gMV0gLSBiW2IubGVuZ3RoIC0gMV0gOlxuICAvLyBPdGhlcndpc2UsIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gcmFuayBub24tc2libGluZ3MgYnkgaW5kZXgsXG4gIC8vIHNvIHRoZXkgc29ydCBlcXVhbGx5LlxuICAwO1xufVxuZnVuY3Rpb24gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2gsIHBhdGhuYW1lKSB7XG4gIGxldCB7XG4gICAgcm91dGVzTWV0YVxuICB9ID0gYnJhbmNoO1xuICBsZXQgbWF0Y2hlZFBhcmFtcyA9IHt9O1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm91dGVzTWV0YS5sZW5ndGg7ICsraSkge1xuICAgIGxldCBtZXRhID0gcm91dGVzTWV0YVtpXTtcbiAgICBsZXQgZW5kID0gaSA9PT0gcm91dGVzTWV0YS5sZW5ndGggLSAxO1xuICAgIGxldCByZW1haW5pbmdQYXRobmFtZSA9IG1hdGNoZWRQYXRobmFtZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKG1hdGNoZWRQYXRobmFtZS5sZW5ndGgpIHx8IFwiL1wiO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoUGF0aCh7XG4gICAgICBwYXRoOiBtZXRhLnJlbGF0aXZlUGF0aCxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IG1ldGEuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVuZFxuICAgIH0sIHJlbWFpbmluZ1BhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICBPYmplY3QuYXNzaWduKG1hdGNoZWRQYXJhbXMsIG1hdGNoLnBhcmFtcyk7XG4gICAgbGV0IHJvdXRlID0gbWV0YS5yb3V0ZTtcbiAgICBtYXRjaGVzLnB1c2goe1xuICAgICAgLy8gVE9ETzogQ2FuIHRoaXMgYXMgYmUgYXZvaWRlZD9cbiAgICAgIHBhcmFtczogbWF0Y2hlZFBhcmFtcyxcbiAgICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICAgIHBhdGhuYW1lQmFzZTogbm9ybWFsaXplUGF0aG5hbWUoam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pKSxcbiAgICAgIHJvdXRlXG4gICAgfSk7XG4gICAgaWYgKG1hdGNoLnBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG4vKipcbiAqIFJldHVybnMgYSBwYXRoIHdpdGggcGFyYW1zIGludGVycG9sYXRlZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL2dlbmVyYXRlLXBhdGhcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKG9yaWdpbmFsUGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG4gIGxldCBwYXRoID0gb3JpZ2luYWxQYXRoO1xuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikgJiYgcGF0aCAhPT0gXCIqXCIgJiYgIXBhdGguZW5kc1dpdGgoXCIvKlwiKSkge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiUm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIFwiICsgKFwiXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIiBiZWNhdXNlIHRoZSBgKmAgY2hhcmFjdGVyIG11c3QgXCIpICsgXCJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgXCIgKyAoXCJwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIuXCIpKTtcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKTtcbiAgfVxuICAvLyBlbnN1cmUgYC9gIGlzIGFkZGVkIGF0IHRoZSBiZWdpbm5pbmcgaWYgdGhlIHBhdGggaXMgYWJzb2x1dGVcbiAgY29uc3QgcHJlZml4ID0gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSA/IFwiL1wiIDogXCJcIjtcbiAgY29uc3Qgc3RyaW5naWZ5ID0gcCA9PiBwID09IG51bGwgPyBcIlwiIDogdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyBwIDogU3RyaW5nKHApO1xuICBjb25zdCBzZWdtZW50cyA9IHBhdGguc3BsaXQoL1xcLysvKS5tYXAoKHNlZ21lbnQsIGluZGV4LCBhcnJheSkgPT4ge1xuICAgIGNvbnN0IGlzTGFzdFNlZ21lbnQgPSBpbmRleCA9PT0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAvLyBvbmx5IGFwcGx5IHRoZSBzcGxhdCBpZiBpdCdzIHRoZSBsYXN0IHNlZ21lbnRcbiAgICBpZiAoaXNMYXN0U2VnbWVudCAmJiBzZWdtZW50ID09PSBcIipcIikge1xuICAgICAgY29uc3Qgc3RhciA9IFwiKlwiO1xuICAgICAgLy8gQXBwbHkgdGhlIHNwbGF0XG4gICAgICByZXR1cm4gc3RyaW5naWZ5KHBhcmFtc1tzdGFyXSk7XG4gICAgfVxuICAgIGNvbnN0IGtleU1hdGNoID0gc2VnbWVudC5tYXRjaCgvXjooW1xcdy1dKykoXFw/PykkLyk7XG4gICAgaWYgKGtleU1hdGNoKSB7XG4gICAgICBjb25zdCBbLCBrZXksIG9wdGlvbmFsXSA9IGtleU1hdGNoO1xuICAgICAgbGV0IHBhcmFtID0gcGFyYW1zW2tleV07XG4gICAgICBpbnZhcmlhbnQob3B0aW9uYWwgPT09IFwiP1wiIHx8IHBhcmFtICE9IG51bGwsIFwiTWlzc2luZyBcXFwiOlwiICsga2V5ICsgXCJcXFwiIHBhcmFtXCIpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeShwYXJhbSk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBhbnkgb3B0aW9uYWwgbWFya2VycyBmcm9tIG9wdGlvbmFsIHN0YXRpYyBzZWdtZW50c1xuICAgIHJldHVybiBzZWdtZW50LnJlcGxhY2UoL1xcPyQvZywgXCJcIik7XG4gIH0pXG4gIC8vIFJlbW92ZSBlbXB0eSBzZWdtZW50c1xuICAuZmlsdGVyKHNlZ21lbnQgPT4gISFzZWdtZW50KTtcbiAgcmV0dXJuIHByZWZpeCArIHNlZ21lbnRzLmpvaW4oXCIvXCIpO1xufVxuLyoqXG4gKiBQZXJmb3JtcyBwYXR0ZXJuIG1hdGNoaW5nIG9uIGEgVVJMIHBhdGhuYW1lIGFuZCByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0XG4gKiB0aGUgbWF0Y2guXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9tYXRjaC1wYXRoXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSkge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXR0ZXJuID0ge1xuICAgICAgcGF0aDogcGF0dGVybixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgZW5kOiB0cnVlXG4gICAgfTtcbiAgfVxuICBsZXQgW21hdGNoZXIsIGNvbXBpbGVkUGFyYW1zXSA9IGNvbXBpbGVQYXRoKHBhdHRlcm4ucGF0aCwgcGF0dGVybi5jYXNlU2Vuc2l0aXZlLCBwYXR0ZXJuLmVuZCk7XG4gIGxldCBtYXRjaCA9IHBhdGhuYW1lLm1hdGNoKG1hdGNoZXIpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgbGV0IG1hdGNoZWRQYXRobmFtZSA9IG1hdGNoWzBdO1xuICBsZXQgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgbGV0IGNhcHR1cmVHcm91cHMgPSBtYXRjaC5zbGljZSgxKTtcbiAgbGV0IHBhcmFtcyA9IGNvbXBpbGVkUGFyYW1zLnJlZHVjZSgobWVtbywgX3JlZiwgaW5kZXgpID0+IHtcbiAgICBsZXQge1xuICAgICAgcGFyYW1OYW1lLFxuICAgICAgaXNPcHRpb25hbFxuICAgIH0gPSBfcmVmO1xuICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcGF0aG5hbWVCYXNlIGhlcmUgdXNpbmcgdGhlIHJhdyBzcGxhdCB2YWx1ZVxuICAgIC8vIGluc3RlYWQgb2YgdXNpbmcgcGFyYW1zW1wiKlwiXSBsYXRlciBiZWNhdXNlIGl0IHdpbGwgYmUgZGVjb2RlZCB0aGVuXG4gICAgaWYgKHBhcmFtTmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgIGxldCBzcGxhdFZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIjtcbiAgICAgIHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5zbGljZSgwLCBtYXRjaGVkUGF0aG5hbWUubGVuZ3RoIC0gc3BsYXRWYWx1ZS5sZW5ndGgpLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBjYXB0dXJlR3JvdXBzW2luZGV4XTtcbiAgICBpZiAoaXNPcHRpb25hbCAmJiAhdmFsdWUpIHtcbiAgICAgIG1lbW9bcGFyYW1OYW1lXSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVtb1twYXJhbU5hbWVdID0gc2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlIHx8IFwiXCIsIHBhcmFtTmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9LCB7fSk7XG4gIHJldHVybiB7XG4gICAgcGFyYW1zLFxuICAgIHBhdGhuYW1lOiBtYXRjaGVkUGF0aG5hbWUsXG4gICAgcGF0aG5hbWVCYXNlLFxuICAgIHBhdHRlcm5cbiAgfTtcbn1cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIGNhc2VTZW5zaXRpdmUsIGVuZCkge1xuICBpZiAoY2FzZVNlbnNpdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlO1xuICB9XG4gIGlmIChlbmQgPT09IHZvaWQgMCkge1xuICAgIGVuZCA9IHRydWU7XG4gIH1cbiAgd2FybmluZyhwYXRoID09PSBcIipcIiB8fCAhcGF0aC5lbmRzV2l0aChcIipcIikgfHwgcGF0aC5lbmRzV2l0aChcIi8qXCIpLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSk7XG4gIGxldCBwYXJhbXMgPSBbXTtcbiAgbGV0IHJlZ2V4cFNvdXJjZSA9IFwiXlwiICsgcGF0aC5yZXBsYWNlKC9cXC8qXFwqPyQvLCBcIlwiKSAvLyBJZ25vcmUgdHJhaWxpbmcgLyBhbmQgLyosIHdlJ2xsIGhhbmRsZSBpdCBiZWxvd1xuICAucmVwbGFjZSgvXlxcLyovLCBcIi9cIikgLy8gTWFrZSBzdXJlIGl0IGhhcyBhIGxlYWRpbmcgL1xuICAucmVwbGFjZSgvW1xcXFwuKiteJHt9fCgpW1xcXV0vZywgXCJcXFxcJCZcIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnNcbiAgLnJlcGxhY2UoL1xcLzooW1xcdy1dKykoXFw/KT8vZywgKF8sIHBhcmFtTmFtZSwgaXNPcHRpb25hbCkgPT4ge1xuICAgIHBhcmFtcy5wdXNoKHtcbiAgICAgIHBhcmFtTmFtZSxcbiAgICAgIGlzT3B0aW9uYWw6IGlzT3B0aW9uYWwgIT0gbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiBpc09wdGlvbmFsID8gXCIvPyhbXlxcXFwvXSspP1wiIDogXCIvKFteXFxcXC9dKylcIjtcbiAgfSk7XG4gIGlmIChwYXRoLmVuZHNXaXRoKFwiKlwiKSkge1xuICAgIHBhcmFtcy5wdXNoKHtcbiAgICAgIHBhcmFtTmFtZTogXCIqXCJcbiAgICB9KTtcbiAgICByZWdleHBTb3VyY2UgKz0gcGF0aCA9PT0gXCIqXCIgfHwgcGF0aCA9PT0gXCIvKlwiID8gXCIoLiopJFwiIC8vIEFscmVhZHkgbWF0Y2hlZCB0aGUgaW5pdGlhbCAvLCBqdXN0IG1hdGNoIHRoZSByZXN0XG4gICAgOiBcIig/OlxcXFwvKC4rKXxcXFxcLyopJFwiOyAvLyBEb24ndCBpbmNsdWRlIHRoZSAvIGluIHBhcmFtc1tcIipcIl1cbiAgfSBlbHNlIGlmIChlbmQpIHtcbiAgICAvLyBXaGVuIG1hdGNoaW5nIHRvIHRoZSBlbmQsIGlnbm9yZSB0cmFpbGluZyBzbGFzaGVzXG4gICAgcmVnZXhwU291cmNlICs9IFwiXFxcXC8qJFwiO1xuICB9IGVsc2UgaWYgKHBhdGggIT09IFwiXCIgJiYgcGF0aCAhPT0gXCIvXCIpIHtcbiAgICAvLyBJZiBvdXIgcGF0aCBpcyBub24tZW1wdHkgYW5kIGNvbnRhaW5zIGFueXRoaW5nIGJleW9uZCBhbiBpbml0aWFsIHNsYXNoLFxuICAgIC8vIHRoZW4gd2UgaGF2ZSBfc29tZV8gZm9ybSBvZiBwYXRoIGluIG91ciByZWdleCwgc28gd2Ugc2hvdWxkIGV4cGVjdCB0b1xuICAgIC8vIG1hdGNoIG9ubHkgaWYgd2UgZmluZCB0aGUgZW5kIG9mIHRoaXMgcGF0aCBzZWdtZW50LiAgTG9vayBmb3IgYW4gb3B0aW9uYWxcbiAgICAvLyBub24tY2FwdHVyZWQgdHJhaWxpbmcgc2xhc2ggKHRvIG1hdGNoIGEgcG9ydGlvbiBvZiB0aGUgVVJMKSBvciB0aGUgZW5kXG4gICAgLy8gb2YgdGhlIHBhdGggKGlmIHdlJ3ZlIG1hdGNoZWQgdG8gdGhlIGVuZCkuICBXZSB1c2VkIHRvIGRvIHRoaXMgd2l0aCBhXG4gICAgLy8gd29yZCBib3VuZGFyeSBidXQgdGhhdCBnaXZlcyBmYWxzZSBwb3NpdGl2ZXMgb24gcm91dGVzIGxpa2VcbiAgICAvLyAvdXNlci1wcmVmZXJlbmNlcyBzaW5jZSBgLWAgY291bnRzIGFzIGEgd29yZCBib3VuZGFyeS5cbiAgICByZWdleHBTb3VyY2UgKz0gXCIoPzooPz1cXFxcL3wkKSlcIjtcbiAgfSBlbHNlIDtcbiAgbGV0IG1hdGNoZXIgPSBuZXcgUmVnRXhwKHJlZ2V4cFNvdXJjZSwgY2FzZVNlbnNpdGl2ZSA/IHVuZGVmaW5lZCA6IFwiaVwiKTtcbiAgcmV0dXJuIFttYXRjaGVyLCBwYXJhbXNdO1xufVxuZnVuY3Rpb24gc2FmZWx5RGVjb2RlVVJJKHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSSh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJUaGUgVVJMIHBhdGggXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgY291bGQgbm90IGJlIGRlY29kZWQgYmVjYXVzZSBpdCBpcyBpcyBhIFwiICsgXCJtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHkgZHVlIHRvIGEgYmFkIHBlcmNlbnQgXCIgKyAoXCJlbmNvZGluZyAoXCIgKyBlcnJvciArIFwiKS5cIikpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuZnVuY3Rpb24gc2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlLCBwYXJhbU5hbWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlRoZSB2YWx1ZSBmb3IgdGhlIFVSTCBwYXJhbSBcXFwiXCIgKyBwYXJhbU5hbWUgKyBcIlxcXCIgd2lsbCBub3QgYmUgZGVjb2RlZCBiZWNhdXNlXCIgKyAoXCIgdGhlIHN0cmluZyBcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiBpcyBhIG1hbGZvcm1lZCBVUkwgc2VnbWVudC4gVGhpcyBpcyBwcm9iYWJseVwiKSArIChcIiBkdWUgdG8gYSBiYWQgcGVyY2VudCBlbmNvZGluZyAoXCIgKyBlcnJvciArIFwiKS5cIikpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSByZXR1cm4gcGF0aG5hbWU7XG4gIGlmICghcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGJhc2VuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLy8gV2Ugd2FudCB0byBsZWF2ZSB0cmFpbGluZyBzbGFzaCBiZWhhdmlvciBpbiB0aGUgdXNlcidzIGNvbnRyb2wsIHNvIGlmIHRoZXlcbiAgLy8gc3BlY2lmeSBhIGJhc2VuYW1lIHdpdGggYSB0cmFpbGluZyBzbGFzaCwgd2Ugc2hvdWxkIHN1cHBvcnQgaXRcbiAgbGV0IHN0YXJ0SW5kZXggPSBiYXNlbmFtZS5lbmRzV2l0aChcIi9cIikgPyBiYXNlbmFtZS5sZW5ndGggLSAxIDogYmFzZW5hbWUubGVuZ3RoO1xuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoc3RhcnRJbmRleCk7XG4gIGlmIChuZXh0Q2hhciAmJiBuZXh0Q2hhciAhPT0gXCIvXCIpIHtcbiAgICAvLyBwYXRobmFtZSBkb2VzIG5vdCBzdGFydCB3aXRoIGJhc2VuYW1lL1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBwYXRobmFtZS5zbGljZShzdGFydEluZGV4KSB8fCBcIi9cIjtcbn1cbi8qKlxuICogUmV0dXJucyBhIHJlc29sdmVkIHBhdGggb2JqZWN0IHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBwYXRobmFtZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL3Jlc29sdmUtcGF0aFxuICovXG5mdW5jdGlvbiByZXNvbHZlUGF0aCh0bywgZnJvbVBhdGhuYW1lKSB7XG4gIGlmIChmcm9tUGF0aG5hbWUgPT09IHZvaWQgMCkge1xuICAgIGZyb21QYXRobmFtZSA9IFwiL1wiO1xuICB9XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IHRvUGF0aG5hbWUsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICBsZXQgcGF0aG5hbWUgPSB0b1BhdGhuYW1lID8gdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSA/IHRvUGF0aG5hbWUgOiByZXNvbHZlUGF0aG5hbWUodG9QYXRobmFtZSwgZnJvbVBhdGhuYW1lKSA6IGZyb21QYXRobmFtZTtcbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2g6IG5vcm1hbGl6ZVNlYXJjaChzZWFyY2gpLFxuICAgIGhhc2g6IG5vcm1hbGl6ZUhhc2goaGFzaClcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZShyZWxhdGl2ZVBhdGgsIGZyb21QYXRobmFtZSkge1xuICBsZXQgc2VnbWVudHMgPSBmcm9tUGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gIGxldCByZWxhdGl2ZVNlZ21lbnRzID0gcmVsYXRpdmVQYXRoLnNwbGl0KFwiL1wiKTtcbiAgcmVsYXRpdmVTZWdtZW50cy5mb3JFYWNoKHNlZ21lbnQgPT4ge1xuICAgIGlmIChzZWdtZW50ID09PSBcIi4uXCIpIHtcbiAgICAgIC8vIEtlZXAgdGhlIHJvb3QgXCJcIiBzZWdtZW50IHNvIHRoZSBwYXRobmFtZSBzdGFydHMgYXQgL1xuICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA+IDEpIHNlZ21lbnRzLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudCAhPT0gXCIuXCIpIHtcbiAgICAgIHNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA+IDEgPyBzZWdtZW50cy5qb2luKFwiL1wiKSA6IFwiL1wiO1xufVxuZnVuY3Rpb24gZ2V0SW52YWxpZFBhdGhFcnJvcihjaGFyLCBmaWVsZCwgZGVzdCwgcGF0aCkge1xuICByZXR1cm4gXCJDYW5ub3QgaW5jbHVkZSBhICdcIiArIGNoYXIgKyBcIicgY2hhcmFjdGVyIGluIGEgbWFudWFsbHkgc3BlY2lmaWVkIFwiICsgKFwiYHRvLlwiICsgZmllbGQgKyBcImAgZmllbGQgW1wiICsgSlNPTi5zdHJpbmdpZnkocGF0aCkgKyBcIl0uICBQbGVhc2Ugc2VwYXJhdGUgaXQgb3V0IHRvIHRoZSBcIikgKyAoXCJgdG8uXCIgKyBkZXN0ICsgXCJgIGZpZWxkLiBBbHRlcm5hdGl2ZWx5IHlvdSBtYXkgcHJvdmlkZSB0aGUgZnVsbCBwYXRoIGFzIFwiKSArIFwiYSBzdHJpbmcgaW4gPExpbmsgdG89XFxcIi4uLlxcXCI+IGFuZCB0aGUgcm91dGVyIHdpbGwgcGFyc2UgaXQgZm9yIHlvdS5cIjtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBXaGVuIHByb2Nlc3NpbmcgcmVsYXRpdmUgbmF2aWdhdGlvbiB3ZSB3YW50IHRvIGlnbm9yZSBhbmNlc3RvciByb3V0ZXMgdGhhdFxuICogZG8gbm90IGNvbnRyaWJ1dGUgdG8gdGhlIHBhdGgsIHN1Y2ggdGhhdCBpbmRleC9wYXRobGVzcyBsYXlvdXQgcm91dGVzIGRvbid0XG4gKiBpbnRlcmZlcmUuXG4gKlxuICogRm9yIGV4YW1wbGUsIHdoZW4gbW92aW5nIGEgcm91dGUgZWxlbWVudCBpbnRvIGFuIGluZGV4IHJvdXRlIGFuZC9vciBhXG4gKiBwYXRobGVzcyBsYXlvdXQgcm91dGUsIHJlbGF0aXZlIGxpbmsgYmVoYXZpb3IgY29udGFpbmVkIHdpdGhpbiBzaG91bGQgc3RheVxuICogdGhlIHNhbWUuICBCb3RoIG9mIHRoZSBmb2xsb3dpbmcgZXhhbXBsZXMgc2hvdWxkIGxpbmsgYmFjayB0byB0aGUgcm9vdDpcbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIiBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9PlxuICogICA8L1JvdXRlPlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiPlxuICogICAgICAgPFJvdXRlIGVsZW1lbnQ9ezxBY2NvdW50c0xheW91dCAvPn0+ICAgICAgIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICAgIDxSb3V0ZSBpbmRleCBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9IC8+ICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgPC9Sb3V0ZVxuICogICAgIDwvUm91dGU+XG4gKiAgIDwvUm91dGU+XG4gKi9cbmZ1bmN0aW9uIGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIG1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IGluZGV4ID09PSAwIHx8IG1hdGNoLnJvdXRlLnBhdGggJiYgbWF0Y2gucm91dGUucGF0aC5sZW5ndGggPiAwKTtcbn1cbi8vIFJldHVybiB0aGUgYXJyYXkgb2YgcGF0aG5hbWVzIGZvciB0aGUgY3VycmVudCByb3V0ZSBtYXRjaGVzIC0gdXNlZCB0b1xuLy8gZ2VuZXJhdGUgdGhlIHJvdXRlUGF0aG5hbWVzIGlucHV0IGZvciByZXNvbHZlVG8oKVxuZnVuY3Rpb24gZ2V0UmVzb2x2ZVRvTWF0Y2hlcyhtYXRjaGVzLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCkge1xuICBsZXQgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTtcbiAgLy8gV2hlbiB2N19yZWxhdGl2ZVNwbGF0UGF0aCBpcyBlbmFibGVkLCB1c2UgdGhlIGZ1bGwgcGF0aG5hbWUgZm9yIHRoZSBsZWFmXG4gIC8vIG1hdGNoIHNvIHdlIGluY2x1ZGUgc3BsYXQgdmFsdWVzIGZvciBcIi5cIiBsaW5rcy4gIFNlZTpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzExMDUyI2lzc3VlY29tbWVudC0xODM2NTg5MzI5XG4gIGlmICh2N19yZWxhdGl2ZVNwbGF0UGF0aCkge1xuICAgIHJldHVybiBwYXRoTWF0Y2hlcy5tYXAoKG1hdGNoLCBpZHgpID0+IGlkeCA9PT0gbWF0Y2hlcy5sZW5ndGggLSAxID8gbWF0Y2gucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZUJhc2UpO1xuICB9XG4gIHJldHVybiBwYXRoTWF0Y2hlcy5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVRvKHRvQXJnLCByb3V0ZVBhdGhuYW1lcywgbG9jYXRpb25QYXRobmFtZSwgaXNQYXRoUmVsYXRpdmUpIHtcbiAgaWYgKGlzUGF0aFJlbGF0aXZlID09PSB2b2lkIDApIHtcbiAgICBpc1BhdGhSZWxhdGl2ZSA9IGZhbHNlO1xuICB9XG4gIGxldCB0bztcbiAgaWYgKHR5cGVvZiB0b0FyZyA9PT0gXCJzdHJpbmdcIikge1xuICAgIHRvID0gcGFyc2VQYXRoKHRvQXJnKTtcbiAgfSBlbHNlIHtcbiAgICB0byA9IF9leHRlbmRzKHt9LCB0b0FyZyk7XG4gICAgaW52YXJpYW50KCF0by5wYXRobmFtZSB8fCAhdG8ucGF0aG5hbWUuaW5jbHVkZXMoXCI/XCIpLCBnZXRJbnZhbGlkUGF0aEVycm9yKFwiP1wiLCBcInBhdGhuYW1lXCIsIFwic2VhcmNoXCIsIHRvKSk7XG4gICAgaW52YXJpYW50KCF0by5wYXRobmFtZSB8fCAhdG8ucGF0aG5hbWUuaW5jbHVkZXMoXCIjXCIpLCBnZXRJbnZhbGlkUGF0aEVycm9yKFwiI1wiLCBcInBhdGhuYW1lXCIsIFwiaGFzaFwiLCB0bykpO1xuICAgIGludmFyaWFudCghdG8uc2VhcmNoIHx8ICF0by5zZWFyY2guaW5jbHVkZXMoXCIjXCIpLCBnZXRJbnZhbGlkUGF0aEVycm9yKFwiI1wiLCBcInNlYXJjaFwiLCBcImhhc2hcIiwgdG8pKTtcbiAgfVxuICBsZXQgaXNFbXB0eVBhdGggPSB0b0FyZyA9PT0gXCJcIiB8fCB0by5wYXRobmFtZSA9PT0gXCJcIjtcbiAgbGV0IHRvUGF0aG5hbWUgPSBpc0VtcHR5UGF0aCA/IFwiL1wiIDogdG8ucGF0aG5hbWU7XG4gIGxldCBmcm9tO1xuICAvLyBSb3V0aW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHBhdGhuYW1lIGlmIGV4cGxpY2l0bHkgcmVxdWVzdGVkLlxuICAvL1xuICAvLyBJZiBhIHBhdGhuYW1lIGlzIGV4cGxpY2l0bHkgcHJvdmlkZWQgaW4gYHRvYCwgaXQgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZVxuICAvLyByb3V0ZSBjb250ZXh0LiBUaGlzIGlzIGV4cGxhaW5lZCBpbiBgTm90ZSBvbiBgPExpbmsgdG8+YCB2YWx1ZXNgIGluIG91clxuICAvLyBtaWdyYXRpb24gZ3VpZGUgZnJvbSB2NSBhcyBhIG1lYW5zIG9mIGRpc2FtYmlndWF0aW9uIGJldHdlZW4gYHRvYCB2YWx1ZXNcbiAgLy8gdGhhdCBiZWdpbiB3aXRoIGAvYCBhbmQgdGhvc2UgdGhhdCBkbyBub3QuIEhvd2V2ZXIsIHRoaXMgaXMgcHJvYmxlbWF0aWMgZm9yXG4gIC8vIGB0b2AgdmFsdWVzIHRoYXQgZG8gbm90IHByb3ZpZGUgYSBwYXRobmFtZS4gYHRvYCBjYW4gc2ltcGx5IGJlIGEgc2VhcmNoIG9yXG4gIC8vIGhhc2ggc3RyaW5nLCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBhc3N1bWUgdGhhdCB0aGUgbmF2aWdhdGlvbiBpcyByZWxhdGl2ZVxuICAvLyB0byB0aGUgY3VycmVudCBsb2NhdGlvbidzIHBhdGhuYW1lIGFuZCAqbm90KiB0aGUgcm91dGUgcGF0aG5hbWUuXG4gIGlmICh0b1BhdGhuYW1lID09IG51bGwpIHtcbiAgICBmcm9tID0gbG9jYXRpb25QYXRobmFtZTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcm91dGVQYXRobmFtZUluZGV4ID0gcm91dGVQYXRobmFtZXMubGVuZ3RoIC0gMTtcbiAgICAvLyBXaXRoIHJlbGF0aXZlPVwicm91dGVcIiAodGhlIGRlZmF1bHQpLCBlYWNoIGxlYWRpbmcgLi4gc2VnbWVudCBtZWFuc1xuICAgIC8vIFwiZ28gdXAgb25lIHJvdXRlXCIgaW5zdGVhZCBvZiBcImdvIHVwIG9uZSBVUkwgc2VnbWVudFwiLiAgVGhpcyBpcyBhIGtleVxuICAgIC8vIGRpZmZlcmVuY2UgZnJvbSBob3cgPGEgaHJlZj4gd29ya3MgYW5kIGEgbWFqb3IgcmVhc29uIHdlIGNhbGwgdGhpcyBhXG4gICAgLy8gXCJ0b1wiIHZhbHVlIGluc3RlYWQgb2YgYSBcImhyZWZcIi5cbiAgICBpZiAoIWlzUGF0aFJlbGF0aXZlICYmIHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi4uXCIpKSB7XG4gICAgICBsZXQgdG9TZWdtZW50cyA9IHRvUGF0aG5hbWUuc3BsaXQoXCIvXCIpO1xuICAgICAgd2hpbGUgKHRvU2VnbWVudHNbMF0gPT09IFwiLi5cIikge1xuICAgICAgICB0b1NlZ21lbnRzLnNoaWZ0KCk7XG4gICAgICAgIHJvdXRlUGF0aG5hbWVJbmRleCAtPSAxO1xuICAgICAgfVxuICAgICAgdG8ucGF0aG5hbWUgPSB0b1NlZ21lbnRzLmpvaW4oXCIvXCIpO1xuICAgIH1cbiAgICBmcm9tID0gcm91dGVQYXRobmFtZUluZGV4ID49IDAgPyByb3V0ZVBhdGhuYW1lc1tyb3V0ZVBhdGhuYW1lSW5kZXhdIDogXCIvXCI7XG4gIH1cbiAgbGV0IHBhdGggPSByZXNvbHZlUGF0aCh0bywgZnJvbSk7XG4gIC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIFwidG9cIiBoYWQgb25lXG4gIGxldCBoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggPSB0b1BhdGhuYW1lICYmIHRvUGF0aG5hbWUgIT09IFwiL1wiICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpO1xuICAvLyBPciBpZiB0aGlzIHdhcyBhIGxpbmsgdG8gdGhlIGN1cnJlbnQgcGF0aCB3aGljaCBoYXMgYSB0cmFpbGluZyBzbGFzaFxuICBsZXQgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2ggPSAoaXNFbXB0eVBhdGggfHwgdG9QYXRobmFtZSA9PT0gXCIuXCIpICYmIGxvY2F0aW9uUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpO1xuICBpZiAoIXBhdGgucGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpICYmIChoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggfHwgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2gpKSB7XG4gICAgcGF0aC5wYXRobmFtZSArPSBcIi9cIjtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0VG9QYXRobmFtZSh0bykge1xuICAvLyBFbXB0eSBzdHJpbmdzIHNob3VsZCBiZSB0cmVhdGVkIHRoZSBzYW1lIGFzIC8gcGF0aHNcbiAgcmV0dXJuIHRvID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiID8gXCIvXCIgOiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pLnBhdGhuYW1lIDogdG8ucGF0aG5hbWU7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGpvaW5QYXRocyA9IHBhdGhzID0+IHBhdGhzLmpvaW4oXCIvXCIpLnJlcGxhY2UoL1xcL1xcLysvZywgXCIvXCIpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBub3JtYWxpemVQYXRobmFtZSA9IHBhdGhuYW1lID0+IHBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZVNlYXJjaCA9IHNlYXJjaCA9PiAhc2VhcmNoIHx8IHNlYXJjaCA9PT0gXCI/XCIgPyBcIlwiIDogc2VhcmNoLnN0YXJ0c1dpdGgoXCI/XCIpID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZUhhc2ggPSBoYXNoID0+ICFoYXNoIHx8IGhhc2ggPT09IFwiI1wiID8gXCJcIiA6IGhhc2guc3RhcnRzV2l0aChcIiNcIikgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuLyoqXG4gKiBUaGlzIGlzIGEgc2hvcnRjdXQgZm9yIGNyZWF0aW5nIGBhcHBsaWNhdGlvbi9qc29uYCByZXNwb25zZXMuIENvbnZlcnRzIGBkYXRhYFxuICogdG8gSlNPTiBhbmQgc2V0cyB0aGUgYENvbnRlbnQtVHlwZWAgaGVhZGVyLlxuICovXG5jb25zdCBqc29uID0gZnVuY3Rpb24ganNvbihkYXRhLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0ge307XG4gIH1cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdDtcbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGlmICghaGVhZGVycy5oYXMoXCJDb250ZW50LVR5cGVcIikpIHtcbiAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIik7XG4gIH1cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbmNsYXNzIEFib3J0ZWREZWZlcnJlZEVycm9yIGV4dGVuZHMgRXJyb3Ige31cbmNsYXNzIERlZmVycmVkRGF0YSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEsIHJlc3BvbnNlSW5pdCkge1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLmRlZmVycmVkS2V5cyA9IFtdO1xuICAgIGludmFyaWFudChkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGRhdGEpLCBcImRlZmVyKCkgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHNcIik7XG4gICAgLy8gU2V0IHVwIGFuIEFib3J0Q29udHJvbGxlciArIFByb21pc2Ugd2UgY2FuIHJhY2UgYWdhaW5zdCB0byBleGl0IGVhcmx5XG4gICAgLy8gY2FuY2VsbGF0aW9uXG4gICAgbGV0IHJlamVjdDtcbiAgICB0aGlzLmFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IG9uQWJvcnQgPSAoKSA9PiByZWplY3QobmV3IEFib3J0ZWREZWZlcnJlZEVycm9yKFwiRGVmZXJyZWQgZGF0YSBhYm9ydGVkXCIpKTtcbiAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwgPSAoKSA9PiB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmRhdGEgPSBPYmplY3QuZW50cmllcyhkYXRhKS5yZWR1Y2UoKGFjYywgX3JlZjIpID0+IHtcbiAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBfcmVmMjtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICBba2V5XTogdGhpcy50cmFja1Byb21pc2Uoa2V5LCB2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAvLyBBbGwgaW5jb21pbmcgdmFsdWVzIHdlcmUgcmVzb2x2ZWRcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgIH1cbiAgICB0aGlzLmluaXQgPSByZXNwb25zZUluaXQ7XG4gIH1cbiAgdHJhY2tQcm9taXNlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHRoaXMuZGVmZXJyZWRLZXlzLnB1c2goa2V5KTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmFkZChrZXkpO1xuICAgIC8vIFdlIHN0b3JlIGEgbGl0dGxlIHdyYXBwZXIgcHJvbWlzZSB0aGF0IHdpbGwgYmUgZXh0ZW5kZWQgd2l0aFxuICAgIC8vIF9kYXRhL19lcnJvciBwcm9wcyB1cG9uIHJlc29sdmUvcmVqZWN0XG4gICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJhY2UoW3ZhbHVlLCB0aGlzLmFib3J0UHJvbWlzZV0pLnRoZW4oZGF0YSA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgdW5kZWZpbmVkLCBkYXRhKSwgZXJyb3IgPT4gdGhpcy5vblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yKSk7XG4gICAgLy8gUmVnaXN0ZXIgcmVqZWN0aW9uIGxpc3RlbmVycyB0byBhdm9pZCB1bmNhdWdodCBwcm9taXNlIHJlamVjdGlvbnMgb25cbiAgICAvLyBlcnJvcnMgb3IgYWJvcnRlZCBkZWZlcnJlZCB2YWx1ZXNcbiAgICBwcm9taXNlLmNhdGNoKCgpID0+IHt9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuICBvblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCAmJiBlcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5kZWxldGUoa2V5KTtcbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAvLyBOb3RoaW5nIGxlZnQgdG8gYWJvcnQhXG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICB9XG4gICAgLy8gSWYgdGhlIHByb21pc2Ugd2FzIHJlc29sdmVkL3JlamVjdGVkIHdpdGggdW5kZWZpbmVkLCB3ZSdsbCB0aHJvdyBhbiBlcnJvciBhcyB5b3VcbiAgICAvLyBzaG91bGQgYWx3YXlzIHJlc29sdmUgd2l0aCBhIHZhbHVlIG9yIG51bGxcbiAgICBpZiAoZXJyb3IgPT09IHVuZGVmaW5lZCAmJiBkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCB1bmRlZmluZWRFcnJvciA9IG5ldyBFcnJvcihcIkRlZmVycmVkIGRhdGEgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmVzb2x2ZWQvcmVqZWN0ZWQgd2l0aCBgdW5kZWZpbmVkYCwgXCIgKyBcInlvdSBtdXN0IHJlc29sdmUvcmVqZWN0IHdpdGggYSB2YWx1ZSBvciBgbnVsbGAuXCIpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB1bmRlZmluZWRFcnJvclxuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodW5kZWZpbmVkRXJyb3IpO1xuICAgIH1cbiAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9kYXRhXCIsIHtcbiAgICAgIGdldDogKCkgPT4gZGF0YVxuICAgIH0pO1xuICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICBlbWl0KGFib3J0ZWQsIHNldHRsZWRLZXkpIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2goc3Vic2NyaWJlciA9PiBzdWJzY3JpYmVyKGFib3J0ZWQsIHNldHRsZWRLZXkpKTtcbiAgfVxuICBzdWJzY3JpYmUoZm4pIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHRoaXMuc3Vic2NyaWJlcnMuZGVsZXRlKGZuKTtcbiAgfVxuICBjYW5jZWwoKSB7XG4gICAgdGhpcy5jb250cm9sbGVyLmFib3J0KCk7XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5mb3JFYWNoKCh2LCBrKSA9PiB0aGlzLnBlbmRpbmdLZXlzU2V0LmRlbGV0ZShrKSk7XG4gICAgdGhpcy5lbWl0KHRydWUpO1xuICB9XG4gIGFzeW5jIHJlc29sdmVEYXRhKHNpZ25hbCkge1xuICAgIGxldCBhYm9ydGVkID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIGxldCBvbkFib3J0ID0gKCkgPT4gdGhpcy5jYW5jZWwoKTtcbiAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgICBhYm9ydGVkID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlKGFib3J0ZWQgPT4ge1xuICAgICAgICAgIHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgICAgICAgaWYgKGFib3J0ZWQgfHwgdGhpcy5kb25lKSB7XG4gICAgICAgICAgICByZXNvbHZlKGFib3J0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFib3J0ZWQ7XG4gIH1cbiAgZ2V0IGRvbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVuZGluZ0tleXNTZXQuc2l6ZSA9PT0gMDtcbiAgfVxuICBnZXQgdW53cmFwcGVkRGF0YSgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5kYXRhICE9PSBudWxsICYmIHRoaXMuZG9uZSwgXCJDYW4gb25seSB1bndyYXAgZGF0YSBvbiBpbml0aWFsaXplZCBhbmQgc2V0dGxlZCBkZWZlcnJlZHNcIik7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMuZGF0YSkucmVkdWNlKChhY2MsIF9yZWYzKSA9PiB7XG4gICAgICBsZXQgW2tleSwgdmFsdWVdID0gX3JlZjM7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHVud3JhcFRyYWNrZWRQcm9taXNlKHZhbHVlKVxuICAgICAgfSk7XG4gICAgfSwge30pO1xuICB9XG4gIGdldCBwZW5kaW5nS2V5cygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnBlbmRpbmdLZXlzU2V0KTtcbiAgfVxufVxuZnVuY3Rpb24gaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlICYmIHZhbHVlLl90cmFja2VkID09PSB0cnVlO1xufVxuZnVuY3Rpb24gdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgaWYgKCFpc1RyYWNrZWRQcm9taXNlKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUuX2Vycm9yKSB7XG4gICAgdGhyb3cgdmFsdWUuX2Vycm9yO1xuICB9XG4gIHJldHVybiB2YWx1ZS5fZGF0YTtcbn1cbmNvbnN0IGRlZmVyID0gZnVuY3Rpb24gZGVmZXIoZGF0YSwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IHt9O1xuICB9XG4gIGxldCByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gXCJudW1iZXJcIiA/IHtcbiAgICBzdGF0dXM6IGluaXRcbiAgfSA6IGluaXQ7XG4gIHJldHVybiBuZXcgRGVmZXJyZWREYXRhKGRhdGEsIHJlc3BvbnNlSW5pdCk7XG59O1xuLyoqXG4gKiBBIHJlZGlyZWN0IHJlc3BvbnNlLiBTZXRzIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGBMb2NhdGlvbmAgaGVhZGVyLlxuICogRGVmYXVsdHMgdG8gXCIzMDIgRm91bmRcIi5cbiAqL1xuY29uc3QgcmVkaXJlY3QgPSBmdW5jdGlvbiByZWRpcmVjdCh1cmwsIGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSAzMDI7XG4gIH1cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IGluaXQ7XG4gIGlmICh0eXBlb2YgcmVzcG9uc2VJbml0ID09PSBcIm51bWJlclwiKSB7XG4gICAgcmVzcG9uc2VJbml0ID0ge1xuICAgICAgc3RhdHVzOiByZXNwb25zZUluaXRcbiAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiByZXNwb25zZUluaXQuc3RhdHVzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmVzcG9uc2VJbml0LnN0YXR1cyA9IDMwMjtcbiAgfVxuICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlc3BvbnNlSW5pdC5oZWFkZXJzKTtcbiAgaGVhZGVycy5zZXQoXCJMb2NhdGlvblwiLCB1cmwpO1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIF9leHRlbmRzKHt9LCByZXNwb25zZUluaXQsIHtcbiAgICBoZWFkZXJzXG4gIH0pKTtcbn07XG4vKipcbiAqIEEgcmVkaXJlY3QgcmVzcG9uc2UgdGhhdCB3aWxsIGZvcmNlIGEgZG9jdW1lbnQgcmVsb2FkIHRvIHRoZSBuZXcgbG9jYXRpb24uXG4gKiBTZXRzIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGBMb2NhdGlvbmAgaGVhZGVyLlxuICogRGVmYXVsdHMgdG8gXCIzMDIgRm91bmRcIi5cbiAqL1xuY29uc3QgcmVkaXJlY3REb2N1bWVudCA9ICh1cmwsIGluaXQpID0+IHtcbiAgbGV0IHJlc3BvbnNlID0gcmVkaXJlY3QodXJsLCBpbml0KTtcbiAgcmVzcG9uc2UuaGVhZGVycy5zZXQoXCJYLVJlbWl4LVJlbG9hZC1Eb2N1bWVudFwiLCBcInRydWVcIik7XG4gIHJldHVybiByZXNwb25zZTtcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKiBVdGlsaXR5IGNsYXNzIHdlIHVzZSB0byBob2xkIGF1dG8tdW53cmFwcGVkIDR4eC81eHggUmVzcG9uc2UgYm9kaWVzXG4gKlxuICogV2UgZG9uJ3QgZXhwb3J0IHRoZSBjbGFzcyBmb3IgcHVibGljIHVzZSBzaW5jZSBpdCdzIGFuIGltcGxlbWVudGF0aW9uXG4gKiBkZXRhaWwsIGJ1dCB3ZSBleHBvcnQgdGhlIGludGVyZmFjZSBhYm92ZSBzbyBmb2xrcyBjYW4gYnVpbGQgdGhlaXIgb3duXG4gKiBhYnN0cmFjdGlvbnMgYXJvdW5kIGluc3RhbmNlcyB2aWEgaXNSb3V0ZUVycm9yUmVzcG9uc2UoKVxuICovXG5jbGFzcyBFcnJvclJlc3BvbnNlSW1wbCB7XG4gIGNvbnN0cnVjdG9yKHN0YXR1cywgc3RhdHVzVGV4dCwgZGF0YSwgaW50ZXJuYWwpIHtcbiAgICBpZiAoaW50ZXJuYWwgPT09IHZvaWQgMCkge1xuICAgICAgaW50ZXJuYWwgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuaW50ZXJuYWwgPSBpbnRlcm5hbDtcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhLnRvU3RyaW5nKCk7XG4gICAgICB0aGlzLmVycm9yID0gZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVycm9yIGlzIGFuIEVycm9yUmVzcG9uc2UgZ2VuZXJhdGVkIGZyb20gYSA0eHgvNXh4XG4gKiBSZXNwb25zZSB0aHJvd24gZnJvbSBhbiBhY3Rpb24vbG9hZGVyXG4gKi9cbmZ1bmN0aW9uIGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yKSB7XG4gIHJldHVybiBlcnJvciAhPSBudWxsICYmIHR5cGVvZiBlcnJvci5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGVycm9yLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGVycm9yLmludGVybmFsID09PSBcImJvb2xlYW5cIiAmJiBcImRhdGFcIiBpbiBlcnJvcjtcbn1cblxuY29uc3QgdmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIgPSBbXCJwb3N0XCIsIFwicHV0XCIsIFwicGF0Y2hcIiwgXCJkZWxldGVcIl07XG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kcyA9IG5ldyBTZXQodmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIpO1xuY29uc3QgdmFsaWRSZXF1ZXN0TWV0aG9kc0FyciA9IFtcImdldFwiLCAuLi52YWxpZE11dGF0aW9uTWV0aG9kc0Fycl07XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzID0gbmV3IFNldCh2YWxpZFJlcXVlc3RNZXRob2RzQXJyKTtcbmNvbnN0IHJlZGlyZWN0U3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pO1xuY29uc3QgcmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzID0gbmV3IFNldChbMzA3LCAzMDhdKTtcbmNvbnN0IElETEVfTkFWSUdBVElPTiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAganNvbjogdW5kZWZpbmVkLFxuICB0ZXh0OiB1bmRlZmluZWRcbn07XG5jb25zdCBJRExFX0ZFVENIRVIgPSB7XG4gIHN0YXRlOiBcImlkbGVcIixcbiAgZGF0YTogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAganNvbjogdW5kZWZpbmVkLFxuICB0ZXh0OiB1bmRlZmluZWRcbn07XG5jb25zdCBJRExFX0JMT0NLRVIgPSB7XG4gIHN0YXRlOiBcInVuYmxvY2tlZFwiLFxuICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gIHJlc2V0OiB1bmRlZmluZWQsXG4gIGxvY2F0aW9uOiB1bmRlZmluZWRcbn07XG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcXC9cXC8pL2k7XG5jb25zdCBkZWZhdWx0TWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgaGFzRXJyb3JCb3VuZGFyeTogQm9vbGVhbihyb3V0ZS5oYXNFcnJvckJvdW5kYXJ5KVxufSk7XG5jb25zdCBUUkFOU0lUSU9OU19TVE9SQUdFX0tFWSA9IFwicmVtaXgtcm91dGVyLXRyYW5zaXRpb25zXCI7XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlUm91dGVyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiBDcmVhdGUgYSByb3V0ZXIgYW5kIGxpc3RlbiB0byBoaXN0b3J5IFBPUCBuYXZpZ2F0aW9uc1xuICovXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXIoaW5pdCkge1xuICBjb25zdCByb3V0ZXJXaW5kb3cgPSBpbml0LndpbmRvdyA/IGluaXQud2luZG93IDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcbiAgY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHJvdXRlcldpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygcm91dGVyV2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiByb3V0ZXJXaW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgY29uc3QgaXNTZXJ2ZXIgPSAhaXNCcm93c2VyO1xuICBpbnZhcmlhbnQoaW5pdC5yb3V0ZXMubGVuZ3RoID4gMCwgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVSb3V0ZXJcIik7XG4gIGxldCBtYXBSb3V0ZVByb3BlcnRpZXM7XG4gIGlmIChpbml0Lm1hcFJvdXRlUHJvcGVydGllcykge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGluaXQubWFwUm91dGVQcm9wZXJ0aWVzO1xuICB9IGVsc2UgaWYgKGluaXQuZGV0ZWN0RXJyb3JCb3VuZGFyeSkge1xuICAgIC8vIElmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIHRoZSBkZXByZWNhdGVkIHZlcnNpb24sIHdyYXAgaXQgd2l0aCB0aGUgbmV3IEFQSVxuICAgIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gaW5pdC5kZXRlY3RFcnJvckJvdW5kYXJ5O1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IHJvdXRlID0+ICh7XG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBkZXRlY3RFcnJvckJvdW5kYXJ5KHJvdXRlKVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH1cbiAgLy8gUm91dGVzIGtleWVkIGJ5IElEXG4gIGxldCBtYW5pZmVzdCA9IHt9O1xuICAvLyBSb3V0ZXMgaW4gdHJlZSBmb3JtYXQgZm9yIG1hdGNoaW5nXG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhpbml0LnJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgbGV0IGluRmxpZ2h0RGF0YVJvdXRlcztcbiAgbGV0IGJhc2VuYW1lID0gaW5pdC5iYXNlbmFtZSB8fCBcIi9cIjtcbiAgLy8gQ29uZmlnIGRyaXZlbiBiZWhhdmlvciBmbGFnc1xuICBsZXQgZnV0dXJlID0gX2V4dGVuZHMoe1xuICAgIHY3X2ZldGNoZXJQZXJzaXN0OiBmYWxzZSxcbiAgICB2N19ub3JtYWxpemVGb3JtTWV0aG9kOiBmYWxzZSxcbiAgICB2N19wYXJ0aWFsSHlkcmF0aW9uOiBmYWxzZSxcbiAgICB2N19wcmVwZW5kQmFzZW5hbWU6IGZhbHNlLFxuICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBmYWxzZVxuICB9LCBpbml0LmZ1dHVyZSk7XG4gIC8vIENsZWFudXAgZnVuY3Rpb24gZm9yIGhpc3RvcnlcbiAgbGV0IHVubGlzdGVuSGlzdG9yeSA9IG51bGw7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb25zIHRvIGNhbGwgb24gYWxsIHN0YXRlIGNoYW5nZXNcbiAgbGV0IHN1YnNjcmliZXJzID0gbmV3IFNldCgpO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIG9iamVjdCB0byBob2xkIHNjcm9sbCByZXN0b3JhdGlvbiBsb2NhdGlvbnMgZHVyaW5nIHJvdXRpbmdcbiAgbGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbiB0byBnZXQgc2Nyb2xsIHJlc3RvcmF0aW9uIGtleXNcbiAgbGV0IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbiB0byBnZXQgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cbiAgbGV0IGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgLy8gT25lLXRpbWUgZmxhZyB0byBjb250cm9sIHRoZSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24uICBCZWNhdXNlXG4gIC8vIHdlIGRvbid0IGdldCB0aGUgc2F2ZWQgcG9zaXRpb25zIGZyb20gPFNjcm9sbFJlc3RvcmF0aW9uIC8+IHVudGlsIF9hZnRlcl9cbiAgLy8gdGhlIGluaXRpYWwgcmVuZGVyLCB3ZSBuZWVkIHRvIG1hbnVhbGx5IHRyaWdnZXIgYSBzZXBhcmF0ZSB1cGRhdGVTdGF0ZSB0b1xuICAvLyBzZW5kIGFsb25nIHRoZSByZXN0b3JlU2Nyb2xsUG9zaXRpb25cbiAgLy8gU2V0IHRvIHRydWUgaWYgd2UgaGF2ZSBgaHlkcmF0aW9uRGF0YWAgc2luY2Ugd2UgYXNzdW1lIHdlIHdlcmUgU1NSJ2QgYW5kIHRoYXRcbiAgLy8gU1NSIGRpZCB0aGUgaW5pdGlhbCBzY3JvbGwgcmVzdG9yYXRpb24uXG4gIGxldCBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbDtcbiAgbGV0IGluaXRpYWxNYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgaW5pdC5oaXN0b3J5LmxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gIGxldCBpbml0aWFsRXJyb3JzID0gbnVsbDtcbiAgaWYgKGluaXRpYWxNYXRjaGVzID09IG51bGwpIHtcbiAgICAvLyBJZiB3ZSBkbyBub3QgbWF0Y2ggYSB1c2VyLXByb3ZpZGVkLXJvdXRlLCBmYWxsIGJhY2sgdG8gdGhlIHJvb3RcbiAgICAvLyB0byBhbGxvdyB0aGUgZXJyb3IgYm91bmRhcnkgdG8gdGFrZSBvdmVyXG4gICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgIHBhdGhuYW1lOiBpbml0Lmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWVcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIHJvdXRlXG4gICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGluaXRpYWxFcnJvcnMgPSB7XG4gICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgIH07XG4gIH1cbiAgbGV0IGluaXRpYWxpemVkO1xuICBsZXQgaGFzTGF6eVJvdXRlcyA9IGluaXRpYWxNYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmxhenkpO1xuICBsZXQgaGFzTG9hZGVycyA9IGluaXRpYWxNYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmxvYWRlcik7XG4gIGlmIChoYXNMYXp5Um91dGVzKSB7XG4gICAgLy8gQWxsIGluaXRpYWxNYXRjaGVzIG5lZWQgdG8gYmUgbG9hZGVkIGJlZm9yZSB3ZSdyZSByZWFkeS4gIElmIHdlIGhhdmUgbGF6eVxuICAgIC8vIGZ1bmN0aW9ucyBhcm91bmQgc3RpbGwgdGhlbiB3ZSdsbCBuZWVkIHRvIHJ1biB0aGVtIGluIGluaXRpYWxpemUoKVxuICAgIGluaXRpYWxpemVkID0gZmFsc2U7XG4gIH0gZWxzZSBpZiAoIWhhc0xvYWRlcnMpIHtcbiAgICAvLyBJZiB3ZSd2ZSBnb3Qgbm8gbG9hZGVycyB0byBydW4sIHRoZW4gd2UncmUgZ29vZCB0byBnb1xuICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbikge1xuICAgIC8vIElmIHBhcnRpYWwgaHlkcmF0aW9uIGlzIGVuYWJsZWQsIHdlJ3JlIGluaXRpYWxpemVkIHNvIGxvbmcgYXMgd2Ugd2VyZVxuICAgIC8vIHByb3ZpZGVkIHdpdGggaHlkcmF0aW9uRGF0YSBmb3IgZXZlcnkgcm91dGUgd2l0aCBhIGxvYWRlciwgYW5kIG5vIGxvYWRlcnNcbiAgICAvLyB3ZXJlIG1hcmtlZCBmb3IgZXhwbGljaXQgaHlkcmF0aW9uXG4gICAgbGV0IGxvYWRlckRhdGEgPSBpbml0Lmh5ZHJhdGlvbkRhdGEgPyBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSA6IG51bGw7XG4gICAgbGV0IGVycm9ycyA9IGluaXQuaHlkcmF0aW9uRGF0YSA/IGluaXQuaHlkcmF0aW9uRGF0YS5lcnJvcnMgOiBudWxsO1xuICAgIGluaXRpYWxpemVkID0gaW5pdGlhbE1hdGNoZXMuZXZlcnkobSA9PiBtLnJvdXRlLmxvYWRlciAmJiBtLnJvdXRlLmxvYWRlci5oeWRyYXRlICE9PSB0cnVlICYmIChsb2FkZXJEYXRhICYmIGxvYWRlckRhdGFbbS5yb3V0ZS5pZF0gIT09IHVuZGVmaW5lZCB8fCBlcnJvcnMgJiYgZXJyb3JzW20ucm91dGUuaWRdICE9PSB1bmRlZmluZWQpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBXaXRob3V0IHBhcnRpYWwgaHlkcmF0aW9uIC0gd2UncmUgaW5pdGlhbGl6ZWQgaWYgd2Ugd2VyZSBwcm92aWRlZCBhbnlcbiAgICAvLyBoeWRyYXRpb25EYXRhIC0gd2hpY2ggaXMgZXhwZWN0ZWQgdG8gYmUgY29tcGxldGVcbiAgICBpbml0aWFsaXplZCA9IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsO1xuICB9XG4gIGxldCByb3V0ZXI7XG4gIGxldCBzdGF0ZSA9IHtcbiAgICBoaXN0b3J5QWN0aW9uOiBpbml0Lmhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBpbml0Lmhpc3RvcnkubG9jYXRpb24sXG4gICAgbWF0Y2hlczogaW5pdGlhbE1hdGNoZXMsXG4gICAgaW5pdGlhbGl6ZWQsXG4gICAgbmF2aWdhdGlvbjogSURMRV9OQVZJR0FUSU9OLFxuICAgIC8vIERvbid0IHJlc3RvcmUgb24gaW5pdGlhbCB1cGRhdGVTdGF0ZSgpIGlmIHdlIHdlcmUgU1NSJ2RcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsID8gZmFsc2UgOiBudWxsLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldDogZmFsc2UsXG4gICAgcmV2YWxpZGF0aW9uOiBcImlkbGVcIixcbiAgICBsb2FkZXJEYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmxvYWRlckRhdGEgfHwge30sXG4gICAgYWN0aW9uRGF0YTogaW5pdC5oeWRyYXRpb25EYXRhICYmIGluaXQuaHlkcmF0aW9uRGF0YS5hY3Rpb25EYXRhIHx8IG51bGwsXG4gICAgZXJyb3JzOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmVycm9ycyB8fCBpbml0aWFsRXJyb3JzLFxuICAgIGZldGNoZXJzOiBuZXcgTWFwKCksXG4gICAgYmxvY2tlcnM6IG5ldyBNYXAoKVxuICB9O1xuICAvLyAtLSBTdGF0ZWZ1bCBpbnRlcm5hbCB2YXJpYWJsZXMgdG8gbWFuYWdlIG5hdmlnYXRpb25zIC0tXG4gIC8vIEN1cnJlbnQgbmF2aWdhdGlvbiBpbiBwcm9ncmVzcyAodG8gYmUgY29tbWl0dGVkIGluIGNvbXBsZXRlTmF2aWdhdGlvbilcbiAgbGV0IHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAvLyBTaG91bGQgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBwcmV2ZW50IHRoZSBzY3JvbGwgcmVzZXQgaWYgc2Nyb2xsIGNhbm5vdFxuICAvLyBiZSByZXN0b3JlZD9cbiAgbGV0IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTtcbiAgLy8gQWJvcnRDb250cm9sbGVyIGZvciB0aGUgYWN0aXZlIG5hdmlnYXRpb25cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcjtcbiAgLy8gU2hvdWxkIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gZW5hYmxlIGRvY3VtZW50LnN0YXJ0Vmlld1RyYW5zaXRpb24/XG4gIGxldCBwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkID0gZmFsc2U7XG4gIC8vIFN0b3JlIGFwcGxpZWQgdmlldyB0cmFuc2l0aW9ucyBzbyB3ZSBjYW4gYXBwbHkgdGhlbSBvbiBQT1BcbiAgbGV0IGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMgPSBuZXcgTWFwKCk7XG4gIC8vIENsZWFudXAgZnVuY3Rpb24gZm9yIHBlcnNpc3RpbmcgYXBwbGllZCB0cmFuc2l0aW9ucyB0byBzZXNzaW9uU3RvcmFnZVxuICBsZXQgcmVtb3ZlUGFnZUhpZGVFdmVudExpc3RlbmVyID0gbnVsbDtcbiAgLy8gV2UgdXNlIHRoaXMgdG8gYXZvaWQgdG91Y2hpbmcgaGlzdG9yeSBpbiBjb21wbGV0ZU5hdmlnYXRpb24gaWYgYVxuICAvLyByZXZhbGlkYXRpb24gaXMgZW50aXJlbHkgdW5pbnRlcnJ1cHRlZFxuICBsZXQgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gZmFsc2U7XG4gIC8vIFVzZSB0aGlzIGludGVybmFsIGZsYWcgdG8gZm9yY2UgcmV2YWxpZGF0aW9uIG9mIGFsbCBsb2FkZXJzOlxuICAvLyAgLSBzdWJtaXNzaW9ucyAoY29tcGxldGVkIG9yIGludGVycnVwdGVkKVxuICAvLyAgLSB1c2VSZXZhbGlkYXRvcigpXG4gIC8vICAtIFgtUmVtaXgtUmV2YWxpZGF0ZSAoZnJvbSByZWRpcmVjdClcbiAgbGV0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSByb3V0ZXMgdGhhdCByZXF1aXJlIHJldmFsaWRhdGlvbiBkdWVcbiAgLy8gdG8gYSBjYW5jZWxsZWQgZGVmZXJyZWQgb24gYWN0aW9uIHN1Ym1pc3Npb25cbiAgbGV0IGNhbmNlbGxlZERlZmVycmVkUm91dGVzID0gW107XG4gIC8vIFVzZSB0aGlzIGludGVybmFsIGFycmF5IHRvIGNhcHR1cmUgZmV0Y2hlciBsb2FkcyB0aGF0IHdlcmUgY2FuY2VsbGVkIGJ5IGFuXG4gIC8vIGFjdGlvbiBuYXZpZ2F0aW9uIGFuZCByZXF1aXJlIHJldmFsaWRhdGlvblxuICBsZXQgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107XG4gIC8vIEFib3J0Q29udHJvbGxlcnMgZm9yIGFueSBpbi1mbGlnaHQgZmV0Y2hlcnNcbiAgbGV0IGZldGNoQ29udHJvbGxlcnMgPSBuZXcgTWFwKCk7XG4gIC8vIFRyYWNrIGxvYWRzIGJhc2VkIG9uIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IHN0YXJ0ZWRcbiAgbGV0IGluY3JlbWVudGluZ0xvYWRJZCA9IDA7XG4gIC8vIFRyYWNrIHRoZSBvdXRzdGFuZGluZyBwZW5kaW5nIG5hdmlnYXRpb24gZGF0YSBsb2FkIHRvIGJlIGNvbXBhcmVkIGFnYWluc3RcbiAgLy8gdGhlIGdsb2JhbGx5IGluY3JlbWVudGluZyBsb2FkIHdoZW4gYSBmZXRjaGVyIGxvYWQgbGFuZHMgYWZ0ZXIgYSBjb21wbGV0ZWRcbiAgLy8gbmF2aWdhdGlvblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSAtMTtcbiAgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgZGF0YSByZWxvYWRzIGFzIGEgcmVzdWx0IG9mIHRoZWlyIGFjdGlvbnNcbiAgbGV0IGZldGNoUmVsb2FkSWRzID0gbmV3IE1hcCgpO1xuICAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCByZWRpcmVjdCBuYXZpZ2F0aW9uc1xuICBsZXQgZmV0Y2hSZWRpcmVjdElkcyA9IG5ldyBTZXQoKTtcbiAgLy8gTW9zdCByZWNlbnQgaHJlZi9tYXRjaCBmb3IgZmV0Y2hlci5sb2FkIGNhbGxzIGZvciBmZXRjaGVyc1xuICBsZXQgZmV0Y2hMb2FkTWF0Y2hlcyA9IG5ldyBNYXAoKTtcbiAgLy8gUmVmLWNvdW50IG1vdW50ZWQgZmV0Y2hlcnMgc28gd2Uga25vdyB3aGVuIGl0J3Mgb2sgdG8gY2xlYW4gdGhlbSB1cFxuICBsZXQgYWN0aXZlRmV0Y2hlcnMgPSBuZXcgTWFwKCk7XG4gIC8vIEZldGNoZXJzIHRoYXQgaGF2ZSByZXF1ZXN0ZWQgYSBkZWxldGUgd2hlbiB1c2luZyB2N19mZXRjaGVyUGVyc2lzdCxcbiAgLy8gdGhleSdsbCBiZSBvZmZpY2lhbGx5IHJlbW92ZWQgYWZ0ZXIgdGhleSByZXR1cm4gdG8gaWRsZVxuICBsZXQgZGVsZXRlZEZldGNoZXJzID0gbmV3IFNldCgpO1xuICAvLyBTdG9yZSBEZWZlcnJlZERhdGEgaW5zdGFuY2VzIGZvciBhY3RpdmUgcm91dGUgbWF0Y2hlcy4gIFdoZW4gYVxuICAvLyByb3V0ZSBsb2FkZXIgcmV0dXJucyBkZWZlcigpIHdlIHN0aWNrIG9uZSBpbiBoZXJlLiAgVGhlbiwgd2hlbiBhIG5lc3RlZFxuICAvLyBwcm9taXNlIHJlc29sdmVzIHdlIHVwZGF0ZSBsb2FkZXJEYXRhLiAgSWYgYSBuZXcgbmF2aWdhdGlvbiBzdGFydHMgd2VcbiAgLy8gY2FuY2VsIGFjdGl2ZSBkZWZlcnJlZHMgZm9yIGVsaW1pbmF0ZWQgcm91dGVzLlxuICBsZXQgYWN0aXZlRGVmZXJyZWRzID0gbmV3IE1hcCgpO1xuICAvLyBTdG9yZSBibG9ja2VyIGZ1bmN0aW9ucyBpbiBhIHNlcGFyYXRlIE1hcCBvdXRzaWRlIG9mIHJvdXRlciBzdGF0ZSBzaW5jZVxuICAvLyB3ZSBkb24ndCBuZWVkIHRvIHVwZGF0ZSBVSSBzdGF0ZSBpZiB0aGV5IGNoYW5nZVxuICBsZXQgYmxvY2tlckZ1bmN0aW9ucyA9IG5ldyBNYXAoKTtcbiAgLy8gRmxhZyB0byBpZ25vcmUgdGhlIG5leHQgaGlzdG9yeSB1cGRhdGUsIHNvIHdlIGNhbiByZXZlcnQgdGhlIFVSTCBjaGFuZ2Ugb25cbiAgLy8gYSBQT1AgbmF2aWdhdGlvbiB0aGF0IHdhcyBibG9ja2VkIGJ5IHRoZSB1c2VyIHdpdGhvdXQgdG91Y2hpbmcgcm91dGVyIHN0YXRlXG4gIGxldCBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IGZhbHNlO1xuICAvLyBJbml0aWFsaXplIHRoZSByb3V0ZXIsIGFsbCBzaWRlIGVmZmVjdHMgc2hvdWxkIGJlIGtpY2tlZCBvZmYgZnJvbSBoZXJlLlxuICAvLyBJbXBsZW1lbnRlZCBhcyBhIEZsdWVudCBBUEkgZm9yIGVhc2Ugb2Y6XG4gIC8vICAgbGV0IHJvdXRlciA9IGNyZWF0ZVJvdXRlcihpbml0KS5pbml0aWFsaXplKCk7XG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgLy8gSWYgaGlzdG9yeSBpbmZvcm1zIHVzIG9mIGEgUE9QIG5hdmlnYXRpb24sIHN0YXJ0IHRoZSBuYXZpZ2F0aW9uIGJ1dCBkbyBub3QgdXBkYXRlXG4gICAgLy8gc3RhdGUuICBXZSdsbCB1cGRhdGUgb3VyIG93biBzdGF0ZSBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlc1xuICAgIHVubGlzdGVuSGlzdG9yeSA9IGluaXQuaGlzdG9yeS5saXN0ZW4oX3JlZiA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBhY3Rpb246IGhpc3RvcnlBY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBkZWx0YVxuICAgICAgfSA9IF9yZWY7XG4gICAgICAvLyBJZ25vcmUgdGhpcyBldmVudCBpZiBpdCB3YXMganVzdCB1cyByZXNldHRpbmcgdGhlIFVSTCBmcm9tIGFcbiAgICAgIC8vIGJsb2NrZWQgUE9QIG5hdmlnYXRpb25cbiAgICAgIGlmIChpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSkge1xuICAgICAgICBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3YXJuaW5nKGJsb2NrZXJGdW5jdGlvbnMuc2l6ZSA9PT0gMCB8fCBkZWx0YSAhPSBudWxsLCBcIllvdSBhcmUgdHJ5aW5nIHRvIHVzZSBhIGJsb2NrZXIgb24gYSBQT1AgbmF2aWdhdGlvbiB0byBhIGxvY2F0aW9uIFwiICsgXCJ0aGF0IHdhcyBub3QgY3JlYXRlZCBieSBAcmVtaXgtcnVuL3JvdXRlci4gVGhpcyB3aWxsIGZhaWwgc2lsZW50bHkgaW4gXCIgKyBcInByb2R1Y3Rpb24uIFRoaXMgY2FuIGhhcHBlbiBpZiB5b3UgYXJlIG5hdmlnYXRpbmcgb3V0c2lkZSB0aGUgcm91dGVyIFwiICsgXCJ2aWEgYHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZWAvYHdpbmRvdy5sb2NhdGlvbi5oYXNoYCBpbnN0ZWFkIG9mIHVzaW5nIFwiICsgXCJyb3V0ZXIgbmF2aWdhdGlvbiBBUElzLiAgVGhpcyBjYW4gYWxzbyBoYXBwZW4gaWYgeW91IGFyZSB1c2luZyBcIiArIFwiY3JlYXRlSGFzaFJvdXRlciBhbmQgdGhlIHVzZXIgbWFudWFsbHkgY2hhbmdlcyB0aGUgVVJMLlwiKTtcbiAgICAgIGxldCBibG9ja2VyS2V5ID0gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKHtcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaGlzdG9yeUFjdGlvblxuICAgICAgfSk7XG4gICAgICBpZiAoYmxvY2tlcktleSAmJiBkZWx0YSAhPSBudWxsKSB7XG4gICAgICAgIC8vIFJlc3RvcmUgdGhlIFVSTCB0byBtYXRjaCB0aGUgY3VycmVudCBVSSwgYnV0IGRvbid0IHVwZGF0ZSByb3V0ZXIgc3RhdGVcbiAgICAgICAgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSB0cnVlO1xuICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEgKiAtMSk7XG4gICAgICAgIC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICBzdGF0ZTogXCJibG9ja2VkXCIsXG4gICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgcHJvY2VlZCgpIHtcbiAgICAgICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgICAgICBzdGF0ZTogXCJwcm9jZWVkaW5nXCIsXG4gICAgICAgICAgICAgIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgbG9jYXRpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gUmUtZG8gdGhlIHNhbWUgUE9QIG5hdmlnYXRpb24gd2UganVzdCBibG9ja2VkXG4gICAgICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVzZXQoKSB7XG4gICAgICAgICAgICBsZXQgYmxvY2tlcnMgPSBuZXcgTWFwKHN0YXRlLmJsb2NrZXJzKTtcbiAgICAgICAgICAgIGJsb2NrZXJzLnNldChibG9ja2VyS2V5LCBJRExFX0JMT0NLRVIpO1xuICAgICAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgICAgICBibG9ja2Vyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBsb2NhdGlvbik7XG4gICAgfSk7XG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgLy8gRklYTUU6IFRoaXMgZmVlbHMgZ3Jvc3MuICBIb3cgY2FuIHdlIGNsZWFudXAgdGhlIGxpbmVzIGJldHdlZW5cbiAgICAgIC8vIHNjcm9sbFJlc3RvcmF0aW9uL2FwcGxpZWRUcmFuc2l0aW9ucyBwZXJzaXN0YW5jZT9cbiAgICAgIHJlc3RvcmVBcHBsaWVkVHJhbnNpdGlvbnMocm91dGVyV2luZG93LCBhcHBsaWVkVmlld1RyYW5zaXRpb25zKTtcbiAgICAgIGxldCBfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyA9ICgpID0+IHBlcnNpc3RBcHBsaWVkVHJhbnNpdGlvbnMocm91dGVyV2luZG93LCBhcHBsaWVkVmlld1RyYW5zaXRpb25zKTtcbiAgICAgIHJvdXRlcldpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgX3NhdmVBcHBsaWVkVHJhbnNpdGlvbnMpO1xuICAgICAgcmVtb3ZlUGFnZUhpZGVFdmVudExpc3RlbmVyID0gKCkgPT4gcm91dGVyV2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyk7XG4gICAgfVxuICAgIC8vIEtpY2sgb2ZmIGluaXRpYWwgZGF0YSBsb2FkIGlmIG5lZWRlZC4gIFVzZSBQb3AgdG8gYXZvaWQgbW9kaWZ5aW5nIGhpc3RvcnlcbiAgICAvLyBOb3RlIHdlIGRvbid0IGRvIGFueSBoYW5kbGluZyBvZiBsYXp5IGhlcmUuICBGb3IgU1BBJ3MgaXQnbGwgZ2V0IGhhbmRsZWRcbiAgICAvLyBpbiB0aGUgbm9ybWFsIG5hdmlnYXRpb24gZmxvdy4gIEZvciBTU1IgaXQncyBleHBlY3RlZCB0aGF0IGxhenkgbW9kdWxlcyBhcmVcbiAgICAvLyByZXNvbHZlZCBwcmlvciB0byByb3V0ZXIgY3JlYXRpb24gc2luY2Ugd2UgY2FuJ3QgZ28gaW50byBhIGZhbGxiYWNrRWxlbWVudFxuICAgIC8vIFVJIGZvciBTU1InZCBhcHBzXG4gICAgaWYgKCFzdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKEFjdGlvbi5Qb3AsIHN0YXRlLmxvY2F0aW9uLCB7XG4gICAgICAgIGluaXRpYWxIeWRyYXRpb246IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcm91dGVyO1xuICB9XG4gIC8vIENsZWFuIHVwIGEgcm91dGVyIGFuZCBpdCdzIHNpZGUgZWZmZWN0c1xuICBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIGlmICh1bmxpc3Rlbkhpc3RvcnkpIHtcbiAgICAgIHVubGlzdGVuSGlzdG9yeSgpO1xuICAgIH1cbiAgICBpZiAocmVtb3ZlUGFnZUhpZGVFdmVudExpc3RlbmVyKSB7XG4gICAgICByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIoKTtcbiAgICB9XG4gICAgc3Vic2NyaWJlcnMuY2xlYXIoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVGZXRjaGVyKGtleSkpO1xuICAgIHN0YXRlLmJsb2NrZXJzLmZvckVhY2goKF8sIGtleSkgPT4gZGVsZXRlQmxvY2tlcihrZXkpKTtcbiAgfVxuICAvLyBTdWJzY3JpYmUgdG8gc3RhdGUgdXBkYXRlcyBmb3IgdGhlIHJvdXRlclxuICBmdW5jdGlvbiBzdWJzY3JpYmUoZm4pIHtcbiAgICBzdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpYmVycy5kZWxldGUoZm4pO1xuICB9XG4gIC8vIFVwZGF0ZSBvdXIgc3RhdGUgYW5kIG5vdGlmeSB0aGUgY2FsbGluZyBjb250ZXh0IG9mIHRoZSBjaGFuZ2VcbiAgZnVuY3Rpb24gdXBkYXRlU3RhdGUobmV3U3RhdGUsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgLy8gUHJlcCBmZXRjaGVyIGNsZWFudXAgc28gd2UgY2FuIHRlbGwgdGhlIFVJIHdoaWNoIGZldGNoZXIgZGF0YSBlbnRyaWVzXG4gICAgLy8gY2FuIGJlIHJlbW92ZWRcbiAgICBsZXQgY29tcGxldGVkRmV0Y2hlcnMgPSBbXTtcbiAgICBsZXQgZGVsZXRlZEZldGNoZXJzS2V5cyA9IFtdO1xuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIHN0YXRlLmZldGNoZXJzLmZvckVhY2goKGZldGNoZXIsIGtleSkgPT4ge1xuICAgICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgICAgICBpZiAoZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAvLyBVbm1vdW50ZWQgZnJvbSB0aGUgVUkgYW5kIGNhbiBiZSB0b3RhbGx5IHJlbW92ZWRcbiAgICAgICAgICAgIGRlbGV0ZWRGZXRjaGVyc0tleXMucHVzaChrZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBSZXR1cm5lZCB0byBpZGxlIGJ1dCBzdGlsbCBtb3VudGVkIGluIHRoZSBVSSwgc28gc2VtaS1yZW1haW5zIGZvclxuICAgICAgICAgICAgLy8gcmV2YWxpZGF0aW9ucyBhbmQgc3VjaFxuICAgICAgICAgICAgY29tcGxldGVkRmV0Y2hlcnMucHVzaChrZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEl0ZXJhdGUgb3ZlciBhIGxvY2FsIGNvcHkgc28gdGhhdCBpZiBmbHVzaFN5bmMgaXMgdXNlZCBhbmQgd2UgZW5kIHVwXG4gICAgLy8gcmVtb3ZpbmcgYW5kIGFkZGluZyBhIG5ldyBzdWJzY3JpYmVyIGR1ZSB0byB0aGUgdXNlQ2FsbGJhY2sgZGVwZW5kZW5jaWVzLFxuICAgIC8vIHdlIGRvbid0IGdldCBvdXJzZWx2ZXMgaW50byBhIGxvb3AgY2FsbGluZyB0aGUgbmV3IHN1YnNjcmliZXIgaW1tZWRpYXRlbHlcbiAgICBbLi4uc3Vic2NyaWJlcnNdLmZvckVhY2goc3Vic2NyaWJlciA9PiBzdWJzY3JpYmVyKHN0YXRlLCB7XG4gICAgICBkZWxldGVkRmV0Y2hlcnM6IGRlbGV0ZWRGZXRjaGVyc0tleXMsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbk9wdHM6IG9wdHMudmlld1RyYW5zaXRpb25PcHRzLFxuICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBvcHRzLmZsdXNoU3luYyA9PT0gdHJ1ZVxuICAgIH0pKTtcbiAgICAvLyBSZW1vdmUgaWRsZSBmZXRjaGVycyBmcm9tIHN0YXRlIHNpbmNlIHdlIG9ubHkgY2FyZSBhYm91dCBpbi1mbGlnaHQgZmV0Y2hlcnMuXG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCkge1xuICAgICAgY29tcGxldGVkRmV0Y2hlcnMuZm9yRWFjaChrZXkgPT4gc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSkpO1xuICAgICAgZGVsZXRlZEZldGNoZXJzS2V5cy5mb3JFYWNoKGtleSA9PiBkZWxldGVGZXRjaGVyKGtleSkpO1xuICAgIH1cbiAgfVxuICAvLyBDb21wbGV0ZSBhIG5hdmlnYXRpb24gcmV0dXJuaW5nIHRoZSBzdGF0ZS5uYXZpZ2F0aW9uIGJhY2sgdG8gdGhlIElETEVfTkFWSUdBVElPTlxuICAvLyBhbmQgc2V0dGluZyBzdGF0ZS5baGlzdG9yeUFjdGlvbi9sb2NhdGlvbi9tYXRjaGVzXSB0byB0aGUgbmV3IHJvdXRlLlxuICAvLyAtIExvY2F0aW9uIGlzIGEgcmVxdWlyZWQgcGFyYW1cbiAgLy8gLSBOYXZpZ2F0aW9uIHdpbGwgYWx3YXlzIGJlIHNldCB0byBJRExFX05BVklHQVRJT05cbiAgLy8gLSBDYW4gcGFzcyBhbnkgb3RoZXIgc3RhdGUgaW4gbmV3U3RhdGVcbiAgZnVuY3Rpb24gY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBuZXdTdGF0ZSwgX3RlbXApIHtcbiAgICB2YXIgX2xvY2F0aW9uJHN0YXRlLCBfbG9jYXRpb24kc3RhdGUyO1xuICAgIGxldCB7XG4gICAgICBmbHVzaFN5bmNcbiAgICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gICAgLy8gRGVkdWNlIGlmIHdlJ3JlIGluIGEgbG9hZGluZy9hY3Rpb25SZWxvYWQgc3RhdGU6XG4gICAgLy8gLSBXZSBoYXZlIGNvbW1pdHRlZCBhY3Rpb25EYXRhIGluIHRoZSBzdG9yZVxuICAgIC8vIC0gVGhlIGN1cnJlbnQgbmF2aWdhdGlvbiB3YXMgYSBtdXRhdGlvbiBzdWJtaXNzaW9uXG4gICAgLy8gLSBXZSdyZSBwYXN0IHRoZSBzdWJtaXR0aW5nIHN0YXRlIGFuZCBpbnRvIHRoZSBsb2FkaW5nIHN0YXRlXG4gICAgLy8gLSBUaGUgbG9jYXRpb24gYmVpbmcgbG9hZGVkIGlzIG5vdCB0aGUgcmVzdWx0IG9mIGEgcmVkaXJlY3RcbiAgICBsZXQgaXNBY3Rpb25SZWxvYWQgPSBzdGF0ZS5hY3Rpb25EYXRhICE9IG51bGwgJiYgc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QpICYmIHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmICgoX2xvY2F0aW9uJHN0YXRlID0gbG9jYXRpb24uc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfbG9jYXRpb24kc3RhdGUuX2lzUmVkaXJlY3QpICE9PSB0cnVlO1xuICAgIGxldCBhY3Rpb25EYXRhO1xuICAgIGlmIChuZXdTdGF0ZS5hY3Rpb25EYXRhKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMobmV3U3RhdGUuYWN0aW9uRGF0YSkubGVuZ3RoID4gMCkge1xuICAgICAgICBhY3Rpb25EYXRhID0gbmV3U3RhdGUuYWN0aW9uRGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEVtcHR5IGFjdGlvbkRhdGEgLT4gY2xlYXIgcHJpb3IgYWN0aW9uRGF0YSBkdWUgdG8gYW4gYWN0aW9uIGVycm9yXG4gICAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNBY3Rpb25SZWxvYWQpIHtcbiAgICAgIC8vIEtlZXAgdGhlIGN1cnJlbnQgZGF0YSBpZiB3ZSdyZSB3cmFwcGluZyB1cCB0aGUgYWN0aW9uIHJlbG9hZFxuICAgICAgYWN0aW9uRGF0YSA9IHN0YXRlLmFjdGlvbkRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENsZWFyIGFjdGlvbkRhdGEgb24gYW55IG90aGVyIGNvbXBsZXRlZCBuYXZpZ2F0aW9uc1xuICAgICAgYWN0aW9uRGF0YSA9IG51bGw7XG4gICAgfVxuICAgIC8vIEFsd2F5cyBwcmVzZXJ2ZSBhbnkgZXhpc3RpbmcgbG9hZGVyRGF0YSBmcm9tIHJlLXVzZWQgcm91dGVzXG4gICAgbGV0IGxvYWRlckRhdGEgPSBuZXdTdGF0ZS5sb2FkZXJEYXRhID8gbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLm1hdGNoZXMgfHwgW10sIG5ld1N0YXRlLmVycm9ycykgOiBzdGF0ZS5sb2FkZXJEYXRhO1xuICAgIC8vIE9uIGEgc3VjY2Vzc2Z1bCBuYXZpZ2F0aW9uIHdlIGNhbiBhc3N1bWUgd2UgZ290IHRocm91Z2ggYWxsIGJsb2NrZXJzXG4gICAgLy8gc28gd2UgY2FuIHN0YXJ0IGZyZXNoXG4gICAgbGV0IGJsb2NrZXJzID0gc3RhdGUuYmxvY2tlcnM7XG4gICAgaWYgKGJsb2NrZXJzLnNpemUgPiAwKSB7XG4gICAgICBibG9ja2VycyA9IG5ldyBNYXAoYmxvY2tlcnMpO1xuICAgICAgYmxvY2tlcnMuZm9yRWFjaCgoXywgaykgPT4gYmxvY2tlcnMuc2V0KGssIElETEVfQkxPQ0tFUikpO1xuICAgIH1cbiAgICAvLyBBbHdheXMgcmVzcGVjdCB0aGUgdXNlciBmbGFnLiAgT3RoZXJ3aXNlIGRvbid0IHJlc2V0IG9uIG11dGF0aW9uXG4gICAgLy8gc3VibWlzc2lvbiBuYXZpZ2F0aW9ucyB1bmxlc3MgdGhleSByZWRpcmVjdFxuICAgIGxldCBwcmV2ZW50U2Nyb2xsUmVzZXQgPSBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlIHx8IHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kKSAmJiAoKF9sb2NhdGlvbiRzdGF0ZTIgPSBsb2NhdGlvbi5zdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sb2NhdGlvbiRzdGF0ZTIuX2lzUmVkaXJlY3QpICE9PSB0cnVlO1xuICAgIGlmIChpbkZsaWdodERhdGFSb3V0ZXMpIHtcbiAgICAgIGRhdGFSb3V0ZXMgPSBpbkZsaWdodERhdGFSb3V0ZXM7XG4gICAgICBpbkZsaWdodERhdGFSb3V0ZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pIDsgZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlBvcCkgOyBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUHVzaCkge1xuICAgICAgaW5pdC5oaXN0b3J5LnB1c2gobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5SZXBsYWNlKSB7XG4gICAgICBpbml0Lmhpc3RvcnkucmVwbGFjZShsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpO1xuICAgIH1cbiAgICBsZXQgdmlld1RyYW5zaXRpb25PcHRzO1xuICAgIC8vIE9uIFBPUCwgZW5hYmxlIHRyYW5zaXRpb25zIGlmIHRoZXkgd2VyZSBlbmFibGVkIG9uIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uXG4gICAgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5Qb3ApIHtcbiAgICAgIC8vIEZvcndhcmQgdGFrZXMgcHJlY2VkZW5jZSBzbyB0aGV5IGJlaGF2ZSBsaWtlIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uXG4gICAgICBsZXQgcHJpb3JQYXRocyA9IGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuZ2V0KHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgIGlmIChwcmlvclBhdGhzICYmIHByaW9yUGF0aHMuaGFzKGxvY2F0aW9uLnBhdGhuYW1lKSkge1xuICAgICAgICB2aWV3VHJhbnNpdGlvbk9wdHMgPSB7XG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgICBuZXh0TG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuaGFzKGxvY2F0aW9uLnBhdGhuYW1lKSkge1xuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgcHJldmlvdXMgZm9yd2FyZCBuYXYsIGFzc3VtZSB3ZSdyZSBwb3BwaW5nIGJhY2sgdG9cbiAgICAgICAgLy8gdGhlIG5ldyBsb2NhdGlvbiBhbmQgZW5hYmxlIGlmIHRoYXQgbG9jYXRpb24gcHJldmlvdXNseSBlbmFibGVkXG4gICAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgICAgICAgICBjdXJyZW50TG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogc3RhdGUubG9jYXRpb25cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQpIHtcbiAgICAgIC8vIFN0b3JlIHRoZSBhcHBsaWVkIHRyYW5zaXRpb24gb24gUFVTSC9SRVBMQUNFXG4gICAgICBsZXQgdG9QYXRocyA9IGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuZ2V0KHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgIGlmICh0b1BhdGhzKSB7XG4gICAgICAgIHRvUGF0aHMuYWRkKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvUGF0aHMgPSBuZXcgU2V0KFtsb2NhdGlvbi5wYXRobmFtZV0pO1xuICAgICAgICBhcHBsaWVkVmlld1RyYW5zaXRpb25zLnNldChzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSwgdG9QYXRocyk7XG4gICAgICB9XG4gICAgICB2aWV3VHJhbnNpdGlvbk9wdHMgPSB7XG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH07XG4gICAgfVxuICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHt9LCBuZXdTdGF0ZSwge1xuICAgICAgYWN0aW9uRGF0YSxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBoaXN0b3J5QWN0aW9uOiBwZW5kaW5nQWN0aW9uLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBpbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG5ld1N0YXRlLm1hdGNoZXMgfHwgc3RhdGUubWF0Y2hlcyksXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICBibG9ja2Vyc1xuICAgIH0pLCB7XG4gICAgICB2aWV3VHJhbnNpdGlvbk9wdHMsXG4gICAgICBmbHVzaFN5bmM6IGZsdXNoU3luYyA9PT0gdHJ1ZVxuICAgIH0pO1xuICAgIC8vIFJlc2V0IHN0YXRlZnVsIG5hdmlnYXRpb24gdmFyc1xuICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTtcbiAgICBwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkID0gZmFsc2U7XG4gICAgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gZmFsc2U7XG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzID0gW107XG4gICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107XG4gIH1cbiAgLy8gVHJpZ2dlciBhIG5hdmlnYXRpb24gZXZlbnQsIHdoaWNoIGNhbiBlaXRoZXIgYmUgYSBudW1lcmljYWwgUE9QIG9yIGEgUFVTSFxuICAvLyByZXBsYWNlIHdpdGggYW4gb3B0aW9uYWwgc3VibWlzc2lvblxuICBhc3luYyBmdW5jdGlvbiBuYXZpZ2F0ZSh0bywgb3B0cykge1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBub3JtYWxpemVkUGF0aCA9IG5vcm1hbGl6ZVRvKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3ByZXBlbmRCYXNlbmFtZSwgdG8sIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mcm9tUm91dGVJZCwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5yZWxhdGl2ZSk7XG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgZXJyb3JcbiAgICB9ID0gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKGZ1dHVyZS52N19ub3JtYWxpemVGb3JtTWV0aG9kLCBmYWxzZSwgbm9ybWFsaXplZFBhdGgsIG9wdHMpO1xuICAgIGxldCBjdXJyZW50TG9jYXRpb24gPSBzdGF0ZS5sb2NhdGlvbjtcbiAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIHBhdGgsIG9wdHMgJiYgb3B0cy5zdGF0ZSk7XG4gICAgLy8gV2hlbiB1c2luZyBuYXZpZ2F0ZSBhcyBhIFBVU0gvUkVQTEFDRSB3ZSBhcmVuJ3QgcmVhZGluZyBhbiBhbHJlYWR5LWVuY29kZWRcbiAgICAvLyBVUkwgZnJvbSB3aW5kb3cubG9jYXRpb24sIHNvIHdlIG5lZWQgdG8gZW5jb2RlIGl0IGhlcmUgc28gdGhlIGJlaGF2aW9yXG4gICAgLy8gcmVtYWlucyB0aGUgc2FtZSBhcyBQT1AgYW5kIG5vbi1kYXRhLXJvdXRlciB1c2FnZXMuICBuZXcgVVJMKCkgZG9lcyBhbGxcbiAgICAvLyB0aGUgc2FtZSBlbmNvZGluZyB3ZSdkIGdldCBmcm9tIGEgaGlzdG9yeS5wdXNoU3RhdGUvd2luZG93LmxvY2F0aW9uIHJlYWRcbiAgICAvLyB3aXRob3V0IGhhdmluZyB0byB0b3VjaCBoaXN0b3J5XG4gICAgbmV4dExvY2F0aW9uID0gX2V4dGVuZHMoe30sIG5leHRMb2NhdGlvbiwgaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKG5leHRMb2NhdGlvbikpO1xuICAgIGxldCB1c2VyUmVwbGFjZSA9IG9wdHMgJiYgb3B0cy5yZXBsYWNlICE9IG51bGwgPyBvcHRzLnJlcGxhY2UgOiB1bmRlZmluZWQ7XG4gICAgbGV0IGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICBpZiAodXNlclJlcGxhY2UgPT09IHRydWUpIHtcbiAgICAgIGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB9IGVsc2UgaWYgKHVzZXJSZXBsYWNlID09PSBmYWxzZSkgOyBlbHNlIGlmIChzdWJtaXNzaW9uICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpICYmIHN1Ym1pc3Npb24uZm9ybUFjdGlvbiA9PT0gc3RhdGUubG9jYXRpb24ucGF0aG5hbWUgKyBzdGF0ZS5sb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIC8vIEJ5IGRlZmF1bHQgb24gc3VibWlzc2lvbnMgdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24gd2UgUkVQTEFDRSBzbyB0aGF0XG4gICAgICAvLyB1c2VycyBkb24ndCBoYXZlIHRvIGRvdWJsZS1jbGljayB0aGUgYmFjayBidXR0b24gdG8gZ2V0IHRvIHRoZSBwcmlvclxuICAgICAgLy8gbG9jYXRpb24uICBJZiB0aGUgdXNlciByZWRpcmVjdHMgdG8gYSBkaWZmZXJlbnQgbG9jYXRpb24gZnJvbSB0aGVcbiAgICAgIC8vIGFjdGlvbi9sb2FkZXIgdGhpcyB3aWxsIGJlIGlnbm9yZWQgYW5kIHRoZSByZWRpcmVjdCB3aWxsIGJlIGEgUFVTSFxuICAgICAgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIH1cbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID0gb3B0cyAmJiBcInByZXZlbnRTY3JvbGxSZXNldFwiIGluIG9wdHMgPyBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgZmx1c2hTeW5jID0gKG9wdHMgJiYgb3B0cy51bnN0YWJsZV9mbHVzaFN5bmMpID09PSB0cnVlO1xuICAgIGxldCBibG9ja2VyS2V5ID0gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9KTtcbiAgICBpZiAoYmxvY2tlcktleSkge1xuICAgICAgLy8gUHV0IHRoZSBibG9ja2VyIGludG8gYSBibG9ja2VkIHN0YXRlXG4gICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgc3RhdGU6IFwiYmxvY2tlZFwiLFxuICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICBwcm9jZWVkKCkge1xuICAgICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgICAgc3RhdGU6IFwicHJvY2VlZGluZ1wiLFxuICAgICAgICAgICAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBTZW5kIHRoZSBzYW1lIG5hdmlnYXRpb24gdGhyb3VnaFxuICAgICAgICAgIG5hdmlnYXRlKHRvLCBvcHRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQoKSB7XG4gICAgICAgICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgICAgICAgYmxvY2tlcnMuc2V0KGJsb2NrZXJLZXksIElETEVfQkxPQ0tFUik7XG4gICAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgICAgYmxvY2tlcnNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbmV4dExvY2F0aW9uLCB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgLy8gU2VuZCB0aHJvdWdoIHRoZSBmb3JtRGF0YSBzZXJpYWxpemF0aW9uIGVycm9yIGlmIHdlIGhhdmUgb25lIHNvIHdlIGNhblxuICAgICAgLy8gcmVuZGVyIGF0IHRoZSByaWdodCBlcnJvciBib3VuZGFyeSBhZnRlciB3ZSBtYXRjaCByb3V0ZXNcbiAgICAgIHBlbmRpbmdFcnJvcjogZXJyb3IsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICByZXBsYWNlOiBvcHRzICYmIG9wdHMucmVwbGFjZSxcbiAgICAgIGVuYWJsZVZpZXdUcmFuc2l0aW9uOiBvcHRzICYmIG9wdHMudW5zdGFibGVfdmlld1RyYW5zaXRpb24sXG4gICAgICBmbHVzaFN5bmNcbiAgICB9KTtcbiAgfVxuICAvLyBSZXZhbGlkYXRlIGFsbCBjdXJyZW50IGxvYWRlcnMuICBJZiBhIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3Mgb3IgaWYgdGhpc1xuICAvLyBpcyBpbnRlcnJ1cHRlZCBieSBhIG5hdmlnYXRpb24sIGFsbG93IHRoaXMgdG8gXCJzdWNjZWVkXCIgYnkgY2FsbGluZyBhbGxcbiAgLy8gbG9hZGVycyBkdXJpbmcgdGhlIG5leHQgbG9hZGVyIHJvdW5kXG4gIGZ1bmN0aW9uIHJldmFsaWRhdGUoKSB7XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICByZXZhbGlkYXRpb246IFwibG9hZGluZ1wiXG4gICAgfSk7XG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IHN1Ym1pdHRpbmcgYW4gYWN0aW9uLCB3ZSBkb24ndCBuZWVkIHRvIHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiwgd2UnbGwganVzdCBsZXQgdGhlIGZvbGxvdyB1cCBsb2FkZXIgZXhlY3V0aW9uIGNhbGwgYWxsIGxvYWRlcnNcbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJzdWJtaXR0aW5nXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IGluIGFuIGlkbGUgc3RhdGUsIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24gZm9yIHRoZSBjdXJyZW50XG4gICAgLy8gYWN0aW9uL2xvY2F0aW9uIGFuZCBtYXJrIGl0IGFzIHVuaW50ZXJydXB0ZWQsIHdoaWNoIHdpbGwgc2tpcCB0aGUgaGlzdG9yeVxuICAgIC8vIHVwZGF0ZSBpbiBjb21wbGV0ZU5hdmlnYXRpb25cbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIHN0YXJ0TmF2aWdhdGlvbihzdGF0ZS5oaXN0b3J5QWN0aW9uLCBzdGF0ZS5sb2NhdGlvbiwge1xuICAgICAgICBzdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb246IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UsIGlmIHdlJ3JlIGN1cnJlbnRseSBpbiBhIGxvYWRpbmcgc3RhdGUsIGp1c3Qgc3RhcnQgYSBuZXdcbiAgICAvLyBuYXZpZ2F0aW9uIHRvIHRoZSBuYXZpZ2F0aW9uLmxvY2F0aW9uIGJ1dCBkbyBub3QgdHJpZ2dlciBhbiB1bmludGVycnVwdGVkXG4gICAgLy8gcmV2YWxpZGF0aW9uIHNvIHRoYXQgaGlzdG9yeSBjb3JyZWN0bHkgdXBkYXRlcyBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlc1xuICAgIHN0YXJ0TmF2aWdhdGlvbihwZW5kaW5nQWN0aW9uIHx8IHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIHtcbiAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjogc3RhdGUubmF2aWdhdGlvblxuICAgIH0pO1xuICB9XG4gIC8vIFN0YXJ0IGEgbmF2aWdhdGlvbiB0byB0aGUgZ2l2ZW4gYWN0aW9uL2xvY2F0aW9uLiAgQ2FuIG9wdGlvbmFsbHkgcHJvdmlkZSBhXG4gIC8vIG92ZXJyaWRlTmF2aWdhdGlvbiB3aGljaCB3aWxsIG92ZXJyaWRlIHRoZSBub3JtYWxMb2FkIGluIHRoZSBjYXNlIG9mIGEgcmVkaXJlY3RcbiAgLy8gbmF2aWdhdGlvblxuICBhc3luYyBmdW5jdGlvbiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24sIG9wdHMpIHtcbiAgICAvLyBBYm9ydCBhbnkgaW4tcHJvZ3Jlc3MgbmF2aWdhdGlvbnMgYW5kIHN0YXJ0IGEgbmV3IG9uZS4gVW5zZXQgYW55IG9uZ29pbmdcbiAgICAvLyB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbnMgdW5sZXNzIHRvbGQgb3RoZXJ3aXNlLCBzaW5jZSB3ZSB3YW50IHRoaXNcbiAgICAvLyBuZXcgbmF2aWdhdGlvbiB0byB1cGRhdGUgaGlzdG9yeSBub3JtYWxseVxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIHBlbmRpbmdBY3Rpb24gPSBoaXN0b3J5QWN0aW9uO1xuICAgIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IChvcHRzICYmIG9wdHMuc3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA9PT0gdHJ1ZTtcbiAgICAvLyBTYXZlIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBldmVyeSB0aW1lIHdlIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24sXG4gICAgLy8gYW5kIHRyYWNrIHdoZXRoZXIgd2Ugc2hvdWxkIHJlc2V0IHNjcm9sbCBvbiBjb21wbGV0aW9uXG4gICAgc2F2ZVNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuICAgIHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSAob3B0cyAmJiBvcHRzLmVuYWJsZVZpZXdUcmFuc2l0aW9uKSA9PT0gdHJ1ZTtcbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvcHRzICYmIG9wdHMub3ZlcnJpZGVOYXZpZ2F0aW9uO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gICAgbGV0IGZsdXNoU3luYyA9IChvcHRzICYmIG9wdHMuZmx1c2hTeW5jKSA9PT0gdHJ1ZTtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IHdpdGggYSA0MDQgb24gdGhlIHJvb3QgZXJyb3IgYm91bmRhcnkgaWYgd2UgbWF0Y2ggbm90aGluZ1xuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlc1RvVXNlKTtcbiAgICAgIC8vIENhbmNlbCBhbGwgcGVuZGluZyBkZWZlcnJlZCBvbiA0MDRzIHNpbmNlIHdlIGRvbid0IGtlZXAgYW55IHJvdXRlc1xuICAgICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIGl0J3Mgb25seSBhIGhhc2ggY2hhbmdlIGFuZCBub3QgYSByZXZhbGlkYXRpb24gb3JcbiAgICAvLyBtdXRhdGlvbiBzdWJtaXNzaW9uLlxuICAgIC8vXG4gICAgLy8gSWdub3JlIG9uIGluaXRpYWwgcGFnZSBsb2FkcyBiZWNhdXNlIHNpbmNlIHRoZSBpbml0aWFsIGxvYWQgd2lsbCBhbHdheXNcbiAgICAvLyBiZSBcInNhbWUgaGFzaFwiLiAgRm9yIGV4YW1wbGUsIG9uIC9wYWdlI2hhc2ggYW5kIHN1Ym1pdCBhIDxGb3JtIG1ldGhvZD1cInBvc3RcIj5cbiAgICAvLyB3aGljaCB3aWxsIGRlZmF1bHQgdG8gYSBuYXZpZ2F0aW9uIHRvIC9wYWdlXG4gICAgaWYgKHN0YXRlLmluaXRpYWxpemVkICYmICFpc1JldmFsaWRhdGlvblJlcXVpcmVkICYmIGlzSGFzaENoYW5nZU9ubHkoc3RhdGUubG9jYXRpb24sIGxvY2F0aW9uKSAmJiAhKG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qob3B0cy5zdWJtaXNzaW9uLmZvcm1NZXRob2QpKSkge1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXNcbiAgICAgIH0sIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIGEgY29udHJvbGxlci9SZXF1ZXN0IGZvciB0aGlzIG5hdmlnYXRpb25cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IHJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGxvY2F0aW9uLCBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLCBvcHRzICYmIG9wdHMuc3VibWlzc2lvbik7XG4gICAgbGV0IHBlbmRpbmdBY3Rpb25EYXRhO1xuICAgIGxldCBwZW5kaW5nRXJyb3I7XG4gICAgaWYgKG9wdHMgJiYgb3B0cy5wZW5kaW5nRXJyb3IpIHtcbiAgICAgIC8vIElmIHdlIGhhdmUgYSBwZW5kaW5nRXJyb3IsIGl0IG1lYW5zIHRoZSB1c2VyIGF0dGVtcHRlZCBhIEdFVCBzdWJtaXNzaW9uXG4gICAgICAvLyB3aXRoIGJpbmFyeSBGb3JtRGF0YSBzbyBhc3NpZ24gaGVyZSBhbmQgc2tpcCB0byBoYW5kbGVMb2FkZXJzLiAgVGhhdFxuICAgICAgLy8gd2F5IHdlIGhhbmRsZSBjYWxsaW5nIGxvYWRlcnMgYWJvdmUgdGhlIGJvdW5kYXJ5IGV0Yy4gIEl0J3Mgbm90IHJlYWxseVxuICAgICAgLy8gZGlmZmVyZW50IGZyb20gYW4gYWN0aW9uRXJyb3IgaW4gdGhhdCBzZW5zZS5cbiAgICAgIHBlbmRpbmdFcnJvciA9IHtcbiAgICAgICAgW2ZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcykucm91dGUuaWRdOiBvcHRzLnBlbmRpbmdFcnJvclxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qob3B0cy5zdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICAvLyBDYWxsIGFjdGlvbiBpZiB3ZSByZWNlaXZlZCBhbiBhY3Rpb24gc3VibWlzc2lvblxuICAgICAgbGV0IGFjdGlvbk91dHB1dCA9IGF3YWl0IGhhbmRsZUFjdGlvbihyZXF1ZXN0LCBsb2NhdGlvbiwgb3B0cy5zdWJtaXNzaW9uLCBtYXRjaGVzLCB7XG4gICAgICAgIHJlcGxhY2U6IG9wdHMucmVwbGFjZSxcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIGlmIChhY3Rpb25PdXRwdXQuc2hvcnRDaXJjdWl0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcGVuZGluZ0FjdGlvbkRhdGEgPSBhY3Rpb25PdXRwdXQucGVuZGluZ0FjdGlvbkRhdGE7XG4gICAgICBwZW5kaW5nRXJyb3IgPSBhY3Rpb25PdXRwdXQucGVuZGluZ0FjdGlvbkVycm9yO1xuICAgICAgbG9hZGluZ05hdmlnYXRpb24gPSBnZXRMb2FkaW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgb3B0cy5zdWJtaXNzaW9uKTtcbiAgICAgIGZsdXNoU3luYyA9IGZhbHNlO1xuICAgICAgLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzXG4gICAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHtcbiAgICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbFxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIENhbGwgbG9hZGVyc1xuICAgIGxldCB7XG4gICAgICBzaG9ydENpcmN1aXRlZCxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gYXdhaXQgaGFuZGxlTG9hZGVycyhyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgbG9hZGluZ05hdmlnYXRpb24sIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uLCBvcHRzICYmIG9wdHMuZmV0Y2hlclN1Ym1pc3Npb24sIG9wdHMgJiYgb3B0cy5yZXBsYWNlLCBvcHRzICYmIG9wdHMuaW5pdGlhbEh5ZHJhdGlvbiA9PT0gdHJ1ZSwgZmx1c2hTeW5jLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKTtcbiAgICBpZiAoc2hvcnRDaXJjdWl0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQ2xlYW4gdXAgbm93IHRoYXQgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgY29tcGxldGVkLiAgRG9uJ3QgY2xlYW4gdXAgaWZcbiAgICAvLyB3ZSBzaG9ydCBjaXJjdWl0ZWQgYmVjYXVzZSBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgd2lsbCBoYXZlIGFscmVhZHlcbiAgICAvLyBiZWVuIGFzc2lnbmVkIHRvIGEgbmV3IGNvbnRyb2xsZXIgZm9yIHRoZSBuZXh0IG5hdmlnYXRpb25cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgX2V4dGVuZHMoe1xuICAgICAgbWF0Y2hlc1xuICAgIH0sIHBlbmRpbmdBY3Rpb25EYXRhID8ge1xuICAgICAgYWN0aW9uRGF0YTogcGVuZGluZ0FjdGlvbkRhdGFcbiAgICB9IDoge30sIHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9KSk7XG4gIH1cbiAgLy8gQ2FsbCB0aGUgYWN0aW9uIG1hdGNoZWQgYnkgdGhlIGxlYWYgcm91dGUgZm9yIHRoaXMgbmF2aWdhdGlvbiBhbmQgaGFuZGxlXG4gIC8vIHJlZGlyZWN0cy9lcnJvcnNcbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlQWN0aW9uKHJlcXVlc3QsIGxvY2F0aW9uLCBzdWJtaXNzaW9uLCBtYXRjaGVzLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIC8vIFB1dCB1cyBpbiBhIHN1Ym1pdHRpbmcgc3RhdGVcbiAgICBsZXQgbmF2aWdhdGlvbiA9IGdldFN1Ym1pdHRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBuYXZpZ2F0aW9uXG4gICAgfSwge1xuICAgICAgZmx1c2hTeW5jOiBvcHRzLmZsdXNoU3luYyA9PT0gdHJ1ZVxuICAgIH0pO1xuICAgIC8vIENhbGwgb3VyIGFjdGlvbiBhbmQgZ2V0IHRoZSByZXN1bHRcbiAgICBsZXQgcmVzdWx0O1xuICAgIGxldCBhY3Rpb25NYXRjaCA9IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKTtcbiAgICBpZiAoIWFjdGlvbk1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhYWN0aW9uTWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICByb3V0ZUlkOiBhY3Rpb25NYXRjaC5yb3V0ZS5pZFxuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwiYWN0aW9uXCIsIHJlcXVlc3QsIGFjdGlvbk1hdGNoLCBtYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKTtcbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IHJlcGxhY2U7XG4gICAgICBpZiAob3B0cyAmJiBvcHRzLnJlcGxhY2UgIT0gbnVsbCkge1xuICAgICAgICByZXBsYWNlID0gb3B0cy5yZXBsYWNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgZGlkbid0IGV4cGxpY2l0eSBpbmRpY2F0ZSByZXBsYWNlIGJlaGF2aW9yLCByZXBsYWNlIGlmXG4gICAgICAgIC8vIHdlIHJlZGlyZWN0ZWQgdG8gdGhlIGV4YWN0IHNhbWUgbG9jYXRpb24gd2UncmUgY3VycmVudGx5IGF0IHRvIGF2b2lkXG4gICAgICAgIC8vIGRvdWJsZSBiYWNrLWJ1dHRvbnNcbiAgICAgICAgcmVwbGFjZSA9IHJlc3VsdC5sb2NhdGlvbiA9PT0gc3RhdGUubG9jYXRpb24ucGF0aG5hbWUgKyBzdGF0ZS5sb2NhdGlvbi5zZWFyY2g7XG4gICAgICB9XG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVzdWx0LCB7XG4gICAgICAgIHN1Ym1pc3Npb24sXG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIC8vIEJ5IGRlZmF1bHQsIGFsbCBzdWJtaXNzaW9ucyBhcmUgUkVQTEFDRSBuYXZpZ2F0aW9ucywgYnV0IGlmIHRoZVxuICAgICAgLy8gYWN0aW9uIHRocmV3IGFuIGVycm9yIHRoYXQnbGwgYmUgcmVuZGVyZWQgaW4gYW4gZXJyb3JFbGVtZW50LCB3ZSBmYWxsXG4gICAgICAvLyBiYWNrIHRvIFBVU0ggc28gdGhhdCB0aGUgdXNlciBjYW4gdXNlIHRoZSBiYWNrIGJ1dHRvbiB0byBnZXQgYmFjayB0b1xuICAgICAgLy8gdGhlIHByZS1zdWJtaXNzaW9uIGZvcm0gbG9jYXRpb24gdG8gdHJ5IGFnYWluXG4gICAgICBpZiAoKG9wdHMgJiYgb3B0cy5yZXBsYWNlKSAhPT0gdHJ1ZSkge1xuICAgICAgICBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICAvLyBTZW5kIGJhY2sgYW4gZW1wdHkgb2JqZWN0IHdlIGNhbiB1c2UgdG8gY2xlYXIgb3V0IGFueSBwcmlvciBhY3Rpb25EYXRhXG4gICAgICAgIHBlbmRpbmdBY3Rpb25EYXRhOiB7fSxcbiAgICAgICAgcGVuZGluZ0FjdGlvbkVycm9yOiB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwZW5kaW5nQWN0aW9uRGF0YToge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLy8gQ2FsbCBhbGwgYXBwbGljYWJsZSBsb2FkZXJzIGZvciB0aGUgZ2l2ZW4gbWF0Y2hlcywgaGFuZGxpbmcgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGV0Yy5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlTG9hZGVycyhyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgb3ZlcnJpZGVOYXZpZ2F0aW9uLCBzdWJtaXNzaW9uLCBmZXRjaGVyU3VibWlzc2lvbiwgcmVwbGFjZSwgaW5pdGlhbEh5ZHJhdGlvbiwgZmx1c2hTeW5jLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKSB7XG4gICAgLy8gRmlndXJlIG91dCB0aGUgcmlnaHQgbmF2aWdhdGlvbiB3ZSB3YW50IHRvIHVzZSBmb3IgZGF0YSBsb2FkaW5nXG4gICAgbGV0IGxvYWRpbmdOYXZpZ2F0aW9uID0gb3ZlcnJpZGVOYXZpZ2F0aW9uIHx8IGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKTtcbiAgICAvLyBJZiB0aGlzIHdhcyBhIHJlZGlyZWN0IGZyb20gYW4gYWN0aW9uIHdlIGRvbid0IGhhdmUgYSBcInN1Ym1pc3Npb25cIiBidXRcbiAgICAvLyB3ZSBoYXZlIGl0IG9uIHRoZSBsb2FkaW5nIG5hdmlnYXRpb24gc28gdXNlIHRoYXQgaWYgYXZhaWxhYmxlXG4gICAgbGV0IGFjdGl2ZVN1Ym1pc3Npb24gPSBzdWJtaXNzaW9uIHx8IGZldGNoZXJTdWJtaXNzaW9uIHx8IGdldFN1Ym1pc3Npb25Gcm9tTmF2aWdhdGlvbihsb2FkaW5nTmF2aWdhdGlvbik7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKGluaXQuaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIGFjdGl2ZVN1Ym1pc3Npb24sIGxvY2F0aW9uLCBmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiAmJiBpbml0aWFsSHlkcmF0aW9uID09PSB0cnVlLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBkZWxldGVkRmV0Y2hlcnMsIGZldGNoTG9hZE1hdGNoZXMsIGZldGNoUmVkaXJlY3RJZHMsIHJvdXRlc1RvVXNlLCBiYXNlbmFtZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcik7XG4gICAgLy8gQ2FuY2VsIHBlbmRpbmcgZGVmZXJyZWRzIGZvciBuby1sb25nZXItbWF0Y2hlZCByb3V0ZXMgb3Igcm91dGVzIHdlJ3JlXG4gICAgLy8gYWJvdXQgdG8gcmVsb2FkLiAgTm90ZSB0aGF0IGlmIHRoaXMgaXMgYW4gYWN0aW9uIHJlbG9hZCB3ZSB3b3VsZCBoYXZlXG4gICAgLy8gYWxyZWFkeSBjYW5jZWxsZWQgYWxsIHBlbmRpbmcgZGVmZXJyZWRzIHNvIHRoaXMgd291bGQgYmUgYSBuby1vcFxuICAgIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhyb3V0ZUlkID0+ICEobWF0Y2hlcyAmJiBtYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSkgfHwgbWF0Y2hlc1RvTG9hZCAmJiBtYXRjaGVzVG9Mb2FkLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW5cbiAgICBpZiAobWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDAgJiYgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICAvLyBDb21taXQgcGVuZGluZyBlcnJvciBpZiB3ZSdyZSBzaG9ydCBjaXJjdWl0aW5nXG4gICAgICAgIGVycm9yczogcGVuZGluZ0Vycm9yIHx8IG51bGxcbiAgICAgIH0sIHBlbmRpbmdBY3Rpb25EYXRhID8ge1xuICAgICAgICBhY3Rpb25EYXRhOiBwZW5kaW5nQWN0aW9uRGF0YVxuICAgICAgfSA6IHt9LCB1cGRhdGVkRmV0Y2hlcnMgPyB7XG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSA6IHt9KSwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIElmIHRoaXMgaXMgYW4gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb24sIHdlIHJlbWFpbiBpbiBvdXIgY3VycmVudCBpZGxlXG4gICAgLy8gc3RhdGUuICBJZiBub3QsIHdlIG5lZWQgdG8gc3dpdGNoIHRvIG91ciBsb2FkaW5nIHN0YXRlIGFuZCBsb2FkIGRhdGEsXG4gICAgLy8gcHJlc2VydmluZyBhbnkgbmV3IGFjdGlvbiBkYXRhIG9yIGV4aXN0aW5nIGFjdGlvbiBkYXRhIChpbiB0aGUgY2FzZSBvZlxuICAgIC8vIGEgcmV2YWxpZGF0aW9uIGludGVycnVwdGluZyBhbiBhY3Rpb25SZWxvYWQpXG4gICAgLy8gSWYgd2UgaGF2ZSBwYXJ0aWFsSHlkcmF0aW9uIGVuYWJsZWQsIHRoZW4gZG9uJ3QgdXBkYXRlIHRoZSBzdGF0ZSBmb3IgdGhlXG4gICAgLy8gaW5pdGlhbCBkYXRhIGxvYWQgc2luY2UgaW90J3Mgbm90IGEgXCJuYXZpZ2F0aW9uXCJcbiAgICBpZiAoIWlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiAmJiAoIWZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uIHx8ICFpbml0aWFsSHlkcmF0aW9uKSkge1xuICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiB7XG4gICAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KHJmLmtleSk7XG4gICAgICAgIGxldCByZXZhbGlkYXRpbmdGZXRjaGVyID0gZ2V0TG9hZGluZ0ZldGNoZXIodW5kZWZpbmVkLCBmZXRjaGVyID8gZmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkKTtcbiAgICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KHJmLmtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICB9KTtcbiAgICAgIGxldCBhY3Rpb25EYXRhID0gcGVuZGluZ0FjdGlvbkRhdGEgfHwgc3RhdGUuYWN0aW9uRGF0YTtcbiAgICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHtcbiAgICAgICAgbmF2aWdhdGlvbjogbG9hZGluZ05hdmlnYXRpb25cbiAgICAgIH0sIGFjdGlvbkRhdGEgPyBPYmplY3Qua2V5cyhhY3Rpb25EYXRhKS5sZW5ndGggPT09IDAgPyB7XG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGxcbiAgICAgIH0gOiB7XG4gICAgICAgIGFjdGlvbkRhdGFcbiAgICAgIH0gOiB7fSwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMCA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gocmYgPT4ge1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKHJmLmtleSkpIHtcbiAgICAgICAgYWJvcnRGZXRjaGVyKHJmLmtleSk7XG4gICAgICB9XG4gICAgICBpZiAocmYuY29udHJvbGxlcikge1xuICAgICAgICAvLyBGZXRjaGVycyB1c2UgYW4gaW5kZXBlbmRlbnQgQWJvcnRDb250cm9sbGVyIHNvIHRoYXQgYWJvcnRpbmcgYSBmZXRjaGVyXG4gICAgICAgIC8vICh2aWEgZGVsZXRlRmV0Y2hlcikgZG9lcyBub3QgYWJvcnQgdGhlIHRyaWdnZXJpbmcgbmF2aWdhdGlvbiB0aGF0XG4gICAgICAgIC8vIHRyaWdnZXJlZCB0aGUgcmV2YWxpZGF0aW9uXG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KHJmLmtleSwgcmYuY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gUHJveHkgbmF2aWdhdGlvbiBhYm9ydCB0aHJvdWdoIHRvIHJldmFsaWRhdGlvbiBmZXRjaGVyc1xuICAgIGxldCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMgPSAoKSA9PiByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKGYgPT4gYWJvcnRGZXRjaGVyKGYua2V5KSk7XG4gICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcikge1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICB9XG4gICAgbGV0IHtcbiAgICAgIHJlc3VsdHMsXG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9ID0gYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXF1ZXN0KTtcbiAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIENsZWFuIHVwIF9hZnRlcl8gbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmIHdlIHNob3J0XG4gICAgLy8gY2lyY3VpdGVkIGJlY2F1c2UgZmV0Y2hDb250cm9sbGVycyB3b3VsZCBoYXZlIGJlZW4gYWJvcnRlZCBhbmRcbiAgICAvLyByZWFzc2lnbmVkIHRvIG5ldyBjb250cm9sbGVycyBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIpIHtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgfVxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gocmYgPT4gZmV0Y2hDb250cm9sbGVycy5kZWxldGUocmYua2V5KSk7XG4gICAgLy8gSWYgYW55IGxvYWRlcnMgcmV0dXJuZWQgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KHJlc3VsdHMpO1xuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgaWYgKHJlZGlyZWN0LmlkeCA+PSBtYXRjaGVzVG9Mb2FkLmxlbmd0aCkge1xuICAgICAgICAvLyBJZiB0aGlzIHJlZGlyZWN0IGNhbWUgZnJvbSBhIGZldGNoZXIgbWFrZSBzdXJlIHdlIG1hcmsgaXQgaW5cbiAgICAgICAgLy8gZmV0Y2hSZWRpcmVjdElkcyBzbyBpdCBkb2Vzbid0IGdldCByZXZhbGlkYXRlZCBvbiB0aGUgbmV4dCBzZXQgb2ZcbiAgICAgICAgLy8gbG9hZGVyIGV4ZWN1dGlvbnNcbiAgICAgICAgbGV0IGZldGNoZXJLZXkgPSByZXZhbGlkYXRpbmdGZXRjaGVyc1tyZWRpcmVjdC5pZHggLSBtYXRjaGVzVG9Mb2FkLmxlbmd0aF0ua2V5O1xuICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChmZXRjaGVyS2V5KTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdC5yZXN1bHQsIHtcbiAgICAgICAgcmVwbGFjZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcbiAgICBsZXQge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcyk7XG4gICAgLy8gV2lyZSB1cCBzdWJzY3JpYmVycyB0byB1cGRhdGUgbG9hZGVyRGF0YSBhcyBwcm9taXNlcyBzZXR0bGVcbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGVmZXJyZWREYXRhLCByb3V0ZUlkKSA9PiB7XG4gICAgICBkZWZlcnJlZERhdGEuc3Vic2NyaWJlKGFib3J0ZWQgPT4ge1xuICAgICAgICAvLyBOb3RlOiBObyBuZWVkIHRvIHVwZGF0ZVN0YXRlIGhlcmUgc2luY2UgdGhlIFRyYWNrZWRQcm9taXNlIG9uXG4gICAgICAgIC8vIGxvYWRlckRhdGEgaXMgc3RhYmxlIGFjcm9zcyByZXNvbHZlL3JlamVjdFxuICAgICAgICAvLyBSZW1vdmUgdGhpcyBpbnN0YW5jZSBpZiB3ZSB3ZXJlIGFib3J0ZWQgb3IgaWYgcHJvbWlzZXMgaGF2ZSBzZXR0bGVkXG4gICAgICAgIGlmIChhYm9ydGVkIHx8IGRlZmVycmVkRGF0YS5kb25lKSB7XG4gICAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmRlbGV0ZShyb3V0ZUlkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgbGV0IHVwZGF0ZWRGZXRjaGVycyA9IG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKTtcbiAgICBsZXQgZGlkQWJvcnRGZXRjaExvYWRzID0gYWJvcnRTdGFsZUZldGNoTG9hZHMocGVuZGluZ05hdmlnYXRpb25Mb2FkSWQpO1xuICAgIGxldCBzaG91bGRVcGRhdGVGZXRjaGVycyA9IHVwZGF0ZWRGZXRjaGVycyB8fCBkaWRBYm9ydEZldGNoTG9hZHMgfHwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMDtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0sIHNob3VsZFVwZGF0ZUZldGNoZXJzID8ge1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSA6IHt9KTtcbiAgfVxuICAvLyBUcmlnZ2VyIGEgZmV0Y2hlciBsb2FkL3N1Ym1pdCBmb3IgdGhlIGdpdmVuIGZldGNoZXIga2V5XG4gIGZ1bmN0aW9uIGZldGNoKGtleSwgcm91dGVJZCwgaHJlZiwgb3B0cykge1xuICAgIGlmIChpc1NlcnZlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicm91dGVyLmZldGNoKCkgd2FzIGNhbGxlZCBkdXJpbmcgdGhlIHNlcnZlciByZW5kZXIsIGJ1dCBpdCBzaG91bGRuJ3QgYmUuIFwiICsgXCJZb3UgYXJlIGxpa2VseSBjYWxsaW5nIGEgdXNlRmV0Y2hlcigpIG1ldGhvZCBpbiB0aGUgYm9keSBvZiB5b3VyIGNvbXBvbmVudC4gXCIgKyBcIlRyeSBtb3ZpbmcgaXQgdG8gYSB1c2VFZmZlY3Qgb3IgYSBjYWxsYmFjay5cIik7XG4gICAgfVxuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICBsZXQgZmx1c2hTeW5jID0gKG9wdHMgJiYgb3B0cy51bnN0YWJsZV9mbHVzaFN5bmMpID09PSB0cnVlO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBub3JtYWxpemVkUGF0aCA9IG5vcm1hbGl6ZVRvKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3ByZXBlbmRCYXNlbmFtZSwgaHJlZiwgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoLCByb3V0ZUlkLCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnJlbGF0aXZlKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBub3JtYWxpemVkUGF0aCwgYmFzZW5hbWUpO1xuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IG5vcm1hbGl6ZWRQYXRoXG4gICAgICB9KSwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBlcnJvclxuICAgIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoZnV0dXJlLnY3X25vcm1hbGl6ZUZvcm1NZXRob2QsIHRydWUsIG5vcm1hbGl6ZWRQYXRoLCBvcHRzKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBtYXRjaCA9IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIHBhdGgpO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSAob3B0cyAmJiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCkgPT09IHRydWU7XG4gICAgaWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIGZsdXNoU3luYywgc3VibWlzc2lvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFN0b3JlIG9mZiB0aGUgbWF0Y2ggc28gd2UgY2FuIGNhbGwgaXQncyBzaG91bGRSZXZhbGlkYXRlIG9uIHN1YnNlcXVlbnRcbiAgICAvLyByZXZhbGlkYXRpb25zXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5zZXQoa2V5LCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcGF0aFxuICAgIH0pO1xuICAgIGhhbmRsZUZldGNoZXJMb2FkZXIoa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgZmx1c2hTeW5jLCBzdWJtaXNzaW9uKTtcbiAgfVxuICAvLyBDYWxsIHRoZSBhY3Rpb24gZm9yIHRoZSBtYXRjaGVkIGZldGNoZXIuc3VibWl0KCksIGFuZCB0aGVuIGhhbmRsZSByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgYW5kIHJldmFsaWRhdGlvblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIHJlcXVlc3RNYXRjaGVzLCBmbHVzaFN5bmMsIHN1Ym1pc3Npb24pIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZGVsZXRlKGtleSk7XG4gICAgaWYgKCFtYXRjaC5yb3V0ZS5hY3Rpb24gJiYgIW1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogcGF0aCxcbiAgICAgICAgcm91dGVJZDogcm91dGVJZFxuICAgICAgfSk7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvciwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBzdWJtaXR0aW5nIHN0YXRlXG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldFN1Ym1pdHRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGV4aXN0aW5nRmV0Y2hlciksIHtcbiAgICAgIGZsdXNoU3luY1xuICAgIH0pO1xuICAgIC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIGZldGNoZXJcbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwsIHN1Ym1pc3Npb24pO1xuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgb3JpZ2luYXRpbmdMb2FkSWQgPSBpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgbGV0IGFjdGlvblJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImFjdGlvblwiLCBmZXRjaFJlcXVlc3QsIG1hdGNoLCByZXF1ZXN0TWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCk7XG4gICAgaWYgKGZldGNoUmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91ciBvd24gZmV0Y2hlclxuICAgICAgLy8gcmUtc3VibWl0IHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSkgPT09IGFib3J0Q29udHJvbGxlcikge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBXaGVuIHVzaW5nIHY3X2ZldGNoZXJQZXJzaXN0LCB3ZSBkb24ndCB3YW50IGVycm9ycyBidWJibGluZyB1cCB0byB0aGUgVUlcbiAgICAvLyBvciByZWRpcmVjdHMgcHJvY2Vzc2VkIGZvciB1bm1vdW50ZWQgZmV0Y2hlcnMgc28gd2UganVzdCByZXZlcnQgdGhlbSB0b1xuICAgIC8vIGlkbGVcbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0ICYmIGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQoYWN0aW9uUmVzdWx0KSB8fCBpc0Vycm9yUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIExldCBTdWNjZXNzUmVzdWx0J3MgZmFsbCB0aHJvdWdoIGZvciByZXZhbGlkYXRpb25cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPiBvcmlnaW5hdGluZ0xvYWRJZCkge1xuICAgICAgICAgIC8vIEEgbmV3IG5hdmlnYXRpb24gd2FzIGtpY2tlZCBvZmYgYWZ0ZXIgb3VyIGFjdGlvbiBzdGFydGVkLCBzbyB0aGF0XG4gICAgICAgICAgLy8gc2hvdWxkIHRha2UgcHJlY2VkZW5jZSBvdmVyIHRoaXMgcmVkaXJlY3QgbmF2aWdhdGlvbi4gIFdlIGFscmVhZHlcbiAgICAgICAgICAvLyBzZXQgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCBzbyBhbGwgbG9hZGVycyBmb3IgdGhlIG5ldyByb3V0ZSBzaG91bGRcbiAgICAgICAgICAvLyBmaXJlIHVubGVzcyBvcHRlZCBvdXQgdmlhIHNob3VsZFJldmFsaWRhdGVcbiAgICAgICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoa2V5KTtcbiAgICAgICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uKSk7XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCBhY3Rpb25SZXN1bHQsIHtcbiAgICAgICAgICAgIGZldGNoZXJTdWJtaXNzaW9uOiBzdWJtaXNzaW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFByb2Nlc3MgYW55IG5vbi1yZWRpcmVjdCBlcnJvcnMgdGhyb3duXG4gICAgICBpZiAoaXNFcnJvclJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGFjdGlvblJlc3VsdC5lcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFN0YXJ0IHRoZSBkYXRhIGxvYWQgZm9yIGN1cnJlbnQgbWF0Y2hlcywgb3IgdGhlIG5leHQgbG9jYXRpb24gaWYgd2UncmVcbiAgICAvLyBpbiB0aGUgbWlkZGxlIG9mIGEgbmF2aWdhdGlvblxuICAgIGxldCBuZXh0TG9jYXRpb24gPSBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uIHx8IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCByZXZhbGlkYXRpb25SZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBuZXh0TG9jYXRpb24sIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBtYXRjaGVzID0gc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSAhPT0gXCJpZGxlXCIgPyBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwgYmFzZW5hbWUpIDogc3RhdGUubWF0Y2hlcztcbiAgICBpbnZhcmlhbnQobWF0Y2hlcywgXCJEaWRuJ3QgZmluZCBhbnkgbWF0Y2hlcyBhZnRlciBmZXRjaGVyIGFjdGlvblwiKTtcbiAgICBsZXQgbG9hZElkID0gKytpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgZmV0Y2hSZWxvYWRJZHMuc2V0KGtleSwgbG9hZElkKTtcbiAgICBsZXQgbG9hZEZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBhY3Rpb25SZXN1bHQuZGF0YSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgbG9hZEZldGNoZXIpO1xuICAgIGxldCBbbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBuZXh0TG9jYXRpb24sIGZhbHNlLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBkZWxldGVkRmV0Y2hlcnMsIGZldGNoTG9hZE1hdGNoZXMsIGZldGNoUmVkaXJlY3RJZHMsIHJvdXRlc1RvVXNlLCBiYXNlbmFtZSwge1xuICAgICAgW21hdGNoLnJvdXRlLmlkXTogYWN0aW9uUmVzdWx0LmRhdGFcbiAgICB9LCB1bmRlZmluZWQgLy8gTm8gbmVlZCB0byBzZW5kIHRocm91Z2ggZXJyb3JzIHNpbmNlIHdlIHNob3J0IGNpcmN1aXQgYWJvdmVcbiAgICApO1xuICAgIC8vIFB1dCBhbGwgcmV2YWxpZGF0aW5nIGZldGNoZXJzIGludG8gdGhlIGxvYWRpbmcgc3RhdGUsIGV4Y2VwdCBmb3IgdGhlXG4gICAgLy8gY3VycmVudCBmZXRjaGVyIHdoaWNoIHdlIHdhbnQgdG8ga2VlcCBpbiBpdCdzIGN1cnJlbnQgbG9hZGluZyBzdGF0ZSB3aGljaFxuICAgIC8vIGNvbnRhaW5zIGl0J3MgYWN0aW9uIHN1Ym1pc3Npb24gaW5mbyArIGFjdGlvbiBkYXRhXG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZmlsdGVyKHJmID0+IHJmLmtleSAhPT0ga2V5KS5mb3JFYWNoKHJmID0+IHtcbiAgICAgIGxldCBzdGFsZUtleSA9IHJmLmtleTtcbiAgICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoc3RhbGVLZXkpO1xuICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcih1bmRlZmluZWQsIGV4aXN0aW5nRmV0Y2hlciA/IGV4aXN0aW5nRmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChzdGFsZUtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoc3RhbGVLZXkpKSB7XG4gICAgICAgIGFib3J0RmV0Y2hlcihzdGFsZUtleSk7XG4gICAgICB9XG4gICAgICBpZiAocmYuY29udHJvbGxlcikge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChzdGFsZUtleSwgcmYuY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gICAgbGV0IGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyA9ICgpID0+IHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gocmYgPT4gYWJvcnRGZXRjaGVyKHJmLmtleSkpO1xuICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgbGV0IHtcbiAgICAgIHJlc3VsdHMsXG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9ID0gYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXZhbGlkYXRpb25SZXF1ZXN0KTtcbiAgICBpZiAoYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHIgPT4gZmV0Y2hDb250cm9sbGVycy5kZWxldGUoci5rZXkpKTtcbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QocmVzdWx0cyk7XG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICBpZiAocmVkaXJlY3QuaWR4ID49IG1hdGNoZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICAgIC8vIElmIHRoaXMgcmVkaXJlY3QgY2FtZSBmcm9tIGEgZmV0Y2hlciBtYWtlIHN1cmUgd2UgbWFyayBpdCBpblxuICAgICAgICAvLyBmZXRjaFJlZGlyZWN0SWRzIHNvIGl0IGRvZXNuJ3QgZ2V0IHJldmFsaWRhdGVkIG9uIHRoZSBuZXh0IHNldCBvZlxuICAgICAgICAvLyBsb2FkZXIgZXhlY3V0aW9uc1xuICAgICAgICBsZXQgZmV0Y2hlcktleSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW3JlZGlyZWN0LmlkeCAtIG1hdGNoZXNUb0xvYWQubGVuZ3RoXS5rZXk7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGZldGNoZXJLZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdC5yZXN1bHQpO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCB1bmRlZmluZWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICAvLyBTaW5jZSB3ZSBsZXQgcmV2YWxpZGF0aW9ucyBjb21wbGV0ZSBldmVuIGlmIHRoZSBzdWJtaXR0aW5nIGZldGNoZXIgd2FzXG4gICAgLy8gZGVsZXRlZCwgb25seSBwdXQgaXQgYmFjayB0byBpZGxlIGlmIGl0IGhhc24ndCBiZWVuIGRlbGV0ZWRcbiAgICBpZiAoc3RhdGUuZmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKGFjdGlvblJlc3VsdC5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gICAgYWJvcnRTdGFsZUZldGNoTG9hZHMobG9hZElkKTtcbiAgICAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGluIGEgbmF2aWdhdGlvbiBsb2FkaW5nIHN0YXRlIGFuZCB0aGlzIGZldGNoZXIgaXNcbiAgICAvLyBtb3JlIHJlY2VudCB0aGFuIHRoZSBuYXZpZ2F0aW9uLCB3ZSB3YW50IHRoZSBuZXdlciBkYXRhIHNvIGFib3J0IHRoZVxuICAgIC8vIG5hdmlnYXRpb24gYW5kIGNvbXBsZXRlIGl0IHdpdGggdGhlIGZldGNoZXIgZGF0YVxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiBsb2FkSWQgPiBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCkge1xuICAgICAgaW52YXJpYW50KHBlbmRpbmdBY3Rpb24sIFwiRXhwZWN0ZWQgcGVuZGluZyBhY3Rpb25cIik7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24oc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhLFxuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHVwZGF0ZSB3aXRoIHRoZSBmZXRjaGVyIGRhdGEsIHByZXNlcnZpbmcgYW55IGV4aXN0aW5nXG4gICAgICAvLyBsb2FkZXJEYXRhIGZvciBsb2FkZXJzIHRoYXQgZGlkIG5vdCBuZWVkIHRvIHJlbG9hZC4gIFdlIGhhdmUgdG9cbiAgICAgIC8vIG1hbnVhbGx5IG1lcmdlIGhlcmUgc2luY2Ugd2UgYXJlbid0IGdvaW5nIHRocm91Z2ggY29tcGxldGVOYXZpZ2F0aW9uXG4gICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgbG9hZGVyRGF0YTogbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIGxvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycyksXG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSk7XG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIENhbGwgdGhlIG1hdGNoZWQgbG9hZGVyIGZvciBmZXRjaGVyLmxvYWQoKSwgaGFuZGxpbmcgcmVkaXJlY3RzLCBlcnJvcnMsIGV0Yy5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBmbHVzaFN5bmMsIHN1Ym1pc3Npb24pIHtcbiAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpLCB7XG4gICAgICBmbHVzaFN5bmNcbiAgICB9KTtcbiAgICAvLyBDYWxsIHRoZSBsb2FkZXIgZm9yIHRoaXMgZmV0Y2hlciByb3V0ZSBtYXRjaFxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgIGxldCBvcmlnaW5hdGluZ0xvYWRJZCA9IGluY3JlbWVudGluZ0xvYWRJZDtcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwibG9hZGVyXCIsIGZldGNoUmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpO1xuICAgIC8vIERlZmVycmVkIGlzbid0IHN1cHBvcnRlZCBmb3IgZmV0Y2hlciBsb2FkcywgYXdhaXQgZXZlcnl0aGluZyBhbmQgdHJlYXQgaXRcbiAgICAvLyBhcyBhIG5vcm1hbCBsb2FkLiAgcmVzb2x2ZURlZmVycmVkRGF0YSB3aWxsIHJldHVybiB1bmRlZmluZWQgaWYgdGhpc1xuICAgIC8vIGZldGNoZXIgZ2V0cyBhYm9ydGVkLCBzbyB3ZSBqdXN0IGxlYXZlIHJlc3VsdCB1bnRvdWNoZWQgYW5kIHNob3J0IGNpcmN1aXRcbiAgICAvLyBiZWxvdyBpZiB0aGF0IGhhcHBlbnNcbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICByZXN1bHQgPSAoYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIGZldGNoUmVxdWVzdC5zaWduYWwsIHRydWUpKSB8fCByZXN1bHQ7XG4gICAgfVxuICAgIC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdXIgb3VyIG93biBmZXRjaGVyXG4gICAgLy8gcmUtbG9hZCB3aGljaCB3b3VsZCBoYXZlIHB1dCBfbmV3XyBjb250cm9sbGVyIGlzIGluIGZldGNoQ29udHJvbGxlcnNcbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdlIGRvbid0IHdhbnQgZXJyb3JzIGJ1YmJsaW5nIHVwIG9yIHJlZGlyZWN0cyBmb2xsb3dlZCBmb3IgdW5tb3VudGVkXG4gICAgLy8gZmV0Y2hlcnMsIHNvIHNob3J0IGNpcmN1aXQgaGVyZSBpZiBpdCB3YXMgcmVtb3ZlZCBmcm9tIHRoZSBVSVxuICAgIGlmIChkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgbG9hZGVyIHRocmV3IGEgcmVkaXJlY3QgUmVzcG9uc2UsIHN0YXJ0IGEgbmV3IFJFUExBQ0UgbmF2aWdhdGlvblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA+IG9yaWdpbmF0aW5nTG9hZElkKSB7XG4gICAgICAgIC8vIEEgbmV3IG5hdmlnYXRpb24gd2FzIGtpY2tlZCBvZmYgYWZ0ZXIgb3VyIGxvYWRlciBzdGFydGVkLCBzbyB0aGF0XG4gICAgICAgIC8vIHNob3VsZCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGlzIHJlZGlyZWN0IG5hdmlnYXRpb25cbiAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGtleSk7XG4gICAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZXN1bHQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW55IG5vbi1yZWRpcmVjdCBlcnJvcnMgdGhyb3duXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgcmVzdWx0LmVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW52YXJpYW50KCFpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCksIFwiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YVwiKTtcbiAgICAvLyBQdXQgdGhlIGZldGNoZXIgYmFjayBpbnRvIGFuIGlkbGUgc3RhdGVcbiAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcihyZXN1bHQuZGF0YSkpO1xuICB9XG4gIC8qKlxuICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGhhbmRsZSByZWRpcmVjdHMgcmV0dXJuZWQgZnJvbSBhbiBhY3Rpb24gb3IgbG9hZGVyLlxuICAgKiBOb3JtYWxseSwgYSByZWRpcmVjdCBcInJlcGxhY2VzXCIgdGhlIG5hdmlnYXRpb24gdGhhdCB0cmlnZ2VyZWQgaXQuICBTbywgZm9yXG4gICAqIGV4YW1wbGU6XG4gICAqXG4gICAqICAtIHVzZXIgaXMgb24gL2FcbiAgICogIC0gdXNlciBjbGlja3MgYSBsaW5rIHRvIC9iXG4gICAqICAtIGxvYWRlciBmb3IgL2IgcmVkaXJlY3RzIHRvIC9jXG4gICAqXG4gICAqIEluIGEgbm9uLUpTIGFwcCB0aGUgYnJvd3NlciB3b3VsZCB0cmFjayB0aGUgaW4tZmxpZ2h0IG5hdmlnYXRpb24gdG8gL2IgYW5kXG4gICAqIHRoZW4gcmVwbGFjZSBpdCB3aXRoIC9jIHdoZW4gaXQgZW5jb3VudGVyZWQgdGhlIHJlZGlyZWN0IHJlc3BvbnNlLiAgSW5cbiAgICogdGhlIGVuZCBpdCB3b3VsZCBvbmx5IGV2ZXIgdXBkYXRlIHRoZSBVUkwgYmFyIHdpdGggL2MuXG4gICAqXG4gICAqIEluIGNsaWVudC1zaWRlIHJvdXRpbmcgdXNpbmcgcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZSwgd2UgYWltIHRvIGVtdWxhdGVcbiAgICogdGhpcyBiZWhhdmlvciBhbmQgd2UgYWxzbyBkbyBub3QgdXBkYXRlIGhpc3RvcnkgdW50aWwgdGhlIGVuZCBvZiB0aGVcbiAgICogbmF2aWdhdGlvbiAoaW5jbHVkaW5nIHByb2Nlc3NlZCByZWRpcmVjdHMpLiAgVGhpcyBtZWFucyB0aGF0IHdlIG5ldmVyXG4gICAqIGFjdHVhbGx5IHRvdWNoIGhpc3RvcnkgdW50aWwgd2UndmUgcHJvY2Vzc2VkIHJlZGlyZWN0cywgc28gd2UganVzdCB1c2VcbiAgICogdGhlIGhpc3RvcnkgYWN0aW9uIGZyb20gdGhlIG9yaWdpbmFsIG5hdmlnYXRpb24gKFBVU0ggb3IgUkVQTEFDRSkuXG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVkaXJlY3QsIF90ZW1wMikge1xuICAgIGxldCB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgZmV0Y2hlclN1Ym1pc3Npb24sXG4gICAgICByZXBsYWNlXG4gICAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gICAgaWYgKHJlZGlyZWN0LnJldmFsaWRhdGUpIHtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgICBsZXQgcmVkaXJlY3RMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCByZWRpcmVjdC5sb2NhdGlvbiwge1xuICAgICAgX2lzUmVkaXJlY3Q6IHRydWVcbiAgICB9KTtcbiAgICBpbnZhcmlhbnQocmVkaXJlY3RMb2NhdGlvbiwgXCJFeHBlY3RlZCBhIGxvY2F0aW9uIG9uIHRoZSByZWRpcmVjdCBuYXZpZ2F0aW9uXCIpO1xuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIGxldCBpc0RvY3VtZW50UmVsb2FkID0gZmFsc2U7XG4gICAgICBpZiAocmVkaXJlY3QucmVsb2FkRG9jdW1lbnQpIHtcbiAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgdGhlIHJlc3BvbnNlIGNvbnRhaW5lZCBYLVJlbWl4LVJlbG9hZC1Eb2N1bWVudFxuICAgICAgICBpc0RvY3VtZW50UmVsb2FkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QocmVkaXJlY3QubG9jYXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGluaXQuaGlzdG9yeS5jcmVhdGVVUkwocmVkaXJlY3QubG9jYXRpb24pO1xuICAgICAgICBpc0RvY3VtZW50UmVsb2FkID1cbiAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgaXQncyBhbiBhYnNvbHV0ZSBVUkwgdG8gYSBuZXcgb3JpZ2luXG4gICAgICAgIHVybC5vcmlnaW4gIT09IHJvdXRlcldpbmRvdy5sb2NhdGlvbi5vcmlnaW4gfHxcbiAgICAgICAgLy8gSGFyZCByZWxvYWQgaWYgaXQncyBhbiBhYnNvbHV0ZSBVUkwgdGhhdCBkb2VzIG5vdCBtYXRjaCBvdXIgYmFzZW5hbWVcbiAgICAgICAgc3RyaXBCYXNlbmFtZSh1cmwucGF0aG5hbWUsIGJhc2VuYW1lKSA9PSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGlzRG9jdW1lbnRSZWxvYWQpIHtcbiAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICByb3V0ZXJXaW5kb3cubG9jYXRpb24ucmVwbGFjZShyZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm91dGVyV2luZG93LmxvY2F0aW9uLmFzc2lnbihyZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gYWJvcnQgb24gcmVkaXJlY3RzLCBzaW5jZSB3ZSBkb24ndCBkZXRlY3QgdGhlXG4gICAgLy8gcmVkaXJlY3QgdW50aWwgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgc2V0dGxlZFxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgbGV0IHJlZGlyZWN0SGlzdG9yeUFjdGlvbiA9IHJlcGxhY2UgPT09IHRydWUgPyBBY3Rpb24uUmVwbGFjZSA6IEFjdGlvbi5QdXNoO1xuICAgIC8vIFVzZSB0aGUgaW5jb21pbmcgc3VibWlzc2lvbiBpZiBwcm92aWRlZCwgZmFsbGJhY2sgb24gdGhlIGFjdGl2ZSBvbmUgaW5cbiAgICAvLyBzdGF0ZS5uYXZpZ2F0aW9uXG4gICAgbGV0IHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGVcbiAgICB9ID0gc3RhdGUubmF2aWdhdGlvbjtcbiAgICBpZiAoIXN1Ym1pc3Npb24gJiYgIWZldGNoZXJTdWJtaXNzaW9uICYmIGZvcm1NZXRob2QgJiYgZm9ybUFjdGlvbiAmJiBmb3JtRW5jVHlwZSkge1xuICAgICAgc3VibWlzc2lvbiA9IGdldFN1Ym1pc3Npb25Gcm9tTmF2aWdhdGlvbihzdGF0ZS5uYXZpZ2F0aW9uKTtcbiAgICB9XG4gICAgLy8gSWYgdGhpcyB3YXMgYSAzMDcvMzA4IHN1Ym1pc3Npb24gd2Ugd2FudCB0byBwcmVzZXJ2ZSB0aGUgSFRUUCBtZXRob2QgYW5kXG4gICAgLy8gcmUtc3VibWl0IHRoZSBHRVQvUE9TVC9QVVQvUEFUQ0gvREVMRVRFIGFzIGEgc3VibWlzc2lvbiBuYXZpZ2F0aW9uIHRvIHRoZVxuICAgIC8vIHJlZGlyZWN0ZWQgbG9jYXRpb25cbiAgICBsZXQgYWN0aXZlU3VibWlzc2lvbiA9IHN1Ym1pc3Npb24gfHwgZmV0Y2hlclN1Ym1pc3Npb247XG4gICAgaWYgKHJlZGlyZWN0UHJlc2VydmVNZXRob2RTdGF0dXNDb2Rlcy5oYXMocmVkaXJlY3Quc3RhdHVzKSAmJiBhY3RpdmVTdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2QoYWN0aXZlU3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBzdWJtaXNzaW9uOiBfZXh0ZW5kcyh7fSwgYWN0aXZlU3VibWlzc2lvbiwge1xuICAgICAgICAgIGZvcm1BY3Rpb246IHJlZGlyZWN0LmxvY2F0aW9uXG4gICAgICAgIH0pLFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgbmF2aWdhdGlvbiBzdWJtaXNzaW9uLCB3ZSB3aWxsIHByZXNlcnZlIGl0IHRocm91Z2ggdGhlXG4gICAgICAvLyByZWRpcmVjdCBuYXZpZ2F0aW9uXG4gICAgICBsZXQgb3ZlcnJpZGVOYXZpZ2F0aW9uID0gZ2V0TG9hZGluZ05hdmlnYXRpb24ocmVkaXJlY3RMb2NhdGlvbiwgc3VibWlzc2lvbik7XG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbixcbiAgICAgICAgLy8gU2VuZCBmZXRjaGVyIHN1Ym1pc3Npb25zIHRocm91Z2ggZm9yIHNob3VsZFJldmFsaWRhdGVcbiAgICAgICAgZmV0Y2hlclN1Ym1pc3Npb24sXG4gICAgICAgIC8vIFByZXNlcnZlIHRoaXMgZmxhZyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShjdXJyZW50TWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgZmV0Y2hlcnNUb0xvYWQsIHJlcXVlc3QpIHtcbiAgICAvLyBDYWxsIGFsbCBuYXZpZ2F0aW9uIGxvYWRlcnMgYW5kIHJldmFsaWRhdGluZyBmZXRjaGVyIGxvYWRlcnMgaW4gcGFyYWxsZWwsXG4gICAgLy8gdGhlbiBzbGljZSBvZmYgdGhlIHJlc3VsdHMgaW50byBzZXBhcmF0ZSBhcnJheXMgc28gd2UgY2FuIGhhbmRsZSB0aGVtXG4gICAgLy8gYWNjb3JkaW5nbHlcbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpKSwgLi4uZmV0Y2hlcnNUb0xvYWQubWFwKGYgPT4ge1xuICAgICAgaWYgKGYubWF0Y2hlcyAmJiBmLm1hdGNoICYmIGYuY29udHJvbGxlcikge1xuICAgICAgICByZXR1cm4gY2FsbExvYWRlck9yQWN0aW9uKFwibG9hZGVyXCIsIGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgZi5wYXRoLCBmLmNvbnRyb2xsZXIuc2lnbmFsKSwgZi5tYXRjaCwgZi5tYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBlcnJvciA9IHtcbiAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICAgICAgcGF0aG5hbWU6IGYucGF0aFxuICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgIH1cbiAgICB9KV0pO1xuICAgIGxldCBsb2FkZXJSZXN1bHRzID0gcmVzdWx0cy5zbGljZSgwLCBtYXRjaGVzVG9Mb2FkLmxlbmd0aCk7XG4gICAgbGV0IGZldGNoZXJSZXN1bHRzID0gcmVzdWx0cy5zbGljZShtYXRjaGVzVG9Mb2FkLmxlbmd0aCk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoW3Jlc29sdmVEZWZlcnJlZFJlc3VsdHMoY3VycmVudE1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGxvYWRlclJlc3VsdHMsIGxvYWRlclJlc3VsdHMubWFwKCgpID0+IHJlcXVlc3Quc2lnbmFsKSwgZmFsc2UsIHN0YXRlLmxvYWRlckRhdGEpLCByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBmZXRjaGVyc1RvTG9hZC5tYXAoZiA9PiBmLm1hdGNoKSwgZmV0Y2hlclJlc3VsdHMsIGZldGNoZXJzVG9Mb2FkLm1hcChmID0+IGYuY29udHJvbGxlciA/IGYuY29udHJvbGxlci5zaWduYWwgOiBudWxsKSwgdHJ1ZSldKTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gaW50ZXJydXB0QWN0aXZlTG9hZHMoKSB7XG4gICAgLy8gRXZlcnkgaW50ZXJydXB0aW9uIHRyaWdnZXJzIGEgcmV2YWxpZGF0aW9uXG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgLy8gQ2FuY2VsIHBlbmRpbmcgcm91dGUtbGV2ZWwgZGVmZXJyZWRzIGFuZCBtYXJrIGNhbmNlbGxlZCByb3V0ZXMgZm9yXG4gICAgLy8gcmV2YWxpZGF0aW9uXG4gICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMucHVzaCguLi5jYW5jZWxBY3RpdmVEZWZlcnJlZHMoKSk7XG4gICAgLy8gQWJvcnQgaW4tZmxpZ2h0IGZldGNoZXIgbG9hZHNcbiAgICBmZXRjaExvYWRNYXRjaGVzLmZvckVhY2goKF8sIGtleSkgPT4ge1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLnB1c2goa2V5KTtcbiAgICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZmV0Y2hlciwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSwge1xuICAgICAgZmx1c2hTeW5jOiAob3B0cyAmJiBvcHRzLmZsdXNoU3luYykgPT09IHRydWVcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvciwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIHJvdXRlSWQpO1xuICAgIGRlbGV0ZUZldGNoZXIoa2V5KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBlcnJvcnM6IHtcbiAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiBlcnJvclxuICAgICAgfSxcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0sIHtcbiAgICAgIGZsdXNoU3luYzogKG9wdHMgJiYgb3B0cy5mbHVzaFN5bmMpID09PSB0cnVlXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RmV0Y2hlcihrZXkpIHtcbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0KSB7XG4gICAgICBhY3RpdmVGZXRjaGVycy5zZXQoa2V5LCAoYWN0aXZlRmV0Y2hlcnMuZ2V0KGtleSkgfHwgMCkgKyAxKTtcbiAgICAgIC8vIElmIHRoaXMgZmV0Y2hlciB3YXMgcHJldmlvdXNseSBtYXJrZWQgZm9yIGRlbGV0aW9uLCB1bm1hcmsgaXQgc2luY2Ugd2VcbiAgICAgIC8vIGhhdmUgYSBuZXcgaW5zdGFuY2VcbiAgICAgIGlmIChkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgZGVsZXRlZEZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSkgfHwgSURMRV9GRVRDSEVSO1xuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZUZldGNoZXIoa2V5KSB7XG4gICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAvLyBEb24ndCBhYm9ydCB0aGUgY29udHJvbGxlciBpZiB0aGlzIGlzIGEgZGVsZXRpb24gb2YgYSBmZXRjaGVyLnN1Ym1pdCgpXG4gICAgLy8gaW4gaXQncyBsb2FkaW5nIHBoYXNlIHNpbmNlIC0gd2UgZG9uJ3Qgd2FudCB0byBhYm9ydCB0aGUgY29ycmVzcG9uZGluZ1xuICAgIC8vIHJldmFsaWRhdGlvbiBhbmQgd2FudCB0aGVtIHRvIGNvbXBsZXRlIGFuZCBsYW5kXG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkgJiYgIShmZXRjaGVyICYmIGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiICYmIGZldGNoUmVsb2FkSWRzLmhhcyhrZXkpKSkge1xuICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgfVxuICAgIGZldGNoTG9hZE1hdGNoZXMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgZmV0Y2hSZWRpcmVjdElkcy5kZWxldGUoa2V5KTtcbiAgICBkZWxldGVkRmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlRmV0Y2hlckFuZFVwZGF0ZVN0YXRlKGtleSkge1xuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIGxldCBjb3VudCA9IChhY3RpdmVGZXRjaGVycy5nZXQoa2V5KSB8fCAwKSAtIDE7XG4gICAgICBpZiAoY291bnQgPD0gMCkge1xuICAgICAgICBhY3RpdmVGZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICAgICAgZGVsZXRlZEZldGNoZXJzLmFkZChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlRmV0Y2hlcnMuc2V0KGtleSwgY291bnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVGZXRjaGVyKGtleSk7XG4gICAgfVxuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFib3J0RmV0Y2hlcihrZXkpIHtcbiAgICBsZXQgY29udHJvbGxlciA9IGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSk7XG4gICAgaW52YXJpYW50KGNvbnRyb2xsZXIsIFwiRXhwZWN0ZWQgZmV0Y2ggY29udHJvbGxlcjogXCIgKyBrZXkpO1xuICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICB9XG4gIGZ1bmN0aW9uIG1hcmtGZXRjaGVyc0RvbmUoa2V5cykge1xuICAgIGZvciAobGV0IGtleSBvZiBrZXlzKSB7XG4gICAgICBsZXQgZmV0Y2hlciA9IGdldEZldGNoZXIoa2V5KTtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKGZldGNoZXIuZGF0YSk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKSB7XG4gICAgbGV0IGRvbmVLZXlzID0gW107XG4gICAgbGV0IHVwZGF0ZWRGZXRjaGVycyA9IGZhbHNlO1xuICAgIGZvciAobGV0IGtleSBvZiBmZXRjaFJlZGlyZWN0SWRzKSB7XG4gICAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgICAgaW52YXJpYW50KGZldGNoZXIsIFwiRXhwZWN0ZWQgZmV0Y2hlcjogXCIgKyBrZXkpO1xuICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgIGRvbmVLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgdXBkYXRlZEZldGNoZXJzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWFya0ZldGNoZXJzRG9uZShkb25lS2V5cyk7XG4gICAgcmV0dXJuIHVwZGF0ZWRGZXRjaGVycztcbiAgfVxuICBmdW5jdGlvbiBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhsYW5kZWRJZCkge1xuICAgIGxldCB5ZWV0ZWRLZXlzID0gW107XG4gICAgZm9yIChsZXQgW2tleSwgaWRdIG9mIGZldGNoUmVsb2FkSWRzKSB7XG4gICAgICBpZiAoaWQgPCBsYW5kZWRJZCkge1xuICAgICAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgICAgICBpbnZhcmlhbnQoZmV0Y2hlciwgXCJFeHBlY3RlZCBmZXRjaGVyOiBcIiArIGtleSk7XG4gICAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgIHllZXRlZEtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIG1hcmtGZXRjaGVyc0RvbmUoeWVldGVkS2V5cyk7XG4gICAgcmV0dXJuIHllZXRlZEtleXMubGVuZ3RoID4gMDtcbiAgfVxuICBmdW5jdGlvbiBnZXRCbG9ja2VyKGtleSwgZm4pIHtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChrZXkpIHx8IElETEVfQkxPQ0tFUjtcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5nZXQoa2V5KSAhPT0gZm4pIHtcbiAgICAgIGJsb2NrZXJGdW5jdGlvbnMuc2V0KGtleSwgZm4pO1xuICAgIH1cbiAgICByZXR1cm4gYmxvY2tlcjtcbiAgfVxuICBmdW5jdGlvbiBkZWxldGVCbG9ja2VyKGtleSkge1xuICAgIHN0YXRlLmJsb2NrZXJzLmRlbGV0ZShrZXkpO1xuICAgIGJsb2NrZXJGdW5jdGlvbnMuZGVsZXRlKGtleSk7XG4gIH1cbiAgLy8gVXRpbGl0eSBmdW5jdGlvbiB0byB1cGRhdGUgYmxvY2tlcnMsIGVuc3VyaW5nIHZhbGlkIHN0YXRlIHRyYW5zaXRpb25zXG4gIGZ1bmN0aW9uIHVwZGF0ZUJsb2NrZXIoa2V5LCBuZXdCbG9ja2VyKSB7XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoa2V5KSB8fCBJRExFX0JMT0NLRVI7XG4gICAgLy8gUG9vciBtYW5zIHN0YXRlIG1hY2hpbmUgOilcbiAgICAvLyBodHRwczovL21lcm1haWQubGl2ZS9lZGl0I3Bha286ZU5xVmtjOU93ekFNeGw4bDhubmpBWXJFdERJT0hFQklnd3ZLSlRSZUd5M19sRHBJcU8yN2s2YXdNRzBYY3JMbG56ODdud2RvbkVTb2dLWFhCdUU3OXJxNzVYWk8zLXlIZHMwUkpWdXY3MFlyUGxVckNFZTJIZnJPUlMzcnVicVpmdWh0cGc1Qzl3azV0WjRWS2NSVXE4OHE5WjhSUzAtNDhjRTFpSEprTDB1Z2JIdUZMdXM5TDZzcFp5OG5YOU1QMkNOZG9tVmFwb3NxdTNmR2F5VDhUOC1qSlF3aGVwb19VdHBnQlFhREVVb20wNGRaaEFOMWFKQkRsVUtKQnhFMWNlQjJTbWowTWxuLUlCVzVBRlUyZHdVaWt0dF8yUWFxMmRCZmFLZEV1cDg1VVY3WWQtZEtqbG5rYWJsMlB2cjBEVGtUcmVNXG4gICAgaW52YXJpYW50KGJsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiLCBcIkludmFsaWQgYmxvY2tlciBzdGF0ZSB0cmFuc2l0aW9uOiBcIiArIGJsb2NrZXIuc3RhdGUgKyBcIiAtPiBcIiArIG5ld0Jsb2NrZXIuc3RhdGUpO1xuICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgIGJsb2NrZXJzLnNldChrZXksIG5ld0Jsb2NrZXIpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGJsb2NrZXJzXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKF9yZWYyKSB7XG4gICAgbGV0IHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9ID0gX3JlZjI7XG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBXZSBvbnkgc3VwcG9ydCBhIHNpbmdsZSBhY3RpdmUgYmxvY2tlciBhdCB0aGUgbW9tZW50IHNpbmNlIHdlIGRvbid0IGhhdmVcbiAgICAvLyBhbnkgY29tcGVsbGluZyB1c2UgY2FzZXMgZm9yIG11bHRpLWJsb2NrZXIgeWV0XG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuc2l6ZSA+IDEpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiQSByb3V0ZXIgb25seSBzdXBwb3J0cyBvbmUgYmxvY2tlciBhdCBhIHRpbWVcIik7XG4gICAgfVxuICAgIGxldCBlbnRyaWVzID0gQXJyYXkuZnJvbShibG9ja2VyRnVuY3Rpb25zLmVudHJpZXMoKSk7XG4gICAgbGV0IFtibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb25dID0gZW50cmllc1tlbnRyaWVzLmxlbmd0aCAtIDFdO1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGJsb2NrZXJLZXkpO1xuICAgIGlmIChibG9ja2VyICYmIGJsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiKSB7XG4gICAgICAvLyBJZiB0aGUgYmxvY2tlciBpcyBjdXJyZW50bHkgcHJvY2VlZGluZywgd2UgZG9uJ3QgbmVlZCB0byByZS1jaGVja1xuICAgICAgLy8gaXQgYW5kIGNhbiBsZXQgdGhpcyBuYXZpZ2F0aW9uIGNvbnRpbnVlXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGtub3cgd2UncmUgdW5ibG9ja2VkL2Jsb2NrZWQgc28gd2UgbmVlZCB0byBjaGVjayB0aGVcbiAgICAvLyB1c2VyLXByb3ZpZGVkIGJsb2NrZXIgZnVuY3Rpb25cbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9uKHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9KSkge1xuICAgICAgcmV0dXJuIGJsb2NrZXJLZXk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhwcmVkaWNhdGUpIHtcbiAgICBsZXQgY2FuY2VsbGVkUm91dGVJZHMgPSBbXTtcbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGZkLCByb3V0ZUlkKSA9PiB7XG4gICAgICBpZiAoIXByZWRpY2F0ZSB8fCBwcmVkaWNhdGUocm91dGVJZCkpIHtcbiAgICAgICAgLy8gQ2FuY2VsIHRoZSBkZWZlcnJlZCAtIGJ1dCBkbyBub3QgcmVtb3ZlIGZyb20gYWN0aXZlRGVmZXJyZWRzIGhlcmUgLVxuICAgICAgICAvLyB3ZSByZWx5IG9uIHRoZSBzdWJzY3JpYmVycyB0byBkbyB0aGF0IHNvIG91ciB0ZXN0cyBjYW4gYXNzZXJ0IHByb3BlclxuICAgICAgICAvLyBjbGVhbnVwIHZpYSBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHNcbiAgICAgICAgZGZkLmNhbmNlbCgpO1xuICAgICAgICBjYW5jZWxsZWRSb3V0ZUlkcy5wdXNoKHJvdXRlSWQpO1xuICAgICAgICBhY3RpdmVEZWZlcnJlZHMuZGVsZXRlKHJvdXRlSWQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjYW5jZWxsZWRSb3V0ZUlkcztcbiAgfVxuICAvLyBPcHQgaW4gdG8gY2FwdHVyaW5nIGFuZCByZXBvcnRpbmcgc2Nyb2xsIHBvc2l0aW9ucyBkdXJpbmcgbmF2aWdhdGlvbnMsXG4gIC8vIHVzZWQgYnkgdGhlIDxTY3JvbGxSZXN0b3JhdGlvbj4gY29tcG9uZW50XG4gIGZ1bmN0aW9uIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHBvc2l0aW9ucywgZ2V0UG9zaXRpb24sIGdldEtleSkge1xuICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gcG9zaXRpb25zO1xuICAgIGdldFNjcm9sbFBvc2l0aW9uID0gZ2V0UG9zaXRpb247XG4gICAgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBnZXRLZXkgfHwgbnVsbDtcbiAgICAvLyBQZXJmb3JtIGluaXRpYWwgaHlkcmF0aW9uIHNjcm9sbCByZXN0b3JhdGlvbiwgc2luY2Ugd2UgbWlzcyB0aGUgYm9hdCBvblxuICAgIC8vIHRoZSBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgYmVjYXVzZSB3ZSd2ZSBub3QgeWV0IHJlbmRlcmVkIDxTY3JvbGxSZXN0b3JhdGlvbi8+XG4gICAgLy8gYW5kIHRoZXJlZm9yZSBoYXZlIG5vIHNhdmVkU2Nyb2xsUG9zaXRpb25zIGF2YWlsYWJsZVxuICAgIGlmICghaW5pdGlhbFNjcm9sbFJlc3RvcmVkICYmIHN0YXRlLm5hdmlnYXRpb24gPT09IElETEVfTkFWSUdBVElPTikge1xuICAgICAgaW5pdGlhbFNjcm9sbFJlc3RvcmVkID0gdHJ1ZTtcbiAgICAgIGxldCB5ID0gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcyk7XG4gICAgICBpZiAoeSAhPSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IHlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkpIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxSZXN0b3JhdGlvbktleShsb2NhdGlvbiwgbWF0Y2hlcy5tYXAobSA9PiBjb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaChtLCBzdGF0ZS5sb2FkZXJEYXRhKSkpO1xuICAgICAgcmV0dXJuIGtleSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgfVxuICAgIHJldHVybiBsb2NhdGlvbi5rZXk7XG4gIH1cbiAgZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zICYmIGdldFNjcm9sbFBvc2l0aW9uKSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uLCBtYXRjaGVzKTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zKSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uLCBtYXRjaGVzKTtcbiAgICAgIGxldCB5ID0gc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgeSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4geTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gX2ludGVybmFsU2V0Um91dGVzKG5ld1JvdXRlcykge1xuICAgIG1hbmlmZXN0ID0ge307XG4gICAgaW5GbGlnaHREYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhuZXdSb3V0ZXMsIG1hcFJvdXRlUHJvcGVydGllcywgdW5kZWZpbmVkLCBtYW5pZmVzdCk7XG4gIH1cbiAgcm91dGVyID0ge1xuICAgIGdldCBiYXNlbmFtZSgpIHtcbiAgICAgIHJldHVybiBiYXNlbmFtZTtcbiAgICB9LFxuICAgIGdldCBmdXR1cmUoKSB7XG4gICAgICByZXR1cm4gZnV0dXJlO1xuICAgIH0sXG4gICAgZ2V0IHN0YXRlKCkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG4gICAgZ2V0IHJvdXRlcygpIHtcbiAgICAgIHJldHVybiBkYXRhUm91dGVzO1xuICAgIH0sXG4gICAgZ2V0IHdpbmRvdygpIHtcbiAgICAgIHJldHVybiByb3V0ZXJXaW5kb3c7XG4gICAgfSxcbiAgICBpbml0aWFsaXplLFxuICAgIHN1YnNjcmliZSxcbiAgICBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbixcbiAgICBuYXZpZ2F0ZSxcbiAgICBmZXRjaCxcbiAgICByZXZhbGlkYXRlLFxuICAgIC8vIFBhc3N0aHJvdWdoIHRvIGhpc3RvcnktYXdhcmUgY3JlYXRlSHJlZiB1c2VkIGJ5IHVzZUhyZWYgc28gd2UgZ2V0IHByb3BlclxuICAgIC8vIGhhc2gtYXdhcmUgVVJMcyBpbiBET00gcGF0aHNcbiAgICBjcmVhdGVIcmVmOiB0byA9PiBpbml0Lmhpc3RvcnkuY3JlYXRlSHJlZih0byksXG4gICAgZW5jb2RlTG9jYXRpb246IHRvID0+IGluaXQuaGlzdG9yeS5lbmNvZGVMb2NhdGlvbih0byksXG4gICAgZ2V0RmV0Y2hlcixcbiAgICBkZWxldGVGZXRjaGVyOiBkZWxldGVGZXRjaGVyQW5kVXBkYXRlU3RhdGUsXG4gICAgZGlzcG9zZSxcbiAgICBnZXRCbG9ja2VyLFxuICAgIGRlbGV0ZUJsb2NrZXIsXG4gICAgX2ludGVybmFsRmV0Y2hDb250cm9sbGVyczogZmV0Y2hDb250cm9sbGVycyxcbiAgICBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcyxcbiAgICAvLyBUT0RPOiBSZW1vdmUgc2V0Um91dGVzLCBpdCdzIHRlbXBvcmFyeSB0byBhdm9pZCBkZWFsaW5nIHdpdGhcbiAgICAvLyB1cGRhdGluZyB0aGUgdHJlZSB3aGlsZSB2YWxpZGF0aW5nIHRoZSB1cGRhdGUgYWxnb3JpdGhtLlxuICAgIF9pbnRlcm5hbFNldFJvdXRlc1xuICB9O1xuICByZXR1cm4gcm91dGVyO1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5jb25zdCBVTlNBRkVfREVGRVJSRURfU1lNQk9MID0gU3ltYm9sKFwiZGVmZXJyZWRcIik7XG5mdW5jdGlvbiBjcmVhdGVTdGF0aWNIYW5kbGVyKHJvdXRlcywgb3B0cykge1xuICBpbnZhcmlhbnQocm91dGVzLmxlbmd0aCA+IDAsIFwiWW91IG11c3QgcHJvdmlkZSBhIG5vbi1lbXB0eSByb3V0ZXMgYXJyYXkgdG8gY3JlYXRlU3RhdGljSGFuZGxlclwiKTtcbiAgbGV0IG1hbmlmZXN0ID0ge307XG4gIGxldCBiYXNlbmFtZSA9IChvcHRzID8gb3B0cy5iYXNlbmFtZSA6IG51bGwpIHx8IFwiL1wiO1xuICBsZXQgbWFwUm91dGVQcm9wZXJ0aWVzO1xuICBpZiAob3B0cyAhPSBudWxsICYmIG9wdHMubWFwUm91dGVQcm9wZXJ0aWVzKSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gb3B0cy5tYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAob3B0cyAhPSBudWxsICYmIG9wdHMuZGV0ZWN0RXJyb3JCb3VuZGFyeSkge1xuICAgIC8vIElmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIHRoZSBkZXByZWNhdGVkIHZlcnNpb24sIHdyYXAgaXQgd2l0aCB0aGUgbmV3IEFQSVxuICAgIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gb3B0cy5kZXRlY3RFcnJvckJvdW5kYXJ5O1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IHJvdXRlID0+ICh7XG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBkZXRlY3RFcnJvckJvdW5kYXJ5KHJvdXRlKVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH1cbiAgLy8gQ29uZmlnIGRyaXZlbiBiZWhhdmlvciBmbGFnc1xuICBsZXQgZnV0dXJlID0gX2V4dGVuZHMoe1xuICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBmYWxzZSxcbiAgICB2N190aHJvd0Fib3J0UmVhc29uOiBmYWxzZVxuICB9LCBvcHRzID8gb3B0cy5mdXR1cmUgOiBudWxsKTtcbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5KHJlcXVlc3QsIF90ZW1wMykge1xuICAgIGxldCB7XG4gICAgICByZXF1ZXN0Q29udGV4dFxuICAgIH0gPSBfdGVtcDMgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAzO1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbWV0aG9kID0gcmVxdWVzdC5tZXRob2Q7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuICAgIC8vIFNTUiBzdXBwb3J0cyBIRUFEIHJlcXVlc3RzIHdoaWxlIFNQQSBkb2Vzbid0XG4gICAgaWYgKCFpc1ZhbGlkTWV0aG9kKG1ldGhvZCkgJiYgbWV0aG9kICE9PSBcIkhFQURcIikge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1c0NvZGU6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0KTtcbiAgICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyBXaGVuIHJldHVybmluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCwgd2UgcGF0Y2ggYmFjayBpbiB0aGUgbG9jYXRpb24gaGVyZVxuICAgIC8vIHNpbmNlIHdlIG5lZWQgaXQgZm9yIFJlYWN0IENvbnRleHQuICBCdXQgdGhpcyBoZWxwcyBrZWVwIG91ciBzdWJtaXQgYW5kXG4gICAgLy8gbG9hZFJvdXRlRGF0YSBvcGVyYXRpbmcgb24gYSBSZXF1ZXN0IGluc3RlYWQgb2YgYSBMb2NhdGlvblxuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBsb2NhdGlvbixcbiAgICAgIGJhc2VuYW1lXG4gICAgfSwgcmVzdWx0KTtcbiAgfVxuICAvKipcbiAgICogVGhlIHF1ZXJ5Um91dGUoKSBtZXRob2QgaXMgaW50ZW5kZWQgZm9yIHRhcmdldGVkIHJvdXRlIHJlcXVlc3RzLCBlaXRoZXJcbiAgICogZm9yIGZldGNoID9fZGF0YSByZXF1ZXN0cyBvciByZXNvdXJjZSByb3V0ZSByZXF1ZXN0cy4gIEluIHRoaXMgY2FzZSwgd2VcbiAgICogYXJlIG9ubHkgZXZlciBjYWxsaW5nIGEgc2luZ2xlIGFjdGlvbiBvciBsb2FkZXIsIGFuZCB3ZSBhcmUgcmV0dXJuaW5nIHRoZVxuICAgKiByZXR1cm5lZCB2YWx1ZSBkaXJlY3RseS4gIEluIG1vc3QgY2FzZXMsIHRoaXMgd2lsbCBiZSBhIFJlc3BvbnNlIHJldHVybmVkXG4gICAqIGZyb20gdGhlIGFjdGlvbi9sb2FkZXIsIGJ1dCBpdCBtYXkgYmUgYSBwcmltaXRpdmUgb3Igb3RoZXIgdmFsdWUgYXMgd2VsbCAtXG4gICAqIGFuZCBpbiBzdWNoIGNhc2VzIHRoZSBjYWxsaW5nIGNvbnRleHQgc2hvdWxkIGhhbmRsZSB0aGF0IGFjY29yZGluZ2x5LlxuICAgKlxuICAgKiBXZSBkbyByZXNwZWN0IHRoZSB0aHJvdy9yZXR1cm4gZGlmZmVyZW50aWF0aW9uLCBzbyBpZiBhbiBhY3Rpb24vbG9hZGVyXG4gICAqIHRocm93cywgdGhlbiB0aGlzIG1ldGhvZCB3aWxsIHRocm93IHRoZSB2YWx1ZS4gIFRoaXMgaXMgaW1wb3J0YW50IHNvIHdlXG4gICAqIGNhbiBkbyBwcm9wZXIgYm91bmRhcnkgaWRlbnRpZmljYXRpb24gaW4gUmVtaXggd2hlcmUgYSB0aHJvd24gUmVzcG9uc2VcbiAgICogbXVzdCBnbyB0byB0aGUgQ2F0Y2ggQm91bmRhcnkgYnV0IGEgcmV0dXJuZWQgUmVzcG9uc2UgaXMgaGFwcHktcGF0aC5cbiAgICpcbiAgICogT25lIHRoaW5nIHRvIG5vdGUgaXMgdGhhdCBhbnkgUm91dGVyLWluaXRpYXRlZCBFcnJvcnMgdGhhdCBtYWtlIHNlbnNlXG4gICAqIHRvIGFzc29jaWF0ZSB3aXRoIGEgc3RhdHVzIGNvZGUgd2lsbCBiZSB0aHJvd24gYXMgYW4gRXJyb3JSZXNwb25zZVxuICAgKiBpbnN0YW5jZSB3aGljaCBpbmNsdWRlIHRoZSByYXcgRXJyb3IsIHN1Y2ggdGhhdCB0aGUgY2FsbGluZyBjb250ZXh0IGNhblxuICAgKiBzZXJpYWxpemUgdGhlIGVycm9yIGFzIHRoZXkgc2VlIGZpdCB3aGlsZSBpbmNsdWRpbmcgdGhlIHByb3BlciByZXNwb25zZVxuICAgKiBjb2RlLiAgRXhhbXBsZXMgaGVyZSBhcmUgNDA0IGFuZCA0MDUgZXJyb3JzIHRoYXQgb2NjdXIgcHJpb3IgdG8gcmVhY2hpbmdcbiAgICogYW55IHVzZXItZGVmaW5lZCBsb2FkZXJzLlxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlSb3V0ZShyZXF1ZXN0LCBfdGVtcDQpIHtcbiAgICBsZXQge1xuICAgICAgcm91dGVJZCxcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSA9IF90ZW1wNCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDQ7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiICYmIG1ldGhvZCAhPT0gXCJPUFRJT05TXCIpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2hlcykge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IG1hdGNoID0gcm91dGVJZCA/IG1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpIDogZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuICAgIGlmIChyb3V0ZUlkICYmICFtYXRjaCkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDMsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaCkge1xuICAgICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGl0IEkgZG9uJ3QgdGhpbms/XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgbWF0Y2gpO1xuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGxldCBlcnJvciA9IHJlc3VsdC5lcnJvcnMgPyBPYmplY3QudmFsdWVzKHJlc3VsdC5lcnJvcnMpWzBdIDogdW5kZWZpbmVkO1xuICAgIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBJZiB3ZSBnb3QgYmFjayByZXN1bHQuZXJyb3JzLCB0aGF0IG1lYW5zIHRoZSBsb2FkZXIvYWN0aW9uIHRocmV3XG4gICAgICAvLyBfc29tZXRoaW5nXyB0aGF0IHdhc24ndCBhIFJlc3BvbnNlLCBidXQgaXQncyBub3QgZ3VhcmFudGVlZC9yZXF1aXJlZFxuICAgICAgLy8gdG8gYmUgYW4gYGluc3RhbmNlb2YgRXJyb3JgIGVpdGhlciwgc28gd2UgaGF2ZSB0byB1c2UgdGhyb3cgaGVyZSB0b1xuICAgICAgLy8gcHJlc2VydmUgdGhlIFwiZXJyb3JcIiBzdGF0ZSBvdXRzaWRlIG9mIHF1ZXJ5SW1wbC5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICAvLyBQaWNrIG9mZiB0aGUgcmlnaHQgc3RhdGUgdmFsdWUgdG8gcmV0dXJuXG4gICAgaWYgKHJlc3VsdC5hY3Rpb25EYXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXN1bHQuYWN0aW9uRGF0YSlbMF07XG4gICAgfVxuICAgIGlmIChyZXN1bHQubG9hZGVyRGF0YSkge1xuICAgICAgdmFyIF9yZXN1bHQkYWN0aXZlRGVmZXJyZTtcbiAgICAgIGxldCBkYXRhID0gT2JqZWN0LnZhbHVlcyhyZXN1bHQubG9hZGVyRGF0YSlbMF07XG4gICAgICBpZiAoKF9yZXN1bHQkYWN0aXZlRGVmZXJyZSA9IHJlc3VsdC5hY3RpdmVEZWZlcnJlZHMpICE9IG51bGwgJiYgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlW21hdGNoLnJvdXRlLmlkXSkge1xuICAgICAgICBkYXRhW1VOU0FGRV9ERUZFUlJFRF9TWU1CT0xdID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkc1ttYXRjaC5yb3V0ZS5pZF07XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoKSB7XG4gICAgaW52YXJpYW50KHJlcXVlc3Quc2lnbmFsLCBcInF1ZXJ5KCkvcXVlcnlSb3V0ZSgpIHJlcXVlc3RzIG11c3QgY29udGFpbiBhbiBBYm9ydENvbnRyb2xsZXIgc2lnbmFsXCIpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNNdXRhdGlvbk1ldGhvZChyZXF1ZXN0Lm1ldGhvZC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIHJvdXRlTWF0Y2ggfHwgZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pLCByZXF1ZXN0Q29udGV4dCwgcm91dGVNYXRjaCAhPSBudWxsKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoKTtcbiAgICAgIHJldHVybiBpc1Jlc3BvbnNlKHJlc3VsdCkgPyByZXN1bHQgOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LCB7XG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB0aHJldy9yZXR1cm5lZCBhIFJlc3BvbnNlIGluIGNhbGxMb2FkZXJPckFjdGlvbiwgd2UgdGhyb3dcbiAgICAgIC8vIGl0IHRvIGJhaWwgb3V0IGFuZCB0aGVuIHJldHVybiBvciB0aHJvdyBoZXJlIGJhc2VkIG9uIHdoZXRoZXIgdGhlIHVzZXJcbiAgICAgIC8vIHJldHVybmVkIG9yIHRocmV3XG4gICAgICBpZiAoaXNRdWVyeVJvdXRlUmVzcG9uc2UoZSkpIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgICAgICAgIHRocm93IGUucmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUucmVzcG9uc2U7XG4gICAgICB9XG4gICAgICAvLyBSZWRpcmVjdHMgYXJlIGFsd2F5cyByZXR1cm5lZCBzaW5jZSB0aGV5IGRvbid0IHByb3BhZ2F0ZSB0byBjYXRjaFxuICAgICAgLy8gYm91bmRhcmllc1xuICAgICAgaWYgKGlzUmVkaXJlY3RSZXNwb25zZShlKSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH1cbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHN1Ym1pdChyZXF1ZXN0LCBtYXRjaGVzLCBhY3Rpb25NYXRjaCwgcmVxdWVzdENvbnRleHQsIGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAoIWFjdGlvbk1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhYWN0aW9uTWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkOiBhY3Rpb25NYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgsIHtcbiAgICAgICAgaXNTdGF0aWNSZXF1ZXN0OiB0cnVlLFxuICAgICAgICBpc1JvdXRlUmVxdWVzdCxcbiAgICAgICAgcmVxdWVzdENvbnRleHRcbiAgICAgIH0pO1xuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgdGhyb3dTdGF0aWNIYW5kbGVyQWJvcnRlZEVycm9yKHJlcXVlc3QsIGlzUm91dGVSZXF1ZXN0LCBmdXR1cmUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBVaGhoaCAtIHRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiwgd2Ugc2hvdWxkIGFsd2F5cyB0aHJvdyB0aGVzZSBmcm9tXG4gICAgICAvLyBjYWxsTG9hZGVyT3JBY3Rpb24sIGJ1dCB0aGUgdHlwZSBuYXJyb3dpbmcgaGVyZSBrZWVwcyBUUyBoYXBweSBhbmQgd2VcbiAgICAgIC8vIGNhbiBnZXQgYmFjayBvbiB0aGUgXCJ0aHJvdyBhbGwgcmVkaXJlY3QgcmVzcG9uc2VzXCIgdHJhaW4gaGVyZSBzaG91bGRcbiAgICAgIC8vIHRoaXMgZXZlciBoYXBwZW4gOi9cbiAgICAgIHRocm93IG5ldyBSZXNwb25zZShudWxsLCB7XG4gICAgICAgIHN0YXR1czogcmVzdWx0LnN0YXR1cyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiByZXN1bHQubG9jYXRpb25cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIHR5cGU6IFwiZGVmZXItYWN0aW9uXCJcbiAgICAgIH0pO1xuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvclxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAvLyBOb3RlOiBUaGlzIHNob3VsZCBvbmx5IGJlIG5vbi1SZXNwb25zZSB2YWx1ZXMgaWYgd2UgZ2V0IGhlcmUsIHNpbmNlXG4gICAgICAvLyBpc1JvdXRlUmVxdWVzdCBzaG91bGQgdGhyb3cgYW55IFJlc3BvbnNlIHJlY2VpdmVkIGluIGNhbGxMb2FkZXJPckFjdGlvblxuICAgICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzOiBbYWN0aW9uTWF0Y2hdLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YToge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yczogbnVsbCxcbiAgICAgICAgLy8gTm90ZTogc3RhdHVzQ29kZSArIGhlYWRlcnMgYXJlIHVudXNlZCBoZXJlIHNpbmNlIHF1ZXJ5Um91dGUgd2lsbFxuICAgICAgICAvLyByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBvciB2YWx1ZVxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTdG9yZSBvZmYgdGhlIHBlbmRpbmcgZXJyb3IgLSB3ZSB1c2UgaXQgdG8gZGV0ZXJtaW5lIHdoaWNoIGxvYWRlcnNcbiAgICAgIC8vIHRvIGNhbGwgYW5kIHdpbGwgY29tbWl0IGl0IHdoZW4gd2UgY29tcGxldGUgdGhlIG5hdmlnYXRpb25cbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBhY3Rpb25NYXRjaC5yb3V0ZS5pZCk7XG4gICAgICBsZXQgY29udGV4dCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHVuZGVmaW5lZCwge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgfSk7XG4gICAgICAvLyBhY3Rpb24gc3RhdHVzIGNvZGVzIHRha2UgcHJlY2VkZW5jZSBvdmVyIGxvYWRlciBzdGF0dXMgY29kZXNcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IDUwMCxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzXG4gICAgICAgIH0gOiB7fSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgYSBHRVQgcmVxdWVzdCBmb3IgdGhlIGxvYWRlcnNcbiAgICBsZXQgbG9hZGVyUmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHJlcXVlc3QudXJsLCB7XG4gICAgICBoZWFkZXJzOiByZXF1ZXN0LmhlYWRlcnMsXG4gICAgICByZWRpcmVjdDogcmVxdWVzdC5yZWRpcmVjdCxcbiAgICAgIHNpZ25hbDogcmVxdWVzdC5zaWduYWxcbiAgICB9KTtcbiAgICBsZXQgY29udGV4dCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEobG9hZGVyUmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQpO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwgcmVzdWx0LnN0YXR1c0NvZGUgPyB7XG4gICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzQ29kZVxuICAgIH0gOiB7fSwge1xuICAgICAgYWN0aW9uRGF0YToge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgfSxcbiAgICAgIGFjdGlvbkhlYWRlcnM6IF9leHRlbmRzKHt9LCByZXN1bHQuaGVhZGVycyA/IHtcbiAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmhlYWRlcnNcbiAgICAgIH0gOiB7fSlcbiAgICB9KTtcbiAgfVxuICBhc3luYyBmdW5jdGlvbiBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoLCBwZW5kaW5nQWN0aW9uRXJyb3IpIHtcbiAgICBsZXQgaXNSb3V0ZVJlcXVlc3QgPSByb3V0ZU1hdGNoICE9IG51bGw7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuIChxdWVyeVJvdXRlKCkpXG4gICAgaWYgKGlzUm91dGVSZXF1ZXN0ICYmICEocm91dGVNYXRjaCAhPSBudWxsICYmIHJvdXRlTWF0Y2gucm91dGUubG9hZGVyKSAmJiAhKHJvdXRlTWF0Y2ggIT0gbnVsbCAmJiByb3V0ZU1hdGNoLnJvdXRlLmxhenkpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQ6IHJvdXRlTWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IHJvdXRlTWF0Y2gucm91dGUuaWRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcmVxdWVzdE1hdGNoZXMgPSByb3V0ZU1hdGNoID8gW3JvdXRlTWF0Y2hdIDogZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgT2JqZWN0LmtleXMocGVuZGluZ0FjdGlvbkVycm9yIHx8IHt9KVswXSk7XG4gICAgbGV0IG1hdGNoZXNUb0xvYWQgPSByZXF1ZXN0TWF0Y2hlcy5maWx0ZXIobSA9PiBtLnJvdXRlLmxvYWRlciB8fCBtLnJvdXRlLmxhenkpO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1biAocXVlcnkoKSlcbiAgICBpZiAobWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIC8vIEFkZCBhIG51bGwgZm9yIGFsbCBtYXRjaGVkIHJvdXRlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgICAgIGxvYWRlckRhdGE6IG1hdGNoZXMucmVkdWNlKChhY2MsIG0pID0+IE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgICAgW20ucm91dGUuaWRdOiBudWxsXG4gICAgICAgIH0pLCB7fSksXG4gICAgICAgIGVycm9yczogcGVuZGluZ0FjdGlvbkVycm9yIHx8IG51bGwsXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChbLi4ubWF0Y2hlc1RvTG9hZC5tYXAobWF0Y2ggPT4gY2FsbExvYWRlck9yQWN0aW9uKFwibG9hZGVyXCIsIHJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoLCB7XG4gICAgICBpc1N0YXRpY1JlcXVlc3Q6IHRydWUsXG4gICAgICBpc1JvdXRlUmVxdWVzdCxcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSkpXSk7XG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHRocm93U3RhdGljSGFuZGxlckFib3J0ZWRFcnJvcihyZXF1ZXN0LCBpc1JvdXRlUmVxdWVzdCwgZnV0dXJlKTtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcbiAgICBsZXQgYWN0aXZlRGVmZXJyZWRzID0gbmV3IE1hcCgpO1xuICAgIGxldCBjb250ZXh0ID0gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nQWN0aW9uRXJyb3IsIGFjdGl2ZURlZmVycmVkcyk7XG4gICAgLy8gQWRkIGEgbnVsbCBmb3IgYW55IG5vbi1sb2FkZXIgbWF0Y2hlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgbGV0IGV4ZWN1dGVkTG9hZGVycyA9IG5ldyBTZXQobWF0Y2hlc1RvTG9hZC5tYXAobWF0Y2ggPT4gbWF0Y2gucm91dGUuaWQpKTtcbiAgICBtYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xuICAgICAgaWYgKCFleGVjdXRlZExvYWRlcnMuaGFzKG1hdGNoLnJvdXRlLmlkKSkge1xuICAgICAgICBjb250ZXh0LmxvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgIG1hdGNoZXMsXG4gICAgICBhY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcy5zaXplID4gMCA/IE9iamVjdC5mcm9tRW50cmllcyhhY3RpdmVEZWZlcnJlZHMuZW50cmllcygpKSA6IG51bGxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZVxuICB9O1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhlbHBlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIEdpdmVuIGFuIGV4aXN0aW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0IGFuZCBhbiBlcnJvciB0aHJvd24gYXQgcmVuZGVyIHRpbWUsXG4gKiBwcm92aWRlIGFuIHVwZGF0ZWQgU3RhdGljSGFuZGxlckNvbnRleHQgc3VpdGFibGUgZm9yIGEgc2Vjb25kIFNTUiByZW5kZXJcbiAqL1xuZnVuY3Rpb24gZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvcihyb3V0ZXMsIGNvbnRleHQsIGVycm9yKSB7XG4gIGxldCBuZXdDb250ZXh0ID0gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcikgPyBlcnJvci5zdGF0dXMgOiA1MDAsXG4gICAgZXJyb3JzOiB7XG4gICAgICBbY29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB8fCByb3V0ZXNbMF0uaWRdOiBlcnJvclxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXdDb250ZXh0O1xufVxuZnVuY3Rpb24gdGhyb3dTdGF0aWNIYW5kbGVyQWJvcnRlZEVycm9yKHJlcXVlc3QsIGlzUm91dGVSZXF1ZXN0LCBmdXR1cmUpIHtcbiAgaWYgKGZ1dHVyZS52N190aHJvd0Fib3J0UmVhc29uICYmIHJlcXVlc3Quc2lnbmFsLnJlYXNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgcmVxdWVzdC5zaWduYWwucmVhc29uO1xuICB9XG4gIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgXCIoKSBjYWxsIGFib3J0ZWQ6IFwiICsgcmVxdWVzdC5tZXRob2QgKyBcIiBcIiArIHJlcXVlc3QudXJsKTtcbn1cbmZ1bmN0aW9uIGlzU3VibWlzc2lvbk5hdmlnYXRpb24ob3B0cykge1xuICByZXR1cm4gb3B0cyAhPSBudWxsICYmIChcImZvcm1EYXRhXCIgaW4gb3B0cyAmJiBvcHRzLmZvcm1EYXRhICE9IG51bGwgfHwgXCJib2R5XCIgaW4gb3B0cyAmJiBvcHRzLmJvZHkgIT09IHVuZGVmaW5lZCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVUbyhsb2NhdGlvbiwgbWF0Y2hlcywgYmFzZW5hbWUsIHByZXBlbmRCYXNlbmFtZSwgdG8sIHY3X3JlbGF0aXZlU3BsYXRQYXRoLCBmcm9tUm91dGVJZCwgcmVsYXRpdmUpIHtcbiAgbGV0IGNvbnRleHR1YWxNYXRjaGVzO1xuICBsZXQgYWN0aXZlUm91dGVNYXRjaDtcbiAgaWYgKGZyb21Sb3V0ZUlkKSB7XG4gICAgLy8gR3JhYiBtYXRjaGVzIHVwIHRvIHRoZSBjYWxsaW5nIHJvdXRlIHNvIG91ciByb3V0ZS1yZWxhdGl2ZSBsb2dpYyBpc1xuICAgIC8vIHJlbGF0aXZlIHRvIHRoZSBjb3JyZWN0IHNvdXJjZSByb3V0ZVxuICAgIGNvbnRleHR1YWxNYXRjaGVzID0gW107XG4gICAgZm9yIChsZXQgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgICAgY29udGV4dHVhbE1hdGNoZXMucHVzaChtYXRjaCk7XG4gICAgICBpZiAobWF0Y2gucm91dGUuaWQgPT09IGZyb21Sb3V0ZUlkKSB7XG4gICAgICAgIGFjdGl2ZVJvdXRlTWF0Y2ggPSBtYXRjaDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnRleHR1YWxNYXRjaGVzID0gbWF0Y2hlcztcbiAgICBhY3RpdmVSb3V0ZU1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICB9XG4gIC8vIFJlc29sdmUgdGhlIHJlbGF0aXZlIHBhdGhcbiAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8gPyB0byA6IFwiLlwiLCBnZXRSZXNvbHZlVG9NYXRjaGVzKGNvbnRleHR1YWxNYXRjaGVzLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCksIHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBsb2NhdGlvbi5wYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKTtcbiAgLy8gV2hlbiBgdG9gIGlzIG5vdCBzcGVjaWZpZWQgd2UgaW5oZXJpdCBzZWFyY2gvaGFzaCBmcm9tIHRoZSBjdXJyZW50XG4gIC8vIGxvY2F0aW9uLCB1bmxpa2Ugd2hlbiB0bz1cIi5cIiBhbmQgd2UganVzdCBpbmhlcml0IHRoZSBwYXRoLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZW1peC9pc3N1ZXMvOTI3XG4gIGlmICh0byA9PSBudWxsKSB7XG4gICAgcGF0aC5zZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG4gICAgcGF0aC5oYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgfVxuICAvLyBBZGQgYW4gP2luZGV4IHBhcmFtIGZvciBtYXRjaGVkIGluZGV4IHJvdXRlcyBpZiB3ZSBkb24ndCBhbHJlYWR5IGhhdmUgb25lXG4gIGlmICgodG8gPT0gbnVsbCB8fCB0byA9PT0gXCJcIiB8fCB0byA9PT0gXCIuXCIpICYmIGFjdGl2ZVJvdXRlTWF0Y2ggJiYgYWN0aXZlUm91dGVNYXRjaC5yb3V0ZS5pbmRleCAmJiAhaGFzTmFrZWRJbmRleFF1ZXJ5KHBhdGguc2VhcmNoKSkge1xuICAgIHBhdGguc2VhcmNoID0gcGF0aC5zZWFyY2ggPyBwYXRoLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgXCI/aW5kZXgmXCIpIDogXCI/aW5kZXhcIjtcbiAgfVxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lLiAgSWZcbiAgLy8gdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZSB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93c1xuICAvLyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaFxuICAvLyBvbiByb290IGFjdGlvbnNcbiAgaWYgKHByZXBlbmRCYXNlbmFtZSAmJiBiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlUGF0aChwYXRoKTtcbn1cbi8vIE5vcm1hbGl6ZSBuYXZpZ2F0aW9uIG9wdGlvbnMgYnkgY29udmVydGluZyBmb3JtTWV0aG9kPUdFVCBmb3JtRGF0YSBvYmplY3RzIHRvXG4vLyBVUkxTZWFyY2hQYXJhbXMgc28gdGhleSBiZWhhdmUgaWRlbnRpY2FsbHkgdG8gbGlua3Mgd2l0aCBxdWVyeSBwYXJhbXNcbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhub3JtYWxpemVGb3JtTWV0aG9kLCBpc0ZldGNoZXIsIHBhdGgsIG9wdHMpIHtcbiAgLy8gUmV0dXJuIGxvY2F0aW9uIHZlcmJhdGltIG9uIG5vbi1zdWJtaXNzaW9uIG5hdmlnYXRpb25zXG4gIGlmICghb3B0cyB8fCAhaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoXG4gICAgfTtcbiAgfVxuICBpZiAob3B0cy5mb3JtTWV0aG9kICYmICFpc1ZhbGlkTWV0aG9kKG9wdHMuZm9ybU1ldGhvZCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aCxcbiAgICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IG9wdHMuZm9ybU1ldGhvZFxuICAgICAgfSlcbiAgICB9O1xuICB9XG4gIGxldCBnZXRJbnZhbGlkQm9keUVycm9yID0gKCkgPT4gKHtcbiAgICBwYXRoLFxuICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgdHlwZTogXCJpbnZhbGlkLWJvZHlcIlxuICAgIH0pXG4gIH0pO1xuICAvLyBDcmVhdGUgYSBTdWJtaXNzaW9uIG9uIG5vbi1HRVQgbmF2aWdhdGlvbnNcbiAgbGV0IHJhd0Zvcm1NZXRob2QgPSBvcHRzLmZvcm1NZXRob2QgfHwgXCJnZXRcIjtcbiAgbGV0IGZvcm1NZXRob2QgPSBub3JtYWxpemVGb3JtTWV0aG9kID8gcmF3Rm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpIDogcmF3Rm9ybU1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICBsZXQgZm9ybUFjdGlvbiA9IHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpO1xuICBpZiAob3B0cy5ib2R5ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAob3B0cy5mb3JtRW5jVHlwZSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICAgIC8vIHRleHQgb25seSBzdXBwb3J0IFBPU1QvUFVUL1BBVENIL0RFTEVURSBzdWJtaXNzaW9uc1xuICAgICAgaWYgKCFpc011dGF0aW9uTWV0aG9kKGZvcm1NZXRob2QpKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgICB9XG4gICAgICBsZXQgdGV4dCA9IHR5cGVvZiBvcHRzLmJvZHkgPT09IFwic3RyaW5nXCIgPyBvcHRzLmJvZHkgOiBvcHRzLmJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YSB8fCBvcHRzLmJvZHkgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMgP1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjcGxhaW4tdGV4dC1mb3JtLWRhdGFcbiAgICAgIEFycmF5LmZyb20ob3B0cy5ib2R5LmVudHJpZXMoKSkucmVkdWNlKChhY2MsIF9yZWYzKSA9PiB7XG4gICAgICAgIGxldCBbbmFtZSwgdmFsdWVdID0gX3JlZjM7XG4gICAgICAgIHJldHVybiBcIlwiICsgYWNjICsgbmFtZSArIFwiPVwiICsgdmFsdWUgKyBcIlxcblwiO1xuICAgICAgfSwgXCJcIikgOiBTdHJpbmcob3B0cy5ib2R5KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGgsXG4gICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICBmb3JtTWV0aG9kLFxuICAgICAgICAgIGZvcm1BY3Rpb24sXG4gICAgICAgICAgZm9ybUVuY1R5cGU6IG9wdHMuZm9ybUVuY1R5cGUsXG4gICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICAgICAgdGV4dFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAob3B0cy5mb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcbiAgICAgIC8vIGpzb24gb25seSBzdXBwb3J0cyBQT1NUL1BVVC9QQVRDSC9ERUxFVEUgc3VibWlzc2lvbnNcbiAgICAgIGlmICghaXNNdXRhdGlvbk1ldGhvZChmb3JtTWV0aG9kKSkge1xuICAgICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGpzb24gPSB0eXBlb2Ygb3B0cy5ib2R5ID09PSBcInN0cmluZ1wiID8gSlNPTi5wYXJzZShvcHRzLmJvZHkpIDogb3B0cy5ib2R5O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgc3VibWlzc2lvbjoge1xuICAgICAgICAgICAgZm9ybU1ldGhvZCxcbiAgICAgICAgICAgIGZvcm1BY3Rpb24sXG4gICAgICAgICAgICBmb3JtRW5jVHlwZTogb3B0cy5mb3JtRW5jVHlwZSxcbiAgICAgICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBqc29uLFxuICAgICAgICAgICAgdGV4dDogdW5kZWZpbmVkXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpbnZhcmlhbnQodHlwZW9mIEZvcm1EYXRhID09PSBcImZ1bmN0aW9uXCIsIFwiRm9ybURhdGEgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50XCIpO1xuICBsZXQgc2VhcmNoUGFyYW1zO1xuICBsZXQgZm9ybURhdGE7XG4gIGlmIChvcHRzLmZvcm1EYXRhKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMob3B0cy5mb3JtRGF0YSk7XG4gICAgZm9ybURhdGEgPSBvcHRzLmZvcm1EYXRhO1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMob3B0cy5ib2R5KTtcbiAgICBmb3JtRGF0YSA9IG9wdHMuYm9keTtcbiAgfSBlbHNlIGlmIChvcHRzLmJvZHkgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBvcHRzLmJvZHk7XG4gICAgZm9ybURhdGEgPSBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpO1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSA9PSBudWxsKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMob3B0cy5ib2R5KTtcbiAgICAgIGZvcm1EYXRhID0gY29udmVydFNlYXJjaFBhcmFtc1RvRm9ybURhdGEoc2VhcmNoUGFyYW1zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgIH1cbiAgfVxuICBsZXQgc3VibWlzc2lvbiA9IHtcbiAgICBmb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGU6IG9wdHMgJiYgb3B0cy5mb3JtRW5jVHlwZSB8fCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuICAgIGZvcm1EYXRhLFxuICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICB0ZXh0OiB1bmRlZmluZWRcbiAgfTtcbiAgaWYgKGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvblxuICAgIH07XG4gIH1cbiAgLy8gRmxhdHRlbiBzdWJtaXNzaW9uIG9udG8gVVJMU2VhcmNoUGFyYW1zIGZvciBHRVQgc3VibWlzc2lvbnNcbiAgbGV0IHBhcnNlZFBhdGggPSBwYXJzZVBhdGgocGF0aCk7XG4gIC8vIE9uIEdFVCBuYXZpZ2F0aW9uIHN1Ym1pc3Npb25zIHdlIGNhbiBkcm9wIHRoZSA/aW5kZXggcGFyYW0gZnJvbSB0aGVcbiAgLy8gcmVzdWx0aW5nIGxvY2F0aW9uIHNpbmNlIGFsbCBsb2FkZXJzIHdpbGwgcnVuLiAgQnV0IGZldGNoZXIgR0VUIHN1Ym1pc3Npb25zXG4gIC8vIG9ubHkgcnVuIGEgc2luZ2xlIGxvYWRlciBzbyB3ZSBuZWVkIHRvIHByZXNlcnZlIGFueSBpbmNvbWluZyA/aW5kZXggcGFyYW1zXG4gIGlmIChpc0ZldGNoZXIgJiYgcGFyc2VkUGF0aC5zZWFyY2ggJiYgaGFzTmFrZWRJbmRleFF1ZXJ5KHBhcnNlZFBhdGguc2VhcmNoKSkge1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoXCJpbmRleFwiLCBcIlwiKTtcbiAgfVxuICBwYXJzZWRQYXRoLnNlYXJjaCA9IFwiP1wiICsgc2VhcmNoUGFyYW1zO1xuICByZXR1cm4ge1xuICAgIHBhdGg6IGNyZWF0ZVBhdGgocGFyc2VkUGF0aCksXG4gICAgc3VibWlzc2lvblxuICB9O1xufVxuLy8gRmlsdGVyIG91dCBhbGwgcm91dGVzIGJlbG93IGFueSBjYXVnaHQgZXJyb3IgYXMgdGhleSBhcmVuJ3QgZ29pbmcgdG9cbi8vIHJlbmRlciBzbyB3ZSBkb24ndCBuZWVkIHRvIGxvYWQgdGhlbVxuZnVuY3Rpb24gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgYm91bmRhcnlJZCkge1xuICBsZXQgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcztcbiAgaWYgKGJvdW5kYXJ5SWQpIHtcbiAgICBsZXQgaW5kZXggPSBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgPT09IGJvdW5kYXJ5SWQpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBib3VuZGFyeU1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKDAsIGluZGV4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJvdW5kYXJ5TWF0Y2hlcztcbn1cbmZ1bmN0aW9uIGdldE1hdGNoZXNUb0xvYWQoaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIGxvY2F0aW9uLCBpc0luaXRpYWxMb2FkLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBkZWxldGVkRmV0Y2hlcnMsIGZldGNoTG9hZE1hdGNoZXMsIGZldGNoUmVkaXJlY3RJZHMsIHJvdXRlc1RvVXNlLCBiYXNlbmFtZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcikge1xuICBsZXQgYWN0aW9uUmVzdWx0ID0gcGVuZGluZ0Vycm9yID8gT2JqZWN0LnZhbHVlcyhwZW5kaW5nRXJyb3IpWzBdIDogcGVuZGluZ0FjdGlvbkRhdGEgPyBPYmplY3QudmFsdWVzKHBlbmRpbmdBY3Rpb25EYXRhKVswXSA6IHVuZGVmaW5lZDtcbiAgbGV0IGN1cnJlbnRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChzdGF0ZS5sb2NhdGlvbik7XG4gIGxldCBuZXh0VXJsID0gaGlzdG9yeS5jcmVhdGVVUkwobG9jYXRpb24pO1xuICAvLyBQaWNrIG5hdmlnYXRpb24gbWF0Y2hlcyB0aGF0IGFyZSBuZXQtbmV3IG9yIHF1YWxpZnkgZm9yIHJldmFsaWRhdGlvblxuICBsZXQgYm91bmRhcnlJZCA9IHBlbmRpbmdFcnJvciA/IE9iamVjdC5rZXlzKHBlbmRpbmdFcnJvcilbMF0gOiB1bmRlZmluZWQ7XG4gIGxldCBib3VuZGFyeU1hdGNoZXMgPSBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBib3VuZGFyeUlkKTtcbiAgbGV0IG5hdmlnYXRpb25NYXRjaGVzID0gYm91bmRhcnlNYXRjaGVzLmZpbHRlcigobWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIHJvdXRlXG4gICAgfSA9IG1hdGNoO1xuICAgIGlmIChyb3V0ZS5sYXp5KSB7XG4gICAgICAvLyBXZSBoYXZlbid0IGxvYWRlZCB0aGlzIHJvdXRlIHlldCBzbyB3ZSBkb24ndCBrbm93IGlmIGl0J3MgZ290IGEgbG9hZGVyIVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChyb3V0ZS5sb2FkZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaXNJbml0aWFsTG9hZCkge1xuICAgICAgaWYgKHJvdXRlLmxvYWRlci5oeWRyYXRlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGUuaWRdID09PSB1bmRlZmluZWQgJiYgKFxuICAgICAgLy8gRG9uJ3QgcmUtcnVuIGlmIHRoZSBsb2FkZXIgcmFuIGFuZCB0aHJldyBhbiBlcnJvclxuICAgICAgIXN0YXRlLmVycm9ycyB8fCBzdGF0ZS5lcnJvcnNbcm91dGUuaWRdID09PSB1bmRlZmluZWQpO1xuICAgIH1cbiAgICAvLyBBbHdheXMgY2FsbCB0aGUgbG9hZGVyIG9uIG5ldyByb3V0ZSBpbnN0YW5jZXMgYW5kIHBlbmRpbmcgZGVmZXIgY2FuY2VsbGF0aW9uc1xuICAgIGlmIChpc05ld0xvYWRlcihzdGF0ZS5sb2FkZXJEYXRhLCBzdGF0ZS5tYXRjaGVzW2luZGV4XSwgbWF0Y2gpIHx8IGNhbmNlbGxlZERlZmVycmVkUm91dGVzLnNvbWUoaWQgPT4gaWQgPT09IG1hdGNoLnJvdXRlLmlkKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIFRoaXMgaXMgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZm9yIHdoZW4gd2UgcmV2YWxpZGF0ZS4gIElmIHRoZSByb3V0ZVxuICAgIC8vIHByb3ZpZGVzIGl0J3Mgb3duIGltcGxlbWVudGF0aW9uLCB0aGVuIHdlIGdpdmUgdGhlbSBmdWxsIGNvbnRyb2wgYnV0XG4gICAgLy8gcHJvdmlkZSB0aGlzIHZhbHVlIHNvIHRoZXkgY2FuIGxldmVyYWdlIGl0IGlmIG5lZWRlZCBhZnRlciB0aGV5IGNoZWNrXG4gICAgLy8gdGhlaXIgb3duIHNwZWNpZmljIHVzZSBjYXNlc1xuICAgIGxldCBjdXJyZW50Um91dGVNYXRjaCA9IHN0YXRlLm1hdGNoZXNbaW5kZXhdO1xuICAgIGxldCBuZXh0Um91dGVNYXRjaCA9IG1hdGNoO1xuICAgIHJldHVybiBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKG1hdGNoLCBfZXh0ZW5kcyh7XG4gICAgICBjdXJyZW50VXJsLFxuICAgICAgY3VycmVudFBhcmFtczogY3VycmVudFJvdXRlTWF0Y2gucGFyYW1zLFxuICAgICAgbmV4dFVybCxcbiAgICAgIG5leHRQYXJhbXM6IG5leHRSb3V0ZU1hdGNoLnBhcmFtc1xuICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOlxuICAgICAgLy8gRm9yY2VkIHJldmFsaWRhdGlvbiBkdWUgdG8gc3VibWlzc2lvbiwgdXNlUmV2YWxpZGF0b3IsIG9yIFgtUmVtaXgtUmV2YWxpZGF0ZVxuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCB8fFxuICAgICAgLy8gQ2xpY2tlZCB0aGUgc2FtZSBsaW5rLCByZXN1Ym1pdHRlZCBhIEdFVCBmb3JtXG4gICAgICBjdXJyZW50VXJsLnBhdGhuYW1lICsgY3VycmVudFVybC5zZWFyY2ggPT09IG5leHRVcmwucGF0aG5hbWUgKyBuZXh0VXJsLnNlYXJjaCB8fFxuICAgICAgLy8gU2VhcmNoIHBhcmFtcyBhZmZlY3QgYWxsIGxvYWRlcnNcbiAgICAgIGN1cnJlbnRVcmwuc2VhcmNoICE9PSBuZXh0VXJsLnNlYXJjaCB8fCBpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudFJvdXRlTWF0Y2gsIG5leHRSb3V0ZU1hdGNoKVxuICAgIH0pKTtcbiAgfSk7XG4gIC8vIFBpY2sgZmV0Y2hlci5sb2FkcyB0aGF0IG5lZWQgdG8gYmUgcmV2YWxpZGF0ZWRcbiAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXJzID0gW107XG4gIGZldGNoTG9hZE1hdGNoZXMuZm9yRWFjaCgoZiwga2V5KSA9PiB7XG4gICAgLy8gRG9uJ3QgcmV2YWxpZGF0ZTpcbiAgICAvLyAgLSBvbiBpbml0aWFsIGxvYWQgKHNob3VsZG4ndCBiZSBhbnkgZmV0Y2hlcnMgdGhlbiBhbnl3YXkpXG4gICAgLy8gIC0gaWYgZmV0Y2hlciB3b24ndCBiZSBwcmVzZW50IGluIHRoZSBzdWJzZXF1ZW50IHJlbmRlclxuICAgIC8vICAgIC0gbm8gbG9uZ2VyIG1hdGNoZXMgdGhlIFVSTCAodjdfZmV0Y2hlclBlcnNpc3Q9ZmFsc2UpXG4gICAgLy8gICAgLSB3YXMgdW5tb3VudGVkIGJ1dCBwZXJzaXN0ZWQgZHVlIHRvIHY3X2ZldGNoZXJQZXJzaXN0PXRydWVcbiAgICBpZiAoaXNJbml0aWFsTG9hZCB8fCAhbWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gZi5yb3V0ZUlkKSB8fCBkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGZldGNoZXJNYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIGYucGF0aCwgYmFzZW5hbWUpO1xuICAgIC8vIElmIHRoZSBmZXRjaGVyIHBhdGggbm8gbG9uZ2VyIG1hdGNoZXMsIHB1c2ggaXQgaW4gd2l0aCBudWxsIG1hdGNoZXMgc29cbiAgICAvLyB3ZSBjYW4gdHJpZ2dlciBhIDQwNCBpbiBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEuICBOb3RlIHRoaXMgaXNcbiAgICAvLyBjdXJyZW50bHkgb25seSBhIHVzZS1jYXNlIGZvciBSZW1peCBITVIgd2hlcmUgdGhlIHJvdXRlIHRyZWUgY2FuIGNoYW5nZVxuICAgIC8vIGF0IHJ1bnRpbWUgYW5kIHJlbW92ZSBhIHJvdXRlIHByZXZpb3VzbHkgbG9hZGVkIHZpYSBhIGZldGNoZXJcbiAgICBpZiAoIWZldGNoZXJNYXRjaGVzKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKHtcbiAgICAgICAga2V5LFxuICAgICAgICByb3V0ZUlkOiBmLnJvdXRlSWQsXG4gICAgICAgIHBhdGg6IGYucGF0aCxcbiAgICAgICAgbWF0Y2hlczogbnVsbCxcbiAgICAgICAgbWF0Y2g6IG51bGwsXG4gICAgICAgIGNvbnRyb2xsZXI6IG51bGxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBSZXZhbGlkYXRpbmcgZmV0Y2hlcnMgYXJlIGRlY291cGxlZCBmcm9tIHRoZSByb3V0ZSBtYXRjaGVzIHNpbmNlIHRoZXlcbiAgICAvLyBsb2FkIGZyb20gYSBzdGF0aWMgaHJlZi4gIFRoZXkgcmV2YWxpZGF0ZSBiYXNlZCBvbiBleHBsaWNpdCByZXZhbGlkYXRpb25cbiAgICAvLyAoc3VibWlzc2lvbiwgdXNlUmV2YWxpZGF0b3IsIG9yIFgtUmVtaXgtUmV2YWxpZGF0ZSlcbiAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIGxldCBmZXRjaGVyTWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChmZXRjaGVyTWF0Y2hlcywgZi5wYXRoKTtcbiAgICBsZXQgc2hvdWxkUmV2YWxpZGF0ZSA9IGZhbHNlO1xuICAgIGlmIChmZXRjaFJlZGlyZWN0SWRzLmhhcyhrZXkpKSB7XG4gICAgICAvLyBOZXZlciB0cmlnZ2VyIGEgcmV2YWxpZGF0aW9uIG9mIGFuIGFjdGl2ZWx5IHJlZGlyZWN0aW5nIGZldGNoZXJcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAvLyBBbHdheXMgcmV2YWxpZGF0ZSBpZiB0aGUgZmV0Y2hlciB3YXMgY2FuY2VsbGVkXG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGZldGNoZXIgJiYgZmV0Y2hlci5zdGF0ZSAhPT0gXCJpZGxlXCIgJiYgZmV0Y2hlci5kYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIElmIHRoZSBmZXRjaGVyIGhhc24ndCBldmVyIGNvbXBsZXRlZCBsb2FkaW5nIHlldCwgdGhlbiB0aGlzIGlzbid0IGFcbiAgICAgIC8vIHJldmFsaWRhdGlvbiwgaXQgd291bGQganVzdCBiZSBhIGJyYW5kIG5ldyBsb2FkIGlmIGFuIGV4cGxpY2l0XG4gICAgICAvLyByZXZhbGlkYXRpb24gaXMgcmVxdWlyZWRcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBpc1JldmFsaWRhdGlvblJlcXVpcmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UgZmFsbCBiYWNrIG9uIGFueSB1c2VyLWRlZmluZWQgc2hvdWxkUmV2YWxpZGF0ZSwgZGVmYXVsdGluZ1xuICAgICAgLy8gdG8gZXhwbGljaXQgcmV2YWxpZGF0aW9ucyBvbmx5XG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihmZXRjaGVyTWF0Y2gsIF9leHRlbmRzKHtcbiAgICAgICAgY3VycmVudFVybCxcbiAgICAgICAgY3VycmVudFBhcmFtczogc3RhdGUubWF0Y2hlc1tzdGF0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdLnBhcmFtcyxcbiAgICAgICAgbmV4dFVybCxcbiAgICAgICAgbmV4dFBhcmFtczogbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnBhcmFtc1xuICAgICAgfSwgc3VibWlzc2lvbiwge1xuICAgICAgICBhY3Rpb25SZXN1bHQsXG4gICAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOiBpc1JldmFsaWRhdGlvblJlcXVpcmVkXG4gICAgICB9KSk7XG4gICAgfVxuICAgIGlmIChzaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKHtcbiAgICAgICAga2V5LFxuICAgICAgICByb3V0ZUlkOiBmLnJvdXRlSWQsXG4gICAgICAgIHBhdGg6IGYucGF0aCxcbiAgICAgICAgbWF0Y2hlczogZmV0Y2hlck1hdGNoZXMsXG4gICAgICAgIG1hdGNoOiBmZXRjaGVyTWF0Y2gsXG4gICAgICAgIGNvbnRyb2xsZXI6IG5ldyBBYm9ydENvbnRyb2xsZXIoKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtuYXZpZ2F0aW9uTWF0Y2hlcywgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdO1xufVxuZnVuY3Rpb24gaXNOZXdMb2FkZXIoY3VycmVudExvYWRlckRhdGEsIGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGlzTmV3ID1cbiAgLy8gW2FdIC0+IFthLCBiXVxuICAhY3VycmVudE1hdGNoIHx8XG4gIC8vIFthLCBiXSAtPiBbYSwgY11cbiAgbWF0Y2gucm91dGUuaWQgIT09IGN1cnJlbnRNYXRjaC5yb3V0ZS5pZDtcbiAgLy8gSGFuZGxlIHRoZSBjYXNlIHRoYXQgd2UgZG9uJ3QgaGF2ZSBkYXRhIGZvciBhIHJlLXVzZWQgcm91dGUsIHBvdGVudGlhbGx5XG4gIC8vIGZyb20gYSBwcmlvciBlcnJvciBvciBmcm9tIGEgY2FuY2VsbGVkIHBlbmRpbmcgZGVmZXJyZWRcbiAgbGV0IGlzTWlzc2luZ0RhdGEgPSBjdXJyZW50TG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0gPT09IHVuZGVmaW5lZDtcbiAgLy8gQWx3YXlzIGxvYWQgaWYgdGhpcyBpcyBhIG5ldC1uZXcgcm91dGUgb3Igd2UgZG9uJ3QgeWV0IGhhdmUgZGF0YVxuICByZXR1cm4gaXNOZXcgfHwgaXNNaXNzaW5nRGF0YTtcbn1cbmZ1bmN0aW9uIGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50TWF0Y2gsIG1hdGNoKSB7XG4gIGxldCBjdXJyZW50UGF0aCA9IGN1cnJlbnRNYXRjaC5yb3V0ZS5wYXRoO1xuICByZXR1cm4gKFxuICAgIC8vIHBhcmFtIGNoYW5nZSBmb3IgdGhpcyBtYXRjaCwgL3VzZXJzLzEyMyAtPiAvdXNlcnMvNDU2XG4gICAgY3VycmVudE1hdGNoLnBhdGhuYW1lICE9PSBtYXRjaC5wYXRobmFtZSB8fFxuICAgIC8vIHNwbGF0IHBhcmFtIGNoYW5nZWQsIHdoaWNoIGlzIG5vdCBwcmVzZW50IGluIG1hdGNoLnBhdGhcbiAgICAvLyBlLmcuIC9maWxlcy9pbWFnZXMvYXZhdGFyLmpwZyAtPiBmaWxlcy9maW5hbmNlcy54bHNcbiAgICBjdXJyZW50UGF0aCAhPSBudWxsICYmIGN1cnJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSAmJiBjdXJyZW50TWF0Y2gucGFyYW1zW1wiKlwiXSAhPT0gbWF0Y2gucGFyYW1zW1wiKlwiXVxuICApO1xufVxuZnVuY3Rpb24gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihsb2FkZXJNYXRjaCwgYXJnKSB7XG4gIGlmIChsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgbGV0IHJvdXRlQ2hvaWNlID0gbG9hZGVyTWF0Y2gucm91dGUuc2hvdWxkUmV2YWxpZGF0ZShhcmcpO1xuICAgIGlmICh0eXBlb2Ygcm91dGVDaG9pY2UgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICByZXR1cm4gcm91dGVDaG9pY2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcmcuZGVmYXVsdFNob3VsZFJldmFsaWRhdGU7XG59XG4vKipcbiAqIEV4ZWN1dGUgcm91dGUubGF6eSgpIG1ldGhvZHMgdG8gbGF6aWx5IGxvYWQgcm91dGUgbW9kdWxlcyAobG9hZGVyLCBhY3Rpb24sXG4gKiBzaG91bGRSZXZhbGlkYXRlKSBhbmQgdXBkYXRlIHRoZSByb3V0ZU1hbmlmZXN0IGluIHBsYWNlIHdoaWNoIHNoYXJlcyBvYmplY3RzXG4gKiB3aXRoIGRhdGFSb3V0ZXMgc28gdGhvc2UgZ2V0IHVwZGF0ZWQgYXMgd2VsbC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZExhenlSb3V0ZU1vZHVsZShyb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzLCBtYW5pZmVzdCkge1xuICBpZiAoIXJvdXRlLmxhenkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGxhenlSb3V0ZSA9IGF3YWl0IHJvdXRlLmxhenkoKTtcbiAgLy8gSWYgdGhlIGxhenkgcm91dGUgZnVuY3Rpb24gd2FzIGV4ZWN1dGVkIGFuZCByZW1vdmVkIGJ5IGFub3RoZXIgcGFyYWxsZWxcbiAgLy8gY2FsbCB0aGVuIHdlIGNhbiByZXR1cm4gLSBmaXJzdCBsYXp5KCkgdG8gZmluaXNoIHdpbnMgYmVjYXVzZSB0aGUgcmV0dXJuXG4gIC8vIHZhbHVlIG9mIGxhenkgaXMgZXhwZWN0ZWQgdG8gYmUgc3RhdGljXG4gIGlmICghcm91dGUubGF6eSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgcm91dGVUb1VwZGF0ZSA9IG1hbmlmZXN0W3JvdXRlLmlkXTtcbiAgaW52YXJpYW50KHJvdXRlVG9VcGRhdGUsIFwiTm8gcm91dGUgZm91bmQgaW4gbWFuaWZlc3RcIik7XG4gIC8vIFVwZGF0ZSB0aGUgcm91dGUgaW4gcGxhY2UuICBUaGlzIHNob3VsZCBiZSBzYWZlIGJlY2F1c2UgdGhlcmUncyBubyB3YXlcbiAgLy8gd2UgY291bGQgeWV0IGJlIHNpdHRpbmcgb24gdGhpcyByb3V0ZSBhcyB3ZSBjYW4ndCBnZXQgdGhlcmUgd2l0aG91dFxuICAvLyByZXNvbHZpbmcgbGF6eSgpIGZpcnN0LlxuICAvL1xuICAvLyBUaGlzIGlzIGRpZmZlcmVudCB0aGFuIHRoZSBITVIgXCJ1cGRhdGVcIiB1c2UtY2FzZSB3aGVyZSB3ZSBtYXkgYWN0aXZlbHkgYmVcbiAgLy8gb24gdGhlIHJvdXRlIGJlaW5nIHVwZGF0ZWQuICBUaGUgbWFpbiBjb25jZXJuIGJvaWxzIGRvd24gdG8gXCJkb2VzIHRoaXNcbiAgLy8gbXV0YXRpb24gYWZmZWN0IGFueSBvbmdvaW5nIG5hdmlnYXRpb25zIG9yIGFueSBjdXJyZW50IHN0YXRlLm1hdGNoZXNcbiAgLy8gdmFsdWVzP1wiLiAgSWYgbm90LCBpdCBzaG91bGQgYmUgc2FmZSB0byB1cGRhdGUgaW4gcGxhY2UuXG4gIGxldCByb3V0ZVVwZGF0ZXMgPSB7fTtcbiAgZm9yIChsZXQgbGF6eVJvdXRlUHJvcGVydHkgaW4gbGF6eVJvdXRlKSB7XG4gICAgbGV0IHN0YXRpY1JvdXRlVmFsdWUgPSByb3V0ZVRvVXBkYXRlW2xhenlSb3V0ZVByb3BlcnR5XTtcbiAgICBsZXQgaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkID0gc3RhdGljUm91dGVWYWx1ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgLy8gVGhpcyBwcm9wZXJ0eSBpc24ndCBzdGF0aWMgc2luY2UgaXQgc2hvdWxkIGFsd2F5cyBiZSB1cGRhdGVkIGJhc2VkXG4gICAgLy8gb24gdGhlIHJvdXRlIHVwZGF0ZXNcbiAgICBsYXp5Um91dGVQcm9wZXJ0eSAhPT0gXCJoYXNFcnJvckJvdW5kYXJ5XCI7XG4gICAgd2FybmluZyghaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkLCBcIlJvdXRlIFxcXCJcIiArIHJvdXRlVG9VcGRhdGUuaWQgKyBcIlxcXCIgaGFzIGEgc3RhdGljIHByb3BlcnR5IFxcXCJcIiArIGxhenlSb3V0ZVByb3BlcnR5ICsgXCJcXFwiIFwiICsgXCJkZWZpbmVkIGJ1dCBpdHMgbGF6eSBmdW5jdGlvbiBpcyBhbHNvIHJldHVybmluZyBhIHZhbHVlIGZvciB0aGlzIHByb3BlcnR5LiBcIiArIChcIlRoZSBsYXp5IHJvdXRlIHByb3BlcnR5IFxcXCJcIiArIGxhenlSb3V0ZVByb3BlcnR5ICsgXCJcXFwiIHdpbGwgYmUgaWdub3JlZC5cIikpO1xuICAgIGlmICghaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkICYmICFpbW11dGFibGVSb3V0ZUtleXMuaGFzKGxhenlSb3V0ZVByb3BlcnR5KSkge1xuICAgICAgcm91dGVVcGRhdGVzW2xhenlSb3V0ZVByb3BlcnR5XSA9IGxhenlSb3V0ZVtsYXp5Um91dGVQcm9wZXJ0eV07XG4gICAgfVxuICB9XG4gIC8vIE11dGF0ZSB0aGUgcm91dGUgd2l0aCB0aGUgcHJvdmlkZWQgdXBkYXRlcy4gIERvIHRoaXMgZmlyc3Qgc28gd2UgcGFzc1xuICAvLyB0aGUgdXBkYXRlZCB2ZXJzaW9uIHRvIG1hcFJvdXRlUHJvcGVydGllc1xuICBPYmplY3QuYXNzaWduKHJvdXRlVG9VcGRhdGUsIHJvdXRlVXBkYXRlcyk7XG4gIC8vIE11dGF0ZSB0aGUgYGhhc0Vycm9yQm91bmRhcnlgIHByb3BlcnR5IG9uIHRoZSByb3V0ZSBiYXNlZCBvbiB0aGUgcm91dGVcbiAgLy8gdXBkYXRlcyBhbmQgcmVtb3ZlIHRoZSBgbGF6eWAgZnVuY3Rpb24gc28gd2UgZG9uJ3QgcmVzb2x2ZSB0aGUgbGF6eVxuICAvLyByb3V0ZSBhZ2Fpbi5cbiAgT2JqZWN0LmFzc2lnbihyb3V0ZVRvVXBkYXRlLCBfZXh0ZW5kcyh7fSwgbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlVG9VcGRhdGUpLCB7XG4gICAgbGF6eTogdW5kZWZpbmVkXG4gIH0pKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJPckFjdGlvbih0eXBlLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUsIHY3X3JlbGF0aXZlU3BsYXRQYXRoLCBvcHRzKSB7XG4gIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICBvcHRzID0ge307XG4gIH1cbiAgbGV0IHJlc3VsdFR5cGU7XG4gIGxldCByZXN1bHQ7XG4gIGxldCBvblJlamVjdDtcbiAgbGV0IHJ1bkhhbmRsZXIgPSBoYW5kbGVyID0+IHtcbiAgICAvLyBTZXR1cCBhIHByb21pc2Ugd2UgY2FuIHJhY2UgYWdhaW5zdCBzbyB0aGF0IGFib3J0IHNpZ25hbHMgc2hvcnQgY2lyY3VpdFxuICAgIGxldCByZWplY3Q7XG4gICAgbGV0IGFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcbiAgICBvblJlamVjdCA9ICgpID0+IHJlamVjdCgpO1xuICAgIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvblJlamVjdCk7XG4gICAgcmV0dXJuIFByb21pc2UucmFjZShbaGFuZGxlcih7XG4gICAgICByZXF1ZXN0LFxuICAgICAgcGFyYW1zOiBtYXRjaC5wYXJhbXMsXG4gICAgICBjb250ZXh0OiBvcHRzLnJlcXVlc3RDb250ZXh0XG4gICAgfSksIGFib3J0UHJvbWlzZV0pO1xuICB9O1xuICB0cnkge1xuICAgIGxldCBoYW5kbGVyID0gbWF0Y2gucm91dGVbdHlwZV07XG4gICAgaWYgKG1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgIC8vIFJ1biBzdGF0aWNhbGx5IGRlZmluZWQgaGFuZGxlciBpbiBwYXJhbGxlbCB3aXRoIGxhenkoKVxuICAgICAgICBsZXQgaGFuZGxlckVycm9yO1xuICAgICAgICBsZXQgdmFsdWVzID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAvLyBJZiB0aGUgaGFuZGxlciB0aHJvd3MsIGRvbid0IGxldCBpdCBpbW1lZGlhdGVseSBidWJibGUgb3V0LFxuICAgICAgICAvLyBzaW5jZSB3ZSBuZWVkIHRvIGxldCB0aGUgbGF6eSgpIGV4ZWN1dGlvbiBmaW5pc2ggc28gd2Uga25vdyBpZiB0aGlzXG4gICAgICAgIC8vIHJvdXRlIGhhcyBhIGJvdW5kYXJ5IHRoYXQgY2FuIGhhbmRsZSB0aGUgZXJyb3JcbiAgICAgICAgcnVuSGFuZGxlcihoYW5kbGVyKS5jYXRjaChlID0+IHtcbiAgICAgICAgICBoYW5kbGVyRXJyb3IgPSBlO1xuICAgICAgICB9KSwgbG9hZExhenlSb3V0ZU1vZHVsZShtYXRjaC5yb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzLCBtYW5pZmVzdCldKTtcbiAgICAgICAgaWYgKGhhbmRsZXJFcnJvcikge1xuICAgICAgICAgIHRocm93IGhhbmRsZXJFcnJvcjtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB2YWx1ZXNbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBMb2FkIGxhenkgcm91dGUgbW9kdWxlLCB0aGVuIHJ1biBhbnkgcmV0dXJuZWQgaGFuZGxlclxuICAgICAgICBhd2FpdCBsb2FkTGF6eVJvdXRlTW9kdWxlKG1hdGNoLnJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KTtcbiAgICAgICAgaGFuZGxlciA9IG1hdGNoLnJvdXRlW3R5cGVdO1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIC8vIEhhbmRsZXIgc3RpbGwgcnVuIGV2ZW4gaWYgd2UgZ290IGludGVycnVwdGVkIHRvIG1haW50YWluIGNvbnNpc3RlbmN5XG4gICAgICAgICAgLy8gd2l0aCB1bi1hYm9ydGFibGUgYmVoYXZpb3Igb2YgaGFuZGxlciBleGVjdXRpb24gb24gbm9uLWxhenkgb3JcbiAgICAgICAgICAvLyBwcmV2aW91c2x5LWxhenktbG9hZGVkIHJvdXRlc1xuICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1bkhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJhY3Rpb25cIikge1xuICAgICAgICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgICAgICBsZXQgcGF0aG5hbWUgPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoO1xuICAgICAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgICAgICByb3V0ZUlkOiBtYXRjaC5yb3V0ZS5pZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGxhenkoKSByb3V0ZSBoYXMgbm8gbG9hZGVyIHRvIHJ1bi4gIFNob3J0IGNpcmN1aXQgaGVyZSBzbyB3ZSBkb24ndFxuICAgICAgICAgIC8vIGhpdCB0aGUgaW52YXJpYW50IGJlbG93IHRoYXQgZXJyb3JzIG9uIHJldHVybmluZyB1bmRlZmluZWQuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgICAgIGRhdGE6IHVuZGVmaW5lZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFoYW5kbGVyKSB7XG4gICAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICBsZXQgcGF0aG5hbWUgPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoO1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBydW5IYW5kbGVyKGhhbmRsZXIpO1xuICAgIH1cbiAgICBpbnZhcmlhbnQocmVzdWx0ICE9PSB1bmRlZmluZWQsIFwiWW91IGRlZmluZWQgXCIgKyAodHlwZSA9PT0gXCJhY3Rpb25cIiA/IFwiYW4gYWN0aW9uXCIgOiBcImEgbG9hZGVyXCIpICsgXCIgZm9yIHJvdXRlIFwiICsgKFwiXFxcIlwiICsgbWF0Y2gucm91dGUuaWQgKyBcIlxcXCIgYnV0IGRpZG4ndCByZXR1cm4gYW55dGhpbmcgZnJvbSB5b3VyIGBcIiArIHR5cGUgKyBcImAgXCIpICsgXCJmdW5jdGlvbi4gUGxlYXNlIHJldHVybiBhIHZhbHVlIG9yIGBudWxsYC5cIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXN1bHRUeXBlID0gUmVzdWx0VHlwZS5lcnJvcjtcbiAgICByZXN1bHQgPSBlO1xuICB9IGZpbmFsbHkge1xuICAgIGlmIChvblJlamVjdCkge1xuICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzO1xuICAgIC8vIFByb2Nlc3MgcmVkaXJlY3RzXG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzQ29kZXMuaGFzKHN0YXR1cykpIHtcbiAgICAgIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICAgICAgaW52YXJpYW50KGxvY2F0aW9uLCBcIlJlZGlyZWN0cyByZXR1cm5lZC90aHJvd24gZnJvbSBsb2FkZXJzL2FjdGlvbnMgbXVzdCBoYXZlIGEgTG9jYXRpb24gaGVhZGVyXCIpO1xuICAgICAgLy8gU3VwcG9ydCByZWxhdGl2ZSByb3V0aW5nIGluIGludGVybmFsIHJlZGlyZWN0c1xuICAgICAgaWYgKCFBQlNPTFVURV9VUkxfUkVHRVgudGVzdChsb2NhdGlvbikpIHtcbiAgICAgICAgbG9jYXRpb24gPSBub3JtYWxpemVUbyhuZXcgVVJMKHJlcXVlc3QudXJsKSwgbWF0Y2hlcy5zbGljZSgwLCBtYXRjaGVzLmluZGV4T2YobWF0Y2gpICsgMSksIGJhc2VuYW1lLCB0cnVlLCBsb2NhdGlvbiwgdjdfcmVsYXRpdmVTcGxhdFBhdGgpO1xuICAgICAgfSBlbHNlIGlmICghb3B0cy5pc1N0YXRpY1JlcXVlc3QpIHtcbiAgICAgICAgLy8gU3RyaXAgb2ZmIHRoZSBwcm90b2NvbCtvcmlnaW4gZm9yIHNhbWUtb3JpZ2luICsgc2FtZS1iYXNlbmFtZSBhYnNvbHV0ZVxuICAgICAgICAvLyByZWRpcmVjdHMuIElmIHRoaXMgaXMgYSBzdGF0aWMgcmVxdWVzdCwgd2UgY2FuIGxldCBpdCBnbyBiYWNrIHRvIHRoZVxuICAgICAgICAvLyBicm93c2VyIGFzLWlzXG4gICAgICAgIGxldCBjdXJyZW50VXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICAgIGxldCB1cmwgPSBsb2NhdGlvbi5zdGFydHNXaXRoKFwiLy9cIikgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyBsb2NhdGlvbikgOiBuZXcgVVJMKGxvY2F0aW9uKTtcbiAgICAgICAgbGV0IGlzU2FtZUJhc2VuYW1lID0gc3RyaXBCYXNlbmFtZSh1cmwucGF0aG5hbWUsIGJhc2VuYW1lKSAhPSBudWxsO1xuICAgICAgICBpZiAodXJsLm9yaWdpbiA9PT0gY3VycmVudFVybC5vcmlnaW4gJiYgaXNTYW1lQmFzZW5hbWUpIHtcbiAgICAgICAgICBsb2NhdGlvbiA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2ggKyB1cmwuaGFzaDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRG9uJ3QgcHJvY2VzcyByZWRpcmVjdHMgaW4gdGhlIHJvdXRlciBkdXJpbmcgc3RhdGljIHJlcXVlc3RzIHJlcXVlc3RzLlxuICAgICAgLy8gSW5zdGVhZCwgdGhyb3cgdGhlIFJlc3BvbnNlIGFuZCBsZXQgdGhlIHNlcnZlciBoYW5kbGUgaXQgd2l0aCBhbiBIVFRQXG4gICAgICAvLyByZWRpcmVjdC4gIFdlIGFsc28gdXBkYXRlIHRoZSBMb2NhdGlvbiBoZWFkZXIgaW4gcGxhY2UgaW4gdGhpcyBmbG93IHNvXG4gICAgICAvLyBiYXNlbmFtZSBhbmQgcmVsYXRpdmUgcm91dGluZyBpcyB0YWtlbiBpbnRvIGFjY291bnRcbiAgICAgIGlmIChvcHRzLmlzU3RhdGljUmVxdWVzdCkge1xuICAgICAgICByZXN1bHQuaGVhZGVycy5zZXQoXCJMb2NhdGlvblwiLCBsb2NhdGlvbik7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUucmVkaXJlY3QsXG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIHJldmFsaWRhdGU6IHJlc3VsdC5oZWFkZXJzLmdldChcIlgtUmVtaXgtUmV2YWxpZGF0ZVwiKSAhPT0gbnVsbCxcbiAgICAgICAgcmVsb2FkRG9jdW1lbnQ6IHJlc3VsdC5oZWFkZXJzLmdldChcIlgtUmVtaXgtUmVsb2FkLURvY3VtZW50XCIpICE9PSBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBGb3IgU1NSIHNpbmdsZS1yb3V0ZSByZXF1ZXN0cywgd2Ugd2FudCB0byBoYW5kIFJlc3BvbnNlcyBiYWNrIGRpcmVjdGx5XG4gICAgLy8gd2l0aG91dCB1bndyYXBwaW5nLiAgV2UgZG8gdGhpcyB3aXRoIHRoZSBRdWVyeVJvdXRlUmVzcG9uc2Ugd3JhcHBlclxuICAgIC8vIGludGVyZmFjZSBzbyB3ZSBjYW4ga25vdyB3aGV0aGVyIGl0IHdhcyByZXR1cm5lZCBvciB0aHJvd25cbiAgICBpZiAob3B0cy5pc1JvdXRlUmVxdWVzdCkge1xuICAgICAgbGV0IHF1ZXJ5Um91dGVSZXNwb25zZSA9IHtcbiAgICAgICAgdHlwZTogcmVzdWx0VHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvciA/IFJlc3VsdFR5cGUuZXJyb3IgOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIHJlc3BvbnNlOiByZXN1bHRcbiAgICAgIH07XG4gICAgICB0aHJvdyBxdWVyeVJvdXRlUmVzcG9uc2U7XG4gICAgfVxuICAgIGxldCBkYXRhO1xuICAgIHRyeSB7XG4gICAgICBsZXQgY29udGVudFR5cGUgPSByZXN1bHQuaGVhZGVycy5nZXQoXCJDb250ZW50LVR5cGVcIik7XG4gICAgICAvLyBDaGVjayBiZXR3ZWVuIHdvcmQgYm91bmRhcmllcyBpbnN0ZWFkIG9mIHN0YXJ0c1dpdGgoKSBkdWUgdG8gdGhlIGxhc3RcbiAgICAgIC8vIHBhcmFncmFwaCBvZiBodHRwczovL2h0dHB3Zy5vcmcvc3BlY3MvcmZjOTExMC5odG1sI2ZpZWxkLmNvbnRlbnQtdHlwZVxuICAgICAgaWYgKGNvbnRlbnRUeXBlICYmIC9cXGJhcHBsaWNhdGlvblxcL2pzb25cXGIvLnRlc3QoY29udGVudFR5cGUpKSB7XG4gICAgICAgIGlmIChyZXN1bHQuYm9keSA9PSBudWxsKSB7XG4gICAgICAgICAgZGF0YSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC5qc29uKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSBhd2FpdCByZXN1bHQudGV4dCgpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBlXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAocmVzdWx0VHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcmVzdWx0VHlwZSxcbiAgICAgICAgZXJyb3I6IG5ldyBFcnJvclJlc3BvbnNlSW1wbChzdGF0dXMsIHJlc3VsdC5zdGF0dXNUZXh0LCBkYXRhKSxcbiAgICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICBkYXRhLFxuICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LnN0YXR1cyxcbiAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzXG4gICAgfTtcbiAgfVxuICBpZiAocmVzdWx0VHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiByZXN1bHRUeXBlLFxuICAgICAgZXJyb3I6IHJlc3VsdFxuICAgIH07XG4gIH1cbiAgaWYgKGlzRGVmZXJyZWREYXRhKHJlc3VsdCkpIHtcbiAgICB2YXIgX3Jlc3VsdCRpbml0LCBfcmVzdWx0JGluaXQyO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmRlZmVycmVkLFxuICAgICAgZGVmZXJyZWREYXRhOiByZXN1bHQsXG4gICAgICBzdGF0dXNDb2RlOiAoX3Jlc3VsdCRpbml0ID0gcmVzdWx0LmluaXQpID09IG51bGwgPyB2b2lkIDAgOiBfcmVzdWx0JGluaXQuc3RhdHVzLFxuICAgICAgaGVhZGVyczogKChfcmVzdWx0JGluaXQyID0gcmVzdWx0LmluaXQpID09IG51bGwgPyB2b2lkIDAgOiBfcmVzdWx0JGluaXQyLmhlYWRlcnMpICYmIG5ldyBIZWFkZXJzKHJlc3VsdC5pbml0LmhlYWRlcnMpXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICBkYXRhOiByZXN1bHRcbiAgfTtcbn1cbi8vIFV0aWxpdHkgbWV0aG9kIGZvciBjcmVhdGluZyB0aGUgUmVxdWVzdCBpbnN0YW5jZXMgZm9yIGxvYWRlcnMvYWN0aW9ucyBkdXJpbmdcbi8vIGNsaWVudC1zaWRlIG5hdmlnYXRpb25zIGFuZCBmZXRjaGVzLiAgRHVyaW5nIFNTUiB3ZSB3aWxsIGFsd2F5cyBoYXZlIGFcbi8vIFJlcXVlc3QgaW5zdGFuY2UgZnJvbSB0aGUgc3RhdGljIGhhbmRsZXIgKHF1ZXJ5L3F1ZXJ5Um91dGUpXG5mdW5jdGlvbiBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChoaXN0b3J5LCBsb2NhdGlvbiwgc2lnbmFsLCBzdWJtaXNzaW9uKSB7XG4gIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChzdHJpcEhhc2hGcm9tUGF0aChsb2NhdGlvbikpLnRvU3RyaW5nKCk7XG4gIGxldCBpbml0ID0ge1xuICAgIHNpZ25hbFxuICB9O1xuICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlXG4gICAgfSA9IHN1Ym1pc3Npb247XG4gICAgLy8gRGlkbid0IHRoaW5rIHdlIG5lZWRlZCB0aGlzIGJ1dCBpdCB0dXJucyBvdXQgdW5saWtlIG90aGVyIG1ldGhvZHMsIHBhdGNoXG4gICAgLy8gd29uJ3QgYmUgcHJvcGVybHkgbm9ybWFsaXplZCB0byB1cHBlcmNhc2UgYW5kIHJlc3VsdHMgaW4gYSA0MDUgZXJyb3IuXG4gICAgLy8gU2VlOiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1tZXRob2RcbiAgICBpbml0Lm1ldGhvZCA9IGZvcm1NZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICBpZiAoZm9ybUVuY1R5cGUgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSB7XG4gICAgICBpbml0LmhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IGZvcm1FbmNUeXBlXG4gICAgICB9KTtcbiAgICAgIGluaXQuYm9keSA9IEpTT04uc3RyaW5naWZ5KHN1Ym1pc3Npb24uanNvbik7XG4gICAgfSBlbHNlIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICAgIC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuICAgICAgaW5pdC5ib2R5ID0gc3VibWlzc2lvbi50ZXh0O1xuICAgIH0gZWxzZSBpZiAoZm9ybUVuY1R5cGUgPT09IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgJiYgc3VibWlzc2lvbi5mb3JtRGF0YSkge1xuICAgICAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gICAgICBpbml0LmJvZHkgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhzdWJtaXNzaW9uLmZvcm1EYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gICAgICBpbml0LmJvZHkgPSBzdWJtaXNzaW9uLmZvcm1EYXRhO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IFJlcXVlc3QodXJsLCBpbml0KTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKGZvcm1EYXRhKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBmb3JtRGF0YS5lbnRyaWVzKCkpIHtcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNjb252ZXJ0aW5nLWFuLWVudHJ5LWxpc3QtdG8tYS1saXN0LW9mLW5hbWUtdmFsdWUtcGFpcnNcbiAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUgOiB2YWx1ZS5uYW1lKTtcbiAgfVxuICByZXR1cm4gc2VhcmNoUGFyYW1zO1xufVxuZnVuY3Rpb24gY29udmVydFNlYXJjaFBhcmFtc1RvRm9ybURhdGEoc2VhcmNoUGFyYW1zKSB7XG4gIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2Ygc2VhcmNoUGFyYW1zLmVudHJpZXMoKSkge1xuICAgIGZvcm1EYXRhLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZm9ybURhdGE7XG59XG5mdW5jdGlvbiBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgYWN0aXZlRGVmZXJyZWRzKSB7XG4gIC8vIEZpbGwgaW4gbG9hZGVyRGF0YS9lcnJvcnMgZnJvbSBvdXIgbG9hZGVyc1xuICBsZXQgbG9hZGVyRGF0YSA9IHt9O1xuICBsZXQgZXJyb3JzID0gbnVsbDtcbiAgbGV0IHN0YXR1c0NvZGU7XG4gIGxldCBmb3VuZEVycm9yID0gZmFsc2U7XG4gIGxldCBsb2FkZXJIZWFkZXJzID0ge307XG4gIC8vIFByb2Nlc3MgbG9hZGVyIHJlc3VsdHMgaW50byBzdGF0ZS5sb2FkZXJEYXRhL3N0YXRlLmVycm9yc1xuICByZXN1bHRzLmZvckVhY2goKHJlc3VsdCwgaW5kZXgpID0+IHtcbiAgICBsZXQgaWQgPSBtYXRjaGVzVG9Mb2FkW2luZGV4XS5yb3V0ZS5pZDtcbiAgICBpbnZhcmlhbnQoIWlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSwgXCJDYW5ub3QgaGFuZGxlIHJlZGlyZWN0IHJlc3VsdHMgaW4gcHJvY2Vzc0xvYWRlckRhdGFcIik7XG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gTG9vayB1cHdhcmRzIGZyb20gdGhlIG1hdGNoZWQgcm91dGUgZm9yIHRoZSBjbG9zZXN0IGFuY2VzdG9yXG4gICAgICAvLyBlcnJvciBib3VuZGFyeSwgZGVmYXVsdGluZyB0byB0aGUgcm9vdCBtYXRjaFxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGlkKTtcbiAgICAgIGxldCBlcnJvciA9IHJlc3VsdC5lcnJvcjtcbiAgICAgIC8vIElmIHdlIGhhdmUgYSBwZW5kaW5nIGFjdGlvbiBlcnJvciwgd2UgcmVwb3J0IGl0IGF0IHRoZSBoaWdoZXN0LXJvdXRlXG4gICAgICAvLyB0aGF0IHRocm93cyBhIGxvYWRlciBlcnJvciwgYW5kIHRoZW4gY2xlYXIgaXQgb3V0IHRvIGluZGljYXRlIHRoYXRcbiAgICAgIC8vIGl0IHdhcyBjb25zdW1lZFxuICAgICAgaWYgKHBlbmRpbmdFcnJvcikge1xuICAgICAgICBlcnJvciA9IE9iamVjdC52YWx1ZXMocGVuZGluZ0Vycm9yKVswXTtcbiAgICAgICAgcGVuZGluZ0Vycm9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgZXJyb3JzID0gZXJyb3JzIHx8IHt9O1xuICAgICAgLy8gUHJlZmVyIGhpZ2hlciBlcnJvciB2YWx1ZXMgaWYgbG93ZXIgZXJyb3JzIGJ1YmJsZSB0byB0aGUgc2FtZSBib3VuZGFyeVxuICAgICAgaWYgKGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9PSBudWxsKSB7XG4gICAgICAgIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9IGVycm9yO1xuICAgICAgfVxuICAgICAgLy8gQ2xlYXIgb3VyIGFueSBwcmlvciBsb2FkZXJEYXRhIGZvciB0aGUgdGhyb3dpbmcgcm91dGVcbiAgICAgIGxvYWRlckRhdGFbaWRdID0gdW5kZWZpbmVkO1xuICAgICAgLy8gT25jZSB3ZSBmaW5kIG91ciBmaXJzdCAoaGlnaGVzdCkgZXJyb3IsIHdlIHNldCB0aGUgc3RhdHVzIGNvZGUgYW5kXG4gICAgICAvLyBwcmV2ZW50IGRlZXBlciBzdGF0dXMgY29kZXMgZnJvbSBvdmVycmlkaW5nXG4gICAgICBpZiAoIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgZm91bmRFcnJvciA9IHRydWU7XG4gICAgICAgIHN0YXR1c0NvZGUgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IDUwMDtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQuaGVhZGVycykge1xuICAgICAgICBsb2FkZXJIZWFkZXJzW2lkXSA9IHJlc3VsdC5oZWFkZXJzO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5zZXQoaWQsIHJlc3VsdC5kZWZlcnJlZERhdGEpO1xuICAgICAgICBsb2FkZXJEYXRhW2lkXSA9IHJlc3VsdC5kZWZlcnJlZERhdGEuZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRhdGE7XG4gICAgICB9XG4gICAgICAvLyBFcnJvciBzdGF0dXMgY29kZXMgYWx3YXlzIG92ZXJyaWRlIHN1Y2Nlc3Mgc3RhdHVzIGNvZGVzLCBidXQgaWYgYWxsXG4gICAgICAvLyBsb2FkZXJzIGFyZSBzdWNjZXNzZnVsIHdlIHRha2UgdGhlIGRlZXBlc3Qgc3RhdHVzIGNvZGUuXG4gICAgICBpZiAocmVzdWx0LnN0YXR1c0NvZGUgIT0gbnVsbCAmJiByZXN1bHQuc3RhdHVzQ29kZSAhPT0gMjAwICYmICFmb3VuZEVycm9yKSB7XG4gICAgICAgIHN0YXR1c0NvZGUgPSByZXN1bHQuc3RhdHVzQ29kZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQuaGVhZGVycykge1xuICAgICAgICBsb2FkZXJIZWFkZXJzW2lkXSA9IHJlc3VsdC5oZWFkZXJzO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIC8vIElmIHdlIGRpZG4ndCBjb25zdW1lIHRoZSBwZW5kaW5nIGFjdGlvbiBlcnJvciAoaS5lLiwgYWxsIGxvYWRlcnNcbiAgLy8gcmVzb2x2ZWQpLCB0aGVuIGNvbnN1bWUgaXQgaGVyZS4gIEFsc28gY2xlYXIgb3V0IGFueSBsb2FkZXJEYXRhIGZvciB0aGVcbiAgLy8gdGhyb3dpbmcgcm91dGVcbiAgaWYgKHBlbmRpbmdFcnJvcikge1xuICAgIGVycm9ycyA9IHBlbmRpbmdFcnJvcjtcbiAgICBsb2FkZXJEYXRhW09iamVjdC5rZXlzKHBlbmRpbmdFcnJvcilbMF1dID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnMsXG4gICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSB8fCAyMDAsXG4gICAgbG9hZGVySGVhZGVyc1xuICB9O1xufVxuZnVuY3Rpb24gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIGZldGNoZXJSZXN1bHRzLCBhY3RpdmVEZWZlcnJlZHMpIHtcbiAgbGV0IHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9yc1xuICB9ID0gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nRXJyb3IsIGFjdGl2ZURlZmVycmVkcyk7XG4gIC8vIFByb2Nlc3MgcmVzdWx0cyBmcm9tIG91ciByZXZhbGlkYXRpbmcgZmV0Y2hlcnNcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCB7XG4gICAgICBrZXksXG4gICAgICBtYXRjaCxcbiAgICAgIGNvbnRyb2xsZXJcbiAgICB9ID0gcmV2YWxpZGF0aW5nRmV0Y2hlcnNbaW5kZXhdO1xuICAgIGludmFyaWFudChmZXRjaGVyUmVzdWx0cyAhPT0gdW5kZWZpbmVkICYmIGZldGNoZXJSZXN1bHRzW2luZGV4XSAhPT0gdW5kZWZpbmVkLCBcIkRpZCBub3QgZmluZCBjb3JyZXNwb25kaW5nIGZldGNoZXIgcmVzdWx0XCIpO1xuICAgIGxldCByZXN1bHQgPSBmZXRjaGVyUmVzdWx0c1tpbmRleF07XG4gICAgLy8gUHJvY2VzcyBmZXRjaGVyIG5vbi1yZWRpcmVjdCBlcnJvcnNcbiAgICBpZiAoY29udHJvbGxlciAmJiBjb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAvLyBOb3RoaW5nIHRvIGRvIGZvciBhYm9ydGVkIGZldGNoZXJzXG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2UgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIG1hdGNoID09IG51bGwgPyB2b2lkIDAgOiBtYXRjaC5yb3V0ZS5pZCk7XG4gICAgICBpZiAoIShlcnJvcnMgJiYgZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdKSkge1xuICAgICAgICBlcnJvcnMgPSBfZXh0ZW5kcyh7fSwgZXJyb3JzLCB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICB9IGVsc2UgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCByZWRpcmVjdHMgc2hvdWxkIGdldCBwcm9jZXNzZWQgYWJvdmUsIGJ1dCB3ZVxuICAgICAgLy8ga2VlcCB0aGlzIHRvIHR5cGUgbmFycm93IHRvIGEgc3VjY2VzcyByZXN1bHQgaW4gdGhlIGVsc2VcbiAgICAgIGludmFyaWFudChmYWxzZSwgXCJVbmhhbmRsZWQgZmV0Y2hlciByZXZhbGlkYXRpb24gcmVkaXJlY3RcIik7XG4gICAgfSBlbHNlIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFNob3VsZCBuZXZlciBnZXQgaGVyZSwgZGVmZXJyZWQgZGF0YSBzaG91bGQgYmUgYXdhaXRlZCBmb3IgZmV0Y2hlcnNcbiAgICAgIC8vIGluIHJlc29sdmVEZWZlcnJlZFJlc3VsdHNcbiAgICAgIGludmFyaWFudChmYWxzZSwgXCJVbmhhbmRsZWQgZmV0Y2hlciBkZWZlcnJlZCBkYXRhXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZG9uZUZldGNoZXIgPSBnZXREb25lRmV0Y2hlcihyZXN1bHQuZGF0YSk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnNcbiAgfTtcbn1cbmZ1bmN0aW9uIG1lcmdlTG9hZGVyRGF0YShsb2FkZXJEYXRhLCBuZXdMb2FkZXJEYXRhLCBtYXRjaGVzLCBlcnJvcnMpIHtcbiAgbGV0IG1lcmdlZExvYWRlckRhdGEgPSBfZXh0ZW5kcyh7fSwgbmV3TG9hZGVyRGF0YSk7XG4gIGZvciAobGV0IG1hdGNoIG9mIG1hdGNoZXMpIHtcbiAgICBsZXQgaWQgPSBtYXRjaC5yb3V0ZS5pZDtcbiAgICBpZiAobmV3TG9hZGVyRGF0YS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIGlmIChuZXdMb2FkZXJEYXRhW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1lcmdlZExvYWRlckRhdGFbaWRdID0gbmV3TG9hZGVyRGF0YVtpZF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsb2FkZXJEYXRhW2lkXSAhPT0gdW5kZWZpbmVkICYmIG1hdGNoLnJvdXRlLmxvYWRlcikge1xuICAgICAgLy8gUHJlc2VydmUgZXhpc3Rpbmcga2V5cyBub3QgaW5jbHVkZWQgaW4gbmV3TG9hZGVyRGF0YSBhbmQgd2hlcmUgYSBsb2FkZXJcbiAgICAgIC8vIHdhc24ndCByZW1vdmVkIGJ5IEhNUlxuICAgICAgbWVyZ2VkTG9hZGVyRGF0YVtpZF0gPSBsb2FkZXJEYXRhW2lkXTtcbiAgICB9XG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAvLyBEb24ndCBrZWVwIGFueSBsb2FkZXIgZGF0YSBiZWxvdyB0aGUgYm91bmRhcnlcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWVyZ2VkTG9hZGVyRGF0YTtcbn1cbi8vIEZpbmQgdGhlIG5lYXJlc3QgZXJyb3IgYm91bmRhcnksIGxvb2tpbmcgdXB3YXJkcyBmcm9tIHRoZSBsZWFmIHJvdXRlIChvciB0aGVcbi8vIHJvdXRlIHNwZWNpZmllZCBieSByb3V0ZUlkKSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgZXJyb3IgYm91bmRhcnksXG4vLyBkZWZhdWx0aW5nIHRvIHRoZSByb290IG1hdGNoXG5mdW5jdGlvbiBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIHJvdXRlSWQpIHtcbiAgbGV0IGVsaWdpYmxlTWF0Y2hlcyA9IHJvdXRlSWQgPyBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkgKyAxKSA6IFsuLi5tYXRjaGVzXTtcbiAgcmV0dXJuIGVsaWdpYmxlTWF0Y2hlcy5yZXZlcnNlKCkuZmluZChtID0+IG0ucm91dGUuaGFzRXJyb3JCb3VuZGFyeSA9PT0gdHJ1ZSkgfHwgbWF0Y2hlc1swXTtcbn1cbmZ1bmN0aW9uIGdldFNob3J0Q2lyY3VpdE1hdGNoZXMocm91dGVzKSB7XG4gIC8vIFByZWZlciBhIHJvb3QgbGF5b3V0IHJvdXRlIGlmIHByZXNlbnQsIG90aGVyd2lzZSBzaGltIGluIGEgcm91dGUgb2JqZWN0XG4gIGxldCByb3V0ZSA9IHJvdXRlcy5sZW5ndGggPT09IDEgPyByb3V0ZXNbMF0gOiByb3V0ZXMuZmluZChyID0+IHIuaW5kZXggfHwgIXIucGF0aCB8fCByLnBhdGggPT09IFwiL1wiKSB8fCB7XG4gICAgaWQ6IFwiX19zaGltLWVycm9yLXJvdXRlX19cIlxuICB9O1xuICByZXR1cm4ge1xuICAgIG1hdGNoZXM6IFt7XG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgcGF0aG5hbWU6IFwiXCIsXG4gICAgICBwYXRobmFtZUJhc2U6IFwiXCIsXG4gICAgICByb3V0ZVxuICAgIH1dLFxuICAgIHJvdXRlXG4gIH07XG59XG5mdW5jdGlvbiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKHN0YXR1cywgX3RlbXA1KSB7XG4gIGxldCB7XG4gICAgcGF0aG5hbWUsXG4gICAgcm91dGVJZCxcbiAgICBtZXRob2QsXG4gICAgdHlwZVxuICB9ID0gX3RlbXA1ID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wNTtcbiAgbGV0IHN0YXR1c1RleHQgPSBcIlVua25vd24gU2VydmVyIEVycm9yXCI7XG4gIGxldCBlcnJvck1lc3NhZ2UgPSBcIlVua25vd24gQHJlbWl4LXJ1bi9yb3V0ZXIgZXJyb3JcIjtcbiAgaWYgKHN0YXR1cyA9PT0gNDAwKSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiQmFkIFJlcXVlc3RcIjtcbiAgICBpZiAobWV0aG9kICYmIHBhdGhuYW1lICYmIHJvdXRlSWQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiWW91IG1hZGUgYSBcIiArIG1ldGhvZCArIFwiIHJlcXVlc3QgdG8gXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCIgYnV0IFwiICsgKFwiZGlkIG5vdCBwcm92aWRlIGEgYGxvYWRlcmAgZm9yIHJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIsIFwiKSArIFwic28gdGhlcmUgaXMgbm8gd2F5IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC5cIjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZGVmZXItYWN0aW9uXCIpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiZGVmZXIoKSBpcyBub3Qgc3VwcG9ydGVkIGluIGFjdGlvbnNcIjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiaW52YWxpZC1ib2R5XCIpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiVW5hYmxlIHRvIGVuY29kZSBzdWJtaXNzaW9uIGJvZHlcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDMpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJGb3JiaWRkZW5cIjtcbiAgICBlcnJvck1lc3NhZ2UgPSBcIlJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIgZG9lcyBub3QgbWF0Y2ggVVJMIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiXCI7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDQpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJOb3QgRm91bmRcIjtcbiAgICBlcnJvck1lc3NhZ2UgPSBcIk5vIHJvdXRlIG1hdGNoZXMgVVJMIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiXCI7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDUpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJNZXRob2QgTm90IEFsbG93ZWRcIjtcbiAgICBpZiAobWV0aG9kICYmIHBhdGhuYW1lICYmIHJvdXRlSWQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiWW91IG1hZGUgYSBcIiArIG1ldGhvZC50b1VwcGVyQ2FzZSgpICsgXCIgcmVxdWVzdCB0byBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIiBidXQgXCIgKyAoXCJkaWQgbm90IHByb3ZpZGUgYW4gYGFjdGlvbmAgZm9yIHJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIsIFwiKSArIFwic28gdGhlcmUgaXMgbm8gd2F5IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC5cIjtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIHJlcXVlc3QgbWV0aG9kIFxcXCJcIiArIG1ldGhvZC50b1VwcGVyQ2FzZSgpICsgXCJcXFwiXCI7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgRXJyb3JSZXNwb25zZUltcGwoc3RhdHVzIHx8IDUwMCwgc3RhdHVzVGV4dCwgbmV3IEVycm9yKGVycm9yTWVzc2FnZSksIHRydWUpO1xufVxuLy8gRmluZCBhbnkgcmV0dXJuZWQgcmVkaXJlY3QgZXJyb3JzLCBzdGFydGluZyBmcm9tIHRoZSBsb3dlc3QgbWF0Y2hcbmZ1bmN0aW9uIGZpbmRSZWRpcmVjdChyZXN1bHRzKSB7XG4gIGZvciAobGV0IGkgPSByZXN1bHRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBpZHg6IGlcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzdHJpcEhhc2hGcm9tUGF0aChwYXRoKSB7XG4gIGxldCBwYXJzZWRQYXRoID0gdHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgocGF0aCkgOiBwYXRoO1xuICByZXR1cm4gY3JlYXRlUGF0aChfZXh0ZW5kcyh7fSwgcGFyc2VkUGF0aCwge1xuICAgIGhhc2g6IFwiXCJcbiAgfSkpO1xufVxuZnVuY3Rpb24gaXNIYXNoQ2hhbmdlT25seShhLCBiKSB7XG4gIGlmIChhLnBhdGhuYW1lICE9PSBiLnBhdGhuYW1lIHx8IGEuc2VhcmNoICE9PSBiLnNlYXJjaCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYS5oYXNoID09PSBcIlwiKSB7XG4gICAgLy8gL3BhZ2UgLT4gL3BhZ2UjaGFzaFxuICAgIHJldHVybiBiLmhhc2ggIT09IFwiXCI7XG4gIH0gZWxzZSBpZiAoYS5oYXNoID09PSBiLmhhc2gpIHtcbiAgICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlI2hhc2hcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChiLmhhc2ggIT09IFwiXCIpIHtcbiAgICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlI290aGVyXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gSWYgdGhlIGhhc2ggaXMgcmVtb3ZlZCB0aGUgYnJvd3NlciB3aWxsIHJlLXBlcmZvcm0gYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXJcbiAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZGVmZXJyZWQ7XG59XG5mdW5jdGlvbiBpc0Vycm9yUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3I7XG59XG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gKHJlc3VsdCAmJiByZXN1bHQudHlwZSkgPT09IFJlc3VsdFR5cGUucmVkaXJlY3Q7XG59XG5mdW5jdGlvbiBpc0RlZmVycmVkRGF0YSh2YWx1ZSkge1xuICBsZXQgZGVmZXJyZWQgPSB2YWx1ZTtcbiAgcmV0dXJuIGRlZmVycmVkICYmIHR5cGVvZiBkZWZlcnJlZCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZGVmZXJyZWQuZGF0YSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZGVmZXJyZWQuc3Vic2NyaWJlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGRlZmVycmVkLmNhbmNlbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBkZWZlcnJlZC5yZXNvbHZlRGF0YSA9PT0gXCJmdW5jdGlvblwiO1xufVxuZnVuY3Rpb24gaXNSZXNwb25zZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUuc3RhdHVzID09PSBcIm51bWJlclwiICYmIHR5cGVvZiB2YWx1ZS5zdGF0dXNUZXh0ID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiB2YWx1ZS5oZWFkZXJzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWx1ZS5ib2R5ICE9PSBcInVuZGVmaW5lZFwiO1xufVxuZnVuY3Rpb24gaXNSZWRpcmVjdFJlc3BvbnNlKHJlc3VsdCkge1xuICBpZiAoIWlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgc3RhdHVzID0gcmVzdWx0LnN0YXR1cztcbiAgbGV0IGxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gIHJldHVybiBzdGF0dXMgPj0gMzAwICYmIHN0YXR1cyA8PSAzOTkgJiYgbG9jYXRpb24gIT0gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzUXVlcnlSb3V0ZVJlc3BvbnNlKG9iaikge1xuICByZXR1cm4gb2JqICYmIGlzUmVzcG9uc2Uob2JqLnJlc3BvbnNlKSAmJiAob2JqLnR5cGUgPT09IFJlc3VsdFR5cGUuZGF0YSB8fCBvYmoudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcik7XG59XG5mdW5jdGlvbiBpc1ZhbGlkTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gdmFsaWRSZXF1ZXN0TWV0aG9kcy5oYXMobWV0aG9kLnRvTG93ZXJDYXNlKCkpO1xufVxuZnVuY3Rpb24gaXNNdXRhdGlvbk1ldGhvZChtZXRob2QpIHtcbiAgcmV0dXJuIHZhbGlkTXV0YXRpb25NZXRob2RzLmhhcyhtZXRob2QudG9Mb3dlckNhc2UoKSk7XG59XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBzaWduYWxzLCBpc0ZldGNoZXIsIGN1cnJlbnRMb2FkZXJEYXRhKSB7XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXN1bHRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCByZXN1bHQgPSByZXN1bHRzW2luZGV4XTtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaGVzVG9Mb2FkW2luZGV4XTtcbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgbWF0Y2gsIHRoZW4gd2UgY2FuIGhhdmUgYSBkZWZlcnJlZCByZXN1bHQgdG8gZG9cbiAgICAvLyBhbnl0aGluZyB3aXRoLiAgVGhpcyBpcyBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXJzIHdoZXJlIHRoZSByb3V0ZSB3YXNcbiAgICAvLyByZW1vdmVkIGR1cmluZyBITVJcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgbGV0IGN1cnJlbnRNYXRjaCA9IGN1cnJlbnRNYXRjaGVzLmZpbmQobSA9PiBtLnJvdXRlLmlkID09PSBtYXRjaC5yb3V0ZS5pZCk7XG4gICAgbGV0IGlzUmV2YWxpZGF0aW5nTG9hZGVyID0gY3VycmVudE1hdGNoICE9IG51bGwgJiYgIWlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50TWF0Y2gsIG1hdGNoKSAmJiAoY3VycmVudExvYWRlckRhdGEgJiYgY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdKSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkgJiYgKGlzRmV0Y2hlciB8fCBpc1JldmFsaWRhdGluZ0xvYWRlcikpIHtcbiAgICAgIC8vIE5vdGU6IHdlIGRvIG5vdCBoYXZlIHRvIHRvdWNoIGFjdGl2ZURlZmVycmVkcyBoZXJlIHNpbmNlIHdlIHJhY2UgdGhlbVxuICAgICAgLy8gYWdhaW5zdCB0aGUgc2lnbmFsIGluIHJlc29sdmVEZWZlcnJlZERhdGEgYW5kIHRoZXknbGwgZ2V0IGFib3J0ZWRcbiAgICAgIC8vIHRoZXJlIGlmIG5lZWRlZFxuICAgICAgbGV0IHNpZ25hbCA9IHNpZ25hbHNbaW5kZXhdO1xuICAgICAgaW52YXJpYW50KHNpZ25hbCwgXCJFeHBlY3RlZCBhbiBBYm9ydFNpZ25hbCBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXIgZGVmZXJyZWQgcmVzdWx0XCIpO1xuICAgICAgYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgaXNGZXRjaGVyKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdCB8fCByZXN1bHRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgc2lnbmFsLCB1bndyYXApIHtcbiAgaWYgKHVud3JhcCA9PT0gdm9pZCAwKSB7XG4gICAgdW53cmFwID0gZmFsc2U7XG4gIH1cbiAgbGV0IGFib3J0ZWQgPSBhd2FpdCByZXN1bHQuZGVmZXJyZWREYXRhLnJlc29sdmVEYXRhKHNpZ25hbCk7XG4gIGlmIChhYm9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh1bndyYXApIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICBkYXRhOiByZXN1bHQuZGVmZXJyZWREYXRhLnVud3JhcHBlZERhdGFcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSGFuZGxlIGFueSBUcmFja2VkUHJvbWlzZS5fZXJyb3IgdmFsdWVzIGVuY291bnRlcmVkIHdoaWxlIHVud3JhcHBpbmdcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICBkYXRhOiByZXN1bHQuZGVmZXJyZWREYXRhLmRhdGFcbiAgfTtcbn1cbmZ1bmN0aW9uIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2gpIHtcbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKS5nZXRBbGwoXCJpbmRleFwiKS5zb21lKHYgPT4gdiA9PT0gXCJcIik7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbikge1xuICBsZXQgc2VhcmNoID0gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uKS5zZWFyY2ggOiBsb2NhdGlvbi5zZWFyY2g7XG4gIGlmIChtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuaW5kZXggJiYgaGFzTmFrZWRJbmRleFF1ZXJ5KHNlYXJjaCB8fCBcIlwiKSkge1xuICAgIC8vIFJldHVybiB0aGUgbGVhZiBpbmRleCByb3V0ZSB3aGVuIGluZGV4IGlzIHByZXNlbnRcbiAgICByZXR1cm4gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICB9XG4gIC8vIE90aGVyd2lzZSBncmFiIHRoZSBkZWVwZXN0IFwicGF0aCBjb250cmlidXRpbmdcIiBtYXRjaCAoaWdub3JpbmcgaW5kZXggYW5kXG4gIC8vIHBhdGhsZXNzIGxheW91dCByb3V0ZXMpXG4gIGxldCBwYXRoTWF0Y2hlcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpO1xuICByZXR1cm4gcGF0aE1hdGNoZXNbcGF0aE1hdGNoZXMubGVuZ3RoIC0gMV07XG59XG5mdW5jdGlvbiBnZXRTdWJtaXNzaW9uRnJvbU5hdmlnYXRpb24obmF2aWdhdGlvbikge1xuICBsZXQge1xuICAgIGZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZSxcbiAgICB0ZXh0LFxuICAgIGZvcm1EYXRhLFxuICAgIGpzb25cbiAgfSA9IG5hdmlnYXRpb247XG4gIGlmICghZm9ybU1ldGhvZCB8fCAhZm9ybUFjdGlvbiB8fCAhZm9ybUVuY1R5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHRleHQgIT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHRcbiAgICB9O1xuICB9IGVsc2UgaWYgKGZvcm1EYXRhICE9IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfSBlbHNlIGlmIChqc29uICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uLFxuICAgICAgdGV4dDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0TG9hZGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pIHtcbiAgaWYgKHN1Ym1pc3Npb24pIHtcbiAgICBsZXQgbmF2aWdhdGlvbiA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZm9ybU1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogc3VibWlzc2lvbi5mb3JtRGF0YSxcbiAgICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dFxuICAgIH07XG4gICAgcmV0dXJuIG5hdmlnYXRpb247XG4gIH0gZWxzZSB7XG4gICAgbGV0IG5hdmlnYXRpb24gPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dDogdW5kZWZpbmVkXG4gICAgfTtcbiAgICByZXR1cm4gbmF2aWdhdGlvbjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3VibWl0dGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pIHtcbiAgbGV0IG5hdmlnYXRpb24gPSB7XG4gICAgc3RhdGU6IFwic3VibWl0dGluZ1wiLFxuICAgIGxvY2F0aW9uLFxuICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUsXG4gICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dFxuICB9O1xuICByZXR1cm4gbmF2aWdhdGlvbjtcbn1cbmZ1bmN0aW9uIGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGRhdGEpIHtcbiAgaWYgKHN1Ym1pc3Npb24pIHtcbiAgICBsZXQgZmV0Y2hlciA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHQsXG4gICAgICBkYXRhXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZmV0Y2hlciA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dDogdW5kZWZpbmVkLFxuICAgICAgZGF0YVxuICAgIH07XG4gICAgcmV0dXJuIGZldGNoZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN1Ym1pdHRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGV4aXN0aW5nRmV0Y2hlcikge1xuICBsZXQgZmV0Y2hlciA9IHtcbiAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCIsXG4gICAgZm9ybU1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICBmb3JtRGF0YTogc3VibWlzc2lvbi5mb3JtRGF0YSxcbiAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgdGV4dDogc3VibWlzc2lvbi50ZXh0LFxuICAgIGRhdGE6IGV4aXN0aW5nRmV0Y2hlciA/IGV4aXN0aW5nRmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkXG4gIH07XG4gIHJldHVybiBmZXRjaGVyO1xufVxuZnVuY3Rpb24gZ2V0RG9uZUZldGNoZXIoZGF0YSkge1xuICBsZXQgZmV0Y2hlciA9IHtcbiAgICBzdGF0ZTogXCJpZGxlXCIsXG4gICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAganNvbjogdW5kZWZpbmVkLFxuICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgICBkYXRhXG4gIH07XG4gIHJldHVybiBmZXRjaGVyO1xufVxuZnVuY3Rpb24gcmVzdG9yZUFwcGxpZWRUcmFuc2l0aW9ucyhfd2luZG93LCB0cmFuc2l0aW9ucykge1xuICB0cnkge1xuICAgIGxldCBzZXNzaW9uUG9zaXRpb25zID0gX3dpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFRSQU5TSVRJT05TX1NUT1JBR0VfS0VZKTtcbiAgICBpZiAoc2Vzc2lvblBvc2l0aW9ucykge1xuICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKHNlc3Npb25Qb3NpdGlvbnMpO1xuICAgICAgZm9yIChsZXQgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGpzb24gfHwge30pKSB7XG4gICAgICAgIGlmICh2ICYmIEFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgICAgICB0cmFuc2l0aW9ucy5zZXQoaywgbmV3IFNldCh2IHx8IFtdKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBuby1vcCwgdXNlIGRlZmF1bHQgZW1wdHkgb2JqZWN0XG4gIH1cbn1cbmZ1bmN0aW9uIHBlcnNpc3RBcHBsaWVkVHJhbnNpdGlvbnMoX3dpbmRvdywgdHJhbnNpdGlvbnMpIHtcbiAgaWYgKHRyYW5zaXRpb25zLnNpemUgPiAwKSB7XG4gICAgbGV0IGpzb24gPSB7fTtcbiAgICBmb3IgKGxldCBbaywgdl0gb2YgdHJhbnNpdGlvbnMpIHtcbiAgICAgIGpzb25ba10gPSBbLi4udl07XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBfd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oVFJBTlNJVElPTlNfU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KGpzb24pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJGYWlsZWQgdG8gc2F2ZSBhcHBsaWVkIHZpZXcgdHJhbnNpdGlvbnMgaW4gc2Vzc2lvblN0b3JhZ2UgKFwiICsgZXJyb3IgKyBcIikuXCIpO1xuICAgIH1cbiAgfVxufVxuLy8jZW5kcmVnaW9uXG5cbmV4cG9ydCB7IEFib3J0ZWREZWZlcnJlZEVycm9yLCBBY3Rpb24sIElETEVfQkxPQ0tFUiwgSURMRV9GRVRDSEVSLCBJRExFX05BVklHQVRJT04sIFVOU0FGRV9ERUZFUlJFRF9TWU1CT0wsIERlZmVycmVkRGF0YSBhcyBVTlNBRkVfRGVmZXJyZWREYXRhLCBFcnJvclJlc3BvbnNlSW1wbCBhcyBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwsIGNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoIGFzIFVOU0FGRV9jb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCwgY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyBhcyBVTlNBRkVfY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcywgZ2V0UmVzb2x2ZVRvTWF0Y2hlcyBhcyBVTlNBRkVfZ2V0UmVzb2x2ZVRvTWF0Y2hlcywgaW52YXJpYW50IGFzIFVOU0FGRV9pbnZhcmlhbnQsIHdhcm5pbmcgYXMgVU5TQUZFX3dhcm5pbmcsIGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlUGF0aCwgY3JlYXRlUm91dGVyLCBjcmVhdGVTdGF0aWNIYW5kbGVyLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBnZXRTdGF0aWNDb250ZXh0RnJvbUVycm9yLCBnZXRUb1BhdGhuYW1lLCBpc0RlZmVycmVkRGF0YSwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpvaW5QYXRocywganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgbm9ybWFsaXplUGF0aG5hbWUsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlZGlyZWN0RG9jdW1lbnQsIHJlc29sdmVQYXRoLCByZXNvbHZlVG8sIHN0cmlwQmFzZW5hbWUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlci5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIHY2LjIyLjBcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVU5TQUZFX2ludmFyaWFudCwgam9pblBhdGhzLCBtYXRjaFBhdGgsIFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzLCBVTlNBRkVfd2FybmluZywgcmVzb2x2ZVRvLCBwYXJzZVBhdGgsIG1hdGNoUm91dGVzLCBBY3Rpb24sIFVOU0FGRV9jb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCwgc3RyaXBCYXNlbmFtZSwgSURMRV9CTE9DS0VSLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgQWJvcnRlZERlZmVycmVkRXJyb3IsIGNyZWF0ZVJvdXRlciB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcbmV4cG9ydCB7IEFib3J0ZWREZWZlcnJlZEVycm9yLCBBY3Rpb24gYXMgTmF2aWdhdGlvblR5cGUsIGNyZWF0ZVBhdGgsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZWRpcmVjdERvY3VtZW50LCByZXNvbHZlUGF0aCB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbi8vIENyZWF0ZSByZWFjdC1zcGVjaWZpYyB0eXBlcyBmcm9tIHRoZSBhZ25vc3RpYyB0eXBlcyBpbiBAcmVtaXgtcnVuL3JvdXRlciB0b1xuLy8gZXhwb3J0IGZyb20gcmVhY3Qtcm91dGVyXG5jb25zdCBEYXRhUm91dGVyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRGF0YVJvdXRlclwiO1xufVxuY29uc3QgRGF0YVJvdXRlclN0YXRlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyU3RhdGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyU3RhdGVcIjtcbn1cbmNvbnN0IEF3YWl0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBBd2FpdENvbnRleHQuZGlzcGxheU5hbWUgPSBcIkF3YWl0XCI7XG59XG5cbi8qKlxuICogQSBOYXZpZ2F0b3IgaXMgYSBcImxvY2F0aW9uIGNoYW5nZXJcIjsgaXQncyBob3cgeW91IGdldCB0byBkaWZmZXJlbnQgbG9jYXRpb25zLlxuICpcbiAqIEV2ZXJ5IGhpc3RvcnkgaW5zdGFuY2UgY29uZm9ybXMgdG8gdGhlIE5hdmlnYXRvciBpbnRlcmZhY2UsIGJ1dCB0aGVcbiAqIGRpc3RpbmN0aW9uIGlzIHVzZWZ1bCBwcmltYXJpbHkgd2hlbiBpdCBjb21lcyB0byB0aGUgbG93LWxldmVsIGA8Um91dGVyPmAgQVBJXG4gKiB3aGVyZSBib3RoIHRoZSBsb2NhdGlvbiBhbmQgYSBuYXZpZ2F0b3IgbXVzdCBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGluIG9yZGVyXG4gKiB0byBhdm9pZCBcInRlYXJpbmdcIiB0aGF0IG1heSBvY2N1ciBpbiBhIHN1c3BlbnNlLWVuYWJsZWQgYXBwIGlmIHRoZSBhY3Rpb25cbiAqIGFuZC9vciBsb2NhdGlvbiB3ZXJlIHRvIGJlIHJlYWQgZGlyZWN0bHkgZnJvbSB0aGUgaGlzdG9yeSBpbnN0YW5jZS5cbiAqL1xuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZpZ2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTmF2aWdhdGlvblwiO1xufVxuY29uc3QgTG9jYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExvY2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTG9jYXRpb25cIjtcbn1cbmNvbnN0IFJvdXRlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgb3V0bGV0OiBudWxsLFxuICBtYXRjaGVzOiBbXSxcbiAgaXNEYXRhUm91dGU6IGZhbHNlXG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJSb3V0ZVwiO1xufVxuY29uc3QgUm91dGVFcnJvckNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVFcnJvckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlRXJyb3JcIjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmdWxsIGhyZWYgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIGZvciBidWlsZGluZ1xuICogY3VzdG9tIGxpbmtzIHRoYXQgYXJlIGFsc28gYWNjZXNzaWJsZSBhbmQgcHJlc2VydmUgcmlnaHQtY2xpY2sgYmVoYXZpb3IuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaHJlZlxuICovXG5mdW5jdGlvbiB1c2VIcmVmKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VIcmVmKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIGhhc2gsXG4gICAgcGF0aG5hbWUsXG4gICAgc2VhcmNoXG4gIH0gPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWU7XG5cbiAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgaHJlZi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhd1xuICAvLyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlXG4gIC8vIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGhuYW1lXSk7XG4gIH1cbiAgcmV0dXJuIG5hdmlnYXRvci5jcmVhdGVIcmVmKHtcbiAgICBwYXRobmFtZTogam9pbmVkUGF0aG5hbWUsXG4gICAgc2VhcmNoLFxuICAgIGhhc2hcbiAgfSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBhIGA8Um91dGVyPmAuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaW4tcm91dGVyLWNvbnRleHRcbiAqL1xuZnVuY3Rpb24gdXNlSW5Sb3V0ZXJDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpICE9IG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBsb2NhdGlvbiBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgVVJMIGluIHdlYlxuICogYnJvd3NlcnMuXG4gKlxuICogTm90ZTogSWYgeW91J3JlIHVzaW5nIHRoaXMgaXQgbWF5IG1lYW4geW91J3JlIGRvaW5nIHNvbWUgb2YgeW91ciBvd25cbiAqIFwicm91dGluZ1wiIGluIHlvdXIgYXBwLCBhbmQgd2UnZCBsaWtlIHRvIGtub3cgd2hhdCB5b3VyIHVzZSBjYXNlIGlzLiBXZSBtYXlcbiAqIGJlIGFibGUgdG8gcHJvdmlkZSBzb21ldGhpbmcgaGlnaGVyLWxldmVsIHRvIGJldHRlciBzdWl0IHlvdXIgbmVlZHMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbG9jYXRpb25cbiAqL1xuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTG9jYXRpb24oKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLmxvY2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBhY3Rpb24gd2hpY2ggZGVzY3JpYmVzIGhvdyB0aGUgcm91dGVyIGNhbWUgdG9cbiAqIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBlaXRoZXIgYnkgYSBwb3AsIHB1c2gsIG9yIHJlcGxhY2Ugb24gdGhlIGhpc3Rvcnkgc3RhY2suXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGlvbi10eXBlXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb25UeXBlKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLm5hdmlnYXRpb25UeXBlO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBQYXRoTWF0Y2ggb2JqZWN0IGlmIHRoZSBnaXZlbiBwYXR0ZXJuIG1hdGNoZXMgdGhlIGN1cnJlbnQgVVJMLlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIGtub3cgXCJhY3RpdmVcIiBzdGF0ZSwgZS5nLlxuICogYDxOYXZMaW5rPmAuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbWF0Y2hcbiAqL1xuZnVuY3Rpb24gdXNlTWF0Y2gocGF0dGVybikge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU1hdGNoKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBwYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gbWF0Y2hQYXRoKHBhdHRlcm4sIHBhdGhuYW1lKSwgW3BhdGhuYW1lLCBwYXR0ZXJuXSk7XG59XG5cbi8qKlxuICogVGhlIGludGVyZmFjZSBmb3IgdGhlIG5hdmlnYXRlKCkgZnVuY3Rpb24gcmV0dXJuZWQgZnJvbSB1c2VOYXZpZ2F0ZSgpLlxuICovXG5cbmNvbnN0IG5hdmlnYXRlRWZmZWN0V2FybmluZyA9IFwiWW91IHNob3VsZCBjYWxsIG5hdmlnYXRlKCkgaW4gYSBSZWFjdC51c2VFZmZlY3QoKSwgbm90IHdoZW4gXCIgKyBcInlvdXIgY29tcG9uZW50IGlzIGZpcnN0IHJlbmRlcmVkLlwiO1xuXG4vLyBNdXRlIHdhcm5pbmdzIGZvciBjYWxscyB0byB1c2VOYXZpZ2F0ZSBpbiBTU1IgZW52aXJvbm1lbnRzXG5mdW5jdGlvbiB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGNiKSB7XG4gIGxldCBpc1N0YXRpYyA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpLnN0YXRpYztcbiAgaWYgKCFpc1N0YXRpYykge1xuICAgIC8vIFdlIHNob3VsZCBiZSBhYmxlIHRvIGdldCByaWQgb2YgdGhpcyBvbmNlIHJlYWN0IDE4LjMgaXMgcmVsZWFzZWRcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzI2Mzk1XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KGNiKTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYW4gaW1wZXJhdGl2ZSBtZXRob2QgZm9yIGNoYW5naW5nIHRoZSBsb2NhdGlvbi4gVXNlZCBieSBgPExpbms+YHMsIGJ1dFxuICogbWF5IGFsc28gYmUgdXNlZCBieSBvdGhlciBlbGVtZW50cyB0byBjaGFuZ2UgdGhlIGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW5hdmlnYXRlXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlKCkge1xuICBsZXQge1xuICAgIGlzRGF0YVJvdXRlXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIC8vIENvbmRpdGlvbmFsIHVzYWdlIGlzIE9LIGhlcmUgYmVjYXVzZSB0aGUgdXNhZ2Ugb2YgYSBkYXRhIHJvdXRlciBpcyBzdGF0aWNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gIHJldHVybiBpc0RhdGFSb3V0ZSA/IHVzZU5hdmlnYXRlU3RhYmxlKCkgOiB1c2VOYXZpZ2F0ZVVuc3RhYmxlKCk7XG59XG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZVVuc3RhYmxlKCkge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU5hdmlnYXRlKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgZnV0dXJlLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMobWF0Y2hlcywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKSk7XG4gIGxldCBhY3RpdmVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGFjdGl2ZVJlZi5jdXJyZW50LCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcpIDogdm9pZCAwO1xuXG4gICAgLy8gU2hvcnQgY2lyY3VpdCBoZXJlIHNpbmNlIGlmIHRoaXMgaGFwcGVucyBvbiBmaXJzdCByZW5kZXIgdGhlIG5hdmlnYXRlXG4gICAgLy8gaXMgdXNlbGVzcyBiZWNhdXNlIHdlIGhhdmVuJ3Qgd2lyZWQgdXAgb3VyIGhpc3RvcnkgbGlzdGVuZXIgeWV0XG4gICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIG9wdGlvbnMucmVsYXRpdmUgPT09IFwicGF0aFwiKTtcblxuICAgIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgICAvLyB0byBoYW5kaW5nIG9mZiB0byBoaXN0b3J5IChidXQgb25seSBpZiB3ZSdyZSBub3QgaW4gYSBkYXRhIHJvdXRlcixcbiAgICAvLyBvdGhlcndpc2UgaXQnbGwgcHJlcGVuZCB0aGUgYmFzZW5hbWUgaW5zaWRlIG9mIHRoZSByb3V0ZXIpLlxuICAgIC8vIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4gd2UgbmF2aWdhdGUgdG8gdGhlIHJhdyBiYXNlbmFtZVxuICAgIC8vIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYVxuICAgIC8vIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgbGlua3NcbiAgICBpZiAoZGF0YVJvdXRlckNvbnRleHQgPT0gbnVsbCAmJiBiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICAgIH1cbiAgICAoISFvcHRpb25zLnJlcGxhY2UgPyBuYXZpZ2F0b3IucmVwbGFjZSA6IG5hdmlnYXRvci5wdXNoKShwYXRoLCBvcHRpb25zLnN0YXRlLCBvcHRpb25zKTtcbiAgfSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgZGF0YVJvdXRlckNvbnRleHRdKTtcbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuY29uc3QgT3V0bGV0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvbnRleHQgKGlmIHByb3ZpZGVkKSBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXQtY29udGV4dFxuICovXG5mdW5jdGlvbiB1c2VPdXRsZXRDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChPdXRsZXRDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IGA8T3V0bGV0PmAgdG8gcmVuZGVyIGNoaWxkIHJvdXRlcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXRcbiAqL1xuZnVuY3Rpb24gdXNlT3V0bGV0KGNvbnRleHQpIHtcbiAgbGV0IG91dGxldCA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KS5vdXRsZXQ7XG4gIGlmIChvdXRsZXQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoT3V0bGV0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRcbiAgICB9LCBvdXRsZXQpO1xuICB9XG4gIHJldHVybiBvdXRsZXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2Yga2V5L3ZhbHVlIHBhaXJzIG9mIHRoZSBkeW5hbWljIHBhcmFtcyBmcm9tIHRoZSBjdXJyZW50XG4gKiBVUkwgdGhhdCB3ZXJlIG1hdGNoZWQgYnkgdGhlIHJvdXRlIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtcGFyYW1zXG4gKi9cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG59XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhdGhuYW1lIG9mIHRoZSBnaXZlbiBgdG9gIHZhbHVlIGFnYWluc3QgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtcmVzb2x2ZWQtcGF0aFxuICovXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIGZ1dHVyZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMobWF0Y2hlcywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKSk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmVdKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSByb3V0ZSB0aGF0IG1hdGNoZWQgdGhlIGN1cnJlbnQgbG9jYXRpb24sIHByZXBhcmVkXG4gKiB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHQgdG8gcmVuZGVyIHRoZSByZW1haW5kZXIgb2YgdGhlIHJvdXRlIHRyZWUuIFJvdXRlXG4gKiBlbGVtZW50cyBpbiB0aGUgdHJlZSBtdXN0IHJlbmRlciBhbiBgPE91dGxldD5gIHRvIHJlbmRlciB0aGVpciBjaGlsZCByb3V0ZSdzXG4gKiBlbGVtZW50LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJvdXRlc1xuICovXG5mdW5jdGlvbiB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZykge1xuICByZXR1cm4gdXNlUm91dGVzSW1wbChyb3V0ZXMsIGxvY2F0aW9uQXJnKTtcbn1cblxuLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gd2l0aCBhY2NlcHQgb3B0aW9uYWwgcGFyYW0gZm9yIFJvdXRlclByb3ZpZGVyIHVzYWdlXG5mdW5jdGlvbiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgbG9jYXRpb25BcmcsIGRhdGFSb3V0ZXJTdGF0ZSwgZnV0dXJlKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlUm91dGVzKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXM6IHBhcmVudE1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBwYXJlbnRNYXRjaGVzW3BhcmVudE1hdGNoZXMubGVuZ3RoIC0gMV07XG4gIGxldCBwYXJlbnRQYXJhbXMgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbiAgbGV0IHBhcmVudFBhdGhuYW1lID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWUgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFBhdGhuYW1lQmFzZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lQmFzZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50Um91dGUgPSByb3V0ZU1hdGNoICYmIHJvdXRlTWF0Y2gucm91dGU7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBZb3Ugd29uJ3QgZ2V0IGEgd2FybmluZyBhYm91dCAyIGRpZmZlcmVudCA8Um91dGVzPiB1bmRlciBhIDxSb3V0ZT5cbiAgICAvLyB3aXRob3V0IGEgdHJhaWxpbmcgKiwgYnV0IHRoaXMgaXMgYSBiZXN0LWVmZm9ydCB3YXJuaW5nIGFueXdheSBzaW5jZSB3ZVxuICAgIC8vIGNhbm5vdCBldmVuIGdpdmUgdGhlIHdhcm5pbmcgdW5sZXNzIHRoZXkgbGFuZCBhdCB0aGUgcGFyZW50IHJvdXRlLlxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vIDxSb3V0ZXM+XG4gICAgLy8gICB7LyogVGhpcyByb3V0ZSBwYXRoIE1VU1QgZW5kIHdpdGggLyogYmVjYXVzZSBvdGhlcndpc2VcbiAgICAvLyAgICAgICBpdCB3aWxsIG5ldmVyIG1hdGNoIC9ibG9nL3Bvc3QvMTIzICovfVxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nXCIgZWxlbWVudD17PEJsb2cgLz59IC8+XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2cvZmVlZFwiIGVsZW1lbnQ9ezxCbG9nRmVlZCAvPn0gLz5cbiAgICAvLyA8L1JvdXRlcz5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIEJsb2coKSB7XG4gICAgLy8gICByZXR1cm4gKFxuICAgIC8vICAgICA8Um91dGVzPlxuICAgIC8vICAgICAgIDxSb3V0ZSBwYXRoPVwicG9zdC86aWRcIiBlbGVtZW50PXs8UG9zdCAvPn0gLz5cbiAgICAvLyAgICAgPC9Sb3V0ZXM+XG4gICAgLy8gICApO1xuICAgIC8vIH1cbiAgICBsZXQgcGFyZW50UGF0aCA9IHBhcmVudFJvdXRlICYmIHBhcmVudFJvdXRlLnBhdGggfHwgXCJcIjtcbiAgICB3YXJuaW5nT25jZShwYXJlbnRQYXRobmFtZSwgIXBhcmVudFJvdXRlIHx8IHBhcmVudFBhdGguZW5kc1dpdGgoXCIqXCIpLCBcIllvdSByZW5kZXJlZCBkZXNjZW5kYW50IDxSb3V0ZXM+IChvciBjYWxsZWQgYHVzZVJvdXRlcygpYCkgYXQgXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRobmFtZSArIFwiXFxcIiAodW5kZXIgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4pIGJ1dCB0aGUgXCIpICsgXCJwYXJlbnQgcm91dGUgcGF0aCBoYXMgbm8gdHJhaWxpbmcgXFxcIipcXFwiLiBUaGlzIG1lYW5zIGlmIHlvdSBuYXZpZ2F0ZSBcIiArIFwiZGVlcGVyLCB0aGUgcGFyZW50IHdvbid0IG1hdGNoIGFueW1vcmUgYW5kIHRoZXJlZm9yZSB0aGUgY2hpbGQgXCIgKyBcInJvdXRlcyB3aWxsIG5ldmVyIHJlbmRlci5cXG5cXG5cIiArIChcIlBsZWFzZSBjaGFuZ2UgdGhlIHBhcmVudCA8Um91dGUgcGF0aD1cXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiPiB0byA8Um91dGUgXCIpICsgKFwicGF0aD1cXFwiXCIgKyAocGFyZW50UGF0aCA9PT0gXCIvXCIgPyBcIipcIiA6IHBhcmVudFBhdGggKyBcIi8qXCIpICsgXCJcXFwiPi5cIikpO1xuICB9XG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IGxvY2F0aW9uO1xuICBpZiAobG9jYXRpb25BcmcpIHtcbiAgICB2YXIgX3BhcnNlZExvY2F0aW9uQXJnJHBhO1xuICAgIGxldCBwYXJzZWRMb2NhdGlvbkFyZyA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgICAhKHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgfHwgKChfcGFyc2VkTG9jYXRpb25BcmckcGEgPSBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJzZWRMb2NhdGlvbkFyZyRwYS5zdGFydHNXaXRoKHBhcmVudFBhdGhuYW1lQmFzZSkpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsb2NhdGlvbiA9IHBhcnNlZExvY2F0aW9uQXJnO1xuICB9IGVsc2Uge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb25Gcm9tQ29udGV4dDtcbiAgfVxuICBsZXQgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIjtcbiAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gcGFyZW50UGF0aG5hbWVCYXNlID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UocGFyZW50UGF0aG5hbWVCYXNlLmxlbmd0aCkgfHwgXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzLCB7XG4gICAgcGF0aG5hbWU6IHJlbWFpbmluZ1BhdGhuYW1lXG4gIH0pO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcocGFyZW50Um91dGUgfHwgbWF0Y2hlcyAhPSBudWxsLCBcIk5vIHJvdXRlcyBtYXRjaGVkIGxvY2F0aW9uIFxcXCJcIiArIGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCArIFwiXFxcIiBcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcobWF0Y2hlcyA9PSBudWxsIHx8IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5lbGVtZW50ICE9PSB1bmRlZmluZWQgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLkNvbXBvbmVudCAhPT0gdW5kZWZpbmVkIHx8IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5sYXp5ICE9PSB1bmRlZmluZWQsIFwiTWF0Y2hlZCBsZWFmIHJvdXRlIGF0IGxvY2F0aW9uIFxcXCJcIiArIGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCArIFwiXFxcIiBcIiArIFwiZG9lcyBub3QgaGF2ZSBhbiBlbGVtZW50IG9yIENvbXBvbmVudC4gVGhpcyBtZWFucyBpdCB3aWxsIHJlbmRlciBhbiA8T3V0bGV0IC8+IHdpdGggYSBcIiArIFwibnVsbCB2YWx1ZSBieSBkZWZhdWx0IHJlc3VsdGluZyBpbiBhbiBcXFwiZW1wdHlcXFwiIHBhZ2UuXCIpIDogdm9pZCAwO1xuICB9XG4gIGxldCByZW5kZXJlZE1hdGNoZXMgPSBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzICYmIG1hdGNoZXMubWFwKG1hdGNoID0+IE9iamVjdC5hc3NpZ24oe30sIG1hdGNoLCB7XG4gICAgcGFyYW1zOiBPYmplY3QuYXNzaWduKHt9LCBwYXJlbnRQYXJhbXMsIG1hdGNoLnBhcmFtcyksXG4gICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbcGFyZW50UGF0aG5hbWVCYXNlLFxuICAgIC8vIFJlLWVuY29kZSBwYXRobmFtZXMgdGhhdCB3ZXJlIGRlY29kZWQgaW5zaWRlIG1hdGNoUm91dGVzXG4gICAgbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKG1hdGNoLnBhdGhuYW1lKS5wYXRobmFtZSA6IG1hdGNoLnBhdGhuYW1lXSksXG4gICAgcGF0aG5hbWVCYXNlOiBtYXRjaC5wYXRobmFtZUJhc2UgPT09IFwiL1wiID8gcGFyZW50UGF0aG5hbWVCYXNlIDogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsXG4gICAgLy8gUmUtZW5jb2RlIHBhdGhuYW1lcyB0aGF0IHdlcmUgZGVjb2RlZCBpbnNpZGUgbWF0Y2hSb3V0ZXNcbiAgICBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24obWF0Y2gucGF0aG5hbWVCYXNlKS5wYXRobmFtZSA6IG1hdGNoLnBhdGhuYW1lQmFzZV0pXG4gIH0pKSwgcGFyZW50TWF0Y2hlcywgZGF0YVJvdXRlclN0YXRlLCBmdXR1cmUpO1xuXG4gIC8vIFdoZW4gYSB1c2VyIHBhc3NlcyBpbiBhIGBsb2NhdGlvbkFyZ2AsIHRoZSBhc3NvY2lhdGVkIHJvdXRlcyBuZWVkIHRvXG4gIC8vIGJlIHdyYXBwZWQgaW4gYSBuZXcgYExvY2F0aW9uQ29udGV4dC5Qcm92aWRlcmAgaW4gb3JkZXIgZm9yIGB1c2VMb2NhdGlvbmBcbiAgLy8gdG8gdXNlIHRoZSBzY29wZWQgbG9jYXRpb24gaW5zdGVhZCBvZiB0aGUgZ2xvYmFsIGxvY2F0aW9uLlxuICBpZiAobG9jYXRpb25BcmcgJiYgcmVuZGVyZWRNYXRjaGVzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgbG9jYXRpb246IF9leHRlbmRzKHtcbiAgICAgICAgICBwYXRobmFtZTogXCIvXCIsXG4gICAgICAgICAgc2VhcmNoOiBcIlwiLFxuICAgICAgICAgIGhhc2g6IFwiXCIsXG4gICAgICAgICAgc3RhdGU6IG51bGwsXG4gICAgICAgICAga2V5OiBcImRlZmF1bHRcIlxuICAgICAgICB9LCBsb2NhdGlvbiksXG4gICAgICAgIG5hdmlnYXRpb25UeXBlOiBBY3Rpb24uUG9wXG4gICAgICB9XG4gICAgfSwgcmVuZGVyZWRNYXRjaGVzKTtcbiAgfVxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzO1xufVxuZnVuY3Rpb24gRGVmYXVsdEVycm9yQ29tcG9uZW50KCkge1xuICBsZXQgZXJyb3IgPSB1c2VSb3V0ZUVycm9yKCk7XG4gIGxldCBtZXNzYWdlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpID8gZXJyb3Iuc3RhdHVzICsgXCIgXCIgKyBlcnJvci5zdGF0dXNUZXh0IDogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBKU09OLnN0cmluZ2lmeShlcnJvcik7XG4gIGxldCBzdGFjayA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5zdGFjayA6IG51bGw7XG4gIGxldCBsaWdodGdyZXkgPSBcInJnYmEoMjAwLDIwMCwyMDAsIDAuNSlcIjtcbiAgbGV0IHByZVN0eWxlcyA9IHtcbiAgICBwYWRkaW5nOiBcIjAuNXJlbVwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIGxldCBjb2RlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMnB4IDRweFwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIGxldCBkZXZJbmZvID0gbnVsbDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBoYW5kbGVkIGJ5IFJlYWN0IFJvdXRlciBkZWZhdWx0IEVycm9yQm91bmRhcnk6XCIsIGVycm9yKTtcbiAgICBkZXZJbmZvID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBcIlxcdUQ4M0RcXHVEQ0JGIEhleSBkZXZlbG9wZXIgXFx1RDgzRFxcdURDNEJcIiksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicFwiLCBudWxsLCBcIllvdSBjYW4gcHJvdmlkZSBhIHdheSBiZXR0ZXIgVVggdGhhbiB0aGlzIHdoZW4geW91ciBhcHAgdGhyb3dzIGVycm9ycyBieSBwcm92aWRpbmcgeW91ciBvd24gXCIsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiY29kZVwiLCB7XG4gICAgICBzdHlsZTogY29kZVN0eWxlc1xuICAgIH0sIFwiRXJyb3JCb3VuZGFyeVwiKSwgXCIgb3JcIiwgXCIgXCIsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiY29kZVwiLCB7XG4gICAgICBzdHlsZTogY29kZVN0eWxlc1xuICAgIH0sIFwiZXJyb3JFbGVtZW50XCIpLCBcIiBwcm9wIG9uIHlvdXIgcm91dGUuXCIpKTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiaDJcIiwgbnVsbCwgXCJVbmV4cGVjdGVkIEFwcGxpY2F0aW9uIEVycm9yIVwiKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoM1wiLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIGZvbnRTdHlsZTogXCJpdGFsaWNcIlxuICAgIH1cbiAgfSwgbWVzc2FnZSksIHN0YWNrID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwcmVcIiwge1xuICAgIHN0eWxlOiBwcmVTdHlsZXNcbiAgfSwgc3RhY2spIDogbnVsbCwgZGV2SW5mbyk7XG59XG5jb25zdCBkZWZhdWx0RXJyb3JFbGVtZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEVycm9yQ29tcG9uZW50LCBudWxsKTtcbmNsYXNzIFJlbmRlckVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb24sXG4gICAgICBlcnJvcjogcHJvcHMuZXJyb3JcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IGVycm9yXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgIC8vIFdoZW4gd2UgZ2V0IGludG8gYW4gZXJyb3Igc3RhdGUsIHRoZSB1c2VyIHdpbGwgbGlrZWx5IGNsaWNrIFwiYmFja1wiIHRvIHRoZVxuICAgIC8vIHByZXZpb3VzIHBhZ2UgdGhhdCBkaWRuJ3QgaGF2ZSBhbiBlcnJvci4gQmVjYXVzZSB0aGlzIHdyYXBzIHRoZSBlbnRpcmVcbiAgICAvLyBhcHBsaWNhdGlvbiwgdGhhdCB3aWxsIGhhdmUgbm8gZWZmZWN0LS10aGUgZXJyb3IgcGFnZSBjb250aW51ZXMgdG8gZGlzcGxheS5cbiAgICAvLyBUaGlzIGdpdmVzIHVzIGEgbWVjaGFuaXNtIHRvIHJlY292ZXIgZnJvbSB0aGUgZXJyb3Igd2hlbiB0aGUgbG9jYXRpb24gY2hhbmdlcy5cbiAgICAvL1xuICAgIC8vIFdoZXRoZXIgd2UncmUgaW4gYW4gZXJyb3Igc3RhdGUgb3Igbm90LCB3ZSB1cGRhdGUgdGhlIGxvY2F0aW9uIGluIHN0YXRlXG4gICAgLy8gc28gdGhhdCB3aGVuIHdlIGFyZSBpbiBhbiBlcnJvciBzdGF0ZSwgaXQgZ2V0cyByZXNldCB3aGVuIGEgbmV3IGxvY2F0aW9uXG4gICAgLy8gY29tZXMgaW4gYW5kIHRoZSB1c2VyIHJlY292ZXJzIGZyb20gdGhlIGVycm9yLlxuICAgIGlmIChzdGF0ZS5sb2NhdGlvbiAhPT0gcHJvcHMubG9jYXRpb24gfHwgc3RhdGUucmV2YWxpZGF0aW9uICE9PSBcImlkbGVcIiAmJiBwcm9wcy5yZXZhbGlkYXRpb24gPT09IFwiaWRsZVwiKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogcHJvcHMuZXJyb3IsXG4gICAgICAgIGxvY2F0aW9uOiBwcm9wcy5sb2NhdGlvbixcbiAgICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb25cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgd2UncmUgbm90IGNoYW5naW5nIGxvY2F0aW9ucywgcHJlc2VydmUgdGhlIGxvY2F0aW9uIGJ1dCBzdGlsbCBzdXJmYWNlXG4gICAgLy8gYW55IG5ldyBlcnJvcnMgdGhhdCBtYXkgY29tZSB0aHJvdWdoLiBXZSByZXRhaW4gdGhlIGV4aXN0aW5nIGVycm9yLCB3ZSBkb1xuICAgIC8vIHRoaXMgYmVjYXVzZSB0aGUgZXJyb3IgcHJvdmlkZWQgZnJvbSB0aGUgYXBwIHN0YXRlIG1heSBiZSBjbGVhcmVkIHdpdGhvdXRcbiAgICAvLyB0aGUgbG9jYXRpb24gY2hhbmdpbmcuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvciAhPT0gdW5kZWZpbmVkID8gcHJvcHMuZXJyb3IgOiBzdGF0ZS5lcnJvcixcbiAgICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgIHJldmFsaWRhdGlvbjogcHJvcHMucmV2YWxpZGF0aW9uIHx8IHN0YXRlLnJldmFsaWRhdGlvblxuICAgIH07XG4gIH1cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJSZWFjdCBSb3V0ZXIgY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLCBlcnJvciwgZXJyb3JJbmZvKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZXJyb3IgIT09IHVuZGVmaW5lZCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMucHJvcHMucm91dGVDb250ZXh0XG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVFcnJvckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmVycm9yLFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgfSkpIDogdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfVxufVxuZnVuY3Rpb24gUmVuZGVyZWRSb3V0ZShfcmVmKSB7XG4gIGxldCB7XG4gICAgcm91dGVDb250ZXh0LFxuICAgIG1hdGNoLFxuICAgIGNoaWxkcmVuXG4gIH0gPSBfcmVmO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcblxuICAvLyBUcmFjayBob3cgZGVlcCB3ZSBnb3QgaW4gb3VyIHJlbmRlciBwYXNzIHRvIGVtdWxhdGUgU1NSIGNvbXBvbmVudERpZENhdGNoXG4gIC8vIGluIGEgRGF0YVN0YXRpY1JvdXRlclxuICBpZiAoZGF0YVJvdXRlckNvbnRleHQgJiYgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljICYmIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpY0NvbnRleHQgJiYgKG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBtYXRjaC5yb3V0ZS5FcnJvckJvdW5kYXJ5KSkge1xuICAgIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpY0NvbnRleHQuX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQgPSBtYXRjaC5yb3V0ZS5pZDtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHJvdXRlQ29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5mdW5jdGlvbiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGUsIGZ1dHVyZSkge1xuICB2YXIgX2RhdGFSb3V0ZXJTdGF0ZTI7XG4gIGlmIChwYXJlbnRNYXRjaGVzID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRNYXRjaGVzID0gW107XG4gIH1cbiAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgZGF0YVJvdXRlclN0YXRlID0gbnVsbDtcbiAgfVxuICBpZiAoZnV0dXJlID09PSB2b2lkIDApIHtcbiAgICBmdXR1cmUgPSBudWxsO1xuICB9XG4gIGlmIChtYXRjaGVzID09IG51bGwpIHtcbiAgICB2YXIgX2RhdGFSb3V0ZXJTdGF0ZTtcbiAgICBpZiAoKF9kYXRhUm91dGVyU3RhdGUgPSBkYXRhUm91dGVyU3RhdGUpICE9IG51bGwgJiYgX2RhdGFSb3V0ZXJTdGF0ZS5lcnJvcnMpIHtcbiAgICAgIC8vIERvbid0IGJhaWwgaWYgd2UgaGF2ZSBkYXRhIHJvdXRlciBlcnJvcnMgc28gd2UgY2FuIHJlbmRlciB0aGVtIGluIHRoZVxuICAgICAgLy8gYm91bmRhcnkuICBVc2UgdGhlIHByZS1tYXRjaGVkIChvciBzaGltbWVkKSBtYXRjaGVzXG4gICAgICBtYXRjaGVzID0gZGF0YVJvdXRlclN0YXRlLm1hdGNoZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gbWF0Y2hlcztcblxuICAvLyBJZiB3ZSBoYXZlIGRhdGEgZXJyb3JzLCB0cmltIG1hdGNoZXMgdG8gdGhlIGhpZ2hlc3QgZXJyb3IgYm91bmRhcnlcbiAgbGV0IGVycm9ycyA9IChfZGF0YVJvdXRlclN0YXRlMiA9IGRhdGFSb3V0ZXJTdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kYXRhUm91dGVyU3RhdGUyLmVycm9ycztcbiAgaWYgKGVycm9ycyAhPSBudWxsKSB7XG4gICAgbGV0IGVycm9ySW5kZXggPSByZW5kZXJlZE1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCAmJiAoZXJyb3JzID09IG51bGwgPyB2b2lkIDAgOiBlcnJvcnNbbS5yb3V0ZS5pZF0pKTtcbiAgICAhKGVycm9ySW5kZXggPj0gMCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIkNvdWxkIG5vdCBmaW5kIGEgbWF0Y2hpbmcgcm91dGUgZm9yIGVycm9ycyBvbiByb3V0ZSBJRHM6IFwiICsgT2JqZWN0LmtleXMoZXJyb3JzKS5qb2luKFwiLFwiKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZW5kZXJlZE1hdGNoZXMgPSByZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgTWF0aC5taW4ocmVuZGVyZWRNYXRjaGVzLmxlbmd0aCwgZXJyb3JJbmRleCArIDEpKTtcbiAgfVxuXG4gIC8vIElmIHdlJ3JlIGluIGEgcGFydGlhbCBoeWRyYXRpb24gbW9kZSwgZGV0ZWN0IGlmIHdlIG5lZWQgdG8gcmVuZGVyIGRvd24gdG9cbiAgLy8gYSBnaXZlbiBIeWRyYXRlRmFsbGJhY2sgd2hpbGUgd2UgbG9hZCB0aGUgcmVzdCBvZiB0aGUgaHlkcmF0aW9uIGRhdGFcbiAgbGV0IHJlbmRlckZhbGxiYWNrID0gZmFsc2U7XG4gIGxldCBmYWxsYmFja0luZGV4ID0gLTE7XG4gIGlmIChkYXRhUm91dGVyU3RhdGUgJiYgZnV0dXJlICYmIGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJlZE1hdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBtYXRjaCA9IHJlbmRlcmVkTWF0Y2hlc1tpXTtcbiAgICAgIC8vIFRyYWNrIHRoZSBkZWVwZXN0IGZhbGxiYWNrIHVwIHVudGlsIHRoZSBmaXJzdCByb3V0ZSB3aXRob3V0IGRhdGFcbiAgICAgIGlmIChtYXRjaC5yb3V0ZS5IeWRyYXRlRmFsbGJhY2sgfHwgbWF0Y2gucm91dGUuaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCkge1xuICAgICAgICBmYWxsYmFja0luZGV4ID0gaTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXRjaC5yb3V0ZS5pZCkge1xuICAgICAgICBsZXQge1xuICAgICAgICAgIGxvYWRlckRhdGEsXG4gICAgICAgICAgZXJyb3JzXG4gICAgICAgIH0gPSBkYXRhUm91dGVyU3RhdGU7XG4gICAgICAgIGxldCBuZWVkc1RvUnVuTG9hZGVyID0gbWF0Y2gucm91dGUubG9hZGVyICYmIGxvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID09PSB1bmRlZmluZWQgJiYgKCFlcnJvcnMgfHwgZXJyb3JzW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKG1hdGNoLnJvdXRlLmxhenkgfHwgbmVlZHNUb1J1bkxvYWRlcikge1xuICAgICAgICAgIC8vIFdlIGZvdW5kIHRoZSBmaXJzdCByb3V0ZSB0aGF0J3Mgbm90IHJlYWR5IHRvIHJlbmRlciAod2FpdGluZyBvblxuICAgICAgICAgIC8vIGxhenksIG9yIGhhcyBhIGxvYWRlciB0aGF0IGhhc24ndCBydW4geWV0KS4gIEZsYWcgdGhhdCB3ZSBuZWVkIHRvXG4gICAgICAgICAgLy8gcmVuZGVyIGEgZmFsbGJhY2sgYW5kIHJlbmRlciB1cCB1bnRpbCB0aGUgYXBwcm9wcmlhdGUgZmFsbGJhY2tcbiAgICAgICAgICByZW5kZXJGYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgaWYgKGZhbGxiYWNrSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgcmVuZGVyZWRNYXRjaGVzID0gcmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIGZhbGxiYWNrSW5kZXggKyAxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVuZGVyZWRNYXRjaGVzID0gW3JlbmRlcmVkTWF0Y2hlc1swXV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXMucmVkdWNlUmlnaHQoKG91dGxldCwgbWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgLy8gT25seSBkYXRhIHJvdXRlcnMgaGFuZGxlIGVycm9ycy9mYWxsYmFja3NcbiAgICBsZXQgZXJyb3I7XG4gICAgbGV0IHNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjayA9IGZhbHNlO1xuICAgIGxldCBlcnJvckVsZW1lbnQgPSBudWxsO1xuICAgIGxldCBoeWRyYXRlRmFsbGJhY2tFbGVtZW50ID0gbnVsbDtcbiAgICBpZiAoZGF0YVJvdXRlclN0YXRlKSB7XG4gICAgICBlcnJvciA9IGVycm9ycyAmJiBtYXRjaC5yb3V0ZS5pZCA/IGVycm9yc1ttYXRjaC5yb3V0ZS5pZF0gOiB1bmRlZmluZWQ7XG4gICAgICBlcnJvckVsZW1lbnQgPSBtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgZGVmYXVsdEVycm9yRWxlbWVudDtcbiAgICAgIGlmIChyZW5kZXJGYWxsYmFjaykge1xuICAgICAgICBpZiAoZmFsbGJhY2tJbmRleCA8IDAgJiYgaW5kZXggPT09IDApIHtcbiAgICAgICAgICB3YXJuaW5nT25jZShcInJvdXRlLWZhbGxiYWNrXCIsIGZhbHNlLCBcIk5vIGBIeWRyYXRlRmFsbGJhY2tgIGVsZW1lbnQgcHJvdmlkZWQgdG8gcmVuZGVyIGR1cmluZyBpbml0aWFsIGh5ZHJhdGlvblwiKTtcbiAgICAgICAgICBzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgIGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGZhbGxiYWNrSW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgICAgc2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgICBoeWRyYXRlRmFsbGJhY2tFbGVtZW50ID0gbWF0Y2gucm91dGUuaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBtYXRjaGVzID0gcGFyZW50TWF0Y2hlcy5jb25jYXQocmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIGluZGV4ICsgMSkpO1xuICAgIGxldCBnZXRDaGlsZHJlbiA9ICgpID0+IHtcbiAgICAgIGxldCBjaGlsZHJlbjtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjaGlsZHJlbiA9IGVycm9yRWxlbWVudDtcbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrKSB7XG4gICAgICAgIGNoaWxkcmVuID0gaHlkcmF0ZUZhbGxiYWNrRWxlbWVudDtcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2gucm91dGUuQ29tcG9uZW50KSB7XG4gICAgICAgIC8vIE5vdGU6IFRoaXMgaXMgYSBkZS1vcHRpbWl6ZWQgcGF0aCBzaW5jZSBSZWFjdCB3b24ndCByZS11c2UgdGhlXG4gICAgICAgIC8vIFJlYWN0RWxlbWVudCBzaW5jZSBpdCdzIGlkZW50aXR5IGNoYW5nZXMgd2l0aCBlYWNoIG5ld1xuICAgICAgICAvLyBSZWFjdC5jcmVhdGVFbGVtZW50IGNhbGwuICBXZSBrZWVwIHRoaXMgc28gZm9sa3MgY2FuIHVzZVxuICAgICAgICAvLyBgPFJvdXRlIENvbXBvbmVudD17Li4ufT5gIGluIGA8Um91dGVzPmAgYnV0IGdlbmVyYWxseSBgQ29tcG9uZW50YFxuICAgICAgICAvLyB1c2FnZSBpcyBvbmx5IGFkdmlzZWQgaW4gYFJvdXRlclByb3ZpZGVyYCB3aGVuIHdlIGNhbiBjb252ZXJ0IGl0IHRvXG4gICAgICAgIC8vIGBlbGVtZW50YCBhaGVhZCBvZiB0aW1lLlxuICAgICAgICBjaGlsZHJlbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KG1hdGNoLnJvdXRlLkNvbXBvbmVudCwgbnVsbCk7XG4gICAgICB9IGVsc2UgaWYgKG1hdGNoLnJvdXRlLmVsZW1lbnQpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBtYXRjaC5yb3V0ZS5lbGVtZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGRyZW4gPSBvdXRsZXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVuZGVyZWRSb3V0ZSwge1xuICAgICAgICBtYXRjaDogbWF0Y2gsXG4gICAgICAgIHJvdXRlQ29udGV4dDoge1xuICAgICAgICAgIG91dGxldCxcbiAgICAgICAgICBtYXRjaGVzLFxuICAgICAgICAgIGlzRGF0YVJvdXRlOiBkYXRhUm91dGVyU3RhdGUgIT0gbnVsbFxuICAgICAgICB9LFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gT25seSB3cmFwIGluIGFuIGVycm9yIGJvdW5kYXJ5IHdpdGhpbiBkYXRhIHJvdXRlciB1c2FnZXMgd2hlbiB3ZSBoYXZlIGFuXG4gICAgLy8gRXJyb3JCb3VuZGFyeS9lcnJvckVsZW1lbnQgb24gdGhpcyByb3V0ZS4gIE90aGVyd2lzZSBsZXQgaXQgYnViYmxlIHVwIHRvXG4gICAgLy8gYW4gYW5jZXN0b3IgRXJyb3JCb3VuZGFyeS9lcnJvckVsZW1lbnRcbiAgICByZXR1cm4gZGF0YVJvdXRlclN0YXRlICYmIChtYXRjaC5yb3V0ZS5FcnJvckJvdW5kYXJ5IHx8IG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBpbmRleCA9PT0gMCkgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJFcnJvckJvdW5kYXJ5LCB7XG4gICAgICBsb2NhdGlvbjogZGF0YVJvdXRlclN0YXRlLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBkYXRhUm91dGVyU3RhdGUucmV2YWxpZGF0aW9uLFxuICAgICAgY29tcG9uZW50OiBlcnJvckVsZW1lbnQsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBjaGlsZHJlbjogZ2V0Q2hpbGRyZW4oKSxcbiAgICAgIHJvdXRlQ29udGV4dDoge1xuICAgICAgICBvdXRsZXQ6IG51bGwsXG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGlzRGF0YVJvdXRlOiB0cnVlXG4gICAgICB9XG4gICAgfSkgOiBnZXRDaGlsZHJlbigpO1xuICB9LCBudWxsKTtcbn1cbnZhciBEYXRhUm91dGVySG9vayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VCbG9ja2VyXCJdID0gXCJ1c2VCbG9ja2VyXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlUmV2YWxpZGF0b3JcIl0gPSBcInVzZVJldmFsaWRhdG9yXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlTmF2aWdhdGVTdGFibGVcIl0gPSBcInVzZU5hdmlnYXRlXCI7XG4gIHJldHVybiBEYXRhUm91dGVySG9vaztcbn0oRGF0YVJvdXRlckhvb2sgfHwge30pO1xudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUJsb2NrZXJcIl0gPSBcInVzZUJsb2NrZXJcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUxvYWRlckRhdGFcIl0gPSBcInVzZUxvYWRlckRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUFjdGlvbkRhdGFcIl0gPSBcInVzZUFjdGlvbkRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlRXJyb3JcIl0gPSBcInVzZVJvdXRlRXJyb3JcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU5hdmlnYXRpb25cIl0gPSBcInVzZU5hdmlnYXRpb25cIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlTG9hZGVyRGF0YVwiXSA9IFwidXNlUm91dGVMb2FkZXJEYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VNYXRjaGVzXCJdID0gXCJ1c2VNYXRjaGVzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSZXZhbGlkYXRvclwiXSA9IFwidXNlUmV2YWxpZGF0b3JcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU5hdmlnYXRlU3RhYmxlXCJdID0gXCJ1c2VOYXZpZ2F0ZVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVJZFwiXSA9IFwidXNlUm91dGVJZFwiO1xuICByZXR1cm4gRGF0YVJvdXRlclN0YXRlSG9vaztcbn0oRGF0YVJvdXRlclN0YXRlSG9vayB8fCB7fSk7XG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXJzL3BpY2tpbmctYS1yb3V0ZXIuXCI7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgY3R4ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHN0YXRlO1xufVxuZnVuY3Rpb24gdXNlUm91dGVDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByb3V0ZTtcbn1cblxuLy8gSW50ZXJuYWwgdmVyc2lvbiB3aXRoIGhvb2tOYW1lLWF3YXJlIGRlYnVnZ2luZ1xuZnVuY3Rpb24gdXNlQ3VycmVudFJvdXRlSWQoaG9va05hbWUpIHtcbiAgbGV0IHJvdXRlID0gdXNlUm91dGVDb250ZXh0KGhvb2tOYW1lKTtcbiAgbGV0IHRoaXNSb3V0ZSA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgIXRoaXNSb3V0ZS5yb3V0ZS5pZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGhvb2tOYW1lICsgXCIgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHRoaXNSb3V0ZS5yb3V0ZS5pZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBJRCBmb3IgdGhlIG5lYXJlc3QgY29udGV4dHVhbCByb3V0ZVxuICovXG5mdW5jdGlvbiB1c2VSb3V0ZUlkKCkge1xuICByZXR1cm4gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUlkKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IG5hdmlnYXRpb24sIGRlZmF1bHRpbmcgdG8gYW4gXCJpZGxlXCIgbmF2aWdhdGlvbiB3aGVuXG4gKiBubyBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb24oKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRpb24pO1xuICByZXR1cm4gc3RhdGUubmF2aWdhdGlvbjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmV2YWxpZGF0ZSBmdW5jdGlvbiBmb3IgbWFudWFsbHkgdHJpZ2dlcmluZyByZXZhbGlkYXRpb24sIGFzIHdlbGxcbiAqIGFzIHRoZSBjdXJyZW50IHN0YXRlIG9mIGFueSBtYW51YWwgcmV2YWxpZGF0aW9uc1xuICovXG5mdW5jdGlvbiB1c2VSZXZhbGlkYXRvcigpIHtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSZXZhbGlkYXRvcik7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgcmV2YWxpZGF0ZTogZGF0YVJvdXRlckNvbnRleHQucm91dGVyLnJldmFsaWRhdGUsXG4gICAgc3RhdGU6IHN0YXRlLnJldmFsaWRhdGlvblxuICB9KSwgW2RhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yZXZhbGlkYXRlLCBzdGF0ZS5yZXZhbGlkYXRpb25dKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhY3RpdmUgcm91dGUgbWF0Y2hlcywgdXNlZnVsIGZvciBhY2Nlc3NpbmcgbG9hZGVyRGF0YSBmb3JcbiAqIHBhcmVudC9jaGlsZCByb3V0ZXMgb3IgdGhlIHJvdXRlIFwiaGFuZGxlXCIgcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gdXNlTWF0Y2hlcygpIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzLFxuICAgIGxvYWRlckRhdGFcbiAgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU1hdGNoZXMpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiBtYXRjaGVzLm1hcChtID0+IFVOU0FGRV9jb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaChtLCBsb2FkZXJEYXRhKSksIFttYXRjaGVzLCBsb2FkZXJEYXRhXSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGxvYWRlclxuICovXG5mdW5jdGlvbiB1c2VMb2FkZXJEYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuICBpZiAoc3RhdGUuZXJyb3JzICYmIHN0YXRlLmVycm9yc1tyb3V0ZUlkXSAhPSBudWxsKSB7XG4gICAgY29uc29sZS5lcnJvcihcIllvdSBjYW5ub3QgYHVzZUxvYWRlckRhdGFgIGluIGFuIGVycm9yRWxlbWVudCAocm91dGVJZDogXCIgKyByb3V0ZUlkICsgXCIpXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyRGF0YSBmb3IgdGhlIGdpdmVuIHJvdXRlSWRcbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVMb2FkZXJEYXRhKHJvdXRlSWQpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVMb2FkZXJEYXRhKTtcbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aW9uIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGFjdGlvblxuICovXG5mdW5jdGlvbiB1c2VBY3Rpb25EYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VBY3Rpb25EYXRhKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuICByZXR1cm4gc3RhdGUuYWN0aW9uRGF0YSA/IHN0YXRlLmFjdGlvbkRhdGFbcm91dGVJZF0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBlcnJvciwgd2hpY2ggY291bGQgYmUgYSBsb2FkZXIvYWN0aW9uXG4gKiBlcnJvciBvciBhIHJlbmRlciBlcnJvci4gIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgY2FsbGVkIGZyb20geW91clxuICogRXJyb3JCb3VuZGFyeS9lcnJvckVsZW1lbnQgdG8gZGlzcGxheSBhIHByb3BlciBlcnJvciBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiB1c2VSb3V0ZUVycm9yKCkge1xuICB2YXIgX3N0YXRlJGVycm9ycztcbiAgbGV0IGVycm9yID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUVycm9yQ29udGV4dCk7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlRXJyb3IpO1xuICBsZXQgcm91dGVJZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG5cbiAgLy8gSWYgdGhpcyB3YXMgYSByZW5kZXIgZXJyb3IsIHdlIHB1dCBpdCBpbiBhIFJvdXRlRXJyb3IgY29udGV4dCBpbnNpZGVcbiAgLy8gb2YgUmVuZGVyRXJyb3JCb3VuZGFyeVxuICBpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSBsb29rIGZvciBlcnJvcnMgZnJvbSBvdXIgZGF0YSByb3V0ZXIgc3RhdGVcbiAgcmV0dXJuIChfc3RhdGUkZXJyb3JzID0gc3RhdGUuZXJyb3JzKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJGVycm9yc1tyb3V0ZUlkXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBoYXBweS1wYXRoIGRhdGEgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciBgPEF3YWl0IC8+YCB2YWx1ZVxuICovXG5mdW5jdGlvbiB1c2VBc3luY1ZhbHVlKCkge1xuICBsZXQgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUuX2RhdGE7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZXJyb3IgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciBgPEF3YWl0IC8+YCB2YWx1ZVxuICovXG5mdW5jdGlvbiB1c2VBc3luY0Vycm9yKCkge1xuICBsZXQgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUuX2Vycm9yO1xufVxubGV0IGJsb2NrZXJJZCA9IDA7XG5cbi8qKlxuICogQWxsb3cgdGhlIGFwcGxpY2F0aW9uIHRvIGJsb2NrIG5hdmlnYXRpb25zIHdpdGhpbiB0aGUgU1BBIGFuZCBwcmVzZW50IHRoZVxuICogdXNlciBhIGNvbmZpcm1hdGlvbiBkaWFsb2cgdG8gY29uZmlybSB0aGUgbmF2aWdhdGlvbi4gIE1vc3RseSB1c2VkIHRvIGF2b2lkXG4gKiB1c2luZyBoYWxmLWZpbGxlZCBmb3JtIGRhdGEuICBUaGlzIGRvZXMgbm90IGhhbmRsZSBoYXJkLXJlbG9hZHMgb3JcbiAqIGNyb3NzLW9yaWdpbiBuYXZpZ2F0aW9ucy5cbiAqL1xuZnVuY3Rpb24gdXNlQmxvY2tlcihzaG91bGRCbG9jaykge1xuICBsZXQge1xuICAgIHJvdXRlcixcbiAgICBiYXNlbmFtZVxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlQmxvY2tlcik7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUJsb2NrZXIpO1xuICBsZXQgW2Jsb2NrZXJLZXksIHNldEJsb2NrZXJLZXldID0gUmVhY3QudXNlU3RhdGUoXCJcIik7XG4gIGxldCBibG9ja2VyRnVuY3Rpb24gPSBSZWFjdC51c2VDYWxsYmFjayhhcmcgPT4ge1xuICAgIGlmICh0eXBlb2Ygc2hvdWxkQmxvY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuICEhc2hvdWxkQmxvY2s7XG4gICAgfVxuICAgIGlmIChiYXNlbmFtZSA9PT0gXCIvXCIpIHtcbiAgICAgIHJldHVybiBzaG91bGRCbG9jayhhcmcpO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXkgcHJvdmlkZWQgdXMgYSBmdW5jdGlvbiBhbmQgd2UndmUgZ290IGFuIGFjdGl2ZSBiYXNlbmFtZSwgc3RyaXBcbiAgICAvLyBpdCBmcm9tIHRoZSBsb2NhdGlvbnMgd2UgZXhwb3NlIHRvIHRoZSB1c2VyIHRvIG1hdGNoIHRoZSBiZWhhdmlvciBvZlxuICAgIC8vIHVzZUxvY2F0aW9uXG4gICAgbGV0IHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9ID0gYXJnO1xuICAgIHJldHVybiBzaG91bGRCbG9jayh7XG4gICAgICBjdXJyZW50TG9jYXRpb246IF9leHRlbmRzKHt9LCBjdXJyZW50TG9jYXRpb24sIHtcbiAgICAgICAgcGF0aG5hbWU6IHN0cmlwQmFzZW5hbWUoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KSxcbiAgICAgIG5leHRMb2NhdGlvbjogX2V4dGVuZHMoe30sIG5leHRMb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogc3RyaXBCYXNlbmFtZShuZXh0TG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBuZXh0TG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0pO1xuICB9LCBbYmFzZW5hbWUsIHNob3VsZEJsb2NrXSk7XG5cbiAgLy8gVGhpcyBlZmZlY3QgaXMgaW4gY2hhcmdlIG9mIGJsb2NrZXIga2V5IGFzc2lnbm1lbnQgYW5kIGRlbGV0aW9uICh3aGljaCBpc1xuICAvLyB0aWdodGx5IGNvdXBsZWQgdG8gdGhlIGtleSlcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQga2V5ID0gU3RyaW5nKCsrYmxvY2tlcklkKTtcbiAgICBzZXRCbG9ja2VyS2V5KGtleSk7XG4gICAgcmV0dXJuICgpID0+IHJvdXRlci5kZWxldGVCbG9ja2VyKGtleSk7XG4gIH0sIFtyb3V0ZXJdKTtcblxuICAvLyBUaGlzIGVmZmVjdCBoYW5kbGVzIGFzc2lnbmluZyB0aGUgYmxvY2tlckZ1bmN0aW9uLiAgVGhpcyBpcyB0byBoYW5kbGVcbiAgLy8gdW5zdGFibGUgYmxvY2tlciBmdW5jdGlvbiBpZGVudGl0aWVzLCBhbmQgaGFwcGVucyBvbmx5IGFmdGVyIHRoZSBwcmlvclxuICAvLyBlZmZlY3Qgc28gd2UgZG9uJ3QgZ2V0IGFuIG9ycGhhbmVkIGJsb2NrZXJGdW5jdGlvbiBpbiB0aGUgcm91dGVyIHdpdGggYVxuICAvLyBrZXkgb2YgXCJcIi4gIFVudGlsIHRoZW4gd2UganVzdCBoYXZlIHRoZSBJRExFX0JMT0NLRVIuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXJLZXkgIT09IFwiXCIpIHtcbiAgICAgIHJvdXRlci5nZXRCbG9ja2VyKGJsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbik7XG4gICAgfVxuICB9LCBbcm91dGVyLCBibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb25dKTtcblxuICAvLyBQcmVmZXIgdGhlIGJsb2NrZXIgZnJvbSBgc3RhdGVgIG5vdCBgcm91dGVyLnN0YXRlYCBzaW5jZSBEYXRhUm91dGVyQ29udGV4dFxuICAvLyBpcyBtZW1vaXplZCBzbyB0aGlzIGVuc3VyZXMgd2UgdXBkYXRlIG9uIGJsb2NrZXIgc3RhdGUgdXBkYXRlc1xuICByZXR1cm4gYmxvY2tlcktleSAmJiBzdGF0ZS5ibG9ja2Vycy5oYXMoYmxvY2tlcktleSkgPyBzdGF0ZS5ibG9ja2Vycy5nZXQoYmxvY2tlcktleSkgOiBJRExFX0JMT0NLRVI7XG59XG5cbi8qKlxuICogU3RhYmxlIHZlcnNpb24gb2YgdXNlTmF2aWdhdGUgdGhhdCBpcyB1c2VkIHdoZW4gd2UgYXJlIGluIHRoZSBjb250ZXh0IG9mXG4gKiBhIFJvdXRlclByb3ZpZGVyLlxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZVN0YWJsZSgpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZU5hdmlnYXRlU3RhYmxlKTtcbiAgbGV0IGlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VOYXZpZ2F0ZVN0YWJsZSk7XG4gIGxldCBhY3RpdmVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGFjdGl2ZVJlZi5jdXJyZW50LCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcpIDogdm9pZCAwO1xuXG4gICAgLy8gU2hvcnQgY2lyY3VpdCBoZXJlIHNpbmNlIGlmIHRoaXMgaGFwcGVucyBvbiBmaXJzdCByZW5kZXIgdGhlIG5hdmlnYXRlXG4gICAgLy8gaXMgdXNlbGVzcyBiZWNhdXNlIHdlIGhhdmVuJ3Qgd2lyZWQgdXAgb3VyIHJvdXRlciBzdWJzY3JpYmVyIHlldFxuICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICByb3V0ZXIubmF2aWdhdGUodG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICByb3V0ZXIubmF2aWdhdGUodG8sIF9leHRlbmRzKHtcbiAgICAgICAgZnJvbVJvdXRlSWQ6IGlkXG4gICAgICB9LCBvcHRpb25zKSk7XG4gICAgfVxuICB9LCBbcm91dGVyLCBpZF0pO1xuICByZXR1cm4gbmF2aWdhdGU7XG59XG5jb25zdCBhbHJlYWR5V2FybmVkID0ge307XG5mdW5jdGlvbiB3YXJuaW5nT25jZShrZXksIGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kICYmICFhbHJlYWR5V2FybmVkW2tleV0pIHtcbiAgICBhbHJlYWR5V2FybmVkW2tleV0gPSB0cnVlO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBtZXNzYWdlKSA6IHZvaWQgMDtcbiAgfVxufVxuXG4vKipcbiAgV2VicGFjayArIFJlYWN0IDE3IGZhaWxzIHRvIGNvbXBpbGUgb24gYW55IG9mIHRoZSBmb2xsb3dpbmcgYmVjYXVzZSB3ZWJwYWNrXG4gIGNvbXBsYWlucyB0aGF0IGBzdGFydFRyYW5zaXRpb25gIGRvZXNuJ3QgZXhpc3QgaW4gYFJlYWN0YDpcbiAgKiBpbXBvcnQgeyBzdGFydFRyYW5zaXRpb24gfSBmcm9tIFwicmVhY3RcIlxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0LnN0YXJ0VHJhbnNpdGlvbigoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdFtcInN0YXJ0VHJhbnNpdGlvblwiXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBNb3ZpbmcgaXQgdG8gYSBjb25zdGFudCBzdWNoIGFzIHRoZSBmb2xsb3dpbmcgc29sdmVzIHRoZSBXZWJwYWNrL1JlYWN0IDE3IGlzc3VlOlxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG4gICAgU1RBUlRfVFJBTlNJVElPTiBpbiBSZWFjdCA/IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIEhvd2V2ZXIsIHRoYXQgaW50cm9kdWNlcyB3ZWJwYWNrL3RlcnNlciBtaW5pZmljYXRpb24gaXNzdWVzIGluIHByb2R1Y3Rpb24gYnVpbGRzXG4gIGluIFJlYWN0IDE4IHdoZXJlIG1pbmlmaWNhdGlvbi9vYmZ1c2NhdGlvbiBlbmRzIHVwIHJlbW92aW5nIHRoZSBjYWxsIG9mXG4gIFJlYWN0LnN0YXJ0VHJhbnNpdGlvbiBlbnRpcmVseSBmcm9tIHRoZSBmaXJzdCBoYWxmIG9mIHRoZSB0ZXJuYXJ5LiAgR3JhYmJpbmdcbiAgdGhpcyBleHBvcnRlZCByZWZlcmVuY2Ugb25jZSB1cCBmcm9udCByZXNvbHZlcyB0aGF0IGlzc3VlLlxuXG4gIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlYWN0LXJvdXRlci9pc3N1ZXMvMTA1NzlcbiovXG5jb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbmNvbnN0IHN0YXJ0VHJhbnNpdGlvbkltcGwgPSBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXTtcblxuLyoqXG4gKiBHaXZlbiBhIFJlbWl4IFJvdXRlciBpbnN0YW5jZSwgcmVuZGVyIHRoZSBhcHByb3ByaWF0ZSBVSVxuICovXG5mdW5jdGlvbiBSb3V0ZXJQcm92aWRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgZmFsbGJhY2tFbGVtZW50LFxuICAgIHJvdXRlcixcbiAgICBmdXR1cmVcbiAgfSA9IF9yZWY7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZShyb3V0ZXIuc3RhdGUpO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgaWYgKHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsKSB7XG4gICAgICBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICAgIH1cbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG5cbiAgLy8gTmVlZCB0byB1c2UgYSBsYXlvdXQgZWZmZWN0IGhlcmUgc28gd2UgYXJlIHN1YnNjcmliZWQgZWFybHkgZW5vdWdoIHRvXG4gIC8vIHBpY2sgdXAgb24gYW55IHJlbmRlci1kcml2ZW4gcmVkaXJlY3RzL25hdmlnYXRpb25zICh1c2VFZmZlY3QvPE5hdmlnYXRlPilcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHJvdXRlci5zdWJzY3JpYmUoc2V0U3RhdGUpLCBbcm91dGVyLCBzZXRTdGF0ZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbGxiYWNrRWxlbWVudCA9PSBudWxsIHx8ICFyb3V0ZXIuZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24sIFwiYDxSb3V0ZXJQcm92aWRlciBmYWxsYmFja0VsZW1lbnQ+YCBpcyBkZXByZWNhdGVkIHdoZW4gdXNpbmcgXCIgKyBcImB2N19wYXJ0aWFsSHlkcmF0aW9uYCwgdXNlIGEgYEh5ZHJhdGVGYWxsYmFja2AgY29tcG9uZW50IGluc3RlYWRcIikgOiB2b2lkIDA7XG4gICAgLy8gT25seSBsb2cgdGhpcyBvbmNlIG9uIGluaXRpYWwgbW91bnRcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcbiAgbGV0IG5hdmlnYXRvciA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogbiA9PiByb3V0ZXIubmF2aWdhdGUobiksXG4gICAgICBwdXNoOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pLFxuICAgICAgcmVwbGFjZTogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KVxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcbiAgbGV0IGJhc2VuYW1lID0gcm91dGVyLmJhc2VuYW1lIHx8IFwiL1wiO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgcm91dGVyLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IGZhbHNlLFxuICAgIGJhc2VuYW1lXG4gIH0pLCBbcm91dGVyLCBuYXZpZ2F0b3IsIGJhc2VuYW1lXSk7XG5cbiAgLy8gVGhlIGZyYWdtZW50IGFuZCB7bnVsbH0gaGVyZSBhcmUgaW1wb3J0YW50ISAgV2UgbmVlZCB0aGVtIHRvIGtlZXAgUmVhY3QgMTgnc1xuICAvLyB1c2VJZCBoYXBweSB3aGVuIHdlIGFyZSBzZXJ2ZXItcmVuZGVyaW5nIHNpbmNlIHdlIG1heSBoYXZlIGEgPHNjcmlwdD4gaGVyZVxuICAvLyBjb250YWluaW5nIHRoZSBoeWRyYXRlZCBzZXJ2ZXItc2lkZSBzdGF0aWNDb250ZXh0IChmcm9tIFN0YXRpY1JvdXRlclByb3ZpZGVyKS5cbiAgLy8gdXNlSWQgcmVsaWVzIG9uIHRoZSBjb21wb25lbnQgdHJlZSBzdHJ1Y3R1cmUgdG8gZ2VuZXJhdGUgZGV0ZXJtaW5pc3RpYyBpZCdzXG4gIC8vIHNvIHdlIG5lZWQgdG8gZW5zdXJlIGl0IHJlbWFpbnMgdGhlIHNhbWUgb24gdGhlIGNsaWVudCBldmVuIHRob3VnaFxuICAvLyB3ZSBkb24ndCBuZWVkIHRoZSA8c2NyaXB0PiB0YWdcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBkYXRhUm91dGVyQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVyU3RhdGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHN0YXRlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmhpc3RvcnlBY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBuYXZpZ2F0b3IsXG4gICAgZnV0dXJlOiB7XG4gICAgICB2N19yZWxhdGl2ZVNwbGF0UGF0aDogcm91dGVyLmZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aFxuICAgIH1cbiAgfSwgc3RhdGUuaW5pdGlhbGl6ZWQgfHwgcm91dGVyLmZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlcywge1xuICAgIHJvdXRlczogcm91dGVyLnJvdXRlcyxcbiAgICBmdXR1cmU6IHJvdXRlci5mdXR1cmUsXG4gICAgc3RhdGU6IHN0YXRlXG4gIH0pIDogZmFsbGJhY2tFbGVtZW50KSkpLCBudWxsKTtcbn1cbmZ1bmN0aW9uIERhdGFSb3V0ZXMoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXMsXG4gICAgZnV0dXJlLFxuICAgIHN0YXRlXG4gIH0gPSBfcmVmMjtcbiAgcmV0dXJuIHVzZVJvdXRlc0ltcGwocm91dGVzLCB1bmRlZmluZWQsIHN0YXRlLCBmdXR1cmUpO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgdGhhdCBzdG9yZXMgYWxsIGVudHJpZXMgaW4gbWVtb3J5LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVyLWNvbXBvbmVudHMvbWVtb3J5LXJvdXRlclxuICovXG5mdW5jdGlvbiBNZW1vcnlSb3V0ZXIoX3JlZjMpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBpbml0aWFsRW50cmllcyxcbiAgICBpbml0aWFsSW5kZXgsXG4gICAgZnV0dXJlXG4gIH0gPSBfcmVmMztcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlTWVtb3J5SGlzdG9yeSh7XG4gICAgICBpbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxJbmRleCxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5LFxuICAgIGZ1dHVyZTogZnV0dXJlXG4gIH0pO1xufVxuLyoqXG4gKiBDaGFuZ2VzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIE5vdGU6IFRoaXMgQVBJIGlzIG1vc3RseSB1c2VmdWwgaW4gUmVhY3QuQ29tcG9uZW50IHN1YmNsYXNzZXMgdGhhdCBhcmUgbm90XG4gKiBhYmxlIHRvIHVzZSBob29rcy4gSW4gZnVuY3Rpb25hbCBjb21wb25lbnRzLCB3ZSByZWNvbW1lbmQgeW91IHVzZSB0aGVcbiAqIGB1c2VOYXZpZ2F0ZWAgaG9vayBpbnN0ZWFkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiBOYXZpZ2F0ZShfcmVmNCkge1xuICBsZXQge1xuICAgIHRvLFxuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSA9IF9yZWY0O1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZlxuICAvLyB0aGUgcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcIjxOYXZpZ2F0ZT4gbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBmdXR1cmUsXG4gICAgc3RhdGljOiBpc1N0YXRpY1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKCFpc1N0YXRpYywgXCI8TmF2aWdhdGU+IG11c3Qgbm90IGJlIHVzZWQgb24gdGhlIGluaXRpYWwgcmVuZGVyIGluIGEgPFN0YXRpY1JvdXRlcj4uIFwiICsgXCJUaGlzIGlzIGEgbm8tb3AsIGJ1dCB5b3Ugc2hvdWxkIG1vZGlmeSB5b3VyIGNvZGUgc28gdGhlIDxOYXZpZ2F0ZT4gaXMgXCIgKyBcIm9ubHkgZXZlciByZW5kZXJlZCBpbiByZXNwb25zZSB0byBzb21lIHVzZXIgaW50ZXJhY3Rpb24gb3Igc3RhdGUgY2hhbmdlLlwiKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG5cbiAgLy8gUmVzb2x2ZSB0aGUgcGF0aCBvdXRzaWRlIG9mIHRoZSBlZmZlY3Qgc28gdGhhdCB3aGVuIGVmZmVjdHMgcnVuIHR3aWNlIGluXG4gIC8vIFN0cmljdE1vZGUgdGhleSBuYXZpZ2F0ZSB0byB0aGUgc2FtZSBwbGFjZVxuICBsZXQgcGF0aCA9IHJlc29sdmVUbyh0bywgVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMobWF0Y2hlcywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKSwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKTtcbiAgbGV0IGpzb25QYXRoID0gSlNPTi5zdHJpbmdpZnkocGF0aCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiBuYXZpZ2F0ZShKU09OLnBhcnNlKGpzb25QYXRoKSwge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgcmVsYXRpdmVcbiAgfSksIFtuYXZpZ2F0ZSwganNvblBhdGgsIHJlbGF0aXZlLCByZXBsYWNlLCBzdGF0ZV0pO1xuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogUmVuZGVycyB0aGUgY2hpbGQgcm91dGUncyBlbGVtZW50LCBpZiB0aGVyZSBpcyBvbmUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL291dGxldFxuICovXG5mdW5jdGlvbiBPdXRsZXQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZU91dGxldChwcm9wcy5jb250ZXh0KTtcbn1cbi8qKlxuICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlXG4gKi9cbmZ1bmN0aW9uIFJvdXRlKF9wcm9wcykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIkEgPFJvdXRlPiBpcyBvbmx5IGV2ZXIgdG8gYmUgdXNlZCBhcyB0aGUgY2hpbGQgb2YgPFJvdXRlcz4gZWxlbWVudCwgXCIgKyBcIm5ldmVyIHJlbmRlcmVkIGRpcmVjdGx5LiBQbGVhc2Ugd3JhcCB5b3VyIDxSb3V0ZT4gaW4gYSA8Um91dGVzPi5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA7XG59XG4vKipcbiAqIFByb3ZpZGVzIGxvY2F0aW9uIGNvbnRleHQgZm9yIHRoZSByZXN0IG9mIHRoZSBhcHAuXG4gKlxuICogTm90ZTogWW91IHVzdWFsbHkgd29uJ3QgcmVuZGVyIGEgYDxSb3V0ZXI+YCBkaXJlY3RseS4gSW5zdGVhZCwgeW91J2xsIHJlbmRlciBhXG4gKiByb3V0ZXIgdGhhdCBpcyBtb3JlIHNwZWNpZmljIHRvIHlvdXIgZW52aXJvbm1lbnQgc3VjaCBhcyBhIGA8QnJvd3NlclJvdXRlcj5gXG4gKiBpbiB3ZWIgYnJvd3NlcnMgb3IgYSBgPFN0YXRpY1JvdXRlcj5gIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVyLWNvbXBvbmVudHMvcm91dGVyXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcihfcmVmNSkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZVByb3AgPSBcIi9cIixcbiAgICBjaGlsZHJlbiA9IG51bGwsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICBuYXZpZ2F0aW9uVHlwZSA9IEFjdGlvbi5Qb3AsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcCA9IGZhbHNlLFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjU7XG4gICEhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgcmVuZGVyIGEgPFJvdXRlcj4gaW5zaWRlIGFub3RoZXIgPFJvdXRlcj4uXCIgKyBcIiBZb3Ugc2hvdWxkIG5ldmVyIGhhdmUgbW9yZSB0aGFuIG9uZSBpbiB5b3VyIGFwcC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAvLyBQcmVzZXJ2ZSB0cmFpbGluZyBzbGFzaGVzIG9uIGJhc2VuYW1lLCBzbyB3ZSBjYW4gbGV0IHRoZSB1c2VyIGNvbnRyb2xcbiAgLy8gdGhlIGVuZm9yY2VtZW50IG9mIHRyYWlsaW5nIHNsYXNoZXMgdGhyb3VnaG91dCB0aGUgYXBwXG4gIGxldCBiYXNlbmFtZSA9IGJhc2VuYW1lUHJvcC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcbiAgbGV0IG5hdmlnYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3AsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7XG4gICAgICB2N19yZWxhdGl2ZVNwbGF0UGF0aDogZmFsc2VcbiAgICB9LCBmdXR1cmUpXG4gIH0pLCBbYmFzZW5hbWUsIGZ1dHVyZSwgbmF2aWdhdG9yLCBzdGF0aWNQcm9wXSk7XG4gIGlmICh0eXBlb2YgbG9jYXRpb25Qcm9wID09PSBcInN0cmluZ1wiKSB7XG4gICAgbG9jYXRpb25Qcm9wID0gcGFyc2VQYXRoKGxvY2F0aW9uUHJvcCk7XG4gIH1cbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCIsXG4gICAgc3RhdGUgPSBudWxsLFxuICAgIGtleSA9IFwiZGVmYXVsdFwiXG4gIH0gPSBsb2NhdGlvblByb3A7XG4gIGxldCBsb2NhdGlvbkNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgdHJhaWxpbmdQYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKTtcbiAgICBpZiAodHJhaWxpbmdQYXRobmFtZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIHBhdGhuYW1lOiB0cmFpbGluZ1BhdGhuYW1lLFxuICAgICAgICBzZWFyY2gsXG4gICAgICAgIGhhc2gsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBrZXlcbiAgICAgIH0sXG4gICAgICBuYXZpZ2F0aW9uVHlwZVxuICAgIH07XG4gIH0sIFtiYXNlbmFtZSwgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCwgc3RhdGUsIGtleSwgbmF2aWdhdGlvblR5cGVdKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcobG9jYXRpb25Db250ZXh0ICE9IG51bGwsIFwiPFJvdXRlciBiYXNlbmFtZT1cXFwiXCIgKyBiYXNlbmFtZSArIFwiXFxcIj4gaXMgbm90IGFibGUgdG8gbWF0Y2ggdGhlIFVSTCBcIiArIChcIlxcXCJcIiArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaCArIFwiXFxcIiBiZWNhdXNlIGl0IGRvZXMgbm90IHN0YXJ0IHdpdGggdGhlIFwiKSArIFwiYmFzZW5hbWUsIHNvIHRoZSA8Um91dGVyPiB3b24ndCByZW5kZXIgYW55dGhpbmcuXCIpIDogdm9pZCAwO1xuICBpZiAobG9jYXRpb25Db250ZXh0ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2aWdhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbmF2aWdhdGlvbkNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHZhbHVlOiBsb2NhdGlvbkNvbnRleHRcbiAgfSkpO1xufVxuLyoqXG4gKiBBIGNvbnRhaW5lciBmb3IgYSBuZXN0ZWQgdHJlZSBvZiBgPFJvdXRlPmAgZWxlbWVudHMgdGhhdCByZW5kZXJzIHRoZSBicmFuY2hcbiAqIHRoYXQgYmVzdCBtYXRjaGVzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9yb3V0ZXNcbiAqL1xuZnVuY3Rpb24gUm91dGVzKF9yZWY2KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW4sXG4gICAgbG9jYXRpb25cbiAgfSA9IF9yZWY2O1xuICByZXR1cm4gdXNlUm91dGVzKGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbiksIGxvY2F0aW9uKTtcbn1cbi8qKlxuICogQ29tcG9uZW50IHRvIHVzZSBmb3IgcmVuZGVyaW5nIGxhemlseSBsb2FkZWQgZGF0YSBmcm9tIHJldHVybmluZyBkZWZlcigpXG4gKiBpbiBhIGxvYWRlciBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBBd2FpdChfcmVmNykge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGVycm9yRWxlbWVudCxcbiAgICByZXNvbHZlXG4gIH0gPSBfcmVmNztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0RXJyb3JCb3VuZGFyeSwge1xuICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgZXJyb3JFbGVtZW50OiBlcnJvckVsZW1lbnRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVzb2x2ZUF3YWl0LCBudWxsLCBjaGlsZHJlbikpO1xufVxudmFyIEF3YWl0UmVuZGVyU3RhdHVzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChBd2FpdFJlbmRlclN0YXR1cykge1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInBlbmRpbmdcIl0gPSAwXSA9IFwicGVuZGluZ1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcInN1Y2Nlc3NcIl0gPSAxXSA9IFwic3VjY2Vzc1wiO1xuICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1tcImVycm9yXCJdID0gMl0gPSBcImVycm9yXCI7XG4gIHJldHVybiBBd2FpdFJlbmRlclN0YXR1cztcbn0oQXdhaXRSZW5kZXJTdGF0dXMgfHwge30pO1xuY29uc3QgbmV2ZXJTZXR0bGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKCgpID0+IHt9KTtcbmNsYXNzIEF3YWl0RXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBlcnJvcjogbnVsbFxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvclxuICAgIH07XG4gIH1cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCI8QXdhaXQ+IGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXJcIiwgZXJyb3IsIGVycm9ySW5mbyk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGVycm9yRWxlbWVudCxcbiAgICAgIHJlc29sdmVcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgcHJvbWlzZSA9IG51bGw7XG4gICAgbGV0IHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgaWYgKCEocmVzb2x2ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAvLyBEaWRuJ3QgZ2V0IGEgcHJvbWlzZSAtIHByb3ZpZGUgYXMgYSByZXNvbHZlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgLy8gQ2F1Z2h0IGEgcmVuZGVyIGVycm9yLCBwcm92aWRlIGl0IGFzIGEgcmVqZWN0ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3I7XG4gICAgICBsZXQgcmVuZGVyRXJyb3IgPSB0aGlzLnN0YXRlLmVycm9yO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVqZWN0KCkuY2F0Y2goKCkgPT4ge30pOyAvLyBBdm9pZCB1bmhhbmRsZWQgcmVqZWN0aW9uIHdhcm5pbmdzXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHJlbmRlckVycm9yXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHJlc29sdmUuX3RyYWNrZWQpIHtcbiAgICAgIC8vIEFscmVhZHkgdHJhY2tlZCBwcm9taXNlIC0gY2hlY2sgY29udGVudHNcbiAgICAgIHByb21pc2UgPSByZXNvbHZlO1xuICAgICAgc3RhdHVzID0gcHJvbWlzZS5fZXJyb3IgIT09IHVuZGVmaW5lZCA/IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yIDogcHJvbWlzZS5fZGF0YSAhPT0gdW5kZWZpbmVkID8gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2VzcyA6IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJhdyAodW50cmFja2VkKSBwcm9taXNlIC0gdHJhY2sgaXRcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBwcm9taXNlID0gcmVzb2x2ZS50aGVuKGRhdGEgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX2RhdGFcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGRhdGFcbiAgICAgIH0pLCBlcnJvciA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KSk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yICYmIHByb21pc2UuX2Vycm9yIGluc3RhbmNlb2YgQWJvcnRlZERlZmVycmVkRXJyb3IpIHtcbiAgICAgIC8vIEZyZWV6ZSB0aGUgVUkgYnkgdGhyb3dpbmcgYSBuZXZlciByZXNvbHZlZCBwcm9taXNlXG4gICAgICB0aHJvdyBuZXZlclNldHRsZWRQcm9taXNlO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiAhZXJyb3JFbGVtZW50KSB7XG4gICAgICAvLyBObyBlcnJvckVsZW1lbnQsIHRocm93IHRvIHRoZSBuZWFyZXN0IHJvdXRlLWxldmVsIGVycm9yIGJvdW5kYXJ5XG4gICAgICB0aHJvdyBwcm9taXNlLl9lcnJvcjtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IpIHtcbiAgICAgIC8vIFJlbmRlciB2aWEgb3VyIGVycm9yRWxlbWVudFxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvbWlzZSxcbiAgICAgICAgY2hpbGRyZW46IGVycm9yRWxlbWVudFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3MpIHtcbiAgICAgIC8vIFJlbmRlciBjaGlsZHJlbiB3aXRoIHJlc29sdmVkIHZhbHVlXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9taXNlLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRocm93IHRvIHRoZSBzdXNwZW5zZSBib3VuZGFyeVxuICAgIHRocm93IHByb21pc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogSW5kaXJlY3Rpb24gdG8gbGV2ZXJhZ2UgdXNlQXN5bmNWYWx1ZSBmb3IgYSByZW5kZXItcHJvcCBBUEkgb24gYDxBd2FpdD5gXG4gKi9cbmZ1bmN0aW9uIFJlc29sdmVBd2FpdChfcmVmOCkge1xuICBsZXQge1xuICAgIGNoaWxkcmVuXG4gIH0gPSBfcmVmODtcbiAgbGV0IGRhdGEgPSB1c2VBc3luY1ZhbHVlKCk7XG4gIGxldCB0b1JlbmRlciA9IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4oZGF0YSkgOiBjaGlsZHJlbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCB0b1JlbmRlcik7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFVUSUxTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQ3JlYXRlcyBhIHJvdXRlIGNvbmZpZyBmcm9tIGEgUmVhY3QgXCJjaGlsZHJlblwiIG9iamVjdCwgd2hpY2ggaXMgdXN1YWxseVxuICogZWl0aGVyIGEgYDxSb3V0ZT5gIGVsZW1lbnQgb3IgYW4gYXJyYXkgb2YgdGhlbS4gVXNlZCBpbnRlcm5hbGx5IGJ5XG4gKiBgPFJvdXRlcz5gIHRvIGNyZWF0ZSBhIHJvdXRlIGNvbmZpZyBmcm9tIGl0cyBjaGlsZHJlbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL2NyZWF0ZS1yb3V0ZXMtZnJvbS1jaGlsZHJlblxuICovXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4sIHBhcmVudFBhdGgpIHtcbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBbXTtcbiAgfVxuICBsZXQgcm91dGVzID0gW107XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgLy8gSWdub3JlIG5vbi1lbGVtZW50cy4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIG1vcmUgZWFzaWx5IGlubGluZVxuICAgICAgLy8gY29uZGl0aW9uYWxzIGluIHRoZWlyIHJvdXRlIGNvbmZpZy5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHRyZWVQYXRoID0gWy4uLnBhcmVudFBhdGgsIGluZGV4XTtcbiAgICBpZiAoZWxlbWVudC50eXBlID09PSBSZWFjdC5GcmFnbWVudCkge1xuICAgICAgLy8gVHJhbnNwYXJlbnRseSBzdXBwb3J0IFJlYWN0LkZyYWdtZW50IGFuZCBpdHMgY2hpbGRyZW4uXG4gICAgICByb3V0ZXMucHVzaC5hcHBseShyb3V0ZXMsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCB0cmVlUGF0aCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAhKGVsZW1lbnQudHlwZSA9PT0gUm91dGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJbXCIgKyAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gXCJzdHJpbmdcIiA/IGVsZW1lbnQudHlwZSA6IGVsZW1lbnQudHlwZS5uYW1lKSArIFwiXSBpcyBub3QgYSA8Um91dGU+IGNvbXBvbmVudC4gQWxsIGNvbXBvbmVudCBjaGlsZHJlbiBvZiA8Um91dGVzPiBtdXN0IGJlIGEgPFJvdXRlPiBvciA8UmVhY3QuRnJhZ21lbnQ+XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgISghZWxlbWVudC5wcm9wcy5pbmRleCB8fCAhZWxlbWVudC5wcm9wcy5jaGlsZHJlbikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIkFuIGluZGV4IHJvdXRlIGNhbm5vdCBoYXZlIGNoaWxkIHJvdXRlcy5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsZXQgcm91dGUgPSB7XG4gICAgICBpZDogZWxlbWVudC5wcm9wcy5pZCB8fCB0cmVlUGF0aC5qb2luKFwiLVwiKSxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGVsZW1lbnQucHJvcHMuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZWxlbWVudCxcbiAgICAgIENvbXBvbmVudDogZWxlbWVudC5wcm9wcy5Db21wb25lbnQsXG4gICAgICBpbmRleDogZWxlbWVudC5wcm9wcy5pbmRleCxcbiAgICAgIHBhdGg6IGVsZW1lbnQucHJvcHMucGF0aCxcbiAgICAgIGxvYWRlcjogZWxlbWVudC5wcm9wcy5sb2FkZXIsXG4gICAgICBhY3Rpb246IGVsZW1lbnQucHJvcHMuYWN0aW9uLFxuICAgICAgZXJyb3JFbGVtZW50OiBlbGVtZW50LnByb3BzLmVycm9yRWxlbWVudCxcbiAgICAgIEVycm9yQm91bmRhcnk6IGVsZW1lbnQucHJvcHMuRXJyb3JCb3VuZGFyeSxcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGVsZW1lbnQucHJvcHMuRXJyb3JCb3VuZGFyeSAhPSBudWxsIHx8IGVsZW1lbnQucHJvcHMuZXJyb3JFbGVtZW50ICE9IG51bGwsXG4gICAgICBzaG91bGRSZXZhbGlkYXRlOiBlbGVtZW50LnByb3BzLnNob3VsZFJldmFsaWRhdGUsXG4gICAgICBoYW5kbGU6IGVsZW1lbnQucHJvcHMuaGFuZGxlLFxuICAgICAgbGF6eTogZWxlbWVudC5wcm9wcy5sYXp5XG4gICAgfTtcbiAgICBpZiAoZWxlbWVudC5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgcm91dGUuY2hpbGRyZW4gPSBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgdHJlZVBhdGgpO1xuICAgIH1cbiAgICByb3V0ZXMucHVzaChyb3V0ZSk7XG4gIH0pO1xuICByZXR1cm4gcm91dGVzO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIHJlc3VsdCBvZiBgbWF0Y2hSb3V0ZXMoKWAgaW50byBhIFJlYWN0IGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlck1hdGNoZXMobWF0Y2hlcykge1xuICByZXR1cm4gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyk7XG59XG5cbmZ1bmN0aW9uIG1hcFJvdXRlUHJvcGVydGllcyhyb3V0ZSkge1xuICBsZXQgdXBkYXRlcyA9IHtcbiAgICAvLyBOb3RlOiB0aGlzIGNoZWNrIGFsc28gb2NjdXJzIGluIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiBzbyB1cGRhdGVcbiAgICAvLyB0aGVyZSBpZiB5b3UgY2hhbmdlIHRoaXMgLS0gcGxlYXNlIGFuZCB0aGFuayB5b3UhXG4gICAgaGFzRXJyb3JCb3VuZGFyeTogcm91dGUuRXJyb3JCb3VuZGFyeSAhPSBudWxsIHx8IHJvdXRlLmVycm9yRWxlbWVudCAhPSBudWxsXG4gIH07XG4gIGlmIChyb3V0ZS5Db21wb25lbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAocm91dGUuZWxlbWVudCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggYENvbXBvbmVudGAgYW5kIGBlbGVtZW50YCBvbiB5b3VyIHJvdXRlIC0gXCIgKyBcImBDb21wb25lbnRgIHdpbGwgYmUgdXNlZC5cIikgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24odXBkYXRlcywge1xuICAgICAgZWxlbWVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuQ29tcG9uZW50KSxcbiAgICAgIENvbXBvbmVudDogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH1cbiAgaWYgKHJvdXRlLkh5ZHJhdGVGYWxsYmFjaykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmIChyb3V0ZS5oeWRyYXRlRmFsbGJhY2tFbGVtZW50KSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIllvdSBzaG91bGQgbm90IGluY2x1ZGUgYm90aCBgSHlkcmF0ZUZhbGxiYWNrYCBhbmQgYGh5ZHJhdGVGYWxsYmFja0VsZW1lbnRgIG9uIHlvdXIgcm91dGUgLSBcIiArIFwiYEh5ZHJhdGVGYWxsYmFja2Agd2lsbCBiZSB1c2VkLlwiKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbih1cGRhdGVzLCB7XG4gICAgICBoeWRyYXRlRmFsbGJhY2tFbGVtZW50OiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZS5IeWRyYXRlRmFsbGJhY2spLFxuICAgICAgSHlkcmF0ZUZhbGxiYWNrOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfVxuICBpZiAocm91dGUuRXJyb3JCb3VuZGFyeSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmIChyb3V0ZS5lcnJvckVsZW1lbnQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgaW5jbHVkZSBib3RoIGBFcnJvckJvdW5kYXJ5YCBhbmQgYGVycm9yRWxlbWVudGAgb24geW91ciByb3V0ZSAtIFwiICsgXCJgRXJyb3JCb3VuZGFyeWAgd2lsbCBiZSB1c2VkLlwiKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbih1cGRhdGVzLCB7XG4gICAgICBlcnJvckVsZW1lbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJvdXRlLkVycm9yQm91bmRhcnkpLFxuICAgICAgRXJyb3JCb3VuZGFyeTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZXM7XG59XG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGZ1dHVyZTogX2V4dGVuZHMoe30sIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnV0dXJlLCB7XG4gICAgICB2N19wcmVwZW5kQmFzZW5hbWU6IHRydWVcbiAgICB9KSxcbiAgICBoaXN0b3J5OiBjcmVhdGVNZW1vcnlIaXN0b3J5KHtcbiAgICAgIGluaXRpYWxFbnRyaWVzOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEluZGV4OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmluaXRpYWxJbmRleFxuICAgIH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cblxuZXhwb3J0IHsgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE91dGxldCwgUm91dGUsIFJvdXRlciwgUm91dGVyUHJvdmlkZXIsIFJvdXRlcywgRGF0YVJvdXRlckNvbnRleHQgYXMgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LCBEYXRhUm91dGVyU3RhdGVDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBMb2NhdGlvbkNvbnRleHQgYXMgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgTmF2aWdhdGlvbkNvbnRleHQgYXMgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBSb3V0ZUNvbnRleHQgYXMgVU5TQUZFX1JvdXRlQ29udGV4dCwgbWFwUm91dGVQcm9wZXJ0aWVzIGFzIFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMsIHVzZVJvdXRlSWQgYXMgVU5TQUZFX3VzZVJvdXRlSWQsIHVzZVJvdXRlc0ltcGwgYXMgVU5TQUZFX3VzZVJvdXRlc0ltcGwsIGNyZWF0ZU1lbW9yeVJvdXRlciwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4gYXMgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLCByZW5kZXJNYXRjaGVzLCB1c2VBY3Rpb25EYXRhLCB1c2VBc3luY0Vycm9yLCB1c2VBc3luY1ZhbHVlLCB1c2VCbG9ja2VyLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvYWRlckRhdGEsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb24sIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSZXZhbGlkYXRvciwgdXNlUm91dGVFcnJvciwgdXNlUm91dGVMb2FkZXJEYXRhLCB1c2VSb3V0ZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgRE9NIHY2LjIyLjBcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMsIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIFJvdXRlciwgVU5TQUZFX3VzZVJvdXRlc0ltcGwsIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgdXNlSHJlZiwgdXNlUmVzb2x2ZWRQYXRoLCB1c2VMb2NhdGlvbiwgdXNlTmF2aWdhdGUsIGNyZWF0ZVBhdGgsIFVOU0FGRV91c2VSb3V0ZUlkLCBVTlNBRkVfUm91dGVDb250ZXh0LCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0aW9uLCB1c2VCbG9ja2VyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IEFib3J0ZWREZWZlcnJlZEVycm9yLCBBd2FpdCwgTWVtb3J5Um91dGVyLCBOYXZpZ2F0ZSwgTmF2aWdhdGlvblR5cGUsIE91dGxldCwgUm91dGUsIFJvdXRlciwgUm91dGVzLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIFVOU0FGRV91c2VSb3V0ZUlkLCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVkaXJlY3REb2N1bWVudCwgcmVuZGVyTWF0Y2hlcywgcmVzb2x2ZVBhdGgsIHVzZUFjdGlvbkRhdGEsIHVzZUFzeW5jRXJyb3IsIHVzZUFzeW5jVmFsdWUsIHVzZUJsb2NrZXIsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9hZGVyRGF0YSwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvbiwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJldmFsaWRhdG9yLCB1c2VSb3V0ZUVycm9yLCB1c2VSb3V0ZUxvYWRlckRhdGEsIHVzZVJvdXRlcyB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgeyBzdHJpcEJhc2VuYW1lLCBVTlNBRkVfd2FybmluZywgY3JlYXRlUm91dGVyLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIFVOU0FGRV9FcnJvclJlc3BvbnNlSW1wbCwgVU5TQUZFX2ludmFyaWFudCwgam9pblBhdGhzLCBJRExFX0ZFVENIRVIsIG1hdGNoUGF0aCB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5jb25zdCBkZWZhdWx0TWV0aG9kID0gXCJnZXRcIjtcbmNvbnN0IGRlZmF1bHRFbmNUeXBlID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIjtcbmZ1bmN0aW9uIGlzSHRtbEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0LnRhZ05hbWUgPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiBpc0J1dHRvbkVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJidXR0b25cIjtcbn1cbmZ1bmN0aW9uIGlzRm9ybUVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmb3JtXCI7XG59XG5mdW5jdGlvbiBpc0lucHV0RWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCI7XG59XG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuZnVuY3Rpb24gc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhldmVudCwgdGFyZ2V0KSB7XG4gIHJldHVybiBldmVudC5idXR0b24gPT09IDAgJiYgKFxuICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiZcbiAgLy8gTGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gSWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gaW5pdGlhbGl6ZXIuXG4gKlxuICogVGhpcyBpcyBpZGVudGljYWwgdG8gYG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5pdClgIGV4Y2VwdCBpdCBhbHNvXG4gKiBzdXBwb3J0cyBhcnJheXMgYXMgdmFsdWVzIGluIHRoZSBvYmplY3QgZm9ybSBvZiB0aGUgaW5pdGlhbGl6ZXJcbiAqIGluc3RlYWQgb2YganVzdCBzdHJpbmdzLiBUaGlzIGlzIGNvbnZlbmllbnQgd2hlbiB5b3UgbmVlZCBtdWx0aXBsZVxuICogdmFsdWVzIGZvciBhIGdpdmVuIGtleSwgYnV0IGRvbid0IHdhbnQgdG8gdXNlIGFuIGFycmF5IGluaXRpYWxpemVyLlxuICpcbiAqIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoW1xuICogICAgIFsnc29ydCcsICduYW1lJ10sXG4gKiAgICAgWydzb3J0JywgJ3ByaWNlJ11cbiAqICAgXSk7XG4gKlxuICogeW91IGNhbiBkbzpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMoe1xuICogICAgIHNvcnQ6IFsnbmFtZScsICdwcmljZSddXG4gKiAgIH0pO1xuICovXG5mdW5jdGlvbiBjcmVhdGVTZWFyY2hQYXJhbXMoaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IFwiXCI7XG4gIH1cbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXModHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShpbml0KSB8fCBpbml0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID8gaW5pdCA6IE9iamVjdC5rZXlzKGluaXQpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgbGV0IHZhbHVlID0gaW5pdFtrZXldO1xuICAgIHJldHVybiBtZW1vLmNvbmNhdChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCh2ID0+IFtrZXksIHZdKSA6IFtba2V5LCB2YWx1ZV1dKTtcbiAgfSwgW10pKTtcbn1cbmZ1bmN0aW9uIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uU2VhcmNoLCBkZWZhdWx0U2VhcmNoUGFyYW1zKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMobG9jYXRpb25TZWFyY2gpO1xuICBpZiAoZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICAgIC8vIFVzZSBgZGVmYXVsdFNlYXJjaFBhcmFtcy5mb3JFYWNoKC4uLilgIGhlcmUgaW5zdGVhZCBvZiBpdGVyYXRpbmcgb2ZcbiAgICAvLyBgZGVmYXVsdFNlYXJjaFBhcmFtcy5rZXlzKClgIHRvIHdvcmstYXJvdW5kIGEgYnVnIGluIEZpcmVmb3ggcmVsYXRlZCB0b1xuICAgIC8vIHdlYiBleHRlbnNpb25zLiBSZWxldmFudCBCdWd6aWxsYSB0aWNrZXRzOlxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MTQ2MDJcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDIzOTg0XG4gICAgZGVmYXVsdFNlYXJjaFBhcmFtcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmICghc2VhcmNoUGFyYW1zLmhhcyhrZXkpKSB7XG4gICAgICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZ2V0QWxsKGtleSkuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbn1cbi8vIE9uZS10aW1lIGNoZWNrIGZvciBzdWJtaXR0ZXIgc3VwcG9ydFxubGV0IF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gbnVsbDtcbmZ1bmN0aW9uIGlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQoKSB7XG4gIGlmIChfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9PT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICBuZXcgRm9ybURhdGEoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIiksXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGlmIEZvcm1EYXRhIHN1cHBvcnRzIHRoZSBzdWJtaXR0ZXIgcGFyYW1ldGVyLCB0aGlzIHdpbGwgdGhyb3dcbiAgICAgIDApO1xuICAgICAgX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPSBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlcjtcbn1cbmNvbnN0IHN1cHBvcnRlZEZvcm1FbmNUeXBlcyA9IG5ldyBTZXQoW1wiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLCBcInRleHQvcGxhaW5cIl0pO1xuZnVuY3Rpb24gZ2V0Rm9ybUVuY1R5cGUoZW5jVHlwZSkge1xuICBpZiAoZW5jVHlwZSAhPSBudWxsICYmICFzdXBwb3J0ZWRGb3JtRW5jVHlwZXMuaGFzKGVuY1R5cGUpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiXFxcIlwiICsgZW5jVHlwZSArIFwiXFxcIiBpcyBub3QgYSB2YWxpZCBgZW5jVHlwZWAgZm9yIGA8Rm9ybT5gL2A8ZmV0Y2hlci5Gb3JtPmAgXCIgKyAoXCJhbmQgd2lsbCBkZWZhdWx0IHRvIFxcXCJcIiArIGRlZmF1bHRFbmNUeXBlICsgXCJcXFwiXCIpKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gZW5jVHlwZTtcbn1cbmZ1bmN0aW9uIGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGJhc2VuYW1lKSB7XG4gIGxldCBtZXRob2Q7XG4gIGxldCBhY3Rpb247XG4gIGxldCBlbmNUeXBlO1xuICBsZXQgZm9ybURhdGE7XG4gIGxldCBib2R5O1xuICBpZiAoaXNGb3JtRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgLy8gV2hlbiBncmFiYmluZyB0aGUgYWN0aW9uIGZyb20gdGhlIGVsZW1lbnQsIGl0IHdpbGwgaGF2ZSBoYWQgdGhlIGJhc2VuYW1lXG4gICAgLy8gcHJlZml4ZWQgdG8gZW5zdXJlIG5vbi1KUyBzY2VuYXJpb3Mgd29yaywgc28gc3RyaXAgaXQgc2luY2Ugd2UnbGxcbiAgICAvLyByZS1wcmVmaXggaW4gdGhlIHJvdXRlclxuICAgIGxldCBhdHRyID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICBhY3Rpb24gPSBhdHRyID8gc3RyaXBCYXNlbmFtZShhdHRyLCBiYXNlbmFtZSkgOiBudWxsO1xuICAgIG1ldGhvZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBlbmNUeXBlID0gZ2V0Rm9ybUVuY1R5cGUodGFyZ2V0LmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKHRhcmdldCk7XG4gIH0gZWxzZSBpZiAoaXNCdXR0b25FbGVtZW50KHRhcmdldCkgfHwgaXNJbnB1dEVsZW1lbnQodGFyZ2V0KSAmJiAodGFyZ2V0LnR5cGUgPT09IFwic3VibWl0XCIgfHwgdGFyZ2V0LnR5cGUgPT09IFwiaW1hZ2VcIikpIHtcbiAgICBsZXQgZm9ybSA9IHRhcmdldC5mb3JtO1xuICAgIGlmIChmb3JtID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgYSA8YnV0dG9uPiBvciA8aW5wdXQgdHlwZT1cXFwic3VibWl0XFxcIj4gd2l0aG91dCBhIDxmb3JtPlwiKTtcbiAgICB9XG4gICAgLy8gPGJ1dHRvbj4vPGlucHV0IHR5cGU9XCJzdWJtaXRcIj4gbWF5IG92ZXJyaWRlIGF0dHJpYnV0ZXMgb2YgPGZvcm0+XG4gICAgLy8gV2hlbiBncmFiYmluZyB0aGUgYWN0aW9uIGZyb20gdGhlIGVsZW1lbnQsIGl0IHdpbGwgaGF2ZSBoYWQgdGhlIGJhc2VuYW1lXG4gICAgLy8gcHJlZml4ZWQgdG8gZW5zdXJlIG5vbi1KUyBzY2VuYXJpb3Mgd29yaywgc28gc3RyaXAgaXQgc2luY2Ugd2UnbGxcbiAgICAvLyByZS1wcmVmaXggaW4gdGhlIHJvdXRlclxuICAgIGxldCBhdHRyID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1hY3Rpb25cIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgYWN0aW9uID0gYXR0ciA/IHN0cmlwQmFzZW5hbWUoYXR0ciwgYmFzZW5hbWUpIDogbnVsbDtcbiAgICBtZXRob2QgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGVuY1R5cGUgPSBnZXRGb3JtRW5jVHlwZSh0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWVuY3R5cGVcIikpIHx8IGdldEZvcm1FbmNUeXBlKGZvcm0uZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSkgfHwgZGVmYXVsdEVuY1R5cGU7XG4gICAgLy8gQnVpbGQgYSBGb3JtRGF0YSBvYmplY3QgcG9wdWxhdGVkIGZyb20gYSBmb3JtIGFuZCBzdWJtaXR0ZXJcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtLCB0YXJnZXQpO1xuICAgIC8vIElmIHRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdGhlIGBGb3JtRGF0YShlbCwgc3VibWl0dGVyKWAgZm9ybWF0LFxuICAgIC8vIHRoZW4gdGFjayBvbiB0aGUgc3VibWl0dGVyIHZhbHVlIGF0IHRoZSBlbmQuICBUaGlzIGlzIGEgbGlnaHR3ZWlnaHRcbiAgICAvLyBzb2x1dGlvbiB0aGF0IGlzIG5vdCAxMDAlIHNwZWMgY29tcGxpYW50LiAgRm9yIGNvbXBsZXRlIHN1cHBvcnQgaW4gb2xkZXJcbiAgICAvLyBicm93c2VycywgY29uc2lkZXIgdXNpbmcgdGhlIGBmb3JtZGF0YS1zdWJtaXR0ZXItcG9seWZpbGxgIHBhY2thZ2VcbiAgICBpZiAoIWlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQoKSkge1xuICAgICAgbGV0IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdmFsdWVcbiAgICAgIH0gPSB0YXJnZXQ7XG4gICAgICBpZiAodHlwZSA9PT0gXCJpbWFnZVwiKSB7XG4gICAgICAgIGxldCBwcmVmaXggPSBuYW1lID8gbmFtZSArIFwiLlwiIDogXCJcIjtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKHByZWZpeCArIFwieFwiLCBcIjBcIik7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChwcmVmaXggKyBcInlcIiwgXCIwXCIpO1xuICAgICAgfSBlbHNlIGlmIChuYW1lKSB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSHRtbEVsZW1lbnQodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzdWJtaXQgZWxlbWVudCB0aGF0IGlzIG5vdCA8Zm9ybT4sIDxidXR0b24+LCBvciBcIiArIFwiPGlucHV0IHR5cGU9XFxcInN1Ym1pdHxpbWFnZVxcXCI+XCIpO1xuICB9IGVsc2Uge1xuICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gbnVsbDtcbiAgICBlbmNUeXBlID0gZGVmYXVsdEVuY1R5cGU7XG4gICAgYm9keSA9IHRhcmdldDtcbiAgfVxuICAvLyBTZW5kIGJvZHkgZm9yIDxGb3JtIGVuY1R5cGU9XCJ0ZXh0L3BsYWluXCIgc28gd2UgZW5jb2RlIGl0IGludG8gdGV4dFxuICBpZiAoZm9ybURhdGEgJiYgZW5jVHlwZSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICBib2R5ID0gZm9ybURhdGE7XG4gICAgZm9ybURhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBhY3Rpb24sXG4gICAgbWV0aG9kOiBtZXRob2QudG9Mb3dlckNhc2UoKSxcbiAgICBlbmNUeXBlLFxuICAgIGZvcm1EYXRhLFxuICAgIGJvZHlcbiAgfTtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DbGlja1wiLCBcInJlbGF0aXZlXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJ0YXJnZXRcIiwgXCJ0b1wiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiLCBcInVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXCJdLFxuICBfZXhjbHVkZWQyID0gW1wiYXJpYS1jdXJyZW50XCIsIFwiY2FzZVNlbnNpdGl2ZVwiLCBcImNsYXNzTmFtZVwiLCBcImVuZFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJ1bnN0YWJsZV92aWV3VHJhbnNpdGlvblwiLCBcImNoaWxkcmVuXCJdLFxuICBfZXhjbHVkZWQzID0gW1wiZmV0Y2hlcktleVwiLCBcIm5hdmlnYXRlXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJtZXRob2RcIiwgXCJhY3Rpb25cIiwgXCJvblN1Ym1pdFwiLCBcInJlbGF0aXZlXCIsIFwicHJldmVudFNjcm9sbFJlc2V0XCIsIFwidW5zdGFibGVfdmlld1RyYW5zaXRpb25cIl07XG4vLyBIRVkgWU9VISBET04nVCBUT1VDSCBUSElTIFZBUklBQkxFIVxuLy9cbi8vIEl0IGlzIHJlcGxhY2VkIHdpdGggdGhlIHByb3BlciB2ZXJzaW9uIGF0IGJ1aWxkIHRpbWUgdmlhIGEgYmFiZWwgcGx1Z2luIGluXG4vLyB0aGUgcm9sbHVwIGNvbmZpZy5cbi8vXG4vLyBFeHBvcnQgYSBnbG9iYWwgcHJvcGVydHkgb250byB0aGUgd2luZG93IGZvciBSZWFjdCBSb3V0ZXIgZGV0ZWN0aW9uIGJ5IHRoZVxuLy8gQ29yZSBXZWIgVml0YWxzIFRlY2hub2xvZ3kgUmVwb3J0LiAgVGhpcyB3YXkgdGhleSBjYW4gY29uZmlndXJlIHRoZSBgd2FwcGFseXplcmBcbi8vIHRvIGRldGVjdCBhbmQgcHJvcGVybHkgY2xhc3NpZnkgbGl2ZSB3ZWJzaXRlcyBhcyBiZWluZyBidWlsdCB3aXRoIFJlYWN0IFJvdXRlcjpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9IVFRQQXJjaGl2ZS93YXBwYWx5emVyL2Jsb2IvbWFpbi9zcmMvdGVjaG5vbG9naWVzL3IuanNvblxuY29uc3QgUkVBQ1RfUk9VVEVSX1ZFUlNJT04gPSBcIjZcIjtcbnRyeSB7XG4gIHdpbmRvdy5fX3JlYWN0Um91dGVyVmVyc2lvbiA9IFJFQUNUX1JPVVRFUl9WRVJTSU9OO1xufSBjYXRjaCAoZSkge1xuICAvLyBuby1vcFxufVxuZnVuY3Rpb24gY3JlYXRlQnJvd3NlclJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzOiBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuZnVuY3Rpb24gY3JlYXRlSGFzaFJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzOiBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuZnVuY3Rpb24gcGFyc2VIeWRyYXRpb25EYXRhKCkge1xuICB2YXIgX3dpbmRvdztcbiAgbGV0IHN0YXRlID0gKF93aW5kb3cgPSB3aW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93Ll9fc3RhdGljUm91dGVySHlkcmF0aW9uRGF0YTtcbiAgaWYgKHN0YXRlICYmIHN0YXRlLmVycm9ycykge1xuICAgIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICBlcnJvcnM6IGRlc2VyaWFsaXplRXJyb3JzKHN0YXRlLmVycm9ycylcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59XG5mdW5jdGlvbiBkZXNlcmlhbGl6ZUVycm9ycyhlcnJvcnMpIHtcbiAgaWYgKCFlcnJvcnMpIHJldHVybiBudWxsO1xuICBsZXQgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGVycm9ycyk7XG4gIGxldCBzZXJpYWxpemVkID0ge307XG4gIGZvciAobGV0IFtrZXksIHZhbF0gb2YgZW50cmllcykge1xuICAgIC8vIEhleSB5b3UhICBJZiB5b3UgY2hhbmdlIHRoaXMsIHBsZWFzZSBjaGFuZ2UgdGhlIGNvcnJlc3BvbmRpbmcgbG9naWMgaW5cbiAgICAvLyBzZXJpYWxpemVFcnJvcnMgaW4gcmVhY3Qtcm91dGVyLWRvbS9zZXJ2ZXIudHN4IDopXG4gICAgaWYgKHZhbCAmJiB2YWwuX190eXBlID09PSBcIlJvdXRlRXJyb3JSZXNwb25zZVwiKSB7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSBuZXcgVU5TQUZFX0Vycm9yUmVzcG9uc2VJbXBsKHZhbC5zdGF0dXMsIHZhbC5zdGF0dXNUZXh0LCB2YWwuZGF0YSwgdmFsLmludGVybmFsID09PSB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbCAmJiB2YWwuX190eXBlID09PSBcIkVycm9yXCIpIHtcbiAgICAgIC8vIEF0dGVtcHQgdG8gcmVjb25zdHJ1Y3QgdGhlIHJpZ2h0IHR5cGUgb2YgRXJyb3IgKGkuZS4sIFJlZmVyZW5jZUVycm9yKVxuICAgICAgaWYgKHZhbC5fX3N1YlR5cGUpIHtcbiAgICAgICAgbGV0IEVycm9yQ29uc3RydWN0b3IgPSB3aW5kb3dbdmFsLl9fc3ViVHlwZV07XG4gICAgICAgIGlmICh0eXBlb2YgRXJyb3JDb25zdHJ1Y3RvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGxldCBlcnJvciA9IG5ldyBFcnJvckNvbnN0cnVjdG9yKHZhbC5tZXNzYWdlKTtcbiAgICAgICAgICAgIC8vIFdpcGUgYXdheSB0aGUgY2xpZW50LXNpZGUgc3RhY2sgdHJhY2UuICBOb3RoaW5nIHRvIGZpbGwgaXQgaW4gd2l0aFxuICAgICAgICAgICAgLy8gYmVjYXVzZSB3ZSBkb24ndCBzZXJpYWxpemUgU1NSIHN0YWNrIHRyYWNlcyBmb3Igc2VjdXJpdHkgcmVhc29uc1xuICAgICAgICAgICAgZXJyb3Iuc3RhY2sgPSBcIlwiO1xuICAgICAgICAgICAgc2VyaWFsaXplZFtrZXldID0gZXJyb3I7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gbm8tb3AgLSBmYWxsIHRocm91Z2ggYW5kIGNyZWF0ZSBhIG5vcm1hbCBFcnJvclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNlcmlhbGl6ZWRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcih2YWwubWVzc2FnZSk7XG4gICAgICAgIC8vIFdpcGUgYXdheSB0aGUgY2xpZW50LXNpZGUgc3RhY2sgdHJhY2UuICBOb3RoaW5nIHRvIGZpbGwgaXQgaW4gd2l0aFxuICAgICAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHNlcmlhbGl6ZSBTU1Igc3RhY2sgdHJhY2VzIGZvciBzZWN1cml0eSByZWFzb25zXG4gICAgICAgIGVycm9yLnN0YWNrID0gXCJcIjtcbiAgICAgICAgc2VyaWFsaXplZFtrZXldID0gZXJyb3I7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG59XG5jb25zdCBWaWV3VHJhbnNpdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gIGlzVHJhbnNpdGlvbmluZzogZmFsc2Vcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBWaWV3VHJhbnNpdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlZpZXdUcmFuc2l0aW9uXCI7XG59XG5jb25zdCBGZXRjaGVyc0NvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChuZXcgTWFwKCkpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBGZXRjaGVyc0NvbnRleHQuZGlzcGxheU5hbWUgPSBcIkZldGNoZXJzXCI7XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gQ29tcG9uZW50c1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8qKlxuICBXZWJwYWNrICsgUmVhY3QgMTcgZmFpbHMgdG8gY29tcGlsZSBvbiBhbnkgb2YgdGhlIGZvbGxvd2luZyBiZWNhdXNlIHdlYnBhY2tcbiAgY29tcGxhaW5zIHRoYXQgYHN0YXJ0VHJhbnNpdGlvbmAgZG9lc24ndCBleGlzdCBpbiBgUmVhY3RgOlxuICAqIGltcG9ydCB7IHN0YXJ0VHJhbnNpdGlvbiB9IGZyb20gXCJyZWFjdFwiXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3Quc3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0W1wic3RhcnRUcmFuc2l0aW9uXCJdKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIE1vdmluZyBpdCB0byBhIGNvbnN0YW50IHN1Y2ggYXMgdGhlIGZvbGxvd2luZyBzb2x2ZXMgdGhlIFdlYnBhY2svUmVhY3QgMTcgaXNzdWU6XG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBjb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbiAgICBTVEFSVF9UUkFOU0lUSU9OIGluIFJlYWN0ID8gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgSG93ZXZlciwgdGhhdCBpbnRyb2R1Y2VzIHdlYnBhY2svdGVyc2VyIG1pbmlmaWNhdGlvbiBpc3N1ZXMgaW4gcHJvZHVjdGlvbiBidWlsZHNcbiAgaW4gUmVhY3QgMTggd2hlcmUgbWluaWZpY2F0aW9uL29iZnVzY2F0aW9uIGVuZHMgdXAgcmVtb3ZpbmcgdGhlIGNhbGwgb2ZcbiAgUmVhY3Quc3RhcnRUcmFuc2l0aW9uIGVudGlyZWx5IGZyb20gdGhlIGZpcnN0IGhhbGYgb2YgdGhlIHRlcm5hcnkuICBHcmFiYmluZ1xuICB0aGlzIGV4cG9ydGVkIHJlZmVyZW5jZSBvbmNlIHVwIGZyb250IHJlc29sdmVzIHRoYXQgaXNzdWUuXG5cbiAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVhY3Qtcm91dGVyL2lzc3Vlcy8xMDU3OVxuKi9cbmNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuY29uc3Qgc3RhcnRUcmFuc2l0aW9uSW1wbCA9IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dO1xuY29uc3QgRkxVU0hfU1lOQyA9IFwiZmx1c2hTeW5jXCI7XG5jb25zdCBmbHVzaFN5bmNJbXBsID0gUmVhY3RET01bRkxVU0hfU1lOQ107XG5jb25zdCBVU0VfSUQgPSBcInVzZUlkXCI7XG5jb25zdCB1c2VJZEltcGwgPSBSZWFjdFtVU0VfSURdO1xuZnVuY3Rpb24gc3RhcnRUcmFuc2l0aW9uU2FmZShjYikge1xuICBpZiAoc3RhcnRUcmFuc2l0aW9uSW1wbCkge1xuICAgIHN0YXJ0VHJhbnNpdGlvbkltcGwoY2IpO1xuICB9IGVsc2Uge1xuICAgIGNiKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGZsdXNoU3luY1NhZmUoY2IpIHtcbiAgaWYgKGZsdXNoU3luY0ltcGwpIHtcbiAgICBmbHVzaFN5bmNJbXBsKGNiKTtcbiAgfSBlbHNlIHtcbiAgICBjYigpO1xuICB9XG59XG5jbGFzcyBEZWZlcnJlZCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3RhdHVzID0gXCJwZW5kaW5nXCI7XG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5yZXNvbHZlID0gdmFsdWUgPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IFwicGVuZGluZ1wiKSB7XG4gICAgICAgICAgdGhpcy5zdGF0dXMgPSBcInJlc29sdmVkXCI7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLnJlamVjdCA9IHJlYXNvbiA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLnN0YXR1cyA9IFwicmVqZWN0ZWRcIjtcbiAgICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufVxuLyoqXG4gKiBHaXZlbiBhIFJlbWl4IFJvdXRlciBpbnN0YW5jZSwgcmVuZGVyIHRoZSBhcHByb3ByaWF0ZSBVSVxuICovXG5mdW5jdGlvbiBSb3V0ZXJQcm92aWRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgZmFsbGJhY2tFbGVtZW50LFxuICAgIHJvdXRlcixcbiAgICBmdXR1cmVcbiAgfSA9IF9yZWY7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZShyb3V0ZXIuc3RhdGUpO1xuICBsZXQgW3BlbmRpbmdTdGF0ZSwgc2V0UGVuZGluZ1N0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKCk7XG4gIGxldCBbdnRDb250ZXh0LCBzZXRWdENvbnRleHRdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGlzVHJhbnNpdGlvbmluZzogZmFsc2VcbiAgfSk7XG4gIGxldCBbcmVuZGVyRGZkLCBzZXRSZW5kZXJEZmRdID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgbGV0IFt0cmFuc2l0aW9uLCBzZXRUcmFuc2l0aW9uXSA9IFJlYWN0LnVzZVN0YXRlKCk7XG4gIGxldCBbaW50ZXJydXB0aW9uLCBzZXRJbnRlcnJ1cHRpb25dID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgbGV0IGZldGNoZXJEYXRhID0gUmVhY3QudXNlUmVmKG5ldyBNYXAoKSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBvcHRJblN0YXJ0VHJhbnNpdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGNiID0+IHtcbiAgICBpZiAodjdfc3RhcnRUcmFuc2l0aW9uKSB7XG4gICAgICBzdGFydFRyYW5zaXRpb25TYWZlKGNiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH0sIFt2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2soKG5ld1N0YXRlLCBfcmVmMikgPT4ge1xuICAgIGxldCB7XG4gICAgICBkZWxldGVkRmV0Y2hlcnMsXG4gICAgICB1bnN0YWJsZV9mbHVzaFN5bmM6IGZsdXNoU3luYyxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uT3B0czogdmlld1RyYW5zaXRpb25PcHRzXG4gICAgfSA9IF9yZWYyO1xuICAgIGRlbGV0ZWRGZXRjaGVycy5mb3JFYWNoKGtleSA9PiBmZXRjaGVyRGF0YS5jdXJyZW50LmRlbGV0ZShrZXkpKTtcbiAgICBuZXdTdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChmZXRjaGVyLCBrZXkpID0+IHtcbiAgICAgIGlmIChmZXRjaGVyLmRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmZXRjaGVyRGF0YS5jdXJyZW50LnNldChrZXksIGZldGNoZXIuZGF0YSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbGV0IGlzVmlld1RyYW5zaXRpb25VbmF2YWlsYWJsZSA9IHJvdXRlci53aW5kb3cgPT0gbnVsbCB8fCB0eXBlb2Ygcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uICE9PSBcImZ1bmN0aW9uXCI7XG4gICAgLy8gSWYgdGhpcyBpc24ndCBhIHZpZXcgdHJhbnNpdGlvbiBvciBpdCdzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBicm93c2VyLFxuICAgIC8vIGp1c3QgdXBkYXRlIGFuZCBiZSBkb25lIHdpdGggaXRcbiAgICBpZiAoIXZpZXdUcmFuc2l0aW9uT3B0cyB8fCBpc1ZpZXdUcmFuc2l0aW9uVW5hdmFpbGFibGUpIHtcbiAgICAgIGlmIChmbHVzaFN5bmMpIHtcbiAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdEluU3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBmbHVzaFN5bmMgKyBzdGFydFZpZXdUcmFuc2l0aW9uXG4gICAgaWYgKGZsdXNoU3luYykge1xuICAgICAgLy8gRmx1c2ggdGhyb3VnaCB0aGUgY29udGV4dCB0byBtYXJrIERPTSBlbGVtZW50cyBhcyB0cmFuc2l0aW9uPWluZ1xuICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiB7XG4gICAgICAgIC8vIENhbmNlbCBhbnkgcGVuZGluZyB0cmFuc2l0aW9uc1xuICAgICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICAgIHJlbmRlckRmZCAmJiByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgICAgICAgIHRyYW5zaXRpb24uc2tpcFRyYW5zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgIGlzVHJhbnNpdGlvbmluZzogdHJ1ZSxcbiAgICAgICAgICBmbHVzaFN5bmM6IHRydWUsXG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMuY3VycmVudExvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLm5leHRMb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgLy8gVXBkYXRlIHRoZSBET01cbiAgICAgIGxldCB0ID0gcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKCgpID0+IHtcbiAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQ2xlYW4gdXAgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBjb21wbGV0ZXNcbiAgICAgIHQuZmluaXNoZWQuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4ge1xuICAgICAgICAgIHNldFJlbmRlckRmZCh1bmRlZmluZWQpO1xuICAgICAgICAgIHNldFRyYW5zaXRpb24odW5kZWZpbmVkKTtcbiAgICAgICAgICBzZXRQZW5kaW5nU3RhdGUodW5kZWZpbmVkKTtcbiAgICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRUcmFuc2l0aW9uKHQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gc3RhcnRUcmFuc2l0aW9uICsgc3RhcnRWaWV3VHJhbnNpdGlvblxuICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAvLyBJbnRlcnJ1cHRpbmcgYW4gaW4tcHJvZ3Jlc3MgdHJhbnNpdGlvbiwgY2FuY2VsIGFuZCBsZXQgZXZlcnl0aGluZyBmbHVzaFxuICAgICAgLy8gb3V0LCBhbmQgdGhlbiBraWNrIG9mZiBhIG5ldyB0cmFuc2l0aW9uIGZyb20gdGhlIGludGVycnVwdGlvbiBzdGF0ZVxuICAgICAgcmVuZGVyRGZkICYmIHJlbmRlckRmZC5yZXNvbHZlKCk7XG4gICAgICB0cmFuc2l0aW9uLnNraXBUcmFuc2l0aW9uKCk7XG4gICAgICBzZXRJbnRlcnJ1cHRpb24oe1xuICAgICAgICBzdGF0ZTogbmV3U3RhdGUsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29tcGxldGVkIG5hdmlnYXRpb24gdXBkYXRlIHdpdGggb3B0ZWQtaW4gdmlldyB0cmFuc2l0aW9ucywgbGV0ICdlciByaXBcbiAgICAgIHNldFBlbmRpbmdTdGF0ZShuZXdTdGF0ZSk7XG4gICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgIGZsdXNoU3luYzogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIud2luZG93LCB0cmFuc2l0aW9uLCByZW5kZXJEZmQsIGZldGNoZXJEYXRhLCBvcHRJblN0YXJ0VHJhbnNpdGlvbl0pO1xuICAvLyBOZWVkIHRvIHVzZSBhIGxheW91dCBlZmZlY3QgaGVyZSBzbyB3ZSBhcmUgc3Vic2NyaWJlZCBlYXJseSBlbm91Z2ggdG9cbiAgLy8gcGljayB1cCBvbiBhbnkgcmVuZGVyLWRyaXZlbiByZWRpcmVjdHMvbmF2aWdhdGlvbnMgKHVzZUVmZmVjdC88TmF2aWdhdGU+KVxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gcm91dGVyLnN1YnNjcmliZShzZXRTdGF0ZSksIFtyb3V0ZXIsIHNldFN0YXRlXSk7XG4gIC8vIFdoZW4gd2Ugc3RhcnQgYSB2aWV3IHRyYW5zaXRpb24sIGNyZWF0ZSBhIERlZmVycmVkIHdlIGNhbiB1c2UgZm9yIHRoZVxuICAvLyBldmVudHVhbCBcImNvbXBsZXRlZFwiIHJlbmRlclxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nICYmICF2dENvbnRleHQuZmx1c2hTeW5jKSB7XG4gICAgICBzZXRSZW5kZXJEZmQobmV3IERlZmVycmVkKCkpO1xuICAgIH1cbiAgfSwgW3Z0Q29udGV4dF0pO1xuICAvLyBPbmNlIHRoZSBkZWZlcnJlZCBpcyBjcmVhdGVkLCBraWNrIG9mZiBzdGFydFZpZXdUcmFuc2l0aW9uKCkgdG8gdXBkYXRlIHRoZVxuICAvLyBET00gYW5kIHRoZW4gd2FpdCBvbiB0aGUgRGVmZXJyZWQgdG8gcmVzb2x2ZSAoaW5kaWNhdGluZyB0aGUgRE9NIHVwZGF0ZSBoYXNcbiAgLy8gaGFwcGVuZWQpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJlbmRlckRmZCAmJiBwZW5kaW5nU3RhdGUgJiYgcm91dGVyLndpbmRvdykge1xuICAgICAgbGV0IG5ld1N0YXRlID0gcGVuZGluZ1N0YXRlO1xuICAgICAgbGV0IHJlbmRlclByb21pc2UgPSByZW5kZXJEZmQucHJvbWlzZTtcbiAgICAgIGxldCB0cmFuc2l0aW9uID0gcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgICAgb3B0SW5TdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICAgIGF3YWl0IHJlbmRlclByb21pc2U7XG4gICAgICB9KTtcbiAgICAgIHRyYW5zaXRpb24uZmluaXNoZWQuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHNldFJlbmRlckRmZCh1bmRlZmluZWQpO1xuICAgICAgICBzZXRUcmFuc2l0aW9uKHVuZGVmaW5lZCk7XG4gICAgICAgIHNldFBlbmRpbmdTdGF0ZSh1bmRlZmluZWQpO1xuICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgIGlzVHJhbnNpdGlvbmluZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHNldFRyYW5zaXRpb24odHJhbnNpdGlvbik7XG4gICAgfVxuICB9LCBbb3B0SW5TdGFydFRyYW5zaXRpb24sIHBlbmRpbmdTdGF0ZSwgcmVuZGVyRGZkLCByb3V0ZXIud2luZG93XSk7XG4gIC8vIFdoZW4gdGhlIG5ldyBsb2NhdGlvbiBmaW5hbGx5IHJlbmRlcnMgYW5kIGlzIGNvbW1pdHRlZCB0byB0aGUgRE9NLCB0aGlzXG4gIC8vIGVmZmVjdCB3aWxsIHJ1biB0byByZXNvbHZlIHRoZSB0cmFuc2l0aW9uXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJlbmRlckRmZCAmJiBwZW5kaW5nU3RhdGUgJiYgc3RhdGUubG9jYXRpb24ua2V5ID09PSBwZW5kaW5nU3RhdGUubG9jYXRpb24ua2V5KSB7XG4gICAgICByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgIH1cbiAgfSwgW3JlbmRlckRmZCwgdHJhbnNpdGlvbiwgc3RhdGUubG9jYXRpb24sIHBlbmRpbmdTdGF0ZV0pO1xuICAvLyBJZiB3ZSBnZXQgaW50ZXJydXB0ZWQgd2l0aCBhIG5ldyBuYXZpZ2F0aW9uIGR1cmluZyBhIHRyYW5zaXRpb24sIHdlIHNraXBcbiAgLy8gdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBsZXQgaXQgY2xlYW51cCwgdGhlbiBraWNrIGl0IG9mZiBhZ2FpbiBoZXJlXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCF2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nICYmIGludGVycnVwdGlvbikge1xuICAgICAgc2V0UGVuZGluZ1N0YXRlKGludGVycnVwdGlvbi5zdGF0ZSk7XG4gICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgIGZsdXNoU3luYzogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogaW50ZXJydXB0aW9uLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiBpbnRlcnJ1cHRpb24ubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICAgIHNldEludGVycnVwdGlvbih1bmRlZmluZWQpO1xuICAgIH1cbiAgfSwgW3Z0Q29udGV4dC5pc1RyYW5zaXRpb25pbmcsIGludGVycnVwdGlvbl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbGxiYWNrRWxlbWVudCA9PSBudWxsIHx8ICFyb3V0ZXIuZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24sIFwiYDxSb3V0ZXJQcm92aWRlciBmYWxsYmFja0VsZW1lbnQ+YCBpcyBkZXByZWNhdGVkIHdoZW4gdXNpbmcgXCIgKyBcImB2N19wYXJ0aWFsSHlkcmF0aW9uYCwgdXNlIGEgYEh5ZHJhdGVGYWxsYmFja2AgY29tcG9uZW50IGluc3RlYWRcIikgOiB2b2lkIDA7XG4gICAgLy8gT25seSBsb2cgdGhpcyBvbmNlIG9uIGluaXRpYWwgbW91bnRcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcbiAgbGV0IG5hdmlnYXRvciA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogbiA9PiByb3V0ZXIubmF2aWdhdGUobiksXG4gICAgICBwdXNoOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pLFxuICAgICAgcmVwbGFjZTogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KVxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcbiAgbGV0IGJhc2VuYW1lID0gcm91dGVyLmJhc2VuYW1lIHx8IFwiL1wiO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgcm91dGVyLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IGZhbHNlLFxuICAgIGJhc2VuYW1lXG4gIH0pLCBbcm91dGVyLCBuYXZpZ2F0b3IsIGJhc2VuYW1lXSk7XG4gIC8vIFRoZSBmcmFnbWVudCBhbmQge251bGx9IGhlcmUgYXJlIGltcG9ydGFudCEgIFdlIG5lZWQgdGhlbSB0byBrZWVwIFJlYWN0IDE4J3NcbiAgLy8gdXNlSWQgaGFwcHkgd2hlbiB3ZSBhcmUgc2VydmVyLXJlbmRlcmluZyBzaW5jZSB3ZSBtYXkgaGF2ZSBhIDxzY3JpcHQ+IGhlcmVcbiAgLy8gY29udGFpbmluZyB0aGUgaHlkcmF0ZWQgc2VydmVyLXNpZGUgc3RhdGljQ29udGV4dCAoZnJvbSBTdGF0aWNSb3V0ZXJQcm92aWRlcikuXG4gIC8vIHVzZUlkIHJlbGllcyBvbiB0aGUgY29tcG9uZW50IHRyZWUgc3RydWN0dXJlIHRvIGdlbmVyYXRlIGRldGVybWluaXN0aWMgaWQnc1xuICAvLyBzbyB3ZSBuZWVkIHRvIGVuc3VyZSBpdCByZW1haW5zIHRoZSBzYW1lIG9uIHRoZSBjbGllbnQgZXZlbiB0aG91Z2hcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0aGUgPHNjcmlwdD4gdGFnXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGRhdGFSb3V0ZXJDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHN0YXRlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZldGNoZXJzQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBmZXRjaGVyRGF0YS5jdXJyZW50XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFZpZXdUcmFuc2l0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB2dENvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuaGlzdG9yeUFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IG5hdmlnYXRvcixcbiAgICBmdXR1cmU6IHtcbiAgICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiByb3V0ZXIuZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoXG4gICAgfVxuICB9LCBzdGF0ZS5pbml0aWFsaXplZCB8fCByb3V0ZXIuZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVzLCB7XG4gICAgcm91dGVzOiByb3V0ZXIucm91dGVzLFxuICAgIGZ1dHVyZTogcm91dGVyLmZ1dHVyZSxcbiAgICBzdGF0ZTogc3RhdGVcbiAgfSkgOiBmYWxsYmFja0VsZW1lbnQpKSkpKSwgbnVsbCk7XG59XG5mdW5jdGlvbiBEYXRhUm91dGVzKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgcm91dGVzLFxuICAgIGZ1dHVyZSxcbiAgICBzdGF0ZVxuICB9ID0gX3JlZjM7XG4gIHJldHVybiBVTlNBRkVfdXNlUm91dGVzSW1wbChyb3V0ZXMsIHVuZGVmaW5lZCwgc3RhdGUsIGZ1dHVyZSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gUHJvdmlkZXMgdGhlIGNsZWFuZXN0IFVSTHMuXG4gKi9cbmZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBmdXR1cmUsXG4gICAgd2luZG93XG4gIH0gPSBfcmVmNDtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnksXG4gICAgZnV0dXJlOiBmdXR1cmVcbiAgfSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gU3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB0aGUgaGFzaFxuICogcG9ydGlvbiBvZiB0aGUgVVJMIHNvIGl0IGlzIG5vdCBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gKi9cbmZ1bmN0aW9uIEhhc2hSb3V0ZXIoX3JlZjUpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBmdXR1cmUsXG4gICAgd2luZG93XG4gIH0gPSBfcmVmNTtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlSGFzaEhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnksXG4gICAgZnV0dXJlOiBmdXR1cmVcbiAgfSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCB0aGF0IGFjY2VwdHMgYSBwcmUtaW5zdGFudGlhdGVkIGhpc3Rvcnkgb2JqZWN0LiBJdCdzIGltcG9ydGFudFxuICogdG8gbm90ZSB0aGF0IHVzaW5nIHlvdXIgb3duIGhpc3Rvcnkgb2JqZWN0IGlzIGhpZ2hseSBkaXNjb3VyYWdlZCBhbmQgbWF5IGFkZFxuICogdHdvIHZlcnNpb25zIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdG8geW91ciBidW5kbGVzIHVubGVzcyB5b3UgdXNlIHRoZSBzYW1lXG4gKiB2ZXJzaW9uIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdGhhdCBSZWFjdCBSb3V0ZXIgdXNlcyBpbnRlcm5hbGx5LlxuICovXG5mdW5jdGlvbiBIaXN0b3J5Um91dGVyKF9yZWY2KSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZnV0dXJlLFxuICAgIGhpc3RvcnlcbiAgfSA9IF9yZWY2O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeSxcbiAgICBmdXR1cmU6IGZ1dHVyZVxuICB9KTtcbn1cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGlzdG9yeVJvdXRlci5kaXNwbGF5TmFtZSA9IFwidW5zdGFibGVfSGlzdG9yeVJvdXRlclwiO1xufVxuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbmNvbnN0IEFCU09MVVRFX1VSTF9SRUdFWCA9IC9eKD86W2Etel1bYS16MC05Ky4tXSo6fFxcL1xcLykvaTtcbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgYDxhPmAuXG4gKi9cbmNvbnN0IExpbmsgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaW5rV2l0aFJlZihfcmVmNywgcmVmKSB7XG4gIGxldCB7XG4gICAgICBvbkNsaWNrLFxuICAgICAgcmVsYXRpdmUsXG4gICAgICByZWxvYWREb2N1bWVudCxcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIHRhcmdldCxcbiAgICAgIHRvLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgICB9ID0gX3JlZjcsXG4gICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY3LCBfZXhjbHVkZWQpO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIC8vIFJlbmRlcmVkIGludG8gPGEgaHJlZj4gZm9yIGFic29sdXRlIFVSTHNcbiAgbGV0IGFic29sdXRlSHJlZjtcbiAgbGV0IGlzRXh0ZXJuYWwgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiAmJiBBQlNPTFVURV9VUkxfUkVHRVgudGVzdCh0bykpIHtcbiAgICAvLyBSZW5kZXIgdGhlIGFic29sdXRlIGhyZWYgc2VydmVyLSBhbmQgY2xpZW50LXNpZGVcbiAgICBhYnNvbHV0ZUhyZWYgPSB0bztcbiAgICAvLyBPbmx5IGNoZWNrIGZvciBleHRlcm5hbCBvcmlnaW5zIGNsaWVudC1zaWRlXG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGN1cnJlbnRVcmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgbGV0IHRhcmdldFVybCA9IHRvLnN0YXJ0c1dpdGgoXCIvL1wiKSA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIHRvKSA6IG5ldyBVUkwodG8pO1xuICAgICAgICBsZXQgcGF0aCA9IHN0cmlwQmFzZW5hbWUodGFyZ2V0VXJsLnBhdGhuYW1lLCBiYXNlbmFtZSk7XG4gICAgICAgIGlmICh0YXJnZXRVcmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBwYXRoICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBTdHJpcCB0aGUgcHJvdG9jb2wvb3JpZ2luL2Jhc2VuYW1lIGZvciBzYW1lLW9yaWdpbiBhYnNvbHV0ZSBVUkxzXG4gICAgICAgICAgdG8gPSBwYXRoICsgdGFyZ2V0VXJsLnNlYXJjaCArIHRhcmdldFVybC5oYXNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzRXh0ZXJuYWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIFdlIGNhbid0IGRvIGV4dGVybmFsIFVSTCBkZXRlY3Rpb24gd2l0aG91dCBhIHZhbGlkIFVSTFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCI8TGluayB0bz1cXFwiXCIgKyB0byArIFwiXFxcIj4gY29udGFpbnMgYW4gaW52YWxpZCBVUkwgd2hpY2ggd2lsbCBwcm9iYWJseSBicmVhayBcIiArIFwid2hlbiBjbGlja2VkIC0gcGxlYXNlIHVwZGF0ZSB0byBhIHZhbGlkIFVSTCBwYXRoLlwiKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gUmVuZGVyZWQgaW50byA8YSBocmVmPiBmb3IgcmVsYXRpdmUgVVJMc1xuICBsZXQgaHJlZiA9IHVzZUhyZWYodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGludGVybmFsT25DbGljayA9IHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIHtcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHRhcmdldCxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmUsXG4gICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgfSk7XG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgaW50ZXJuYWxPbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBhYnNvbHV0ZUhyZWYgfHwgaHJlZixcbiAgICAgIG9uQ2xpY2s6IGlzRXh0ZXJuYWwgfHwgcmVsb2FkRG9jdW1lbnQgPyBvbkNsaWNrIDogaGFuZGxlQ2xpY2ssXG4gICAgICByZWY6IHJlZixcbiAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgfSkpXG4gICk7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xufVxuLyoqXG4gKiBBIGA8TGluaz5gIHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5jb25zdCBOYXZMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF2TGlua1dpdGhSZWYoX3JlZjgsIHJlZikge1xuICBsZXQge1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRQcm9wID0gXCJwYWdlXCIsXG4gICAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2UsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByb3AgPSBcIlwiLFxuICAgICAgZW5kID0gZmFsc2UsXG4gICAgICBzdHlsZTogc3R5bGVQcm9wLFxuICAgICAgdG8sXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbixcbiAgICAgIGNoaWxkcmVuXG4gICAgfSA9IF9yZWY4LFxuICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmOCwgX2V4Y2x1ZGVkMik7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmU6IHJlc3QucmVsYXRpdmVcbiAgfSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZXJTdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIG5hdmlnYXRvcixcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgaXNUcmFuc2l0aW9uaW5nID0gcm91dGVyU3RhdGUgIT0gbnVsbCAmJlxuICAvLyBDb25kaXRpb25hbCB1c2FnZSBpcyBPSyBoZXJlIGJlY2F1c2UgdGhlIHVzYWdlIG9mIGEgZGF0YSByb3V0ZXIgaXMgc3RhdGljXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICB1c2VWaWV3VHJhbnNpdGlvblN0YXRlKHBhdGgpICYmIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uID09PSB0cnVlO1xuICBsZXQgdG9QYXRobmFtZSA9IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihwYXRoKS5wYXRobmFtZSA6IHBhdGgucGF0aG5hbWU7XG4gIGxldCBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gIGxldCBuZXh0TG9jYXRpb25QYXRobmFtZSA9IHJvdXRlclN0YXRlICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24gJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiA/IHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24ucGF0aG5hbWUgOiBudWxsO1xuICBpZiAoIWNhc2VTZW5zaXRpdmUpIHtcbiAgICBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIG5leHRMb2NhdGlvblBhdGhuYW1lID0gbmV4dExvY2F0aW9uUGF0aG5hbWUgPyBuZXh0TG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbiAgICB0b1BhdGhuYW1lID0gdG9QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIGlmIChuZXh0TG9jYXRpb25QYXRobmFtZSAmJiBiYXNlbmFtZSkge1xuICAgIG5leHRMb2NhdGlvblBhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShuZXh0TG9jYXRpb25QYXRobmFtZSwgYmFzZW5hbWUpIHx8IG5leHRMb2NhdGlvblBhdGhuYW1lO1xuICB9XG4gIC8vIElmIHRoZSBgdG9gIGhhcyBhIHRyYWlsaW5nIHNsYXNoLCBsb29rIGF0IHRoYXQgZXhhY3Qgc3BvdC4gIE90aGVyd2lzZSxcbiAgLy8gd2UncmUgbG9va2luZyBmb3IgYSBzbGFzaCBfYWZ0ZXJfIHdoYXQncyBpbiBgdG9gLiAgRm9yIGV4YW1wbGU6XG4gIC8vXG4gIC8vIDxOYXZMaW5rIHRvPVwiL3VzZXJzXCI+IGFuZCA8TmF2TGluayB0bz1cIi91c2Vycy9cIj5cbiAgLy8gYm90aCB3YW50IHRvIGxvb2sgZm9yIGEgLyBhdCBpbmRleCA2IHRvIG1hdGNoIFVSTCBgL3VzZXJzL21hdHRgXG4gIGNvbnN0IGVuZFNsYXNoUG9zaXRpb24gPSB0b1BhdGhuYW1lICE9PSBcIi9cIiAmJiB0b1BhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSA/IHRvUGF0aG5hbWUubGVuZ3RoIC0gMSA6IHRvUGF0aG5hbWUubGVuZ3RoO1xuICBsZXQgaXNBY3RpdmUgPSBsb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIGxvY2F0aW9uUGF0aG5hbWUuY2hhckF0KGVuZFNsYXNoUG9zaXRpb24pID09PSBcIi9cIjtcbiAgbGV0IGlzUGVuZGluZyA9IG5leHRMb2NhdGlvblBhdGhuYW1lICE9IG51bGwgJiYgKG5leHRMb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbmV4dExvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBuZXh0TG9jYXRpb25QYXRobmFtZS5jaGFyQXQodG9QYXRobmFtZS5sZW5ndGgpID09PSBcIi9cIik7XG4gIGxldCByZW5kZXJQcm9wcyA9IHtcbiAgICBpc0FjdGl2ZSxcbiAgICBpc1BlbmRpbmcsXG4gICAgaXNUcmFuc2l0aW9uaW5nXG4gIH07XG4gIGxldCBhcmlhQ3VycmVudCA9IGlzQWN0aXZlID8gYXJpYUN1cnJlbnRQcm9wIDogdW5kZWZpbmVkO1xuICBsZXQgY2xhc3NOYW1lO1xuICBpZiAodHlwZW9mIGNsYXNzTmFtZVByb3AgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZVByb3AocmVuZGVyUHJvcHMpO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHRoZSBjbGFzc05hbWUgcHJvcCBpcyBub3QgYSBmdW5jdGlvbiwgd2UgdXNlIGEgZGVmYXVsdCBgYWN0aXZlYFxuICAgIC8vIGNsYXNzIGZvciA8TmF2TGluayAvPnMgdGhhdCBhcmUgYWN0aXZlLiBJbiB2NSBgYWN0aXZlYCB3YXMgdGhlIGRlZmF1bHRcbiAgICAvLyB2YWx1ZSBmb3IgYGFjdGl2ZUNsYXNzTmFtZWAsIGJ1dCB3ZSBhcmUgcmVtb3ZpbmcgdGhhdCBBUEkgYW5kIGNhbiBzdGlsbFxuICAgIC8vIHVzZSB0aGUgb2xkIGRlZmF1bHQgYmVoYXZpb3IgZm9yIGEgY2xlYW5lciB1cGdyYWRlIHBhdGggYW5kIGtlZXAgdGhlXG4gICAgLy8gc2ltcGxlIHN0eWxpbmcgcnVsZXMgd29ya2luZyBhcyB0aGV5IGN1cnJlbnRseSBkby5cbiAgICBjbGFzc05hbWUgPSBbY2xhc3NOYW1lUHJvcCwgaXNBY3RpdmUgPyBcImFjdGl2ZVwiIDogbnVsbCwgaXNQZW5kaW5nID8gXCJwZW5kaW5nXCIgOiBudWxsLCBpc1RyYW5zaXRpb25pbmcgPyBcInRyYW5zaXRpb25pbmdcIiA6IG51bGxdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKTtcbiAgfVxuICBsZXQgc3R5bGUgPSB0eXBlb2Ygc3R5bGVQcm9wID09PSBcImZ1bmN0aW9uXCIgPyBzdHlsZVByb3AocmVuZGVyUHJvcHMpIDogc3R5bGVQcm9wO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByZWY6IHJlZixcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgdG86IHRvLFxuICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uOiB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICB9KSwgdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbihyZW5kZXJQcm9wcykgOiBjaGlsZHJlbik7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2TGluay5kaXNwbGF5TmFtZSA9IFwiTmF2TGlua1wiO1xufVxuLyoqXG4gKiBBIGBAcmVtaXgtcnVuL3JvdXRlcmAtYXdhcmUgYDxmb3JtPmAuIEl0IGJlaGF2ZXMgbGlrZSBhIG5vcm1hbCBmb3JtIGV4Y2VwdFxuICogdGhhdCB0aGUgaW50ZXJhY3Rpb24gd2l0aCB0aGUgc2VydmVyIGlzIHdpdGggYGZldGNoYCBpbnN0ZWFkIG9mIG5ldyBkb2N1bWVudFxuICogcmVxdWVzdHMsIGFsbG93aW5nIGNvbXBvbmVudHMgdG8gYWRkIG5pY2VyIFVYIHRvIHRoZSBwYWdlIGFzIHRoZSBmb3JtIGlzXG4gKiBzdWJtaXR0ZWQgYW5kIHJldHVybnMgd2l0aCBkYXRhLlxuICovXG5jb25zdCBGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKF9yZWY5LCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgbGV0IHtcbiAgICAgIGZldGNoZXJLZXksXG4gICAgICBuYXZpZ2F0ZSxcbiAgICAgIHJlbG9hZERvY3VtZW50LFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgbWV0aG9kID0gZGVmYXVsdE1ldGhvZCxcbiAgICAgIGFjdGlvbixcbiAgICAgIG9uU3VibWl0LFxuICAgICAgcmVsYXRpdmUsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICAgIH0gPSBfcmVmOSxcbiAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY5LCBfZXhjbHVkZWQzKTtcbiAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdCgpO1xuICBsZXQgZm9ybUFjdGlvbiA9IHVzZUZvcm1BY3Rpb24oYWN0aW9uLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIGxldCBmb3JtTWV0aG9kID0gbWV0aG9kLnRvTG93ZXJDYXNlKCkgPT09IFwiZ2V0XCIgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gIGxldCBzdWJtaXRIYW5kbGVyID0gZXZlbnQgPT4ge1xuICAgIG9uU3VibWl0ICYmIG9uU3VibWl0KGV2ZW50KTtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgbGV0IHN1Ym1pdHRlciA9IGV2ZW50Lm5hdGl2ZUV2ZW50LnN1Ym1pdHRlcjtcbiAgICBsZXQgc3VibWl0TWV0aG9kID0gKHN1Ym1pdHRlciA9PSBudWxsID8gdm9pZCAwIDogc3VibWl0dGVyLmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikpIHx8IG1ldGhvZDtcbiAgICBzdWJtaXQoc3VibWl0dGVyIHx8IGV2ZW50LmN1cnJlbnRUYXJnZXQsIHtcbiAgICAgIGZldGNoZXJLZXksXG4gICAgICBtZXRob2Q6IHN1Ym1pdE1ldGhvZCxcbiAgICAgIG5hdmlnYXRlLFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgcmVsYXRpdmUsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICAgIH0pO1xuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIsIF9leHRlbmRzKHtcbiAgICByZWY6IGZvcndhcmRlZFJlZixcbiAgICBtZXRob2Q6IGZvcm1NZXRob2QsXG4gICAgYWN0aW9uOiBmb3JtQWN0aW9uLFxuICAgIG9uU3VibWl0OiByZWxvYWREb2N1bWVudCA/IG9uU3VibWl0IDogc3VibWl0SGFuZGxlclxuICB9LCBwcm9wcykpO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZvcm0uZGlzcGxheU5hbWUgPSBcIkZvcm1cIjtcbn1cbi8qKlxuICogVGhpcyBjb21wb25lbnQgd2lsbCBlbXVsYXRlIHRoZSBicm93c2VyJ3Mgc2Nyb2xsIHJlc3RvcmF0aW9uIG9uIGxvY2F0aW9uXG4gKiBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBTY3JvbGxSZXN0b3JhdGlvbihfcmVmMTApIHtcbiAgbGV0IHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9ID0gX3JlZjEwO1xuICB1c2VTY3JvbGxSZXN0b3JhdGlvbih7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSk7XG4gIHJldHVybiBudWxsO1xufVxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTY3JvbGxSZXN0b3JhdGlvbi5kaXNwbGF5TmFtZSA9IFwiU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBIb29rc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbnZhciBEYXRhUm91dGVySG9vaztcbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTdWJtaXRcIl0gPSBcInVzZVN1Ym1pdFwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVN1Ym1pdEZldGNoZXJcIl0gPSBcInVzZVN1Ym1pdEZldGNoZXJcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VGZXRjaGVyXCJdID0gXCJ1c2VGZXRjaGVyXCI7XG4gIERhdGFSb3V0ZXJIb29rW1widXNlVmlld1RyYW5zaXRpb25TdGF0ZVwiXSA9IFwidXNlVmlld1RyYW5zaXRpb25TdGF0ZVwiO1xufSkoRGF0YVJvdXRlckhvb2sgfHwgKERhdGFSb3V0ZXJIb29rID0ge30pKTtcbnZhciBEYXRhUm91dGVyU3RhdGVIb29rO1xuKGZ1bmN0aW9uIChEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VGZXRjaGVyXCJdID0gXCJ1c2VGZXRjaGVyXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VGZXRjaGVyc1wiXSA9IFwidXNlRmV0Y2hlcnNcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVNjcm9sbFJlc3RvcmF0aW9uXCJdID0gXCJ1c2VTY3JvbGxSZXN0b3JhdGlvblwiO1xufSkoRGF0YVJvdXRlclN0YXRlSG9vayB8fCAoRGF0YVJvdXRlclN0YXRlSG9vayA9IHt9KSk7XG4vLyBJbnRlcm5hbCBob29rc1xuZnVuY3Rpb24gZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkge1xuICByZXR1cm4gaG9va05hbWUgKyBcIiBtdXN0IGJlIHVzZWQgd2l0aGluIGEgZGF0YSByb3V0ZXIuICBTZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVycy9waWNraW5nLWEtcm91dGVyLlwiO1xufVxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0KTtcbiAgIWN0eCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gY3R4O1xufVxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHN0YXRlO1xufVxuLy8gRXh0ZXJuYWwgaG9va3Ncbi8qKlxuICogSGFuZGxlcyB0aGUgY2xpY2sgYmVoYXZpb3IgZm9yIHJvdXRlciBgPExpbms+YCBjb21wb25lbnRzLiBUaGlzIGlzIHVzZWZ1bCBpZlxuICogeW91IG5lZWQgdG8gY3JlYXRlIGN1c3RvbSBgPExpbms+YCBjb21wb25lbnRzIHdpdGggdGhlIHNhbWUgY2xpY2sgYmVoYXZpb3Igd2VcbiAqIHVzZSBpbiBvdXIgZXhwb3J0ZWQgYDxMaW5rPmAuXG4gKi9cbmZ1bmN0aW9uIHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdGFyZ2V0LFxuICAgIHJlcGxhY2U6IHJlcGxhY2VQcm9wLFxuICAgIHN0YXRlLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZSxcbiAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgaWYgKHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyBJZiB0aGUgVVJMIGhhc24ndCBjaGFuZ2VkLCBhIHJlZ3VsYXIgPGE+IHdpbGwgZG8gYSByZXBsYWNlIGluc3RlYWQgb2ZcbiAgICAgIC8vIGEgcHVzaCwgc28gZG8gdGhlIHNhbWUgaGVyZSB1bmxlc3MgdGhlIHJlcGxhY2UgcHJvcCBpcyBleHBsaWNpdGx5IHNldFxuICAgICAgbGV0IHJlcGxhY2UgPSByZXBsYWNlUHJvcCAhPT0gdW5kZWZpbmVkID8gcmVwbGFjZVByb3AgOiBjcmVhdGVQYXRoKGxvY2F0aW9uKSA9PT0gY3JlYXRlUGF0aChwYXRoKTtcbiAgICAgIG5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2UsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIHJlbGF0aXZlLFxuICAgICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbG9jYXRpb24sIG5hdmlnYXRlLCBwYXRoLCByZXBsYWNlUHJvcCwgc3RhdGUsIHRhcmdldCwgdG8sIHByZXZlbnRTY3JvbGxSZXNldCwgcmVsYXRpdmUsIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXSk7XG59XG4vKipcbiAqIEEgY29udmVuaWVudCB3cmFwcGVyIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIHNlYXJjaCBwYXJhbWV0ZXJzIHZpYSB0aGVcbiAqIFVSTFNlYXJjaFBhcmFtcyBpbnRlcmZhY2UuXG4gKi9cbmZ1bmN0aW9uIHVzZVNlYXJjaFBhcmFtcyhkZWZhdWx0SW5pdCkge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyh0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSBcInVuZGVmaW5lZFwiLCBcIllvdSBjYW5ub3QgdXNlIHRoZSBgdXNlU2VhcmNoUGFyYW1zYCBob29rIGluIGEgYnJvd3NlciB0aGF0IGRvZXMgbm90IFwiICsgXCJzdXBwb3J0IHRoZSBVUkxTZWFyY2hQYXJhbXMgQVBJLiBJZiB5b3UgbmVlZCB0byBzdXBwb3J0IEludGVybmV0IFwiICsgXCJFeHBsb3JlciAxMSwgd2UgcmVjb21tZW5kIHlvdSBsb2FkIGEgcG9seWZpbGwgc3VjaCBhcyBcIiArIFwiaHR0cHM6Ly9naXRodWIuY29tL3VuZ2FwL3VybC1zZWFyY2gtcGFyYW1zXFxuXFxuXCIgKyBcIklmIHlvdSdyZSB1bnN1cmUgaG93IHRvIGxvYWQgcG9seWZpbGxzLCB3ZSByZWNvbW1lbmQgeW91IGNoZWNrIG91dCBcIiArIFwiaHR0cHM6Ly9wb2x5ZmlsbC5pby92My8gd2hpY2ggcHJvdmlkZXMgc29tZSByZWNvbW1lbmRhdGlvbnMgYWJvdXQgaG93IFwiICsgXCJ0byBsb2FkIHBvbHlmaWxscyBvbmx5IGZvciB1c2VycyB0aGF0IG5lZWQgdGhlbSwgaW5zdGVhZCBvZiBmb3IgZXZlcnkgXCIgKyBcInVzZXIuXCIpIDogdm9pZCAwO1xuICBsZXQgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZiA9IFJlYWN0LnVzZVJlZihjcmVhdGVTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpKTtcbiAgbGV0IGhhc1NldFNlYXJjaFBhcmFtc1JlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VNZW1vKCgpID0+XG4gIC8vIE9ubHkgbWVyZ2UgaW4gdGhlIGRlZmF1bHRzIGlmIHdlIGhhdmVuJ3QgeWV0IGNhbGxlZCBzZXRTZWFyY2hQYXJhbXMuXG4gIC8vIE9uY2Ugd2UgY2FsbCB0aGF0IHdlIHdhbnQgdGhvc2UgdG8gdGFrZSBwcmVjZWRlbmNlLCBvdGhlcndpc2UgeW91IGNhbid0XG4gIC8vIHJlbW92ZSBhIHBhcmFtIHdpdGggc2V0U2VhcmNoUGFyYW1zKHt9KSBpZiBpdCBoYXMgYW4gaW5pdGlhbCB2YWx1ZVxuICBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbihsb2NhdGlvbi5zZWFyY2gsIGhhc1NldFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50ID8gbnVsbCA6IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCksIFtsb2NhdGlvbi5zZWFyY2hdKTtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IHNldFNlYXJjaFBhcmFtcyA9IFJlYWN0LnVzZUNhbGxiYWNrKChuZXh0SW5pdCwgbmF2aWdhdGVPcHRpb25zKSA9PiB7XG4gICAgY29uc3QgbmV3U2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHR5cGVvZiBuZXh0SW5pdCA9PT0gXCJmdW5jdGlvblwiID8gbmV4dEluaXQoc2VhcmNoUGFyYW1zKSA6IG5leHRJbml0KTtcbiAgICBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA9IHRydWU7XG4gICAgbmF2aWdhdGUoXCI/XCIgKyBuZXdTZWFyY2hQYXJhbXMsIG5hdmlnYXRlT3B0aW9ucyk7XG4gIH0sIFtuYXZpZ2F0ZSwgc2VhcmNoUGFyYW1zXSk7XG4gIHJldHVybiBbc2VhcmNoUGFyYW1zLCBzZXRTZWFyY2hQYXJhbXNdO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVDbGllbnRTaWRlU3VibWlzc2lvbigpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgY2FsbGluZyBzdWJtaXQgZHVyaW5nIHRoZSBzZXJ2ZXIgcmVuZGVyLiBcIiArIFwiVHJ5IGNhbGxpbmcgc3VibWl0IHdpdGhpbiBhIGB1c2VFZmZlY3RgIG9yIGNhbGxiYWNrIGluc3RlYWQuXCIpO1xuICB9XG59XG5sZXQgZmV0Y2hlcklkID0gMDtcbmxldCBnZXRVbmlxdWVGZXRjaGVySWQgPSAoKSA9PiBcIl9fXCIgKyBTdHJpbmcoKytmZXRjaGVySWQpICsgXCJfX1wiO1xuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBwcm9ncmFtbWF0aWNhbGx5IHN1Ym1pdCBhIGZvcm0gKG9yXG4gKiBzb21lIGFyYml0cmFyeSBkYXRhKSB0byB0aGUgc2VydmVyLlxuICovXG5mdW5jdGlvbiB1c2VTdWJtaXQoKSB7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VTdWJtaXQpO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBjdXJyZW50Um91dGVJZCA9IFVOU0FGRV91c2VSb3V0ZUlkKCk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICB2YWxpZGF0ZUNsaWVudFNpZGVTdWJtaXNzaW9uKCk7XG4gICAgbGV0IHtcbiAgICAgIGFjdGlvbixcbiAgICAgIG1ldGhvZCxcbiAgICAgIGVuY1R5cGUsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGJvZHlcbiAgICB9ID0gZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgYmFzZW5hbWUpO1xuICAgIGlmIChvcHRpb25zLm5hdmlnYXRlID09PSBmYWxzZSkge1xuICAgICAgbGV0IGtleSA9IG9wdGlvbnMuZmV0Y2hlcktleSB8fCBnZXRVbmlxdWVGZXRjaGVySWQoKTtcbiAgICAgIHJvdXRlci5mZXRjaChrZXksIGN1cnJlbnRSb3V0ZUlkLCBvcHRpb25zLmFjdGlvbiB8fCBhY3Rpb24sIHtcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRpb25zLnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgZm9ybURhdGEsXG4gICAgICAgIGJvZHksXG4gICAgICAgIGZvcm1NZXRob2Q6IG9wdGlvbnMubWV0aG9kIHx8IG1ldGhvZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IG9wdGlvbnMuZW5jVHlwZSB8fCBlbmNUeXBlLFxuICAgICAgICB1bnN0YWJsZV9mbHVzaFN5bmM6IG9wdGlvbnMudW5zdGFibGVfZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKG9wdGlvbnMuYWN0aW9uIHx8IGFjdGlvbiwge1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdGlvbnMucHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICBmb3JtRGF0YSxcbiAgICAgICAgYm9keSxcbiAgICAgICAgZm9ybU1ldGhvZDogb3B0aW9ucy5tZXRob2QgfHwgbWV0aG9kLFxuICAgICAgICBmb3JtRW5jVHlwZTogb3B0aW9ucy5lbmNUeXBlIHx8IGVuY1R5cGUsXG4gICAgICAgIHJlcGxhY2U6IG9wdGlvbnMucmVwbGFjZSxcbiAgICAgICAgc3RhdGU6IG9wdGlvbnMuc3RhdGUsXG4gICAgICAgIGZyb21Sb3V0ZUlkOiBjdXJyZW50Um91dGVJZCxcbiAgICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBvcHRpb25zLnVuc3RhYmxlX2ZsdXNoU3luYyxcbiAgICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb246IG9wdGlvbnMudW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3JvdXRlciwgYmFzZW5hbWUsIGN1cnJlbnRSb3V0ZUlkXSk7XG59XG4vLyB2NzogRXZlbnR1YWxseSB3ZSBzaG91bGQgZGVwcmVjYXRlIHRoaXMgZW50aXJlbHkgaW4gZmF2b3Igb2YgdXNpbmcgdGhlXG4vLyByb3V0ZXIgbWV0aG9kIGRpcmVjdGx5P1xuZnVuY3Rpb24gdXNlRm9ybUFjdGlvbihhY3Rpb24sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCByb3V0ZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9Sb3V0ZUNvbnRleHQpO1xuICAhcm91dGVDb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGb3JtQWN0aW9uIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IFttYXRjaF0gPSByb3V0ZUNvbnRleHQubWF0Y2hlcy5zbGljZSgtMSk7XG4gIC8vIFNoYWxsb3cgY2xvbmUgcGF0aCBzbyB3ZSBjYW4gbW9kaWZ5IGl0IGJlbG93LCBvdGhlcndpc2Ugd2UgbW9kaWZ5IHRoZVxuICAvLyBvYmplY3QgcmVmZXJlbmNlZCBieSB1c2VNZW1vIGluc2lkZSB1c2VSZXNvbHZlZFBhdGhcbiAgbGV0IHBhdGggPSBfZXh0ZW5kcyh7fSwgdXNlUmVzb2x2ZWRQYXRoKGFjdGlvbiA/IGFjdGlvbiA6IFwiLlwiLCB7XG4gICAgcmVsYXRpdmVcbiAgfSkpO1xuICAvLyBJZiBubyBhY3Rpb24gd2FzIHNwZWNpZmllZCwgYnJvd3NlcnMgd2lsbCBwZXJzaXN0IGN1cnJlbnQgc2VhcmNoIHBhcmFtc1xuICAvLyB3aGVuIGRldGVybWluaW5nIHRoZSBwYXRoLCBzbyBtYXRjaCB0aGF0IGJlaGF2aW9yXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzkyN1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBpZiAoYWN0aW9uID09IG51bGwpIHtcbiAgICAvLyBTYWZlIHRvIHdyaXRlIHRvIHRoaXMgZGlyZWN0bHkgaGVyZSBzaW5jZSBpZiBhY3Rpb24gd2FzIHVuZGVmaW5lZCwgd2VcbiAgICAvLyB3b3VsZCBoYXZlIGNhbGxlZCB1c2VSZXNvbHZlZFBhdGgoXCIuXCIpIHdoaWNoIHdpbGwgbmV2ZXIgaW5jbHVkZSBhIHNlYXJjaFxuICAgIHBhdGguc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIC8vIFdoZW4gZ3JhYmJpbmcgc2VhcmNoIHBhcmFtcyBmcm9tIHRoZSBVUkwsIHJlbW92ZSBhbnkgaW5jbHVkZWQgP2luZGV4IHBhcmFtXG4gICAgLy8gc2luY2UgaXQgbWlnaHQgbm90IGFwcGx5IHRvIG91ciBjb250ZXh0dWFsIHJvdXRlLiAgV2UgYWRkIGl0IGJhY2sgYmFzZWRcbiAgICAvLyBvbiBtYXRjaC5yb3V0ZS5pbmRleCBiZWxvd1xuICAgIGxldCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhdGguc2VhcmNoKTtcbiAgICBpZiAocGFyYW1zLmhhcyhcImluZGV4XCIpICYmIHBhcmFtcy5nZXQoXCJpbmRleFwiKSA9PT0gXCJcIikge1xuICAgICAgcGFyYW1zLmRlbGV0ZShcImluZGV4XCIpO1xuICAgICAgcGF0aC5zZWFyY2ggPSBwYXJhbXMudG9TdHJpbmcoKSA/IFwiP1wiICsgcGFyYW1zLnRvU3RyaW5nKCkgOiBcIlwiO1xuICAgIH1cbiAgfVxuICBpZiAoKCFhY3Rpb24gfHwgYWN0aW9uID09PSBcIi5cIikgJiYgbWF0Y2gucm91dGUuaW5kZXgpIHtcbiAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoID8gcGF0aC5zZWFyY2gucmVwbGFjZSgvXlxcPy8sIFwiP2luZGV4JlwiKSA6IFwiP2luZGV4XCI7XG4gIH1cbiAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgZm9ybSBhY3Rpb24uICBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlXG4gIC8vIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZVxuICAvLyBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgYWN0aW9uc1xuICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgcGF0aC5wYXRobmFtZSA9IHBhdGgucGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVBhdGgocGF0aCk7XG59XG4vLyBUT0RPOiAodjcpIENoYW5nZSB0aGUgdXNlRmV0Y2hlciBnZW5lcmljIGRlZmF1bHQgZnJvbSBgYW55YCB0byBgdW5rbm93bmBcbi8qKlxuICogSW50ZXJhY3RzIHdpdGggcm91dGUgbG9hZGVycyBhbmQgYWN0aW9ucyB3aXRob3V0IGNhdXNpbmcgYSBuYXZpZ2F0aW9uLiBHcmVhdFxuICogZm9yIGFueSBpbnRlcmFjdGlvbiB0aGF0IHN0YXlzIG9uIHRoZSBzYW1lIHBhZ2UuXG4gKi9cbmZ1bmN0aW9uIHVzZUZldGNoZXIoX3RlbXAzKSB7XG4gIHZhciBfcm91dGUkbWF0Y2hlcztcbiAgbGV0IHtcbiAgICBrZXlcbiAgfSA9IF90ZW1wMyA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDM7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VGZXRjaGVyKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlRmV0Y2hlcik7XG4gIGxldCBmZXRjaGVyRGF0YSA9IFJlYWN0LnVzZUNvbnRleHQoRmV0Y2hlcnNDb250ZXh0KTtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlSWQgPSAoX3JvdXRlJG1hdGNoZXMgPSByb3V0ZS5tYXRjaGVzW3JvdXRlLm1hdGNoZXMubGVuZ3RoIC0gMV0pID09IG51bGwgPyB2b2lkIDAgOiBfcm91dGUkbWF0Y2hlcy5yb3V0ZS5pZDtcbiAgIWZldGNoZXJEYXRhID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBGZXRjaGVyc0NvbnRleHRcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgIXJvdXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgIShyb3V0ZUlkICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIC8vIEZldGNoZXIga2V5IGhhbmRsaW5nXG4gIC8vIE9LIHRvIGNhbGwgY29uZGl0aW9uYWxseSB0byBmZWF0dXJlIGRldGVjdCBgdXNlSWRgXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICBsZXQgZGVmYXVsdEtleSA9IHVzZUlkSW1wbCA/IHVzZUlkSW1wbCgpIDogXCJcIjtcbiAgbGV0IFtmZXRjaGVyS2V5LCBzZXRGZXRjaGVyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKGtleSB8fCBkZWZhdWx0S2V5KTtcbiAgaWYgKGtleSAmJiBrZXkgIT09IGZldGNoZXJLZXkpIHtcbiAgICBzZXRGZXRjaGVyS2V5KGtleSk7XG4gIH0gZWxzZSBpZiAoIWZldGNoZXJLZXkpIHtcbiAgICAvLyBXZSB3aWxsIG9ubHkgZmFsbCB0aHJvdWdoIGhlcmUgd2hlbiBgdXNlSWRgIGlzIG5vdCBhdmFpbGFibGVcbiAgICBzZXRGZXRjaGVyS2V5KGdldFVuaXF1ZUZldGNoZXJJZCgpKTtcbiAgfVxuICAvLyBSZWdpc3RyYXRpb24vY2xlYW51cFxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJvdXRlci5nZXRGZXRjaGVyKGZldGNoZXJLZXkpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyBUZWxsIHRoZSByb3V0ZXIgd2UndmUgdW5tb3VudGVkIC0gaWYgdjdfZmV0Y2hlclBlcnNpc3QgaXMgZW5hYmxlZCB0aGlzXG4gICAgICAvLyB3aWxsIG5vdCBkZWxldGUgaW1tZWRpYXRlbHkgYnV0IGluc3RlYWQgcXVldWUgdXAgYSBkZWxldGUgYWZ0ZXIgdGhlXG4gICAgICAvLyBmZXRjaGVyIHJldHVybnMgdG8gYW4gYGlkbGVgIHN0YXRlXG4gICAgICByb3V0ZXIuZGVsZXRlRmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICB9O1xuICB9LCBbcm91dGVyLCBmZXRjaGVyS2V5XSk7XG4gIC8vIEZldGNoZXIgYWRkaXRpb25zXG4gIGxldCBsb2FkID0gUmVhY3QudXNlQ2FsbGJhY2soKGhyZWYsIG9wdHMpID0+IHtcbiAgICAhcm91dGVJZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVJZCBhdmFpbGFibGUgZm9yIGZldGNoZXIubG9hZCgpXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcm91dGVyLmZldGNoKGZldGNoZXJLZXksIHJvdXRlSWQsIGhyZWYsIG9wdHMpO1xuICB9LCBbZmV0Y2hlcktleSwgcm91dGVJZCwgcm91dGVyXSk7XG4gIGxldCBzdWJtaXRJbXBsID0gdXNlU3VibWl0KCk7XG4gIGxldCBzdWJtaXQgPSBSZWFjdC51c2VDYWxsYmFjaygodGFyZ2V0LCBvcHRzKSA9PiB7XG4gICAgc3VibWl0SW1wbCh0YXJnZXQsIF9leHRlbmRzKHt9LCBvcHRzLCB7XG4gICAgICBuYXZpZ2F0ZTogZmFsc2UsXG4gICAgICBmZXRjaGVyS2V5XG4gICAgfSkpO1xuICB9LCBbZmV0Y2hlcktleSwgc3VibWl0SW1wbF0pO1xuICBsZXQgRmV0Y2hlckZvcm0gPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgRmV0Y2hlckZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm0sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBuYXZpZ2F0ZTogZmFsc2UsXG4gICAgICAgIGZldGNoZXJLZXk6IGZldGNoZXJLZXksXG4gICAgICAgIHJlZjogcmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgRmV0Y2hlckZvcm0uZGlzcGxheU5hbWUgPSBcImZldGNoZXIuRm9ybVwiO1xuICAgIH1cbiAgICByZXR1cm4gRmV0Y2hlckZvcm07XG4gIH0sIFtmZXRjaGVyS2V5XSk7XG4gIC8vIEV4cG9zZWQgRmV0Y2hlcldpdGhDb21wb25lbnRzXG4gIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGZldGNoZXJLZXkpIHx8IElETEVfRkVUQ0hFUjtcbiAgbGV0IGRhdGEgPSBmZXRjaGVyRGF0YS5nZXQoZmV0Y2hlcktleSk7XG4gIGxldCBmZXRjaGVyV2l0aENvbXBvbmVudHMgPSBSZWFjdC51c2VNZW1vKCgpID0+IF9leHRlbmRzKHtcbiAgICBGb3JtOiBGZXRjaGVyRm9ybSxcbiAgICBzdWJtaXQsXG4gICAgbG9hZFxuICB9LCBmZXRjaGVyLCB7XG4gICAgZGF0YVxuICB9KSwgW0ZldGNoZXJGb3JtLCBzdWJtaXQsIGxvYWQsIGZldGNoZXIsIGRhdGFdKTtcbiAgcmV0dXJuIGZldGNoZXJXaXRoQ29tcG9uZW50cztcbn1cbi8qKlxuICogUHJvdmlkZXMgYWxsIGZldGNoZXJzIGN1cnJlbnRseSBvbiB0aGUgcGFnZS4gVXNlZnVsIGZvciBsYXlvdXRzIGFuZCBwYXJlbnRcbiAqIHJvdXRlcyB0aGF0IG5lZWQgdG8gcHJvdmlkZSBwZW5kaW5nL29wdGltaXN0aWMgVUkgcmVnYXJkaW5nIHRoZSBmZXRjaC5cbiAqL1xuZnVuY3Rpb24gdXNlRmV0Y2hlcnMoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUZldGNoZXJzKTtcbiAgcmV0dXJuIEFycmF5LmZyb20oc3RhdGUuZmV0Y2hlcnMuZW50cmllcygpKS5tYXAoX3JlZjExID0+IHtcbiAgICBsZXQgW2tleSwgZmV0Y2hlcl0gPSBfcmVmMTE7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBmZXRjaGVyLCB7XG4gICAgICBrZXlcbiAgICB9KTtcbiAgfSk7XG59XG5jb25zdCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkgPSBcInJlYWN0LXJvdXRlci1zY3JvbGwtcG9zaXRpb25zXCI7XG5sZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSB7fTtcbi8qKlxuICogV2hlbiByZW5kZXJlZCBpbnNpZGUgYSBSb3V0ZXJQcm92aWRlciwgd2lsbCByZXN0b3JlIHNjcm9sbCBwb3NpdGlvbnMgb24gbmF2aWdhdGlvbnNcbiAqL1xuZnVuY3Rpb24gdXNlU2Nyb2xsUmVzdG9yYXRpb24oX3RlbXA0KSB7XG4gIGxldCB7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSA9IF90ZW1wNCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDQ7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VTY3JvbGxSZXN0b3JhdGlvbik7XG4gIGxldCB7XG4gICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBtYXRjaGVzID0gdXNlTWF0Y2hlcygpO1xuICBsZXQgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb24oKTtcbiAgLy8gVHJpZ2dlciBtYW51YWwgc2Nyb2xsIHJlc3RvcmF0aW9uIHdoaWxlIHdlJ3JlIGFjdGl2ZVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIjtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgICB9O1xuICB9LCBbXSk7XG4gIC8vIFNhdmUgcG9zaXRpb25zIG9uIHBhZ2VoaWRlXG4gIHVzZVBhZ2VIaWRlKFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAobmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIGxldCBrZXkgPSAoZ2V0S2V5ID8gZ2V0S2V5KGxvY2F0aW9uLCBtYXRjaGVzKSA6IG51bGwpIHx8IGxvY2F0aW9uLmtleTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KHNhdmVkU2Nyb2xsUG9zaXRpb25zKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIkZhaWxlZCB0byBzYXZlIHNjcm9sbCBwb3NpdGlvbnMgaW4gc2Vzc2lvblN0b3JhZ2UsIDxTY3JvbGxSZXN0b3JhdGlvbiAvPiB3aWxsIG5vdCB3b3JrIHByb3Blcmx5IChcIiArIGVycm9yICsgXCIpLlwiKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgfSwgW3N0b3JhZ2VLZXksIGdldEtleSwgbmF2aWdhdGlvbi5zdGF0ZSwgbG9jYXRpb24sIG1hdGNoZXNdKSk7XG4gIC8vIFJlYWQgaW4gYW55IHNhdmVkIHNjcm9sbCBsb2NhdGlvbnNcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgc2Vzc2lvblBvc2l0aW9ucyA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkpO1xuICAgICAgICBpZiAoc2Vzc2lvblBvc2l0aW9ucykge1xuICAgICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBuby1vcCwgdXNlIGRlZmF1bHQgZW1wdHkgb2JqZWN0XG4gICAgICB9XG4gICAgfSwgW3N0b3JhZ2VLZXldKTtcbiAgICAvLyBFbmFibGUgc2Nyb2xsIHJlc3RvcmF0aW9uIGluIHRoZSByb3V0ZXJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgbGV0IGdldEtleVdpdGhvdXRCYXNlbmFtZSA9IGdldEtleSAmJiBiYXNlbmFtZSAhPT0gXCIvXCIgPyAobG9jYXRpb24sIG1hdGNoZXMpID0+IGdldEtleSggLy8gU3RyaXAgdGhlIGJhc2VuYW1lIHRvIG1hdGNoIHVzZUxvY2F0aW9uKClcbiAgICAgIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KSwgbWF0Y2hlcykgOiBnZXRLZXk7XG4gICAgICBsZXQgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uID0gcm91dGVyID09IG51bGwgPyB2b2lkIDAgOiByb3V0ZXIuZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24oc2F2ZWRTY3JvbGxQb3NpdGlvbnMsICgpID0+IHdpbmRvdy5zY3JvbGxZLCBnZXRLZXlXaXRob3V0QmFzZW5hbWUpO1xuICAgICAgcmV0dXJuICgpID0+IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiAmJiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24oKTtcbiAgICB9LCBbcm91dGVyLCBiYXNlbmFtZSwgZ2V0S2V5XSk7XG4gICAgLy8gUmVzdG9yZSBzY3JvbGxpbmcgd2hlbiBzdGF0ZS5yZXN0b3JlU2Nyb2xsUG9zaXRpb24gY2hhbmdlc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAvLyBFeHBsaWNpdCBmYWxzZSBtZWFucyBkb24ndCBkbyBhbnl0aGluZyAodXNlZCBmb3Igc3VibWlzc2lvbnMpXG4gICAgICBpZiAocmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBiZWVuIGhlcmUgYmVmb3JlLCBzY3JvbGwgdG8gaXRcbiAgICAgIGlmICh0eXBlb2YgcmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyB0cnkgdG8gc2Nyb2xsIHRvIHRoZSBoYXNoXG4gICAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgICBsZXQgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkZWNvZGVVUklDb21wb25lbnQobG9jYXRpb24uaGFzaC5zbGljZSgxKSkpO1xuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICBlbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRG9uJ3QgcmVzZXQgaWYgdGhpcyBuYXZpZ2F0aW9uIG9wdGVkIG91dFxuICAgICAgaWYgKHByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBvdGhlcndpc2UgZ28gdG8gdGhlIHRvcCBvbiBuZXcgbG9jYXRpb25zXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgfSwgW2xvY2F0aW9uLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24sIHByZXZlbnRTY3JvbGxSZXNldF0pO1xuICB9XG59XG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBiZWZvcmV1bmxvYWRgIGV2ZW50LiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIHNhdmluZyBzb21lIGRhdGEgdG8gYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGp1c3QgYmVmb3JlIHRoZSBwYWdlXG4gKiByZWZyZXNoZXMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cbmZ1bmN0aW9uIHVzZUJlZm9yZVVubG9hZChjYWxsYmFjaywgb3B0aW9ucykge1xuICBsZXQge1xuICAgIGNhcHR1cmVcbiAgfSA9IG9wdGlvbnMgfHwge307XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG9wdHMgPSBjYXB0dXJlICE9IG51bGwgPyB7XG4gICAgICBjYXB0dXJlXG4gICAgfSA6IHVuZGVmaW5lZDtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2ssIGNhcHR1cmVdKTtcbn1cbi8qKlxuICogU2V0dXAgYSBjYWxsYmFjayB0byBiZSBmaXJlZCBvbiB0aGUgd2luZG93J3MgYHBhZ2VoaWRlYCBldmVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBzYXZpbmcgc29tZSBkYXRhIHRvIGB3aW5kb3cubG9jYWxTdG9yYWdlYCBqdXN0IGJlZm9yZSB0aGUgcGFnZVxuICogcmVmcmVzaGVzLiAgVGhpcyBldmVudCBpcyBiZXR0ZXIgc3VwcG9ydGVkIHRoYW4gYmVmb3JldW5sb2FkIGFjcm9zcyBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBUaGUgYGNhbGxiYWNrYCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBjcmVhdGVkIHdpdGhcbiAqIGBSZWFjdC51c2VDYWxsYmFjaygpYC5cbiAqL1xuZnVuY3Rpb24gdXNlUGFnZUhpZGUoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgbGV0IHtcbiAgICBjYXB0dXJlXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8ge1xuICAgICAgY2FwdHVyZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFjaywgY2FwdHVyZV0pO1xufVxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCB1c2VCbG9ja2VyIHRvIHNob3cgYSB3aW5kb3cuY29uZmlybSBwcm9tcHQgdG8gdXNlcnMgaW5zdGVhZFxuICogb2YgYnVpbGRpbmcgYSBjdXN0b20gVUkgd2l0aCB1c2VCbG9ja2VyLlxuICpcbiAqIFdhcm5pbmc6IFRoaXMgaGFzICphIGxvdCBvZiByb3VnaCBlZGdlcyogYW5kIGJlaGF2ZXMgdmVyeSBkaWZmZXJlbnRseSAoYW5kXG4gKiB2ZXJ5IGluY29ycmVjdGx5IGluIHNvbWUgY2FzZXMpIGFjcm9zcyBicm93c2VycyBpZiB1c2VyIGNsaWNrIGFkZGl0aW9uXG4gKiBiYWNrL2ZvcndhcmQgbmF2aWdhdGlvbnMgd2hpbGUgdGhlIGNvbmZpcm0gaXMgb3Blbi4gIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICovXG5mdW5jdGlvbiB1c2VQcm9tcHQoX3JlZjEyKSB7XG4gIGxldCB7XG4gICAgd2hlbixcbiAgICBtZXNzYWdlXG4gIH0gPSBfcmVmMTI7XG4gIGxldCBibG9ja2VyID0gdXNlQmxvY2tlcih3aGVuKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIpIHtcbiAgICAgIGxldCBwcm9jZWVkID0gd2luZG93LmNvbmZpcm0obWVzc2FnZSk7XG4gICAgICBpZiAocHJvY2VlZCkge1xuICAgICAgICAvLyBUaGlzIHRpbWVvdXQgaXMgbmVlZGVkIHRvIGF2b2lkIGEgd2VpcmQgXCJyYWNlXCIgb24gUE9QIG5hdmlnYXRpb25zXG4gICAgICAgIC8vIGJldHdlZW4gdGhlIGB3aW5kb3cuaGlzdG9yeWAgcmV2ZXJ0IG5hdmlnYXRpb24gYW5kIHRoZSByZXN1bHQgb2ZcbiAgICAgICAgLy8gYHdpbmRvdy5jb25maXJtYFxuICAgICAgICBzZXRUaW1lb3V0KGJsb2NrZXIucHJvY2VlZCwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBibG9ja2VyLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbYmxvY2tlciwgbWVzc2FnZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiAhd2hlbikge1xuICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIHdoZW5dKTtcbn1cbi8qKlxuICogUmV0dXJuIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZXJlIGlzIGFuIGFjdGl2ZSB2aWV3IHRyYW5zaXRpb24gdG8gdGhlXG4gKiBnaXZlbiBocmVmLiAgWW91IGNhbiB1c2UgdGhpcyB2YWx1ZSB0byByZW5kZXIgQ1NTIGNsYXNzZXMgb3Igdmlld1RyYW5zaXRpb25OYW1lXG4gKiBzdHlsZXMgb250byB5b3VyIGVsZW1lbnRzXG4gKlxuICogQHBhcmFtIGhyZWYgVGhlIGRlc3RpbmF0aW9uIGhyZWZcbiAqIEBwYXJhbSBbb3B0cy5yZWxhdGl2ZV0gUmVsYXRpdmUgcm91dGluZyB0eXBlIChcInJvdXRlXCIgfCBcInBhdGhcIilcbiAqL1xuZnVuY3Rpb24gdXNlVmlld1RyYW5zaXRpb25TdGF0ZSh0bywgb3B0cykge1xuICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIGxldCB2dENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFZpZXdUcmFuc2l0aW9uQ29udGV4dCk7XG4gICEodnRDb250ZXh0ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJgdW5zdGFibGVfdXNlVmlld1RyYW5zaXRpb25TdGF0ZWAgbXVzdCBiZSB1c2VkIHdpdGhpbiBgcmVhY3Qtcm91dGVyLWRvbWAncyBgUm91dGVyUHJvdmlkZXJgLiAgXCIgKyBcIkRpZCB5b3UgYWNjaWRlbnRhbGx5IGltcG9ydCBgUm91dGVyUHJvdmlkZXJgIGZyb20gYHJlYWN0LXJvdXRlcmA/XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLnVzZVZpZXdUcmFuc2l0aW9uU3RhdGUpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlOiBvcHRzLnJlbGF0aXZlXG4gIH0pO1xuICBpZiAoIXZ0Q29udGV4dC5pc1RyYW5zaXRpb25pbmcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IGN1cnJlbnRQYXRoID0gc3RyaXBCYXNlbmFtZSh2dENvbnRleHQuY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgdnRDb250ZXh0LmN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgbGV0IG5leHRQYXRoID0gc3RyaXBCYXNlbmFtZSh2dENvbnRleHQubmV4dExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgdnRDb250ZXh0Lm5leHRMb2NhdGlvbi5wYXRobmFtZTtcbiAgLy8gVHJhbnNpdGlvbiBpcyBhY3RpdmUgaWYgd2UncmUgZ29pbmcgdG8gb3IgY29taW5nIGZyb20gdGhlIGluZGljYXRlZFxuICAvLyBkZXN0aW5hdGlvbi4gIFRoaXMgZW5zdXJlcyB0aGF0IG90aGVyIFBVU0ggbmF2aWdhdGlvbnMgdGhhdCByZXZlcnNlXG4gIC8vIGFuIGluZGljYXRlZCB0cmFuc2l0aW9uIGFwcGx5LiAgSS5lLiwgb24gdGhlIGxpc3QgdmlldyB5b3UgaGF2ZTpcbiAgLy9cbiAgLy8gICA8TmF2TGluayB0bz1cIi9kZXRhaWxzLzFcIiB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbj5cbiAgLy9cbiAgLy8gSWYgeW91IGNsaWNrIHRoZSBicmVhZGNydW1iIGJhY2sgdG8gdGhlIGxpc3QgdmlldzpcbiAgLy9cbiAgLy8gICA8TmF2TGluayB0bz1cIi9saXN0XCIgdW5zdGFibGVfdmlld1RyYW5zaXRpb24+XG4gIC8vXG4gIC8vIFdlIHNob3VsZCBhcHBseSB0aGUgdHJhbnNpdGlvbiBiZWNhdXNlIGl0J3MgaW5kaWNhdGVkIGFzIGFjdGl2ZSBnb2luZ1xuICAvLyBmcm9tIC9saXN0IC0+IC9kZXRhaWxzLzEgYW5kIHRoZXJlZm9yZSBzaG91bGQgYmUgYWN0aXZlIG9uIHRoZSByZXZlcnNlXG4gIC8vIChldmVuIHRob3VnaCB0aGlzIGlzbid0IHN0cmljdGx5IGEgUE9QIHJldmVyc2UpXG4gIHJldHVybiBtYXRjaFBhdGgocGF0aC5wYXRobmFtZSwgbmV4dFBhdGgpICE9IG51bGwgfHwgbWF0Y2hQYXRoKHBhdGgucGF0aG5hbWUsIGN1cnJlbnRQYXRoKSAhPSBudWxsO1xufVxuLy8jZW5kcmVnaW9uXG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEZvcm0sIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmssIFJvdXRlclByb3ZpZGVyLCBTY3JvbGxSZXN0b3JhdGlvbiwgRmV0Y2hlcnNDb250ZXh0IGFzIFVOU0FGRV9GZXRjaGVyc0NvbnRleHQsIFZpZXdUcmFuc2l0aW9uQ29udGV4dCBhcyBVTlNBRkVfVmlld1RyYW5zaXRpb25Db250ZXh0LCB1c2VTY3JvbGxSZXN0b3JhdGlvbiBhcyBVTlNBRkVfdXNlU2Nyb2xsUmVzdG9yYXRpb24sIGNyZWF0ZUJyb3dzZXJSb3V0ZXIsIGNyZWF0ZUhhc2hSb3V0ZXIsIGNyZWF0ZVNlYXJjaFBhcmFtcywgSGlzdG9yeVJvdXRlciBhcyB1bnN0YWJsZV9IaXN0b3J5Um91dGVyLCB1c2VQcm9tcHQgYXMgdW5zdGFibGVfdXNlUHJvbXB0LCB1c2VWaWV3VHJhbnNpdGlvblN0YXRlIGFzIHVuc3RhYmxlX3VzZVZpZXdUcmFuc2l0aW9uU3RhdGUsIHVzZUJlZm9yZVVubG9hZCwgdXNlRmV0Y2hlciwgdXNlRmV0Y2hlcnMsIHVzZUZvcm1BY3Rpb24sIHVzZUxpbmtDbGlja0hhbmRsZXIsIHVzZVNlYXJjaFBhcmFtcywgdXNlU3VibWl0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuY29uc3QgU2V0dGluZ3MgPSAoe3VzZXJEZXRhaWxzfSkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxzZWN0aW9uPlxuICAgICAgICAgICAgPHA+VGhpcyBpcyB0aGUgc2V0dGluZ3MgcGFnZTwvcD5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2V0dGluZ3M7XG4iLCJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbmNvbnN0IEFib3V0ID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8cD5UaGlzIGlzIGFib3V0IHBhZ2U8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQWJvdXQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogSXQgZW5jb2RlcyBhIHN0cmluZyBieSByZXBsYWNpbmcgYWxsIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGluIHRoZSB1bnJlc2VydmVkIHNldCB3aXRoXG4gKiB0aGVpciBwZXJjZW50LWVuY29kZWQgZXF1aXZhbGVudHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBlbmNvZGUuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlbmNvZGUoc3RyKSB7XG4gIGNvbnN0IGNoYXJNYXAgPSB7XG4gICAgJyEnOiAnJTIxJyxcbiAgICBcIidcIjogJyUyNycsXG4gICAgJygnOiAnJTI4JyxcbiAgICAnKSc6ICclMjknLFxuICAgICd+JzogJyU3RScsXG4gICAgJyUyMCc6ICcrJyxcbiAgICAnJTAwJzogJ1xceDAwJ1xuICB9O1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCl+XXwlMjB8JTAwL2csIGZ1bmN0aW9uIHJlcGxhY2VyKG1hdGNoKSB7XG4gICAgcmV0dXJuIGNoYXJNYXBbbWF0Y2hdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhcmFtcyBvYmplY3QgYW5kIGNvbnZlcnRzIGl0IHRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBGb3JtRGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgcGFzc2VkIHRvIHRoZSBBeGlvcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKSB7XG4gIHRoaXMuX3BhaXJzID0gW107XG5cbiAgcGFyYW1zICYmIHRvRm9ybURhdGEocGFyYW1zLCB0aGlzLCBvcHRpb25zKTtcbn1cblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuX3BhaXJzLnB1c2goW25hbWUsIHZhbHVlXSk7XG59O1xuXG5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhlbmNvZGVyKSB7XG4gIGNvbnN0IF9lbmNvZGUgPSBlbmNvZGVyID8gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2Rlci5jYWxsKHRoaXMsIHZhbHVlLCBlbmNvZGUpO1xuICB9IDogZW5jb2RlO1xuXG4gIHJldHVybiB0aGlzLl9wYWlycy5tYXAoZnVuY3Rpb24gZWFjaChwYWlyKSB7XG4gICAgcmV0dXJuIF9lbmNvZGUocGFpclswXSkgKyAnPScgKyBfZW5jb2RlKHBhaXJbMV0pO1xuICB9LCAnJykuam9pbignJicpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5cbi8qKlxuICogSXQgcmVwbGFjZXMgYWxsIGluc3RhbmNlcyBvZiB0aGUgY2hhcmFjdGVycyBgOmAsIGAkYCwgYCxgLCBgK2AsIGBbYCwgYW5kIGBdYCB3aXRoIHRoZWlyXG4gKiBVUkkgZW5jb2RlZCBjb3VudGVycGFydHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsIFRoZSB2YWx1ZSB0byBiZSBlbmNvZGVkLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIHs/b2JqZWN0fSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBcbiAgY29uc3QgX2VuY29kZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUgfHwgZW5jb2RlO1xuXG4gIGNvbnN0IHNlcmlhbGl6ZUZuID0gb3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZTtcblxuICBsZXQgc2VyaWFsaXplZFBhcmFtcztcblxuICBpZiAoc2VyaWFsaXplRm4pIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gc2VyaWFsaXplRm4ocGFyYW1zLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gdXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSA/XG4gICAgICBwYXJhbXMudG9TdHJpbmcoKSA6XG4gICAgICBuZXcgQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKS50b1N0cmluZyhfZW5jb2RlKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgY29uc3QgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbmNsYXNzIEludGVyY2VwdG9yTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICAgKi9cbiAgdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgICAgZnVsZmlsbGVkLFxuICAgICAgcmVqZWN0ZWQsXG4gICAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBpbnRlcmNlcHRvciB3YXMgcmVtb3ZlZCwgYGZhbHNlYCBvdGhlcndpc2VcbiAgICovXG4gIGVqZWN0KGlkKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpbnRlcmNlcHRvcnMgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjbGVhcigpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVycykge1xuICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICAgKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmb3JFYWNoKGZuKSB7XG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgICBmbihoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxufTtcbiIsImltcG9ydCBVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcydcbmltcG9ydCBGb3JtRGF0YSBmcm9tICcuL2NsYXNzZXMvRm9ybURhdGEuanMnXG5pbXBvcnQgQmxvYiBmcm9tICcuL2NsYXNzZXMvQmxvYi5qcydcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0Jyb3dzZXI6IHRydWUsXG4gIGNsYXNzZXM6IHtcbiAgICBVUkxTZWFyY2hQYXJhbXMsXG4gICAgRm9ybURhdGEsXG4gICAgQmxvYlxuICB9LFxuICBwcm90b2NvbHM6IFsnaHR0cCcsICdodHRwcycsICdmaWxlJywgJ2Jsb2InLCAndXJsJywgJ2RhdGEnXVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgPyBVUkxTZWFyY2hQYXJhbXMgOiBBeGlvc1VSTFNlYXJjaFBhcmFtcztcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJyA/IEZvcm1EYXRhIDogbnVsbDtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgPyBCbG9iIDogbnVsbFxuIiwiY29uc3QgaGFzQnJvd3NlckVudiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJFbnYgPSAoXG4gIChwcm9kdWN0KSA9PiB7XG4gICAgcmV0dXJuIGhhc0Jyb3dzZXJFbnYgJiYgWydSZWFjdE5hdGl2ZScsICdOYXRpdmVTY3JpcHQnLCAnTlMnXS5pbmRleE9mKHByb2R1Y3QpIDwgMFxuICB9KSh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIHdlYldvcmtlciBlbnZpcm9ubWVudFxuICpcbiAqIEFsdGhvdWdoIHRoZSBgaXNTdGFuZGFyZEJyb3dzZXJFbnZgIG1ldGhvZCBpbmRpY2F0ZXMgdGhhdFxuICogYGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyYCwgdGhlIFdlYldvcmtlciB3aWxsIHN0aWxsIGJlXG4gKiBmaWx0ZXJlZCBvdXQgZHVlIHRvIGl0cyBqdWRnbWVudCBzdGFuZGFyZFxuICogYHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdgLlxuICogVGhpcyBsZWFkcyB0byBhIHByb2JsZW0gd2hlbiBheGlvcyBwb3N0IGBGb3JtRGF0YWAgaW4gd2ViV29ya2VyXG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiA9ICgoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJlxuICAgIHR5cGVvZiBzZWxmLmltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbidcbiAgKTtcbn0pKCk7XG5cbmV4cG9ydCB7XG4gIGhhc0Jyb3dzZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyRW52XG59XG4iLCJpbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi9ub2RlL2luZGV4LmpzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vY29tbW9uL3V0aWxzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAuLi51dGlscyxcbiAgLi4ucGxhdGZvcm1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcblxuICAgIGlmIChuYW1lID09PSAnX19wcm90b19fJykgcmV0dXJuIHRydWU7XG5cbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscy5pc0FycmF5KHRhcmdldCkgPyB0YXJnZXQubGVuZ3RoIDogbmFtZTtcblxuICAgIGlmIChpc0xhc3QpIHtcbiAgICAgIGlmICh1dGlscy5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscy5pc0FycmF5KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IGFycmF5VG9PYmplY3QodGFyZ2V0W25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoRW50cnkoZm9ybURhdGEsIChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgYnVpbGRQYXRoKHBhcnNlUHJvcFBhdGgobmFtZSksIHZhbHVlLCBvYmosIDApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtRGF0YVRvSlNPTjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCB0b1VSTEVuY29kZWRGb3JtIGZyb20gJy4uL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4uL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuXG4vKipcbiAqIEl0IHRha2VzIGEgc3RyaW5nLCB0cmllcyB0byBwYXJzZSBpdCwgYW5kIGlmIGl0IGZhaWxzLCBpdCByZXR1cm5zIHRoZSBzdHJpbmdpZmllZCB2ZXJzaW9uXG4gKiBvZiB0aGUgaW5wdXRcbiAqXG4gKiBAcGFyYW0ge2FueX0gcmF3VmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgc3RyaW5naWZpZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXJzZXIgLSBBIGZ1bmN0aW9uIHRoYXQgcGFyc2VzIGEgc3RyaW5nIGludG8gYSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVuY29kZXIgLSBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSB2YWx1ZSBhbmQgcmV0dXJucyBhIHN0cmluZy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZ2lmaWVkIHZlcnNpb24gb2YgdGhlIHJhd1ZhbHVlLlxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxuY29uc3QgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBbJ3hocicsICdodHRwJ10sXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpIHx8ICcnO1xuICAgIGNvbnN0IGhhc0pTT05Db250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA+IC0xO1xuICAgIGNvbnN0IGlzT2JqZWN0UGF5bG9hZCA9IHV0aWxzLmlzT2JqZWN0KGRhdGEpO1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCAmJiB1dGlscy5pc0hUTUxGb3JtKGRhdGEpKSB7XG4gICAgICBkYXRhID0gbmV3IEZvcm1EYXRhKGRhdGEpO1xuICAgIH1cblxuICAgIGNvbnN0IGlzRm9ybURhdGEgPSB1dGlscy5pc0Zvcm1EYXRhKGRhdGEpO1xuXG4gICAgaWYgKGlzRm9ybURhdGEpIHtcbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGxldCBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCkge1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgY29uc3QgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG5cbiAgICAgICAgcmV0dXJuIHRvRm9ybURhdGEoXG4gICAgICAgICAgaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSxcbiAgICAgICAgICBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpLFxuICAgICAgICAgIHRoaXMuZm9ybVNlcmlhbGl6ZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGhhc0pTT05Db250ZW50VHlwZSApIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nLCBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgY29uc3QgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIGNvbnN0IEpTT05SZXF1ZXN0ZWQgPSB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKGRhdGEgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCddLCAobWV0aG9kKSA9PiB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gdG9Gb3JtRGF0YShkYXRhLCBuZXcgcGxhdGZvcm0uY2xhc3Nlcy5VUkxTZWFyY2hQYXJhbXMoKSwgT2JqZWN0LmFzc2lnbih7XG4gICAgdmlzaXRvcjogZnVuY3Rpb24odmFsdWUsIGtleSwgcGF0aCwgaGVscGVycykge1xuICAgICAgaWYgKHBsYXRmb3JtLmlzTm9kZSAmJiB1dGlscy5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygnYmFzZTY0JykpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoZWxwZXJzLmRlZmF1bHRWaXNpdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCBvcHRpb25zKSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLy8gUmF3QXhpb3NIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xuY29uc3QgaWdub3JlRHVwbGljYXRlT2YgPSB1dGlscy50b09iamVjdFNldChbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXSk7XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByYXdIZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5leHBvcnQgZGVmYXVsdCByYXdIZWFkZXJzID0+IHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG4gIGxldCBpO1xuXG4gIHJhd0hlYWRlcnMgJiYgcmF3SGVhZGVycy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSBsaW5lLnN1YnN0cmluZyhpICsgMSkudHJpbSgpO1xuXG4gICAgaWYgKCFrZXkgfHwgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mW2tleV0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0pIHtcbiAgICAgICAgcGFyc2VkW2tleV0ucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBbdmFsXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBhcnNlSGVhZGVycyBmcm9tICcuLi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyc7XG5cbmNvbnN0ICRpbnRlcm5hbHMgPSBTeW1ib2woJ2ludGVybmFscycpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIgJiYgU3RyaW5nKGhlYWRlcikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWYWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRva2VucyhzdHIpIHtcbiAgY29uc3QgdG9rZW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgdG9rZW5zUkUgPSAvKFteXFxzLDs9XSspXFxzKig/Oj1cXHMqKFteLDtdKykpPy9nO1xuICBsZXQgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHRva2Vuc1JFLmV4ZWMoc3RyKSkpIHtcbiAgICB0b2tlbnNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5jb25zdCBpc1ZhbGlkSGVhZGVyTmFtZSA9IChzdHIpID0+IC9eWy1fYS16QS1aMC05XmB8fiwhIyQlJicqKy5dKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgaGVhZGVyKTtcbiAgfVxuXG4gIGlmIChpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgICB2YWx1ZSA9IGhlYWRlcjtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1JlZ0V4cChmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci50ZXN0KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKFthLXpcXGRdKShcXHcqKS9nLCAodywgY2hhciwgc3RyKSA9PiB7XG4gICAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpICsgc3RyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEFjY2Vzc29ycyhvYmosIGhlYWRlcikge1xuICBjb25zdCBhY2Nlc3Nvck5hbWUgPSB1dGlscy50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNsYXNzIEF4aW9zSGVhZGVycyB7XG4gIGNvbnN0cnVjdG9yKGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzICYmIHRoaXMuc2V0KGhlYWRlcnMpO1xuICB9XG5cbiAgc2V0KGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCAoX3ZhbHVlLCBfaGVhZGVyKSA9PiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkpO1xuXG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoaGVhZGVyKSB8fCBoZWFkZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzZXRIZWFkZXJzKGhlYWRlciwgdmFsdWVPclJld3JpdGUpXG4gICAgfSBlbHNlIGlmKHV0aWxzLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKG1hdGNoZXIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIsIHRydWUpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCcsICdBdXRob3JpemF0aW9uJ10pO1xuXG4vLyByZXNlcnZlZCBuYW1lcyBob3RmaXhcbnV0aWxzLnJlZHVjZURlc2NyaXB0b3JzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUsICh7dmFsdWV9LCBrZXkpID0+IHtcbiAgbGV0IG1hcHBlZCA9IGtleVswXS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpOyAvLyBtYXAgYHNldGAgPT4gYFNldGBcbiAgcmV0dXJuIHtcbiAgICBnZXQ6ICgpID0+IHZhbHVlLFxuICAgIHNldChoZWFkZXJWYWx1ZSkge1xuICAgICAgdGhpc1ttYXBwZWRdID0gaGVhZGVyVmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0hlYWRlcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsZWRFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVELCBjb25maWcsIHJlcXVlc3QpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbGVkRXJyb3I7XG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICB7XG4gICAgd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICBjb25zdCBjb29raWUgPSBbbmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSldO1xuXG4gICAgICB1dGlscy5pc051bWJlcihleHBpcmVzKSAmJiBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG5cbiAgICAgIHV0aWxzLmlzU3RyaW5nKHBhdGgpICYmIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcoZG9tYWluKSAmJiBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuXG4gICAgICBzZWN1cmUgPT09IHRydWUgJiYgY29va2llLnB1c2goJ3NlY3VyZScpO1xuXG4gICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICB9LFxuXG4gICAgcmVhZChuYW1lKSB7XG4gICAgICBjb25zdCBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgIH0sXG5cbiAgICByZW1vdmUobmFtZSkge1xuICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICB9XG4gIH1cblxuICA6XG5cbiAgLy8gTm9uLXN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICB7XG4gICAgd3JpdGUoKSB7fSxcbiAgICByZWFkKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICByZW1vdmUoKSB7fVxuICB9O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBpc0Fic29sdXRlVVJMIGZyb20gJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyc7XG5pbXBvcnQgY29tYmluZVVSTHMgZnJvbSAnLi4vaGVscGVycy9jb21iaW5lVVJMcy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvP1xcLyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4vLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICBjb25zdCBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICBjb25zdCB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBsZXQgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdHMgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgbGV0IGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNwZWVkb21ldGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgc2V0dGxlIGZyb20gJy4vLi4vY29yZS9zZXR0bGUuanMnO1xuaW1wb3J0IGNvb2tpZXMgZnJvbSAnLi8uLi9oZWxwZXJzL2Nvb2tpZXMuanMnO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gJy4vLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tICcuLi9jb3JlL2J1aWxkRnVsbFBhdGguanMnO1xuaW1wb3J0IGlzVVJMU2FtZU9yaWdpbiBmcm9tICcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBwYXJzZVByb3RvY29sIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgc3BlZWRvbWV0ZXIgZnJvbSAnLi4vaGVscGVycy9zcGVlZG9tZXRlci5qcyc7XG5cbmZ1bmN0aW9uIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtKSB7XG4gIGxldCBieXRlc05vdGlmaWVkID0gMDtcbiAgY29uc3QgX3NwZWVkb21ldGVyID0gc3BlZWRvbWV0ZXIoNTAsIDI1MCk7XG5cbiAgcmV0dXJuIGUgPT4ge1xuICAgIGNvbnN0IGxvYWRlZCA9IGUubG9hZGVkO1xuICAgIGNvbnN0IHRvdGFsID0gZS5sZW5ndGhDb21wdXRhYmxlID8gZS50b3RhbCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwcm9ncmVzc0J5dGVzID0gbG9hZGVkIC0gYnl0ZXNOb3RpZmllZDtcbiAgICBjb25zdCByYXRlID0gX3NwZWVkb21ldGVyKHByb2dyZXNzQnl0ZXMpO1xuICAgIGNvbnN0IGluUmFuZ2UgPSBsb2FkZWQgPD0gdG90YWw7XG5cbiAgICBieXRlc05vdGlmaWVkID0gbG9hZGVkO1xuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGxvYWRlZCxcbiAgICAgIHRvdGFsLFxuICAgICAgcHJvZ3Jlc3M6IHRvdGFsID8gKGxvYWRlZCAvIHRvdGFsKSA6IHVuZGVmaW5lZCxcbiAgICAgIGJ5dGVzOiBwcm9ncmVzc0J5dGVzLFxuICAgICAgcmF0ZTogcmF0ZSA/IHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBlc3RpbWF0ZWQ6IHJhdGUgJiYgdG90YWwgJiYgaW5SYW5nZSA/ICh0b3RhbCAtIGxvYWRlZCkgLyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXZlbnQ6IGVcbiAgICB9O1xuXG4gICAgZGF0YVtpc0Rvd25sb2FkU3RyZWFtID8gJ2Rvd25sb2FkJyA6ICd1cGxvYWQnXSA9IHRydWU7XG5cbiAgICBsaXN0ZW5lcihkYXRhKTtcbiAgfTtcbn1cblxuY29uc3QgaXNYSFJBZGFwdGVyU3VwcG9ydGVkID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJztcblxuZXhwb3J0IGRlZmF1bHQgaXNYSFJBZGFwdGVyU3VwcG9ydGVkICYmIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbmZpZy5oZWFkZXJzKS5ub3JtYWxpemUoKTtcbiAgICBsZXQge3Jlc3BvbnNlVHlwZSwgd2l0aFhTUkZUb2tlbn0gPSBjb25maWc7XG4gICAgbGV0IG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnRUeXBlO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52IHx8IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudikge1xuICAgICAgICByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShmYWxzZSk7IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICAgIH0gZWxzZSBpZiAoKGNvbnRlbnRUeXBlID0gcmVxdWVzdEhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSkgIT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGZpeCBzZW1pY29sb24gZHVwbGljYXRpb24gaXNzdWUgZm9yIFJlYWN0TmF0aXZlIEZvcm1EYXRhIGltcGxlbWVudGF0aW9uXG4gICAgICAgIGNvbnN0IFt0eXBlLCAuLi50b2tlbnNdID0gY29udGVudFR5cGUgPyBjb250ZW50VHlwZS5zcGxpdCgnOycpLm1hcCh0b2tlbiA9PiB0b2tlbi50cmltKCkpLmZpbHRlcihCb29sZWFuKSA6IFtdO1xuICAgICAgICByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShbdHlwZSB8fCAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScsIC4uLnRva2Vuc10uam9pbignOyAnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIGNvbnN0IHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICBjb25zdCBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKSk7XG4gICAgfVxuXG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oXG4gICAgICAgICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgJiYgcmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgbGV0IHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52KSB7XG4gICAgICB3aXRoWFNSRlRva2VuICYmIHV0aWxzLmlzRnVuY3Rpb24od2l0aFhTUkZUb2tlbikgJiYgKHdpdGhYU1JGVG9rZW4gPSB3aXRoWFNSRlRva2VuKGNvbmZpZykpO1xuXG4gICAgICBpZiAod2l0aFhTUkZUb2tlbiB8fCAod2l0aFhTUkZUb2tlbiAhPT0gZmFsc2UgJiYgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkpIHtcbiAgICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICAgIGNvbnN0IHhzcmZWYWx1ZSA9IGNvbmZpZy54c3JmSGVhZGVyTmFtZSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgJiYgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSk7XG5cbiAgICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICAgIHJlcXVlc3RIZWFkZXJzLnNldChjb25maWcueHNyZkhlYWRlck5hbWUsIHhzcmZWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgcmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShudWxsKTtcblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLnRvSlNPTigpLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihjb25maWcub25VcGxvYWRQcm9ncmVzcykpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgY2FuY2VsLnR5cGUgPyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcsIHJlcXVlc3QpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChmdWxsUGF0aCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL0F4aW9zRXJyb3IuanMnO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXNwb25zZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlUHJvdG9jb2wodXJsKSB7XG4gIGNvbnN0IG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufVxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBodHRwQWRhcHRlciBmcm9tICcuL2h0dHAuanMnO1xuaW1wb3J0IHhockFkYXB0ZXIgZnJvbSAnLi94aHIuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBrbm93bkFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyXG59XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnbmFtZScsIHt2YWx1ZX0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdhZGFwdGVyTmFtZScsIHt2YWx1ZX0pO1xuICB9XG59KTtcblxuY29uc3QgcmVuZGVyUmVhc29uID0gKHJlYXNvbikgPT4gYC0gJHtyZWFzb259YDtcblxuY29uc3QgaXNSZXNvbHZlZEhhbmRsZSA9IChhZGFwdGVyKSA9PiB1dGlscy5pc0Z1bmN0aW9uKGFkYXB0ZXIpIHx8IGFkYXB0ZXIgPT09IG51bGwgfHwgYWRhcHRlciA9PT0gZmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0QWRhcHRlcjogKGFkYXB0ZXJzKSA9PiB7XG4gICAgYWRhcHRlcnMgPSB1dGlscy5pc0FycmF5KGFkYXB0ZXJzKSA/IGFkYXB0ZXJzIDogW2FkYXB0ZXJzXTtcblxuICAgIGNvbnN0IHtsZW5ndGh9ID0gYWRhcHRlcnM7XG4gICAgbGV0IG5hbWVPckFkYXB0ZXI7XG4gICAgbGV0IGFkYXB0ZXI7XG5cbiAgICBjb25zdCByZWplY3RlZFJlYXNvbnMgPSB7fTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIG5hbWVPckFkYXB0ZXIgPSBhZGFwdGVyc1tpXTtcbiAgICAgIGxldCBpZDtcblxuICAgICAgYWRhcHRlciA9IG5hbWVPckFkYXB0ZXI7XG5cbiAgICAgIGlmICghaXNSZXNvbHZlZEhhbmRsZShuYW1lT3JBZGFwdGVyKSkge1xuICAgICAgICBhZGFwdGVyID0ga25vd25BZGFwdGVyc1soaWQgPSBTdHJpbmcobmFtZU9yQWRhcHRlcikpLnRvTG93ZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChhZGFwdGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgVW5rbm93biBhZGFwdGVyICcke2lkfSdgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRhcHRlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVqZWN0ZWRSZWFzb25zW2lkIHx8ICcjJyArIGldID0gYWRhcHRlcjtcbiAgICB9XG5cbiAgICBpZiAoIWFkYXB0ZXIpIHtcblxuICAgICAgY29uc3QgcmVhc29ucyA9IE9iamVjdC5lbnRyaWVzKHJlamVjdGVkUmVhc29ucylcbiAgICAgICAgLm1hcCgoW2lkLCBzdGF0ZV0pID0+IGBhZGFwdGVyICR7aWR9IGAgK1xuICAgICAgICAgIChzdGF0ZSA9PT0gZmFsc2UgPyAnaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnQnIDogJ2lzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkJylcbiAgICAgICAgKTtcblxuICAgICAgbGV0IHMgPSBsZW5ndGggP1xuICAgICAgICAocmVhc29ucy5sZW5ndGggPiAxID8gJ3NpbmNlIDpcXG4nICsgcmVhc29ucy5tYXAocmVuZGVyUmVhc29uKS5qb2luKCdcXG4nKSA6ICcgJyArIHJlbmRlclJlYXNvbihyZWFzb25zWzBdKSkgOlxuICAgICAgICAnYXMgbm8gYWRhcHRlciBzcGVjaWZpZWQnO1xuXG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgYFRoZXJlIGlzIG5vIHN1aXRhYmxlIGFkYXB0ZXIgdG8gZGlzcGF0Y2ggdGhlIHJlcXVlc3QgYCArIHMsXG4gICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHJhbnNmb3JtRGF0YSBmcm9tICcuL3RyYW5zZm9ybURhdGEuanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4uL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSBcIi4uL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzXCI7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXIpO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgcmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZVxuICAgICAgICApO1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL0F4aW9zSGVhZGVycy5qc1wiO1xuXG5jb25zdCBoZWFkZXJzVG9PYmplY3QgPSAodGhpbmcpID0+IHRoaW5nIGluc3RhbmNlb2YgQXhpb3NIZWFkZXJzID8gdGhpbmcudG9KU09OKCkgOiB0aGluZztcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgY29uc3QgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UsIGNhc2VsZXNzKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZS5jYWxsKHtjYXNlbGVzc30sIHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhhLCBiLCBjYXNlbGVzcykge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiLCBjYXNlbGVzcyk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEsIGNhc2VsZXNzKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKGEsIGIsIHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1lcmdlTWFwID0ge1xuICAgIHVybDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBtZXRob2Q6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgZGF0YTogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBiYXNlVVJMOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcGFyYW1zU2VyaWFsaXplcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXRNZXNzYWdlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhDcmVkZW50aWFsczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoWFNSRlRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGFkYXB0ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VUeXBlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZDb29raWVOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZIZWFkZXJOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGRlY29tcHJlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Q29udGVudExlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhCb2R5TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGJlZm9yZVJlZGlyZWN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zcG9ydDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cHNBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBjYW5jZWxUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBzb2NrZXRQYXRoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlRW5jb2Rpbmc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdmFsaWRhdGVTdGF0dXM6IG1lcmdlRGlyZWN0S2V5cyxcbiAgICBoZWFkZXJzOiAoYSwgYikgPT4gbWVyZ2VEZWVwUHJvcGVydGllcyhoZWFkZXJzVG9PYmplY3QoYSksIGhlYWRlcnNUb09iamVjdChiKSwgdHJ1ZSlcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZzEsIGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICBjb25zdCBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgY29uc3QgY29uZmlnVmFsdWUgPSBtZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdLCBwcm9wKTtcbiAgICAodXRpbHMuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59XG4iLCJleHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMS42LjdcIjsiLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi4vZW52L2RhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goKHR5cGUsIGkpID0+IHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuICh2YWx1ZSwgb3B0LCBvcHRzKSA9PiB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSksXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0RFUFJFQ0FURURcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JywgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gIH1cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGNvbnN0IG9wdCA9IGtleXNbaV07XG4gICAgY29uc3QgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICBjb25zdCByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgSW50ZXJjZXB0b3JNYW5hZ2VyIGZyb20gJy4vSW50ZXJjZXB0b3JNYW5hZ2VyLmpzJztcbmltcG9ydCBkaXNwYXRjaFJlcXVlc3QgZnJvbSAnLi9kaXNwYXRjaFJlcXVlc3QuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSAnLi9idWlsZEZ1bGxQYXRoLmpzJztcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAnLi4vaGVscGVycy92YWxpZGF0b3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuL0F4aW9zSGVhZGVycy5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGNvbmZpZ09yVXJsIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAgICogQHBhcmFtIHs/T2JqZWN0fSBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICAgKi9cbiAgYXN5bmMgcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGxldCBkdW1teTtcblxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA/IEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGR1bW15ID0ge30pIDogKGR1bW15ID0gbmV3IEVycm9yKCkpO1xuXG4gICAgICAgIC8vIHNsaWNlIG9mZiB0aGUgRXJyb3I6IC4uLiBsaW5lXG4gICAgICAgIGNvbnN0IHN0YWNrID0gZHVtbXkuc3RhY2sgPyBkdW1teS5zdGFjay5yZXBsYWNlKC9eLitcXG4vLCAnJykgOiAnJztcblxuICAgICAgICBpZiAoIWVyci5zdGFjaykge1xuICAgICAgICAgIGVyci5zdGFjayA9IHN0YWNrO1xuICAgICAgICAgIC8vIG1hdGNoIHdpdGhvdXQgdGhlIDIgdG9wIHN0YWNrIGxpbmVzXG4gICAgICAgIH0gZWxzZSBpZiAoc3RhY2sgJiYgIVN0cmluZyhlcnIuc3RhY2spLmVuZHNXaXRoKHN0YWNrLnJlcGxhY2UoL14uK1xcbi4rXFxuLywgJycpKSkge1xuICAgICAgICAgIGVyci5zdGFjayArPSAnXFxuJyArIHN0YWNrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIF9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gICAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gICAgfVxuXG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAgIGNvbnN0IHt0cmFuc2l0aW9uYWwsIHBhcmFtc1NlcmlhbGl6ZXIsIGhlYWRlcnN9ID0gY29uZmlnO1xuXG4gICAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIgIT0gbnVsbCkge1xuICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyYW1zU2VyaWFsaXplcikpIHtcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIgPSB7XG4gICAgICAgICAgc2VyaWFsaXplOiBwYXJhbXNTZXJpYWxpemVyXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHBhcmFtc1NlcmlhbGl6ZXIsIHtcbiAgICAgICAgICBlbmNvZGU6IHZhbGlkYXRvcnMuZnVuY3Rpb24sXG4gICAgICAgICAgc2VyaWFsaXplOiB2YWxpZGF0b3JzLmZ1bmN0aW9uXG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCBjb25maWcubWV0aG9kXG4gICAgY29uZmlnLm1ldGhvZCA9IChjb25maWcubWV0aG9kIHx8IHRoaXMuZGVmYXVsdHMubWV0aG9kIHx8ICdnZXQnKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gICAgbGV0IGNvbnRleHRIZWFkZXJzID0gaGVhZGVycyAmJiB1dGlscy5tZXJnZShcbiAgICAgIGhlYWRlcnMuY29tbW9uLFxuICAgICAgaGVhZGVyc1tjb25maWcubWV0aG9kXVxuICAgICk7XG5cbiAgICBoZWFkZXJzICYmIHV0aWxzLmZvckVhY2goXG4gICAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICAgIChtZXRob2QpID0+IHtcbiAgICAgICAgZGVsZXRlIGhlYWRlcnNbbWV0aG9kXTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuY29uY2F0KGNvbnRleHRIZWFkZXJzLCBoZWFkZXJzKTtcblxuICAgIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgICBjb25zdCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIGxldCBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBsZXQgcHJvbWlzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxlbjtcblxuICAgIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgICBjb25zdCBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QuYmluZCh0aGlzKSwgdW5kZWZpbmVkXTtcbiAgICAgIGNoYWluLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGNoYWluLnB1c2guYXBwbHkoY2hhaW4sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBsZW4gPSBjaGFpbi5sZW5ndGg7XG5cbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbltpKytdLCBjaGFpbltpKytdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgbGVuID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgbGV0IG5ld0NvbmZpZyA9IGNvbmZpZztcblxuICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGNvbnN0IG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIGNvbnN0IG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIG9uUmVqZWN0ZWQuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0LmNhbGwodGhpcywgbmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBpID0gMDtcbiAgICBsZW4gPSByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFVyaShjb25maWcpIHtcbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmV0dXJuIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG4gIH1cbn1cblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vQ2FuY2VsZWRFcnJvci5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge0NhbmNlbFRva2VufVxuICovXG5jbGFzcyBDYW5jZWxUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGxldCByZXNvbHZlUHJvbWlzZTtcblxuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b2tlbiA9IHRoaXM7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuKGNhbmNlbCA9PiB7XG4gICAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgICAgbGV0IGkgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgICAgfVxuICAgICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuID0gb25mdWxmaWxsZWQgPT4ge1xuICAgICAgbGV0IF9yZXNvbHZlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gICAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCk7XG4gICAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICAgKi9cbiAgdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIHRocm93IHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAgICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAgICovXG4gIHN0YXRpYyBzb3VyY2UoKSB7XG4gICAgbGV0IGNhbmNlbDtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgICBjYW5jZWwgPSBjO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbixcbiAgICAgIGNhbmNlbFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsVG9rZW47XG4iLCJjb25zdCBIdHRwU3RhdHVzQ29kZSA9IHtcbiAgQ29udGludWU6IDEwMCxcbiAgU3dpdGNoaW5nUHJvdG9jb2xzOiAxMDEsXG4gIFByb2Nlc3Npbmc6IDEwMixcbiAgRWFybHlIaW50czogMTAzLFxuICBPazogMjAwLFxuICBDcmVhdGVkOiAyMDEsXG4gIEFjY2VwdGVkOiAyMDIsXG4gIE5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbjogMjAzLFxuICBOb0NvbnRlbnQ6IDIwNCxcbiAgUmVzZXRDb250ZW50OiAyMDUsXG4gIFBhcnRpYWxDb250ZW50OiAyMDYsXG4gIE11bHRpU3RhdHVzOiAyMDcsXG4gIEFscmVhZHlSZXBvcnRlZDogMjA4LFxuICBJbVVzZWQ6IDIyNixcbiAgTXVsdGlwbGVDaG9pY2VzOiAzMDAsXG4gIE1vdmVkUGVybWFuZW50bHk6IDMwMSxcbiAgRm91bmQ6IDMwMixcbiAgU2VlT3RoZXI6IDMwMyxcbiAgTm90TW9kaWZpZWQ6IDMwNCxcbiAgVXNlUHJveHk6IDMwNSxcbiAgVW51c2VkOiAzMDYsXG4gIFRlbXBvcmFyeVJlZGlyZWN0OiAzMDcsXG4gIFBlcm1hbmVudFJlZGlyZWN0OiAzMDgsXG4gIEJhZFJlcXVlc3Q6IDQwMCxcbiAgVW5hdXRob3JpemVkOiA0MDEsXG4gIFBheW1lbnRSZXF1aXJlZDogNDAyLFxuICBGb3JiaWRkZW46IDQwMyxcbiAgTm90Rm91bmQ6IDQwNCxcbiAgTWV0aG9kTm90QWxsb3dlZDogNDA1LFxuICBOb3RBY2NlcHRhYmxlOiA0MDYsXG4gIFByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZDogNDA3LFxuICBSZXF1ZXN0VGltZW91dDogNDA4LFxuICBDb25mbGljdDogNDA5LFxuICBHb25lOiA0MTAsXG4gIExlbmd0aFJlcXVpcmVkOiA0MTEsXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogNDEyLFxuICBQYXlsb2FkVG9vTGFyZ2U6IDQxMyxcbiAgVXJpVG9vTG9uZzogNDE0LFxuICBVbnN1cHBvcnRlZE1lZGlhVHlwZTogNDE1LFxuICBSYW5nZU5vdFNhdGlzZmlhYmxlOiA0MTYsXG4gIEV4cGVjdGF0aW9uRmFpbGVkOiA0MTcsXG4gIEltQVRlYXBvdDogNDE4LFxuICBNaXNkaXJlY3RlZFJlcXVlc3Q6IDQyMSxcbiAgVW5wcm9jZXNzYWJsZUVudGl0eTogNDIyLFxuICBMb2NrZWQ6IDQyMyxcbiAgRmFpbGVkRGVwZW5kZW5jeTogNDI0LFxuICBUb29FYXJseTogNDI1LFxuICBVcGdyYWRlUmVxdWlyZWQ6IDQyNixcbiAgUHJlY29uZGl0aW9uUmVxdWlyZWQ6IDQyOCxcbiAgVG9vTWFueVJlcXVlc3RzOiA0MjksXG4gIFJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZTogNDMxLFxuICBVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29uczogNDUxLFxuICBJbnRlcm5hbFNlcnZlckVycm9yOiA1MDAsXG4gIE5vdEltcGxlbWVudGVkOiA1MDEsXG4gIEJhZEdhdGV3YXk6IDUwMixcbiAgU2VydmljZVVuYXZhaWxhYmxlOiA1MDMsXG4gIEdhdGV3YXlUaW1lb3V0OiA1MDQsXG4gIEh0dHBWZXJzaW9uTm90U3VwcG9ydGVkOiA1MDUsXG4gIFZhcmlhbnRBbHNvTmVnb3RpYXRlczogNTA2LFxuICBJbnN1ZmZpY2llbnRTdG9yYWdlOiA1MDcsXG4gIExvb3BEZXRlY3RlZDogNTA4LFxuICBOb3RFeHRlbmRlZDogNTEwLFxuICBOZXR3b3JrQXV0aGVudGljYXRpb25SZXF1aXJlZDogNTExLFxufTtcblxuT2JqZWN0LmVudHJpZXMoSHR0cFN0YXR1c0NvZGUpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICBIdHRwU3RhdHVzQ29kZVt2YWx1ZV0gPSBrZXk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgSHR0cFN0YXR1c0NvZGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcbmltcG9ydCBBeGlvcyBmcm9tICcuL2NvcmUvQXhpb3MuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vY29yZS9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbFRva2VuIGZyb20gJy4vY2FuY2VsL0NhbmNlbFRva2VuLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4vZW52L2RhdGEuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHNwcmVhZCBmcm9tICcuL2hlbHBlcnMvc3ByZWFkLmpzJztcbmltcG9ydCBpc0F4aW9zRXJyb3IgZnJvbSAnLi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSAnLi9hZGFwdGVycy9hZGFwdGVycy5qcyc7XG5pbXBvcnQgSHR0cFN0YXR1c0NvZGUgZnJvbSAnLi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm5zIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICBjb25zdCBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICBjb25zdCBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0LCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQsIG51bGwsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxuY29uc3QgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gQ2FuY2VsZWRFcnJvcjtcbmF4aW9zLkNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW47XG5heGlvcy5pc0NhbmNlbCA9IGlzQ2FuY2VsO1xuYXhpb3MuVkVSU0lPTiA9IFZFUlNJT047XG5heGlvcy50b0Zvcm1EYXRhID0gdG9Gb3JtRGF0YTtcblxuLy8gRXhwb3NlIEF4aW9zRXJyb3IgY2xhc3NcbmF4aW9zLkF4aW9zRXJyb3IgPSBBeGlvc0Vycm9yO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcblxuYXhpb3Muc3ByZWFkID0gc3ByZWFkO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSBpc0F4aW9zRXJyb3I7XG5cbi8vIEV4cG9zZSBtZXJnZUNvbmZpZ1xuYXhpb3MubWVyZ2VDb25maWcgPSBtZXJnZUNvbmZpZztcblxuYXhpb3MuQXhpb3NIZWFkZXJzID0gQXhpb3NIZWFkZXJzO1xuXG5heGlvcy5mb3JtVG9KU09OID0gdGhpbmcgPT4gZm9ybURhdGFUb0pTT04odXRpbHMuaXNIVE1MRm9ybSh0aGluZykgPyBuZXcgRm9ybURhdGEodGhpbmcpIDogdGhpbmcpO1xuXG5heGlvcy5nZXRBZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcjtcblxuYXhpb3MuSHR0cFN0YXR1c0NvZGUgPSBIdHRwU3RhdHVzQ29kZTtcblxuYXhpb3MuZGVmYXVsdCA9IGF4aW9zO1xuXG4vLyB0aGlzIG1vZHVsZSBzaG91bGQgb25seSBoYXZlIGEgZGVmYXVsdCBleHBvcnRcbmV4cG9ydCBkZWZhdWx0IGF4aW9zXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgVGhlbWVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUaGVtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnVGhlbWVDb250ZXh0Jztcbn1cbmV4cG9ydCBkZWZhdWx0IFRoZW1lQ29udGV4dDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVGhlbWVDb250ZXh0IGZyb20gJy4vVGhlbWVDb250ZXh0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICBjb25zdCB0aGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHRoZW1lKTtcbiAgfVxuICByZXR1cm4gdGhlbWU7XG59IiwiY29uc3QgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xuZXhwb3J0IGRlZmF1bHQgaGFzU3ltYm9sID8gU3ltYm9sLmZvcignbXVpLm5lc3RlZCcpIDogJ19fVEhFTUVfTkVTVEVEX18nOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuLi91c2VUaGVtZS9UaGVtZUNvbnRleHQnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCBuZXN0ZWQgZnJvbSAnLi9uZXN0ZWQnO1xuXG4vLyBUbyBzdXBwb3J0IGNvbXBvc2l0aW9uIG9mIHRoZW1lLlxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIG1lcmdlT3V0ZXJMb2NhbFRoZW1lKG91dGVyVGhlbWUsIGxvY2FsVGhlbWUpIHtcbiAgaWYgKHR5cGVvZiBsb2NhbFRoZW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgbWVyZ2VkVGhlbWUgPSBsb2NhbFRoZW1lKG91dGVyVGhlbWUpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIW1lcmdlZFRoZW1lKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBzaG91bGQgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHlvdXIgdGhlbWUgZnVuY3Rpb24sIGkuZS4nLCAnPFRoZW1lUHJvdmlkZXIgdGhlbWU9eygpID0+ICh7fSl9IC8+J10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkVGhlbWU7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcbn1cblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCB0YWtlcyBhIGB0aGVtZWAgcHJvcC5cbiAqIEl0IG1ha2VzIHRoZSBgdGhlbWVgIGF2YWlsYWJsZSBkb3duIHRoZSBSZWFjdCB0cmVlIHRoYW5rcyB0byBSZWFjdCBjb250ZXh0LlxuICogVGhpcyBjb21wb25lbnQgc2hvdWxkIHByZWZlcmFibHkgYmUgdXNlZCBhdCAqKnRoZSByb290IG9mIHlvdXIgY29tcG9uZW50IHRyZWUqKi5cbiAqL1xuZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgdGhlbWU6IGxvY2FsVGhlbWVcbiAgfSA9IHByb3BzO1xuICBjb25zdCBvdXRlclRoZW1lID0gdXNlVGhlbWUoKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAob3V0ZXJUaGVtZSA9PT0gbnVsbCAmJiB0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogWW91IGFyZSBwcm92aWRpbmcgYSB0aGVtZSBmdW5jdGlvbiBwcm9wIHRvIHRoZSBUaGVtZVByb3ZpZGVyIGNvbXBvbmVudDonLCAnPFRoZW1lUHJvdmlkZXIgdGhlbWU9e291dGVyVGhlbWUgPT4gb3V0ZXJUaGVtZX0gLz4nLCAnJywgJ0hvd2V2ZXIsIG5vIG91dGVyIHRoZW1lIGlzIHByZXNlbnQuJywgJ01ha2Ugc3VyZSBhIHRoZW1lIGlzIGFscmVhZHkgaW5qZWN0ZWQgaGlnaGVyIGluIHRoZSBSZWFjdCB0cmVlICcgKyAnb3IgcHJvdmlkZSBhIHRoZW1lIG9iamVjdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHRoZW1lID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qgb3V0cHV0ID0gb3V0ZXJUaGVtZSA9PT0gbnVsbCA/IGxvY2FsVGhlbWUgOiBtZXJnZU91dGVyTG9jYWxUaGVtZShvdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcbiAgICBpZiAob3V0cHV0ICE9IG51bGwpIHtcbiAgICAgIG91dHB1dFtuZXN0ZWRdID0gb3V0ZXJUaGVtZSAhPT0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSwgW2xvY2FsVGhlbWUsIG91dGVyVGhlbWVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRoZW1lQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0aGVtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBBIHRoZW1lIG9iamVjdC4gWW91IGNhbiBwcm92aWRlIGEgZnVuY3Rpb24gdG8gZXh0ZW5kIHRoZSBvdXRlciB0aGVtZS5cbiAgICovXG4gIHRoZW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IGV4YWN0UHJvcChUaGVtZVByb3ZpZGVyLnByb3BUeXBlcykgOiB2b2lkIDA7XG59XG5leHBvcnQgZGVmYXVsdCBUaGVtZVByb3ZpZGVyOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVGhlbWVQcm92aWRlciBhcyBNdWlUaGVtZVByb3ZpZGVyLCB1c2VUaGVtZSBhcyB1c2VQcml2YXRlVGhlbWUgfSBmcm9tICdAbXVpL3ByaXZhdGUtdGhlbWluZyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IFRoZW1lQ29udGV4dCBhcyBTdHlsZWRFbmdpbmVUaGVtZUNvbnRleHQgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHVzZVRoZW1lV2l0aG91dERlZmF1bHQgZnJvbSAnLi4vdXNlVGhlbWVXaXRob3V0RGVmYXVsdCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgRU1QVFlfVEhFTUUgPSB7fTtcbmZ1bmN0aW9uIHVzZVRoZW1lU2NvcGluZyh0aGVtZUlkLCB1cHBlclRoZW1lLCBsb2NhbFRoZW1lLCBpc1ByaXZhdGUgPSBmYWxzZSkge1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgcmVzb2x2ZWRUaGVtZSA9IHRoZW1lSWQgPyB1cHBlclRoZW1lW3RoZW1lSWRdIHx8IHVwcGVyVGhlbWUgOiB1cHBlclRoZW1lO1xuICAgIGlmICh0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc3QgbWVyZ2VkVGhlbWUgPSBsb2NhbFRoZW1lKHJlc29sdmVkVGhlbWUpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdGhlbWVJZCA/IF9leHRlbmRzKHt9LCB1cHBlclRoZW1lLCB7XG4gICAgICAgIFt0aGVtZUlkXTogbWVyZ2VkVGhlbWVcbiAgICAgIH0pIDogbWVyZ2VkVGhlbWU7XG4gICAgICAvLyBtdXN0IHJldHVybiBhIGZ1bmN0aW9uIGZvciB0aGUgcHJpdmF0ZSB0aGVtZSB0byBOT1QgbWVyZ2Ugd2l0aCB0aGUgdXBwZXIgdGhlbWUuXG4gICAgICAvLyBzZWUgdGhlIHRlc3QgY2FzZSBcInVzZSBwcm92aWRlZCB0aGVtZSBmcm9tIGEgY2FsbGJhY2tcIiBpbiBUaGVtZVByb3ZpZGVyLnRlc3QuanNcbiAgICAgIGlmIChpc1ByaXZhdGUpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiB0aGVtZUlkID8gX2V4dGVuZHMoe30sIHVwcGVyVGhlbWUsIHtcbiAgICAgIFt0aGVtZUlkXTogbG9jYWxUaGVtZVxuICAgIH0pIDogX2V4dGVuZHMoe30sIHVwcGVyVGhlbWUsIGxvY2FsVGhlbWUpO1xuICB9LCBbdGhlbWVJZCwgdXBwZXJUaGVtZSwgbG9jYWxUaGVtZSwgaXNQcml2YXRlXSk7XG59XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgbWFrZXMgdGhlIGB0aGVtZWAgYXZhaWxhYmxlIGRvd24gdGhlIFJlYWN0IHRyZWUuXG4gKiBJdCBzaG91bGQgcHJlZmVyYWJseSBiZSB1c2VkIGF0ICoqdGhlIHJvb3Qgb2YgeW91ciBjb21wb25lbnQgdHJlZSoqLlxuICpcbiAqIDxUaGVtZVByb3ZpZGVyIHRoZW1lPXt0aGVtZX0+IC8vIGV4aXN0aW5nIHVzZSBjYXNlXG4gKiA8VGhlbWVQcm92aWRlciB0aGVtZT17eyBpZDogdGhlbWUgfX0+IC8vIHRoZW1lIHNjb3BpbmdcbiAqL1xuZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgdGhlbWU6IGxvY2FsVGhlbWUsXG4gICAgdGhlbWVJZFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHVwcGVyVGhlbWUgPSB1c2VUaGVtZVdpdGhvdXREZWZhdWx0KEVNUFRZX1RIRU1FKTtcbiAgY29uc3QgdXBwZXJQcml2YXRlVGhlbWUgPSB1c2VQcml2YXRlVGhlbWUoKSB8fCBFTVBUWV9USEVNRTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodXBwZXJUaGVtZSA9PT0gbnVsbCAmJiB0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0aGVtZUlkICYmIHVwcGVyVGhlbWUgJiYgIXVwcGVyVGhlbWVbdGhlbWVJZF0gJiYgdHlwZW9mIGxvY2FsVGhlbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBhcmUgcHJvdmlkaW5nIGEgdGhlbWUgZnVuY3Rpb24gcHJvcCB0byB0aGUgVGhlbWVQcm92aWRlciBjb21wb25lbnQ6JywgJzxUaGVtZVByb3ZpZGVyIHRoZW1lPXtvdXRlclRoZW1lID0+IG91dGVyVGhlbWV9IC8+JywgJycsICdIb3dldmVyLCBubyBvdXRlciB0aGVtZSBpcyBwcmVzZW50LicsICdNYWtlIHN1cmUgYSB0aGVtZSBpcyBhbHJlYWR5IGluamVjdGVkIGhpZ2hlciBpbiB0aGUgUmVhY3QgdHJlZSAnICsgJ29yIHByb3ZpZGUgYSB0aGVtZSBvYmplY3QuJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuICBjb25zdCBlbmdpbmVUaGVtZSA9IHVzZVRoZW1lU2NvcGluZyh0aGVtZUlkLCB1cHBlclRoZW1lLCBsb2NhbFRoZW1lKTtcbiAgY29uc3QgcHJpdmF0ZVRoZW1lID0gdXNlVGhlbWVTY29waW5nKHRoZW1lSWQsIHVwcGVyUHJpdmF0ZVRoZW1lLCBsb2NhbFRoZW1lLCB0cnVlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KE11aVRoZW1lUHJvdmlkZXIsIHtcbiAgICB0aGVtZTogcHJpdmF0ZVRoZW1lLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChTdHlsZWRFbmdpbmVUaGVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBlbmdpbmVUaGVtZSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pXG4gIH0pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGhlbWVQcm92aWRlci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBZb3VyIGNvbXBvbmVudCB0cmVlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQSB0aGVtZSBvYmplY3QuIFlvdSBjYW4gcHJvdmlkZSBhIGZ1bmN0aW9uIHRvIGV4dGVuZCB0aGUgb3V0ZXIgdGhlbWUuXG4gICAqL1xuICB0aGVtZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIGRlc2lnbiBzeXN0ZW0ncyB1bmlxdWUgaWQgZm9yIGdldHRpbmcgdGhlIGNvcnJlc3BvbmRlZCB0aGVtZSB3aGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBkZXNpZ24gc3lzdGVtcy5cbiAgICovXG4gIHRoZW1lSWQ6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IGV4YWN0UHJvcChUaGVtZVByb3ZpZGVyLnByb3BUeXBlcykgOiB2b2lkIDA7XG59XG5leHBvcnQgZGVmYXVsdCBUaGVtZVByb3ZpZGVyOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInRoZW1lXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRoZW1lUHJvdmlkZXIgYXMgU3lzdGVtVGhlbWVQcm92aWRlciB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBUSEVNRV9JRCBmcm9tICcuL2lkZW50aWZpZXInO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIoX3JlZikge1xuICBsZXQge1xuICAgICAgdGhlbWU6IHRoZW1lSW5wdXRcbiAgICB9ID0gX3JlZixcbiAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHNjb3BlZFRoZW1lID0gdGhlbWVJbnB1dFtUSEVNRV9JRF07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChTeXN0ZW1UaGVtZVByb3ZpZGVyLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICB0aGVtZUlkOiBzY29wZWRUaGVtZSA/IFRIRU1FX0lEIDogdW5kZWZpbmVkLFxuICAgIHRoZW1lOiBzY29wZWRUaGVtZSB8fCB0aGVtZUlucHV0XG4gIH0pKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRoZW1lUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogWW91ciBjb21wb25lbnQgdHJlZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEEgdGhlbWUgb2JqZWN0LiBZb3UgY2FuIHByb3ZpZGUgYSBmdW5jdGlvbiB0byBleHRlbmQgdGhlIG91dGVyIHRoZW1lLlxuICAgKi9cbiAgdGhlbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSkuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBHbG9iYWxTdHlsZXMgYXMgTXVpR2xvYmFsU3R5bGVzIH0gZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gR2xvYmFsU3R5bGVzKHtcbiAgc3R5bGVzLFxuICB0aGVtZUlkLFxuICBkZWZhdWx0VGhlbWUgPSB7fVxufSkge1xuICBjb25zdCB1cHBlclRoZW1lID0gdXNlVGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgY29uc3QgZ2xvYmFsU3R5bGVzID0gdHlwZW9mIHN0eWxlcyA9PT0gJ2Z1bmN0aW9uJyA/IHN0eWxlcyh0aGVtZUlkID8gdXBwZXJUaGVtZVt0aGVtZUlkXSB8fCB1cHBlclRoZW1lIDogdXBwZXJUaGVtZSkgOiBzdHlsZXM7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChNdWlHbG9iYWxTdHlsZXMsIHtcbiAgICBzdHlsZXM6IGdsb2JhbFN0eWxlc1xuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdsb2JhbFN0eWxlcy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBkZWZhdWx0VGhlbWU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZXM6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5LCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmJvb2xdKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRoZW1lSWQ6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBHbG9iYWxTdHlsZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBHbG9iYWxTdHlsZXMgYXMgU3lzdGVtR2xvYmFsU3R5bGVzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuLi9zdHlsZXMvZGVmYXVsdFRoZW1lJztcbmltcG9ydCBUSEVNRV9JRCBmcm9tICcuLi9zdHlsZXMvaWRlbnRpZmllcic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gR2xvYmFsU3R5bGVzKHByb3BzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChTeXN0ZW1HbG9iYWxTdHlsZXMsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lLFxuICAgIHRoZW1lSWQ6IFRIRU1FX0lEXG4gIH0pKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdsb2JhbFN0eWxlcy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgc3R5bGVzIHlvdSB3YW50IHRvIGFwcGx5IGdsb2JhbGx5LlxuICAgKi9cbiAgc3R5bGVzOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ib29sXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBHbG9iYWxTdHlsZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgR2xvYmFsU3R5bGVzIGZyb20gJy4uL0dsb2JhbFN0eWxlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGNvbnN0IGh0bWwgPSAodGhlbWUsIGVuYWJsZUNvbG9yU2NoZW1lKSA9PiBfZXh0ZW5kcyh7XG4gIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gIC8vIEFudGlhbGlhc2luZy5cbiAgTW96T3N4Rm9udFNtb290aGluZzogJ2dyYXlzY2FsZScsXG4gIC8vIEFudGlhbGlhc2luZy5cbiAgLy8gQ2hhbmdlIGZyb20gYGJveC1zaXppbmc6IGNvbnRlbnQtYm94YCBzbyB0aGF0IGB3aWR0aGBcbiAgLy8gaXMgbm90IGFmZmVjdGVkIGJ5IGBwYWRkaW5nYCBvciBgYm9yZGVyYC5cbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIC8vIEZpeCBmb250IHJlc2l6ZSBwcm9ibGVtIGluIGlPU1xuICBXZWJraXRUZXh0U2l6ZUFkanVzdDogJzEwMCUnXG59LCBlbmFibGVDb2xvclNjaGVtZSAmJiAhdGhlbWUudmFycyAmJiB7XG4gIGNvbG9yU2NoZW1lOiB0aGVtZS5wYWxldHRlLm1vZGVcbn0pO1xuZXhwb3J0IGNvbnN0IGJvZHkgPSB0aGVtZSA9PiBfZXh0ZW5kcyh7XG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnlcbn0sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsIHtcbiAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQsXG4gICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgLy8gU2F2ZSBwcmludGVyIGluay5cbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmNvbW1vbi53aGl0ZVxuICB9XG59KTtcbmV4cG9ydCBjb25zdCBzdHlsZXMgPSAodGhlbWUsIGVuYWJsZUNvbG9yU2NoZW1lID0gZmFsc2UpID0+IHtcbiAgdmFyIF90aGVtZSRjb21wb25lbnRzO1xuICBjb25zdCBjb2xvclNjaGVtZVN0eWxlcyA9IHt9O1xuICBpZiAoZW5hYmxlQ29sb3JTY2hlbWUgJiYgdGhlbWUuY29sb3JTY2hlbWVzKSB7XG4gICAgT2JqZWN0LmVudHJpZXModGhlbWUuY29sb3JTY2hlbWVzKS5mb3JFYWNoKChba2V5LCBzY2hlbWVdKSA9PiB7XG4gICAgICB2YXIgX3NjaGVtZSRwYWxldHRlO1xuICAgICAgY29sb3JTY2hlbWVTdHlsZXNbdGhlbWUuZ2V0Q29sb3JTY2hlbWVTZWxlY3RvcihrZXkpLnJlcGxhY2UoL1xccyomLywgJycpXSA9IHtcbiAgICAgICAgY29sb3JTY2hlbWU6IChfc2NoZW1lJHBhbGV0dGUgPSBzY2hlbWUucGFsZXR0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9zY2hlbWUkcGFsZXR0ZS5tb2RlXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIGxldCBkZWZhdWx0U3R5bGVzID0gX2V4dGVuZHMoe1xuICAgIGh0bWw6IGh0bWwodGhlbWUsIGVuYWJsZUNvbG9yU2NoZW1lKSxcbiAgICAnKiwgKjo6YmVmb3JlLCAqOjphZnRlcic6IHtcbiAgICAgIGJveFNpemluZzogJ2luaGVyaXQnXG4gICAgfSxcbiAgICAnc3Ryb25nLCBiJzoge1xuICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0Qm9sZFxuICAgIH0sXG4gICAgYm9keTogX2V4dGVuZHMoe1xuICAgICAgbWFyZ2luOiAwXG4gICAgfSwgYm9keSh0aGVtZSksIHtcbiAgICAgIC8vIEFkZCBzdXBwb3J0IGZvciBkb2N1bWVudC5ib2R5LnJlcXVlc3RGdWxsU2NyZWVuKCkuXG4gICAgICAvLyBPdGhlciBlbGVtZW50cywgaWYgYmFja2dyb3VuZCB0cmFuc3BhcmVudCwgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAgICAnJjo6YmFja2Ryb3AnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0XG4gICAgICB9XG4gICAgfSlcbiAgfSwgY29sb3JTY2hlbWVTdHlsZXMpO1xuICBjb25zdCB0aGVtZU92ZXJyaWRlcyA9IChfdGhlbWUkY29tcG9uZW50cyA9IHRoZW1lLmNvbXBvbmVudHMpID09IG51bGwgfHwgKF90aGVtZSRjb21wb25lbnRzID0gX3RoZW1lJGNvbXBvbmVudHMuTXVpQ3NzQmFzZWxpbmUpID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkY29tcG9uZW50cy5zdHlsZU92ZXJyaWRlcztcbiAgaWYgKHRoZW1lT3ZlcnJpZGVzKSB7XG4gICAgZGVmYXVsdFN0eWxlcyA9IFtkZWZhdWx0U3R5bGVzLCB0aGVtZU92ZXJyaWRlc107XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRTdHlsZXM7XG59O1xuXG4vKipcbiAqIEtpY2tzdGFydCBhbiBlbGVnYW50LCBjb25zaXN0ZW50LCBhbmQgc2ltcGxlIGJhc2VsaW5lIHRvIGJ1aWxkIHVwb24uXG4gKi9cbmZ1bmN0aW9uIENzc0Jhc2VsaW5lKGluUHJvcHMpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ3NzQmFzZWxpbmUnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgZW5hYmxlQ29sb3JTY2hlbWUgPSBmYWxzZVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KEdsb2JhbFN0eWxlcywge1xuICAgICAgc3R5bGVzOiB0aGVtZSA9PiBzdHlsZXModGhlbWUsIGVuYWJsZUNvbG9yU2NoZW1lKVxuICAgIH0pLCBjaGlsZHJlbl1cbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDc3NCYXNlbGluZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBZb3UgY2FuIHdyYXAgYSBub2RlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogRW5hYmxlIGBjb2xvci1zY2hlbWVgIENTUyBwcm9wZXJ0eSB0byB1c2UgYHRoZW1lLnBhbGV0dGUubW9kZWAuXG4gICAqIEZvciBtb3JlIGRldGFpbHMsIGNoZWNrIG91dCBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY29sb3Itc2NoZW1lXG4gICAqIEZvciBicm93c2VyIHN1cHBvcnQsIGNoZWNrIG91dCBodHRwczovL2Nhbml1c2UuY29tLz9zZWFyY2g9Y29sb3Itc2NoZW1lXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBlbmFibGVDb2xvclNjaGVtZTogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDc3NCYXNlbGluZTsiLCIvKipcbiAqIERldGVybWluZXMgaWYgYSBnaXZlbiBlbGVtZW50IGlzIGEgRE9NIGVsZW1lbnQgbmFtZSAoaS5lLiBub3QgYSBSZWFjdCBjb21wb25lbnQpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNIb3N0Q29tcG9uZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJztcbn0iLCIvKipcbiAqIEV4dHJhY3RzIGV2ZW50IGhhbmRsZXJzIGZyb20gYSBnaXZlbiBvYmplY3QuXG4gKiBBIHByb3AgaXMgY29uc2lkZXJlZCBhbiBldmVudCBoYW5kbGVyIGlmIGl0IGlzIGEgZnVuY3Rpb24gYW5kIGl0cyBuYW1lIHN0YXJ0cyB3aXRoIGBvbmAuXG4gKlxuICogQHBhcmFtIG9iamVjdCBBbiBvYmplY3QgdG8gZXh0cmFjdCBldmVudCBoYW5kbGVycyBmcm9tLlxuICogQHBhcmFtIGV4Y2x1ZGVLZXlzIEFuIGFycmF5IG9mIGtleXMgdG8gZXhjbHVkZSBmcm9tIHRoZSByZXR1cm5lZCBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0RXZlbnRIYW5kbGVycyhvYmplY3QsIGV4Y2x1ZGVLZXlzID0gW10pIHtcbiAgaWYgKG9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZpbHRlcihwcm9wID0+IHByb3AubWF0Y2goL15vbltBLVpdLykgJiYgdHlwZW9mIG9iamVjdFtwcm9wXSA9PT0gJ2Z1bmN0aW9uJyAmJiAhZXhjbHVkZUtleXMuaW5jbHVkZXMocHJvcCkpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgcmVzdWx0W3Byb3BdID0gb2JqZWN0W3Byb3BdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCIvKipcbiAqIFJlbW92ZXMgZXZlbnQgaGFuZGxlcnMgZnJvbSB0aGUgZ2l2ZW4gb2JqZWN0LlxuICogQSBmaWVsZCBpcyBjb25zaWRlcmVkIGFuIGV2ZW50IGhhbmRsZXIgaWYgaXQgaXMgYSBmdW5jdGlvbiB3aXRoIGEgbmFtZSBiZWdpbm5pbmcgd2l0aCBgb25gLlxuICpcbiAqIEBwYXJhbSBvYmplY3QgT2JqZWN0IHRvIHJlbW92ZSBldmVudCBoYW5kbGVycyBmcm9tLlxuICogQHJldHVybnMgT2JqZWN0IHdpdGggZXZlbnQgaGFuZGxlcnMgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9taXRFdmVudEhhbmRsZXJzKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIE9iamVjdC5rZXlzKG9iamVjdCkuZmlsdGVyKHByb3AgPT4gIShwcm9wLm1hdGNoKC9eb25bQS1aXS8pICYmIHR5cGVvZiBvYmplY3RbcHJvcF0gPT09ICdmdW5jdGlvbicpKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIHJlc3VsdFtwcm9wXSA9IG9iamVjdFtwcm9wXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZWxlbWVudFR5cGVcIiwgXCJleHRlcm5hbFNsb3RQcm9wc1wiLCBcIm93bmVyU3RhdGVcIiwgXCJza2lwUmVzb2x2aW5nU2xvdFByb3BzXCJdO1xuaW1wb3J0IHsgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBhcHBlbmRPd25lclN0YXRlIH0gZnJvbSAnLi9hcHBlbmRPd25lclN0YXRlJztcbmltcG9ydCB7IG1lcmdlU2xvdFByb3BzIH0gZnJvbSAnLi9tZXJnZVNsb3RQcm9wcyc7XG5pbXBvcnQgeyByZXNvbHZlQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuL3Jlc29sdmVDb21wb25lbnRQcm9wcyc7XG4vKipcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKiBCdWlsZHMgdGhlIHByb3BzIHRvIGJlIHBhc3NlZCBpbnRvIHRoZSBzbG90IG9mIGFuIHVuc3R5bGVkIGNvbXBvbmVudC5cbiAqIEl0IG1lcmdlcyB0aGUgaW50ZXJuYWwgcHJvcHMgb2YgdGhlIGNvbXBvbmVudCB3aXRoIHRoZSBvbmVzIHN1cHBsaWVkIGJ5IHRoZSB1c2VyLCBhbGxvd2luZyB0byBjdXN0b21pemUgdGhlIGJlaGF2aW9yLlxuICogSWYgdGhlIHNsb3QgY29tcG9uZW50IGlzIG5vdCBhIGhvc3QgY29tcG9uZW50LCBpdCBhbHNvIG1lcmdlcyBpbiB0aGUgYG93bmVyU3RhdGVgLlxuICpcbiAqIEBwYXJhbSBwYXJhbWV0ZXJzLmdldFNsb3RQcm9wcyAtIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBwcm9wcyB0byBiZSBwYXNzZWQgdG8gdGhlIHNsb3QgY29tcG9uZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU2xvdFByb3BzKHBhcmFtZXRlcnMpIHtcbiAgdmFyIF9wYXJhbWV0ZXJzJGFkZGl0aW9uYTtcbiAgY29uc3Qge1xuICAgICAgZWxlbWVudFR5cGUsXG4gICAgICBleHRlcm5hbFNsb3RQcm9wcyxcbiAgICAgIG93bmVyU3RhdGUsXG4gICAgICBza2lwUmVzb2x2aW5nU2xvdFByb3BzID0gZmFsc2VcbiAgICB9ID0gcGFyYW1ldGVycyxcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocGFyYW1ldGVycywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgcmVzb2x2ZWRDb21wb25lbnRzUHJvcHMgPSBza2lwUmVzb2x2aW5nU2xvdFByb3BzID8ge30gOiByZXNvbHZlQ29tcG9uZW50UHJvcHMoZXh0ZXJuYWxTbG90UHJvcHMsIG93bmVyU3RhdGUpO1xuICBjb25zdCB7XG4gICAgcHJvcHM6IG1lcmdlZFByb3BzLFxuICAgIGludGVybmFsUmVmXG4gIH0gPSBtZXJnZVNsb3RQcm9wcyhfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGV4dGVybmFsU2xvdFByb3BzOiByZXNvbHZlZENvbXBvbmVudHNQcm9wc1xuICB9KSk7XG4gIGNvbnN0IHJlZiA9IHVzZUZvcmtSZWYoaW50ZXJuYWxSZWYsIHJlc29sdmVkQ29tcG9uZW50c1Byb3BzID09IG51bGwgPyB2b2lkIDAgOiByZXNvbHZlZENvbXBvbmVudHNQcm9wcy5yZWYsIChfcGFyYW1ldGVycyRhZGRpdGlvbmEgPSBwYXJhbWV0ZXJzLmFkZGl0aW9uYWxQcm9wcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJhbWV0ZXJzJGFkZGl0aW9uYS5yZWYpO1xuICBjb25zdCBwcm9wcyA9IGFwcGVuZE93bmVyU3RhdGUoZWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCBtZXJnZWRQcm9wcywge1xuICAgIHJlZlxuICB9KSwgb3duZXJTdGF0ZSk7XG4gIHJldHVybiBwcm9wcztcbn0iLCIvKipcbiAqIElmIGBjb21wb25lbnRQcm9wc2AgaXMgYSBmdW5jdGlvbiwgY2FsbHMgaXQgd2l0aCB0aGUgcHJvdmlkZWQgYG93bmVyU3RhdGVgLlxuICogT3RoZXJ3aXNlLCBqdXN0IHJldHVybnMgYGNvbXBvbmVudFByb3BzYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVDb21wb25lbnRQcm9wcyhjb21wb25lbnRQcm9wcywgb3duZXJTdGF0ZSwgc2xvdFN0YXRlKSB7XG4gIGlmICh0eXBlb2YgY29tcG9uZW50UHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY29tcG9uZW50UHJvcHMob3duZXJTdGF0ZSwgc2xvdFN0YXRlKTtcbiAgfVxuICByZXR1cm4gY29tcG9uZW50UHJvcHM7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGV4dHJhY3RFdmVudEhhbmRsZXJzIH0gZnJvbSAnLi9leHRyYWN0RXZlbnRIYW5kbGVycyc7XG5pbXBvcnQgeyBvbWl0RXZlbnRIYW5kbGVycyB9IGZyb20gJy4vb21pdEV2ZW50SGFuZGxlcnMnO1xuLyoqXG4gKiBNZXJnZXMgdGhlIHNsb3QgY29tcG9uZW50IGludGVybmFsIHByb3BzICh1c3VhbGx5IGNvbWluZyBmcm9tIGEgaG9vaylcbiAqIHdpdGggdGhlIGV4dGVybmFsbHkgcHJvdmlkZWQgb25lcy5cbiAqXG4gKiBUaGUgbWVyZ2Ugb3JkZXIgaXMgKHRoZSBsYXR0ZXIgb3ZlcnJpZGVzIHRoZSBmb3JtZXIpOlxuICogMS4gVGhlIGludGVybmFsIHByb3BzIChzcGVjaWZpZWQgYXMgYSBnZXR0ZXIgZnVuY3Rpb24gdG8gd29yayB3aXRoIGdldCpQcm9wcyBob29rIHJlc3VsdClcbiAqIDIuIEFkZGl0aW9uYWwgcHJvcHMgKHNwZWNpZmllZCBpbnRlcm5hbGx5IG9uIGEgQmFzZSBVSSBjb21wb25lbnQpXG4gKiAzLiBFeHRlcm5hbCBwcm9wcyBzcGVjaWZpZWQgb24gdGhlIG93bmVyIGNvbXBvbmVudC4gVGhlc2Ugc2hvdWxkIG9ubHkgYmUgdXNlZCBvbiBhIHJvb3Qgc2xvdC5cbiAqIDQuIEV4dGVybmFsIHByb3BzIHNwZWNpZmllZCBpbiB0aGUgYHNsb3RQcm9wcy4qYCBwcm9wLlxuICogNS4gVGhlIGBjbGFzc05hbWVgIHByb3AgLSBjb21iaW5lZCBmcm9tIGFsbCB0aGUgYWJvdmUuXG4gKiBAcGFyYW0gcGFyYW1ldGVyc1xuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlU2xvdFByb3BzKHBhcmFtZXRlcnMpIHtcbiAgY29uc3Qge1xuICAgIGdldFNsb3RQcm9wcyxcbiAgICBhZGRpdGlvbmFsUHJvcHMsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHMsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyxcbiAgICBjbGFzc05hbWVcbiAgfSA9IHBhcmFtZXRlcnM7XG4gIGlmICghZ2V0U2xvdFByb3BzKSB7XG4gICAgLy8gVGhlIHNpbXBsZXIgY2FzZSAtIGdldFNsb3RQcm9wcyBpcyBub3QgZGVmaW5lZCwgc28gbm8gaW50ZXJuYWwgZXZlbnQgaGFuZGxlcnMgYXJlIGRlZmluZWQsXG4gICAgLy8gc28gd2UgY2FuIHNpbXBseSBtZXJnZSBhbGwgdGhlIHByb3BzIHdpdGhvdXQgaGF2aW5nIHRvIHdvcnJ5IGFib3V0IGV4dHJhY3RpbmcgZXZlbnQgaGFuZGxlcnMuXG4gICAgY29uc3Qgam9pbmVkQ2xhc3NlcyA9IGNsc3goYWRkaXRpb25hbFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBhZGRpdGlvbmFsUHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUsIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsRm9yd2FyZGVkUHJvcHMuY2xhc3NOYW1lLCBleHRlcm5hbFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxTbG90UHJvcHMuY2xhc3NOYW1lKTtcbiAgICBjb25zdCBtZXJnZWRTdHlsZSA9IF9leHRlbmRzKHt9LCBhZGRpdGlvbmFsUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxQcm9wcy5zdHlsZSwgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcy5zdHlsZSwgZXh0ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsU2xvdFByb3BzLnN0eWxlKTtcbiAgICBjb25zdCBwcm9wcyA9IF9leHRlbmRzKHt9LCBhZGRpdGlvbmFsUHJvcHMsIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMsIGV4dGVybmFsU2xvdFByb3BzKTtcbiAgICBpZiAoam9pbmVkQ2xhc3Nlcy5sZW5ndGggPiAwKSB7XG4gICAgICBwcm9wcy5jbGFzc05hbWUgPSBqb2luZWRDbGFzc2VzO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LmtleXMobWVyZ2VkU3R5bGUpLmxlbmd0aCA+IDApIHtcbiAgICAgIHByb3BzLnN0eWxlID0gbWVyZ2VkU3R5bGU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwcm9wcyxcbiAgICAgIGludGVybmFsUmVmOiB1bmRlZmluZWRcbiAgICB9O1xuICB9XG5cbiAgLy8gSW4gdGhpcyBjYXNlLCBnZXRTbG90UHJvcHMgaXMgcmVzcG9uc2libGUgZm9yIGNhbGxpbmcgdGhlIGV4dGVybmFsIGV2ZW50IGhhbmRsZXJzLlxuICAvLyBXZSBkb24ndCBuZWVkIHRvIGluY2x1ZGUgdGhlbSBpbiB0aGUgbWVyZ2VkIHByb3BzIGJlY2F1c2Ugb2YgdGhpcy5cblxuICBjb25zdCBldmVudEhhbmRsZXJzID0gZXh0cmFjdEV2ZW50SGFuZGxlcnMoX2V4dGVuZHMoe30sIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMsIGV4dGVybmFsU2xvdFByb3BzKSk7XG4gIGNvbnN0IGNvbXBvbmVudHNQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzID0gb21pdEV2ZW50SGFuZGxlcnMoZXh0ZXJuYWxTbG90UHJvcHMpO1xuICBjb25zdCBvdGhlclByb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMgPSBvbWl0RXZlbnRIYW5kbGVycyhleHRlcm5hbEZvcndhcmRlZFByb3BzKTtcbiAgY29uc3QgaW50ZXJuYWxTbG90UHJvcHMgPSBnZXRTbG90UHJvcHMoZXZlbnRIYW5kbGVycyk7XG5cbiAgLy8gVGhlIG9yZGVyIG9mIGNsYXNzZXMgaXMgaW1wb3J0YW50IGhlcmUuXG4gIC8vIEVtb3Rpb24gKHRoYXQgd2UgdXNlIGluIGxpYnJhcmllcyBjb25zdW1pbmcgQmFzZSBVSSkgZGVwZW5kcyBvbiB0aGlzIG9yZGVyXG4gIC8vIHRvIHByb3Blcmx5IG92ZXJyaWRlIHN0eWxlLiBJdCByZXF1aXJlcyB0aGUgbW9zdCBpbXBvcnRhbnQgY2xhc3NlcyB0byBiZSBsYXN0XG4gIC8vIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzMzMjA1KSBmb3IgdGhlIHJlbGF0ZWQgZGlzY3Vzc2lvbi5cbiAgY29uc3Qgam9pbmVkQ2xhc3NlcyA9IGNsc3goaW50ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGludGVybmFsU2xvdFByb3BzLmNsYXNzTmFtZSwgYWRkaXRpb25hbFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBhZGRpdGlvbmFsUHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUsIGV4dGVybmFsRm9yd2FyZGVkUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsRm9yd2FyZGVkUHJvcHMuY2xhc3NOYW1lLCBleHRlcm5hbFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxTbG90UHJvcHMuY2xhc3NOYW1lKTtcbiAgY29uc3QgbWVyZ2VkU3R5bGUgPSBfZXh0ZW5kcyh7fSwgaW50ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGludGVybmFsU2xvdFByb3BzLnN0eWxlLCBhZGRpdGlvbmFsUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxQcm9wcy5zdHlsZSwgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcy5zdHlsZSwgZXh0ZXJuYWxTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsU2xvdFByb3BzLnN0eWxlKTtcbiAgY29uc3QgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgaW50ZXJuYWxTbG90UHJvcHMsIGFkZGl0aW9uYWxQcm9wcywgb3RoZXJQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzLCBjb21wb25lbnRzUHJvcHNXaXRob3V0RXZlbnRIYW5kbGVycyk7XG4gIGlmIChqb2luZWRDbGFzc2VzLmxlbmd0aCA+IDApIHtcbiAgICBwcm9wcy5jbGFzc05hbWUgPSBqb2luZWRDbGFzc2VzO1xuICB9XG4gIGlmIChPYmplY3Qua2V5cyhtZXJnZWRTdHlsZSkubGVuZ3RoID4gMCkge1xuICAgIHByb3BzLnN0eWxlID0gbWVyZ2VkU3R5bGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwcm9wcyxcbiAgICBpbnRlcm5hbFJlZjogaW50ZXJuYWxTbG90UHJvcHMucmVmXG4gIH07XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBpc0hvc3RDb21wb25lbnQgfSBmcm9tICcuL2lzSG9zdENvbXBvbmVudCc7XG5cbi8qKlxuICogVHlwZSBvZiB0aGUgb3duZXJTdGF0ZSBiYXNlZCBvbiB0aGUgdHlwZSBvZiBhbiBlbGVtZW50IGl0IGFwcGxpZXMgdG8uXG4gKiBUaGlzIHJlc29sdmVzIHRvIHRoZSBwcm92aWRlZCBPd25lclN0YXRlIGZvciBSZWFjdCBjb21wb25lbnRzIGFuZCBgdW5kZWZpbmVkYCBmb3IgaG9zdCBjb21wb25lbnRzLlxuICogRmFsbHMgYmFjayB0byBgT3duZXJTdGF0ZSB8IHVuZGVmaW5lZGAgd2hlbiB0aGUgZXhhY3QgdHlwZSBjYW4ndCBiZSBkZXRlcm1pbmVkIGluIGRldmVsb3BtZW50IHRpbWUuXG4gKi9cblxuLyoqXG4gKiBBcHBlbmRzIHRoZSBvd25lclN0YXRlIG9iamVjdCB0byB0aGUgcHJvcHMsIG1lcmdpbmcgd2l0aCB0aGUgZXhpc3Rpbmcgb25lIGlmIG5lY2Vzc2FyeS5cbiAqXG4gKiBAcGFyYW0gZWxlbWVudFR5cGUgVHlwZSBvZiB0aGUgZWxlbWVudCB0aGF0IG93bnMgdGhlIGBleGlzdGluZ1Byb3BzYC4gSWYgdGhlIGVsZW1lbnQgaXMgYSBET00gbm9kZSBvciB1bmRlZmluZWQsIGBvd25lclN0YXRlYCBpcyBub3QgYXBwbGllZC5cbiAqIEBwYXJhbSBvdGhlclByb3BzIFByb3BzIG9mIHRoZSBlbGVtZW50LlxuICogQHBhcmFtIG93bmVyU3RhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZE93bmVyU3RhdGUoZWxlbWVudFR5cGUsIG90aGVyUHJvcHMsIG93bmVyU3RhdGUpIHtcbiAgaWYgKGVsZW1lbnRUeXBlID09PSB1bmRlZmluZWQgfHwgaXNIb3N0Q29tcG9uZW50KGVsZW1lbnRUeXBlKSkge1xuICAgIHJldHVybiBvdGhlclByb3BzO1xuICB9XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3RoZXJQcm9wcywge1xuICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvdGhlclByb3BzLm93bmVyU3RhdGUsIG93bmVyU3RhdGUpXG4gIH0pO1xufSIsIi8vIEEgY2hhbmdlIG9mIHRoZSBicm93c2VyIHpvb20gY2hhbmdlIHRoZSBzY3JvbGxiYXIgc2l6ZS5cbi8vIENyZWRpdCBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi80ODhmZDhhZmM1MzVjYTNhNmFkNGRjNTgxZjVlODkyMTdiNmEzNmFjL2pzL3NyYy91dGlsL3Njcm9sbGJhci5qcyNMMTQtTDE4XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxiYXJTaXplKGRvYykge1xuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93L2lubmVyV2lkdGgjdXNhZ2Vfbm90ZXNcbiAgY29uc3QgZG9jdW1lbnRXaWR0aCA9IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJldHVybiBNYXRoLmFicyh3aW5kb3cuaW5uZXJXaWR0aCAtIGRvY3VtZW50V2lkdGgpO1xufSIsImltcG9ydCB7IHVuc3RhYmxlX293bmVyV2luZG93IGFzIG93bmVyV2luZG93LCB1bnN0YWJsZV9vd25lckRvY3VtZW50IGFzIG93bmVyRG9jdW1lbnQsIHVuc3RhYmxlX2dldFNjcm9sbGJhclNpemUgYXMgZ2V0U2Nyb2xsYmFyU2l6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuLy8gSXMgYSB2ZXJ0aWNhbCBzY3JvbGxiYXIgZGlzcGxheWVkP1xuZnVuY3Rpb24gaXNPdmVyZmxvd2luZyhjb250YWluZXIpIHtcbiAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChjb250YWluZXIpO1xuICBpZiAoZG9jLmJvZHkgPT09IGNvbnRhaW5lcikge1xuICAgIHJldHVybiBvd25lcldpbmRvdyhjb250YWluZXIpLmlubmVyV2lkdGggPiBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICB9XG4gIHJldHVybiBjb250YWluZXIuc2Nyb2xsSGVpZ2h0ID4gY29udGFpbmVyLmNsaWVudEhlaWdodDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhcmlhSGlkZGVuKGVsZW1lbnQsIHNob3cpIHtcbiAgaWYgKHNob3cpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICB9IGVsc2Uge1xuICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRQYWRkaW5nUmlnaHQoZWxlbWVudCkge1xuICByZXR1cm4gcGFyc2VJbnQob3duZXJXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wYWRkaW5nUmlnaHQsIDEwKSB8fCAwO1xufVxuZnVuY3Rpb24gaXNBcmlhSGlkZGVuRm9yYmlkZGVuT25FbGVtZW50KGVsZW1lbnQpIHtcbiAgLy8gVGhlIGZvcmJpZGRlbiBIVE1MIHRhZ3MgYXJlIHRoZSBvbmVzIGZyb20gQVJJQSBzcGVjaWZpY2F0aW9uIHRoYXRcbiAgLy8gY2FuIGJlIGNoaWxkcmVuIG9mIGJvZHkgYW5kIGNhbid0IGhhdmUgYXJpYS1oaWRkZW4gYXR0cmlidXRlLlxuICAvLyBjZi4gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWwtYXJpYS8jZG9jY29uZm9ybWFuY2VcbiAgY29uc3QgZm9yYmlkZGVuVGFnTmFtZXMgPSBbJ1RFTVBMQVRFJywgJ1NDUklQVCcsICdTVFlMRScsICdMSU5LJywgJ01BUCcsICdNRVRBJywgJ05PU0NSSVBUJywgJ1BJQ1RVUkUnLCAnQ09MJywgJ0NPTEdST1VQJywgJ1BBUkFNJywgJ1NMT1QnLCAnU09VUkNFJywgJ1RSQUNLJ107XG4gIGNvbnN0IGlzRm9yYmlkZGVuVGFnTmFtZSA9IGZvcmJpZGRlblRhZ05hbWVzLmluZGV4T2YoZWxlbWVudC50YWdOYW1lKSAhPT0gLTE7XG4gIGNvbnN0IGlzSW5wdXRIaWRkZW4gPSBlbGVtZW50LnRhZ05hbWUgPT09ICdJTlBVVCcgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSA9PT0gJ2hpZGRlbic7XG4gIHJldHVybiBpc0ZvcmJpZGRlblRhZ05hbWUgfHwgaXNJbnB1dEhpZGRlbjtcbn1cbmZ1bmN0aW9uIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXIsIG1vdW50RWxlbWVudCwgY3VycmVudEVsZW1lbnQsIGVsZW1lbnRzVG9FeGNsdWRlLCBzaG93KSB7XG4gIGNvbnN0IGJsYWNrbGlzdCA9IFttb3VudEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50LCAuLi5lbGVtZW50c1RvRXhjbHVkZV07XG4gIFtdLmZvckVhY2guY2FsbChjb250YWluZXIuY2hpbGRyZW4sIGVsZW1lbnQgPT4ge1xuICAgIGNvbnN0IGlzTm90RXhjbHVkZWRFbGVtZW50ID0gYmxhY2tsaXN0LmluZGV4T2YoZWxlbWVudCkgPT09IC0xO1xuICAgIGNvbnN0IGlzTm90Rm9yYmlkZGVuRWxlbWVudCA9ICFpc0FyaWFIaWRkZW5Gb3JiaWRkZW5PbkVsZW1lbnQoZWxlbWVudCk7XG4gICAgaWYgKGlzTm90RXhjbHVkZWRFbGVtZW50ICYmIGlzTm90Rm9yYmlkZGVuRWxlbWVudCkge1xuICAgICAgYXJpYUhpZGRlbihlbGVtZW50LCBzaG93KTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gZmluZEluZGV4T2YoaXRlbXMsIGNhbGxiYWNrKSB7XG4gIGxldCBpZHggPSAtMTtcbiAgaXRlbXMuc29tZSgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICBpZiAoY2FsbGJhY2soaXRlbSkpIHtcbiAgICAgIGlkeCA9IGluZGV4O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG4gIHJldHVybiBpZHg7XG59XG5mdW5jdGlvbiBoYW5kbGVDb250YWluZXIoY29udGFpbmVySW5mbywgcHJvcHMpIHtcbiAgY29uc3QgcmVzdG9yZVN0eWxlID0gW107XG4gIGNvbnN0IGNvbnRhaW5lciA9IGNvbnRhaW5lckluZm8uY29udGFpbmVyO1xuICBpZiAoIXByb3BzLmRpc2FibGVTY3JvbGxMb2NrKSB7XG4gICAgaWYgKGlzT3ZlcmZsb3dpbmcoY29udGFpbmVyKSkge1xuICAgICAgLy8gQ29tcHV0ZSB0aGUgc2l6ZSBiZWZvcmUgYXBwbHlpbmcgb3ZlcmZsb3cgaGlkZGVuIHRvIGF2b2lkIGFueSBzY3JvbGwganVtcHMuXG4gICAgICBjb25zdCBzY3JvbGxiYXJTaXplID0gZ2V0U2Nyb2xsYmFyU2l6ZShvd25lckRvY3VtZW50KGNvbnRhaW5lcikpO1xuICAgICAgcmVzdG9yZVN0eWxlLnB1c2goe1xuICAgICAgICB2YWx1ZTogY29udGFpbmVyLnN0eWxlLnBhZGRpbmdSaWdodCxcbiAgICAgICAgcHJvcGVydHk6ICdwYWRkaW5nLXJpZ2h0JyxcbiAgICAgICAgZWw6IGNvbnRhaW5lclxuICAgICAgfSk7XG4gICAgICAvLyBVc2UgY29tcHV0ZWQgc3R5bGUsIGhlcmUgdG8gZ2V0IHRoZSByZWFsIHBhZGRpbmcgdG8gYWRkIG91ciBzY3JvbGxiYXIgd2lkdGguXG4gICAgICBjb250YWluZXIuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7Z2V0UGFkZGluZ1JpZ2h0KGNvbnRhaW5lcikgKyBzY3JvbGxiYXJTaXplfXB4YDtcblxuICAgICAgLy8gLm11aS1maXhlZCBpcyBhIGdsb2JhbCBoZWxwZXIuXG4gICAgICBjb25zdCBmaXhlZEVsZW1lbnRzID0gb3duZXJEb2N1bWVudChjb250YWluZXIpLnF1ZXJ5U2VsZWN0b3JBbGwoJy5tdWktZml4ZWQnKTtcbiAgICAgIFtdLmZvckVhY2guY2FsbChmaXhlZEVsZW1lbnRzLCBlbGVtZW50ID0+IHtcbiAgICAgICAgcmVzdG9yZVN0eWxlLnB1c2goe1xuICAgICAgICAgIHZhbHVlOiBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCxcbiAgICAgICAgICBwcm9wZXJ0eTogJ3BhZGRpbmctcmlnaHQnLFxuICAgICAgICAgIGVsOiBlbGVtZW50XG4gICAgICAgIH0pO1xuICAgICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IGAke2dldFBhZGRpbmdSaWdodChlbGVtZW50KSArIHNjcm9sbGJhclNpemV9cHhgO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBzY3JvbGxDb250YWluZXI7XG4gICAgaWYgKGNvbnRhaW5lci5wYXJlbnROb2RlIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkge1xuICAgICAgc2Nyb2xsQ29udGFpbmVyID0gb3duZXJEb2N1bWVudChjb250YWluZXIpLmJvZHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFN1cHBvcnQgaHRtbCBvdmVyZmxvdy15OiBhdXRvIGZvciBzY3JvbGwgc3RhYmlsaXR5IGJldHdlZW4gcGFnZXNcbiAgICAgIC8vIGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvY3NzL2ZvcmNlLXZlcnRpY2FsLXNjcm9sbGJhci9cbiAgICAgIGNvbnN0IHBhcmVudCA9IGNvbnRhaW5lci5wYXJlbnRFbGVtZW50O1xuICAgICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coY29udGFpbmVyKTtcbiAgICAgIHNjcm9sbENvbnRhaW5lciA9IChwYXJlbnQgPT0gbnVsbCA/IHZvaWQgMCA6IHBhcmVudC5ub2RlTmFtZSkgPT09ICdIVE1MJyAmJiBjb250YWluZXJXaW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpLm92ZXJmbG93WSA9PT0gJ3Njcm9sbCcgPyBwYXJlbnQgOiBjb250YWluZXI7XG4gICAgfVxuXG4gICAgLy8gQmxvY2sgdGhlIHNjcm9sbCBldmVuIGlmIG5vIHNjcm9sbGJhciBpcyB2aXNpYmxlIHRvIGFjY291bnQgZm9yIG1vYmlsZSBrZXlib2FyZFxuICAgIC8vIHNjcmVlbnNpemUgc2hyaW5rLlxuICAgIHJlc3RvcmVTdHlsZS5wdXNoKHtcbiAgICAgIHZhbHVlOiBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3csXG4gICAgICBwcm9wZXJ0eTogJ292ZXJmbG93JyxcbiAgICAgIGVsOiBzY3JvbGxDb250YWluZXJcbiAgICB9LCB7XG4gICAgICB2YWx1ZTogc2Nyb2xsQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93WCxcbiAgICAgIHByb3BlcnR5OiAnb3ZlcmZsb3cteCcsXG4gICAgICBlbDogc2Nyb2xsQ29udGFpbmVyXG4gICAgfSwge1xuICAgICAgdmFsdWU6IHNjcm9sbENvbnRhaW5lci5zdHlsZS5vdmVyZmxvd1ksXG4gICAgICBwcm9wZXJ0eTogJ292ZXJmbG93LXknLFxuICAgICAgZWw6IHNjcm9sbENvbnRhaW5lclxuICAgIH0pO1xuICAgIHNjcm9sbENvbnRhaW5lci5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICB9XG4gIGNvbnN0IHJlc3RvcmUgPSAoKSA9PiB7XG4gICAgcmVzdG9yZVN0eWxlLmZvckVhY2goKHtcbiAgICAgIHZhbHVlLFxuICAgICAgZWwsXG4gICAgICBwcm9wZXJ0eVxuICAgIH0pID0+IHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcGVydHkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICByZXR1cm4gcmVzdG9yZTtcbn1cbmZ1bmN0aW9uIGdldEhpZGRlblNpYmxpbmdzKGNvbnRhaW5lcikge1xuICBjb25zdCBoaWRkZW5TaWJsaW5ncyA9IFtdO1xuICBbXS5mb3JFYWNoLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBlbGVtZW50ID0+IHtcbiAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJykgPT09ICd0cnVlJykge1xuICAgICAgaGlkZGVuU2libGluZ3MucHVzaChlbGVtZW50KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaGlkZGVuU2libGluZ3M7XG59XG4vKipcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKlxuICogUHJvcGVyIHN0YXRlIG1hbmFnZW1lbnQgZm9yIGNvbnRhaW5lcnMgYW5kIHRoZSBtb2RhbHMgaW4gdGhvc2UgY29udGFpbmVycy5cbiAqIFNpbXBsaWZpZWQsIGJ1dCBpbnNwaXJlZCBieSByZWFjdC1vdmVybGF5J3MgTW9kYWxNYW5hZ2VyIGNsYXNzLlxuICogVXNlZCBieSB0aGUgTW9kYWwgdG8gZW5zdXJlIHByb3BlciBzdHlsaW5nIG9mIGNvbnRhaW5lcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2RhbE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lcnMgPSB2b2lkIDA7XG4gICAgdGhpcy5tb2RhbHMgPSB2b2lkIDA7XG4gICAgdGhpcy5tb2RhbHMgPSBbXTtcbiAgICB0aGlzLmNvbnRhaW5lcnMgPSBbXTtcbiAgfVxuICBhZGQobW9kYWwsIGNvbnRhaW5lcikge1xuICAgIGxldCBtb2RhbEluZGV4ID0gdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG4gICAgaWYgKG1vZGFsSW5kZXggIT09IC0xKSB7XG4gICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICB9XG4gICAgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmxlbmd0aDtcbiAgICB0aGlzLm1vZGFscy5wdXNoKG1vZGFsKTtcblxuICAgIC8vIElmIHRoZSBtb2RhbCB3ZSBhcmUgYWRkaW5nIGlzIGFscmVhZHkgaW4gdGhlIERPTS5cbiAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgIGFyaWFIaWRkZW4obW9kYWwubW9kYWxSZWYsIGZhbHNlKTtcbiAgICB9XG4gICAgY29uc3QgaGlkZGVuU2libGluZ3MgPSBnZXRIaWRkZW5TaWJsaW5ncyhjb250YWluZXIpO1xuICAgIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXIsIG1vZGFsLm1vdW50LCBtb2RhbC5tb2RhbFJlZiwgaGlkZGVuU2libGluZ3MsIHRydWUpO1xuICAgIGNvbnN0IGNvbnRhaW5lckluZGV4ID0gZmluZEluZGV4T2YodGhpcy5jb250YWluZXJzLCBpdGVtID0+IGl0ZW0uY29udGFpbmVyID09PSBjb250YWluZXIpO1xuICAgIGlmIChjb250YWluZXJJbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyc1tjb250YWluZXJJbmRleF0ubW9kYWxzLnB1c2gobW9kYWwpO1xuICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgfVxuICAgIHRoaXMuY29udGFpbmVycy5wdXNoKHtcbiAgICAgIG1vZGFsczogW21vZGFsXSxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIHJlc3RvcmU6IG51bGwsXG4gICAgICBoaWRkZW5TaWJsaW5nc1xuICAgIH0pO1xuICAgIHJldHVybiBtb2RhbEluZGV4O1xuICB9XG4gIG1vdW50KG1vZGFsLCBwcm9wcykge1xuICAgIGNvbnN0IGNvbnRhaW5lckluZGV4ID0gZmluZEluZGV4T2YodGhpcy5jb250YWluZXJzLCBpdGVtID0+IGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMSk7XG4gICAgY29uc3QgY29udGFpbmVySW5mbyA9IHRoaXMuY29udGFpbmVyc1tjb250YWluZXJJbmRleF07XG4gICAgaWYgKCFjb250YWluZXJJbmZvLnJlc3RvcmUpIHtcbiAgICAgIGNvbnRhaW5lckluZm8ucmVzdG9yZSA9IGhhbmRsZUNvbnRhaW5lcihjb250YWluZXJJbmZvLCBwcm9wcyk7XG4gICAgfVxuICB9XG4gIHJlbW92ZShtb2RhbCwgYXJpYUhpZGRlblN0YXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IG1vZGFsSW5kZXggPSB0aGlzLm1vZGFscy5pbmRleE9mKG1vZGFsKTtcbiAgICBpZiAobW9kYWxJbmRleCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgIH1cbiAgICBjb25zdCBjb250YWluZXJJbmRleCA9IGZpbmRJbmRleE9mKHRoaXMuY29udGFpbmVycywgaXRlbSA9PiBpdGVtLm1vZGFscy5pbmRleE9mKG1vZGFsKSAhPT0gLTEpO1xuICAgIGNvbnN0IGNvbnRhaW5lckluZm8gPSB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdO1xuICAgIGNvbnRhaW5lckluZm8ubW9kYWxzLnNwbGljZShjb250YWluZXJJbmZvLm1vZGFscy5pbmRleE9mKG1vZGFsKSwgMSk7XG4gICAgdGhpcy5tb2RhbHMuc3BsaWNlKG1vZGFsSW5kZXgsIDEpO1xuXG4gICAgLy8gSWYgdGhhdCB3YXMgdGhlIGxhc3QgbW9kYWwgaW4gYSBjb250YWluZXIsIGNsZWFuIHVwIHRoZSBjb250YWluZXIuXG4gICAgaWYgKGNvbnRhaW5lckluZm8ubW9kYWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gVGhlIG1vZGFsIG1pZ2h0IGJlIGNsb3NlZCBiZWZvcmUgaXQgaGFkIHRoZSBjaGFuY2UgdG8gYmUgbW91bnRlZCBpbiB0aGUgRE9NLlxuICAgICAgaWYgKGNvbnRhaW5lckluZm8ucmVzdG9yZSkge1xuICAgICAgICBjb250YWluZXJJbmZvLnJlc3RvcmUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChtb2RhbC5tb2RhbFJlZikge1xuICAgICAgICAvLyBJbiBjYXNlIHRoZSBtb2RhbCB3YXNuJ3QgaW4gdGhlIERPTSB5ZXQuXG4gICAgICAgIGFyaWFIaWRkZW4obW9kYWwubW9kYWxSZWYsIGFyaWFIaWRkZW5TdGF0ZSk7XG4gICAgICB9XG4gICAgICBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVySW5mby5jb250YWluZXIsIG1vZGFsLm1vdW50LCBtb2RhbC5tb2RhbFJlZiwgY29udGFpbmVySW5mby5oaWRkZW5TaWJsaW5ncywgZmFsc2UpO1xuICAgICAgdGhpcy5jb250YWluZXJzLnNwbGljZShjb250YWluZXJJbmRleCwgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSBtYWtlIHN1cmUgdGhlIG5leHQgdG9wIG1vZGFsIGlzIHZpc2libGUgdG8gYSBzY3JlZW4gcmVhZGVyLlxuICAgICAgY29uc3QgbmV4dFRvcCA9IGNvbnRhaW5lckluZm8ubW9kYWxzW2NvbnRhaW5lckluZm8ubW9kYWxzLmxlbmd0aCAtIDFdO1xuICAgICAgLy8gYXMgc29vbiBhcyBhIG1vZGFsIGlzIGFkZGluZyBpdHMgbW9kYWxSZWYgaXMgdW5kZWZpbmVkLiBpdCBjYW4ndCBzZXRcbiAgICAgIC8vIGFyaWEtaGlkZGVuIGJlY2F1c2UgdGhlIGRvbSBlbGVtZW50IGRvZXNuJ3QgZXhpc3QgZWl0aGVyXG4gICAgICAvLyB3aGVuIG1vZGFsIHdhcyB1bm1vdW50ZWQgYmVmb3JlIG1vZGFsUmVmIGdldHMgbnVsbFxuICAgICAgaWYgKG5leHRUb3AubW9kYWxSZWYpIHtcbiAgICAgICAgYXJpYUhpZGRlbihuZXh0VG9wLm1vZGFsUmVmLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtb2RhbEluZGV4O1xuICB9XG4gIGlzVG9wTW9kYWwobW9kYWwpIHtcbiAgICByZXR1cm4gdGhpcy5tb2RhbHMubGVuZ3RoID4gMCAmJiB0aGlzLm1vZGFsc1t0aGlzLm1vZGFscy5sZW5ndGggLSAxXSA9PT0gbW9kYWw7XG4gIH1cbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdW5zdGFibGVfb3duZXJEb2N1bWVudCBhcyBvd25lckRvY3VtZW50LCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3VzZUV2ZW50Q2FsbGJhY2sgYXMgdXNlRXZlbnRDYWxsYmFjaywgdW5zdGFibGVfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGFzIGNyZWF0ZUNoYWluZWRGdW5jdGlvbiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgZXh0cmFjdEV2ZW50SGFuZGxlcnMgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBNb2RhbE1hbmFnZXIsIGFyaWFIaWRkZW4gfSBmcm9tICcuL01vZGFsTWFuYWdlcic7XG5mdW5jdGlvbiBnZXRDb250YWluZXIoY29udGFpbmVyKSB7XG4gIHJldHVybiB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7XG59XG5mdW5jdGlvbiBnZXRIYXNUcmFuc2l0aW9uKGNoaWxkcmVuKSB7XG4gIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuLnByb3BzLmhhc093blByb3BlcnR5KCdpbicpIDogZmFsc2U7XG59XG5cbi8vIEEgbW9kYWwgbWFuYWdlciB1c2VkIHRvIHRyYWNrIGFuZCBtYW5hZ2UgdGhlIHN0YXRlIG9mIG9wZW4gTW9kYWxzLlxuLy8gTW9kYWxzIGRvbid0IG9wZW4gb24gdGhlIHNlcnZlciBzbyB0aGlzIHdvbid0IGNvbmZsaWN0IHdpdGggY29uY3VycmVudCByZXF1ZXN0cy5cbmNvbnN0IGRlZmF1bHRNYW5hZ2VyID0gbmV3IE1vZGFsTWFuYWdlcigpO1xuLyoqXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbTW9kYWxdKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LW1vZGFsLyNob29rKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFt1c2VNb2RhbCBBUEldKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LW1vZGFsL2hvb2tzLWFwaS8jdXNlLW1vZGFsKVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTW9kYWwocGFyYW1ldGVycykge1xuICBjb25zdCB7XG4gICAgY29udGFpbmVyLFxuICAgIGRpc2FibGVFc2NhcGVLZXlEb3duID0gZmFsc2UsXG4gICAgZGlzYWJsZVNjcm9sbExvY2sgPSBmYWxzZSxcbiAgICAvLyBAdHMtaWdub3JlIGludGVybmFsIGxvZ2ljIC0gQmFzZSBVSSBzdXBwb3J0cyB0aGUgbWFuYWdlciBhcyBhIHByb3AgdG9vXG4gICAgbWFuYWdlciA9IGRlZmF1bHRNYW5hZ2VyLFxuICAgIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uID0gZmFsc2UsXG4gICAgb25UcmFuc2l0aW9uRW50ZXIsXG4gICAgb25UcmFuc2l0aW9uRXhpdGVkLFxuICAgIGNoaWxkcmVuLFxuICAgIG9uQ2xvc2UsXG4gICAgb3BlbixcbiAgICByb290UmVmXG4gIH0gPSBwYXJhbWV0ZXJzO1xuXG4gIC8vIEB0cy1pZ25vcmUgaW50ZXJuYWwgbG9naWNcbiAgY29uc3QgbW9kYWwgPSBSZWFjdC51c2VSZWYoe30pO1xuICBjb25zdCBtb3VudE5vZGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IG1vZGFsUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKG1vZGFsUmVmLCByb290UmVmKTtcbiAgY29uc3QgW2V4aXRlZCwgc2V0RXhpdGVkXSA9IFJlYWN0LnVzZVN0YXRlKCFvcGVuKTtcbiAgY29uc3QgaGFzVHJhbnNpdGlvbiA9IGdldEhhc1RyYW5zaXRpb24oY2hpbGRyZW4pO1xuICBsZXQgYXJpYUhpZGRlblByb3AgPSB0cnVlO1xuICBpZiAocGFyYW1ldGVyc1snYXJpYS1oaWRkZW4nXSA9PT0gJ2ZhbHNlJyB8fCBwYXJhbWV0ZXJzWydhcmlhLWhpZGRlbiddID09PSBmYWxzZSkge1xuICAgIGFyaWFIaWRkZW5Qcm9wID0gZmFsc2U7XG4gIH1cbiAgY29uc3QgZ2V0RG9jID0gKCkgPT4gb3duZXJEb2N1bWVudChtb3VudE5vZGVSZWYuY3VycmVudCk7XG4gIGNvbnN0IGdldE1vZGFsID0gKCkgPT4ge1xuICAgIG1vZGFsLmN1cnJlbnQubW9kYWxSZWYgPSBtb2RhbFJlZi5jdXJyZW50O1xuICAgIG1vZGFsLmN1cnJlbnQubW91bnQgPSBtb3VudE5vZGVSZWYuY3VycmVudDtcbiAgICByZXR1cm4gbW9kYWwuY3VycmVudDtcbiAgfTtcbiAgY29uc3QgaGFuZGxlTW91bnRlZCA9ICgpID0+IHtcbiAgICBtYW5hZ2VyLm1vdW50KGdldE1vZGFsKCksIHtcbiAgICAgIGRpc2FibGVTY3JvbGxMb2NrXG4gICAgfSk7XG5cbiAgICAvLyBGaXggYSBidWcgb24gQ2hyb21lIHdoZXJlIHRoZSBzY3JvbGwgaXNuJ3QgaW5pdGlhbGx5IDAuXG4gICAgaWYgKG1vZGFsUmVmLmN1cnJlbnQpIHtcbiAgICAgIG1vZGFsUmVmLmN1cnJlbnQuc2Nyb2xsVG9wID0gMDtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZU9wZW4gPSB1c2VFdmVudENhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCByZXNvbHZlZENvbnRhaW5lciA9IGdldENvbnRhaW5lcihjb250YWluZXIpIHx8IGdldERvYygpLmJvZHk7XG4gICAgbWFuYWdlci5hZGQoZ2V0TW9kYWwoKSwgcmVzb2x2ZWRDb250YWluZXIpO1xuXG4gICAgLy8gVGhlIGVsZW1lbnQgd2FzIGFscmVhZHkgbW91bnRlZC5cbiAgICBpZiAobW9kYWxSZWYuY3VycmVudCkge1xuICAgICAgaGFuZGxlTW91bnRlZCgpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGlzVG9wTW9kYWwgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiBtYW5hZ2VyLmlzVG9wTW9kYWwoZ2V0TW9kYWwoKSksIFttYW5hZ2VyXSk7XG4gIGNvbnN0IGhhbmRsZVBvcnRhbFJlZiA9IHVzZUV2ZW50Q2FsbGJhY2sobm9kZSA9PiB7XG4gICAgbW91bnROb2RlUmVmLmN1cnJlbnQgPSBub2RlO1xuICAgIGlmICghbm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAob3BlbiAmJiBpc1RvcE1vZGFsKCkpIHtcbiAgICAgIGhhbmRsZU1vdW50ZWQoKTtcbiAgICB9IGVsc2UgaWYgKG1vZGFsUmVmLmN1cnJlbnQpIHtcbiAgICAgIGFyaWFIaWRkZW4obW9kYWxSZWYuY3VycmVudCwgYXJpYUhpZGRlblByb3ApO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUNsb3NlID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIG1hbmFnZXIucmVtb3ZlKGdldE1vZGFsKCksIGFyaWFIaWRkZW5Qcm9wKTtcbiAgfSwgW2FyaWFIaWRkZW5Qcm9wLCBtYW5hZ2VyXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfTtcbiAgfSwgW2hhbmRsZUNsb3NlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIGhhbmRsZU9wZW4oKTtcbiAgICB9IGVsc2UgaWYgKCFoYXNUcmFuc2l0aW9uIHx8ICFjbG9zZUFmdGVyVHJhbnNpdGlvbikge1xuICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICB9XG4gIH0sIFtvcGVuLCBoYW5kbGVDbG9zZSwgaGFzVHJhbnNpdGlvbiwgY2xvc2VBZnRlclRyYW5zaXRpb24sIGhhbmRsZU9wZW5dKTtcbiAgY29uc3QgY3JlYXRlSGFuZGxlS2V5RG93biA9IG90aGVySGFuZGxlcnMgPT4gZXZlbnQgPT4ge1xuICAgIHZhciBfb3RoZXJIYW5kbGVycyRvbktleUQ7XG4gICAgKF9vdGhlckhhbmRsZXJzJG9uS2V5RCA9IG90aGVySGFuZGxlcnMub25LZXlEb3duKSA9PSBudWxsIHx8IF9vdGhlckhhbmRsZXJzJG9uS2V5RC5jYWxsKG90aGVySGFuZGxlcnMsIGV2ZW50KTtcblxuICAgIC8vIFRoZSBoYW5kbGVyIGRvZXNuJ3QgdGFrZSBldmVudC5kZWZhdWx0UHJldmVudGVkIGludG8gYWNjb3VudDpcbiAgICAvL1xuICAgIC8vIGV2ZW50LnByZXZlbnREZWZhdWx0KCkgaXMgbWVhbnQgdG8gc3RvcCBkZWZhdWx0IGJlaGF2aW9ycyBsaWtlXG4gICAgLy8gY2xpY2tpbmcgYSBjaGVja2JveCB0byBjaGVjayBpdCwgaGl0dGluZyBhIGJ1dHRvbiB0byBzdWJtaXQgYSBmb3JtLFxuICAgIC8vIGFuZCBoaXR0aW5nIGxlZnQgYXJyb3cgdG8gbW92ZSB0aGUgY3Vyc29yIGluIGEgdGV4dCBpbnB1dCBldGMuXG4gICAgLy8gT25seSBzcGVjaWFsIEhUTUwgZWxlbWVudHMgaGF2ZSB0aGVzZSBkZWZhdWx0IGJlaGF2aW9ycy5cbiAgICBpZiAoZXZlbnQua2V5ICE9PSAnRXNjYXBlJyB8fCBldmVudC53aGljaCA9PT0gMjI5IHx8XG4gICAgLy8gV2FpdCB1bnRpbCBJTUUgaXMgc2V0dGxlZC5cbiAgICAhaXNUb3BNb2RhbCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghZGlzYWJsZUVzY2FwZUtleURvd24pIHtcbiAgICAgIC8vIFN3YWxsb3cgdGhlIGV2ZW50LCBpbiBjYXNlIHNvbWVvbmUgaXMgbGlzdGVuaW5nIGZvciB0aGUgZXNjYXBlIGtleSBvbiB0aGUgYm9keS5cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ2VzY2FwZUtleURvd24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGNyZWF0ZUhhbmRsZUJhY2tkcm9wQ2xpY2sgPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25DbGljO1xuICAgIChfb3RoZXJIYW5kbGVycyRvbkNsaWMgPSBvdGhlckhhbmRsZXJzLm9uQ2xpY2spID09IG51bGwgfHwgX290aGVySGFuZGxlcnMkb25DbGljLmNhbGwob3RoZXJIYW5kbGVycywgZXZlbnQpO1xuICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZXZlbnQsICdiYWNrZHJvcENsaWNrJyk7XG4gICAgfVxuICB9O1xuICBjb25zdCBnZXRSb290UHJvcHMgPSAob3RoZXJIYW5kbGVycyA9IHt9KSA9PiB7XG4gICAgY29uc3QgcHJvcHNFdmVudEhhbmRsZXJzID0gZXh0cmFjdEV2ZW50SGFuZGxlcnMocGFyYW1ldGVycyk7XG5cbiAgICAvLyBUaGUgY3VzdG9tIGV2ZW50IGhhbmRsZXJzIHNob3VsZG4ndCBiZSBzcHJlYWQgb24gdGhlIHJvb3QgZWxlbWVudFxuICAgIGRlbGV0ZSBwcm9wc0V2ZW50SGFuZGxlcnMub25UcmFuc2l0aW9uRW50ZXI7XG4gICAgZGVsZXRlIHByb3BzRXZlbnRIYW5kbGVycy5vblRyYW5zaXRpb25FeGl0ZWQ7XG4gICAgY29uc3QgZXh0ZXJuYWxFdmVudEhhbmRsZXJzID0gX2V4dGVuZHMoe30sIHByb3BzRXZlbnRIYW5kbGVycywgb3RoZXJIYW5kbGVycyk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIHJvbGU6ICdwcmVzZW50YXRpb24nXG4gICAgfSwgZXh0ZXJuYWxFdmVudEhhbmRsZXJzLCB7XG4gICAgICBvbktleURvd246IGNyZWF0ZUhhbmRsZUtleURvd24oZXh0ZXJuYWxFdmVudEhhbmRsZXJzKSxcbiAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGdldEJhY2tkcm9wUHJvcHMgPSAob3RoZXJIYW5kbGVycyA9IHt9KSA9PiB7XG4gICAgY29uc3QgZXh0ZXJuYWxFdmVudEhhbmRsZXJzID0gb3RoZXJIYW5kbGVycztcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgJ2FyaWEtaGlkZGVuJzogdHJ1ZVxuICAgIH0sIGV4dGVybmFsRXZlbnRIYW5kbGVycywge1xuICAgICAgb25DbGljazogY3JlYXRlSGFuZGxlQmFja2Ryb3BDbGljayhleHRlcm5hbEV2ZW50SGFuZGxlcnMpLFxuICAgICAgb3BlblxuICAgIH0pO1xuICB9O1xuICBjb25zdCBnZXRUcmFuc2l0aW9uUHJvcHMgPSAoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlRW50ZXIgPSAoKSA9PiB7XG4gICAgICBzZXRFeGl0ZWQoZmFsc2UpO1xuICAgICAgaWYgKG9uVHJhbnNpdGlvbkVudGVyKSB7XG4gICAgICAgIG9uVHJhbnNpdGlvbkVudGVyKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVFeGl0ZWQgPSAoKSA9PiB7XG4gICAgICBzZXRFeGl0ZWQodHJ1ZSk7XG4gICAgICBpZiAob25UcmFuc2l0aW9uRXhpdGVkKSB7XG4gICAgICAgIG9uVHJhbnNpdGlvbkV4aXRlZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGNsb3NlQWZ0ZXJUcmFuc2l0aW9uKSB7XG4gICAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgb25FbnRlcjogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUVudGVyLCBjaGlsZHJlbiA9PSBudWxsID8gdm9pZCAwIDogY2hpbGRyZW4ucHJvcHMub25FbnRlciksXG4gICAgICBvbkV4aXRlZDogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUV4aXRlZCwgY2hpbGRyZW4gPT0gbnVsbCA/IHZvaWQgMCA6IGNoaWxkcmVuLnByb3BzLm9uRXhpdGVkKVxuICAgIH07XG4gIH07XG4gIHJldHVybiB7XG4gICAgZ2V0Um9vdFByb3BzLFxuICAgIGdldEJhY2tkcm9wUHJvcHMsXG4gICAgZ2V0VHJhbnNpdGlvblByb3BzLFxuICAgIHJvb3RSZWY6IGhhbmRsZVJlZixcbiAgICBwb3J0YWxSZWY6IGhhbmRsZVBvcnRhbFJlZixcbiAgICBpc1RvcE1vZGFsLFxuICAgIGV4aXRlZCxcbiAgICBoYXNUcmFuc2l0aW9uXG4gIH07XG59IiwiJ3VzZSBjbGllbnQnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiwganN4LWExMXkvbm8tbm9uaW50ZXJhY3RpdmUtdGFiaW5kZXggKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AsIGVsZW1lbnRBY2NlcHRpbmdSZWYsIHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiwgdW5zdGFibGVfb3duZXJEb2N1bWVudCBhcyBvd25lckRvY3VtZW50IH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2ZvY3VzLXRyYXAvdGFiYmFibGVcbmNvbnN0IGNhbmRpZGF0ZXNTZWxlY3RvciA9IFsnaW5wdXQnLCAnc2VsZWN0JywgJ3RleHRhcmVhJywgJ2FbaHJlZl0nLCAnYnV0dG9uJywgJ1t0YWJpbmRleF0nLCAnYXVkaW9bY29udHJvbHNdJywgJ3ZpZGVvW2NvbnRyb2xzXScsICdbY29udGVudGVkaXRhYmxlXTpub3QoW2NvbnRlbnRlZGl0YWJsZT1cImZhbHNlXCJdKSddLmpvaW4oJywnKTtcbmZ1bmN0aW9uIGdldFRhYkluZGV4KG5vZGUpIHtcbiAgY29uc3QgdGFiaW5kZXhBdHRyID0gcGFyc2VJbnQobm9kZS5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JykgfHwgJycsIDEwKTtcbiAgaWYgKCFOdW1iZXIuaXNOYU4odGFiaW5kZXhBdHRyKSkge1xuICAgIHJldHVybiB0YWJpbmRleEF0dHI7XG4gIH1cblxuICAvLyBCcm93c2VycyBkbyBub3QgcmV0dXJuIGB0YWJJbmRleGAgY29ycmVjdGx5IGZvciBjb250ZW50RWRpdGFibGUgbm9kZXM7XG4gIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTY2MTEwOCZxPWNvbnRlbnRlZGl0YWJsZSUyMHRhYmluZGV4JmNhbj0yXG4gIC8vIHNvIGlmIHRoZXkgZG9uJ3QgaGF2ZSBhIHRhYmluZGV4IGF0dHJpYnV0ZSBzcGVjaWZpY2FsbHkgc2V0LCBhc3N1bWUgaXQncyAwLlxuICAvLyBpbiBDaHJvbWUsIDxkZXRhaWxzLz4sIDxhdWRpbyBjb250cm9scy8+IGFuZCA8dmlkZW8gY29udHJvbHMvPiBlbGVtZW50cyBnZXQgYSBkZWZhdWx0XG4gIC8vICBgdGFiSW5kZXhgIG9mIC0xIHdoZW4gdGhlICd0YWJpbmRleCcgYXR0cmlidXRlIGlzbid0IHNwZWNpZmllZCBpbiB0aGUgRE9NLFxuICAvLyAgeWV0IHRoZXkgYXJlIHN0aWxsIHBhcnQgb2YgdGhlIHJlZ3VsYXIgdGFiIG9yZGVyOyBpbiBGRiwgdGhleSBnZXQgYSBkZWZhdWx0XG4gIC8vICBgdGFiSW5kZXhgIG9mIDA7IHNpbmNlIENocm9tZSBzdGlsbCBwdXRzIHRob3NlIGVsZW1lbnRzIGluIHRoZSByZWd1bGFyIHRhYlxuICAvLyAgb3JkZXIsIGNvbnNpZGVyIHRoZWlyIHRhYiBpbmRleCB0byBiZSAwLlxuICBpZiAobm9kZS5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJyB8fCAobm9kZS5ub2RlTmFtZSA9PT0gJ0FVRElPJyB8fCBub2RlLm5vZGVOYW1lID09PSAnVklERU8nIHx8IG5vZGUubm9kZU5hbWUgPT09ICdERVRBSUxTJykgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JykgPT09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gbm9kZS50YWJJbmRleDtcbn1cbmZ1bmN0aW9uIGlzTm9uVGFiYmFibGVSYWRpbyhub2RlKSB7XG4gIGlmIChub2RlLnRhZ05hbWUgIT09ICdJTlBVVCcgfHwgbm9kZS50eXBlICE9PSAncmFkaW8nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghbm9kZS5uYW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGdldFJhZGlvID0gc2VsZWN0b3IgPT4gbm9kZS5vd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGlucHV0W3R5cGU9XCJyYWRpb1wiXSR7c2VsZWN0b3J9YCk7XG4gIGxldCByb3ZpbmcgPSBnZXRSYWRpbyhgW25hbWU9XCIke25vZGUubmFtZX1cIl06Y2hlY2tlZGApO1xuICBpZiAoIXJvdmluZykge1xuICAgIHJvdmluZyA9IGdldFJhZGlvKGBbbmFtZT1cIiR7bm9kZS5uYW1lfVwiXWApO1xuICB9XG4gIHJldHVybiByb3ZpbmcgIT09IG5vZGU7XG59XG5mdW5jdGlvbiBpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlKG5vZGUpIHtcbiAgaWYgKG5vZGUuZGlzYWJsZWQgfHwgbm9kZS50YWdOYW1lID09PSAnSU5QVVQnICYmIG5vZGUudHlwZSA9PT0gJ2hpZGRlbicgfHwgaXNOb25UYWJiYWJsZVJhZGlvKG5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZGVmYXVsdEdldFRhYmJhYmxlKHJvb3QpIHtcbiAgY29uc3QgcmVndWxhclRhYk5vZGVzID0gW107XG4gIGNvbnN0IG9yZGVyZWRUYWJOb2RlcyA9IFtdO1xuICBBcnJheS5mcm9tKHJvb3QucXVlcnlTZWxlY3RvckFsbChjYW5kaWRhdGVzU2VsZWN0b3IpKS5mb3JFYWNoKChub2RlLCBpKSA9PiB7XG4gICAgY29uc3Qgbm9kZVRhYkluZGV4ID0gZ2V0VGFiSW5kZXgobm9kZSk7XG4gICAgaWYgKG5vZGVUYWJJbmRleCA9PT0gLTEgfHwgIWlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUobm9kZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG5vZGVUYWJJbmRleCA9PT0gMCkge1xuICAgICAgcmVndWxhclRhYk5vZGVzLnB1c2gobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9yZGVyZWRUYWJOb2Rlcy5wdXNoKHtcbiAgICAgICAgZG9jdW1lbnRPcmRlcjogaSxcbiAgICAgICAgdGFiSW5kZXg6IG5vZGVUYWJJbmRleCxcbiAgICAgICAgbm9kZTogbm9kZVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9yZGVyZWRUYWJOb2Rlcy5zb3J0KChhLCBiKSA9PiBhLnRhYkluZGV4ID09PSBiLnRhYkluZGV4ID8gYS5kb2N1bWVudE9yZGVyIC0gYi5kb2N1bWVudE9yZGVyIDogYS50YWJJbmRleCAtIGIudGFiSW5kZXgpLm1hcChhID0+IGEubm9kZSkuY29uY2F0KHJlZ3VsYXJUYWJOb2Rlcyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0SXNFbmFibGVkKCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IGNvbXBvbmVudCB0aGF0IGxvY2tzIGZvY3VzIGluc2lkZSB0aGUgY29tcG9uZW50LlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW0ZvY3VzIFRyYXBdKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LWZvY3VzLXRyYXAvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtGb2N1c1RyYXAgQVBJXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC1mb2N1cy10cmFwL2NvbXBvbmVudHMtYXBpLyNmb2N1cy10cmFwKVxuICovXG5mdW5jdGlvbiBGb2N1c1RyYXAocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGRpc2FibGVBdXRvRm9jdXMgPSBmYWxzZSxcbiAgICBkaXNhYmxlRW5mb3JjZUZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IGZhbHNlLFxuICAgIGdldFRhYmJhYmxlID0gZGVmYXVsdEdldFRhYmJhYmxlLFxuICAgIGlzRW5hYmxlZCA9IGRlZmF1bHRJc0VuYWJsZWQsXG4gICAgb3BlblxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGlnbm9yZU5leHRFbmZvcmNlRm9jdXMgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBjb25zdCBzZW50aW5lbFN0YXJ0ID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBzZW50aW5lbEVuZCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3Qgbm9kZVRvUmVzdG9yZSA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgcmVhY3RGb2N1c0V2ZW50VGFyZ2V0ID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICAvLyBUaGlzIHZhcmlhYmxlIGlzIHVzZWZ1bCB3aGVuIGRpc2FibGVBdXRvRm9jdXMgaXMgdHJ1ZS5cbiAgLy8gSXQgd2FpdHMgZm9yIHRoZSBhY3RpdmUgZWxlbWVudCB0byBtb3ZlIGludG8gdGhlIGNvbXBvbmVudCB0byBhY3RpdmF0ZS5cbiAgY29uc3QgYWN0aXZhdGVkID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgY29uc3Qgcm9vdFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBUT0RPIHVwc3RyZWFtIGZpeFxuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgcm9vdFJlZik7XG4gIGNvbnN0IGxhc3RLZXlkb3duID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFdlIG1pZ2h0IHJlbmRlciBhbiBlbXB0eSBjaGlsZC5cbiAgICBpZiAoIW9wZW4gfHwgIXJvb3RSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhY3RpdmF0ZWQuY3VycmVudCA9ICFkaXNhYmxlQXV0b0ZvY3VzO1xuICB9LCBbZGlzYWJsZUF1dG9Gb2N1cywgb3Blbl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFdlIG1pZ2h0IHJlbmRlciBhbiBlbXB0eSBjaGlsZC5cbiAgICBpZiAoIW9wZW4gfHwgIXJvb3RSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KHJvb3RSZWYuY3VycmVudCk7XG4gICAgaWYgKCFyb290UmVmLmN1cnJlbnQuY29udGFpbnMoZG9jLmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICBpZiAoIXJvb3RSZWYuY3VycmVudC5oYXNBdHRyaWJ1dGUoJ3RhYkluZGV4JykpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGUgbW9kYWwgY29udGVudCBub2RlIGRvZXMgbm90IGFjY2VwdCBmb2N1cy4nLCAnRm9yIHRoZSBiZW5lZml0IG9mIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsICcgKyAndGhlIHRhYkluZGV4IG9mIHRoZSBub2RlIGlzIGJlaW5nIHNldCB0byBcIi0xXCIuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgJy0xJyk7XG4gICAgICB9XG4gICAgICBpZiAoYWN0aXZhdGVkLmN1cnJlbnQpIHtcbiAgICAgICAgcm9vdFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyByZXN0b3JlTGFzdEZvY3VzKClcbiAgICAgIGlmICghZGlzYWJsZVJlc3RvcmVGb2N1cykge1xuICAgICAgICAvLyBJbiBJRTExIGl0IGlzIHBvc3NpYmxlIGZvciBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHRvIGJlIG51bGwgcmVzdWx0aW5nXG4gICAgICAgIC8vIGluIG5vZGVUb1Jlc3RvcmUuY3VycmVudCBiZWluZyBudWxsLlxuICAgICAgICAvLyBOb3QgYWxsIGVsZW1lbnRzIGluIElFMTEgaGF2ZSBhIGZvY3VzIG1ldGhvZC5cbiAgICAgICAgLy8gT25jZSBJRTExIHN1cHBvcnQgaXMgZHJvcHBlZCB0aGUgZm9jdXMoKSBjYWxsIGNhbiBiZSB1bmNvbmRpdGlvbmFsLlxuICAgICAgICBpZiAobm9kZVRvUmVzdG9yZS5jdXJyZW50ICYmIG5vZGVUb1Jlc3RvcmUuY3VycmVudC5mb2N1cykge1xuICAgICAgICAgIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCA9IHRydWU7XG4gICAgICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICAgIC8vIE1pc3NpbmcgYGRpc2FibGVSZXN0b3JlRm9jdXNgIHdoaWNoIGlzIGZpbmUuXG4gICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCBjaGFuZ2luZyB0aGF0IHByb3Agb24gYW4gb3BlbiBGb2N1c1RyYXBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtvcGVuXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gV2UgbWlnaHQgcmVuZGVyIGFuIGVtcHR5IGNoaWxkLlxuICAgIGlmICghb3BlbiB8fCAhcm9vdFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQocm9vdFJlZi5jdXJyZW50KTtcbiAgICBjb25zdCBsb29wRm9jdXMgPSBuYXRpdmVFdmVudCA9PiB7XG4gICAgICBsYXN0S2V5ZG93bi5jdXJyZW50ID0gbmF0aXZlRXZlbnQ7XG4gICAgICBpZiAoZGlzYWJsZUVuZm9yY2VGb2N1cyB8fCAhaXNFbmFibGVkKCkgfHwgbmF0aXZlRXZlbnQua2V5ICE9PSAnVGFiJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgbmV4dCB0YWIgc3RhcnRzIGZyb20gdGhlIHJpZ2h0IHBsYWNlLlxuICAgICAgLy8gZG9jLmFjdGl2ZUVsZW1lbnQgcmVmZXJzIHRvIHRoZSBvcmlnaW4uXG4gICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQgPT09IHJvb3RSZWYuY3VycmVudCAmJiBuYXRpdmVFdmVudC5zaGlmdEtleSkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGlnbm9yZSB0aGUgbmV4dCBjb250YWluIGFzXG4gICAgICAgIC8vIGl0IHdpbGwgdHJ5IHRvIG1vdmUgdGhlIGZvY3VzIGJhY2sgdG8gdGhlIHJvb3RSZWYgZWxlbWVudC5cbiAgICAgICAgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgaWYgKHNlbnRpbmVsRW5kLmN1cnJlbnQpIHtcbiAgICAgICAgICBzZW50aW5lbEVuZC5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGNvbnRhaW4gPSAoKSA9PiB7XG4gICAgICBjb25zdCByb290RWxlbWVudCA9IHJvb3RSZWYuY3VycmVudDtcblxuICAgICAgLy8gQ2xlYW51cCBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkIGxhemlseSBpbiBSZWFjdCAxNy5cbiAgICAgIC8vIENvbnRhaW4gY2FuIGJlIGNhbGxlZCBiZXR3ZWVuIHRoZSBjb21wb25lbnQgYmVpbmcgdW5tb3VudGVkIGFuZCBpdHMgY2xlYW51cCBmdW5jdGlvbiBiZWluZyBydW4uXG4gICAgICBpZiAocm9vdEVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFkb2MuaGFzRm9jdXMoKSB8fCAhaXNFbmFibGVkKCkgfHwgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50KSB7XG4gICAgICAgIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBmb2N1cyBpcyBhbHJlYWR5IGluc2lkZVxuICAgICAgaWYgKHJvb3RFbGVtZW50LmNvbnRhaW5zKGRvYy5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBkaXNhYmxlRW5mb3JjZUZvY3VzIGlzIHNldCBhbmQgdGhlIGZvY3VzIGlzIG91dHNpZGUgb2YgdGhlIGZvY3VzIHRyYXAgKGFuZCBzZW50aW5lbCBub2RlcylcbiAgICAgIGlmIChkaXNhYmxlRW5mb3JjZUZvY3VzICYmIGRvYy5hY3RpdmVFbGVtZW50ICE9PSBzZW50aW5lbFN0YXJ0LmN1cnJlbnQgJiYgZG9jLmFjdGl2ZUVsZW1lbnQgIT09IHNlbnRpbmVsRW5kLmN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBpZiB0aGUgZm9jdXMgZXZlbnQgaXMgbm90IGNvbWluZyBmcm9tIGluc2lkZSB0aGUgY2hpbGRyZW4ncyByZWFjdCB0cmVlLCByZXNldCB0aGUgcmVmc1xuICAgICAgaWYgKGRvYy5hY3RpdmVFbGVtZW50ICE9PSByZWFjdEZvY3VzRXZlbnRUYXJnZXQuY3VycmVudCkge1xuICAgICAgICByZWFjdEZvY3VzRXZlbnRUYXJnZXQuY3VycmVudCA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHJlYWN0Rm9jdXNFdmVudFRhcmdldC5jdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghYWN0aXZhdGVkLmN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IHRhYmJhYmxlID0gW107XG4gICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQgPT09IHNlbnRpbmVsU3RhcnQuY3VycmVudCB8fCBkb2MuYWN0aXZlRWxlbWVudCA9PT0gc2VudGluZWxFbmQuY3VycmVudCkge1xuICAgICAgICB0YWJiYWJsZSA9IGdldFRhYmJhYmxlKHJvb3RSZWYuY3VycmVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIG9uZSBvZiB0aGUgc2VudGluZWwgbm9kZXMgd2FzIGZvY3VzZWQsIHNvIG1vdmUgdGhlIGZvY3VzXG4gICAgICAvLyB0byB0aGUgZmlyc3QvbGFzdCB0YWJiYWJsZSBlbGVtZW50IGluc2lkZSB0aGUgZm9jdXMgdHJhcFxuICAgICAgaWYgKHRhYmJhYmxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIF9sYXN0S2V5ZG93biRjdXJyZW50LCBfbGFzdEtleWRvd24kY3VycmVudDI7XG4gICAgICAgIGNvbnN0IGlzU2hpZnRUYWIgPSBCb29sZWFuKCgoX2xhc3RLZXlkb3duJGN1cnJlbnQgPSBsYXN0S2V5ZG93bi5jdXJyZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2xhc3RLZXlkb3duJGN1cnJlbnQuc2hpZnRLZXkpICYmICgoX2xhc3RLZXlkb3duJGN1cnJlbnQyID0gbGFzdEtleWRvd24uY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sYXN0S2V5ZG93biRjdXJyZW50Mi5rZXkpID09PSAnVGFiJyk7XG4gICAgICAgIGNvbnN0IGZvY3VzTmV4dCA9IHRhYmJhYmxlWzBdO1xuICAgICAgICBjb25zdCBmb2N1c1ByZXZpb3VzID0gdGFiYmFibGVbdGFiYmFibGUubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0eXBlb2YgZm9jdXNOZXh0ICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgZm9jdXNQcmV2aW91cyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoaXNTaGlmdFRhYikge1xuICAgICAgICAgICAgZm9jdXNQcmV2aW91cy5mb2N1cygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb2N1c05leHQuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm8gdGFiYmFibGUgZWxlbWVudHMgaW4gdGhlIHRyYXAgZm9jdXMgb3IgdGhlIGZvY3VzIHdhcyBvdXRzaWRlIG9mIHRoZSBmb2N1cyB0cmFwXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290RWxlbWVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBjb250YWluKTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGxvb3BGb2N1cywgdHJ1ZSk7XG5cbiAgICAvLyBXaXRoIEVkZ2UsIFNhZmFyaSBhbmQgRmlyZWZveCwgbm8gZm9jdXMgcmVsYXRlZCBldmVudHMgYXJlIGZpcmVkIHdoZW4gdGhlIGZvY3VzZWQgYXJlYSBzdG9wcyBiZWluZyBhIGZvY3VzZWQgYXJlYS5cbiAgICAvLyBlLmcuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU1OTU2MS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBjYW4gbG9vayBpZiB0aGUgYWN0aXZlIGVsZW1lbnQgd2FzIHJlc3RvcmVkIG9uIHRoZSBCT0RZIGVsZW1lbnQuXG4gICAgLy9cbiAgICAvLyBUaGUgd2hhdHdnIHNwZWMgZGVmaW5lcyBob3cgdGhlIGJyb3dzZXIgc2hvdWxkIGJlaGF2ZSBidXQgZG9lcyBub3QgZXhwbGljaXRseSBtZW50aW9uIGFueSBldmVudHM6XG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW50ZXJhY3Rpb24uaHRtbCNmb2N1cy1maXh1cC1ydWxlLlxuICAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKGRvYy5hY3RpdmVFbGVtZW50ICYmIGRvYy5hY3RpdmVFbGVtZW50LnRhZ05hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBjb250YWluKCk7XG4gICAgICB9XG4gICAgfSwgNTApO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1c2luJywgY29udGFpbik7XG4gICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGxvb3BGb2N1cywgdHJ1ZSk7XG4gICAgfTtcbiAgfSwgW2Rpc2FibGVBdXRvRm9jdXMsIGRpc2FibGVFbmZvcmNlRm9jdXMsIGRpc2FibGVSZXN0b3JlRm9jdXMsIGlzRW5hYmxlZCwgb3BlbiwgZ2V0VGFiYmFibGVdKTtcbiAgY29uc3Qgb25Gb2N1cyA9IGV2ZW50ID0+IHtcbiAgICBpZiAobm9kZVRvUmVzdG9yZS5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICBub2RlVG9SZXN0b3JlLmN1cnJlbnQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIH1cbiAgICBhY3RpdmF0ZWQuY3VycmVudCA9IHRydWU7XG4gICAgcmVhY3RGb2N1c0V2ZW50VGFyZ2V0LmN1cnJlbnQgPSBldmVudC50YXJnZXQ7XG4gICAgY29uc3QgY2hpbGRyZW5Qcm9wc0hhbmRsZXIgPSBjaGlsZHJlbi5wcm9wcy5vbkZvY3VzO1xuICAgIGlmIChjaGlsZHJlblByb3BzSGFuZGxlcikge1xuICAgICAgY2hpbGRyZW5Qcm9wc0hhbmRsZXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlRm9jdXNTZW50aW5lbCA9IGV2ZW50ID0+IHtcbiAgICBpZiAobm9kZVRvUmVzdG9yZS5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICBub2RlVG9SZXN0b3JlLmN1cnJlbnQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIH1cbiAgICBhY3RpdmF0ZWQuY3VycmVudCA9IHRydWU7XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KFwiZGl2XCIsIHtcbiAgICAgIHRhYkluZGV4OiBvcGVuID8gMCA6IC0xLFxuICAgICAgb25Gb2N1czogaGFuZGxlRm9jdXNTZW50aW5lbCxcbiAgICAgIHJlZjogc2VudGluZWxTdGFydCxcbiAgICAgIFwiZGF0YS10ZXN0aWRcIjogXCJzZW50aW5lbFN0YXJ0XCJcbiAgICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgICBvbkZvY3VzXG4gICAgfSksIC8qI19fUFVSRV9fKi9fanN4KFwiZGl2XCIsIHtcbiAgICAgIHRhYkluZGV4OiBvcGVuID8gMCA6IC0xLFxuICAgICAgb25Gb2N1czogaGFuZGxlRm9jdXNTZW50aW5lbCxcbiAgICAgIHJlZjogc2VudGluZWxFbmQsXG4gICAgICBcImRhdGEtdGVzdGlkXCI6IFwic2VudGluZWxFbmRcIlxuICAgIH0pXVxuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvY3VzVHJhcC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZixcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGZvY3VzIHRyYXAgd2lsbCBub3QgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBUaGlzIGFsc28gd29ya3MgY29ycmVjdGx5IHdpdGggYW55IGZvY3VzIHRyYXAgY2hpbGRyZW4gdGhhdCBoYXZlIHRoZSBgZGlzYWJsZUF1dG9Gb2N1c2AgcHJvcC5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIGZvY3VzIHRyYXAgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGZvY3VzIHRyYXAgd2lsbCBub3QgcHJldmVudCBmb2N1cyBmcm9tIGxlYXZpbmcgdGhlIGZvY3VzIHRyYXAgd2hpbGUgb3Blbi5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIGZvY3VzIHRyYXAgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGZvY3VzIHRyYXAgd2lsbCBub3QgcmVzdG9yZSBmb2N1cyB0byBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCBvbmNlXG4gICAqIGZvY3VzIHRyYXAgaXMgaGlkZGVuIG9yIHVubW91bnRlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSZXN0b3JlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiBvcmRlcmVkIHRhYmJhYmxlIG5vZGVzIChpLmUuIGluIHRhYiBvcmRlcikgd2l0aGluIHRoZSByb290LlxuICAgKiBGb3IgaW5zdGFuY2UsIHlvdSBjYW4gcHJvdmlkZSB0aGUgXCJ0YWJiYWJsZVwiIG5wbSBkZXBlbmRlbmN5LlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByb290XG4gICAqL1xuICBnZXRUYWJiYWJsZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgZXh0ZW5kcyB0aGUgYG9wZW5gIHByb3AuXG4gICAqIEl0IGFsbG93cyB0byB0b2dnbGUgdGhlIG9wZW4gc3RhdGUgd2l0aG91dCBoYXZpbmcgdG8gd2FpdCBmb3IgYSByZXJlbmRlciB3aGVuIGNoYW5naW5nIHRoZSBgb3BlbmAgcHJvcC5cbiAgICogVGhpcyBwcm9wIHNob3VsZCBiZSBtZW1vaXplZC5cbiAgICogSXQgY2FuIGJlIHVzZWQgdG8gc3VwcG9ydCBtdWx0aXBsZSBmb2N1cyB0cmFwIG1vdW50ZWQgYXQgdGhlIHNhbWUgdGltZS5cbiAgICogQGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdElzRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICogICByZXR1cm4gdHJ1ZTtcbiAgICogfVxuICAgKi9cbiAgaXNFbmFibGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgZm9jdXMgaXMgbG9ja2VkLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBGb2N1c1RyYXBbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoRm9jdXNUcmFwLnByb3BUeXBlcyk7XG59XG5leHBvcnQgeyBGb2N1c1RyYXAgfTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wLCBIVE1MRWxlbWVudFR5cGUsIHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IGFzIHVzZUVuaGFuY2VkRWZmZWN0LCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3NldFJlZiBhcyBzZXRSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBnZXRDb250YWluZXIoY29udGFpbmVyKSB7XG4gIHJldHVybiB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7XG59XG5cbi8qKlxuICogUG9ydGFscyBwcm92aWRlIGEgZmlyc3QtY2xhc3Mgd2F5IHRvIHJlbmRlciBjaGlsZHJlbiBpbnRvIGEgRE9NIG5vZGVcbiAqIHRoYXQgZXhpc3RzIG91dHNpZGUgdGhlIERPTSBoaWVyYXJjaHkgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbUG9ydGFsXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC1wb3J0YWwvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtQb3J0YWwgQVBJXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC1wb3J0YWwvY29tcG9uZW50cy1hcGkvI3BvcnRhbClcbiAqL1xuY29uc3QgUG9ydGFsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUG9ydGFsKHByb3BzLCBmb3J3YXJkZWRSZWYpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRhaW5lcixcbiAgICBkaXNhYmxlUG9ydGFsID0gZmFsc2VcbiAgfSA9IHByb3BzO1xuICBjb25zdCBbbW91bnROb2RlLCBzZXRNb3VudE5vZGVdID0gUmVhY3QudXNlU3RhdGUobnVsbCk7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ETyB1cHN0cmVhbSBmaXhcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZiggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSA/IGNoaWxkcmVuLnJlZiA6IG51bGwsIGZvcndhcmRlZFJlZik7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWRpc2FibGVQb3J0YWwpIHtcbiAgICAgIHNldE1vdW50Tm9kZShnZXRDb250YWluZXIoY29udGFpbmVyKSB8fCBkb2N1bWVudC5ib2R5KTtcbiAgICB9XG4gIH0sIFtjb250YWluZXIsIGRpc2FibGVQb3J0YWxdKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChtb3VudE5vZGUgJiYgIWRpc2FibGVQb3J0YWwpIHtcbiAgICAgIHNldFJlZihmb3J3YXJkZWRSZWYsIG1vdW50Tm9kZSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBzZXRSZWYoZm9yd2FyZGVkUmVmLCBudWxsKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtmb3J3YXJkZWRSZWYsIG1vdW50Tm9kZSwgZGlzYWJsZVBvcnRhbF0pO1xuICBpZiAoZGlzYWJsZVBvcnRhbCkge1xuICAgIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgICAgY29uc3QgbmV3UHJvcHMgPSB7XG4gICAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgICB9O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIG5ld1Byb3BzKTtcbiAgICB9XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJlYWN0LkZyYWdtZW50LCB7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogbW91bnROb2RlID8gLyojX19QVVJFX18qL1JlYWN0RE9NLmNyZWF0ZVBvcnRhbChjaGlsZHJlbiwgbW91bnROb2RlKSA6IG1vdW50Tm9kZVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUG9ydGFsLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjaGlsZHJlbiB0byByZW5kZXIgaW50byB0aGUgYGNvbnRhaW5lcmAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG9uZS5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgcG9ydGFsIGNoaWxkcmVuIGFwcGVuZGVkIHRvIGl0LlxuICAgKlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIGNhbGxiYWNrLCB3aGljaCBpcyBjYWxsZWQgaW4gYSBSZWFjdCBsYXlvdXQgZWZmZWN0LlxuICAgKiBUaGlzIGxldHMgeW91IHNldCB0aGUgY29udGFpbmVyIGZyb20gYSByZWYsIGFuZCBhbHNvIG1ha2VzIHNlcnZlci1zaWRlIHJlbmRlcmluZyBwb3NzaWJsZS5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLFxuICAvKipcbiAgICogVGhlIGBjaGlsZHJlbmAgd2lsbCBiZSB1bmRlciB0aGUgRE9NIGhpZXJhcmNoeSBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVQb3J0YWw6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIFBvcnRhbFsncHJvcFR5cGVzJyArICcnXSA9IGV4YWN0UHJvcChQb3J0YWwucHJvcFR5cGVzKTtcbn1cbmV4cG9ydCB7IFBvcnRhbCB9OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn0iLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZGlzYWJsZWQ6IGZhbHNlXG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0c1NoYXBlIH0gZnJvbSAnLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmltcG9ydCB7IGZvcmNlUmVmbG93IH0gZnJvbSAnLi91dGlscy9yZWZsb3cnO1xuZXhwb3J0IHZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydCB2YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnQgdmFyIEVOVEVSSU5HID0gJ2VudGVyaW5nJztcbmV4cG9ydCB2YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydCB2YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZXhpdGluZzogIHsgb3BhY2l0eTogMCB9LFxuICogICBleGl0ZWQ6ICB7IG9wYWNpdHk6IDAgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbnZhciBUcmFuc2l0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0OyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG4gIDtcblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCB8fCB0aGlzLnByb3BzLm1vdW50T25FbnRlcikge1xuICAgICAgICAgIHZhciBub2RlID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gdGhpcy5wcm9wcy5ub2RlUmVmLmN1cnJlbnQgOiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9wdWxsLzc0OVxuICAgICAgICAgIC8vIFdpdGggdW5tb3VudE9uRXhpdCBvciBtb3VudE9uRW50ZXIsIHRoZSBlbnRlciBhbmltYXRpb24gc2hvdWxkIGhhcHBlbiBhdCB0aGUgdHJhbnNpdGlvbiBiZXR3ZWVuIGBleGl0ZWRgIGFuZCBgZW50ZXJpbmdgLlxuICAgICAgICAgIC8vIFRvIG1ha2UgdGhlIGFuaW1hdGlvbiBoYXBwZW4sICB3ZSBoYXZlIHRvIHNlcGFyYXRlIGVhY2ggcmVuZGVyaW5nIGFuZCBhdm9pZCBiZWluZyBwcm9jZXNzZWQgYXMgYmF0Y2hlZC5cblxuICAgICAgICAgIGlmIChub2RlKSBmb3JjZVJlZmxvdyhub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBVTk1PVU5URURcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gcGVyZm9ybUVudGVyKG1vdW50aW5nKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZW50ZXIgPSB0aGlzLnByb3BzLmVudGVyO1xuICAgIHZhciBhcHBlYXJpbmcgPSB0aGlzLmNvbnRleHQgPyB0aGlzLmNvbnRleHQuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuXG4gICAgdmFyIF9yZWYyID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gW2FwcGVhcmluZ10gOiBbUmVhY3RET00uZmluZERPTU5vZGUodGhpcyksIGFwcGVhcmluZ10sXG4gICAgICAgIG1heWJlTm9kZSA9IF9yZWYyWzBdLFxuICAgICAgICBtYXliZUFwcGVhcmluZyA9IF9yZWYyWzFdO1xuXG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBlbnRlclRpbWVvdXQgPSBhcHBlYXJpbmcgPyB0aW1lb3V0cy5hcHBlYXIgOiB0aW1lb3V0cy5lbnRlcjsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlciB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobWF5YmVOb2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobWF5YmVOb2RlLCBtYXliZUFwcGVhcmluZyk7XG5cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQoZW50ZXJUaW1lb3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRU5URVJFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBleGl0ID0gdGhpcy5wcm9wcy5leGl0O1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTtcbiAgICB2YXIgbWF5YmVOb2RlID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gdW5kZWZpbmVkIDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQgfHwgY29uZmlnLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobWF5YmVOb2RlKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVYSVRJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMucHJvcHMub25FeGl0aW5nKG1heWJlTm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQodGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB0aGlzLnByb3BzLm5vZGVSZWYuY3VycmVudCA6IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuICAgIHZhciBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyID0gdGltZW91dCA9PSBudWxsICYmICF0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyO1xuXG4gICAgaWYgKCFub2RlIHx8IGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICB2YXIgX3JlZjMgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbdGhpcy5uZXh0Q2FsbGJhY2tdIDogW25vZGUsIHRoaXMubmV4dENhbGxiYWNrXSxcbiAgICAgICAgICBtYXliZU5vZGUgPSBfcmVmM1swXSxcbiAgICAgICAgICBtYXliZU5leHRDYWxsYmFjayA9IF9yZWYzWzFdO1xuXG4gICAgICB0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKG1heWJlTm9kZSwgbWF5YmVOZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgX2luID0gX3RoaXMkcHJvcHMuaW4sXG4gICAgICAgIF9tb3VudE9uRW50ZXIgPSBfdGhpcyRwcm9wcy5tb3VudE9uRW50ZXIsXG4gICAgICAgIF91bm1vdW50T25FeGl0ID0gX3RoaXMkcHJvcHMudW5tb3VudE9uRXhpdCxcbiAgICAgICAgX2FwcGVhciA9IF90aGlzJHByb3BzLmFwcGVhcixcbiAgICAgICAgX2VudGVyID0gX3RoaXMkcHJvcHMuZW50ZXIsXG4gICAgICAgIF9leGl0ID0gX3RoaXMkcHJvcHMuZXhpdCxcbiAgICAgICAgX3RpbWVvdXQgPSBfdGhpcyRwcm9wcy50aW1lb3V0LFxuICAgICAgICBfYWRkRW5kTGlzdGVuZXIgPSBfdGhpcyRwcm9wcy5hZGRFbmRMaXN0ZW5lcixcbiAgICAgICAgX29uRW50ZXIgPSBfdGhpcyRwcm9wcy5vbkVudGVyLFxuICAgICAgICBfb25FbnRlcmluZyA9IF90aGlzJHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgIF9vbkVudGVyZWQgPSBfdGhpcyRwcm9wcy5vbkVudGVyZWQsXG4gICAgICAgIF9vbkV4aXQgPSBfdGhpcyRwcm9wcy5vbkV4aXQsXG4gICAgICAgIF9vbkV4aXRpbmcgPSBfdGhpcyRwcm9wcy5vbkV4aXRpbmcsXG4gICAgICAgIF9vbkV4aXRlZCA9IF90aGlzJHByb3BzLm9uRXhpdGVkLFxuICAgICAgICBfbm9kZVJlZiA9IF90aGlzJHByb3BzLm5vZGVSZWYsXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpblwiLCBcIm1vdW50T25FbnRlclwiLCBcInVubW91bnRPbkV4aXRcIiwgXCJhcHBlYXJcIiwgXCJlbnRlclwiLCBcImV4aXRcIiwgXCJ0aW1lb3V0XCIsIFwiYWRkRW5kTGlzdGVuZXJcIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9uRXhpdGVkXCIsIFwibm9kZVJlZlwiXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnNcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKSA6IFJlYWN0LmNsb25lRWxlbWVudChSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSwgY2hpbGRQcm9wcykpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZSA9IFRyYW5zaXRpb25Hcm91cENvbnRleHQ7XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgUmVhY3QgcmVmZXJlbmNlIHRvIERPTSBlbGVtZW50IHRoYXQgbmVlZCB0byB0cmFuc2l0aW9uOlxuICAgKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTExMjcxMzAvNDY3MTkzMlxuICAgKlxuICAgKiAgIC0gV2hlbiBgbm9kZVJlZmAgcHJvcCBpcyB1c2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZCB0byBjYWxsYmFjayBmdW5jdGlvbnNcbiAgICogICAgICAoZS5nLiBgb25FbnRlcmApIGJlY2F1c2UgdXNlciBhbHJlYWR5IGhhcyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBub2RlLlxuICAgKiAgIC0gV2hlbiBjaGFuZ2luZyBga2V5YCBwcm9wIG9mIGBUcmFuc2l0aW9uYCBpbiBhIGBUcmFuc2l0aW9uR3JvdXBgIGEgbmV3XG4gICAqICAgICBgbm9kZVJlZmAgbmVlZCB0byBiZSBwcm92aWRlZCB0byBgVHJhbnNpdGlvbmAgd2l0aCBjaGFuZ2VkIGBrZXlgIHByb3BcbiAgICogICAgIChzZWVcbiAgICogICAgIFt0ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qc10oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ibG9iLzEzNDM1Zjg5N2IzYWI3MWY2ZTE5ZDcyNGYxNDU1OTZmNTkxMDU4MWMvdGVzdC9DU1NUcmFuc2l0aW9uLXRlc3QuanMjTDM2Mi1MNDM3KSkuXG4gICAqL1xuICBub2RlUmVmOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IHR5cGVvZiBFbGVtZW50ID09PSAndW5kZWZpbmVkJyA/IFByb3BUeXBlcy5hbnkgOiBmdW5jdGlvbiAocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgICAgdmFyIHZhbHVlID0gcHJvcFZhbHVlW2tleV07XG4gICAgICByZXR1cm4gUHJvcFR5cGVzLmluc3RhbmNlT2YodmFsdWUgJiYgJ293bmVyRG9jdW1lbnQnIGluIHZhbHVlID8gdmFsdWUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5FbGVtZW50IDogRWxlbWVudCkocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCk7XG4gICAgfVxuICB9KSxcblxuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGlzXG4gICAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzIChgJ2VudGVyaW5nJ2AsIGAnZW50ZXJlZCdgLFxuICAgKiBgJ2V4aXRpbmcnYCwgYCdleGl0ZWQnYCksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFwcGx5IGNvbnRleHRcbiAgICogc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17MTUwfT5cbiAgICogICB7c3RhdGUgPT4gKFxuICAgKiAgICAgPE15Q29tcG9uZW50IGNsYXNzTmFtZT17YGZhZGUgZmFkZS0ke3N0YXRlfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBkb2VzIG5vdCBwZXJmb3JtIHRoZSBlbnRlciB0cmFuc2l0aW9uIHdoZW5cbiAgICogaXQgZmlyc3QgbW91bnRzLCByZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiBgaW5gLiBJZiB5b3Ugd2FudCB0aGlzXG4gICAqIGJlaGF2aW9yLCBzZXQgYm90aCBgYXBwZWFyYCBhbmQgYGluYCB0byBgdHJ1ZWAuXG4gICAqXG4gICAqID4gKipOb3RlKio6IHRoZXJlIGFyZSBubyBzcGVjaWFsIGFwcGVhciBzdGF0ZXMgbGlrZSBgYXBwZWFyaW5nYC9gYXBwZWFyZWRgLCB0aGlzIHByb3BcbiAgICogPiBvbmx5IGFkZHMgYW4gYWRkaXRpb25hbCBlbnRlciB0cmFuc2l0aW9uLiBIb3dldmVyLCBpbiB0aGVcbiAgICogPiBgPENTU1RyYW5zaXRpb24+YCBjb21wb25lbnQgdGhhdCBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIGRvZXMgcmVzdWx0IGluXG4gICAqID4gYWRkaXRpb25hbCBgLmFwcGVhci0qYCBjbGFzc2VzLCB0aGF0IHdheSB5b3UgY2FuIGNob29zZSB0byBzdHlsZSBpdFxuICAgKiA+IGRpZmZlcmVudGx5LlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zOlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17NTAwfVxuICAgKiBgYGBcbiAgICpcbiAgICogb3IgaW5kaXZpZHVhbGx5OlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogdGltZW91dD17e1xuICAgKiAgYXBwZWFyOiA1MDAsXG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogLSBgYXBwZWFyYCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgb2YgYGVudGVyYFxuICAgKiAtIGBlbnRlcmAgZGVmYXVsdHMgdG8gYDBgXG4gICAqIC0gYGV4aXRgIGRlZmF1bHRzIHRvIGAwYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciwgYXBwZWFyPzogbnVtYmVyIH19XG4gICAqL1xuICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KHByb3BzKSB7XG4gICAgdmFyIHB0ID0gdGltZW91dHNTaGFwZTtcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiBhZGRFbmRMaXN0ZW5lcj17KG5vZGUsIGRvbmUpID0+IHtcbiAgICogICAvLyB1c2UgdGhlIGNzcyB0cmFuc2l0aW9uZW5kIGV2ZW50IHRvIG1hcmsgdGhlIGZpbmlzaCBvZiBhIHRyYW5zaXRpb25cbiAgICogICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBkb25lLCBmYWxzZSk7XG4gICAqIH19XG4gICAqIGBgYFxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbClcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJlbnRlcmVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZXhpdGVkXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9OyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5UcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZSxcbiAgZW50ZXI6IHRydWUsXG4gIGV4aXQ6IHRydWUsXG4gIG9uRW50ZXI6IG5vb3AsXG4gIG9uRW50ZXJpbmc6IG5vb3AsXG4gIG9uRW50ZXJlZDogbm9vcCxcbiAgb25FeGl0OiBub29wLFxuICBvbkV4aXRpbmc6IG5vb3AsXG4gIG9uRXhpdGVkOiBub29wXG59O1xuVHJhbnNpdGlvbi5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IEVYSVRFRDtcblRyYW5zaXRpb24uRU5URVJJTkcgPSBFTlRFUklORztcblRyYW5zaXRpb24uRU5URVJFRCA9IEVOVEVSRUQ7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSBFWElUSU5HO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbjsiLCJleHBvcnQgdmFyIGZvcmNlUmVmbG93ID0gZnVuY3Rpb24gZm9yY2VSZWZsb3cobm9kZSkge1xuICByZXR1cm4gbm9kZS5zY3JvbGxUb3A7XG59OyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlVGhlbWUgYXMgdXNlVGhlbWVTeXN0ZW0gfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmltcG9ydCBUSEVNRV9JRCBmcm9tICcuL2lkZW50aWZpZXInO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWVTeXN0ZW0oZGVmYXVsdFRoZW1lKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHRoZW1lKTtcbiAgfVxuICByZXR1cm4gdGhlbWVbVEhFTUVfSURdIHx8IHRoZW1lO1xufSIsImV4cG9ydCBjb25zdCByZWZsb3cgPSBub2RlID0+IG5vZGUuc2Nyb2xsVG9wO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25Qcm9wcyhwcm9wcywgb3B0aW9ucykge1xuICB2YXIgX3N0eWxlJHRyYW5zaXRpb25EdXJhLCBfc3R5bGUkdHJhbnNpdGlvblRpbWk7XG4gIGNvbnN0IHtcbiAgICB0aW1lb3V0LFxuICAgIGVhc2luZyxcbiAgICBzdHlsZSA9IHt9XG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIHtcbiAgICBkdXJhdGlvbjogKF9zdHlsZSR0cmFuc2l0aW9uRHVyYSA9IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbikgIT0gbnVsbCA/IF9zdHlsZSR0cmFuc2l0aW9uRHVyYSA6IHR5cGVvZiB0aW1lb3V0ID09PSAnbnVtYmVyJyA/IHRpbWVvdXQgOiB0aW1lb3V0W29wdGlvbnMubW9kZV0gfHwgMCxcbiAgICBlYXNpbmc6IChfc3R5bGUkdHJhbnNpdGlvblRpbWkgPSBzdHlsZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24pICE9IG51bGwgPyBfc3R5bGUkdHJhbnNpdGlvblRpbWkgOiB0eXBlb2YgZWFzaW5nID09PSAnb2JqZWN0JyA/IGVhc2luZ1tvcHRpb25zLm1vZGVdIDogZWFzaW5nLFxuICAgIGRlbGF5OiBzdHlsZS50cmFuc2l0aW9uRGVsYXlcbiAgfTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhZGRFbmRMaXN0ZW5lclwiLCBcImFwcGVhclwiLCBcImNoaWxkcmVuXCIsIFwiZWFzaW5nXCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwic3R5bGVcIiwgXCJ0aW1lb3V0XCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IHJlZmxvdywgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3Qgc3R5bGVzID0ge1xuICBlbnRlcmluZzoge1xuICAgIG9wYWNpdHk6IDFcbiAgfSxcbiAgZW50ZXJlZDoge1xuICAgIG9wYWNpdHk6IDFcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgRmFkZSB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlIFtNb2RhbF0oL21hdGVyaWFsLXVpL3JlYWN0LW1vZGFsLykgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuY29uc3QgRmFkZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZhZGUocHJvcHMsIHJlZikge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IGRlZmF1bHRUaW1lb3V0ID0ge1xuICAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuXG4gIH07XG4gIGNvbnN0IHtcbiAgICAgIGFkZEVuZExpc3RlbmVyLFxuICAgICAgYXBwZWFyID0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZWFzaW5nLFxuICAgICAgaW46IGluUHJvcCxcbiAgICAgIG9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nLFxuICAgICAgb25FeGl0LFxuICAgICAgb25FeGl0ZWQsXG4gICAgICBvbkV4aXRpbmcsXG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQgPSBkZWZhdWx0VGltZW91dCxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gVHJhbnNpdGlvblxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID0gdHJ1ZTtcbiAgY29uc3Qgbm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihub2RlUmVmLCBjaGlsZHJlbi5yZWYsIHJlZik7XG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sgPSBjYWxsYmFjayA9PiBtYXliZUlzQXBwZWFyaW5nID0+IHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBub2RlUmVmLmN1cnJlbnQ7XG5cbiAgICAgIC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuICAgICAgaWYgKG1heWJlSXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG5vZGUsIG1heWJlSXNBcHBlYXJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJpbmcpO1xuICBjb25zdCBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIGNvbnN0IHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFbnRlcmVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyZWQpO1xuICBjb25zdCBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICBjb25zdCBoYW5kbGVFeGl0ID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhub2RlID0+IHtcbiAgICBjb25zdCB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0LFxuICAgICAgZWFzaW5nXG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFeGl0ZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRXhpdGVkKTtcbiAgY29uc3QgaGFuZGxlQWRkRW5kTGlzdGVuZXIgPSBuZXh0ID0+IHtcbiAgICBpZiAoYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIC8vIE9sZCBjYWxsIHNpZ25hdHVyZSBiZWZvcmUgYHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBgIGltcGxlbWVudGVkIGBub2RlUmVmYFxuICAgICAgYWRkRW5kTGlzdGVuZXIobm9kZVJlZi5jdXJyZW50LCBuZXh0KTtcbiAgICB9XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgYXBwZWFyOiBhcHBlYXIsXG4gICAgaW46IGluUHJvcCxcbiAgICBub2RlUmVmOiBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gbm9kZVJlZiA6IHVuZGVmaW5lZCxcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkVudGVyZWQ6IGhhbmRsZUVudGVyZWQsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIGFkZEVuZExpc3RlbmVyOiBoYW5kbGVBZGRFbmRMaXN0ZW5lcixcbiAgICB0aW1lb3V0OiB0aW1lb3V0XG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IChzdGF0ZSwgY2hpbGRQcm9wcykgPT4ge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIHZpc2liaWxpdHk6IHN0YXRlID09PSAnZXhpdGVkJyAmJiAhaW5Qcm9wID8gJ2hpZGRlbicgOiB1bmRlZmluZWRcbiAgICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgICB9XG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmFkZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmcgRE9NXG4gICAqIG5vZGUgYW5kIGEgZG9uZSBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gTm90ZTogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlbiBpdCBmaXJzdCBtb3VudHMgaWYgYGluYCBpcyBhbHNvIGB0cnVlYC5cbiAgICogU2V0IHRoaXMgdG8gYGZhbHNlYCB0byBkaXNhYmxlIHRoaXMgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZi5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIHRyYW5zaXRpb24gdGltaW5nIGZ1bmN0aW9uLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgZWFzaW5nIG9yIGEgb2JqZWN0IGNvbnRhaW5pbmcgZW50ZXIgYW5kIGV4aXQgdmFsdWVzLlxuICAgKi9cbiAgZWFzaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICogICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuLFxuICAgKiB9XG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGYWRlOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFja2Ryb3BVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUJhY2tkcm9wJywgc2xvdCk7XG59XG5jb25zdCBiYWNrZHJvcENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCYWNrZHJvcCcsIFsncm9vdCcsICdpbnZpc2libGUnXSk7XG5leHBvcnQgZGVmYXVsdCBiYWNrZHJvcENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiaW52aXNpYmxlXCIsIFwib3BlblwiLCBcInNsb3RQcm9wc1wiLCBcInNsb3RzXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgRmFkZSBmcm9tICcuLi9GYWRlJztcbmltcG9ydCB7IGdldEJhY2tkcm9wVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9iYWNrZHJvcENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGludmlzaWJsZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgaW52aXNpYmxlICYmICdpbnZpc2libGUnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEJhY2tkcm9wVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBCYWNrZHJvcFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUJhY2tkcm9wJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuaW52aXNpYmxlICYmIHN0eWxlcy5pbnZpc2libGVdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHBvc2l0aW9uOiAnZml4ZWQnLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjUpJyxcbiAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCdcbn0sIG93bmVyU3RhdGUuaW52aXNpYmxlICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG59KSk7XG5jb25zdCBCYWNrZHJvcCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJhY2tkcm9wKGluUHJvcHMsIHJlZikge1xuICB2YXIgX3Nsb3RQcm9wcyRyb290LCBfcmVmLCBfc2xvdHMkcm9vdDtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQmFja2Ryb3AnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgICBpbnZpc2libGUgPSBmYWxzZSxcbiAgICAgIG9wZW4sXG4gICAgICBzbG90UHJvcHMgPSB7fSxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gRmFkZSxcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvblxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGludmlzaWJsZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCByb290U2xvdFByb3BzID0gKF9zbG90UHJvcHMkcm9vdCA9IHNsb3RQcm9wcy5yb290KSAhPSBudWxsID8gX3Nsb3RQcm9wcyRyb290IDogY29tcG9uZW50c1Byb3BzLnJvb3Q7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgaW46IG9wZW4sXG4gICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KEJhY2tkcm9wUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlXG4gICAgfSwgcm9vdFNsb3RQcm9wcywge1xuICAgICAgYXM6IChfcmVmID0gKF9zbG90cyRyb290ID0gc2xvdHMucm9vdCkgIT0gbnVsbCA/IF9zbG90cyRyb290IDogY29tcG9uZW50cy5Sb290KSAhPSBudWxsID8gX3JlZiA6IGNvbXBvbmVudCxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgcm9vdFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogcm9vdFNsb3RQcm9wcy5jbGFzc05hbWUpLFxuICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIHJvb3RTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHJvb3RTbG90UHJvcHMub3duZXJTdGF0ZSksXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCYWNrZHJvcC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RzYCBwcm9wIGluc3RlYWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdFByb3BzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RQcm9wc2AgcHJvcCBpbnN0ZWFkLCBhcyBgY29tcG9uZW50c1Byb3BzYCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgaW52aXNpYmxlLlxuICAgKiBJdCBjYW4gYmUgdXNlZCB3aGVuIHJlbmRlcmluZyBhIHBvcG92ZXIgb3IgYSBjdXN0b20gc2VsZWN0IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGludmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzUHJvcHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgKiBbRm9sbG93IHRoaXMgZ3VpZGVdKC9tYXRlcmlhbC11aS90cmFuc2l0aW9ucy8jdHJhbnNpdGlvbmNvbXBvbmVudC1wcm9wKSB0byBsZWFybiBtb3JlIGFib3V0IHRoZSByZXF1aXJlbWVudHMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBGYWRlXG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQmFja2Ryb3A7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2RhbFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTW9kYWwnLCBzbG90KTtcbn1cbmNvbnN0IG1vZGFsQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aU1vZGFsJywgWydyb290JywgJ2hpZGRlbicsICdiYWNrZHJvcCddKTtcbmV4cG9ydCBkZWZhdWx0IG1vZGFsQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJCYWNrZHJvcENvbXBvbmVudFwiLCBcIkJhY2tkcm9wUHJvcHNcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xvc2VBZnRlclRyYW5zaXRpb25cIiwgXCJjaGlsZHJlblwiLCBcImNvbnRhaW5lclwiLCBcImNvbXBvbmVudFwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJkaXNhYmxlQXV0b0ZvY3VzXCIsIFwiZGlzYWJsZUVuZm9yY2VGb2N1c1wiLCBcImRpc2FibGVFc2NhcGVLZXlEb3duXCIsIFwiZGlzYWJsZVBvcnRhbFwiLCBcImRpc2FibGVSZXN0b3JlRm9jdXNcIiwgXCJkaXNhYmxlU2Nyb2xsTG9ja1wiLCBcImhpZGVCYWNrZHJvcFwiLCBcImtlZXBNb3VudGVkXCIsIFwib25CYWNrZHJvcENsaWNrXCIsIFwib25DbG9zZVwiLCBcIm9uVHJhbnNpdGlvbkVudGVyXCIsIFwib25UcmFuc2l0aW9uRXhpdGVkXCIsIFwib3BlblwiLCBcInNsb3RQcm9wc1wiLCBcInNsb3RzXCIsIFwidGhlbWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmLCBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVzZVNsb3RQcm9wcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyB1bnN0YWJsZV91c2VNb2RhbCBhcyB1c2VNb2RhbCB9IGZyb20gJ0BtdWkvYmFzZS91bnN0YWJsZV91c2VNb2RhbCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgRm9jdXNUcmFwIGZyb20gJy4uL1Vuc3RhYmxlX1RyYXBGb2N1cyc7XG5pbXBvcnQgUG9ydGFsIGZyb20gJy4uL1BvcnRhbCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IEJhY2tkcm9wIGZyb20gJy4uL0JhY2tkcm9wJztcbmltcG9ydCB7IGdldE1vZGFsVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9tb2RhbENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvcGVuLFxuICAgIGV4aXRlZCxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCAhb3BlbiAmJiBleGl0ZWQgJiYgJ2hpZGRlbiddLFxuICAgIGJhY2tkcm9wOiBbJ2JhY2tkcm9wJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRNb2RhbFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgTW9kYWxSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlNb2RhbCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCAhb3duZXJTdGF0ZS5vcGVuICYmIG93bmVyU3RhdGUuZXhpdGVkICYmIHN0eWxlcy5oaWRkZW5dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgekluZGV4OiAodGhlbWUudmFycyB8fCB0aGVtZSkuekluZGV4Lm1vZGFsLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICB0b3A6IDAsXG4gIGxlZnQ6IDBcbn0sICFvd25lclN0YXRlLm9wZW4gJiYgb3duZXJTdGF0ZS5leGl0ZWQgJiYge1xuICB2aXNpYmlsaXR5OiAnaGlkZGVuJ1xufSkpO1xuY29uc3QgTW9kYWxCYWNrZHJvcCA9IHN0eWxlZChCYWNrZHJvcCwge1xuICBuYW1lOiAnTXVpTW9kYWwnLFxuICBzbG90OiAnQmFja2Ryb3AnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICByZXR1cm4gc3R5bGVzLmJhY2tkcm9wO1xuICB9XG59KSh7XG4gIHpJbmRleDogLTFcbn0pO1xuXG4vKipcbiAqIE1vZGFsIGlzIGEgbG93ZXItbGV2ZWwgY29uc3RydWN0IHRoYXQgaXMgbGV2ZXJhZ2VkIGJ5IHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAtIFtEaWFsb2ddKC9tYXRlcmlhbC11aS9hcGkvZGlhbG9nLylcbiAqIC0gW0RyYXdlcl0oL21hdGVyaWFsLXVpL2FwaS9kcmF3ZXIvKVxuICogLSBbTWVudV0oL21hdGVyaWFsLXVpL2FwaS9tZW51LylcbiAqIC0gW1BvcG92ZXJdKC9tYXRlcmlhbC11aS9hcGkvcG9wb3Zlci8pXG4gKlxuICogSWYgeW91IGFyZSBjcmVhdGluZyBhIG1vZGFsIGRpYWxvZywgeW91IHByb2JhYmx5IHdhbnQgdG8gdXNlIHRoZSBbRGlhbG9nXSgvbWF0ZXJpYWwtdWkvYXBpL2RpYWxvZy8pIGNvbXBvbmVudFxuICogcmF0aGVyIHRoYW4gZGlyZWN0bHkgdXNpbmcgTW9kYWwuXG4gKlxuICogVGhpcyBjb21wb25lbnQgc2hhcmVzIG1hbnkgY29uY2VwdHMgd2l0aCBbcmVhY3Qtb3ZlcmxheXNdKGh0dHBzOi8vcmVhY3QtYm9vdHN0cmFwLmdpdGh1Yi5pby9yZWFjdC1vdmVybGF5cy8jbW9kYWxzKS5cbiAqL1xuY29uc3QgTW9kYWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNb2RhbChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9yZWYsIF9zbG90cyRyb290LCBfcmVmMiwgX3Nsb3RzJGJhY2tkcm9wLCBfc2xvdFByb3BzJHJvb3QsIF9zbG90UHJvcHMkYmFja2Ryb3A7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgbmFtZTogJ011aU1vZGFsJyxcbiAgICBwcm9wczogaW5Qcm9wc1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgQmFja2Ryb3BDb21wb25lbnQgPSBNb2RhbEJhY2tkcm9wLFxuICAgICAgQmFja2Ryb3BQcm9wcyxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICAgIGNvbXBvbmVudHNQcm9wcyA9IHt9LFxuICAgICAgZGlzYWJsZUF1dG9Gb2N1cyA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUVzY2FwZUtleURvd24gPSBmYWxzZSxcbiAgICAgIGRpc2FibGVQb3J0YWwgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVSZXN0b3JlRm9jdXMgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVTY3JvbGxMb2NrID0gZmFsc2UsXG4gICAgICBoaWRlQmFja2Ryb3AgPSBmYWxzZSxcbiAgICAgIGtlZXBNb3VudGVkID0gZmFsc2UsXG4gICAgICBvbkJhY2tkcm9wQ2xpY2ssXG4gICAgICBvcGVuLFxuICAgICAgc2xvdFByb3BzLFxuICAgICAgc2xvdHNcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHByb3BzV2l0aERlZmF1bHRzID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY2xvc2VBZnRlclRyYW5zaXRpb24sXG4gICAgZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICBkaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgIGRpc2FibGVFc2NhcGVLZXlEb3duLFxuICAgIGRpc2FibGVQb3J0YWwsXG4gICAgZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICBkaXNhYmxlU2Nyb2xsTG9jayxcbiAgICBoaWRlQmFja2Ryb3AsXG4gICAga2VlcE1vdW50ZWRcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICBnZXRSb290UHJvcHMsXG4gICAgZ2V0QmFja2Ryb3BQcm9wcyxcbiAgICBnZXRUcmFuc2l0aW9uUHJvcHMsXG4gICAgcG9ydGFsUmVmLFxuICAgIGlzVG9wTW9kYWwsXG4gICAgZXhpdGVkLFxuICAgIGhhc1RyYW5zaXRpb25cbiAgfSA9IHVzZU1vZGFsKF9leHRlbmRzKHt9LCBwcm9wc1dpdGhEZWZhdWx0cywge1xuICAgIHJvb3RSZWY6IHJlZlxuICB9KSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHNXaXRoRGVmYXVsdHMsIHtcbiAgICBleGl0ZWRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgY2hpbGRQcm9wcyA9IHt9O1xuICBpZiAoY2hpbGRyZW4ucHJvcHMudGFiSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgIGNoaWxkUHJvcHMudGFiSW5kZXggPSAnLTEnO1xuICB9XG5cbiAgLy8gSXQncyBhIFRyYW5zaXRpb24gbGlrZSBjb21wb25lbnRcbiAgaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgICBjb25zdCB7XG4gICAgICBvbkVudGVyLFxuICAgICAgb25FeGl0ZWRcbiAgICB9ID0gZ2V0VHJhbnNpdGlvblByb3BzKCk7XG4gICAgY2hpbGRQcm9wcy5vbkVudGVyID0gb25FbnRlcjtcbiAgICBjaGlsZFByb3BzLm9uRXhpdGVkID0gb25FeGl0ZWQ7XG4gIH1cbiAgY29uc3QgUm9vdFNsb3QgPSAoX3JlZiA9IChfc2xvdHMkcm9vdCA9IHNsb3RzID09IG51bGwgPyB2b2lkIDAgOiBzbG90cy5yb290KSAhPSBudWxsID8gX3Nsb3RzJHJvb3QgOiBjb21wb25lbnRzLlJvb3QpICE9IG51bGwgPyBfcmVmIDogTW9kYWxSb290O1xuICBjb25zdCBCYWNrZHJvcFNsb3QgPSAoX3JlZjIgPSAoX3Nsb3RzJGJhY2tkcm9wID0gc2xvdHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RzLmJhY2tkcm9wKSAhPSBudWxsID8gX3Nsb3RzJGJhY2tkcm9wIDogY29tcG9uZW50cy5CYWNrZHJvcCkgIT0gbnVsbCA/IF9yZWYyIDogQmFja2Ryb3BDb21wb25lbnQ7XG4gIGNvbnN0IHJvb3RTbG90UHJvcHMgPSAoX3Nsb3RQcm9wcyRyb290ID0gc2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBzbG90UHJvcHMucm9vdCkgIT0gbnVsbCA/IF9zbG90UHJvcHMkcm9vdCA6IGNvbXBvbmVudHNQcm9wcy5yb290O1xuICBjb25zdCBiYWNrZHJvcFNsb3RQcm9wcyA9IChfc2xvdFByb3BzJGJhY2tkcm9wID0gc2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBzbG90UHJvcHMuYmFja2Ryb3ApICE9IG51bGwgPyBfc2xvdFByb3BzJGJhY2tkcm9wIDogY29tcG9uZW50c1Byb3BzLmJhY2tkcm9wO1xuICBjb25zdCByb290UHJvcHMgPSB1c2VTbG90UHJvcHMoe1xuICAgIGVsZW1lbnRUeXBlOiBSb290U2xvdCxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogcm9vdFNsb3RQcm9wcyxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzOiBvdGhlcixcbiAgICBnZXRTbG90UHJvcHM6IGdldFJvb3RQcm9wcyxcbiAgICBhZGRpdGlvbmFsUHJvcHM6IHtcbiAgICAgIHJlZixcbiAgICAgIGFzOiBjb21wb25lbnRcbiAgICB9LFxuICAgIG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzTmFtZSwgcm9vdFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogcm9vdFNsb3RQcm9wcy5jbGFzc05hbWUsIGNsYXNzZXMgPT0gbnVsbCA/IHZvaWQgMCA6IGNsYXNzZXMucm9vdCwgIW93bmVyU3RhdGUub3BlbiAmJiBvd25lclN0YXRlLmV4aXRlZCAmJiAoY2xhc3NlcyA9PSBudWxsID8gdm9pZCAwIDogY2xhc3Nlcy5oaWRkZW4pKVxuICB9KTtcbiAgY29uc3QgYmFja2Ryb3BQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IEJhY2tkcm9wU2xvdCxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogYmFja2Ryb3BTbG90UHJvcHMsXG4gICAgYWRkaXRpb25hbFByb3BzOiBCYWNrZHJvcFByb3BzLFxuICAgIGdldFNsb3RQcm9wczogb3RoZXJIYW5kbGVycyA9PiB7XG4gICAgICByZXR1cm4gZ2V0QmFja2Ryb3BQcm9wcyhfZXh0ZW5kcyh7fSwgb3RoZXJIYW5kbGVycywge1xuICAgICAgICBvbkNsaWNrOiBlID0+IHtcbiAgICAgICAgICBpZiAob25CYWNrZHJvcENsaWNrKSB7XG4gICAgICAgICAgICBvbkJhY2tkcm9wQ2xpY2soZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvdGhlckhhbmRsZXJzICE9IG51bGwgJiYgb3RoZXJIYW5kbGVycy5vbkNsaWNrKSB7XG4gICAgICAgICAgICBvdGhlckhhbmRsZXJzLm9uQ2xpY2soZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfSxcbiAgICBjbGFzc05hbWU6IGNsc3goYmFja2Ryb3BTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGJhY2tkcm9wU2xvdFByb3BzLmNsYXNzTmFtZSwgQmFja2Ryb3BQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogQmFja2Ryb3BQcm9wcy5jbGFzc05hbWUsIGNsYXNzZXMgPT0gbnVsbCA/IHZvaWQgMCA6IGNsYXNzZXMuYmFja2Ryb3ApLFxuICAgIG93bmVyU3RhdGVcbiAgfSk7XG4gIGlmICgha2VlcE1vdW50ZWQgJiYgIW9wZW4gJiYgKCFoYXNUcmFuc2l0aW9uIHx8IGV4aXRlZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUG9ydGFsLCB7XG4gICAgcmVmOiBwb3J0YWxSZWYsXG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgZGlzYWJsZVBvcnRhbDogZGlzYWJsZVBvcnRhbCxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3hzKFJvb3RTbG90LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogWyFoaWRlQmFja2Ryb3AgJiYgQmFja2Ryb3BDb21wb25lbnQgPyAvKiNfX1BVUkVfXyovX2pzeChCYWNrZHJvcFNsb3QsIF9leHRlbmRzKHt9LCBiYWNrZHJvcFByb3BzKSkgOiBudWxsLCAvKiNfX1BVUkVfXyovX2pzeChGb2N1c1RyYXAsIHtcbiAgICAgICAgZGlzYWJsZUVuZm9yY2VGb2N1czogZGlzYWJsZUVuZm9yY2VGb2N1cyxcbiAgICAgICAgZGlzYWJsZUF1dG9Gb2N1czogZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICAgICAgZGlzYWJsZVJlc3RvcmVGb2N1czogZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICAgICAgaXNFbmFibGVkOiBpc1RvcE1vZGFsLFxuICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgY2hpbGRQcm9wcylcbiAgICAgIH0pXVxuICAgIH0pKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTW9kYWwucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQSBiYWNrZHJvcCBjb21wb25lbnQuIFRoaXMgcHJvcCBlbmFibGVzIGN1c3RvbSBiYWNrZHJvcCByZW5kZXJpbmcuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgc2xvdHMuYmFja2Ryb3BgIGluc3RlYWQuIFdoaWxlIHRoaXMgcHJvcCBjdXJyZW50bHkgd29ya3MsIGl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICAgKiBVc2UgdGhlIGBzbG90cy5iYWNrZHJvcGAgcHJvcCB0byBtYWtlIHlvdXIgYXBwbGljYXRpb24gcmVhZHkgZm9yIHRoZSBuZXh0IHZlcnNpb24gb2YgTWF0ZXJpYWwgVUkuXG4gICAqIEBkZWZhdWx0IHN0eWxlZChCYWNrZHJvcCwge1xuICAgKiAgIG5hbWU6ICdNdWlNb2RhbCcsXG4gICAqICAgc2xvdDogJ0JhY2tkcm9wJyxcbiAgICogICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICogICAgIHJldHVybiBzdHlsZXMuYmFja2Ryb3A7XG4gICAqICAgfSxcbiAgICogfSkoe1xuICAgKiAgIHpJbmRleDogLTEsXG4gICAqIH0pXG4gICAqL1xuICBCYWNrZHJvcENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BCYWNrZHJvcGBdKC9tYXRlcmlhbC11aS9hcGkvYmFja2Ryb3AvKSBlbGVtZW50LlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYHNsb3RQcm9wcy5iYWNrZHJvcGAgaW5zdGVhZC5cbiAgICovXG4gIEJhY2tkcm9wUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZi5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFdoZW4gc2V0IHRvIHRydWUgdGhlIE1vZGFsIHdhaXRzIHVudGlsIGEgbmVzdGVkIFRyYW5zaXRpb24gaXMgY29tcGxldGVkIGJlZm9yZSBjbG9zaW5nLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgY2xvc2VBZnRlclRyYW5zaXRpb246IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdHNgIHByb3AgaW5zdGVhZC5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgQmFja2Ryb3A6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZXh0cmEgcHJvcHMgZm9yIHRoZSBzbG90IGNvbXBvbmVudHMuXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGV4aXN0aW5nIHByb3BzIG9yIGFkZCBuZXcgb25lcy5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RQcm9wc2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90UHJvcHNgIHByb3AgaW5zdGVhZCwgYXMgYGNvbXBvbmVudHNQcm9wc2Agd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYmFja2Ryb3A6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgcm9vdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgb25lLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgY2FsbGJhY2ssIHdoaWNoIGlzIGNhbGxlZCBpbiBhIFJlYWN0IGxheW91dCBlZmZlY3QuXG4gICAqIFRoaXMgbGV0cyB5b3Ugc2V0IHRoZSBjb250YWluZXIgZnJvbSBhIHJlZiwgYW5kIGFsc28gbWFrZXMgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHBvc3NpYmxlLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHNoaWZ0IGZvY3VzIHRvIGl0c2VsZiB3aGVuIGl0IG9wZW5zLCBhbmRcbiAgICogcmVwbGFjZSBpdCB0byB0aGUgbGFzdCBmb2N1c2VkIGVsZW1lbnQgd2hlbiBpdCBjbG9zZXMuXG4gICAqIFRoaXMgYWxzbyB3b3JrcyBjb3JyZWN0bHkgd2l0aCBhbnkgbW9kYWwgY2hpbGRyZW4gdGhhdCBoYXZlIHRoZSBgZGlzYWJsZUF1dG9Gb2N1c2AgcHJvcC5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIG1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgbW9kYWwgd2hpbGUgb3Blbi5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIG1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGhpdHRpbmcgZXNjYXBlIHdpbGwgbm90IGZpcmUgdGhlIGBvbkNsb3NlYCBjYWxsYmFjay5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVFc2NhcGVLZXlEb3duOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBgY2hpbGRyZW5gIHdpbGwgYmUgdW5kZXIgdGhlIERPTSBoaWVyYXJjaHkgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBtb2RhbCBpcyBoaWRkZW4gb3IgdW5tb3VudGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVJlc3RvcmVGb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBzY3JvbGwgbG9jayBiZWhhdmlvci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVTY3JvbGxMb2NrOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG5vdCByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBbHdheXMga2VlcCB0aGUgY2hpbGRyZW4gaW4gdGhlIERPTS5cbiAgICogVGhpcyBwcm9wIGNhbiBiZSB1c2VmdWwgaW4gU0VPIHNpdHVhdGlvbiBvclxuICAgKiB3aGVuIHlvdSB3YW50IHRvIG1heGltaXplIHRoZSByZXNwb25zaXZlbmVzcyBvZiB0aGUgTW9kYWwuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBrZWVwTW91bnRlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBiYWNrZHJvcCBpcyBjbGlja2VkLlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGBvbkNsb3NlYCBwcm9wIHdpdGggdGhlIGByZWFzb25gIGFyZ3VtZW50IHRvIGhhbmRsZSB0aGUgYGJhY2tkcm9wQ2xpY2tgIGV2ZW50cy5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBUaGUgYHJlYXNvbmAgcGFyYW1ldGVyIGNhbiBvcHRpb25hbGx5IGJlIHVzZWQgdG8gY29udHJvbCB0aGUgcmVzcG9uc2UgdG8gYG9uQ2xvc2VgLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gQ2FuIGJlOiBgXCJlc2NhcGVLZXlEb3duXCJgLCBgXCJiYWNrZHJvcENsaWNrXCJgLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIGEgdHJhbnNpdGlvbiBlbnRlcnMuXG4gICAqL1xuICBvblRyYW5zaXRpb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIGEgdHJhbnNpdGlvbiBoYXMgZXhpdGVkLlxuICAgKi9cbiAgb25UcmFuc2l0aW9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgTW9kYWwuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYmFja2Ryb3A6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgcm9vdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIE1vZGFsLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYmFja2Ryb3A6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICByb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBNb2RhbDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhZGRFbmRMaXN0ZW5lclwiLCBcImFwcGVhclwiLCBcImNoaWxkcmVuXCIsIFwiY29udGFpbmVyXCIsIFwiZGlyZWN0aW9uXCIsIFwiZWFzaW5nXCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwic3R5bGVcIiwgXCJ0aW1lb3V0XCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmLCBIVE1MRWxlbWVudFR5cGUsIGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnLi4vdXRpbHMvZGVib3VuY2UnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IHJlZmxvdywgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHsgb3duZXJXaW5kb3cgfSBmcm9tICcuLi91dGlscyc7XG5cbi8vIFRyYW5zbGF0ZSB0aGUgbm9kZSBzbyBpdCBjYW4ndCBiZSBzZWVuIG9uIHRoZSBzY3JlZW4uXG4vLyBMYXRlciwgd2UncmUgZ29pbmcgdG8gdHJhbnNsYXRlIHRoZSBub2RlIGJhY2sgdG8gaXRzIG9yaWdpbmFsIGxvY2F0aW9uIHdpdGggYG5vbmVgLlxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgbm9kZSwgcmVzb2x2ZWRDb250YWluZXIpIHtcbiAgY29uc3QgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGNvbnRhaW5lclJlY3QgPSByZXNvbHZlZENvbnRhaW5lciAmJiByZXNvbHZlZENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3cobm9kZSk7XG4gIGxldCB0cmFuc2Zvcm07XG4gIGlmIChub2RlLmZha2VUcmFuc2Zvcm0pIHtcbiAgICB0cmFuc2Zvcm0gPSBub2RlLmZha2VUcmFuc2Zvcm07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGNvbnRhaW5lcldpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIHRyYW5zZm9ybSA9IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLXdlYmtpdC10cmFuc2Zvcm0nKSB8fCBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpO1xuICB9XG4gIGxldCBvZmZzZXRYID0gMDtcbiAgbGV0IG9mZnNldFkgPSAwO1xuICBpZiAodHJhbnNmb3JtICYmIHRyYW5zZm9ybSAhPT0gJ25vbmUnICYmIHR5cGVvZiB0cmFuc2Zvcm0gPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtVmFsdWVzID0gdHJhbnNmb3JtLnNwbGl0KCcoJylbMV0uc3BsaXQoJyknKVswXS5zcGxpdCgnLCcpO1xuICAgIG9mZnNldFggPSBwYXJzZUludCh0cmFuc2Zvcm1WYWx1ZXNbNF0sIDEwKTtcbiAgICBvZmZzZXRZID0gcGFyc2VJbnQodHJhbnNmb3JtVmFsdWVzWzVdLCAxMCk7XG4gIH1cbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgaWYgKGNvbnRhaW5lclJlY3QpIHtcbiAgICAgIHJldHVybiBgdHJhbnNsYXRlWCgke2NvbnRhaW5lclJlY3QucmlnaHQgKyBvZmZzZXRYIC0gcmVjdC5sZWZ0fXB4KWA7XG4gICAgfVxuICAgIHJldHVybiBgdHJhbnNsYXRlWCgke2NvbnRhaW5lcldpbmRvdy5pbm5lcldpZHRoICsgb2Zmc2V0WCAtIHJlY3QubGVmdH1weClgO1xuICB9XG4gIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICBpZiAoY29udGFpbmVyUmVjdCkge1xuICAgICAgcmV0dXJuIGB0cmFuc2xhdGVYKC0ke3JlY3QucmlnaHQgLSBjb250YWluZXJSZWN0LmxlZnQgLSBvZmZzZXRYfXB4KWA7XG4gICAgfVxuICAgIHJldHVybiBgdHJhbnNsYXRlWCgtJHtyZWN0LmxlZnQgKyByZWN0LndpZHRoIC0gb2Zmc2V0WH1weClgO1xuICB9XG4gIGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcbiAgICBpZiAoY29udGFpbmVyUmVjdCkge1xuICAgICAgcmV0dXJuIGB0cmFuc2xhdGVZKCR7Y29udGFpbmVyUmVjdC5ib3R0b20gKyBvZmZzZXRZIC0gcmVjdC50b3B9cHgpYDtcbiAgICB9XG4gICAgcmV0dXJuIGB0cmFuc2xhdGVZKCR7Y29udGFpbmVyV2luZG93LmlubmVySGVpZ2h0ICsgb2Zmc2V0WSAtIHJlY3QudG9wfXB4KWA7XG4gIH1cblxuICAvLyBkaXJlY3Rpb24gPT09ICdkb3duJ1xuICBpZiAoY29udGFpbmVyUmVjdCkge1xuICAgIHJldHVybiBgdHJhbnNsYXRlWSgtJHtyZWN0LnRvcCAtIGNvbnRhaW5lclJlY3QudG9wICsgcmVjdC5oZWlnaHQgLSBvZmZzZXRZfXB4KWA7XG4gIH1cbiAgcmV0dXJuIGB0cmFuc2xhdGVZKC0ke3JlY3QudG9wICsgcmVjdC5oZWlnaHQgLSBvZmZzZXRZfXB4KWA7XG59XG5mdW5jdGlvbiByZXNvbHZlQ29udGFpbmVyKGNvbnRhaW5lclByb3BQcm9wKSB7XG4gIHJldHVybiB0eXBlb2YgY29udGFpbmVyUHJvcFByb3AgPT09ICdmdW5jdGlvbicgPyBjb250YWluZXJQcm9wUHJvcCgpIDogY29udGFpbmVyUHJvcFByb3A7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0VHJhbnNsYXRlVmFsdWUoZGlyZWN0aW9uLCBub2RlLCBjb250YWluZXJQcm9wKSB7XG4gIGNvbnN0IHJlc29sdmVkQ29udGFpbmVyID0gcmVzb2x2ZUNvbnRhaW5lcihjb250YWluZXJQcm9wKTtcbiAgY29uc3QgdHJhbnNmb3JtID0gZ2V0VHJhbnNsYXRlVmFsdWUoZGlyZWN0aW9uLCBub2RlLCByZXNvbHZlZENvbnRhaW5lcik7XG4gIGlmICh0cmFuc2Zvcm0pIHtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxufVxuXG4vKipcbiAqIFRoZSBTbGlkZSB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlIFtEcmF3ZXJdKC9tYXRlcmlhbC11aS9yZWFjdC1kcmF3ZXIvKSBjb21wb25lbnQuXG4gKiBJdCB1c2VzIFtyZWFjdC10cmFuc2l0aW9uLWdyb3VwXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwKSBpbnRlcm5hbGx5LlxuICovXG5jb25zdCBTbGlkZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNsaWRlKHByb3BzLCByZWYpIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBkZWZhdWx0RWFzaW5nID0ge1xuICAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dCxcbiAgICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuc2hhcnBcbiAgfTtcbiAgY29uc3QgZGVmYXVsdFRpbWVvdXQgPSB7XG4gICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfTtcbiAgY29uc3Qge1xuICAgICAgYWRkRW5kTGlzdGVuZXIsXG4gICAgICBhcHBlYXIgPSB0cnVlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lclByb3AsXG4gICAgICBkaXJlY3Rpb24gPSAnZG93bicsXG4gICAgICBlYXNpbmc6IGVhc2luZ1Byb3AgPSBkZWZhdWx0RWFzaW5nLFxuICAgICAgaW46IGluUHJvcCxcbiAgICAgIG9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nLFxuICAgICAgb25FeGl0LFxuICAgICAgb25FeGl0ZWQsXG4gICAgICBvbkV4aXRpbmcsXG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQgPSBkZWZhdWx0VGltZW91dCxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gVHJhbnNpdGlvblxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBjaGlsZHJlblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIGNoaWxkcmVuUmVmLCByZWYpO1xuICBjb25zdCBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrID0gY2FsbGJhY2sgPT4gaXNBcHBlYXJpbmcgPT4ge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgLy8gb25FbnRlclh4eCBhbmQgb25FeGl0WHh4IGNhbGxiYWNrcyBoYXZlIGEgZGlmZmVyZW50IGFyZ3VtZW50cy5sZW5ndGggdmFsdWUuXG4gICAgICBpZiAoaXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjYWxsYmFjayhjaGlsZHJlblJlZi5jdXJyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKGNoaWxkcmVuUmVmLmN1cnJlbnQsIGlzQXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUVudGVyID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjaygobm9kZSwgaXNBcHBlYXJpbmcpID0+IHtcbiAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUsIGNvbnRhaW5lclByb3ApO1xuICAgIHJlZmxvdyhub2RlKTtcbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKChub2RlLCBpc0FwcGVhcmluZykgPT4ge1xuICAgIGNvbnN0IHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICB0aW1lb3V0LFxuICAgICAgc3R5bGUsXG4gICAgICBlYXNpbmc6IGVhc2luZ1Byb3BcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCctd2Via2l0LXRyYW5zZm9ybScsIF9leHRlbmRzKHt9LCB0cmFuc2l0aW9uUHJvcHMpKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIF9leHRlbmRzKHt9LCB0cmFuc2l0aW9uUHJvcHMpKTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdub25lJztcbiAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9ICdub25lJztcbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRW50ZXJlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmVkKTtcbiAgY29uc3QgaGFuZGxlRXhpdGluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0aW5nKTtcbiAgY29uc3QgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgY29uc3QgdHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHRpbWVvdXQsXG4gICAgICBzdHlsZSxcbiAgICAgIGVhc2luZzogZWFzaW5nUHJvcFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdleGl0J1xuICAgIH0pO1xuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnLXdlYmtpdC10cmFuc2Zvcm0nLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUsIGNvbnRhaW5lclByb3ApO1xuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFeGl0ZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIC8vIE5vIG5lZWQgZm9yIHRyYW5zaXRpb25zIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBoaWRkZW5cbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSAnJztcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSAnJztcbiAgICBpZiAob25FeGl0ZWQpIHtcbiAgICAgIG9uRXhpdGVkKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUFkZEVuZExpc3RlbmVyID0gbmV4dCA9PiB7XG4gICAgaWYgKGFkZEVuZExpc3RlbmVyKSB7XG4gICAgICAvLyBPbGQgY2FsbCBzaWduYXR1cmUgYmVmb3JlIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwYCBpbXBsZW1lbnRlZCBgbm9kZVJlZmBcbiAgICAgIGFkZEVuZExpc3RlbmVyKGNoaWxkcmVuUmVmLmN1cnJlbnQsIG5leHQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdXBkYXRlUG9zaXRpb24gPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGNoaWxkcmVuUmVmLmN1cnJlbnQpIHtcbiAgICAgIHNldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgY2hpbGRyZW5SZWYuY3VycmVudCwgY29udGFpbmVyUHJvcCk7XG4gICAgfVxuICB9LCBbZGlyZWN0aW9uLCBjb250YWluZXJQcm9wXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gU2tpcCBjb25maWd1cmF0aW9uIHdoZXJlIHRoZSBwb3NpdGlvbiBpcyBzY3JlZW4gc2l6ZSBpbnZhcmlhbnQuXG4gICAgaWYgKGluUHJvcCB8fCBkaXJlY3Rpb24gPT09ICdkb3duJyB8fCBkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKCgpID0+IHtcbiAgICAgIGlmIChjaGlsZHJlblJlZi5jdXJyZW50KSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgY2hpbGRyZW5SZWYuY3VycmVudCwgY29udGFpbmVyUHJvcCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coY2hpbGRyZW5SZWYuY3VycmVudCk7XG4gICAgY29udGFpbmVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgY29udGFpbmVyV2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgfTtcbiAgfSwgW2RpcmVjdGlvbiwgaW5Qcm9wLCBjb250YWluZXJQcm9wXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpblByb3ApIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gdXBkYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZHJhd2VyIHdoZW4gdGhlIGRpcmVjdGlvbiBjaGFuZ2UgYW5kXG4gICAgICAvLyB3aGVuIGl0J3MgaGlkZGVuLlxuICAgICAgdXBkYXRlUG9zaXRpb24oKTtcbiAgICB9XG4gIH0sIFtpblByb3AsIHVwZGF0ZVBvc2l0aW9uXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgbm9kZVJlZjogY2hpbGRyZW5SZWYsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZyxcbiAgICBhZGRFbmRMaXN0ZW5lcjogaGFuZGxlQWRkRW5kTGlzdGVuZXIsXG4gICAgYXBwZWFyOiBhcHBlYXIsXG4gICAgaW46IGluUHJvcCxcbiAgICB0aW1lb3V0OiB0aW1lb3V0XG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IChzdGF0ZSwgY2hpbGRQcm9wcykgPT4ge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgdmlzaWJpbGl0eTogc3RhdGUgPT09ICdleGl0ZWQnICYmICFpblByb3AgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgICB9LCBzdHlsZSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUpXG4gICAgICB9LCBjaGlsZFByb3BzKSk7XG4gICAgfVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZyBET01cbiAgICogbm9kZSBhbmQgYSBkb25lIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiBOb3RlOiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKi9cbiAgYWRkRW5kTGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogUGVyZm9ybSB0aGUgZW50ZXIgdHJhbnNpdGlvbiB3aGVuIGl0IGZpcnN0IG1vdW50cyBpZiBgaW5gIGlzIGFsc28gYHRydWVgLlxuICAgKiBTZXQgdGhpcyB0byBgZmFsc2VgIHRvIGRpc2FibGUgdGhpcyBiZWhhdmlvci5cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQsIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG9uZS5cbiAgICogSXQncyB1c2VkIHRvIHNldCB0aGUgY29udGFpbmVyIHRoZSBTbGlkZSBpcyB0cmFuc2l0aW9uaW5nIGZyb20uXG4gICAqL1xuICBjb250YWluZXI6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSwgcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5vcGVuKSB7XG4gICAgICBjb25zdCByZXNvbHZlZENvbnRhaW5lciA9IHJlc29sdmVDb250YWluZXIocHJvcHMuY29udGFpbmVyKTtcbiAgICAgIGlmIChyZXNvbHZlZENvbnRhaW5lciAmJiByZXNvbHZlZENvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICBjb25zdCBib3ggPSByZXNvbHZlZENvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBgY29udGFpbmVyYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghcmVzb2x2ZWRDb250YWluZXIgfHwgdHlwZW9mIHJlc29sdmVkQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gJ2Z1bmN0aW9uJyB8fCByZXNvbHZlZENvbnRhaW5lci5jb250ZXh0RWxlbWVudCAhPSBudWxsICYmIHJlc29sdmVkQ29udGFpbmVyLmNvbnRleHRFbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBgY29udGFpbmVyYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnSXQgc2hvdWxkIGJlIGFuIEhUTUwgZWxlbWVudCBpbnN0YW5jZS4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIERpcmVjdGlvbiB0aGUgY2hpbGQgbm9kZSB3aWxsIGVudGVyIGZyb20uXG4gICAqIEBkZWZhdWx0ICdkb3duJ1xuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydkb3duJywgJ2xlZnQnLCAncmlnaHQnLCAndXAnXSksXG4gIC8qKlxuICAgKiBUaGUgdHJhbnNpdGlvbiB0aW1pbmcgZnVuY3Rpb24uXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSBlYXNpbmcgb3IgYSBvYmplY3QgY29udGFpbmluZyBlbnRlciBhbmQgZXhpdCB2YWx1ZXMuXG4gICAqIEBkZWZhdWx0IHtcbiAgICogICBlbnRlcjogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXQsXG4gICAqICAgZXhpdDogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLnNoYXJwLFxuICAgKiB9XG4gICAqL1xuICBlYXNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhpdDogUHJvcFR5cGVzLnN0cmluZ1xuICB9KSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdHJhbnNpdGlvbiBpbi5cbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgKiAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW4sXG4gICAqIH1cbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFNsaWRlOyIsIi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtaW9zL2Jsb2IvYmNhMzYxMDc0MDU1OTRkNWI3YjE2MjY1YTViMGVkNjk4Zjg1YTVlZS9jb21wb25lbnRzL0VsZXZhdGlvbi9zcmMvVUlDb2xvciUyQk1hdGVyaWFsRWxldmF0aW9uLm0jTDYxXG5jb25zdCBnZXRPdmVybGF5QWxwaGEgPSBlbGV2YXRpb24gPT4ge1xuICBsZXQgYWxwaGFWYWx1ZTtcbiAgaWYgKGVsZXZhdGlvbiA8IDEpIHtcbiAgICBhbHBoYVZhbHVlID0gNS4xMTkxNiAqIGVsZXZhdGlvbiAqKiAyO1xuICB9IGVsc2Uge1xuICAgIGFscGhhVmFsdWUgPSA0LjUgKiBNYXRoLmxvZyhlbGV2YXRpb24gKyAxKSArIDI7XG4gIH1cbiAgcmV0dXJuIChhbHBoYVZhbHVlIC8gMTAwKS50b0ZpeGVkKDIpO1xufTtcbmV4cG9ydCBkZWZhdWx0IGdldE92ZXJsYXlBbHBoYTsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcGVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlQYXBlcicsIHNsb3QpO1xufVxuY29uc3QgcGFwZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpUGFwZXInLCBbJ3Jvb3QnLCAncm91bmRlZCcsICdvdXRsaW5lZCcsICdlbGV2YXRpb24nLCAnZWxldmF0aW9uMCcsICdlbGV2YXRpb24xJywgJ2VsZXZhdGlvbjInLCAnZWxldmF0aW9uMycsICdlbGV2YXRpb240JywgJ2VsZXZhdGlvbjUnLCAnZWxldmF0aW9uNicsICdlbGV2YXRpb243JywgJ2VsZXZhdGlvbjgnLCAnZWxldmF0aW9uOScsICdlbGV2YXRpb24xMCcsICdlbGV2YXRpb24xMScsICdlbGV2YXRpb24xMicsICdlbGV2YXRpb24xMycsICdlbGV2YXRpb24xNCcsICdlbGV2YXRpb24xNScsICdlbGV2YXRpb24xNicsICdlbGV2YXRpb24xNycsICdlbGV2YXRpb24xOCcsICdlbGV2YXRpb24xOScsICdlbGV2YXRpb24yMCcsICdlbGV2YXRpb24yMScsICdlbGV2YXRpb24yMicsICdlbGV2YXRpb24yMycsICdlbGV2YXRpb24yNCddKTtcbmV4cG9ydCBkZWZhdWx0IHBhcGVyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJlbGV2YXRpb25cIiwgXCJzcXVhcmVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGludGVnZXJQcm9wVHlwZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgYWxwaGEgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IGdldE92ZXJsYXlBbHBoYSBmcm9tICcuLi9zdHlsZXMvZ2V0T3ZlcmxheUFscGhhJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgZ2V0UGFwZXJVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3BhcGVyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIHNxdWFyZSxcbiAgICBlbGV2YXRpb24sXG4gICAgdmFyaWFudCxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCAhc3F1YXJlICYmICdyb3VuZGVkJywgdmFyaWFudCA9PT0gJ2VsZXZhdGlvbicgJiYgYGVsZXZhdGlvbiR7ZWxldmF0aW9ufWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0UGFwZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFBhcGVyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpUGFwZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sICFvd25lclN0YXRlLnNxdWFyZSAmJiBzdHlsZXMucm91bmRlZCwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZWxldmF0aW9uJyAmJiBzdHlsZXNbYGVsZXZhdGlvbiR7b3duZXJTdGF0ZS5lbGV2YXRpb259YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHZhcnMkb3ZlcmxheXM7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLFxuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3gtc2hhZG93JylcbiAgfSwgIW93bmVyU3RhdGUuc3F1YXJlICYmIHtcbiAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1c1xuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICAgIGJvcmRlcjogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmRpdmlkZXJ9YFxuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdlbGV2YXRpb24nICYmIF9leHRlbmRzKHtcbiAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzW293bmVyU3RhdGUuZWxldmF0aW9uXVxuICB9LCAhdGhlbWUudmFycyAmJiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdkYXJrJyAmJiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiBgbGluZWFyLWdyYWRpZW50KCR7YWxwaGEoJyNmZmYnLCBnZXRPdmVybGF5QWxwaGEob3duZXJTdGF0ZS5lbGV2YXRpb24pKX0sICR7YWxwaGEoJyNmZmYnLCBnZXRPdmVybGF5QWxwaGEob3duZXJTdGF0ZS5lbGV2YXRpb24pKX0pYFxuICB9LCB0aGVtZS52YXJzICYmIHtcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IChfdGhlbWUkdmFycyRvdmVybGF5cyA9IHRoZW1lLnZhcnMub3ZlcmxheXMpID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFycyRvdmVybGF5c1tvd25lclN0YXRlLmVsZXZhdGlvbl1cbiAgfSkpO1xufSk7XG5jb25zdCBQYXBlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBhcGVyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlQYXBlcidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgZWxldmF0aW9uID0gMSxcbiAgICAgIHNxdWFyZSA9IGZhbHNlLFxuICAgICAgdmFyaWFudCA9ICdlbGV2YXRpb24nXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgZWxldmF0aW9uLFxuICAgIHNxdWFyZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICAgIGlmICh0aGVtZS5zaGFkb3dzW2VsZXZhdGlvbl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIGVsZXZhdGlvbiBwcm92aWRlZCA8UGFwZXIgZWxldmF0aW9uPXske2VsZXZhdGlvbn19PiBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSB0aGVtZS5gLCBgUGxlYXNlIG1ha2Ugc3VyZSB0aGF0IFxcYHRoZW1lLnNoYWRvd3NbJHtlbGV2YXRpb259XVxcYCBpcyBkZWZpbmVkLmBdLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFBhcGVyUm9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBhcGVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBTaGFkb3cgZGVwdGgsIGNvcnJlc3BvbmRzIHRvIGBkcGAgaW4gdGhlIHNwZWMuXG4gICAqIEl0IGFjY2VwdHMgdmFsdWVzIGJldHdlZW4gMCBhbmQgMjQgaW5jbHVzaXZlLlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBlbGV2YXRpb246IGNoYWluUHJvcFR5cGVzKGludGVnZXJQcm9wVHlwZSwgcHJvcHMgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGVsZXZhdGlvbixcbiAgICAgIHZhcmlhbnRcbiAgICB9ID0gcHJvcHM7XG4gICAgaWYgKGVsZXZhdGlvbiA+IDAgJiYgdmFyaWFudCA9PT0gJ291dGxpbmVkJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgTVVJOiBDb21iaW5pbmcgXFxgZWxldmF0aW9uPXske2VsZXZhdGlvbn19XFxgIHdpdGggXFxgdmFyaWFudD1cIiR7dmFyaWFudH1cIlxcYCBoYXMgbm8gZWZmZWN0LiBFaXRoZXIgdXNlIFxcYGVsZXZhdGlvbj17MH1cXGAgb3IgdXNlIGEgZGlmZmVyZW50IFxcYHZhcmlhbnRcXGAuYCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcm91bmRlZCBjb3JuZXJzIGFyZSBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNxdWFyZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdlbGV2YXRpb24nXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2VsZXZhdGlvbicsICdvdXRsaW5lZCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUGFwZXI7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXREcmF3ZXJVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aURyYXdlcicsIHNsb3QpO1xufVxuY29uc3QgZHJhd2VyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aURyYXdlcicsIFsncm9vdCcsICdkb2NrZWQnLCAncGFwZXInLCAncGFwZXJBbmNob3JMZWZ0JywgJ3BhcGVyQW5jaG9yUmlnaHQnLCAncGFwZXJBbmNob3JUb3AnLCAncGFwZXJBbmNob3JCb3R0b20nLCAncGFwZXJBbmNob3JEb2NrZWRMZWZ0JywgJ3BhcGVyQW5jaG9yRG9ja2VkUmlnaHQnLCAncGFwZXJBbmNob3JEb2NrZWRUb3AnLCAncGFwZXJBbmNob3JEb2NrZWRCb3R0b20nLCAnbW9kYWwnXSk7XG5leHBvcnQgZGVmYXVsdCBkcmF3ZXJDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIkJhY2tkcm9wUHJvcHNcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJhbmNob3JcIiwgXCJCYWNrZHJvcFByb3BzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJlbGV2YXRpb25cIiwgXCJoaWRlQmFja2Ryb3BcIiwgXCJNb2RhbFByb3BzXCIsIFwib25DbG9zZVwiLCBcIm9wZW5cIiwgXCJQYXBlclByb3BzXCIsIFwiU2xpZGVQcm9wc1wiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgaW50ZWdlclByb3BUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vTW9kYWwnO1xuaW1wb3J0IFNsaWRlIGZyb20gJy4uL1NsaWRlJztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGdldERyYXdlclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vZHJhd2VyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3Qgb3ZlcnJpZGVzUmVzb2x2ZXIgPSAocHJvcHMsIHN0eWxlcykgPT4ge1xuICBjb25zdCB7XG4gICAgb3duZXJTdGF0ZVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiBbc3R5bGVzLnJvb3QsIChvd25lclN0YXRlLnZhcmlhbnQgPT09ICdwZXJtYW5lbnQnIHx8IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3BlcnNpc3RlbnQnKSAmJiBzdHlsZXMuZG9ja2VkLCBzdHlsZXMubW9kYWxdO1xufTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGFuY2hvcixcbiAgICB2YXJpYW50XG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXSxcbiAgICBkb2NrZWQ6IFsodmFyaWFudCA9PT0gJ3Blcm1hbmVudCcgfHwgdmFyaWFudCA9PT0gJ3BlcnNpc3RlbnQnKSAmJiAnZG9ja2VkJ10sXG4gICAgbW9kYWw6IFsnbW9kYWwnXSxcbiAgICBwYXBlcjogWydwYXBlcicsIGBwYXBlckFuY2hvciR7Y2FwaXRhbGl6ZShhbmNob3IpfWAsIHZhcmlhbnQgIT09ICd0ZW1wb3JhcnknICYmIGBwYXBlckFuY2hvckRvY2tlZCR7Y2FwaXRhbGl6ZShhbmNob3IpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0RHJhd2VyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBEcmF3ZXJSb290ID0gc3R5bGVkKE1vZGFsLCB7XG4gIG5hbWU6ICdNdWlEcmF3ZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgekluZGV4OiAodGhlbWUudmFycyB8fCB0aGVtZSkuekluZGV4LmRyYXdlclxufSkpO1xuY29uc3QgRHJhd2VyRG9ja2VkUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcm9vdFNob3VsZEZvcndhcmRQcm9wLFxuICBuYW1lOiAnTXVpRHJhd2VyJyxcbiAgc2xvdDogJ0RvY2tlZCcsXG4gIHNraXBWYXJpYW50c1Jlc29sdmVyOiBmYWxzZSxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKHtcbiAgZmxleDogJzAgMCBhdXRvJ1xufSk7XG5jb25zdCBEcmF3ZXJQYXBlciA9IHN0eWxlZChQYXBlciwge1xuICBuYW1lOiAnTXVpRHJhd2VyJyxcbiAgc2xvdDogJ1BhcGVyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5wYXBlciwgc3R5bGVzW2BwYXBlckFuY2hvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmFuY2hvcil9YF0sIG93bmVyU3RhdGUudmFyaWFudCAhPT0gJ3RlbXBvcmFyeScgJiYgc3R5bGVzW2BwYXBlckFuY2hvckRvY2tlZCR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmFuY2hvcil9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIGZsZXg6ICcxIDAgYXV0bycsXG4gIHpJbmRleDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnpJbmRleC5kcmF3ZXIsXG4gIC8vIEFkZCBpT1MgbW9tZW50dW0gc2Nyb2xsaW5nIGZvciBpT1MgPCAxMy4wXG4gIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnLFxuICAvLyB0ZW1wb3Jhcnkgc3R5bGVcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIHRvcDogMCxcbiAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgLy8gQXQgc29tZSBwb2ludCwgaXQgd291bGQgYmUgYmV0dGVyIHRvIGtlZXAgaXQgZm9yIGtleWJvYXJkIHVzZXJzLlxuICAvLyA6Zm9jdXMtcmluZyBDU1MgcHNldWRvLWNsYXNzIHdpbGwgaGVscC5cbiAgb3V0bGluZTogMFxufSwgb3duZXJTdGF0ZS5hbmNob3IgPT09ICdsZWZ0JyAmJiB7XG4gIGxlZnQ6IDBcbn0sIG93bmVyU3RhdGUuYW5jaG9yID09PSAndG9wJyAmJiB7XG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgcmlnaHQ6IDAsXG4gIGhlaWdodDogJ2F1dG8nLFxuICBtYXhIZWlnaHQ6ICcxMDAlJ1xufSwgb3duZXJTdGF0ZS5hbmNob3IgPT09ICdyaWdodCcgJiYge1xuICByaWdodDogMFxufSwgb3duZXJTdGF0ZS5hbmNob3IgPT09ICdib3R0b20nICYmIHtcbiAgdG9wOiAnYXV0bycsXG4gIGxlZnQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgcmlnaHQ6IDAsXG4gIGhlaWdodDogJ2F1dG8nLFxuICBtYXhIZWlnaHQ6ICcxMDAlJ1xufSwgb3duZXJTdGF0ZS5hbmNob3IgPT09ICdsZWZ0JyAmJiBvd25lclN0YXRlLnZhcmlhbnQgIT09ICd0ZW1wb3JhcnknICYmIHtcbiAgYm9yZGVyUmlnaHQ6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWBcbn0sIG93bmVyU3RhdGUuYW5jaG9yID09PSAndG9wJyAmJiBvd25lclN0YXRlLnZhcmlhbnQgIT09ICd0ZW1wb3JhcnknICYmIHtcbiAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZGl2aWRlcn1gXG59LCBvd25lclN0YXRlLmFuY2hvciA9PT0gJ3JpZ2h0JyAmJiBvd25lclN0YXRlLnZhcmlhbnQgIT09ICd0ZW1wb3JhcnknICYmIHtcbiAgYm9yZGVyTGVmdDogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmRpdmlkZXJ9YFxufSwgb3duZXJTdGF0ZS5hbmNob3IgPT09ICdib3R0b20nICYmIG93bmVyU3RhdGUudmFyaWFudCAhPT0gJ3RlbXBvcmFyeScgJiYge1xuICBib3JkZXJUb3A6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWBcbn0pKTtcbmNvbnN0IG9wcG9zaXRlRGlyZWN0aW9uID0ge1xuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnLFxuICB0b3A6ICdkb3duJyxcbiAgYm90dG9tOiAndXAnXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGlzSG9yaXpvbnRhbChhbmNob3IpIHtcbiAgcmV0dXJuIFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoYW5jaG9yKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0QW5jaG9yKHRoZW1lLCBhbmNob3IpIHtcbiAgcmV0dXJuIHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgJiYgaXNIb3Jpem9udGFsKGFuY2hvcikgPyBvcHBvc2l0ZURpcmVjdGlvblthbmNob3JdIDogYW5jaG9yO1xufVxuXG4vKipcbiAqIFRoZSBwcm9wcyBvZiB0aGUgW01vZGFsXSgvbWF0ZXJpYWwtdWkvYXBpL21vZGFsLykgY29tcG9uZW50IGFyZSBhdmFpbGFibGVcbiAqIHdoZW4gYHZhcmlhbnQ9XCJ0ZW1wb3JhcnlcImAgaXMgc2V0LlxuICovXG5jb25zdCBEcmF3ZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEcmF3ZXIoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aURyYXdlcidcbiAgfSk7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgZGVmYXVsdFRyYW5zaXRpb25EdXJhdGlvbiA9IHtcbiAgICBlbnRlcjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgZXhpdDogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24ubGVhdmluZ1NjcmVlblxuICB9O1xuICBjb25zdCB7XG4gICAgICBhbmNob3I6IGFuY2hvclByb3AgPSAnbGVmdCcsXG4gICAgICBCYWNrZHJvcFByb3BzLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBlbGV2YXRpb24gPSAxNixcbiAgICAgIGhpZGVCYWNrZHJvcCA9IGZhbHNlLFxuICAgICAgTW9kYWxQcm9wczoge1xuICAgICAgICBCYWNrZHJvcFByb3BzOiBCYWNrZHJvcFByb3BzUHJvcFxuICAgICAgfSA9IHt9LFxuICAgICAgb25DbG9zZSxcbiAgICAgIG9wZW4gPSBmYWxzZSxcbiAgICAgIFBhcGVyUHJvcHMgPSB7fSxcbiAgICAgIFNsaWRlUHJvcHMsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IFNsaWRlLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gZGVmYXVsdFRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIHZhcmlhbnQgPSAndGVtcG9yYXJ5J1xuICAgIH0gPSBwcm9wcyxcbiAgICBNb2RhbFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMuTW9kYWxQcm9wcywgX2V4Y2x1ZGVkKSxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQyKTtcblxuICAvLyBMZXQncyBhc3N1bWUgdGhhdCB0aGUgRHJhd2VyIHdpbGwgYWx3YXlzIGJlIHJlbmRlcmVkIG9uIHVzZXIgc3BhY2UuXG4gIC8vIFdlIHVzZSB0aGlzIHN0YXRlIGlzIG9yZGVyIHRvIHNraXAgdGhlIGFwcGVhciB0cmFuc2l0aW9uIGR1cmluZyB0aGVcbiAgLy8gaW5pdGlhbCBtb3VudCBvZiB0aGUgY29tcG9uZW50LlxuICBjb25zdCBtb3VudGVkID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBtb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICB9LCBbXSk7XG4gIGNvbnN0IGFuY2hvckludmFyaWFudCA9IGdldEFuY2hvcih0aGVtZSwgYW5jaG9yUHJvcCk7XG4gIGNvbnN0IGFuY2hvciA9IGFuY2hvclByb3A7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhbmNob3IsXG4gICAgZWxldmF0aW9uLFxuICAgIG9wZW4sXG4gICAgdmFyaWFudFxuICB9LCBvdGhlcik7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgZHJhd2VyID0gLyojX19QVVJFX18qL19qc3goRHJhd2VyUGFwZXIsIF9leHRlbmRzKHtcbiAgICBlbGV2YXRpb246IHZhcmlhbnQgPT09ICd0ZW1wb3JhcnknID8gZWxldmF0aW9uIDogMCxcbiAgICBzcXVhcmU6IHRydWVcbiAgfSwgUGFwZXJQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnBhcGVyLCBQYXBlclByb3BzLmNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSkpO1xuICBpZiAodmFyaWFudCA9PT0gJ3Blcm1hbmVudCcpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goRHJhd2VyRG9ja2VkUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5kb2NrZWQsIGNsYXNzTmFtZSksXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgcmVmOiByZWZcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2hpbGRyZW46IGRyYXdlclxuICAgIH0pKTtcbiAgfVxuICBjb25zdCBzbGlkaW5nRHJhd2VyID0gLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGluOiBvcGVuLFxuICAgIGRpcmVjdGlvbjogb3Bwb3NpdGVEaXJlY3Rpb25bYW5jaG9ySW52YXJpYW50XSxcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgYXBwZWFyOiBtb3VudGVkLmN1cnJlbnRcbiAgfSwgU2xpZGVQcm9wcywge1xuICAgIGNoaWxkcmVuOiBkcmF3ZXJcbiAgfSkpO1xuICBpZiAodmFyaWFudCA9PT0gJ3BlcnNpc3RlbnQnKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KERyYXdlckRvY2tlZFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXMuZG9ja2VkLCBjbGFzc05hbWUpLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBzbGlkaW5nRHJhd2VyXG4gICAgfSkpO1xuICB9XG5cbiAgLy8gdmFyaWFudCA9PT0gdGVtcG9yYXJ5XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChEcmF3ZXJSb290LCBfZXh0ZW5kcyh7XG4gICAgQmFja2Ryb3BQcm9wczogX2V4dGVuZHMoe30sIEJhY2tkcm9wUHJvcHMsIEJhY2tkcm9wUHJvcHNQcm9wLCB7XG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb25cbiAgICB9KSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzLm1vZGFsLCBjbGFzc05hbWUpLFxuICAgIG9wZW46IG9wZW4sXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBvbkNsb3NlOiBvbkNsb3NlLFxuICAgIGhpZGVCYWNrZHJvcDogaGlkZUJhY2tkcm9wLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCBNb2RhbFByb3BzLCB7XG4gICAgY2hpbGRyZW46IHNsaWRpbmdEcmF3ZXJcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBEcmF3ZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogU2lkZSBmcm9tIHdoaWNoIHRoZSBkcmF3ZXIgd2lsbCBhcHBlYXIuXG4gICAqIEBkZWZhdWx0ICdsZWZ0J1xuICAgKi9cbiAgYW5jaG9yOiBQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAnbGVmdCcsICdyaWdodCcsICd0b3AnXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBCYWNrZHJvcFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgZWxldmF0aW9uIG9mIHRoZSBkcmF3ZXIuXG4gICAqIEBkZWZhdWx0IDE2XG4gICAqL1xuICBlbGV2YXRpb246IGludGVnZXJQcm9wVHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG5vdCByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGVCYWNrZHJvcDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1vZGFsYF0oL21hdGVyaWFsLXVpL2FwaS9tb2RhbC8pIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBNb2RhbFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVGhlIGByZWFzb25gIHBhcmFtZXRlciBjYW4gb3B0aW9uYWxseSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHJlc3BvbnNlIHRvIGBvbkNsb3NlYC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYFBhcGVyYF0oL21hdGVyaWFsLXVpL2FwaS9wYXBlci8pIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBQYXBlclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BTbGlkZWBdKC9tYXRlcmlhbC11aS9hcGkvc2xpZGUvKSBlbGVtZW50LlxuICAgKi9cbiAgU2xpZGVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgZW50ZXI6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgKiAgIGV4aXQ6IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW4sXG4gICAqIH1cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAndGVtcG9yYXJ5J1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsncGVybWFuZW50JywgJ3BlcnNpc3RlbnQnLCAndGVtcG9yYXJ5J10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgRHJhd2VyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJzeFwiXTtcbmltcG9ydCB7IGlzUGxhaW5PYmplY3QgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBkZWZhdWx0U3hDb25maWcgZnJvbSAnLi9kZWZhdWx0U3hDb25maWcnO1xuY29uc3Qgc3BsaXRQcm9wcyA9IHByb3BzID0+IHtcbiAgdmFyIF9wcm9wcyR0aGVtZSR1bnN0YWJsZSwgX3Byb3BzJHRoZW1lO1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgc3lzdGVtUHJvcHM6IHt9LFxuICAgIG90aGVyUHJvcHM6IHt9XG4gIH07XG4gIGNvbnN0IGNvbmZpZyA9IChfcHJvcHMkdGhlbWUkdW5zdGFibGUgPSBwcm9wcyA9PSBudWxsIHx8IChfcHJvcHMkdGhlbWUgPSBwcm9wcy50aGVtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9wcyR0aGVtZS51bnN0YWJsZV9zeENvbmZpZykgIT0gbnVsbCA/IF9wcm9wcyR0aGVtZSR1bnN0YWJsZSA6IGRlZmF1bHRTeENvbmZpZztcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKGNvbmZpZ1twcm9wXSkge1xuICAgICAgcmVzdWx0LnN5c3RlbVByb3BzW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5vdGhlclByb3BzW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlbmRTeFByb3AocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgICAgc3g6IGluU3hcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIHN5c3RlbVByb3BzLFxuICAgIG90aGVyUHJvcHNcbiAgfSA9IHNwbGl0UHJvcHMob3RoZXIpO1xuICBsZXQgZmluYWxTeDtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5TeCkpIHtcbiAgICBmaW5hbFN4ID0gW3N5c3RlbVByb3BzLCAuLi5pblN4XTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgaW5TeCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZpbmFsU3ggPSAoLi4uYXJncykgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gaW5TeCguLi5hcmdzKTtcbiAgICAgIGlmICghaXNQbGFpbk9iamVjdChyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBzeXN0ZW1Qcm9wcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3lzdGVtUHJvcHMsIHJlc3VsdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBmaW5hbFN4ID0gX2V4dGVuZHMoe30sIHN5c3RlbVByb3BzLCBpblN4KTtcbiAgfVxuICByZXR1cm4gX2V4dGVuZHMoe30sIG90aGVyUHJvcHMsIHtcbiAgICBzeDogZmluYWxTeFxuICB9KTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3gsIHsgZXh0ZW5kU3hQcm9wIH0gZnJvbSAnLi9zdHlsZUZ1bmN0aW9uU3gnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4vdXNlVGhlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJveChvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHRoZW1lSWQsXG4gICAgZGVmYXVsdFRoZW1lLFxuICAgIGRlZmF1bHRDbGFzc05hbWUgPSAnTXVpQm94LXJvb3QnLFxuICAgIGdlbmVyYXRlQ2xhc3NOYW1lXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBCb3hSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gICAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcHJvcCAhPT0gJ3RoZW1lJyAmJiBwcm9wICE9PSAnc3gnICYmIHByb3AgIT09ICdhcydcbiAgfSkoc3R5bGVGdW5jdGlvblN4KTtcbiAgY29uc3QgQm94ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQm94KGluUHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgICBjb25zdCBfZXh0ZW5kU3hQcm9wID0gZXh0ZW5kU3hQcm9wKGluUHJvcHMpLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIGNvbXBvbmVudCA9ICdkaXYnXG4gICAgICB9ID0gX2V4dGVuZFN4UHJvcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX2V4dGVuZFN4UHJvcCwgX2V4Y2x1ZGVkKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQm94Um9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzTmFtZSwgZ2VuZXJhdGVDbGFzc05hbWUgPyBnZW5lcmF0ZUNsYXNzTmFtZShkZWZhdWx0Q2xhc3NOYW1lKSA6IGRlZmF1bHRDbGFzc05hbWUpLFxuICAgICAgdGhlbWU6IHRoZW1lSWQgPyB0aGVtZVt0aGVtZUlkXSB8fCB0aGVtZSA6IHRoZW1lXG4gICAgfSwgb3RoZXIpKTtcbiAgfSk7XG4gIHJldHVybiBCb3g7XG59IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmNvbnN0IGJveENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCb3gnLCBbJ3Jvb3QnXSk7XG5leHBvcnQgZGVmYXVsdCBib3hDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgY3JlYXRlQm94IH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX0NsYXNzTmFtZUdlbmVyYXRvciBhcyBDbGFzc05hbWVHZW5lcmF0b3IgfSBmcm9tICcuLi9jbGFzc05hbWUnO1xuaW1wb3J0IHsgY3JlYXRlVGhlbWUgfSBmcm9tICcuLi9zdHlsZXMnO1xuaW1wb3J0IFRIRU1FX0lEIGZyb20gJy4uL3N0eWxlcy9pZGVudGlmaWVyJztcbmltcG9ydCBib3hDbGFzc2VzIGZyb20gJy4vYm94Q2xhc3Nlcyc7XG5jb25zdCBkZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuY29uc3QgQm94ID0gY3JlYXRlQm94KHtcbiAgdGhlbWVJZDogVEhFTUVfSUQsXG4gIGRlZmF1bHRUaGVtZSxcbiAgZGVmYXVsdENsYXNzTmFtZTogYm94Q2xhc3Nlcy5yb290LFxuICBnZW5lcmF0ZUNsYXNzTmFtZTogQ2xhc3NOYW1lR2VuZXJhdG9yLmdlbmVyYXRlXG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJveC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJveDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFwcEJhclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQXBwQmFyJywgc2xvdCk7XG59XG5jb25zdCBhcHBCYXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQXBwQmFyJywgWydyb290JywgJ3Bvc2l0aW9uRml4ZWQnLCAncG9zaXRpb25BYnNvbHV0ZScsICdwb3NpdGlvblN0aWNreScsICdwb3NpdGlvblN0YXRpYycsICdwb3NpdGlvblJlbGF0aXZlJywgJ2NvbG9yRGVmYXVsdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JJbmhlcml0JywgJ2NvbG9yVHJhbnNwYXJlbnQnLCAnY29sb3JFcnJvcicsICdjb2xvckluZm8nLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9yV2FybmluZyddKTtcbmV4cG9ydCBkZWZhdWx0IGFwcEJhckNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJlbmFibGVDb2xvck9uRGFya1wiLCBcInBvc2l0aW9uXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmltcG9ydCB7IGdldEFwcEJhclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYXBwQmFyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbG9yLFxuICAgIHBvc2l0aW9uLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgYHBvc2l0aW9uJHtjYXBpdGFsaXplKHBvc2l0aW9uKX1gXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEFwcEJhclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuXG4vLyB2YXIyIGlzIHRoZSBmYWxsYmFjay5cbi8vIEV4LiB2YXIxOiAndmFyKC0tYSknLCB2YXIyOiAndmFyKC0tYiknOyByZXR1cm46ICd2YXIoLS1hLCB2YXIoLS1iKSknXG5jb25zdCBqb2luVmFycyA9ICh2YXIxLCB2YXIyKSA9PiB2YXIxID8gYCR7dmFyMSA9PSBudWxsID8gdm9pZCAwIDogdmFyMS5yZXBsYWNlKCcpJywgJycpfSwgJHt2YXIyfSlgIDogdmFyMjtcbmNvbnN0IEFwcEJhclJvb3QgPSBzdHlsZWQoUGFwZXIsIHtcbiAgbmFtZTogJ011aUFwcEJhcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbYHBvc2l0aW9uJHtjYXBpdGFsaXplKG93bmVyU3RhdGUucG9zaXRpb24pfWBdLCBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgYmFja2dyb3VuZENvbG9yRGVmYXVsdCA9IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVsxMDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzkwMF07XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgLy8gUHJldmVudCBwYWRkaW5nIGlzc3VlIHdpdGggdGhlIE1vZGFsIGFuZCBmaXhlZCBwb3NpdGlvbmVkIEFwcEJhci5cbiAgICBmbGV4U2hyaW5rOiAwXG4gIH0sIG93bmVyU3RhdGUucG9zaXRpb24gPT09ICdmaXhlZCcgJiYge1xuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIHpJbmRleDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnpJbmRleC5hcHBCYXIsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6ICdhdXRvJyxcbiAgICByaWdodDogMCxcbiAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgLy8gUHJldmVudCB0aGUgYXBwIGJhciB0byBiZSB2aXNpYmxlIG9uIGVhY2ggcHJpbnRlZCBwYWdlLlxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9XG4gIH0sIG93bmVyU3RhdGUucG9zaXRpb24gPT09ICdhYnNvbHV0ZScgJiYge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHpJbmRleDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnpJbmRleC5hcHBCYXIsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6ICdhdXRvJyxcbiAgICByaWdodDogMFxuICB9LCBvd25lclN0YXRlLnBvc2l0aW9uID09PSAnc3RpY2t5JyAmJiB7XG4gICAgLy8g4pqg77iPIHN0aWNreSBpcyBub3Qgc3VwcG9ydGVkIGJ5IElFMTEuXG4gICAgcG9zaXRpb246ICdzdGlja3knLFxuICAgIHpJbmRleDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnpJbmRleC5hcHBCYXIsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6ICdhdXRvJyxcbiAgICByaWdodDogMFxuICB9LCBvd25lclN0YXRlLnBvc2l0aW9uID09PSAnc3RhdGljJyAmJiB7XG4gICAgcG9zaXRpb246ICdzdGF0aWMnXG4gIH0sIG93bmVyU3RhdGUucG9zaXRpb24gPT09ICdyZWxhdGl2ZScgJiYge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gIH0sICF0aGVtZS52YXJzICYmIF9leHRlbmRzKHt9LCBvd25lclN0YXRlLmNvbG9yID09PSAnZGVmYXVsdCcgJiYge1xuICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yRGVmYXVsdCxcbiAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQoYmFja2dyb3VuZENvbG9yRGVmYXVsdClcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciAmJiBvd25lclN0YXRlLmNvbG9yICE9PSAnZGVmYXVsdCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICd0cmFuc3BhcmVudCcgJiYge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLFxuICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLmNvbnRyYXN0VGV4dFxuICB9LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYge1xuICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgfSwgdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnZGFyaycgJiYgIW93bmVyU3RhdGUuZW5hYmxlQ29sb3JPbkRhcmsgJiYge1xuICAgIGJhY2tncm91bmRDb2xvcjogbnVsbCxcbiAgICBjb2xvcjogbnVsbFxuICB9LCBvd25lclN0YXRlLmNvbG9yID09PSAndHJhbnNwYXJlbnQnICYmIF9leHRlbmRzKHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgY29sb3I6ICdpbmhlcml0J1xuICB9LCB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdkYXJrJyAmJiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiAnbm9uZSdcbiAgfSkpLCB0aGVtZS52YXJzICYmIF9leHRlbmRzKHt9LCBvd25lclN0YXRlLmNvbG9yID09PSAnZGVmYXVsdCcgJiYge1xuICAgICctLUFwcEJhci1iYWNrZ3JvdW5kJzogb3duZXJTdGF0ZS5lbmFibGVDb2xvck9uRGFyayA/IHRoZW1lLnZhcnMucGFsZXR0ZS5BcHBCYXIuZGVmYXVsdEJnIDogam9pblZhcnModGhlbWUudmFycy5wYWxldHRlLkFwcEJhci5kYXJrQmcsIHRoZW1lLnZhcnMucGFsZXR0ZS5BcHBCYXIuZGVmYXVsdEJnKSxcbiAgICAnLS1BcHBCYXItY29sb3InOiBvd25lclN0YXRlLmVuYWJsZUNvbG9yT25EYXJrID8gdGhlbWUudmFycy5wYWxldHRlLnRleHQucHJpbWFyeSA6IGpvaW5WYXJzKHRoZW1lLnZhcnMucGFsZXR0ZS5BcHBCYXIuZGFya0NvbG9yLCB0aGVtZS52YXJzLnBhbGV0dGUudGV4dC5wcmltYXJ5KVxuICB9LCBvd25lclN0YXRlLmNvbG9yICYmICFvd25lclN0YXRlLmNvbG9yLm1hdGNoKC9eKGRlZmF1bHR8aW5oZXJpdHx0cmFuc3BhcmVudCkkLykgJiYge1xuICAgICctLUFwcEJhci1iYWNrZ3JvdW5kJzogb3duZXJTdGF0ZS5lbmFibGVDb2xvck9uRGFyayA/IHRoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluIDogam9pblZhcnModGhlbWUudmFycy5wYWxldHRlLkFwcEJhci5kYXJrQmcsIHRoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluKSxcbiAgICAnLS1BcHBCYXItY29sb3InOiBvd25lclN0YXRlLmVuYWJsZUNvbG9yT25EYXJrID8gdGhlbWUudmFycy5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLmNvbnRyYXN0VGV4dCA6IGpvaW5WYXJzKHRoZW1lLnZhcnMucGFsZXR0ZS5BcHBCYXIuZGFya0NvbG9yLCB0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uY29udHJhc3RUZXh0KVxuICB9LCB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAndmFyKC0tQXBwQmFyLWJhY2tncm91bmQpJyxcbiAgICBjb2xvcjogb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnID8gJ2luaGVyaXQnIDogJ3ZhcigtLUFwcEJhci1jb2xvciknXG4gIH0sIG93bmVyU3RhdGUuY29sb3IgPT09ICd0cmFuc3BhcmVudCcgJiYge1xuICAgIGJhY2tncm91bmRJbWFnZTogJ25vbmUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBjb2xvcjogJ2luaGVyaXQnXG4gIH0pKTtcbn0pO1xuY29uc3QgQXBwQmFyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQXBwQmFyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlBcHBCYXInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdwcmltYXJ5JyxcbiAgICAgIGVuYWJsZUNvbG9yT25EYXJrID0gZmFsc2UsXG4gICAgICBwb3NpdGlvbiA9ICdmaXhlZCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIHBvc2l0aW9uLFxuICAgIGVuYWJsZUNvbG9yT25EYXJrXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChBcHBCYXJSb290LCBfZXh0ZW5kcyh7XG4gICAgc3F1YXJlOiB0cnVlLFxuICAgIGNvbXBvbmVudDogXCJoZWFkZXJcIixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGVsZXZhdGlvbjogNCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHBvc2l0aW9uID09PSAnZml4ZWQnICYmICdtdWktZml4ZWQnKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBBcHBCYXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICd0cmFuc3BhcmVudCcsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGBjb2xvcmAgcHJvcCBpcyBhcHBsaWVkIGluIGRhcmsgbW9kZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGVuYWJsZUNvbG9yT25EYXJrOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbmluZyB0eXBlLiBUaGUgYmVoYXZpb3Igb2YgdGhlIGRpZmZlcmVudCBvcHRpb25zIGlzIGRlc2NyaWJlZFxuICAgKiBbaW4gdGhlIE1ETiB3ZWIgZG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9MZWFybi9DU1MvQ1NTX2xheW91dC9Qb3NpdGlvbmluZykuXG4gICAqIE5vdGU6IGBzdGlja3lgIGlzIG5vdCB1bml2ZXJzYWxseSBzdXBwb3J0ZWQgYW5kIHdpbGwgZmFsbCBiYWNrIHRvIGBzdGF0aWNgIHdoZW4gdW5hdmFpbGFibGUuXG4gICAqIEBkZWZhdWx0ICdmaXhlZCdcbiAgICovXG4gIHBvc2l0aW9uOiBQcm9wVHlwZXMub25lT2YoWydhYnNvbHV0ZScsICdmaXhlZCcsICdyZWxhdGl2ZScsICdzdGF0aWMnLCAnc3RpY2t5J10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQXBwQmFyOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9vbGJhclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVG9vbGJhcicsIHNsb3QpO1xufVxuY29uc3QgdG9vbGJhckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUb29sYmFyJywgWydyb290JywgJ2d1dHRlcnMnLCAncmVndWxhcicsICdkZW5zZSddKTtcbmV4cG9ydCBkZWZhdWx0IHRvb2xiYXJDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRUb29sYmFyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi90b29sYmFyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgdmFyaWFudFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgIWRpc2FibGVHdXR0ZXJzICYmICdndXR0ZXJzJywgdmFyaWFudF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRUb29sYmFyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBUb29sYmFyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpVG9vbGJhcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCAhb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiBzdHlsZXMuZ3V0dGVycywgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xufSwgIW93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYge1xuICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XG4gICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDMpXG4gIH1cbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2RlbnNlJyAmJiB7XG4gIG1pbkhlaWdodDogNDhcbn0pLCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gb3duZXJTdGF0ZS52YXJpYW50ID09PSAncmVndWxhcicgJiYgdGhlbWUubWl4aW5zLnRvb2xiYXIpO1xuY29uc3QgVG9vbGJhciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvb2xiYXIoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVRvb2xiYXInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gZmFsc2UsXG4gICAgICB2YXJpYW50ID0gJ3JlZ3VsYXInXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVG9vbGJhclJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb29sYmFyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBUb29sYmFyIGNoaWxkcmVuLCB1c3VhbGx5IGEgbWl4dHVyZSBvZiBgSWNvbkJ1dHRvbmAsIGBCdXR0b25gIGFuZCBgVHlwb2dyYXBoeWAuXG4gICAqIFRoZSBUb29sYmFyIGlzIGEgZmxleCBjb250YWluZXIsIGFsbG93aW5nIGZsZXggaXRlbSBwcm9wZXJ0aWVzIHRvIGJlIHVzZWQgdG8gbGF5IG91dCB0aGUgY2hpbGRyZW4uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGRpc2FibGVzIGd1dHRlciBwYWRkaW5nLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUd1dHRlcnM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAncmVndWxhcidcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAncmVndWxhciddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVG9vbGJhcjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBMaXN0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIExpc3RDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0xpc3RDb250ZXh0Jztcbn1cbmV4cG9ydCBkZWZhdWx0IExpc3RDb250ZXh0OyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdCcsIHNsb3QpO1xufVxuY29uc3QgbGlzdENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0JywgWydyb290JywgJ3BhZGRpbmcnLCAnZGVuc2UnLCAnc3ViaGVhZGVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgbGlzdENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkZW5zZVwiLCBcImRpc2FibGVQYWRkaW5nXCIsIFwic3ViaGVhZGVyXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuL0xpc3RDb250ZXh0JztcbmltcG9ydCB7IGdldExpc3RVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2xpc3RDbGFzc2VzJztcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlUGFkZGluZyxcbiAgICBkZW5zZSxcbiAgICBzdWJoZWFkZXJcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlUGFkZGluZyAmJiAncGFkZGluZycsIGRlbnNlICYmICdkZW5zZScsIHN1YmhlYWRlciAmJiAnc3ViaGVhZGVyJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRMaXN0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBMaXN0Um9vdCA9IHN0eWxlZCgndWwnLCB7XG4gIG5hbWU6ICdNdWlMaXN0JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsICFvd25lclN0YXRlLmRpc2FibGVQYWRkaW5nICYmIHN0eWxlcy5wYWRkaW5nLCBvd25lclN0YXRlLmRlbnNlICYmIHN0eWxlcy5kZW5zZSwgb3duZXJTdGF0ZS5zdWJoZWFkZXIgJiYgc3R5bGVzLnN1YmhlYWRlcl07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgbGlzdFN0eWxlOiAnbm9uZScsXG4gIG1hcmdpbjogMCxcbiAgcGFkZGluZzogMCxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbn0sICFvd25lclN0YXRlLmRpc2FibGVQYWRkaW5nICYmIHtcbiAgcGFkZGluZ1RvcDogOCxcbiAgcGFkZGluZ0JvdHRvbTogOFxufSwgb3duZXJTdGF0ZS5zdWJoZWFkZXIgJiYge1xuICBwYWRkaW5nVG9wOiAwXG59KSk7XG5jb25zdCBMaXN0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlzdChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTGlzdCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ3VsJyxcbiAgICAgIGRlbnNlID0gZmFsc2UsXG4gICAgICBkaXNhYmxlUGFkZGluZyA9IGZhbHNlLFxuICAgICAgc3ViaGVhZGVyXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgZGVuc2VcbiAgfSksIFtkZW5zZV0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGRlbnNlLFxuICAgIGRpc2FibGVQYWRkaW5nXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeHMoTGlzdFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBbc3ViaGVhZGVyLCBjaGlsZHJlbl1cbiAgICB9KSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3QucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcGFjdCB2ZXJ0aWNhbCBwYWRkaW5nIGRlc2lnbmVkIGZvciBrZXlib2FyZCBhbmQgbW91c2UgaW5wdXQgaXMgdXNlZCBmb3JcbiAgICogdGhlIGxpc3QgYW5kIGxpc3QgaXRlbXMuXG4gICAqIFRoZSBwcm9wIGlzIGF2YWlsYWJsZSB0byBkZXNjZW5kYW50IGNvbXBvbmVudHMgYXMgdGhlIGBkZW5zZWAgY29udGV4dC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdmVydGljYWwgcGFkZGluZyBpcyByZW1vdmVkIGZyb20gdGhlIGxpc3QuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUGFkZGluZzogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgc3ViaGVhZGVyLCBub3JtYWxseSBgTGlzdFN1YmhlYWRlcmAuXG4gICAqL1xuICBzdWJoZWFkZXI6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGlzdDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVR5cG9ncmFwaHknLCBzbG90KTtcbn1cbmNvbnN0IHR5cG9ncmFwaHlDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVHlwb2dyYXBoeScsIFsncm9vdCcsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdzdWJ0aXRsZTEnLCAnc3VidGl0bGUyJywgJ2JvZHkxJywgJ2JvZHkyJywgJ2luaGVyaXQnLCAnYnV0dG9uJywgJ2NhcHRpb24nLCAnb3ZlcmxpbmUnLCAnYWxpZ25MZWZ0JywgJ2FsaWduUmlnaHQnLCAnYWxpZ25DZW50ZXInLCAnYWxpZ25KdXN0aWZ5JywgJ25vV3JhcCcsICdndXR0ZXJCb3R0b20nLCAncGFyYWdyYXBoJ10pO1xuZXhwb3J0IGRlZmF1bHQgdHlwb2dyYXBoeUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWxpZ25cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJndXR0ZXJCb3R0b21cIiwgXCJub1dyYXBcIiwgXCJwYXJhZ3JhcGhcIiwgXCJ2YXJpYW50XCIsIFwidmFyaWFudE1hcHBpbmdcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9leHRlbmRTeFByb3AgYXMgZXh0ZW5kU3hQcm9wIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHsgZ2V0VHlwb2dyYXBoeVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vdHlwb2dyYXBoeUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhbGlnbixcbiAgICBndXR0ZXJCb3R0b20sXG4gICAgbm9XcmFwLFxuICAgIHBhcmFncmFwaCxcbiAgICB2YXJpYW50LFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIHZhcmlhbnQsIG93bmVyU3RhdGUuYWxpZ24gIT09ICdpbmhlcml0JyAmJiBgYWxpZ24ke2NhcGl0YWxpemUoYWxpZ24pfWAsIGd1dHRlckJvdHRvbSAmJiAnZ3V0dGVyQm90dG9tJywgbm9XcmFwICYmICdub1dyYXAnLCBwYXJhZ3JhcGggJiYgJ3BhcmFncmFwaCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VHlwb2dyYXBoeVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuZXhwb3J0IGNvbnN0IFR5cG9ncmFwaHlSb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpVHlwb2dyYXBoeScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLnZhcmlhbnQgJiYgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIG93bmVyU3RhdGUuYWxpZ24gIT09ICdpbmhlcml0JyAmJiBzdHlsZXNbYGFsaWduJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuYWxpZ24pfWBdLCBvd25lclN0YXRlLm5vV3JhcCAmJiBzdHlsZXMubm9XcmFwLCBvd25lclN0YXRlLmd1dHRlckJvdHRvbSAmJiBzdHlsZXMuZ3V0dGVyQm90dG9tLCBvd25lclN0YXRlLnBhcmFncmFwaCAmJiBzdHlsZXMucGFyYWdyYXBoXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgbWFyZ2luOiAwXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmhlcml0JyAmJiB7XG4gIC8vIFNvbWUgZWxlbWVudHMsIGxpa2UgPGJ1dHRvbj4gb24gQ2hyb21lIGhhdmUgZGVmYXVsdCBmb250IHRoYXQgZG9lc24ndCBpbmhlcml0LCByZXNldCB0aGlzLlxuICBmb250OiAnaW5oZXJpdCdcbn0sIG93bmVyU3RhdGUudmFyaWFudCAhPT0gJ2luaGVyaXQnICYmIHRoZW1lLnR5cG9ncmFwaHlbb3duZXJTdGF0ZS52YXJpYW50XSwgb3duZXJTdGF0ZS5hbGlnbiAhPT0gJ2luaGVyaXQnICYmIHtcbiAgdGV4dEFsaWduOiBvd25lclN0YXRlLmFsaWduXG59LCBvd25lclN0YXRlLm5vV3JhcCAmJiB7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xufSwgb3duZXJTdGF0ZS5ndXR0ZXJCb3R0b20gJiYge1xuICBtYXJnaW5Cb3R0b206ICcwLjM1ZW0nXG59LCBvd25lclN0YXRlLnBhcmFncmFwaCAmJiB7XG4gIG1hcmdpbkJvdHRvbTogMTZcbn0pKTtcbmNvbnN0IGRlZmF1bHRWYXJpYW50TWFwcGluZyA9IHtcbiAgaDE6ICdoMScsXG4gIGgyOiAnaDInLFxuICBoMzogJ2gzJyxcbiAgaDQ6ICdoNCcsXG4gIGg1OiAnaDUnLFxuICBoNjogJ2g2JyxcbiAgc3VidGl0bGUxOiAnaDYnLFxuICBzdWJ0aXRsZTI6ICdoNicsXG4gIGJvZHkxOiAncCcsXG4gIGJvZHkyOiAncCcsXG4gIGluaGVyaXQ6ICdwJ1xufTtcblxuLy8gVE9ETyB2NjogZGVwcmVjYXRlIHRoZXNlIGNvbG9yIHZhbHVlcyBpbiB2NS54IGFuZCByZW1vdmUgdGhlIHRyYW5zZm9ybWF0aW9uIGluIHY2XG5jb25zdCBjb2xvclRyYW5zZm9ybWF0aW9ucyA9IHtcbiAgcHJpbWFyeTogJ3ByaW1hcnkubWFpbicsXG4gIHRleHRQcmltYXJ5OiAndGV4dC5wcmltYXJ5JyxcbiAgc2Vjb25kYXJ5OiAnc2Vjb25kYXJ5Lm1haW4nLFxuICB0ZXh0U2Vjb25kYXJ5OiAndGV4dC5zZWNvbmRhcnknLFxuICBlcnJvcjogJ2Vycm9yLm1haW4nXG59O1xuY29uc3QgdHJhbnNmb3JtRGVwcmVjYXRlZENvbG9ycyA9IGNvbG9yID0+IHtcbiAgcmV0dXJuIGNvbG9yVHJhbnNmb3JtYXRpb25zW2NvbG9yXSB8fCBjb2xvcjtcbn07XG5jb25zdCBUeXBvZ3JhcGh5ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVHlwb2dyYXBoeShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgdGhlbWVQcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUeXBvZ3JhcGh5J1xuICB9KTtcbiAgY29uc3QgY29sb3IgPSB0cmFuc2Zvcm1EZXByZWNhdGVkQ29sb3JzKHRoZW1lUHJvcHMuY29sb3IpO1xuICBjb25zdCBwcm9wcyA9IGV4dGVuZFN4UHJvcChfZXh0ZW5kcyh7fSwgdGhlbWVQcm9wcywge1xuICAgIGNvbG9yXG4gIH0pKTtcbiAgY29uc3Qge1xuICAgICAgYWxpZ24gPSAnaW5oZXJpdCcsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQsXG4gICAgICBndXR0ZXJCb3R0b20gPSBmYWxzZSxcbiAgICAgIG5vV3JhcCA9IGZhbHNlLFxuICAgICAgcGFyYWdyYXBoID0gZmFsc2UsXG4gICAgICB2YXJpYW50ID0gJ2JvZHkxJyxcbiAgICAgIHZhcmlhbnRNYXBwaW5nID0gZGVmYXVsdFZhcmlhbnRNYXBwaW5nXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhbGlnbixcbiAgICBjb2xvcixcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50LFxuICAgIGd1dHRlckJvdHRvbSxcbiAgICBub1dyYXAsXG4gICAgcGFyYWdyYXBoLFxuICAgIHZhcmlhbnQsXG4gICAgdmFyaWFudE1hcHBpbmdcbiAgfSk7XG4gIGNvbnN0IENvbXBvbmVudCA9IGNvbXBvbmVudCB8fCAocGFyYWdyYXBoID8gJ3AnIDogdmFyaWFudE1hcHBpbmdbdmFyaWFudF0gfHwgZGVmYXVsdFZhcmlhbnRNYXBwaW5nW3ZhcmlhbnRdKSB8fCAnc3Bhbic7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFR5cG9ncmFwaHlSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IENvbXBvbmVudCxcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVHlwb2dyYXBoeS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBTZXQgdGhlIHRleHQtYWxpZ24gb24gdGhlIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2luaGVyaXQnXG4gICAqL1xuICBhbGlnbjogUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2luaGVyaXQnLCAnanVzdGlmeScsICdsZWZ0JywgJ3JpZ2h0J10pLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBoYXZlIGEgYm90dG9tIG1hcmdpbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGd1dHRlckJvdHRvbTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgbm90IHdyYXAsIGJ1dCBpbnN0ZWFkIHdpbGwgdHJ1bmNhdGUgd2l0aCBhIHRleHQgb3ZlcmZsb3cgZWxsaXBzaXMuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0ZXh0IG92ZXJmbG93IGNhbiBvbmx5IGhhcHBlbiB3aXRoIGJsb2NrIG9yIGlubGluZS1ibG9jayBsZXZlbCBlbGVtZW50c1xuICAgKiAodGhlIGVsZW1lbnQgbmVlZHMgdG8gaGF2ZSBhIHdpZHRoIGluIG9yZGVyIHRvIG92ZXJmbG93KS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG5vV3JhcDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBlbGVtZW50IHdpbGwgYmUgYSBwYXJhZ3JhcGggZWxlbWVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHBhcmFncmFwaDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSB0aGVtZSB0eXBvZ3JhcGh5IHN0eWxlcy5cbiAgICogQGRlZmF1bHQgJ2JvZHkxJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydib2R5MScsICdib2R5MicsICdidXR0b24nLCAnY2FwdGlvbicsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdpbmhlcml0JywgJ292ZXJsaW5lJywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgbWFwcyB0aGUgdmFyaWFudCBwcm9wIHRvIGEgcmFuZ2Ugb2YgZGlmZmVyZW50IEhUTUwgZWxlbWVudCB0eXBlcy5cbiAgICogRm9yIGluc3RhbmNlLCBzdWJ0aXRsZTEgdG8gYDxoNj5gLlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhhdCBtYXBwaW5nLCB5b3UgY2FuIHByb3ZpZGUgeW91ciBvd24uXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSBgY29tcG9uZW50YCBwcm9wLlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgaDE6ICdoMScsXG4gICAqICAgaDI6ICdoMicsXG4gICAqICAgaDM6ICdoMycsXG4gICAqICAgaDQ6ICdoNCcsXG4gICAqICAgaDU6ICdoNScsXG4gICAqICAgaDY6ICdoNicsXG4gICAqICAgc3VidGl0bGUxOiAnaDYnLFxuICAgKiAgIHN1YnRpdGxlMjogJ2g2JyxcbiAgICogICBib2R5MTogJ3AnLFxuICAgKiAgIGJvZHkyOiAncCcsXG4gICAqICAgaW5oZXJpdDogJ3AnLFxuICAgKiB9XG4gICAqL1xuICB2YXJpYW50TWFwcGluZzogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVHlwb2dyYXBoeTsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldERpdmlkZXJVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aURpdmlkZXInLCBzbG90KTtcbn1cbmNvbnN0IGRpdmlkZXJDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpRGl2aWRlcicsIFsncm9vdCcsICdhYnNvbHV0ZScsICdmdWxsV2lkdGgnLCAnaW5zZXQnLCAnbWlkZGxlJywgJ2ZsZXhJdGVtJywgJ2xpZ2h0JywgJ3ZlcnRpY2FsJywgJ3dpdGhDaGlsZHJlbicsICd3aXRoQ2hpbGRyZW5WZXJ0aWNhbCcsICd0ZXh0QWxpZ25SaWdodCcsICd0ZXh0QWxpZ25MZWZ0JywgJ3dyYXBwZXInLCAnd3JhcHBlclZlcnRpY2FsJ10pO1xuZXhwb3J0IGRlZmF1bHQgZGl2aWRlckNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWJzb2x1dGVcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImZsZXhJdGVtXCIsIFwibGlnaHRcIiwgXCJvcmllbnRhdGlvblwiLCBcInJvbGVcIiwgXCJ0ZXh0QWxpZ25cIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgYWxwaGEgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsgZ2V0RGl2aWRlclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vZGl2aWRlckNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhYnNvbHV0ZSxcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc2VzLFxuICAgIGZsZXhJdGVtLFxuICAgIGxpZ2h0LFxuICAgIG9yaWVudGF0aW9uLFxuICAgIHRleHRBbGlnbixcbiAgICB2YXJpYW50XG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBhYnNvbHV0ZSAmJiAnYWJzb2x1dGUnLCB2YXJpYW50LCBsaWdodCAmJiAnbGlnaHQnLCBvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiAndmVydGljYWwnLCBmbGV4SXRlbSAmJiAnZmxleEl0ZW0nLCBjaGlsZHJlbiAmJiAnd2l0aENoaWxkcmVuJywgY2hpbGRyZW4gJiYgb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgJ3dpdGhDaGlsZHJlblZlcnRpY2FsJywgdGV4dEFsaWduID09PSAncmlnaHQnICYmIG9yaWVudGF0aW9uICE9PSAndmVydGljYWwnICYmICd0ZXh0QWxpZ25SaWdodCcsIHRleHRBbGlnbiA9PT0gJ2xlZnQnICYmIG9yaWVudGF0aW9uICE9PSAndmVydGljYWwnICYmICd0ZXh0QWxpZ25MZWZ0J10sXG4gICAgd3JhcHBlcjogWyd3cmFwcGVyJywgb3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYgJ3dyYXBwZXJWZXJ0aWNhbCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0RGl2aWRlclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgRGl2aWRlclJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aURpdmlkZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5hYnNvbHV0ZSAmJiBzdHlsZXMuYWJzb2x1dGUsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCBvd25lclN0YXRlLmxpZ2h0ICYmIHN0eWxlcy5saWdodCwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiBzdHlsZXMudmVydGljYWwsIG93bmVyU3RhdGUuZmxleEl0ZW0gJiYgc3R5bGVzLmZsZXhJdGVtLCBvd25lclN0YXRlLmNoaWxkcmVuICYmIHN0eWxlcy53aXRoQ2hpbGRyZW4sIG93bmVyU3RhdGUuY2hpbGRyZW4gJiYgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiBzdHlsZXMud2l0aENoaWxkcmVuVmVydGljYWwsIG93bmVyU3RhdGUudGV4dEFsaWduID09PSAncmlnaHQnICYmIG93bmVyU3RhdGUub3JpZW50YXRpb24gIT09ICd2ZXJ0aWNhbCcgJiYgc3R5bGVzLnRleHRBbGlnblJpZ2h0LCBvd25lclN0YXRlLnRleHRBbGlnbiA9PT0gJ2xlZnQnICYmIG93bmVyU3RhdGUub3JpZW50YXRpb24gIT09ICd2ZXJ0aWNhbCcgJiYgc3R5bGVzLnRleHRBbGlnbkxlZnRdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBtYXJnaW46IDAsXG4gIC8vIFJlc2V0IGJyb3dzZXIgZGVmYXVsdCBzdHlsZS5cbiAgZmxleFNocmluazogMCxcbiAgYm9yZGVyV2lkdGg6IDAsXG4gIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICBib3JkZXJDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZGl2aWRlcixcbiAgYm9yZGVyQm90dG9tV2lkdGg6ICd0aGluJ1xufSwgb3duZXJTdGF0ZS5hYnNvbHV0ZSAmJiB7XG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBib3R0b206IDAsXG4gIGxlZnQ6IDAsXG4gIHdpZHRoOiAnMTAwJSdcbn0sIG93bmVyU3RhdGUubGlnaHQgJiYge1xuICBib3JkZXJDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLmRpdmlkZXJDaGFubmVsfSAvIDAuMDgpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUuZGl2aWRlciwgMC4wOClcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luc2V0JyAmJiB7XG4gIG1hcmdpbkxlZnQ6IDcyXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdtaWRkbGUnICYmIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyAmJiB7XG4gIG1hcmdpbkxlZnQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdtaWRkbGUnICYmIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYge1xuICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcoMSksXG4gIG1hcmdpbkJvdHRvbTogdGhlbWUuc3BhY2luZygxKVxufSwgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB7XG4gIGhlaWdodDogJzEwMCUnLFxuICBib3JkZXJCb3R0b21XaWR0aDogMCxcbiAgYm9yZGVyUmlnaHRXaWR0aDogJ3RoaW4nXG59LCBvd25lclN0YXRlLmZsZXhJdGVtICYmIHtcbiAgYWxpZ25TZWxmOiAnc3RyZXRjaCcsXG4gIGhlaWdodDogJ2F1dG8nXG59KSwgKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuY2hpbGRyZW4gJiYge1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICBib3JkZXI6IDAsXG4gICcmOjpiZWZvcmUsICY6OmFmdGVyJzoge1xuICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICBhbGlnblNlbGY6ICdjZW50ZXInXG4gIH1cbn0pLCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuY2hpbGRyZW4gJiYgb3duZXJTdGF0ZS5vcmllbnRhdGlvbiAhPT0gJ3ZlcnRpY2FsJyAmJiB7XG4gICcmOjpiZWZvcmUsICY6OmFmdGVyJzoge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgYm9yZGVyVG9wOiBgdGhpbiBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmRpdmlkZXJ9YFxuICB9XG59KSwgKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLmNoaWxkcmVuICYmIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYge1xuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgJyY6OmJlZm9yZSwgJjo6YWZ0ZXInOiB7XG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgYm9yZGVyTGVmdDogYHRoaW4gc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5kaXZpZGVyfWBcbiAgfVxufSksICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLnRleHRBbGlnbiA9PT0gJ3JpZ2h0JyAmJiBvd25lclN0YXRlLm9yaWVudGF0aW9uICE9PSAndmVydGljYWwnICYmIHtcbiAgJyY6OmJlZm9yZSc6IHtcbiAgICB3aWR0aDogJzkwJSdcbiAgfSxcbiAgJyY6OmFmdGVyJzoge1xuICAgIHdpZHRoOiAnMTAlJ1xuICB9XG59LCBvd25lclN0YXRlLnRleHRBbGlnbiA9PT0gJ2xlZnQnICYmIG93bmVyU3RhdGUub3JpZW50YXRpb24gIT09ICd2ZXJ0aWNhbCcgJiYge1xuICAnJjo6YmVmb3JlJzoge1xuICAgIHdpZHRoOiAnMTAlJ1xuICB9LFxuICAnJjo6YWZ0ZXInOiB7XG4gICAgd2lkdGg6ICc5MCUnXG4gIH1cbn0pKTtcbmNvbnN0IERpdmlkZXJXcmFwcGVyID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpRGl2aWRlcicsXG4gIHNsb3Q6ICdXcmFwcGVyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy53cmFwcGVyLCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnICYmIHN0eWxlcy53cmFwcGVyVmVydGljYWxdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgcGFkZGluZ0xlZnQ6IGBjYWxjKCR7dGhlbWUuc3BhY2luZygxKX0gKiAxLjIpYCxcbiAgcGFkZGluZ1JpZ2h0OiBgY2FsYygke3RoZW1lLnNwYWNpbmcoMSl9ICogMS4yKWBcbn0sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcgJiYge1xuICBwYWRkaW5nVG9wOiBgY2FsYygke3RoZW1lLnNwYWNpbmcoMSl9ICogMS4yKWAsXG4gIHBhZGRpbmdCb3R0b206IGBjYWxjKCR7dGhlbWUuc3BhY2luZygxKX0gKiAxLjIpYFxufSkpO1xuY29uc3QgRGl2aWRlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIERpdmlkZXIoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aURpdmlkZXInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhYnNvbHV0ZSA9IGZhbHNlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSBjaGlsZHJlbiA/ICdkaXYnIDogJ2hyJyxcbiAgICAgIGZsZXhJdGVtID0gZmFsc2UsXG4gICAgICBsaWdodCA9IGZhbHNlLFxuICAgICAgb3JpZW50YXRpb24gPSAnaG9yaXpvbnRhbCcsXG4gICAgICByb2xlID0gY29tcG9uZW50ICE9PSAnaHInID8gJ3NlcGFyYXRvcicgOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJyxcbiAgICAgIHZhcmlhbnQgPSAnZnVsbFdpZHRoJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYWJzb2x1dGUsXG4gICAgY29tcG9uZW50LFxuICAgIGZsZXhJdGVtLFxuICAgIGxpZ2h0LFxuICAgIG9yaWVudGF0aW9uLFxuICAgIHJvbGUsXG4gICAgdGV4dEFsaWduLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KERpdmlkZXJSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJvbGU6IHJvbGUsXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlbiA/IC8qI19fUFVSRV9fKi9fanN4KERpdmlkZXJXcmFwcGVyLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMud3JhcHBlcixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSA6IG51bGxcbiAgfSkpO1xufSk7XG5cbi8qKlxuICogVGhlIGZvbGxvd2luZyBmbGFnIGlzIHVzZWQgdG8gZW5zdXJlIHRoYXQgdGhpcyBjb21wb25lbnQgaXNuJ3QgdGFiYmFibGUgaS5lLlxuICogZG9lcyBub3QgZ2V0IGhpZ2hsaWdodC9mb2N1cyBpbnNpZGUgb2YgTVVJIExpc3QuXG4gKi9cbkRpdmlkZXIubXVpU2tpcExpc3RIaWdobGlnaHQgPSB0cnVlO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRGl2aWRlci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBYnNvbHV0ZWx5IHBvc2l0aW9uIHRoZSBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYWJzb2x1dGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB2ZXJ0aWNhbCBkaXZpZGVyIHdpbGwgaGF2ZSB0aGUgY29ycmVjdCBoZWlnaHQgd2hlbiB1c2VkIGluIGZsZXggY29udGFpbmVyLlxuICAgKiAoQnkgZGVmYXVsdCwgYSB2ZXJ0aWNhbCBkaXZpZGVyIHdpbGwgaGF2ZSBhIGNhbGN1bGF0ZWQgaGVpZ2h0IG9mIGAwcHhgIGlmIGl0IGlzIHRoZSBjaGlsZCBvZiBhIGZsZXggY29udGFpbmVyLilcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZsZXhJdGVtOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGRpdmlkZXIgd2lsbCBoYXZlIGEgbGlnaHRlciBjb2xvci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICogQGRlcHJlY2F0ZWQgVXNlIDxEaXZpZGVyIHN4PXt7IGJnY29sb3I6ICcjZWVlJyB9fSAvPiAob3IgYW55IGNvbG9yKSBpbnN0ZWFkLlxuICAgKi9cbiAgbGlnaHQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBvcmllbnRhdGlvbi5cbiAgICogQGRlZmF1bHQgJ2hvcml6b250YWwnXG4gICAqL1xuICBvcmllbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJvbGU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB0ZXh0IGFsaWdubWVudC5cbiAgICogQGRlZmF1bHQgJ2NlbnRlcidcbiAgICovXG4gIHRleHRBbGlnbjogUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2xlZnQnLCAncmlnaHQnXSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdmdWxsV2lkdGgnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2Z1bGxXaWR0aCcsICdpbnNldCcsICdtaWRkbGUnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IERpdmlkZXI7IiwiaW1wb3J0IHsgQ2hpbGRyZW4sIGNsb25lRWxlbWVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4sIG1hcEZuKSB7XG4gIHZhciBtYXBwZXIgPSBmdW5jdGlvbiBtYXBwZXIoY2hpbGQpIHtcbiAgICByZXR1cm4gbWFwRm4gJiYgaXNWYWxpZEVsZW1lbnQoY2hpbGQpID8gbWFwRm4oY2hpbGQpIDogY2hpbGQ7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChjaGlsZHJlbikgQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjO1xuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIC8vIHJ1biB0aGUgbWFwIGZ1bmN0aW9uIGhlcmUgaW5zdGVhZCBzbyB0aGF0IHRoZSBrZXkgaXMgdGhlIGNvbXB1dGVkIG9uZVxuICAgIHJlc3VsdFtjaGlsZC5rZXldID0gbWFwcGVyKGNoaWxkKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFdoZW4geW91J3JlIGFkZGluZyBvciByZW1vdmluZyBjaGlsZHJlbiBzb21lIG1heSBiZSBhZGRlZCBvciByZW1vdmVkIGluIHRoZVxuICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gKiBhbmltYXRlIGVsZW1lbnRzIGluIGFuZCBvdXQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBwcmV2aW91cyBzZXQgb2Yga2V5c1xuICogYW5kIGEgbmV3IHNldCBvZiBrZXlzIGFuZCBtZXJnZXMgdGhlbSB3aXRoIGl0cyBiZXN0IGd1ZXNzIG9mIHRoZSBjb3JyZWN0XG4gKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICogUmVhY3RNdWx0aUNoaWxkIHRvIG1ha2UgdGhpcyBlYXN5LCBidXQgZm9yIG5vdyBSZWFjdCBpdHNlbGYgZG9lcyBub3RcbiAqIGRpcmVjdGx5IGhhdmUgdGhpcyBjb25jZXB0IG9mIHRoZSB1bmlvbiBvZiBwcmV2Q2hpbGRyZW4gYW5kIG5leHRDaGlsZHJlblxuICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByZXYgcHJldiBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0IG5leHQgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAqIGluIGBuZXh0YCBpbiBhIHJlYXNvbmFibGUgb3JkZXIuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9O1xuICBuZXh0ID0gbmV4dCB8fCB7fTtcblxuICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5IGluIG5leHQgPyBuZXh0W2tleV0gOiBwcmV2W2tleV07XG4gIH0gLy8gRm9yIGVhY2gga2V5IG9mIGBuZXh0YCwgdGhlIGxpc3Qgb2Yga2V5cyB0byBpbnNlcnQgYmVmb3JlIHRoYXQga2V5IGluXG4gIC8vIHRoZSBjb21iaW5lZCBsaXN0XG5cblxuICB2YXIgbmV4dEtleXNQZW5kaW5nID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG5cbiAgZm9yICh2YXIgcHJldktleSBpbiBwcmV2KSB7XG4gICAgaWYgKHByZXZLZXkgaW4gbmV4dCkge1xuICAgICAgaWYgKHBlbmRpbmdLZXlzLmxlbmd0aCkge1xuICAgICAgICBuZXh0S2V5c1BlbmRpbmdbcHJldktleV0gPSBwZW5kaW5nS2V5cztcbiAgICAgICAgcGVuZGluZ0tleXMgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaTtcbiAgdmFyIGNoaWxkTWFwcGluZyA9IHt9O1xuXG4gIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dCkge1xuICAgIGlmIChuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0pIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBlbmRpbmdOZXh0S2V5ID0gbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldO1xuICAgICAgICBjaGlsZE1hcHBpbmdbbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdOZXh0S2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZE1hcHBpbmdbbmV4dEtleV0gPSBnZXRWYWx1ZUZvcktleShuZXh0S2V5KTtcbiAgfSAvLyBGaW5hbGx5LCBhZGQgdGhlIGtleXMgd2hpY2ggZGlkbid0IGFwcGVhciBiZWZvcmUgYW55IGtleSBpbiBgbmV4dGBcblxuXG4gIGZvciAoaSA9IDA7IGkgPCBwZW5kaW5nS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNoaWxkTWFwcGluZ1twZW5kaW5nS2V5c1tpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nS2V5c1tpXSk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRNYXBwaW5nO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wKGNoaWxkLCBwcm9wLCBwcm9wcykge1xuICByZXR1cm4gcHJvcHNbcHJvcF0gIT0gbnVsbCA/IHByb3BzW3Byb3BdIDogY2hpbGQucHJvcHNbcHJvcF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKHByb3BzLCBvbkV4aXRlZCkge1xuICByZXR1cm4gZ2V0Q2hpbGRNYXBwaW5nKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICBpbjogdHJ1ZSxcbiAgICAgIGFwcGVhcjogZ2V0UHJvcChjaGlsZCwgJ2FwcGVhcicsIHByb3BzKSxcbiAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBwcm9wcyksXG4gICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIHByb3BzKVxuICAgIH0pO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgb25FeGl0ZWQpIHtcbiAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcobmV4dFByb3BzLmNoaWxkcmVuKTtcbiAgdmFyIGNoaWxkcmVuID0gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXZDaGlsZE1hcHBpbmcsIG5leHRDaGlsZE1hcHBpbmcpO1xuICBPYmplY3Qua2V5cyhjaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5ba2V5XTtcbiAgICBpZiAoIWlzVmFsaWRFbGVtZW50KGNoaWxkKSkgcmV0dXJuO1xuICAgIHZhciBoYXNQcmV2ID0gKGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nKTtcbiAgICB2YXIgaGFzTmV4dCA9IChrZXkgaW4gbmV4dENoaWxkTWFwcGluZyk7XG4gICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZE1hcHBpbmdba2V5XTtcbiAgICB2YXIgaXNMZWF2aW5nID0gaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSAmJiAhcHJldkNoaWxkLnByb3BzLmluOyAvLyBpdGVtIGlzIG5ldyAoZW50ZXJpbmcpXG5cbiAgICBpZiAoaGFzTmV4dCAmJiAoIWhhc1ByZXYgfHwgaXNMZWF2aW5nKSkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2VudGVyaW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiB0cnVlLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFoYXNOZXh0ICYmIGhhc1ByZXYgJiYgIWlzTGVhdmluZykge1xuICAgICAgLy8gaXRlbSBpcyBvbGQgKGV4aXRpbmcpXG4gICAgICAvLyBjb25zb2xlLmxvZygnbGVhdmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgaW46IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGhhc05leHQgJiYgaGFzUHJldiAmJiBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpKSB7XG4gICAgICAvLyBpdGVtIGhhc24ndCBjaGFuZ2VkIHRyYW5zaXRpb24gc3RhdGVzXG4gICAgICAvLyBjb3B5IG92ZXIgdGhlIGxhc3QgdHJhbnNpdGlvbiBwcm9wcztcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd1bmNoYW5nZWQnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHByZXZDaGlsZC5wcm9wcy5pbixcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmltcG9ydCB7IGdldENoaWxkTWFwcGluZywgZ2V0SW5pdGlhbENoaWxkTWFwcGluZywgZ2V0TmV4dENoaWxkTWFwcGluZyB9IGZyb20gJy4vdXRpbHMvQ2hpbGRNYXBwaW5nJztcblxudmFyIHZhbHVlcyA9IE9iamVjdC52YWx1ZXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gb2JqW2tdO1xuICB9KTtcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIGNoaWxkRmFjdG9yeTogZnVuY3Rpb24gY2hpbGRGYWN0b3J5KGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG59O1xuLyoqXG4gKiBUaGUgYDxUcmFuc2l0aW9uR3JvdXA+YCBjb21wb25lbnQgbWFuYWdlcyBhIHNldCBvZiB0cmFuc2l0aW9uIGNvbXBvbmVudHNcbiAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gKiBjb21wb25lbnRzLCBgPFRyYW5zaXRpb25Hcm91cD5gIGlzIGEgc3RhdGUgbWFjaGluZSBmb3IgbWFuYWdpbmcgdGhlIG1vdW50aW5nXG4gKiBhbmQgdW5tb3VudGluZyBvZiBjb21wb25lbnRzIG92ZXIgdGltZS5cbiAqXG4gKiBDb25zaWRlciB0aGUgZXhhbXBsZSBiZWxvdy4gQXMgaXRlbXMgYXJlIHJlbW92ZWQgb3IgYWRkZWQgdG8gdGhlIFRvZG9MaXN0IHRoZVxuICogYGluYCBwcm9wIGlzIHRvZ2dsZWQgYXV0b21hdGljYWxseSBieSB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YC5cbiAqXG4gKiBOb3RlIHRoYXQgYDxUcmFuc2l0aW9uR3JvdXA+YCAgZG9lcyBub3QgZGVmaW5lIGFueSBhbmltYXRpb24gYmVoYXZpb3IhXG4gKiBFeGFjdGx5IF9ob3dfIGEgbGlzdCBpdGVtIGFuaW1hdGVzIGlzIHVwIHRvIHRoZSBpbmRpdmlkdWFsIHRyYW5zaXRpb25cbiAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAqIGl0ZW1zLlxuICovXG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbkdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uR3JvdXAocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcblxuICAgIHZhciBoYW5kbGVFeGl0ZWQgPSBfdGhpcy5oYW5kbGVFeGl0ZWQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7IC8vIEluaXRpYWwgY2hpbGRyZW4gc2hvdWxkIGFsbCBiZSBlbnRlcmluZywgZGVwZW5kZW50IG9uIGFwcGVhclxuXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiB0cnVlXG4gICAgICB9LFxuICAgICAgaGFuZGxlRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgICBmaXJzdFJlbmRlcjogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBoYW5kbGVFeGl0ZWQgPSBfcmVmLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgZmlyc3RSZW5kZXIgPSBfcmVmLmZpcnN0UmVuZGVyO1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogZmlyc3RSZW5kZXIgPyBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKG5leHRQcm9wcywgaGFuZGxlRXhpdGVkKSA6IGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBoYW5kbGVFeGl0ZWQpLFxuICAgICAgZmlyc3RSZW5kZXI6IGZhbHNlXG4gICAgfTtcbiAgfSAvLyBub2RlIGlzIGB1bmRlZmluZWRgIHdoZW4gdXNlciBwcm92aWRlZCBgbm9kZVJlZmAgcHJvcFxuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChjaGlsZC5rZXkgaW4gY3VycmVudENoaWxkTWFwcGluZykgcmV0dXJuO1xuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICBjaGlsZC5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICAgIGRlbGV0ZSBjaGlsZHJlbltjaGlsZC5rZXldO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBjaGlsZEZhY3RvcnkgPSBfdGhpcyRwcm9wcy5jaGlsZEZhY3RvcnksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudFwiLCBcImNoaWxkRmFjdG9yeVwiXSk7XG5cbiAgICB2YXIgY29udGV4dFZhbHVlID0gdGhpcy5zdGF0ZS5jb250ZXh0VmFsdWU7XG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgICAgfSwgY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogYDxUcmFuc2l0aW9uR3JvdXA+YCByZW5kZXJzIGEgYDxkaXY+YCBieSBkZWZhdWx0LiBZb3UgY2FuIGNoYW5nZSB0aGlzXG4gICAqIGJlaGF2aW9yIGJ5IHByb3ZpZGluZyBhIGBjb21wb25lbnRgIHByb3AuXG4gICAqIElmIHlvdSB1c2UgUmVhY3QgdjE2KyBhbmQgd291bGQgbGlrZSB0byBhdm9pZCBhIHdyYXBwaW5nIGA8ZGl2PmAgZWxlbWVudFxuICAgKiB5b3UgY2FuIHBhc3MgaW4gYGNvbXBvbmVudD17bnVsbH1gLiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgd3JhcHBpbmcgZGl2XG4gICAqIGJvcmtzIHlvdXIgY3NzIHN0eWxlcy5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogQSBzZXQgb2YgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50cywgdGhhdCBhcmUgdG9nZ2xlZCBgaW5gIGFuZCBvdXQgYXMgdGhleVxuICAgKiBsZWF2ZS4gdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgd2lsbCBpbmplY3Qgc3BlY2lmaWMgdHJhbnNpdGlvbiBwcm9wcywgc29cbiAgICogcmVtZW1iZXIgdG8gc3ByZWFkIHRoZW0gdGhyb3VnaCBpZiB5b3UgYXJlIHdyYXBwaW5nIHRoZSBgPFRyYW5zaXRpb24+YCBhc1xuICAgKiB3aXRoIG91ciBgPEZhZGU+YCBleGFtcGxlLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIGNvbXBvbmVudCBpcyBtZWFudCBmb3IgbXVsdGlwbGUgYFRyYW5zaXRpb25gIG9yIGBDU1NUcmFuc2l0aW9uYFxuICAgKiBjaGlsZHJlbiwgc29tZXRpbWVzIHlvdSBtYXkgd2FudCB0byBoYXZlIGEgc2luZ2xlIHRyYW5zaXRpb24gY2hpbGQgd2l0aFxuICAgKiBjb250ZW50IHRoYXQgeW91IHdhbnQgdG8gYmUgdHJhbnNpdGlvbmVkIG91dCBhbmQgaW4gd2hlbiB5b3UgY2hhbmdlIGl0XG4gICAqIChlLmcuIHJvdXRlcywgaW1hZ2VzIGV0Yy4pIEluIHRoYXQgY2FzZSB5b3UgY2FuIGNoYW5nZSB0aGUgYGtleWAgcHJvcCBvZlxuICAgKiB0aGUgdHJhbnNpdGlvbiBjaGlsZCBhcyB5b3UgY2hhbmdlIGl0cyBjb250ZW50LCB0aGlzIHdpbGwgY2F1c2VcbiAgICogYFRyYW5zaXRpb25Hcm91cGAgdG8gdHJhbnNpdGlvbiB0aGUgY2hpbGQgb3V0IGFuZCBiYWNrIGluLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGFwcGVhciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGVudGVyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBleGl0IGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGV4aXRpbmcuXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmUgYnkgdXNpbmcgYGNsb25lRWxlbWVudGAgaG93ZXZlciBpbiB0aGUgY2FzZSBvZiBhbiBleGl0aW5nXG4gICAqIGNoaWxkIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBhbmQgbm90IGFjY2Vzc2libGUgdG8gdGhlIGNvbnN1bWVyLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byB1cGRhdGUgYSBjaGlsZCBhcyBpdCBsZWF2ZXMgeW91IGNhbiBwcm92aWRlIGEgYGNoaWxkRmFjdG9yeWBcbiAgICogdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZSBsZWF2aW5nLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihjaGlsZDogUmVhY3RFbGVtZW50KSAtPiBSZWFjdEVsZW1lbnRcbiAgICovXG4gIGNoaWxkRmFjdG9yeTogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uR3JvdXA7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cbiAgcmV0dXJuIHNlbGY7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIFJpcHBsZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNsYXNzZXMsXG4gICAgcHVsc2F0ZSA9IGZhbHNlLFxuICAgIHJpcHBsZVgsXG4gICAgcmlwcGxlWSxcbiAgICByaXBwbGVTaXplLFxuICAgIGluOiBpblByb3AsXG4gICAgb25FeGl0ZWQsXG4gICAgdGltZW91dFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFtsZWF2aW5nLCBzZXRMZWF2aW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgcmlwcGxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc05hbWUsIGNsYXNzZXMucmlwcGxlLCBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHB1bHNhdGUgJiYgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlKTtcbiAgY29uc3QgcmlwcGxlU3R5bGVzID0ge1xuICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgfTtcbiAgY29uc3QgY2hpbGRDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMuY2hpbGQsIGxlYXZpbmcgJiYgY2xhc3Nlcy5jaGlsZExlYXZpbmcsIHB1bHNhdGUgJiYgY2xhc3Nlcy5jaGlsZFB1bHNhdGUpO1xuICBpZiAoIWluUHJvcCAmJiAhbGVhdmluZykge1xuICAgIHNldExlYXZpbmcodHJ1ZSk7XG4gIH1cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWluUHJvcCAmJiBvbkV4aXRlZCAhPSBudWxsKSB7XG4gICAgICAvLyByZWFjdC10cmFuc2l0aW9uLWdyb3VwI29uRXhpdGVkXG4gICAgICBjb25zdCB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KG9uRXhpdGVkLCB0aW1lb3V0KTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW29uRXhpdGVkLCBpblByb3AsIHRpbWVvdXRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiByaXBwbGVDbGFzc05hbWUsXG4gICAgc3R5bGU6IHJpcHBsZVN0eWxlcyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2hpbGRDbGFzc05hbWVcbiAgICB9KVxuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQGlnbm9yZSAtIGluamVjdGVkIGZyb20gVHJhbnNpdGlvbkdyb3VwXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlIC0gaW5qZWN0ZWQgZnJvbSBUcmFuc2l0aW9uR3JvdXBcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBwdWxzYXRlcywgdHlwaWNhbGx5IGluZGljYXRpbmcgdGhlIGtleWJvYXJkIGZvY3VzIHN0YXRlIG9mIGFuIGVsZW1lbnQuXG4gICAqL1xuICBwdWxzYXRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIERpYW1ldGVyIG9mIHRoZSByaXBwbGUuXG4gICAqL1xuICByaXBwbGVTaXplOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVg6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBWZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVk6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBleGl0IGRlbGF5XG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBSaXBwbGU7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUb3VjaFJpcHBsZVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVG91Y2hSaXBwbGUnLCBzbG90KTtcbn1cbmNvbnN0IHRvdWNoUmlwcGxlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVRvdWNoUmlwcGxlJywgWydyb290JywgJ3JpcHBsZScsICdyaXBwbGVWaXNpYmxlJywgJ3JpcHBsZVB1bHNhdGUnLCAnY2hpbGQnLCAnY2hpbGRMZWF2aW5nJywgJ2NoaWxkUHVsc2F0ZSddKTtcbmV4cG9ydCBkZWZhdWx0IHRvdWNoUmlwcGxlQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjZW50ZXJcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdO1xubGV0IF8gPSB0ID0+IHQsXG4gIF90LFxuICBfdDIsXG4gIF90MyxcbiAgX3Q0O1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb25Hcm91cCB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgeyB1bnN0YWJsZV91c2VUaW1lb3V0IGFzIHVzZVRpbWVvdXQgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgUmlwcGxlIGZyb20gJy4vUmlwcGxlJztcbmltcG9ydCB0b3VjaFJpcHBsZUNsYXNzZXMgZnJvbSAnLi90b3VjaFJpcHBsZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IERVUkFUSU9OID0gNTUwO1xuZXhwb3J0IGNvbnN0IERFTEFZX1JJUFBMRSA9IDgwO1xuY29uc3QgZW50ZXJLZXlmcmFtZSA9IGtleWZyYW1lcyhfdCB8fCAoX3QgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcbiAgICBvcGFjaXR5OiAwLjE7XG4gIH1cblxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICAgIG9wYWNpdHk6IDAuMztcbiAgfVxuYCkpO1xuY29uc3QgZXhpdEtleWZyYW1lID0ga2V5ZnJhbWVzKF90MiB8fCAoX3QyID0gX2BcbiAgMCUge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cblxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG5gKSk7XG5jb25zdCBwdWxzYXRlS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QzIHx8IChfdDMgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgfVxuXG4gIDUwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjkyKTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIH1cbmApKTtcbmV4cG9ydCBjb25zdCBUb3VjaFJpcHBsZVJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZScsXG4gIHNsb3Q6ICdSb290J1xufSkoe1xuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHpJbmRleDogMCxcbiAgdG9wOiAwLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICBsZWZ0OiAwLFxuICBib3JkZXJSYWRpdXM6ICdpbmhlcml0J1xufSk7XG5cbi8vIFRoaXMgYHN0eWxlZCgpYCBmdW5jdGlvbiBpbnZva2VzIGtleWZyYW1lcy4gYHN0eWxlZC1jb21wb25lbnRzYCBvbmx5IHN1cHBvcnRzIGtleWZyYW1lc1xuLy8gaW4gc3RyaW5nIHRlbXBsYXRlcy4gRG8gbm90IGNvbnZlcnQgdGhlc2Ugc3R5bGVzIGluIEpTIG9iamVjdCBhcyBpdCB3aWxsIGJyZWFrLlxuZXhwb3J0IGNvbnN0IFRvdWNoUmlwcGxlUmlwcGxlID0gc3R5bGVkKFJpcHBsZSwge1xuICBuYW1lOiAnTXVpVG91Y2hSaXBwbGUnLFxuICBzbG90OiAnUmlwcGxlJ1xufSkoX3Q0IHx8IChfdDQgPSBfYFxuICBvcGFjaXR5OiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG5cbiAgJi4kezB9IHtcbiAgICBvcGFjaXR5OiAwLjM7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgICBhbmltYXRpb24tbmFtZTogJHswfTtcbiAgICBhbmltYXRpb24tZHVyYXRpb246ICR7MH1tcztcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiAkezB9O1xuICB9XG5cbiAgJi4kezB9IHtcbiAgICBhbmltYXRpb24tZHVyYXRpb246ICR7MH1tcztcbiAgfVxuXG4gICYgLiR7MH0ge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG4gIH1cblxuICAmIC4kezB9IHtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGFuaW1hdGlvbi1uYW1lOiAkezB9O1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHswfW1zO1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICR7MH07XG4gIH1cblxuICAmIC4kezB9IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgLyogQG5vZmxpcCAqL1xuICAgIGxlZnQ6IDBweDtcbiAgICB0b3A6IDA7XG4gICAgYW5pbWF0aW9uLW5hbWU6ICR7MH07XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAyNTAwbXM7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHswfTtcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTtcbiAgICBhbmltYXRpb24tZGVsYXk6IDIwMG1zO1xuICB9XG5gKSwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZVZpc2libGUsIGVudGVyS2V5ZnJhbWUsIERVUkFUSU9OLCAoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZVB1bHNhdGUsICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZExlYXZpbmcsIGV4aXRLZXlmcmFtZSwgRFVSQVRJT04sICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGRQdWxzYXRlLCBwdWxzYXRlS2V5ZnJhbWUsICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0KTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICpcbiAqIFRPRE8gdjU6IE1ha2UgcHJpdmF0ZVxuICovXG5jb25zdCBUb3VjaFJpcHBsZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvdWNoUmlwcGxlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUb3VjaFJpcHBsZSdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNlbnRlcjogY2VudGVyUHJvcCA9IGZhbHNlLFxuICAgICAgY2xhc3NlcyA9IHt9LFxuICAgICAgY2xhc3NOYW1lXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IFtyaXBwbGVzLCBzZXRSaXBwbGVzXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcbiAgY29uc3QgbmV4dEtleSA9IFJlYWN0LnVzZVJlZigwKTtcbiAgY29uc3QgcmlwcGxlQ2FsbGJhY2sgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQpIHtcbiAgICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQoKTtcbiAgICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfSwgW3JpcHBsZXNdKTtcblxuICAvLyBVc2VkIHRvIGZpbHRlciBvdXQgbW91c2UgZW11bGF0ZWQgZXZlbnRzIG9uIG1vYmlsZS5cbiAgY29uc3QgaWdub3JpbmdNb3VzZURvd24gPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICAvLyBXZSB1c2UgYSB0aW1lciBpbiBvcmRlciB0byBvbmx5IHNob3cgdGhlIHJpcHBsZXMgZm9yIHRvdWNoIFwiY2xpY2tcIiBsaWtlIGV2ZW50cy5cbiAgLy8gV2UgZG9uJ3Qgd2FudCB0byBkaXNwbGF5IHRoZSByaXBwbGUgZm9yIHRvdWNoIHNjcm9sbCBldmVudHMuXG4gIGNvbnN0IHN0YXJ0VGltZXIgPSB1c2VUaW1lb3V0KCk7XG5cbiAgLy8gVGhpcyBpcyB0aGUgaG9vayBjYWxsZWQgb25jZSB0aGUgcHJldmlvdXMgdGltZW91dCBpcyByZWFkeS5cbiAgY29uc3Qgc3RhcnRUaW1lckNvbW1pdCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgY29udGFpbmVyID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBzdGFydENvbW1pdCA9IFJlYWN0LnVzZUNhbGxiYWNrKHBhcmFtcyA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcHVsc2F0ZSxcbiAgICAgIHJpcHBsZVgsXG4gICAgICByaXBwbGVZLFxuICAgICAgcmlwcGxlU2l6ZSxcbiAgICAgIGNiXG4gICAgfSA9IHBhcmFtcztcbiAgICBzZXRSaXBwbGVzKG9sZFJpcHBsZXMgPT4gWy4uLm9sZFJpcHBsZXMsIC8qI19fUFVSRV9fKi9fanN4KFRvdWNoUmlwcGxlUmlwcGxlLCB7XG4gICAgICBjbGFzc2VzOiB7XG4gICAgICAgIHJpcHBsZTogY2xzeChjbGFzc2VzLnJpcHBsZSwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZSksXG4gICAgICAgIHJpcHBsZVZpc2libGU6IGNsc3goY2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlVmlzaWJsZSksXG4gICAgICAgIHJpcHBsZVB1bHNhdGU6IGNsc3goY2xhc3Nlcy5yaXBwbGVQdWxzYXRlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlUHVsc2F0ZSksXG4gICAgICAgIGNoaWxkOiBjbHN4KGNsYXNzZXMuY2hpbGQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZCksXG4gICAgICAgIGNoaWxkTGVhdmluZzogY2xzeChjbGFzc2VzLmNoaWxkTGVhdmluZywgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkTGVhdmluZyksXG4gICAgICAgIGNoaWxkUHVsc2F0ZTogY2xzeChjbGFzc2VzLmNoaWxkUHVsc2F0ZSwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkUHVsc2F0ZSlcbiAgICAgIH0sXG4gICAgICB0aW1lb3V0OiBEVVJBVElPTixcbiAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemVcbiAgICB9LCBuZXh0S2V5LmN1cnJlbnQpXSk7XG4gICAgbmV4dEtleS5jdXJyZW50ICs9IDE7XG4gICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IGNiO1xuICB9LCBbY2xhc3Nlc10pO1xuICBjb25zdCBzdGFydCA9IFJlYWN0LnVzZUNhbGxiYWNrKChldmVudCA9IHt9LCBvcHRpb25zID0ge30sIGNiID0gKCkgPT4ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwdWxzYXRlID0gZmFsc2UsXG4gICAgICBjZW50ZXIgPSBjZW50ZXJQcm9wIHx8IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgIGZha2VFbGVtZW50ID0gZmFsc2UgLy8gRm9yIHRlc3QgcHVycG9zZXNcbiAgICB9ID0gb3B0aW9ucztcbiAgICBpZiAoKGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC50eXBlKSA9PT0gJ21vdXNlZG93bicgJiYgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCkge1xuICAgICAgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoKGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC50eXBlKSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudCA9IGZha2VFbGVtZW50ID8gbnVsbCA6IGNvbnRhaW5lci5jdXJyZW50O1xuICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50ID8gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMFxuICAgIH07XG5cbiAgICAvLyBHZXQgdGhlIHNpemUgb2YgdGhlIHJpcHBsZVxuICAgIGxldCByaXBwbGVYO1xuICAgIGxldCByaXBwbGVZO1xuICAgIGxldCByaXBwbGVTaXplO1xuICAgIGlmIChjZW50ZXIgfHwgZXZlbnQgPT09IHVuZGVmaW5lZCB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xpZW50WCxcbiAgICAgICAgY2xpZW50WVxuICAgICAgfSA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAwID8gZXZlbnQudG91Y2hlc1swXSA6IGV2ZW50O1xuICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQoY2xpZW50WCAtIHJlY3QubGVmdCk7XG4gICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChjbGllbnRZIC0gcmVjdC50b3ApO1xuICAgIH1cbiAgICBpZiAoY2VudGVyKSB7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KCgyICogcmVjdC53aWR0aCAqKiAyICsgcmVjdC5oZWlnaHQgKiogMikgLyAzKTtcblxuICAgICAgLy8gRm9yIHNvbWUgcmVhc29uIHRoZSBhbmltYXRpb24gaXMgYnJva2VuIG9uIE1vYmlsZSBDaHJvbWUgaWYgdGhlIHNpemUgaXMgZXZlbi5cbiAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNpemVYID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSByaXBwbGVYKSwgcmlwcGxlWCkgKiAyICsgMjtcbiAgICAgIGNvbnN0IHNpemVZID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudEhlaWdodCA6IDApIC0gcmlwcGxlWSksIHJpcHBsZVkpICogMiArIDI7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KHNpemVYICoqIDIgKyBzaXplWSAqKiAyKTtcbiAgICB9XG5cbiAgICAvLyBUb3VjaGUgZGV2aWNlc1xuICAgIGlmIChldmVudCAhPSBudWxsICYmIGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIC8vIGNoZWNrIHRoYXQgdGhpcyBpc24ndCBhbm90aGVyIHRvdWNoc3RhcnQgZHVlIHRvIG11bHRpdG91Y2hcbiAgICAgIC8vIG90aGVyd2lzZSB3ZSB3aWxsIG9ubHkgY2xlYXIgYSBzaW5nbGUgdGltZXIgd2hlbiB1bm1vdW50aW5nIHdoaWxlIHR3b1xuICAgICAgLy8gYXJlIHJ1bm5pbmdcbiAgICAgIGlmIChzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgcmlwcGxlIGVmZmVjdC5cbiAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gKCkgPT4ge1xuICAgICAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgICAgIHB1bHNhdGUsXG4gICAgICAgICAgICByaXBwbGVYLFxuICAgICAgICAgICAgcmlwcGxlWSxcbiAgICAgICAgICAgIHJpcHBsZVNpemUsXG4gICAgICAgICAgICBjYlxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBEZWxheSB0aGUgZXhlY3V0aW9uIG9mIHRoZSByaXBwbGUgZWZmZWN0LlxuICAgICAgICAvLyBXZSBoYXZlIHRvIG1ha2UgYSB0cmFkZW9mZiB3aXRoIHRoaXMgZGVsYXkgdmFsdWUuXG4gICAgICAgIHN0YXJ0VGltZXIuc3RhcnQoREVMQVlfUklQUExFLCAoKSA9PiB7XG4gICAgICAgICAgaWYgKHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgcHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZSxcbiAgICAgICAgY2JcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2NlbnRlclByb3AsIHN0YXJ0Q29tbWl0LCBzdGFydFRpbWVyXSk7XG4gIGNvbnN0IHB1bHNhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc3RhcnQoe30sIHtcbiAgICAgIHB1bHNhdGU6IHRydWVcbiAgICB9KTtcbiAgfSwgW3N0YXJ0XSk7XG4gIGNvbnN0IHN0b3AgPSBSZWFjdC51c2VDYWxsYmFjaygoZXZlbnQsIGNiKSA9PiB7XG4gICAgc3RhcnRUaW1lci5jbGVhcigpO1xuXG4gICAgLy8gVGhlIHRvdWNoIGludGVyYWN0aW9uIG9jY3VycyB0b28gcXVpY2tseS5cbiAgICAvLyBXZSBzdGlsbCB3YW50IHRvIHNob3cgcmlwcGxlIGVmZmVjdC5cbiAgICBpZiAoKGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC50eXBlKSA9PT0gJ3RvdWNoZW5kJyAmJiBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQpIHtcbiAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgIHN0YXJ0VGltZXIuc3RhcnQoMCwgKCkgPT4ge1xuICAgICAgICBzdG9wKGV2ZW50LCBjYik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICBzZXRSaXBwbGVzKG9sZFJpcHBsZXMgPT4ge1xuICAgICAgaWYgKG9sZFJpcHBsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gb2xkUmlwcGxlcy5zbGljZSgxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvbGRSaXBwbGVzO1xuICAgIH0pO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW3N0YXJ0VGltZXJdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsICgpID0+ICh7XG4gICAgcHVsc2F0ZSxcbiAgICBzdGFydCxcbiAgICBzdG9wXG4gIH0pLCBbcHVsc2F0ZSwgc3RhcnQsIHN0b3BdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRvdWNoUmlwcGxlUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeCh0b3VjaFJpcHBsZUNsYXNzZXMucm9vdCwgY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogY29udGFpbmVyXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Hcm91cCwge1xuICAgICAgY29tcG9uZW50OiBudWxsLFxuICAgICAgZXhpdDogdHJ1ZSxcbiAgICAgIGNoaWxkcmVuOiByaXBwbGVzXG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb3VjaFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgc3RhcnRzIGF0IHRoZSBjZW50ZXIgb2YgdGhlIGNvbXBvbmVudFxuICAgKiByYXRoZXIgdGhhbiBhdCB0aGUgcG9pbnQgb2YgaW50ZXJhY3Rpb24uXG4gICAqL1xuICBjZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVG91Y2hSaXBwbGU7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlCdXR0b25CYXNlJywgc2xvdCk7XG59XG5jb25zdCBidXR0b25CYXNlQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUJ1dHRvbkJhc2UnLCBbJ3Jvb3QnLCAnZGlzYWJsZWQnLCAnZm9jdXNWaXNpYmxlJ10pO1xuZXhwb3J0IGRlZmF1bHQgYnV0dG9uQmFzZUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWN0aW9uXCIsIFwiY2VudGVyUmlwcGxlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVSaXBwbGVcIiwgXCJkaXNhYmxlVG91Y2hSaXBwbGVcIiwgXCJmb2N1c1JpcHBsZVwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcIkxpbmtDb21wb25lbnRcIiwgXCJvbkJsdXJcIiwgXCJvbkNsaWNrXCIsIFwib25Db250ZXh0TWVudVwiLCBcIm9uRHJhZ0xlYXZlXCIsIFwib25Gb2N1c1wiLCBcIm9uRm9jdXNWaXNpYmxlXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcIm9uTW91c2VEb3duXCIsIFwib25Nb3VzZUxlYXZlXCIsIFwib25Nb3VzZVVwXCIsIFwib25Ub3VjaEVuZFwiLCBcIm9uVG91Y2hNb3ZlXCIsIFwib25Ub3VjaFN0YXJ0XCIsIFwidGFiSW5kZXhcIiwgXCJUb3VjaFJpcHBsZVByb3BzXCIsIFwidG91Y2hSaXBwbGVSZWZcIiwgXCJ0eXBlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsIHJlZlR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHVzZUlzRm9jdXNWaXNpYmxlIGZyb20gJy4uL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlJztcbmltcG9ydCBUb3VjaFJpcHBsZSBmcm9tICcuL1RvdWNoUmlwcGxlJztcbmltcG9ydCBidXR0b25CYXNlQ2xhc3NlcywgeyBnZXRCdXR0b25CYXNlVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9idXR0b25CYXNlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGRpc2FibGVkLFxuICAgIGZvY3VzVmlzaWJsZSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZm9jdXNWaXNpYmxlICYmICdmb2N1c1Zpc2libGUnXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIGlmIChmb2N1c1Zpc2libGUgJiYgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKSB7XG4gICAgY29tcG9zZWRDbGFzc2VzLnJvb3QgKz0gYCAke2ZvY3VzVmlzaWJsZUNsYXNzTmFtZX1gO1xuICB9XG4gIHJldHVybiBjb21wb3NlZENsYXNzZXM7XG59O1xuZXhwb3J0IGNvbnN0IEJ1dHRvbkJhc2VSb290ID0gc3R5bGVkKCdidXR0b24nLCB7XG4gIG5hbWU6ICdNdWlCdXR0b25CYXNlJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSh7XG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgLy8gUmVzZXQgZGVmYXVsdCB2YWx1ZVxuICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICBvdXRsaW5lOiAwLFxuICBib3JkZXI6IDAsXG4gIG1hcmdpbjogMCxcbiAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gU2FmYXJpXG4gIGJvcmRlclJhZGl1czogMCxcbiAgcGFkZGluZzogMCxcbiAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIEZpcmVmb3hcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gIE1vekFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgV2Via2l0QXBwZWFyYW5jZTogJ25vbmUnLFxuICAvLyBSZXNldFxuICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAvLyBTbyB3ZSB0YWtlIHByZWNlZGVudCBvdmVyIHRoZSBzdHlsZSBvZiBhIG5hdGl2ZSA8YSAvPiBlbGVtZW50LlxuICBjb2xvcjogJ2luaGVyaXQnLFxuICAnJjo6LW1vei1mb2N1cy1pbm5lcic6IHtcbiAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuICB9LFxuICBbYCYuJHtidXR0b25CYXNlQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAvLyBEaXNhYmxlIGxpbmsgaW50ZXJhY3Rpb25zXG4gICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgfSxcbiAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICBjb2xvckFkanVzdDogJ2V4YWN0J1xuICB9XG59KTtcblxuLyoqXG4gKiBgQnV0dG9uQmFzZWAgY29udGFpbnMgYXMgZmV3IHN0eWxlcyBhcyBwb3NzaWJsZS5cbiAqIEl0IGFpbXMgdG8gYmUgYSBzaW1wbGUgYnVpbGRpbmcgYmxvY2sgZm9yIGNyZWF0aW5nIGEgYnV0dG9uLlxuICogSXQgY29udGFpbnMgYSBsb2FkIG9mIHN0eWxlIHJlc2V0IGFuZCBzb21lIGZvY3VzL3JpcHBsZSBsb2dpYy5cbiAqL1xuY29uc3QgQnV0dG9uQmFzZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJ1dHRvbkJhc2UoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUJ1dHRvbkJhc2UnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhY3Rpb24sXG4gICAgICBjZW50ZXJSaXBwbGUgPSBmYWxzZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gJ2J1dHRvbicsXG4gICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgZGlzYWJsZVJpcHBsZSA9IGZhbHNlLFxuICAgICAgZGlzYWJsZVRvdWNoUmlwcGxlID0gZmFsc2UsXG4gICAgICBmb2N1c1JpcHBsZSA9IGZhbHNlLFxuICAgICAgTGlua0NvbXBvbmVudCA9ICdhJyxcbiAgICAgIG9uQmx1cixcbiAgICAgIG9uQ2xpY2ssXG4gICAgICBvbkNvbnRleHRNZW51LFxuICAgICAgb25EcmFnTGVhdmUsXG4gICAgICBvbkZvY3VzLFxuICAgICAgb25Gb2N1c1Zpc2libGUsXG4gICAgICBvbktleURvd24sXG4gICAgICBvbktleVVwLFxuICAgICAgb25Nb3VzZURvd24sXG4gICAgICBvbk1vdXNlTGVhdmUsXG4gICAgICBvbk1vdXNlVXAsXG4gICAgICBvblRvdWNoRW5kLFxuICAgICAgb25Ub3VjaE1vdmUsXG4gICAgICBvblRvdWNoU3RhcnQsXG4gICAgICB0YWJJbmRleCA9IDAsXG4gICAgICBUb3VjaFJpcHBsZVByb3BzLFxuICAgICAgdG91Y2hSaXBwbGVSZWYsXG4gICAgICB0eXBlXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGJ1dHRvblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgcmlwcGxlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSaXBwbGVSZWYgPSB1c2VGb3JrUmVmKHJpcHBsZVJlZiwgdG91Y2hSaXBwbGVSZWYpO1xuICBjb25zdCB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNWaXNpYmxlLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1clZpc2libGUsXG4gICAgcmVmOiBmb2N1c1Zpc2libGVSZWZcbiAgfSA9IHVzZUlzRm9jdXNWaXNpYmxlKCk7XG4gIGNvbnN0IFtmb2N1c1Zpc2libGUsIHNldEZvY3VzVmlzaWJsZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGlmIChkaXNhYmxlZCAmJiBmb2N1c1Zpc2libGUpIHtcbiAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICB9XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCAoKSA9PiAoe1xuICAgIGZvY3VzVmlzaWJsZTogKCkgPT4ge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuICAgICAgYnV0dG9uUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0pLCBbXSk7XG4gIGNvbnN0IFttb3VudGVkU3RhdGUsIHNldE1vdW50ZWRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0TW91bnRlZFN0YXRlKHRydWUpO1xuICB9LCBbXSk7XG4gIGNvbnN0IGVuYWJsZVRvdWNoUmlwcGxlID0gbW91bnRlZFN0YXRlICYmICFkaXNhYmxlUmlwcGxlICYmICFkaXNhYmxlZDtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzUmlwcGxlICYmICFkaXNhYmxlUmlwcGxlICYmIG1vdW50ZWRTdGF0ZSkge1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQucHVsc2F0ZSgpO1xuICAgIH1cbiAgfSwgW2Rpc2FibGVSaXBwbGUsIGZvY3VzUmlwcGxlLCBmb2N1c1Zpc2libGUsIG1vdW50ZWRTdGF0ZV0pO1xuICBmdW5jdGlvbiB1c2VSaXBwbGVIYW5kbGVyKHJpcHBsZUFjdGlvbiwgZXZlbnRDYWxsYmFjaywgc2tpcFJpcHBsZUFjdGlvbiA9IGRpc2FibGVUb3VjaFJpcHBsZSkge1xuICAgIHJldHVybiB1c2VFdmVudENhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICAgIGlmIChldmVudENhbGxiYWNrKSB7XG4gICAgICAgIGV2ZW50Q2FsbGJhY2soZXZlbnQpO1xuICAgICAgfVxuICAgICAgY29uc3QgaWdub3JlID0gc2tpcFJpcHBsZUFjdGlvbjtcbiAgICAgIGlmICghaWdub3JlICYmIHJpcHBsZVJlZi5jdXJyZW50KSB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50W3JpcHBsZUFjdGlvbl0oZXZlbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgaGFuZGxlTW91c2VEb3duID0gdXNlUmlwcGxlSGFuZGxlcignc3RhcnQnLCBvbk1vdXNlRG93bik7XG4gIGNvbnN0IGhhbmRsZUNvbnRleHRNZW51ID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uQ29udGV4dE1lbnUpO1xuICBjb25zdCBoYW5kbGVEcmFnTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25EcmFnTGVhdmUpO1xuICBjb25zdCBoYW5kbGVNb3VzZVVwID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uTW91c2VVcCk7XG4gIGNvbnN0IGhhbmRsZU1vdXNlTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgZXZlbnQgPT4ge1xuICAgIGlmIChmb2N1c1Zpc2libGUpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGlmIChvbk1vdXNlTGVhdmUpIHtcbiAgICAgIG9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlVG91Y2hTdGFydCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Ub3VjaFN0YXJ0KTtcbiAgY29uc3QgaGFuZGxlVG91Y2hFbmQgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Ub3VjaEVuZCk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoTW92ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoTW92ZSk7XG4gIGNvbnN0IGhhbmRsZUJsdXIgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgZXZlbnQgPT4ge1xuICAgIGhhbmRsZUJsdXJWaXNpYmxlKGV2ZW50KTtcbiAgICBpZiAoaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9PT0gZmFsc2UpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gICAgfVxuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuICB9LCBmYWxzZSk7XG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgLy8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzc3NjlcbiAgICBpZiAoIWJ1dHRvblJlZi5jdXJyZW50KSB7XG4gICAgICBidXR0b25SZWYuY3VycmVudCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgfVxuICAgIGhhbmRsZUZvY3VzVmlzaWJsZShldmVudCk7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IHRydWUpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICAgIGlmIChvbkZvY3VzVmlzaWJsZSkge1xuICAgICAgICBvbkZvY3VzVmlzaWJsZShldmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBpc05vbk5hdGl2ZUJ1dHRvbiA9ICgpID0+IHtcbiAgICBjb25zdCBidXR0b24gPSBidXR0b25SZWYuY3VycmVudDtcbiAgICByZXR1cm4gY29tcG9uZW50ICYmIGNvbXBvbmVudCAhPT0gJ2J1dHRvbicgJiYgIShidXR0b24udGFnTmFtZSA9PT0gJ0EnICYmIGJ1dHRvbi5ocmVmKTtcbiAgfTtcblxuICAvKipcbiAgICogSUUxMSBzaGltIGZvciBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9yZXBlYXRcbiAgICovXG4gIGNvbnN0IGtleWRvd25SZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBjb25zdCBoYW5kbGVLZXlEb3duID0gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgLy8gQ2hlY2sgaWYga2V5IGlzIGFscmVhZHkgZG93biB0byBhdm9pZCByZXBlYXRzIGJlaW5nIGNvdW50ZWQgYXMgbXVsdGlwbGUgYWN0aXZhdGlvbnNcbiAgICBpZiAoZm9jdXNSaXBwbGUgJiYgIWtleWRvd25SZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUgJiYgcmlwcGxlUmVmLmN1cnJlbnQgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IHRydWU7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCAoKSA9PiB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0YXJ0KGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGlmIChvbktleURvd24pIHtcbiAgICAgIG9uS2V5RG93bihldmVudCk7XG4gICAgfVxuXG4gICAgLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG4gICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJ0VudGVyJyAmJiAhZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAob25DbGljaykge1xuICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVLZXlVcCA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIGNhbGxpbmcgcHJldmVudERlZmF1bHQgaW4ga2V5VXAgb24gYSA8YnV0dG9uPiB3aWxsIG5vdCBkaXNwYXRjaCBhIGNsaWNrIGV2ZW50IGlmIFNwYWNlIGlzIHByZXNzZWRcbiAgICAvLyBodHRwczovL2NvZGVzYW5kYm94LmlvL3Avc2FuZGJveC9idXR0b24ta2V5dXAtcHJldmVudGRlZmF1bHQtZG43ZjBcbiAgICBpZiAoZm9jdXNSaXBwbGUgJiYgZXZlbnQua2V5ID09PSAnICcgJiYgcmlwcGxlUmVmLmN1cnJlbnQgJiYgZm9jdXNWaXNpYmxlICYmICFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBrZXlkb3duUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0b3AoZXZlbnQsICgpID0+IHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnQucHVsc2F0ZShldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKG9uS2V5VXApIHtcbiAgICAgIG9uS2V5VXAoZXZlbnQpO1xuICAgIH1cblxuICAgIC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuICAgIGlmIChvbkNsaWNrICYmIGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJyAnICYmICFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICBsZXQgQ29tcG9uZW50UHJvcCA9IGNvbXBvbmVudDtcbiAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nICYmIChvdGhlci5ocmVmIHx8IG90aGVyLnRvKSkge1xuICAgIENvbXBvbmVudFByb3AgPSBMaW5rQ29tcG9uZW50O1xuICB9XG4gIGNvbnN0IGJ1dHRvblByb3BzID0ge307XG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJykge1xuICAgIGJ1dHRvblByb3BzLnR5cGUgPSB0eXBlID09PSB1bmRlZmluZWQgPyAnYnV0dG9uJyA6IHR5cGU7XG4gICAgYnV0dG9uUHJvcHMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIW90aGVyLmhyZWYgJiYgIW90aGVyLnRvKSB7XG4gICAgICBidXR0b25Qcm9wcy5yb2xlID0gJ2J1dHRvbic7XG4gICAgfVxuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgYnV0dG9uUHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA9IGRpc2FibGVkO1xuICAgIH1cbiAgfVxuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKHJlZiwgZm9jdXNWaXNpYmxlUmVmLCBidXR0b25SZWYpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoZW5hYmxlVG91Y2hSaXBwbGUgJiYgIXJpcHBsZVJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFRoZSBgY29tcG9uZW50YCBwcm9wIHByb3ZpZGVkIHRvIEJ1dHRvbkJhc2UgaXMgaW52YWxpZC4nLCAnUGxlYXNlIG1ha2Ugc3VyZSB0aGUgY2hpbGRyZW4gcHJvcCBpcyByZW5kZXJlZCBpbiB0aGlzIGN1c3RvbSBjb21wb25lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtlbmFibGVUb3VjaFJpcHBsZV0pO1xuICB9XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjZW50ZXJSaXBwbGUsXG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVSaXBwbGUsXG4gICAgZGlzYWJsZVRvdWNoUmlwcGxlLFxuICAgIGZvY3VzUmlwcGxlLFxuICAgIHRhYkluZGV4LFxuICAgIGZvY3VzVmlzaWJsZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKEJ1dHRvbkJhc2VSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IENvbXBvbmVudFByb3AsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIG9uQ29udGV4dE1lbnU6IGhhbmRsZUNvbnRleHRNZW51LFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICBvbktleVVwOiBoYW5kbGVLZXlVcCxcbiAgICBvbk1vdXNlRG93bjogaGFuZGxlTW91c2VEb3duLFxuICAgIG9uTW91c2VMZWF2ZTogaGFuZGxlTW91c2VMZWF2ZSxcbiAgICBvbk1vdXNlVXA6IGhhbmRsZU1vdXNlVXAsXG4gICAgb25EcmFnTGVhdmU6IGhhbmRsZURyYWdMZWF2ZSxcbiAgICBvblRvdWNoRW5kOiBoYW5kbGVUb3VjaEVuZCxcbiAgICBvblRvdWNoTW92ZTogaGFuZGxlVG91Y2hNb3ZlLFxuICAgIG9uVG91Y2hTdGFydDogaGFuZGxlVG91Y2hTdGFydCxcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICB0YWJJbmRleDogZGlzYWJsZWQgPyAtMSA6IHRhYkluZGV4LFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgYnV0dG9uUHJvcHMsIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFtjaGlsZHJlbiwgZW5hYmxlVG91Y2hSaXBwbGUgP1xuICAgIC8qI19fUFVSRV9fKi9cbiAgICAvKiBUb3VjaFJpcHBsZSBpcyBvbmx5IG5lZWRlZCBjbGllbnQtc2lkZSwgeDIgYm9vc3Qgb24gdGhlIHNlcnZlci4gKi9cbiAgICBfanN4KFRvdWNoUmlwcGxlLCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IGhhbmRsZVJpcHBsZVJlZixcbiAgICAgIGNlbnRlcjogY2VudGVyUmlwcGxlXG4gICAgfSwgVG91Y2hSaXBwbGVQcm9wcykpIDogbnVsbF1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b25CYXNlLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEEgcmVmIGZvciBpbXBlcmF0aXZlIGFjdGlvbnMuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIGBmb2N1c1Zpc2libGUoKWAgYWN0aW9uLlxuICAgKi9cbiAgYWN0aW9uOiByZWZUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlcyBhcmUgY2VudGVyZWQuXG4gICAqIFRoZXkgd29uJ3Qgc3RhcnQgYXQgdGhlIGN1cnNvciBpbnRlcmFjdGlvbiBwb3NpdGlvbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGNlbnRlclJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IGlzIGRpc2FibGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2l0aG91dCBhIHJpcHBsZSB0aGVyZSBpcyBubyBzdHlsaW5nIGZvciA6Zm9jdXMtdmlzaWJsZSBieSBkZWZhdWx0LiBCZSBzdXJlXG4gICAqIHRvIGhpZ2hsaWdodCB0aGUgZWxlbWVudCBieSBhcHBseWluZyBzZXBhcmF0ZSBzdHlsZXMgd2l0aCB0aGUgYC5NdWktZm9jdXNWaXNpYmxlYCBjbGFzcy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdG91Y2ggcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVUb3VjaFJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGhhdmUgYSBrZXlib2FyZCBmb2N1cyByaXBwbGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgaWRlbnRpZnkgd2hpY2ggZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW5zIHRoZSBmb2N1cyB0aHJvdWdoIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9IRUFEL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhyZWY6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLmFueSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCB0byByZW5kZXIgYSBsaW5rIHdoZW4gdGhlIGBocmVmYCBwcm9wIGlzIHByb3ZpZGVkLlxuICAgKiBAZGVmYXVsdCAnYSdcbiAgICovXG4gIExpbmtDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ29udGV4dE1lbnU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25EcmFnTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZCB3aXRoIGEga2V5Ym9hcmQuXG4gICAqIFdlIHRyaWdnZXIgYSBgb25Gb2N1c2AgY2FsbGJhY2sgdG9vLlxuICAgKi9cbiAgb25Gb2N1c1Zpc2libGU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZURvd246IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VVcDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoRW5kOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hNb3ZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hTdGFydDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGBUb3VjaFJpcHBsZWAgZWxlbWVudC5cbiAgICovXG4gIFRvdWNoUmlwcGxlUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBBIHJlZiB0aGF0IHBvaW50cyB0byB0aGUgYFRvdWNoUmlwcGxlYCBlbGVtZW50LlxuICAgKi9cbiAgdG91Y2hSaXBwbGVSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdWxzYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgc3RhcnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBzdG9wOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSlcbiAgfSldKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2J1dHRvbicsICdyZXNldCcsICdzdWJtaXQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkJhc2U7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRJY29uQnV0dG9uVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlJY29uQnV0dG9uJywgc2xvdCk7XG59XG5jb25zdCBpY29uQnV0dG9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUljb25CdXR0b24nLCBbJ3Jvb3QnLCAnZGlzYWJsZWQnLCAnY29sb3JJbmhlcml0JywgJ2NvbG9yUHJpbWFyeScsICdjb2xvclNlY29uZGFyeScsICdjb2xvckVycm9yJywgJ2NvbG9ySW5mbycsICdjb2xvclN1Y2Nlc3MnLCAnY29sb3JXYXJuaW5nJywgJ2VkZ2VTdGFydCcsICdlZGdlRW5kJywgJ3NpemVTbWFsbCcsICdzaXplTWVkaXVtJywgJ3NpemVMYXJnZSddKTtcbmV4cG9ydCBkZWZhdWx0IGljb25CdXR0b25DbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImVkZ2VcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJzaXplXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgaWNvbkJ1dHRvbkNsYXNzZXMsIHsgZ2V0SWNvbkJ1dHRvblV0aWxpdHlDbGFzcyB9IGZyb20gJy4vaWNvbkJ1dHRvbkNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVkLFxuICAgIGNvbG9yLFxuICAgIGVkZ2UsXG4gICAgc2l6ZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgY29sb3IgIT09ICdkZWZhdWx0JyAmJiBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGVkZ2UgJiYgYGVkZ2Uke2NhcGl0YWxpemUoZWRnZSl9YCwgYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJY29uQnV0dG9uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBJY29uQnV0dG9uUm9vdCA9IHN0eWxlZChCdXR0b25CYXNlLCB7XG4gIG5hbWU6ICdNdWlJY29uQnV0dG9uJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBvd25lclN0YXRlLmVkZ2UgJiYgc3R5bGVzW2BlZGdlJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuZWRnZSl9YF0sIHN0eWxlc1tgc2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgZmxleDogJzAgMCBhdXRvJyxcbiAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyNCksXG4gIHBhZGRpbmc6IDgsXG4gIGJvcmRlclJhZGl1czogJzUwJScsXG4gIG92ZXJmbG93OiAndmlzaWJsZScsXG4gIC8vIEV4cGxpY2l0bHkgc2V0IHRoZSBkZWZhdWx0IHZhbHVlIHRvIHNvbHZlIGEgYnVnIG9uIElFMTEuXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH0pXG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlUmlwcGxlICYmIHtcbiAgJyY6aG92ZXInOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZUNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgIH1cbiAgfVxufSwgb3duZXJTdGF0ZS5lZGdlID09PSAnc3RhcnQnICYmIHtcbiAgbWFyZ2luTGVmdDogb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnID8gLTMgOiAtMTJcbn0sIG93bmVyU3RhdGUuZWRnZSA9PT0gJ2VuZCcgJiYge1xuICBtYXJnaW5SaWdodDogb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnID8gLTMgOiAtMTJcbn0pLCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3BhbGV0dGU7XG4gIGNvbnN0IHBhbGV0dGUgPSAoX3BhbGV0dGUgPSAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYWxldHRlW293bmVyU3RhdGUuY29sb3JdO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuY29sb3IgPT09ICdpbmhlcml0JyAmJiB7XG4gICAgY29sb3I6ICdpbmhlcml0J1xuICB9LCBvd25lclN0YXRlLmNvbG9yICE9PSAnaW5oZXJpdCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2RlZmF1bHQnICYmIF9leHRlbmRzKHtcbiAgICBjb2xvcjogcGFsZXR0ZSA9PSBudWxsID8gdm9pZCAwIDogcGFsZXR0ZS5tYWluXG4gIH0sICFvd25lclN0YXRlLmRpc2FibGVSaXBwbGUgJiYge1xuICAgICcmOmhvdmVyJzogX2V4dGVuZHMoe30sIHBhbGV0dGUgJiYge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHtwYWxldHRlLm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHl9KWAgOiBhbHBoYShwYWxldHRlLm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSlcbiAgICB9LCB7XG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgIH1cbiAgICB9KVxuICB9KSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBwYWRkaW5nOiA1LFxuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTgpXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ2xhcmdlJyAmJiB7XG4gICAgcGFkZGluZzogMTIsXG4gICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyOClcbiAgfSwge1xuICAgIFtgJi4ke2ljb25CdXR0b25DbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfVxuICB9KTtcbn0pO1xuXG4vKipcbiAqIFJlZmVyIHRvIHRoZSBbSWNvbnNdKC9tYXRlcmlhbC11aS9pY29ucy8pIHNlY3Rpb24gb2YgdGhlIGRvY3VtZW50YXRpb25cbiAqIHJlZ2FyZGluZyB0aGUgYXZhaWxhYmxlIGljb24gb3B0aW9ucy5cbiAqL1xuY29uc3QgSWNvbkJ1dHRvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEljb25CdXR0b24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUljb25CdXR0b24nXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBlZGdlID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ2RlZmF1bHQnLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IGZhbHNlLFxuICAgICAgc2l6ZSA9ICdtZWRpdW0nXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBlZGdlLFxuICAgIGNvbG9yLFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBzaXplXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChJY29uQnV0dG9uUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgY2VudGVyUmlwcGxlOiB0cnVlLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSWNvbkJ1dHRvbi5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5LlxuICAgKi9cbiAgY2hpbGRyZW46IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ub2RlLCBwcm9wcyA9PiB7XG4gICAgY29uc3QgZm91bmQgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKS5zb21lKGNoaWxkID0+IC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgJiYgY2hpbGQucHJvcHMub25DbGljayk7XG4gICAgaWYgKGZvdW5kKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFsnTVVJOiBZb3UgYXJlIHByb3ZpZGluZyBhbiBvbkNsaWNrIGV2ZW50IGxpc3RlbmVyIHRvIGEgY2hpbGQgb2YgYSBidXR0b24gZWxlbWVudC4nLCAnUHJlZmVyIGFwcGx5aW5nIGl0IHRvIHRoZSBJY29uQnV0dG9uIGRpcmVjdGx5LicsICdUaGlzIGd1YXJhbnRlZXMgdGhhdCB0aGUgd2hvbGUgPGJ1dHRvbj4gd2lsbCBiZSByZXNwb25zaXZlIHRvIGNsaWNrIGV2ZW50cy4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAnZGVmYXVsdCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnZGVmYXVsdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IGlzIGRpc2FibGVkLlxuICAgKlxuICAgKiDimqDvuI8gV2l0aG91dCBhIHJpcHBsZSB0aGVyZSBpcyBubyBzdHlsaW5nIGZvciA6Zm9jdXMtdmlzaWJsZSBieSBkZWZhdWx0LiBCZSBzdXJlXG4gICAqIHRvIGhpZ2hsaWdodCB0aGUgZWxlbWVudCBieSBhcHBseWluZyBzZXBhcmF0ZSBzdHlsZXMgd2l0aCB0aGUgYC5NdWktZm9jdXNWaXNpYmxlYCBjbGFzcy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgZ2l2ZW4sIHVzZXMgYSBuZWdhdGl2ZSBtYXJnaW4gdG8gY291bnRlcmFjdCB0aGUgcGFkZGluZyBvbiBvbmVcbiAgICogc2lkZSAodGhpcyBpcyBvZnRlbiBoZWxwZnVsIGZvciBhbGlnbmluZyB0aGUgbGVmdCBvciByaWdodFxuICAgKiBzaWRlIG9mIHRoZSBpY29uIHdpdGggY29udGVudCBhYm92ZSBvciBiZWxvdywgd2l0aG91dCBydWluaW5nIHRoZSBib3JkZXJcbiAgICogc2l6ZSBhbmQgc2hhcGUpLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZWRnZTogUHJvcFR5cGVzLm9uZU9mKFsnZW5kJywgJ3N0YXJ0JywgZmFsc2VdKSxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIGBzbWFsbGAgaXMgZXF1aXZhbGVudCB0byB0aGUgZGVuc2UgYnV0dG9uIHN0eWxpbmcuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgSWNvbkJ1dHRvbjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmNvbnN0IHVzZVByZXZpb3VzUHJvcHMgPSB2YWx1ZSA9PiB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZih7fSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZWYuY3VycmVudDtcbn07XG5leHBvcnQgZGVmYXVsdCB1c2VQcmV2aW91c1Byb3BzOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFkZ2VVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUJhZGdlJywgc2xvdCk7XG59XG5jb25zdCBiYWRnZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCYWRnZScsIFsncm9vdCcsICdiYWRnZScsICdkb3QnLCAnc3RhbmRhcmQnLCAnYW5jaG9yT3JpZ2luVG9wUmlnaHQnLCAnYW5jaG9yT3JpZ2luQm90dG9tUmlnaHQnLCAnYW5jaG9yT3JpZ2luVG9wTGVmdCcsICdhbmNob3JPcmlnaW5Cb3R0b21MZWZ0JywgJ2ludmlzaWJsZScsICdjb2xvckVycm9yJywgJ2NvbG9ySW5mbycsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9yV2FybmluZycsICdvdmVybGFwUmVjdGFuZ3VsYXInLCAnb3ZlcmxhcENpcmN1bGFyJyxcbi8vIFRPRE86IHY2IHJlbW92ZSB0aGUgb3ZlcmxhcCB2YWx1ZSBmcm9tIHRoZXNlIGNsYXNzIGtleXNcbidhbmNob3JPcmlnaW5Ub3BMZWZ0Q2lyY3VsYXInLCAnYW5jaG9yT3JpZ2luVG9wTGVmdFJlY3Rhbmd1bGFyJywgJ2FuY2hvck9yaWdpblRvcFJpZ2h0Q2lyY3VsYXInLCAnYW5jaG9yT3JpZ2luVG9wUmlnaHRSZWN0YW5ndWxhcicsICdhbmNob3JPcmlnaW5Cb3R0b21MZWZ0Q2lyY3VsYXInLCAnYW5jaG9yT3JpZ2luQm90dG9tTGVmdFJlY3Rhbmd1bGFyJywgJ2FuY2hvck9yaWdpbkJvdHRvbVJpZ2h0Q2lyY3VsYXInLCAnYW5jaG9yT3JpZ2luQm90dG9tUmlnaHRSZWN0YW5ndWxhciddKTtcbmV4cG9ydCBkZWZhdWx0IGJhZGdlQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhbmNob3JPcmlnaW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjbGFzc2VzXCIsIFwiY29tcG9uZW50XCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwib3ZlcmxhcFwiLCBcImNvbG9yXCIsIFwiaW52aXNpYmxlXCIsIFwibWF4XCIsIFwiYmFkZ2VDb250ZW50XCIsIFwic2xvdHNcIiwgXCJzbG90UHJvcHNcIiwgXCJzaG93WmVyb1wiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1c2VQcmV2aW91c1Byb3BzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyB1c2VCYWRnZSB9IGZyb20gJ0BtdWkvYmFzZS91c2VCYWRnZSc7XG5pbXBvcnQgeyB1c2VTbG90UHJvcHMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHsgc3R5bGVkLCBjcmVhdGVVc2VUaGVtZVByb3BzIH0gZnJvbSAnLi4vemVyby1zdHlsZWQnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgYmFkZ2VDbGFzc2VzLCB7IGdldEJhZGdlVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9iYWRnZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFJBRElVU19TVEFOREFSRCA9IDEwO1xuY29uc3QgUkFESVVTX0RPVCA9IDQ7XG5jb25zdCB1c2VUaGVtZVByb3BzID0gY3JlYXRlVXNlVGhlbWVQcm9wcygnTXVpQmFkZ2UnKTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb2xvcixcbiAgICBhbmNob3JPcmlnaW4sXG4gICAgaW52aXNpYmxlLFxuICAgIG92ZXJsYXAsXG4gICAgdmFyaWFudCxcbiAgICBjbGFzc2VzID0ge31cbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddLFxuICAgIGJhZGdlOiBbJ2JhZGdlJywgdmFyaWFudCwgaW52aXNpYmxlICYmICdpbnZpc2libGUnLCBgYW5jaG9yT3JpZ2luJHtjYXBpdGFsaXplKGFuY2hvck9yaWdpbi52ZXJ0aWNhbCl9JHtjYXBpdGFsaXplKGFuY2hvck9yaWdpbi5ob3Jpem9udGFsKX1gLCBgYW5jaG9yT3JpZ2luJHtjYXBpdGFsaXplKGFuY2hvck9yaWdpbi52ZXJ0aWNhbCl9JHtjYXBpdGFsaXplKGFuY2hvck9yaWdpbi5ob3Jpem9udGFsKX0ke2NhcGl0YWxpemUob3ZlcmxhcCl9YCwgYG92ZXJsYXAke2NhcGl0YWxpemUob3ZlcmxhcCl9YCwgY29sb3IgIT09ICdkZWZhdWx0JyAmJiBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0QmFkZ2VVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IEJhZGdlUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUJhZGdlJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSh7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAvLyBGb3IgY29ycmVjdCBhbGlnbm1lbnQgd2l0aCB0aGUgdGV4dC5cbiAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gIGZsZXhTaHJpbms6IDBcbn0pO1xuY29uc3QgQmFkZ2VCYWRnZSA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUJhZGdlJyxcbiAgc2xvdDogJ0JhZGdlJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5iYWRnZSwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIHN0eWxlc1tgYW5jaG9yT3JpZ2luJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLnZlcnRpY2FsKX0ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5hbmNob3JPcmlnaW4uaG9yaXpvbnRhbCl9JHtjYXBpdGFsaXplKG93bmVyU3RhdGUub3ZlcmxhcCl9YF0sIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBvd25lclN0YXRlLmludmlzaWJsZSAmJiBzdHlsZXMuaW52aXNpYmxlXTtcbiAgfVxufSkoKHtcbiAgdGhlbWVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSR2YXJzO1xuICByZXR1cm4ge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBmbGV4V3JhcDogJ3dyYXAnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBhbGlnbkNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW0sXG4gICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMiksXG4gICAgbWluV2lkdGg6IFJBRElVU19TVEFOREFSRCAqIDIsXG4gICAgbGluZUhlaWdodDogMSxcbiAgICBwYWRkaW5nOiAnMCA2cHgnLFxuICAgIGhlaWdodDogUkFESVVTX1NUQU5EQVJEICogMixcbiAgICBib3JkZXJSYWRpdXM6IFJBRElVU19TVEFOREFSRCxcbiAgICB6SW5kZXg6IDEsXG4gICAgLy8gUmVuZGVyIHRoZSBiYWRnZSBvbiB0b3Agb2YgcG90ZW50aWFsIHJpcHBsZXMuXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQsXG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW5cbiAgICB9KSxcbiAgICB2YXJpYW50czogWy4uLk9iamVjdC5rZXlzKCgoX3RoZW1lJHZhcnMgPSB0aGVtZS52YXJzKSAhPSBudWxsID8gX3RoZW1lJHZhcnMgOiB0aGVtZSkucGFsZXR0ZSkuZmlsdGVyKGtleSA9PiB7XG4gICAgICB2YXIgX3RoZW1lJHZhcnMyLCBfdGhlbWUkdmFyczM7XG4gICAgICByZXR1cm4gKChfdGhlbWUkdmFyczIgPSB0aGVtZS52YXJzKSAhPSBudWxsID8gX3RoZW1lJHZhcnMyIDogdGhlbWUpLnBhbGV0dGVba2V5XS5tYWluICYmICgoX3RoZW1lJHZhcnMzID0gdGhlbWUudmFycykgIT0gbnVsbCA/IF90aGVtZSR2YXJzMyA6IHRoZW1lKS5wYWxldHRlW2tleV0uY29udHJhc3RUZXh0O1xuICAgIH0pLm1hcChjb2xvciA9PiAoe1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgY29sb3JcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW2NvbG9yXS5tYWluLFxuICAgICAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbY29sb3JdLmNvbnRyYXN0VGV4dFxuICAgICAgfVxuICAgIH0pKSwge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgdmFyaWFudDogJ2RvdCdcbiAgICAgIH0sXG4gICAgICBzdHlsZToge1xuICAgICAgICBib3JkZXJSYWRpdXM6IFJBRElVU19ET1QsXG4gICAgICAgIGhlaWdodDogUkFESVVTX0RPVCAqIDIsXG4gICAgICAgIG1pbldpZHRoOiBSQURJVVNfRE9UICogMixcbiAgICAgICAgcGFkZGluZzogMFxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiAoe1xuICAgICAgICBvd25lclN0YXRlXG4gICAgICB9KSA9PiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi52ZXJ0aWNhbCA9PT0gJ3RvcCcgJiYgb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4uaG9yaXpvbnRhbCA9PT0gJ3JpZ2h0JyAmJiBvd25lclN0YXRlLm92ZXJsYXAgPT09ICdyZWN0YW5ndWxhcicsXG4gICAgICBzdHlsZToge1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUoNTAlLCAtNTAlKScsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMCUnLFxuICAgICAgICBbYCYuJHtiYWRnZUNsYXNzZXMuaW52aXNpYmxlfWBdOiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCkgdHJhbnNsYXRlKDUwJSwgLTUwJSknXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwcm9wczogKHtcbiAgICAgICAgb3duZXJTdGF0ZVxuICAgICAgfSkgPT4gb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4udmVydGljYWwgPT09ICdib3R0b20nICYmIG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLmhvcml6b250YWwgPT09ICdyaWdodCcgJiYgb3duZXJTdGF0ZS5vdmVybGFwID09PSAncmVjdGFuZ3VsYXInLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKDUwJSwgNTAlKScsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMTAwJScsXG4gICAgICAgIFtgJi4ke2JhZGdlQ2xhc3Nlcy5pbnZpc2libGV9YF06IHtcbiAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoNTAlLCA1MCUpJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6ICh7XG4gICAgICAgIG93bmVyU3RhdGVcbiAgICAgIH0pID0+IG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLnZlcnRpY2FsID09PSAndG9wJyAmJiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi5ob3Jpem9udGFsID09PSAnbGVmdCcgJiYgb3duZXJTdGF0ZS5vdmVybGFwID09PSAncmVjdGFuZ3VsYXInLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwgLTUwJSknLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJScsXG4gICAgICAgIFtgJi4ke2JhZGdlQ2xhc3Nlcy5pbnZpc2libGV9YF06IHtcbiAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoLTUwJSwgLTUwJSknXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwcm9wczogKHtcbiAgICAgICAgb3duZXJTdGF0ZVxuICAgICAgfSkgPT4gb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4udmVydGljYWwgPT09ICdib3R0b20nICYmIG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLmhvcml6b250YWwgPT09ICdsZWZ0JyAmJiBvd25lclN0YXRlLm92ZXJsYXAgPT09ICdyZWN0YW5ndWxhcicsXG4gICAgICBzdHlsZToge1xuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLCA1MCUpJyxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMTAwJScsXG4gICAgICAgIFtgJi4ke2JhZGdlQ2xhc3Nlcy5pbnZpc2libGV9YF06IHtcbiAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoLTUwJSwgNTAlKSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiAoe1xuICAgICAgICBvd25lclN0YXRlXG4gICAgICB9KSA9PiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi52ZXJ0aWNhbCA9PT0gJ3RvcCcgJiYgb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4uaG9yaXpvbnRhbCA9PT0gJ3JpZ2h0JyAmJiBvd25lclN0YXRlLm92ZXJsYXAgPT09ICdjaXJjdWxhcicsXG4gICAgICBzdHlsZToge1xuICAgICAgICB0b3A6ICcxNCUnLFxuICAgICAgICByaWdodDogJzE0JScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSg1MCUsIC01MCUpJyxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMTAwJSAwJScsXG4gICAgICAgIFtgJi4ke2JhZGdlQ2xhc3Nlcy5pbnZpc2libGV9YF06IHtcbiAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoNTAlLCAtNTAlKSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiAoe1xuICAgICAgICBvd25lclN0YXRlXG4gICAgICB9KSA9PiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi52ZXJ0aWNhbCA9PT0gJ2JvdHRvbScgJiYgb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4uaG9yaXpvbnRhbCA9PT0gJ3JpZ2h0JyAmJiBvd25lclN0YXRlLm92ZXJsYXAgPT09ICdjaXJjdWxhcicsXG4gICAgICBzdHlsZToge1xuICAgICAgICBib3R0b206ICcxNCUnLFxuICAgICAgICByaWdodDogJzE0JScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSg1MCUsIDUwJSknLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcxMDAlIDEwMCUnLFxuICAgICAgICBbYCYuJHtiYWRnZUNsYXNzZXMuaW52aXNpYmxlfWBdOiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCkgdHJhbnNsYXRlKDUwJSwgNTAlKSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHByb3BzOiAoe1xuICAgICAgICBvd25lclN0YXRlXG4gICAgICB9KSA9PiBvd25lclN0YXRlLmFuY2hvck9yaWdpbi52ZXJ0aWNhbCA9PT0gJ3RvcCcgJiYgb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4uaG9yaXpvbnRhbCA9PT0gJ2xlZnQnICYmIG93bmVyU3RhdGUub3ZlcmxhcCA9PT0gJ2NpcmN1bGFyJyxcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHRvcDogJzE0JScsXG4gICAgICAgIGxlZnQ6ICcxNCUnLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwgLTUwJSknLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJScsXG4gICAgICAgIFtgJi4ke2JhZGdlQ2xhc3Nlcy5pbnZpc2libGV9YF06IHtcbiAgICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoLTUwJSwgLTUwJSknXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwcm9wczogKHtcbiAgICAgICAgb3duZXJTdGF0ZVxuICAgICAgfSkgPT4gb3duZXJTdGF0ZS5hbmNob3JPcmlnaW4udmVydGljYWwgPT09ICdib3R0b20nICYmIG93bmVyU3RhdGUuYW5jaG9yT3JpZ2luLmhvcml6b250YWwgPT09ICdsZWZ0JyAmJiBvd25lclN0YXRlLm92ZXJsYXAgPT09ICdjaXJjdWxhcicsXG4gICAgICBzdHlsZToge1xuICAgICAgICBib3R0b206ICcxNCUnLFxuICAgICAgICBsZWZ0OiAnMTQlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsIDUwJSknLFxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAxMDAlJyxcbiAgICAgICAgW2AmLiR7YmFkZ2VDbGFzc2VzLmludmlzaWJsZX1gXToge1xuICAgICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCA1MCUpJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgaW52aXNpYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LFxuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfV1cbiAgfTtcbn0pO1xuY29uc3QgQmFkZ2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCYWRnZShpblByb3BzLCByZWYpIHtcbiAgdmFyIF9yZWYsIF9zbG90cyRyb290LCBfcmVmMiwgX3Nsb3RzJGJhZGdlLCBfc2xvdFByb3BzJHJvb3QsIF9zbG90UHJvcHMkYmFkZ2U7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUJhZGdlJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYW5jaG9yT3JpZ2luOiBhbmNob3JPcmlnaW5Qcm9wID0ge1xuICAgICAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgICAgIGhvcml6b250YWw6ICdyaWdodCdcbiAgICAgIH0sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQsXG4gICAgICBjb21wb25lbnRzID0ge30sXG4gICAgICBjb21wb25lbnRzUHJvcHMgPSB7fSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgb3ZlcmxhcDogb3ZlcmxhcFByb3AgPSAncmVjdGFuZ3VsYXInLFxuICAgICAgY29sb3I6IGNvbG9yUHJvcCA9ICdkZWZhdWx0JyxcbiAgICAgIGludmlzaWJsZTogaW52aXNpYmxlUHJvcCA9IGZhbHNlLFxuICAgICAgbWF4OiBtYXhQcm9wID0gOTksXG4gICAgICBiYWRnZUNvbnRlbnQ6IGJhZGdlQ29udGVudFByb3AsXG4gICAgICBzbG90cyxcbiAgICAgIHNsb3RQcm9wcyxcbiAgICAgIHNob3daZXJvID0gZmFsc2UsXG4gICAgICB2YXJpYW50OiB2YXJpYW50UHJvcCA9ICdzdGFuZGFyZCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIGJhZGdlQ29udGVudCxcbiAgICBpbnZpc2libGU6IGludmlzaWJsZUZyb21Ib29rLFxuICAgIG1heCxcbiAgICBkaXNwbGF5VmFsdWU6IGRpc3BsYXlWYWx1ZUZyb21Ib29rXG4gIH0gPSB1c2VCYWRnZSh7XG4gICAgbWF4OiBtYXhQcm9wLFxuICAgIGludmlzaWJsZTogaW52aXNpYmxlUHJvcCxcbiAgICBiYWRnZUNvbnRlbnQ6IGJhZGdlQ29udGVudFByb3AsXG4gICAgc2hvd1plcm9cbiAgfSk7XG4gIGNvbnN0IHByZXZQcm9wcyA9IHVzZVByZXZpb3VzUHJvcHMoe1xuICAgIGFuY2hvck9yaWdpbjogYW5jaG9yT3JpZ2luUHJvcCxcbiAgICBjb2xvcjogY29sb3JQcm9wLFxuICAgIG92ZXJsYXA6IG92ZXJsYXBQcm9wLFxuICAgIHZhcmlhbnQ6IHZhcmlhbnRQcm9wLFxuICAgIGJhZGdlQ29udGVudDogYmFkZ2VDb250ZW50UHJvcFxuICB9KTtcbiAgY29uc3QgaW52aXNpYmxlID0gaW52aXNpYmxlRnJvbUhvb2sgfHwgYmFkZ2VDb250ZW50ID09IG51bGwgJiYgdmFyaWFudFByb3AgIT09ICdkb3QnO1xuICBjb25zdCB7XG4gICAgY29sb3IgPSBjb2xvclByb3AsXG4gICAgb3ZlcmxhcCA9IG92ZXJsYXBQcm9wLFxuICAgIGFuY2hvck9yaWdpbiA9IGFuY2hvck9yaWdpblByb3AsXG4gICAgdmFyaWFudCA9IHZhcmlhbnRQcm9wXG4gIH0gPSBpbnZpc2libGUgPyBwcmV2UHJvcHMgOiBwcm9wcztcbiAgY29uc3QgZGlzcGxheVZhbHVlID0gdmFyaWFudCAhPT0gJ2RvdCcgPyBkaXNwbGF5VmFsdWVGcm9tSG9vayA6IHVuZGVmaW5lZDtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGJhZGdlQ29udGVudCxcbiAgICBpbnZpc2libGUsXG4gICAgbWF4LFxuICAgIGRpc3BsYXlWYWx1ZSxcbiAgICBzaG93WmVybyxcbiAgICBhbmNob3JPcmlnaW4sXG4gICAgY29sb3IsXG4gICAgb3ZlcmxhcCxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG5cbiAgLy8gc3VwcG9ydCBib3RoIGBzbG90c2AgYW5kIGBjb21wb25lbnRzYCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICBjb25zdCBSb290U2xvdCA9IChfcmVmID0gKF9zbG90cyRyb290ID0gc2xvdHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RzLnJvb3QpICE9IG51bGwgPyBfc2xvdHMkcm9vdCA6IGNvbXBvbmVudHMuUm9vdCkgIT0gbnVsbCA/IF9yZWYgOiBCYWRnZVJvb3Q7XG4gIGNvbnN0IEJhZGdlU2xvdCA9IChfcmVmMiA9IChfc2xvdHMkYmFkZ2UgPSBzbG90cyA9PSBudWxsID8gdm9pZCAwIDogc2xvdHMuYmFkZ2UpICE9IG51bGwgPyBfc2xvdHMkYmFkZ2UgOiBjb21wb25lbnRzLkJhZGdlKSAhPSBudWxsID8gX3JlZjIgOiBCYWRnZUJhZGdlO1xuICBjb25zdCByb290U2xvdFByb3BzID0gKF9zbG90UHJvcHMkcm9vdCA9IHNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogc2xvdFByb3BzLnJvb3QpICE9IG51bGwgPyBfc2xvdFByb3BzJHJvb3QgOiBjb21wb25lbnRzUHJvcHMucm9vdDtcbiAgY29uc3QgYmFkZ2VTbG90UHJvcHMgPSAoX3Nsb3RQcm9wcyRiYWRnZSA9IHNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogc2xvdFByb3BzLmJhZGdlKSAhPSBudWxsID8gX3Nsb3RQcm9wcyRiYWRnZSA6IGNvbXBvbmVudHNQcm9wcy5iYWRnZTtcbiAgY29uc3Qgcm9vdFByb3BzID0gdXNlU2xvdFByb3BzKHtcbiAgICBlbGVtZW50VHlwZTogUm9vdFNsb3QsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IHJvb3RTbG90UHJvcHMsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgYWRkaXRpb25hbFByb3BzOiB7XG4gICAgICByZWYsXG4gICAgICBhczogY29tcG9uZW50XG4gICAgfSxcbiAgICBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChyb290U2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiByb290U2xvdFByb3BzLmNsYXNzTmFtZSwgY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gIH0pO1xuICBjb25zdCBiYWRnZVByb3BzID0gdXNlU2xvdFByb3BzKHtcbiAgICBlbGVtZW50VHlwZTogQmFkZ2VTbG90LFxuICAgIGV4dGVybmFsU2xvdFByb3BzOiBiYWRnZVNsb3RQcm9wcyxcbiAgICBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmJhZGdlLCBiYWRnZVNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogYmFkZ2VTbG90UHJvcHMuY2xhc3NOYW1lKVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSb290U2xvdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywge1xuICAgIGNoaWxkcmVuOiBbY2hpbGRyZW4sIC8qI19fUFVSRV9fKi9fanN4KEJhZGdlU2xvdCwgX2V4dGVuZHMoe30sIGJhZGdlUHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBkaXNwbGF5VmFsdWVcbiAgICB9KSldXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQmFkZ2UucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGFuY2hvciBvZiB0aGUgYmFkZ2UuXG4gICAqIEBkZWZhdWx0IHtcbiAgICogICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAqICAgaG9yaXpvbnRhbDogJ3JpZ2h0JyxcbiAgICogfVxuICAgKi9cbiAgYW5jaG9yT3JpZ2luOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhvcml6b250YWw6IFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnXSkuaXNSZXF1aXJlZCxcbiAgICB2ZXJ0aWNhbDogUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ3RvcCddKS5pc1JlcXVpcmVkXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgcmVuZGVyZWQgd2l0aGluIHRoZSBiYWRnZS5cbiAgICovXG4gIGJhZGdlQ29udGVudDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgYmFkZ2Ugd2lsbCBiZSBhZGRlZCByZWxhdGl2ZSB0byB0aGlzIG5vZGUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ2RlZmF1bHQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90c2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBCYWRnZTogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdFByb3BzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RQcm9wc2AgcHJvcCBpbnN0ZWFkLCBhcyBgY29tcG9uZW50c1Byb3BzYCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBiYWRnZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICByb290OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFkZ2UgaXMgaW52aXNpYmxlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW52aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE1heCBjb3VudCB0byBzaG93LlxuICAgKiBAZGVmYXVsdCA5OVxuICAgKi9cbiAgbWF4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogV3JhcHBlZCBzaGFwZSB0aGUgYmFkZ2Ugc2hvdWxkIG92ZXJsYXAuXG4gICAqIEBkZWZhdWx0ICdyZWN0YW5ndWxhcidcbiAgICovXG4gIG92ZXJsYXA6IFByb3BUeXBlcy5vbmVPZihbJ2NpcmN1bGFyJywgJ3JlY3Rhbmd1bGFyJ10pLFxuICAvKipcbiAgICogQ29udHJvbHMgd2hldGhlciB0aGUgYmFkZ2UgaXMgaGlkZGVuIHdoZW4gYGJhZGdlQ29udGVudGAgaXMgemVyby5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNob3daZXJvOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBwcm9wcyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBCYWRnZS5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBiYWRnZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICByb290OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZSB0aGUgQmFkZ2UuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBiYWRnZTogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ3N0YW5kYXJkJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydkb3QnLCAnc3RhbmRhcmQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJhZGdlOyIsImltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3R5bGVkIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVc2VUaGVtZVByb3BzKG5hbWUpIHtcbiAgcmV0dXJuIHVzZVRoZW1lUHJvcHM7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1c2VQcmV2aW91c1Byb3BzIH0gZnJvbSAnQG11aS91dGlscyc7XG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtCYWRnZV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UtdWkvcmVhY3QtYmFkZ2UvI2hvb2spXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW3VzZUJhZGdlIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UtdWkvcmVhY3QtYmFkZ2UvaG9va3MtYXBpLyN1c2UtYmFkZ2UpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VCYWRnZShwYXJhbWV0ZXJzKSB7XG4gIGNvbnN0IHtcbiAgICBiYWRnZUNvbnRlbnQ6IGJhZGdlQ29udGVudFByb3AsXG4gICAgaW52aXNpYmxlOiBpbnZpc2libGVQcm9wID0gZmFsc2UsXG4gICAgbWF4OiBtYXhQcm9wID0gOTksXG4gICAgc2hvd1plcm8gPSBmYWxzZVxuICB9ID0gcGFyYW1ldGVycztcbiAgY29uc3QgcHJldlByb3BzID0gdXNlUHJldmlvdXNQcm9wcyh7XG4gICAgYmFkZ2VDb250ZW50OiBiYWRnZUNvbnRlbnRQcm9wLFxuICAgIG1heDogbWF4UHJvcFxuICB9KTtcbiAgbGV0IGludmlzaWJsZSA9IGludmlzaWJsZVByb3A7XG4gIGlmIChpbnZpc2libGVQcm9wID09PSBmYWxzZSAmJiBiYWRnZUNvbnRlbnRQcm9wID09PSAwICYmICFzaG93WmVybykge1xuICAgIGludmlzaWJsZSA9IHRydWU7XG4gIH1cbiAgY29uc3Qge1xuICAgIGJhZGdlQ29udGVudCxcbiAgICBtYXggPSBtYXhQcm9wXG4gIH0gPSBpbnZpc2libGUgPyBwcmV2UHJvcHMgOiBwYXJhbWV0ZXJzO1xuICBjb25zdCBkaXNwbGF5VmFsdWUgPSBiYWRnZUNvbnRlbnQgJiYgTnVtYmVyKGJhZGdlQ29udGVudCkgPiBtYXggPyBgJHttYXh9K2AgOiBiYWRnZUNvbnRlbnQ7XG4gIHJldHVybiB7XG4gICAgYmFkZ2VDb250ZW50LFxuICAgIGludmlzaWJsZSxcbiAgICBtYXgsXG4gICAgZGlzcGxheVZhbHVlXG4gIH07XG59IiwiaW1wb3J0IGNyZWF0ZVN0eWxlZCBmcm9tICcuL2NyZWF0ZVN0eWxlZCc7XG5jb25zdCBzdHlsZWQgPSBjcmVhdGVTdHlsZWQoKTtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJmaXhlZFwiLCBcIm1heFdpZHRoXCIsIFwiY2xhc3Nlc1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSwgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMsIHVuc3RhYmxlX2dlbmVyYXRlVXRpbGl0eUNsYXNzIGFzIGdlbmVyYXRlVXRpbGl0eUNsYXNzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wc1N5c3RlbSBmcm9tICcuLi91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzeXN0ZW1TdHlsZWQgZnJvbSAnLi4vc3R5bGVkJztcbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmNvbnN0IGRlZmF1bHRDcmVhdGVTdHlsZWRDb21wb25lbnQgPSBzeXN0ZW1TdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNvbnRhaW5lcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbYG1heFdpZHRoJHtjYXBpdGFsaXplKFN0cmluZyhvd25lclN0YXRlLm1heFdpZHRoKSl9YF0sIG93bmVyU3RhdGUuZml4ZWQgJiYgc3R5bGVzLmZpeGVkLCBvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHN0eWxlcy5kaXNhYmxlR3V0dGVyc107XG4gIH1cbn0pO1xuY29uc3QgdXNlVGhlbWVQcm9wc0RlZmF1bHQgPSBpblByb3BzID0+IHVzZVRoZW1lUHJvcHNTeXN0ZW0oe1xuICBwcm9wczogaW5Qcm9wcyxcbiAgbmFtZTogJ011aUNvbnRhaW5lcicsXG4gIGRlZmF1bHRUaGVtZVxufSk7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IChvd25lclN0YXRlLCBjb21wb25lbnROYW1lKSA9PiB7XG4gIGNvbnN0IGdldENvbnRhaW5lclV0aWxpdHlDbGFzcyA9IHNsb3QgPT4ge1xuICAgIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90KTtcbiAgfTtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZml4ZWQsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgbWF4V2lkdGhcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIG1heFdpZHRoICYmIGBtYXhXaWR0aCR7Y2FwaXRhbGl6ZShTdHJpbmcobWF4V2lkdGgpKX1gLCBmaXhlZCAmJiAnZml4ZWQnLCBkaXNhYmxlR3V0dGVycyAmJiAnZGlzYWJsZUd1dHRlcnMnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENvbnRhaW5lclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgLy8gVGhpcyB3aWxsIGFsbG93IGFkZGluZyBjdXN0b20gc3R5bGVkIGZuIChmb3IgZXhhbXBsZSBmb3IgY3VzdG9tIHN4IHN0eWxlIGZ1bmN0aW9uKVxuICAgIGNyZWF0ZVN0eWxlZENvbXBvbmVudCA9IGRlZmF1bHRDcmVhdGVTdHlsZWRDb21wb25lbnQsXG4gICAgdXNlVGhlbWVQcm9wcyA9IHVzZVRoZW1lUHJvcHNEZWZhdWx0LFxuICAgIGNvbXBvbmVudE5hbWUgPSAnTXVpQ29udGFpbmVyJ1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgQ29udGFpbmVyUm9vdCA9IGNyZWF0ZVN0eWxlZENvbXBvbmVudCgoe1xuICAgIHRoZW1lLFxuICAgIG93bmVyU3RhdGVcbiAgfSkgPT4gX2V4dGVuZHMoe1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIG1hcmdpblJpZ2h0OiAnYXV0bycsXG4gICAgZGlzcGxheTogJ2Jsb2NrJ1xuICB9LCAhb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiB7XG4gICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgIC8vIEB0cy1pZ25vcmUgbW9kdWxlIGF1Z21lbnRhdGlvbiBmYWlscyBpZiBjdXN0b20gYnJlYWtwb2ludHMgYXJlIHVzZWRcbiAgICBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XG4gICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygzKVxuICAgIH1cbiAgfSksICh7XG4gICAgdGhlbWUsXG4gICAgb3duZXJTdGF0ZVxuICB9KSA9PiBvd25lclN0YXRlLmZpeGVkICYmIE9iamVjdC5rZXlzKHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcykucmVkdWNlKChhY2MsIGJyZWFrcG9pbnRWYWx1ZUtleSkgPT4ge1xuICAgIGNvbnN0IGJyZWFrcG9pbnQgPSBicmVha3BvaW50VmFsdWVLZXk7XG4gICAgY29uc3QgdmFsdWUgPSB0aGVtZS5icmVha3BvaW50cy52YWx1ZXNbYnJlYWtwb2ludF07XG4gICAgaWYgKHZhbHVlICE9PSAwKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBhY2NbdGhlbWUuYnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCldID0ge1xuICAgICAgICBtYXhXaWR0aDogYCR7dmFsdWV9JHt0aGVtZS5icmVha3BvaW50cy51bml0fWBcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KSwgKHtcbiAgICB0aGVtZSxcbiAgICBvd25lclN0YXRlXG4gIH0pID0+IF9leHRlbmRzKHt9LCBvd25lclN0YXRlLm1heFdpZHRoID09PSAneHMnICYmIHtcbiAgICAvLyBAdHMtaWdub3JlIG1vZHVsZSBhdWdtZW50YXRpb24gZmFpbHMgaWYgY3VzdG9tIGJyZWFrcG9pbnRzIGFyZSB1c2VkXG4gICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCd4cycpXToge1xuICAgICAgLy8gQHRzLWlnbm9yZSBtb2R1bGUgYXVnbWVudGF0aW9uIGZhaWxzIGlmIGN1c3RvbSBicmVha3BvaW50cyBhcmUgdXNlZFxuICAgICAgbWF4V2lkdGg6IE1hdGgubWF4KHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy54cywgNDQ0KVxuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS5tYXhXaWR0aCAmJlxuICAvLyBAdHMtaWdub3JlIG1vZHVsZSBhdWdtZW50YXRpb24gZmFpbHMgaWYgY3VzdG9tIGJyZWFrcG9pbnRzIGFyZSB1c2VkXG4gIG93bmVyU3RhdGUubWF4V2lkdGggIT09ICd4cycgJiYge1xuICAgIC8vIEB0cy1pZ25vcmUgbW9kdWxlIGF1Z21lbnRhdGlvbiBmYWlscyBpZiBjdXN0b20gYnJlYWtwb2ludHMgYXJlIHVzZWRcbiAgICBbdGhlbWUuYnJlYWtwb2ludHMudXAob3duZXJTdGF0ZS5tYXhXaWR0aCldOiB7XG4gICAgICAvLyBAdHMtaWdub3JlIG1vZHVsZSBhdWdtZW50YXRpb24gZmFpbHMgaWYgY3VzdG9tIGJyZWFrcG9pbnRzIGFyZSB1c2VkXG4gICAgICBtYXhXaWR0aDogYCR7dGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW293bmVyU3RhdGUubWF4V2lkdGhdfSR7dGhlbWUuYnJlYWtwb2ludHMudW5pdH1gXG4gICAgfVxuICB9KSk7XG4gIGNvbnN0IENvbnRhaW5lciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENvbnRhaW5lcihpblByb3BzLCByZWYpIHtcbiAgICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoaW5Qcm9wcyk7XG4gICAgY29uc3Qge1xuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgICBkaXNhYmxlR3V0dGVycyA9IGZhbHNlLFxuICAgICAgICBmaXhlZCA9IGZhbHNlLFxuICAgICAgICBtYXhXaWR0aCA9ICdsZydcbiAgICAgIH0gPSBwcm9wcyxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gICAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY29tcG9uZW50LFxuICAgICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgICBmaXhlZCxcbiAgICAgIG1heFdpZHRoXG4gICAgfSk7XG5cbiAgICAvLyBAdHMtaWdub3JlIG1vZHVsZSBhdWdtZW50YXRpb24gZmFpbHMgaWYgY3VzdG9tIGJyZWFrcG9pbnRzIGFyZSB1c2VkXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUsIGNvbXBvbmVudE5hbWUpO1xuICAgIHJldHVybiAoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBAdHMtaWdub3JlIHRoZW1lIGlzIGluamVjdGVkIGJ5IHRoZSBzdHlsZWQgdXRpbFxuICAgICAgX2pzeChDb250YWluZXJSb290LCBfZXh0ZW5kcyh7XG4gICAgICAgIGFzOiBjb21wb25lbnRcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBtb2R1bGUgYXVnbWVudGF0aW9uIGZhaWxzIGlmIGN1c3RvbSBicmVha3BvaW50cyBhcmUgdXNlZFxuICAgICAgICAsXG4gICAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgICAgIHJlZjogcmVmXG4gICAgICB9LCBvdGhlcikpXG4gICAgKTtcbiAgfSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENvbnRhaW5lci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgZGlzYWJsZUd1dHRlcnM6IFByb3BUeXBlcy5ib29sLFxuICAgIGZpeGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtYXhXaWR0aDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsIGZhbHNlXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH0gOiB2b2lkIDA7XG4gIHJldHVybiBDb250YWluZXI7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlQ29udGFpbmVyIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuY29uc3QgQ29udGFpbmVyID0gY3JlYXRlQ29udGFpbmVyKHtcbiAgY3JlYXRlU3R5bGVkQ29tcG9uZW50OiBzdHlsZWQoJ2RpdicsIHtcbiAgICBuYW1lOiAnTXVpQ29udGFpbmVyJyxcbiAgICBzbG90OiAnUm9vdCcsXG4gICAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG93bmVyU3RhdGVcbiAgICAgIH0gPSBwcm9wcztcbiAgICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tgbWF4V2lkdGgke2NhcGl0YWxpemUoU3RyaW5nKG93bmVyU3RhdGUubWF4V2lkdGgpKX1gXSwgb3duZXJTdGF0ZS5maXhlZCAmJiBzdHlsZXMuZml4ZWQsIG93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYgc3R5bGVzLmRpc2FibGVHdXR0ZXJzXTtcbiAgICB9XG4gIH0pLFxuICB1c2VUaGVtZVByb3BzOiBpblByb3BzID0+IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDb250YWluZXInXG4gIH0pXG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENvbnRhaW5lci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsZWZ0IGFuZCByaWdodCBwYWRkaW5nIGlzIHJlbW92ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBTZXQgdGhlIG1heC13aWR0aCB0byBtYXRjaCB0aGUgbWluLXdpZHRoIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSdkIHByZWZlciB0byBkZXNpZ24gZm9yIGEgZml4ZWQgc2V0IG9mIHNpemVzXG4gICAqIGluc3RlYWQgb2YgdHJ5aW5nIHRvIGFjY29tbW9kYXRlIGEgZnVsbHkgZmx1aWQgdmlld3BvcnQuXG4gICAqIEl0J3MgZmx1aWQgYnkgZGVmYXVsdC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZpeGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgbWF4LXdpZHRoIG9mIHRoZSBjb250YWluZXIuXG4gICAqIFRoZSBjb250YWluZXIgd2lkdGggZ3Jvd3Mgd2l0aCB0aGUgc2l6ZSBvZiB0aGUgc2NyZWVuLlxuICAgKiBTZXQgdG8gYGZhbHNlYCB0byBkaXNhYmxlIGBtYXhXaWR0aGAuXG4gICAqIEBkZWZhdWx0ICdsZydcbiAgICovXG4gIG1heFdpZHRoOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgZmFsc2VdKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQ29udGFpbmVyOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmNvbnN0IEdyaWRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEdyaWRDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0dyaWRDb250ZXh0Jztcbn1cbmV4cG9ydCBkZWZhdWx0IEdyaWRDb250ZXh0OyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0R3JpZFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpR3JpZCcsIHNsb3QpO1xufVxuY29uc3QgU1BBQ0lOR1MgPSBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdO1xuY29uc3QgRElSRUNUSU9OUyA9IFsnY29sdW1uLXJldmVyc2UnLCAnY29sdW1uJywgJ3Jvdy1yZXZlcnNlJywgJ3JvdyddO1xuY29uc3QgV1JBUFMgPSBbJ25vd3JhcCcsICd3cmFwLXJldmVyc2UnLCAnd3JhcCddO1xuY29uc3QgR1JJRF9TSVpFUyA9IFsnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdO1xuY29uc3QgZ3JpZENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlHcmlkJywgWydyb290JywgJ2NvbnRhaW5lcicsICdpdGVtJywgJ3plcm9NaW5XaWR0aCcsXG4vLyBzcGFjaW5nc1xuLi4uU1BBQ0lOR1MubWFwKHNwYWNpbmcgPT4gYHNwYWNpbmcteHMtJHtzcGFjaW5nfWApLFxuLy8gZGlyZWN0aW9uIHZhbHVlc1xuLi4uRElSRUNUSU9OUy5tYXAoZGlyZWN0aW9uID0+IGBkaXJlY3Rpb24teHMtJHtkaXJlY3Rpb259YCksXG4vLyB3cmFwIHZhbHVlc1xuLi4uV1JBUFMubWFwKHdyYXAgPT4gYHdyYXAteHMtJHt3cmFwfWApLFxuLy8gZ3JpZCBzaXplcyBmb3IgYWxsIGJyZWFrcG9pbnRzXG4uLi5HUklEX1NJWkVTLm1hcChzaXplID0+IGBncmlkLXhzLSR7c2l6ZX1gKSwgLi4uR1JJRF9TSVpFUy5tYXAoc2l6ZSA9PiBgZ3JpZC1zbS0ke3NpemV9YCksIC4uLkdSSURfU0laRVMubWFwKHNpemUgPT4gYGdyaWQtbWQtJHtzaXplfWApLCAuLi5HUklEX1NJWkVTLm1hcChzaXplID0+IGBncmlkLWxnLSR7c2l6ZX1gKSwgLi4uR1JJRF9TSVpFUy5tYXAoc2l6ZSA9PiBgZ3JpZC14bC0ke3NpemV9YCldKTtcbmV4cG9ydCBkZWZhdWx0IGdyaWRDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuLy8gQSBncmlkIGNvbXBvbmVudCB1c2luZyB0aGUgZm9sbG93aW5nIGxpYnMgYXMgaW5zcGlyYXRpb24uXG4vL1xuLy8gRm9yIHRoZSBpbXBsZW1lbnRhdGlvbjpcbi8vIC0gaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNC4zL2xheW91dC9ncmlkL1xuLy8gLSBodHRwczovL2dpdGh1Yi5jb20va3Jpc3RvZmVyam9zZXBoL2ZsZXhib3hncmlkL2Jsb2IvbWFzdGVyL3NyYy9jc3MvZmxleGJveGdyaWQuY3NzXG4vLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9yb3lsZWUwNzA0L3JlYWN0LWZsZXhib3gtZ3JpZFxuLy8gLSBodHRwczovL21hdGVyaWFsLmFuZ3VsYXJqcy5vcmcvbGF0ZXN0L2xheW91dC9pbnRyb2R1Y3Rpb25cbi8vXG4vLyBGb2xsb3cgdGhpcyBmbGV4Ym94IEd1aWRlIHRvIGJldHRlciB1bmRlcnN0YW5kIHRoZSB1bmRlcmx5aW5nIG1vZGVsOlxuLy8gLSBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2Nzcy9hLWd1aWRlLXRvLWZsZXhib3gvXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29sdW1uc1wiLCBcImNvbHVtblNwYWNpbmdcIiwgXCJjb21wb25lbnRcIiwgXCJjb250YWluZXJcIiwgXCJkaXJlY3Rpb25cIiwgXCJpdGVtXCIsIFwicm93U3BhY2luZ1wiLCBcInNwYWNpbmdcIiwgXCJ3cmFwXCIsIFwiemVyb01pbldpZHRoXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfZXh0ZW5kU3hQcm9wIGFzIGV4dGVuZFN4UHJvcCwgaGFuZGxlQnJlYWtwb2ludHMsIHVuc3RhYmxlX3Jlc29sdmVCcmVha3BvaW50VmFsdWVzIGFzIHJlc29sdmVCcmVha3BvaW50VmFsdWVzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHJlcXVpcmVQcm9wRmFjdG9yeSBmcm9tICcuLi91dGlscy9yZXF1aXJlUHJvcEZhY3RvcnknO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IEdyaWRDb250ZXh0IGZyb20gJy4vR3JpZENvbnRleHQnO1xuaW1wb3J0IGdyaWRDbGFzc2VzLCB7IGdldEdyaWRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2dyaWRDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBnZXRPZmZzZXQodmFsKSB7XG4gIGNvbnN0IHBhcnNlID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gYCR7cGFyc2V9JHtTdHJpbmcodmFsKS5yZXBsYWNlKFN0cmluZyhwYXJzZSksICcnKSB8fCAncHgnfWA7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVHcmlkKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pIHtcbiAgbGV0IHNpemU7XG4gIHJldHVybiB0aGVtZS5icmVha3BvaW50cy5rZXlzLnJlZHVjZSgoZ2xvYmFsU3R5bGVzLCBicmVha3BvaW50KSA9PiB7XG4gICAgLy8gVXNlIHNpZGUgZWZmZWN0IG92ZXIgaW1tdXRhYmlsaXR5IGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuXG4gICAgbGV0IHN0eWxlcyA9IHt9O1xuICAgIGlmIChvd25lclN0YXRlW2JyZWFrcG9pbnRdKSB7XG4gICAgICBzaXplID0gb3duZXJTdGF0ZVticmVha3BvaW50XTtcbiAgICB9XG4gICAgaWYgKCFzaXplKSB7XG4gICAgICByZXR1cm4gZ2xvYmFsU3R5bGVzO1xuICAgIH1cbiAgICBpZiAoc2l6ZSA9PT0gdHJ1ZSkge1xuICAgICAgLy8gRm9yIHRoZSBhdXRvIGxheW91dGluZ1xuICAgICAgc3R5bGVzID0ge1xuICAgICAgICBmbGV4QmFzaXM6IDAsXG4gICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICBtYXhXaWR0aDogJzEwMCUnXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoc2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICBzdHlsZXMgPSB7XG4gICAgICAgIGZsZXhCYXNpczogJ2F1dG8nLFxuICAgICAgICBmbGV4R3JvdzogMCxcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgbWF4V2lkdGg6ICdub25lJyxcbiAgICAgICAgd2lkdGg6ICdhdXRvJ1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY29sdW1uc0JyZWFrcG9pbnRWYWx1ZXMgPSByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyh7XG4gICAgICAgIHZhbHVlczogb3duZXJTdGF0ZS5jb2x1bW5zLFxuICAgICAgICBicmVha3BvaW50czogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGNvbHVtblZhbHVlID0gdHlwZW9mIGNvbHVtbnNCcmVha3BvaW50VmFsdWVzID09PSAnb2JqZWN0JyA/IGNvbHVtbnNCcmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdIDogY29sdW1uc0JyZWFrcG9pbnRWYWx1ZXM7XG4gICAgICBpZiAoY29sdW1uVmFsdWUgPT09IHVuZGVmaW5lZCB8fCBjb2x1bW5WYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsU3R5bGVzO1xuICAgICAgfVxuICAgICAgLy8gS2VlcCA3IHNpZ25pZmljYW50IG51bWJlcnMuXG4gICAgICBjb25zdCB3aWR0aCA9IGAke01hdGgucm91bmQoc2l6ZSAvIGNvbHVtblZhbHVlICogMTBlNykgLyAxMGU1fSVgO1xuICAgICAgbGV0IG1vcmUgPSB7fTtcbiAgICAgIGlmIChvd25lclN0YXRlLmNvbnRhaW5lciAmJiBvd25lclN0YXRlLml0ZW0gJiYgb3duZXJTdGF0ZS5jb2x1bW5TcGFjaW5nICE9PSAwKSB7XG4gICAgICAgIGNvbnN0IHRoZW1lU3BhY2luZyA9IHRoZW1lLnNwYWNpbmcob3duZXJTdGF0ZS5jb2x1bW5TcGFjaW5nKTtcbiAgICAgICAgaWYgKHRoZW1lU3BhY2luZyAhPT0gJzBweCcpIHtcbiAgICAgICAgICBjb25zdCBmdWxsV2lkdGggPSBgY2FsYygke3dpZHRofSArICR7Z2V0T2Zmc2V0KHRoZW1lU3BhY2luZyl9KWA7XG4gICAgICAgICAgbW9yZSA9IHtcbiAgICAgICAgICAgIGZsZXhCYXNpczogZnVsbFdpZHRoLFxuICAgICAgICAgICAgbWF4V2lkdGg6IGZ1bGxXaWR0aFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQ2xvc2UgdG8gdGhlIGJvb3RzdHJhcCBpbXBsZW1lbnRhdGlvbjpcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzhmY2NhYTI0MzllOTdlYzcyYTRiN2RjNDJjY2MxZjY0OTc5MGFkYjAvc2Nzcy9taXhpbnMvX2dyaWQuc2NzcyNMNDFcbiAgICAgIHN0eWxlcyA9IF9leHRlbmRzKHtcbiAgICAgICAgZmxleEJhc2lzOiB3aWR0aCxcbiAgICAgICAgZmxleEdyb3c6IDAsXG4gICAgICAgIG1heFdpZHRoOiB3aWR0aFxuICAgICAgfSwgbW9yZSk7XG4gICAgfVxuXG4gICAgLy8gTm8gbmVlZCBmb3IgYSBtZWRpYSBxdWVyeSBmb3IgdGhlIGZpcnN0IHNpemUuXG4gICAgaWYgKHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlc1ticmVha3BvaW50XSA9PT0gMCkge1xuICAgICAgT2JqZWN0LmFzc2lnbihnbG9iYWxTdHlsZXMsIHN0eWxlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsb2JhbFN0eWxlc1t0aGVtZS5icmVha3BvaW50cy51cChicmVha3BvaW50KV0gPSBzdHlsZXM7XG4gICAgfVxuICAgIHJldHVybiBnbG9iYWxTdHlsZXM7XG4gIH0sIHt9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZURpcmVjdGlvbih7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSB7XG4gIGNvbnN0IGRpcmVjdGlvblZhbHVlcyA9IHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgICB2YWx1ZXM6IG93bmVyU3RhdGUuZGlyZWN0aW9uLFxuICAgIGJyZWFrcG9pbnRzOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXNcbiAgfSk7XG4gIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyh7XG4gICAgdGhlbWVcbiAgfSwgZGlyZWN0aW9uVmFsdWVzLCBwcm9wVmFsdWUgPT4ge1xuICAgIGNvbnN0IG91dHB1dCA9IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246IHByb3BWYWx1ZVxuICAgIH07XG4gICAgaWYgKHByb3BWYWx1ZS5pbmRleE9mKCdjb2x1bW4nKSA9PT0gMCkge1xuICAgICAgb3V0cHV0W2AmID4gLiR7Z3JpZENsYXNzZXMuaXRlbX1gXSA9IHtcbiAgICAgICAgbWF4V2lkdGg6ICdub25lJ1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSk7XG59XG5cbi8qKlxuICogRXh0cmFjdHMgemVybyB2YWx1ZSBicmVha3BvaW50IGtleXMgYmVmb3JlIGEgbm9uLXplcm8gdmFsdWUgYnJlYWtwb2ludCBrZXkuXG4gKiBAZXhhbXBsZSB7IHhzOiAwLCBzbTogMCwgbWQ6IDIsIGxnOiAwLCB4bDogMCB9IG9yIFswLCAwLCAyLCAwLCAwXVxuICogQHJldHVybnMgW3hzLCBzbV1cbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFplcm9WYWx1ZUJyZWFrcG9pbnRLZXlzKHtcbiAgYnJlYWtwb2ludHMsXG4gIHZhbHVlc1xufSkge1xuICBsZXQgbm9uWmVyb0tleSA9ICcnO1xuICBPYmplY3Qua2V5cyh2YWx1ZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAobm9uWmVyb0tleSAhPT0gJycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHZhbHVlc1trZXldICE9PSAwKSB7XG4gICAgICBub25aZXJvS2V5ID0ga2V5O1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHNvcnRlZEJyZWFrcG9pbnRLZXlzQnlWYWx1ZSA9IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5zb3J0KChhLCBiKSA9PiB7XG4gICAgcmV0dXJuIGJyZWFrcG9pbnRzW2FdIC0gYnJlYWtwb2ludHNbYl07XG4gIH0pO1xuICByZXR1cm4gc29ydGVkQnJlYWtwb2ludEtleXNCeVZhbHVlLnNsaWNlKDAsIHNvcnRlZEJyZWFrcG9pbnRLZXlzQnlWYWx1ZS5pbmRleE9mKG5vblplcm9LZXkpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVJvd0dhcCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSB7XG4gIGNvbnN0IHtcbiAgICBjb250YWluZXIsXG4gICAgcm93U3BhY2luZ1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgbGV0IHN0eWxlcyA9IHt9O1xuICBpZiAoY29udGFpbmVyICYmIHJvd1NwYWNpbmcgIT09IDApIHtcbiAgICBjb25zdCByb3dTcGFjaW5nVmFsdWVzID0gcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICAgICAgdmFsdWVzOiByb3dTcGFjaW5nLFxuICAgICAgYnJlYWtwb2ludHM6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlc1xuICAgIH0pO1xuICAgIGxldCB6ZXJvVmFsdWVCcmVha3BvaW50S2V5cztcbiAgICBpZiAodHlwZW9mIHJvd1NwYWNpbmdWYWx1ZXMgPT09ICdvYmplY3QnKSB7XG4gICAgICB6ZXJvVmFsdWVCcmVha3BvaW50S2V5cyA9IGV4dHJhY3RaZXJvVmFsdWVCcmVha3BvaW50S2V5cyh7XG4gICAgICAgIGJyZWFrcG9pbnRzOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMsXG4gICAgICAgIHZhbHVlczogcm93U3BhY2luZ1ZhbHVlc1xuICAgICAgfSk7XG4gICAgfVxuICAgIHN0eWxlcyA9IGhhbmRsZUJyZWFrcG9pbnRzKHtcbiAgICAgIHRoZW1lXG4gICAgfSwgcm93U3BhY2luZ1ZhbHVlcywgKHByb3BWYWx1ZSwgYnJlYWtwb2ludCkgPT4ge1xuICAgICAgdmFyIF96ZXJvVmFsdWVCcmVha3BvaW50SztcbiAgICAgIGNvbnN0IHRoZW1lU3BhY2luZyA9IHRoZW1lLnNwYWNpbmcocHJvcFZhbHVlKTtcbiAgICAgIGlmICh0aGVtZVNwYWNpbmcgIT09ICcwcHgnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWFyZ2luVG9wOiBgLSR7Z2V0T2Zmc2V0KHRoZW1lU3BhY2luZyl9YCxcbiAgICAgICAgICBbYCYgPiAuJHtncmlkQ2xhc3Nlcy5pdGVtfWBdOiB7XG4gICAgICAgICAgICBwYWRkaW5nVG9wOiBnZXRPZmZzZXQodGhlbWVTcGFjaW5nKVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmICgoX3plcm9WYWx1ZUJyZWFrcG9pbnRLID0gemVyb1ZhbHVlQnJlYWtwb2ludEtleXMpICE9IG51bGwgJiYgX3plcm9WYWx1ZUJyZWFrcG9pbnRLLmluY2x1ZGVzKGJyZWFrcG9pbnQpKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgW2AmID4gLiR7Z3JpZENsYXNzZXMuaXRlbX1gXToge1xuICAgICAgICAgIHBhZGRpbmdUb3A6IDBcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc3R5bGVzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlQ29sdW1uR2FwKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pIHtcbiAgY29uc3Qge1xuICAgIGNvbnRhaW5lcixcbiAgICBjb2x1bW5TcGFjaW5nXG4gIH0gPSBvd25lclN0YXRlO1xuICBsZXQgc3R5bGVzID0ge307XG4gIGlmIChjb250YWluZXIgJiYgY29sdW1uU3BhY2luZyAhPT0gMCkge1xuICAgIGNvbnN0IGNvbHVtblNwYWNpbmdWYWx1ZXMgPSByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyh7XG4gICAgICB2YWx1ZXM6IGNvbHVtblNwYWNpbmcsXG4gICAgICBicmVha3BvaW50czogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzXG4gICAgfSk7XG4gICAgbGV0IHplcm9WYWx1ZUJyZWFrcG9pbnRLZXlzO1xuICAgIGlmICh0eXBlb2YgY29sdW1uU3BhY2luZ1ZhbHVlcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHplcm9WYWx1ZUJyZWFrcG9pbnRLZXlzID0gZXh0cmFjdFplcm9WYWx1ZUJyZWFrcG9pbnRLZXlzKHtcbiAgICAgICAgYnJlYWtwb2ludHM6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcyxcbiAgICAgICAgdmFsdWVzOiBjb2x1bW5TcGFjaW5nVmFsdWVzXG4gICAgICB9KTtcbiAgICB9XG4gICAgc3R5bGVzID0gaGFuZGxlQnJlYWtwb2ludHMoe1xuICAgICAgdGhlbWVcbiAgICB9LCBjb2x1bW5TcGFjaW5nVmFsdWVzLCAocHJvcFZhbHVlLCBicmVha3BvaW50KSA9PiB7XG4gICAgICB2YXIgX3plcm9WYWx1ZUJyZWFrcG9pbnRLMjtcbiAgICAgIGNvbnN0IHRoZW1lU3BhY2luZyA9IHRoZW1lLnNwYWNpbmcocHJvcFZhbHVlKTtcbiAgICAgIGlmICh0aGVtZVNwYWNpbmcgIT09ICcwcHgnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgd2lkdGg6IGBjYWxjKDEwMCUgKyAke2dldE9mZnNldCh0aGVtZVNwYWNpbmcpfSlgLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6IGAtJHtnZXRPZmZzZXQodGhlbWVTcGFjaW5nKX1gLFxuICAgICAgICAgIFtgJiA+IC4ke2dyaWRDbGFzc2VzLml0ZW19YF06IHtcbiAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiBnZXRPZmZzZXQodGhlbWVTcGFjaW5nKVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmICgoX3plcm9WYWx1ZUJyZWFrcG9pbnRLMiA9IHplcm9WYWx1ZUJyZWFrcG9pbnRLZXlzKSAhPSBudWxsICYmIF96ZXJvVmFsdWVCcmVha3BvaW50SzIuaW5jbHVkZXMoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgbWFyZ2luTGVmdDogMCxcbiAgICAgICAgW2AmID4gLiR7Z3JpZENsYXNzZXMuaXRlbX1gXToge1xuICAgICAgICAgIHBhZGRpbmdMZWZ0OiAwXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlcztcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlU3BhY2luZ1N0eWxlcyhzcGFjaW5nLCBicmVha3BvaW50cywgc3R5bGVzID0ge30pIHtcbiAgLy8gdW5kZWZpbmVkL251bGwgb3IgYHNwYWNpbmdgIDw9IDBcbiAgaWYgKCFzcGFjaW5nIHx8IHNwYWNpbmcgPD0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBpbiBjYXNlIG9mIHN0cmluZy9udW1iZXIgYHNwYWNpbmdgXG4gIGlmICh0eXBlb2Ygc3BhY2luZyA9PT0gJ3N0cmluZycgJiYgIU51bWJlci5pc05hTihOdW1iZXIoc3BhY2luZykpIHx8IHR5cGVvZiBzcGFjaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBbc3R5bGVzW2BzcGFjaW5nLXhzLSR7U3RyaW5nKHNwYWNpbmcpfWBdXTtcbiAgfVxuICAvLyBpbiBjYXNlIG9mIG9iamVjdCBgc3BhY2luZ2BcbiAgY29uc3Qgc3BhY2luZ1N0eWxlcyA9IFtdO1xuICBicmVha3BvaW50cy5mb3JFYWNoKGJyZWFrcG9pbnQgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gc3BhY2luZ1ticmVha3BvaW50XTtcbiAgICBpZiAoTnVtYmVyKHZhbHVlKSA+IDApIHtcbiAgICAgIHNwYWNpbmdTdHlsZXMucHVzaChzdHlsZXNbYHNwYWNpbmctJHticmVha3BvaW50fS0ke1N0cmluZyh2YWx1ZSl9YF0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzcGFjaW5nU3R5bGVzO1xufVxuXG4vLyBEZWZhdWx0IENTUyB2YWx1ZXNcbi8vIGZsZXg6ICcwIDEgYXV0bycsXG4vLyBmbGV4RGlyZWN0aW9uOiAncm93Jyxcbi8vIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0Jyxcbi8vIGZsZXhXcmFwOiAnbm93cmFwJyxcbi8vIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG5jb25zdCBHcmlkUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpR3JpZCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICBjb25zdCB7XG4gICAgICBjb250YWluZXIsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBpdGVtLFxuICAgICAgc3BhY2luZyxcbiAgICAgIHdyYXAsXG4gICAgICB6ZXJvTWluV2lkdGgsXG4gICAgICBicmVha3BvaW50c1xuICAgIH0gPSBvd25lclN0YXRlO1xuICAgIGxldCBzcGFjaW5nU3R5bGVzID0gW107XG5cbiAgICAvLyBpbiBjYXNlIG9mIGdyaWQgaXRlbVxuICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgIHNwYWNpbmdTdHlsZXMgPSByZXNvbHZlU3BhY2luZ1N0eWxlcyhzcGFjaW5nLCBicmVha3BvaW50cywgc3R5bGVzKTtcbiAgICB9XG4gICAgY29uc3QgYnJlYWtwb2ludHNTdHlsZXMgPSBbXTtcbiAgICBicmVha3BvaW50cy5mb3JFYWNoKGJyZWFrcG9pbnQgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBvd25lclN0YXRlW2JyZWFrcG9pbnRdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGJyZWFrcG9pbnRzU3R5bGVzLnB1c2goc3R5bGVzW2BncmlkLSR7YnJlYWtwb2ludH0tJHtTdHJpbmcodmFsdWUpfWBdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBjb250YWluZXIgJiYgc3R5bGVzLmNvbnRhaW5lciwgaXRlbSAmJiBzdHlsZXMuaXRlbSwgemVyb01pbldpZHRoICYmIHN0eWxlcy56ZXJvTWluV2lkdGgsIC4uLnNwYWNpbmdTdHlsZXMsIGRpcmVjdGlvbiAhPT0gJ3JvdycgJiYgc3R5bGVzW2BkaXJlY3Rpb24teHMtJHtTdHJpbmcoZGlyZWN0aW9uKX1gXSwgd3JhcCAhPT0gJ3dyYXAnICYmIHN0eWxlc1tgd3JhcC14cy0ke1N0cmluZyh3cmFwKX1gXSwgLi4uYnJlYWtwb2ludHNTdHlsZXNdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG59LCBvd25lclN0YXRlLmNvbnRhaW5lciAmJiB7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleFdyYXA6ICd3cmFwJyxcbiAgd2lkdGg6ICcxMDAlJ1xufSwgb3duZXJTdGF0ZS5pdGVtICYmIHtcbiAgbWFyZ2luOiAwIC8vIEZvciBpbnN0YW5jZSwgaXQncyB1c2VmdWwgd2hlbiB1c2VkIHdpdGggYSBgZmlndXJlYCBlbGVtZW50LlxufSwgb3duZXJTdGF0ZS56ZXJvTWluV2lkdGggJiYge1xuICBtaW5XaWR0aDogMFxufSwgb3duZXJTdGF0ZS53cmFwICE9PSAnd3JhcCcgJiYge1xuICBmbGV4V3JhcDogb3duZXJTdGF0ZS53cmFwXG59KSwgZ2VuZXJhdGVEaXJlY3Rpb24sIGdlbmVyYXRlUm93R2FwLCBnZW5lcmF0ZUNvbHVtbkdhcCwgZ2VuZXJhdGVHcmlkKTtcbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlU3BhY2luZ0NsYXNzZXMoc3BhY2luZywgYnJlYWtwb2ludHMpIHtcbiAgLy8gdW5kZWZpbmVkL251bGwgb3IgYHNwYWNpbmdgIDw9IDBcbiAgaWYgKCFzcGFjaW5nIHx8IHNwYWNpbmcgPD0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBpbiBjYXNlIG9mIHN0cmluZy9udW1iZXIgYHNwYWNpbmdgXG4gIGlmICh0eXBlb2Ygc3BhY2luZyA9PT0gJ3N0cmluZycgJiYgIU51bWJlci5pc05hTihOdW1iZXIoc3BhY2luZykpIHx8IHR5cGVvZiBzcGFjaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBbYHNwYWNpbmcteHMtJHtTdHJpbmcoc3BhY2luZyl9YF07XG4gIH1cbiAgLy8gaW4gY2FzZSBvZiBvYmplY3QgYHNwYWNpbmdgXG4gIGNvbnN0IGNsYXNzZXMgPSBbXTtcbiAgYnJlYWtwb2ludHMuZm9yRWFjaChicmVha3BvaW50ID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IHNwYWNpbmdbYnJlYWtwb2ludF07XG4gICAgaWYgKE51bWJlcih2YWx1ZSkgPiAwKSB7XG4gICAgICBjb25zdCBjbGFzc05hbWUgPSBgc3BhY2luZy0ke2JyZWFrcG9pbnR9LSR7U3RyaW5nKHZhbHVlKX1gO1xuICAgICAgY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNsYXNzZXM7XG59XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBjb250YWluZXIsXG4gICAgZGlyZWN0aW9uLFxuICAgIGl0ZW0sXG4gICAgc3BhY2luZyxcbiAgICB3cmFwLFxuICAgIHplcm9NaW5XaWR0aCxcbiAgICBicmVha3BvaW50c1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgbGV0IHNwYWNpbmdDbGFzc2VzID0gW107XG5cbiAgLy8gaW4gY2FzZSBvZiBncmlkIGl0ZW1cbiAgaWYgKGNvbnRhaW5lcikge1xuICAgIHNwYWNpbmdDbGFzc2VzID0gcmVzb2x2ZVNwYWNpbmdDbGFzc2VzKHNwYWNpbmcsIGJyZWFrcG9pbnRzKTtcbiAgfVxuICBjb25zdCBicmVha3BvaW50c0NsYXNzZXMgPSBbXTtcbiAgYnJlYWtwb2ludHMuZm9yRWFjaChicmVha3BvaW50ID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IG93bmVyU3RhdGVbYnJlYWtwb2ludF07XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBicmVha3BvaW50c0NsYXNzZXMucHVzaChgZ3JpZC0ke2JyZWFrcG9pbnR9LSR7U3RyaW5nKHZhbHVlKX1gKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBjb250YWluZXIgJiYgJ2NvbnRhaW5lcicsIGl0ZW0gJiYgJ2l0ZW0nLCB6ZXJvTWluV2lkdGggJiYgJ3plcm9NaW5XaWR0aCcsIC4uLnNwYWNpbmdDbGFzc2VzLCBkaXJlY3Rpb24gIT09ICdyb3cnICYmIGBkaXJlY3Rpb24teHMtJHtTdHJpbmcoZGlyZWN0aW9uKX1gLCB3cmFwICE9PSAnd3JhcCcgJiYgYHdyYXAteHMtJHtTdHJpbmcod3JhcCl9YCwgLi4uYnJlYWtwb2ludHNDbGFzc2VzXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEdyaWRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IEdyaWQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBHcmlkKGluUHJvcHMsIHJlZikge1xuICBjb25zdCB0aGVtZVByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUdyaWQnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgYnJlYWtwb2ludHNcbiAgfSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IHByb3BzID0gZXh0ZW5kU3hQcm9wKHRoZW1lUHJvcHMpO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2x1bW5zOiBjb2x1bW5zUHJvcCxcbiAgICAgIGNvbHVtblNwYWNpbmc6IGNvbHVtblNwYWNpbmdQcm9wLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICBjb250YWluZXIgPSBmYWxzZSxcbiAgICAgIGRpcmVjdGlvbiA9ICdyb3cnLFxuICAgICAgaXRlbSA9IGZhbHNlLFxuICAgICAgcm93U3BhY2luZzogcm93U3BhY2luZ1Byb3AsXG4gICAgICBzcGFjaW5nID0gMCxcbiAgICAgIHdyYXAgPSAnd3JhcCcsXG4gICAgICB6ZXJvTWluV2lkdGggPSBmYWxzZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCByb3dTcGFjaW5nID0gcm93U3BhY2luZ1Byb3AgfHwgc3BhY2luZztcbiAgY29uc3QgY29sdW1uU3BhY2luZyA9IGNvbHVtblNwYWNpbmdQcm9wIHx8IHNwYWNpbmc7XG4gIGNvbnN0IGNvbHVtbnNDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChHcmlkQ29udGV4dCk7XG5cbiAgLy8gY29sdW1ucyBzZXQgd2l0aCBkZWZhdWx0IGJyZWFrcG9pbnQgdW5pdCBvZiAxMlxuICBjb25zdCBjb2x1bW5zID0gY29udGFpbmVyID8gY29sdW1uc1Byb3AgfHwgMTIgOiBjb2x1bW5zQ29udGV4dDtcbiAgY29uc3QgYnJlYWtwb2ludHNWYWx1ZXMgPSB7fTtcbiAgY29uc3Qgb3RoZXJGaWx0ZXJlZCA9IF9leHRlbmRzKHt9LCBvdGhlcik7XG4gIGJyZWFrcG9pbnRzLmtleXMuZm9yRWFjaChicmVha3BvaW50ID0+IHtcbiAgICBpZiAob3RoZXJbYnJlYWtwb2ludF0gIT0gbnVsbCkge1xuICAgICAgYnJlYWtwb2ludHNWYWx1ZXNbYnJlYWtwb2ludF0gPSBvdGhlclticmVha3BvaW50XTtcbiAgICAgIGRlbGV0ZSBvdGhlckZpbHRlcmVkW2JyZWFrcG9pbnRdO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2x1bW5zLFxuICAgIGNvbnRhaW5lcixcbiAgICBkaXJlY3Rpb24sXG4gICAgaXRlbSxcbiAgICByb3dTcGFjaW5nLFxuICAgIGNvbHVtblNwYWNpbmcsXG4gICAgd3JhcCxcbiAgICB6ZXJvTWluV2lkdGgsXG4gICAgc3BhY2luZ1xuICB9LCBicmVha3BvaW50c1ZhbHVlcywge1xuICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50cy5rZXlzXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChHcmlkQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb2x1bW5zLFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChHcmlkUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgICBhczogY29tcG9uZW50LFxuICAgICAgcmVmOiByZWZcbiAgICB9LCBvdGhlckZpbHRlcmVkKSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdyaWQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGNvbHVtbnMuXG4gICAqIEBkZWZhdWx0IDEyXG4gICAqL1xuICBjb2x1bW5zOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMubnVtYmVyKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgaG9yaXpvbnRhbCBzcGFjZSBiZXR3ZWVuIHRoZSB0eXBlIGBpdGVtYCBjb21wb25lbnRzLlxuICAgKiBJdCBvdmVycmlkZXMgdGhlIHZhbHVlIG9mIHRoZSBgc3BhY2luZ2AgcHJvcC5cbiAgICovXG4gIGNvbHVtblNwYWNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgaGF2ZSB0aGUgZmxleCAqY29udGFpbmVyKiBiZWhhdmlvci5cbiAgICogWW91IHNob3VsZCBiZSB3cmFwcGluZyAqaXRlbXMqIHdpdGggYSAqY29udGFpbmVyKi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgZmxleC1kaXJlY3Rpb25gIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCBpcyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKiBAZGVmYXVsdCAncm93J1xuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pKSwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgaGF2ZSB0aGUgZmxleCAqaXRlbSogYmVoYXZpb3IuXG4gICAqIFlvdSBzaG91bGQgYmUgd3JhcHBpbmcgKml0ZW1zKiB3aXRoIGEgKmNvbnRhaW5lciouXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpdGVtOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGEgbnVtYmVyLCBpdCBzZXRzIHRoZSBudW1iZXIgb2YgY29sdW1ucyB0aGUgZ3JpZCBpdGVtIHVzZXMuXG4gICAqIEl0IGNhbid0IGJlIGdyZWF0ZXIgdGhhbiB0aGUgdG90YWwgbnVtYmVyIG9mIGNvbHVtbnMgb2YgdGhlIGNvbnRhaW5lciAoMTIgYnkgZGVmYXVsdCkuXG4gICAqIElmICdhdXRvJywgdGhlIGdyaWQgaXRlbSdzIHdpZHRoIG1hdGNoZXMgaXRzIGNvbnRlbnQuXG4gICAqIElmIGZhbHNlLCB0aGUgcHJvcCBpcyBpZ25vcmVkLlxuICAgKiBJZiB0cnVlLCB0aGUgZ3JpZCBpdGVtJ3Mgd2lkdGggZ3Jvd3MgdG8gdXNlIHRoZSBzcGFjZSBhdmFpbGFibGUgaW4gdGhlIGdyaWQgY29udGFpbmVyLlxuICAgKiBUaGUgdmFsdWUgaXMgYXBwbGllZCBmb3IgdGhlIGBsZ2AgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGxnOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuYm9vbF0pLFxuICAvKipcbiAgICogSWYgYSBudW1iZXIsIGl0IHNldHMgdGhlIG51bWJlciBvZiBjb2x1bW5zIHRoZSBncmlkIGl0ZW0gdXNlcy5cbiAgICogSXQgY2FuJ3QgYmUgZ3JlYXRlciB0aGFuIHRoZSB0b3RhbCBudW1iZXIgb2YgY29sdW1ucyBvZiB0aGUgY29udGFpbmVyICgxMiBieSBkZWZhdWx0KS5cbiAgICogSWYgJ2F1dG8nLCB0aGUgZ3JpZCBpdGVtJ3Mgd2lkdGggbWF0Y2hlcyBpdHMgY29udGVudC5cbiAgICogSWYgZmFsc2UsIHRoZSBwcm9wIGlzIGlnbm9yZWQuXG4gICAqIElmIHRydWUsIHRoZSBncmlkIGl0ZW0ncyB3aWR0aCBncm93cyB0byB1c2UgdGhlIHNwYWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JpZCBjb250YWluZXIuXG4gICAqIFRoZSB2YWx1ZSBpcyBhcHBsaWVkIGZvciB0aGUgYG1kYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5ib29sXSksXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSB2ZXJ0aWNhbCBzcGFjZSBiZXR3ZWVuIHRoZSB0eXBlIGBpdGVtYCBjb21wb25lbnRzLlxuICAgKiBJdCBvdmVycmlkZXMgdGhlIHZhbHVlIG9mIHRoZSBgc3BhY2luZ2AgcHJvcC5cbiAgICovXG4gIHJvd1NwYWNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGEgbnVtYmVyLCBpdCBzZXRzIHRoZSBudW1iZXIgb2YgY29sdW1ucyB0aGUgZ3JpZCBpdGVtIHVzZXMuXG4gICAqIEl0IGNhbid0IGJlIGdyZWF0ZXIgdGhhbiB0aGUgdG90YWwgbnVtYmVyIG9mIGNvbHVtbnMgb2YgdGhlIGNvbnRhaW5lciAoMTIgYnkgZGVmYXVsdCkuXG4gICAqIElmICdhdXRvJywgdGhlIGdyaWQgaXRlbSdzIHdpZHRoIG1hdGNoZXMgaXRzIGNvbnRlbnQuXG4gICAqIElmIGZhbHNlLCB0aGUgcHJvcCBpcyBpZ25vcmVkLlxuICAgKiBJZiB0cnVlLCB0aGUgZ3JpZCBpdGVtJ3Mgd2lkdGggZ3Jvd3MgdG8gdXNlIHRoZSBzcGFjZSBhdmFpbGFibGUgaW4gdGhlIGdyaWQgY29udGFpbmVyLlxuICAgKiBUaGUgdmFsdWUgaXMgYXBwbGllZCBmb3IgdGhlIGBzbWAgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNtOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuYm9vbF0pLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgdHlwZSBgaXRlbWAgY29tcG9uZW50cy5cbiAgICogSXQgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHR5cGUgYGNvbnRhaW5lcmAgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBzcGFjaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSkpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgZmxleC13cmFwYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKiBAZGVmYXVsdCAnd3JhcCdcbiAgICovXG4gIHdyYXA6IFByb3BUeXBlcy5vbmVPZihbJ25vd3JhcCcsICd3cmFwLXJldmVyc2UnLCAnd3JhcCddKSxcbiAgLyoqXG4gICAqIElmIGEgbnVtYmVyLCBpdCBzZXRzIHRoZSBudW1iZXIgb2YgY29sdW1ucyB0aGUgZ3JpZCBpdGVtIHVzZXMuXG4gICAqIEl0IGNhbid0IGJlIGdyZWF0ZXIgdGhhbiB0aGUgdG90YWwgbnVtYmVyIG9mIGNvbHVtbnMgb2YgdGhlIGNvbnRhaW5lciAoMTIgYnkgZGVmYXVsdCkuXG4gICAqIElmICdhdXRvJywgdGhlIGdyaWQgaXRlbSdzIHdpZHRoIG1hdGNoZXMgaXRzIGNvbnRlbnQuXG4gICAqIElmIGZhbHNlLCB0aGUgcHJvcCBpcyBpZ25vcmVkLlxuICAgKiBJZiB0cnVlLCB0aGUgZ3JpZCBpdGVtJ3Mgd2lkdGggZ3Jvd3MgdG8gdXNlIHRoZSBzcGFjZSBhdmFpbGFibGUgaW4gdGhlIGdyaWQgY29udGFpbmVyLlxuICAgKiBUaGUgdmFsdWUgaXMgYXBwbGllZCBmb3IgdGhlIGB4bGAgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHhsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuYm9vbF0pLFxuICAvKipcbiAgICogSWYgYSBudW1iZXIsIGl0IHNldHMgdGhlIG51bWJlciBvZiBjb2x1bW5zIHRoZSBncmlkIGl0ZW0gdXNlcy5cbiAgICogSXQgY2FuJ3QgYmUgZ3JlYXRlciB0aGFuIHRoZSB0b3RhbCBudW1iZXIgb2YgY29sdW1ucyBvZiB0aGUgY29udGFpbmVyICgxMiBieSBkZWZhdWx0KS5cbiAgICogSWYgJ2F1dG8nLCB0aGUgZ3JpZCBpdGVtJ3Mgd2lkdGggbWF0Y2hlcyBpdHMgY29udGVudC5cbiAgICogSWYgZmFsc2UsIHRoZSBwcm9wIGlzIGlnbm9yZWQuXG4gICAqIElmIHRydWUsIHRoZSBncmlkIGl0ZW0ncyB3aWR0aCBncm93cyB0byB1c2UgdGhlIHNwYWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JpZCBjb250YWluZXIuXG4gICAqIFRoZSB2YWx1ZSBpcyBhcHBsaWVkIGZvciBhbGwgdGhlIHNjcmVlbiBzaXplcyB3aXRoIHRoZSBsb3dlc3QgcHJpb3JpdHkuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICB4czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLmJvb2xdKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaXQgc2V0cyBgbWluLXdpZHRoOiAwYCBvbiB0aGUgaXRlbS5cbiAgICogUmVmZXIgdG8gdGhlIGxpbWl0YXRpb25zIHNlY3Rpb24gb2YgdGhlIGRvY3VtZW50YXRpb24gdG8gYmV0dGVyIHVuZGVyc3RhbmQgdGhlIHVzZSBjYXNlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgemVyb01pbldpZHRoOiBQcm9wVHlwZXMuYm9vbFxufSA6IHZvaWQgMDtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGNvbnN0IHJlcXVpcmVQcm9wID0gcmVxdWlyZVByb3BGYWN0b3J5KCdHcmlkJywgR3JpZCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNvbmNhdFxuICBHcmlkWydwcm9wVHlwZXMnICsgJyddID0gX2V4dGVuZHMoe30sIEdyaWQucHJvcFR5cGVzLCB7XG4gICAgZGlyZWN0aW9uOiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgbGc6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgbWQ6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgc206IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgc3BhY2luZzogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIHdyYXA6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICB4czogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICB6ZXJvTWluV2lkdGg6IHJlcXVpcmVQcm9wKCdpdGVtJylcbiAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBHcmlkOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlua1V0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGluaycsIHNsb3QpO1xufVxuY29uc3QgbGlua0NsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaW5rJywgWydyb290JywgJ3VuZGVybGluZU5vbmUnLCAndW5kZXJsaW5lSG92ZXInLCAndW5kZXJsaW5lQWx3YXlzJywgJ2J1dHRvbicsICdmb2N1c1Zpc2libGUnXSk7XG5leHBvcnQgZGVmYXVsdCBsaW5rQ2xhc3NlczsiLCJpbXBvcnQgeyBhbHBoYSwgZ2V0UGF0aCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmV4cG9ydCBjb25zdCBjb2xvclRyYW5zZm9ybWF0aW9ucyA9IHtcbiAgcHJpbWFyeTogJ3ByaW1hcnkubWFpbicsXG4gIHRleHRQcmltYXJ5OiAndGV4dC5wcmltYXJ5JyxcbiAgc2Vjb25kYXJ5OiAnc2Vjb25kYXJ5Lm1haW4nLFxuICB0ZXh0U2Vjb25kYXJ5OiAndGV4dC5zZWNvbmRhcnknLFxuICBlcnJvcjogJ2Vycm9yLm1haW4nXG59O1xuY29uc3QgdHJhbnNmb3JtRGVwcmVjYXRlZENvbG9ycyA9IGNvbG9yID0+IHtcbiAgcmV0dXJuIGNvbG9yVHJhbnNmb3JtYXRpb25zW2NvbG9yXSB8fCBjb2xvcjtcbn07XG5jb25zdCBnZXRUZXh0RGVjb3JhdGlvbiA9ICh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGNvbnN0IHRyYW5zZm9ybWVkQ29sb3IgPSB0cmFuc2Zvcm1EZXByZWNhdGVkQ29sb3JzKG93bmVyU3RhdGUuY29sb3IpO1xuICBjb25zdCBjb2xvciA9IGdldFBhdGgodGhlbWUsIGBwYWxldHRlLiR7dHJhbnNmb3JtZWRDb2xvcn1gLCBmYWxzZSkgfHwgb3duZXJTdGF0ZS5jb2xvcjtcbiAgY29uc3QgY2hhbm5lbENvbG9yID0gZ2V0UGF0aCh0aGVtZSwgYHBhbGV0dGUuJHt0cmFuc2Zvcm1lZENvbG9yfUNoYW5uZWxgKTtcbiAgaWYgKCd2YXJzJyBpbiB0aGVtZSAmJiBjaGFubmVsQ29sb3IpIHtcbiAgICByZXR1cm4gYHJnYmEoJHtjaGFubmVsQ29sb3J9IC8gMC40KWA7XG4gIH1cbiAgcmV0dXJuIGFscGhhKGNvbG9yLCAwLjQpO1xufTtcbmV4cG9ydCBkZWZhdWx0IGdldFRleHREZWNvcmF0aW9uOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwib25CbHVyXCIsIFwib25Gb2N1c1wiLCBcIlR5cG9ncmFwaHlDbGFzc2VzXCIsIFwidW5kZXJsaW5lXCIsIFwidmFyaWFudFwiLCBcInN4XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB1c2VJc0ZvY3VzVmlzaWJsZSBmcm9tICcuLi91dGlscy91c2VJc0ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuaW1wb3J0IGxpbmtDbGFzc2VzLCB7IGdldExpbmtVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2xpbmtDbGFzc2VzJztcbmltcG9ydCBnZXRUZXh0RGVjb3JhdGlvbiwgeyBjb2xvclRyYW5zZm9ybWF0aW9ucyB9IGZyb20gJy4vZ2V0VGV4dERlY29yYXRpb24nO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGNvbXBvbmVudCxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgdW5kZXJsaW5lXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBgdW5kZXJsaW5lJHtjYXBpdGFsaXplKHVuZGVybGluZSl9YCwgY29tcG9uZW50ID09PSAnYnV0dG9uJyAmJiAnYnV0dG9uJywgZm9jdXNWaXNpYmxlICYmICdmb2N1c1Zpc2libGUnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldExpbmtVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IExpbmtSb290ID0gc3R5bGVkKFR5cG9ncmFwaHksIHtcbiAgbmFtZTogJ011aUxpbmsnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW2B1bmRlcmxpbmUke2NhcGl0YWxpemUob3duZXJTdGF0ZS51bmRlcmxpbmUpfWBdLCBvd25lclN0YXRlLmNvbXBvbmVudCA9PT0gJ2J1dHRvbicgJiYgc3R5bGVzLmJ1dHRvbl07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS51bmRlcmxpbmUgPT09ICdub25lJyAmJiB7XG4gICAgdGV4dERlY29yYXRpb246ICdub25lJ1xuICB9LCBvd25lclN0YXRlLnVuZGVybGluZSA9PT0gJ2hvdmVyJyAmJiB7XG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJ1xuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS51bmRlcmxpbmUgPT09ICdhbHdheXMnICYmIF9leHRlbmRzKHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZSdcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgICB0ZXh0RGVjb3JhdGlvbkNvbG9yOiBnZXRUZXh0RGVjb3JhdGlvbih7XG4gICAgICB0aGVtZSxcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9KVxuICB9LCB7XG4gICAgJyY6aG92ZXInOiB7XG4gICAgICB0ZXh0RGVjb3JhdGlvbkNvbG9yOiAnaW5oZXJpdCdcbiAgICB9XG4gIH0pLCBvd25lclN0YXRlLmNvbXBvbmVudCA9PT0gJ2J1dHRvbicgJiYge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAvLyBSZXNldCBkZWZhdWx0IHZhbHVlXG4gICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICBvdXRsaW5lOiAwLFxuICAgIGJvcmRlcjogMCxcbiAgICBtYXJnaW46IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gU2FmYXJpXG4gICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIEZpcmVmb3hcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgTW96QXBwZWFyYW5jZTogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgV2Via2l0QXBwZWFyYW5jZTogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuICAgIH0sXG4gICAgW2AmLiR7bGlua0NsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBvdXRsaW5lOiAnYXV0bydcbiAgICB9XG4gIH0pO1xufSk7XG5jb25zdCBMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGluayhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTGluaydcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgICAgY29tcG9uZW50ID0gJ2EnLFxuICAgICAgb25CbHVyLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIFR5cG9ncmFwaHlDbGFzc2VzLFxuICAgICAgdW5kZXJsaW5lID0gJ2Fsd2F5cycsXG4gICAgICB2YXJpYW50ID0gJ2luaGVyaXQnLFxuICAgICAgc3hcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1clZpc2libGUsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNWaXNpYmxlLFxuICAgIHJlZjogZm9jdXNWaXNpYmxlUmVmXG4gIH0gPSB1c2VJc0ZvY3VzVmlzaWJsZSgpO1xuICBjb25zdCBbZm9jdXNWaXNpYmxlLCBzZXRGb2N1c1Zpc2libGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBoYW5kbGVyUmVmID0gdXNlRm9ya1JlZihyZWYsIGZvY3VzVmlzaWJsZVJlZik7XG4gIGNvbnN0IGhhbmRsZUJsdXIgPSBldmVudCA9PiB7XG4gICAgaGFuZGxlQmx1clZpc2libGUoZXZlbnQpO1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSBmYWxzZSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgICB9XG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gZXZlbnQgPT4ge1xuICAgIGhhbmRsZUZvY3VzVmlzaWJsZShldmVudCk7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IHRydWUpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICB9XG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGNvbXBvbmVudCxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgdW5kZXJsaW5lLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KExpbmtSb290LCBfZXh0ZW5kcyh7XG4gICAgY29sb3I6IGNvbG9yLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgY2xhc3NlczogVHlwb2dyYXBoeUNsYXNzZXMsXG4gICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIHJlZjogaGFuZGxlclJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHZhcmlhbnQ6IHZhcmlhbnQsXG4gICAgc3g6IFsuLi4oIU9iamVjdC5rZXlzKGNvbG9yVHJhbnNmb3JtYXRpb25zKS5pbmNsdWRlcyhjb2xvcikgPyBbe1xuICAgICAgY29sb3JcbiAgICB9XSA6IFtdKSwgLi4uKEFycmF5LmlzQXJyYXkoc3gpID8gc3ggOiBbc3hdKV1cbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGluay5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgbGluay5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8uYW55LFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZixcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIGBjbGFzc2VzYCBwcm9wIGFwcGxpZWQgdG8gdGhlIFtgVHlwb2dyYXBoeWBdKC9tYXRlcmlhbC11aS9hcGkvdHlwb2dyYXBoeS8pIGVsZW1lbnQuXG4gICAqL1xuICBUeXBvZ3JhcGh5Q2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZW4gdGhlIGxpbmsgc2hvdWxkIGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKiBAZGVmYXVsdCAnYWx3YXlzJ1xuICAgKi9cbiAgdW5kZXJsaW5lOiBQcm9wVHlwZXMub25lT2YoWydhbHdheXMnLCAnaG92ZXInLCAnbm9uZSddKSxcbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIHRoZW1lIHR5cG9ncmFwaHkgc3R5bGVzLlxuICAgKiBAZGVmYXVsdCAnaW5oZXJpdCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYm9keTEnLCAnYm9keTInLCAnYnV0dG9uJywgJ2NhcHRpb24nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaW5oZXJpdCcsICdvdmVybGluZScsICdzdWJ0aXRsZTEnLCAnc3VidGl0bGUyJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBMaW5rOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTEyIDEyYzIuMjEgMCA0LTEuNzkgNC00cy0xLjc5LTQtNC00LTQgMS43OS00IDQgMS43OSA0IDQgNHptMCAyYy0yLjY3IDAtOCAxLjM0LTggNHYyaDE2di0yYzAtMi42Ni01LjMzLTQtOC00elwiXG59KSwgJ1BlcnNvbicpOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QXZhdGFyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlBdmF0YXInLCBzbG90KTtcbn1cbmNvbnN0IGF2YXRhckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlBdmF0YXInLCBbJ3Jvb3QnLCAnY29sb3JEZWZhdWx0JywgJ2NpcmN1bGFyJywgJ3JvdW5kZWQnLCAnc3F1YXJlJywgJ2ltZycsICdmYWxsYmFjayddKTtcbmV4cG9ydCBkZWZhdWx0IGF2YXRhckNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWx0XCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJpbWdQcm9wc1wiLCBcInNpemVzXCIsIFwic3JjXCIsIFwic3JjU2V0XCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgUGVyc29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9QZXJzb24nO1xuaW1wb3J0IHsgZ2V0QXZhdGFyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9hdmF0YXJDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICB2YXJpYW50LFxuICAgIGNvbG9yRGVmYXVsdFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgY29sb3JEZWZhdWx0ICYmICdjb2xvckRlZmF1bHQnXSxcbiAgICBpbWc6IFsnaW1nJ10sXG4gICAgZmFsbGJhY2s6IFsnZmFsbGJhY2snXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEF2YXRhclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQXZhdGFyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQXZhdGFyJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCBvd25lclN0YXRlLmNvbG9yRGVmYXVsdCAmJiBzdHlsZXMuY29sb3JEZWZhdWx0XTtcbiAgfVxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIGZsZXhTaHJpbms6IDAsXG4gIHdpZHRoOiA0MCxcbiAgaGVpZ2h0OiA0MCxcbiAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKSxcbiAgbGluZUhlaWdodDogMSxcbiAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIHZhcmlhbnRzOiBbe1xuICAgIHByb3BzOiB7XG4gICAgICB2YXJpYW50OiAncm91bmRlZCdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBib3JkZXJSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXNcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgdmFyaWFudDogJ3NxdWFyZSdcbiAgICB9LFxuICAgIHN0eWxlOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IDBcbiAgICB9XG4gIH0sIHtcbiAgICBwcm9wczoge1xuICAgICAgY29sb3JEZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdFxuICAgIH0sIHRoZW1lLnZhcnMgPyB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMucGFsZXR0ZS5BdmF0YXIuZGVmYXVsdEJnXG4gICAgfSA6IF9leHRlbmRzKHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzQwMF1cbiAgICB9LCB0aGVtZS5hcHBseVN0eWxlcygnZGFyaycsIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzYwMF1cbiAgICB9KSkpXG4gIH1dXG59KSk7XG5jb25zdCBBdmF0YXJJbWcgPSBzdHlsZWQoJ2ltZycsIHtcbiAgbmFtZTogJ011aUF2YXRhcicsXG4gIHNsb3Q6ICdJbWcnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5pbWdcbn0pKHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgaGVpZ2h0OiAnMTAwJScsXG4gIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gIC8vIEhhbmRsZSBub24tc3F1YXJlIGltYWdlLiBUaGUgcHJvcGVydHkgaXNuJ3Qgc3VwcG9ydGVkIGJ5IElFMTEuXG4gIG9iamVjdEZpdDogJ2NvdmVyJyxcbiAgLy8gSGlkZSBhbHQgdGV4dC5cbiAgY29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIC8vIEhpZGUgdGhlIGltYWdlIGJyb2tlbiBpY29uLCBvbmx5IHdvcmtzIG9uIENocm9tZS5cbiAgdGV4dEluZGVudDogMTAwMDBcbn0pO1xuY29uc3QgQXZhdGFyRmFsbGJhY2sgPSBzdHlsZWQoUGVyc29uLCB7XG4gIG5hbWU6ICdNdWlBdmF0YXInLFxuICBzbG90OiAnRmFsbGJhY2snLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5mYWxsYmFja1xufSkoe1xuICB3aWR0aDogJzc1JScsXG4gIGhlaWdodDogJzc1JSdcbn0pO1xuZnVuY3Rpb24gdXNlTG9hZGVkKHtcbiAgY3Jvc3NPcmlnaW4sXG4gIHJlZmVycmVyUG9saWN5LFxuICBzcmMsXG4gIHNyY1NldFxufSkge1xuICBjb25zdCBbbG9hZGVkLCBzZXRMb2FkZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghc3JjICYmICFzcmNTZXQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHNldExvYWRlZChmYWxzZSk7XG4gICAgbGV0IGFjdGl2ZSA9IHRydWU7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZXRMb2FkZWQoJ2xvYWRlZCcpO1xuICAgIH07XG4gICAgaW1hZ2Uub25lcnJvciA9ICgpID0+IHtcbiAgICAgIGlmICghYWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNldExvYWRlZCgnZXJyb3InKTtcbiAgICB9O1xuICAgIGltYWdlLmNyb3NzT3JpZ2luID0gY3Jvc3NPcmlnaW47XG4gICAgaW1hZ2UucmVmZXJyZXJQb2xpY3kgPSByZWZlcnJlclBvbGljeTtcbiAgICBpbWFnZS5zcmMgPSBzcmM7XG4gICAgaWYgKHNyY1NldCkge1xuICAgICAgaW1hZ2Uuc3Jjc2V0ID0gc3JjU2V0O1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW2Nyb3NzT3JpZ2luLCByZWZlcnJlclBvbGljeSwgc3JjLCBzcmNTZXRdKTtcbiAgcmV0dXJuIGxvYWRlZDtcbn1cbmNvbnN0IEF2YXRhciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEF2YXRhcihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQXZhdGFyJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYWx0LFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuUHJvcCxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgaW1nUHJvcHMsXG4gICAgICBzaXplcyxcbiAgICAgIHNyYyxcbiAgICAgIHNyY1NldCxcbiAgICAgIHZhcmlhbnQgPSAnY2lyY3VsYXInXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGxldCBjaGlsZHJlbiA9IG51bGw7XG5cbiAgLy8gVXNlIGEgaG9vayBpbnN0ZWFkIG9mIG9uRXJyb3Igb24gdGhlIGltZyBlbGVtZW50IHRvIHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICBjb25zdCBsb2FkZWQgPSB1c2VMb2FkZWQoX2V4dGVuZHMoe30sIGltZ1Byb3BzLCB7XG4gICAgc3JjLFxuICAgIHNyY1NldFxuICB9KSk7XG4gIGNvbnN0IGhhc0ltZyA9IHNyYyB8fCBzcmNTZXQ7XG4gIGNvbnN0IGhhc0ltZ05vdEZhaWxpbmcgPSBoYXNJbWcgJiYgbG9hZGVkICE9PSAnZXJyb3InO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3JEZWZhdWx0OiAhaGFzSW1nTm90RmFpbGluZyxcbiAgICBjb21wb25lbnQsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBpZiAoaGFzSW1nTm90RmFpbGluZykge1xuICAgIGNoaWxkcmVuID0gLyojX19QVVJFX18qL19qc3goQXZhdGFySW1nLCBfZXh0ZW5kcyh7XG4gICAgICBhbHQ6IGFsdCxcbiAgICAgIHNyY1NldDogc3JjU2V0LFxuICAgICAgc3JjOiBzcmMsXG4gICAgICBzaXplczogc2l6ZXMsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmltZ1xuICAgIH0sIGltZ1Byb3BzKSk7XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW5Qcm9wICE9IG51bGwgJiYgY2hpbGRyZW5Qcm9wICE9PSAnJyAmJiB0eXBlb2YgY2hpbGRyZW5Qcm9wICE9PSAnYm9vbGVhbicpIHtcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuUHJvcDtcbiAgfSBlbHNlIGlmIChoYXNJbWcgJiYgYWx0KSB7XG4gICAgY2hpbGRyZW4gPSBhbHRbMF07XG4gIH0gZWxzZSB7XG4gICAgY2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovX2pzeChBdmF0YXJGYWxsYmFjaywge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5mYWxsYmFja1xuICAgIH0pO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChBdmF0YXJSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBBdmF0YXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIGBzcmNgIG9yIGBzcmNTZXRgIHRvXG4gICAqIHByb3ZpZGUgYW4gYWx0IGF0dHJpYnV0ZSBmb3IgdGhlIHJlbmRlcmVkIGBpbWdgIGVsZW1lbnQuXG4gICAqL1xuICBhbHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBVc2VkIHRvIHJlbmRlciBpY29uIG9yIHRleHQgZWxlbWVudHMgaW5zaWRlIHRoZSBBdmF0YXIgaWYgYHNyY2AgaXMgbm90IHNldC5cbiAgICogVGhpcyBjYW4gYmUgYW4gZWxlbWVudCwgb3IganVzdCBhIHN0cmluZy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW1nI2F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbWdgIGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyB1c2VkIHRvIGRpc3BsYXkgYW4gaW1hZ2UuXG4gICAqIEl0IGNhbiBiZSB1c2VkIHRvIGxpc3RlbiBmb3IgdGhlIGxvYWRpbmcgZXJyb3IgZXZlbnQuXG4gICAqL1xuICBpbWdQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBgc2l6ZXNgIGF0dHJpYnV0ZSBmb3IgdGhlIGBpbWdgIGVsZW1lbnQuXG4gICAqL1xuICBzaXplczogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBgc3JjYCBhdHRyaWJ1dGUgZm9yIHRoZSBgaW1nYCBlbGVtZW50LlxuICAgKi9cbiAgc3JjOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGBzcmNTZXRgIGF0dHJpYnV0ZSBmb3IgdGhlIGBpbWdgIGVsZW1lbnQuXG4gICAqIFVzZSB0aGlzIGF0dHJpYnV0ZSBmb3IgcmVzcG9uc2l2ZSBpbWFnZSBkaXNwbGF5LlxuICAgKi9cbiAgc3JjU2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHNoYXBlIG9mIHRoZSBhdmF0YXIuXG4gICAqIEBkZWZhdWx0ICdjaXJjdWxhcidcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnY2lyY3VsYXInLCAncm91bmRlZCcsICdzcXVhcmUnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEF2YXRhcjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk0xMiAyQzYuNDcgMiAyIDYuNDcgMiAxMnM0LjQ3IDEwIDEwIDEwIDEwLTQuNDcgMTAtMTBTMTcuNTMgMiAxMiAyem01IDEzLjU5TDE1LjU5IDE3IDEyIDEzLjQxIDguNDEgMTcgNyAxNS41OSAxMC41OSAxMiA3IDguNDEgOC40MSA3IDEyIDEwLjU5IDE1LjU5IDcgMTcgOC40MSAxMy40MSAxMiAxNyAxNS41OXpcIlxufSksICdDYW5jZWwnKTsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENoaXBVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNoaXAnLCBzbG90KTtcbn1cbmNvbnN0IGNoaXBDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2hpcCcsIFsncm9vdCcsICdzaXplU21hbGwnLCAnc2l6ZU1lZGl1bScsICdjb2xvckVycm9yJywgJ2NvbG9ySW5mbycsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnY29sb3JTdWNjZXNzJywgJ2NvbG9yV2FybmluZycsICdkaXNhYmxlZCcsICdjbGlja2FibGUnLCAnY2xpY2thYmxlQ29sb3JQcmltYXJ5JywgJ2NsaWNrYWJsZUNvbG9yU2Vjb25kYXJ5JywgJ2RlbGV0YWJsZScsICdkZWxldGFibGVDb2xvclByaW1hcnknLCAnZGVsZXRhYmxlQ29sb3JTZWNvbmRhcnknLCAnb3V0bGluZWQnLCAnZmlsbGVkJywgJ291dGxpbmVkUHJpbWFyeScsICdvdXRsaW5lZFNlY29uZGFyeScsICdmaWxsZWRQcmltYXJ5JywgJ2ZpbGxlZFNlY29uZGFyeScsICdhdmF0YXInLCAnYXZhdGFyU21hbGwnLCAnYXZhdGFyTWVkaXVtJywgJ2F2YXRhckNvbG9yUHJpbWFyeScsICdhdmF0YXJDb2xvclNlY29uZGFyeScsICdpY29uJywgJ2ljb25TbWFsbCcsICdpY29uTWVkaXVtJywgJ2ljb25Db2xvclByaW1hcnknLCAnaWNvbkNvbG9yU2Vjb25kYXJ5JywgJ2xhYmVsJywgJ2xhYmVsU21hbGwnLCAnbGFiZWxNZWRpdW0nLCAnZGVsZXRlSWNvbicsICdkZWxldGVJY29uU21hbGwnLCAnZGVsZXRlSWNvbk1lZGl1bScsICdkZWxldGVJY29uQ29sb3JQcmltYXJ5JywgJ2RlbGV0ZUljb25Db2xvclNlY29uZGFyeScsICdkZWxldGVJY29uT3V0bGluZWRDb2xvclByaW1hcnknLCAnZGVsZXRlSWNvbk91dGxpbmVkQ29sb3JTZWNvbmRhcnknLCAnZGVsZXRlSWNvbkZpbGxlZENvbG9yUHJpbWFyeScsICdkZWxldGVJY29uRmlsbGVkQ29sb3JTZWNvbmRhcnknLCAnZm9jdXNWaXNpYmxlJ10pO1xuZXhwb3J0IGRlZmF1bHQgY2hpcENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXZhdGFyXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xpY2thYmxlXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkZWxldGVJY29uXCIsIFwiZGlzYWJsZWRcIiwgXCJpY29uXCIsIFwibGFiZWxcIiwgXCJvbkNsaWNrXCIsIFwib25EZWxldGVcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwic2l6ZVwiLCBcInZhcmlhbnRcIiwgXCJ0YWJJbmRleFwiLCBcInNraXBGb2N1c1doZW5EaXNhYmxlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IENhbmNlbEljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0NhbmNlbCc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1bnN1cHBvcnRlZFByb3AgZnJvbSAnLi4vdXRpbHMvdW5zdXBwb3J0ZWRQcm9wJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IGNoaXBDbGFzc2VzLCB7IGdldENoaXBVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2NoaXBDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBkaXNhYmxlZCxcbiAgICBzaXplLFxuICAgIGNvbG9yLFxuICAgIGljb25Db2xvcixcbiAgICBvbkRlbGV0ZSxcbiAgICBjbGlja2FibGUsXG4gICAgdmFyaWFudFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YCwgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBjbGlja2FibGUgJiYgJ2NsaWNrYWJsZScsIGNsaWNrYWJsZSAmJiBgY2xpY2thYmxlQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIG9uRGVsZXRlICYmICdkZWxldGFibGUnLCBvbkRlbGV0ZSAmJiBgZGVsZXRhYmxlQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGAke3ZhcmlhbnR9JHtjYXBpdGFsaXplKGNvbG9yKX1gXSxcbiAgICBsYWJlbDogWydsYWJlbCcsIGBsYWJlbCR7Y2FwaXRhbGl6ZShzaXplKX1gXSxcbiAgICBhdmF0YXI6IFsnYXZhdGFyJywgYGF2YXRhciR7Y2FwaXRhbGl6ZShzaXplKX1gLCBgYXZhdGFyQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdLFxuICAgIGljb246IFsnaWNvbicsIGBpY29uJHtjYXBpdGFsaXplKHNpemUpfWAsIGBpY29uQ29sb3Ike2NhcGl0YWxpemUoaWNvbkNvbG9yKX1gXSxcbiAgICBkZWxldGVJY29uOiBbJ2RlbGV0ZUljb24nLCBgZGVsZXRlSWNvbiR7Y2FwaXRhbGl6ZShzaXplKX1gLCBgZGVsZXRlSWNvbkNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBgZGVsZXRlSWNvbiR7Y2FwaXRhbGl6ZSh2YXJpYW50KX1Db2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF1cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRDaGlwVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBDaGlwUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQ2hpcCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICBjb25zdCB7XG4gICAgICBjb2xvcixcbiAgICAgIGljb25Db2xvcixcbiAgICAgIGNsaWNrYWJsZSxcbiAgICAgIG9uRGVsZXRlLFxuICAgICAgc2l6ZSxcbiAgICAgIHZhcmlhbnRcbiAgICB9ID0gb3duZXJTdGF0ZTtcbiAgICByZXR1cm4gW3tcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5hdmF0YXJ9YF06IHN0eWxlcy5hdmF0YXJcbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyfWBdOiBzdHlsZXNbYGF2YXRhciR7Y2FwaXRhbGl6ZShzaXplKX1gXVxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5hdmF0YXJ9YF06IHN0eWxlc1tgYXZhdGFyQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmljb259YF06IHN0eWxlcy5pY29uXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmljb259YF06IHN0eWxlc1tgaWNvbiR7Y2FwaXRhbGl6ZShzaXplKX1gXVxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5pY29ufWBdOiBzdHlsZXNbYGljb25Db2xvciR7Y2FwaXRhbGl6ZShpY29uQ29sb3IpfWBdXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IHN0eWxlcy5kZWxldGVJY29uXG4gICAgfSwge1xuICAgICAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IHN0eWxlc1tgZGVsZXRlSWNvbiR7Y2FwaXRhbGl6ZShzaXplKX1gXVxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5kZWxldGVJY29ufWBdOiBzdHlsZXNbYGRlbGV0ZUljb25Db2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF1cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvbn1gXTogc3R5bGVzW2BkZWxldGVJY29uJHtjYXBpdGFsaXplKHZhcmlhbnQpfUNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXVxuICAgIH0sIHN0eWxlcy5yb290LCBzdHlsZXNbYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YF0sIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdLCBjbGlja2FibGUgJiYgc3R5bGVzLmNsaWNrYWJsZSwgY2xpY2thYmxlICYmIGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgc3R5bGVzW2BjbGlja2FibGVDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9KWBdLCBvbkRlbGV0ZSAmJiBzdHlsZXMuZGVsZXRhYmxlLCBvbkRlbGV0ZSAmJiBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIHN0eWxlc1tgZGVsZXRhYmxlQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdLCBzdHlsZXNbdmFyaWFudF0sIHN0eWxlc1tgJHt2YXJpYW50fSR7Y2FwaXRhbGl6ZShjb2xvcil9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBjb25zdCB0ZXh0Q29sb3IgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNzAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIG1heFdpZHRoOiAnMTAwJScsXG4gICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpLFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGhlaWdodDogMzIsXG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZCxcbiAgICBib3JkZXJSYWRpdXM6IDMyIC8gMixcbiAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydiYWNrZ3JvdW5kLWNvbG9yJywgJ2JveC1zaGFkb3cnXSksXG4gICAgLy8gcmVzZXQgY3Vyc29yIGV4cGxpY2l0bHkgaW4gY2FzZSBCdXR0b25CYXNlIGlzIHVzZWRcbiAgICBjdXJzb3I6ICd1bnNldCcsXG4gICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICBvdXRsaW5lOiAwLFxuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgYm9yZGVyOiAwLFxuICAgIC8vIFJlbW92ZSBgYnV0dG9uYCBib3JkZXJcbiAgICBwYWRkaW5nOiAwLFxuICAgIC8vIFJlbW92ZSBgYnV0dG9uYCBwYWRkaW5nXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgW2AmLiR7Y2hpcENsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgIG9wYWNpdHk6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZE9wYWNpdHksXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgICB9LFxuICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5hdmF0YXJ9YF06IHtcbiAgICAgIG1hcmdpbkxlZnQ6IDUsXG4gICAgICBtYXJnaW5SaWdodDogLTYsXG4gICAgICB3aWR0aDogMjQsXG4gICAgICBoZWlnaHQ6IDI0LFxuICAgICAgY29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuQ2hpcC5kZWZhdWx0QXZhdGFyQ29sb3IgOiB0ZXh0Q29sb3IsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKVxuICAgIH0sXG4gICAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhckNvbG9yUHJpbWFyeX1gXToge1xuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnByaW1hcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5wcmltYXJ5LmRhcmtcbiAgICB9LFxuICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5hdmF0YXJDb2xvclNlY29uZGFyeX1gXToge1xuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnNlY29uZGFyeS5jb250cmFzdFRleHQsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnNlY29uZGFyeS5kYXJrXG4gICAgfSxcbiAgICBbYCYgLiR7Y2hpcENsYXNzZXMuYXZhdGFyU21hbGx9YF06IHtcbiAgICAgIG1hcmdpbkxlZnQ6IDQsXG4gICAgICBtYXJnaW5SaWdodDogLTQsXG4gICAgICB3aWR0aDogMTgsXG4gICAgICBoZWlnaHQ6IDE4LFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMClcbiAgICB9LFxuICAgIFtgJiAuJHtjaGlwQ2xhc3Nlcy5pY29ufWBdOiBfZXh0ZW5kcyh7XG4gICAgICBtYXJnaW5MZWZ0OiA1LFxuICAgICAgbWFyZ2luUmlnaHQ6IC02XG4gICAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICAgIGZvbnRTaXplOiAxOCxcbiAgICAgIG1hcmdpbkxlZnQ6IDQsXG4gICAgICBtYXJnaW5SaWdodDogLTRcbiAgICB9LCBvd25lclN0YXRlLmljb25Db2xvciA9PT0gb3duZXJTdGF0ZS5jb2xvciAmJiBfZXh0ZW5kcyh7XG4gICAgICBjb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5DaGlwLmRlZmF1bHRJY29uQ29sb3IgOiB0ZXh0Q29sb3JcbiAgICB9LCBvd25lclN0YXRlLmNvbG9yICE9PSAnZGVmYXVsdCcgJiYge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0pKSxcbiAgICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvbn1gXTogX2V4dGVuZHMoe1xuICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICBjb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnRleHQucHJpbWFyeUNoYW5uZWx9IC8gMC4yNilgIDogYWxwaGEodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksIDAuMjYpLFxuICAgICAgZm9udFNpemU6IDIyLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBtYXJnaW46ICcwIDVweCAwIC02cHgnLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUudGV4dC5wcmltYXJ5Q2hhbm5lbH0gLyAwLjQpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LCAwLjQpXG4gICAgICB9XG4gICAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICAgIGZvbnRTaXplOiAxNixcbiAgICAgIG1hcmdpblJpZ2h0OiA0LFxuICAgICAgbWFyZ2luTGVmdDogLTRcbiAgICB9LCBvd25lclN0YXRlLmNvbG9yICE9PSAnZGVmYXVsdCcgJiYge1xuICAgICAgY29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5jb250cmFzdFRleHRDaGFubmVsfSAvIDAuNylgIDogYWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5jb250cmFzdFRleHQsIDAuNyksXG4gICAgICAnJjpob3ZlciwgJjphY3RpdmUnOiB7XG4gICAgICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5jb250cmFzdFRleHRcbiAgICAgIH1cbiAgICB9KVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgIGhlaWdodDogMjRcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2RlZmF1bHQnICYmIHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sXG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLmNvbnRyYXN0VGV4dFxuICB9LCBvd25lclN0YXRlLm9uRGVsZXRlICYmIHtcbiAgICBbYCYuJHtjaGlwQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZENoYW5uZWx9IC8gY2FsYygke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSArICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHl9KSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWQsIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmZvY3VzT3BhY2l0eSlcbiAgICB9XG4gIH0sIG93bmVyU3RhdGUub25EZWxldGUgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2RlZmF1bHQnICYmIHtcbiAgICBbYCYuJHtjaGlwQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0uZGFya1xuICAgIH1cbiAgfSk7XG59LCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuY2xpY2thYmxlICYmIHtcbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gICcmOmhvdmVyJzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZENoYW5uZWx9IC8gY2FsYygke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSArICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHl9KSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWQsIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSlcbiAgfSxcbiAgW2AmLiR7Y2hpcENsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkQ2hhbm5lbH0gLyBjYWxjKCR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9ICsgJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmZvY3VzT3BhY2l0eX0pKWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZCwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5ICsgdGhlbWUucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5KVxuICB9LFxuICAnJjphY3RpdmUnOiB7XG4gICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1sxXVxuICB9XG59LCBvd25lclN0YXRlLmNsaWNrYWJsZSAmJiBvd25lclN0YXRlLmNvbG9yICE9PSAnZGVmYXVsdCcgJiYge1xuICBbYCY6aG92ZXIsICYuJHtjaGlwQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLmRhcmtcbiAgfVxufSksICh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBib3JkZXI6IHRoZW1lLnZhcnMgPyBgMXB4IHNvbGlkICR7dGhlbWUudmFycy5wYWxldHRlLkNoaXAuZGVmYXVsdEJvcmRlcn1gIDogYDFweCBzb2xpZCAke3RoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVs0MDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzcwMF19YCxcbiAgW2AmLiR7Y2hpcENsYXNzZXMuY2xpY2thYmxlfTpob3ZlcmBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uaG92ZXJcbiAgfSxcbiAgW2AmLiR7Y2hpcENsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZm9jdXNcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhcn1gXToge1xuICAgIG1hcmdpbkxlZnQ6IDRcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmF2YXRhclNtYWxsfWBdOiB7XG4gICAgbWFyZ2luTGVmdDogMlxuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuaWNvbn1gXToge1xuICAgIG1hcmdpbkxlZnQ6IDRcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmljb25TbWFsbH1gXToge1xuICAgIG1hcmdpbkxlZnQ6IDJcbiAgfSxcbiAgW2AmIC4ke2NoaXBDbGFzc2VzLmRlbGV0ZUljb259YF06IHtcbiAgICBtYXJnaW5SaWdodDogNVxuICB9LFxuICBbYCYgLiR7Y2hpcENsYXNzZXMuZGVsZXRlSWNvblNtYWxsfWBdOiB7XG4gICAgbWFyZ2luUmlnaHQ6IDNcbiAgfVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiB7XG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLFxuICBib3JkZXI6IGAxcHggc29saWQgJHt0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbkNoYW5uZWx9IC8gMC43KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW4sIDAuNyl9YCxcbiAgW2AmLiR7Y2hpcENsYXNzZXMuY2xpY2thYmxlfTpob3ZlcmBdOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbkNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KVxuICB9LFxuICBbYCYuJHtjaGlwQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpXG4gIH0sXG4gIFtgJiAuJHtjaGlwQ2xhc3Nlcy5kZWxldGVJY29ufWBdOiB7XG4gICAgY29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluQ2hhbm5lbH0gLyAwLjcpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgMC43KSxcbiAgICAnJjpob3ZlciwgJjphY3RpdmUnOiB7XG4gICAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICAgIH1cbiAgfVxufSkpO1xuY29uc3QgQ2hpcExhYmVsID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQ2hpcCcsXG4gIHNsb3Q6ICdMYWJlbCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgc2l6ZVxuICAgIH0gPSBvd25lclN0YXRlO1xuICAgIHJldHVybiBbc3R5bGVzLmxhYmVsLCBzdHlsZXNbYGxhYmVsJHtjYXBpdGFsaXplKHNpemUpfWBdXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgcGFkZGluZ0xlZnQ6IDEyLFxuICBwYWRkaW5nUmlnaHQ6IDEyLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDExLFxuICBwYWRkaW5nUmlnaHQ6IDExXG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBwYWRkaW5nTGVmdDogOCxcbiAgcGFkZGluZ1JpZ2h0OiA4XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDcsXG4gIHBhZGRpbmdSaWdodDogN1xufSkpO1xuZnVuY3Rpb24gaXNEZWxldGVLZXlib2FyZEV2ZW50KGtleWJvYXJkRXZlbnQpIHtcbiAgcmV0dXJuIGtleWJvYXJkRXZlbnQua2V5ID09PSAnQmFja3NwYWNlJyB8fCBrZXlib2FyZEV2ZW50LmtleSA9PT0gJ0RlbGV0ZSc7XG59XG5cbi8qKlxuICogQ2hpcHMgcmVwcmVzZW50IGNvbXBsZXggZW50aXRpZXMgaW4gc21hbGwgYmxvY2tzLCBzdWNoIGFzIGEgY29udGFjdC5cbiAqL1xuY29uc3QgQ2hpcCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENoaXAoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUNoaXAnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhdmF0YXI6IGF2YXRhclByb3AsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjbGlja2FibGU6IGNsaWNrYWJsZVByb3AsXG4gICAgICBjb2xvciA9ICdkZWZhdWx0JyxcbiAgICAgIGNvbXBvbmVudDogQ29tcG9uZW50UHJvcCxcbiAgICAgIGRlbGV0ZUljb246IGRlbGV0ZUljb25Qcm9wLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGljb246IGljb25Qcm9wLFxuICAgICAgbGFiZWwsXG4gICAgICBvbkNsaWNrLFxuICAgICAgb25EZWxldGUsXG4gICAgICBvbktleURvd24sXG4gICAgICBvbktleVVwLFxuICAgICAgc2l6ZSA9ICdtZWRpdW0nLFxuICAgICAgdmFyaWFudCA9ICdmaWxsZWQnLFxuICAgICAgdGFiSW5kZXgsXG4gICAgICBza2lwRm9jdXNXaGVuRGlzYWJsZWQgPSBmYWxzZSAvLyBUT0RPIHY2OiBSZW5hbWUgdG8gYGZvY3VzYWJsZVdoZW5EaXNhYmxlZGAuXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGNoaXBSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoY2hpcFJlZiwgcmVmKTtcbiAgY29uc3QgaGFuZGxlRGVsZXRlSWNvbkNsaWNrID0gZXZlbnQgPT4ge1xuICAgIC8vIFN0b3AgdGhlIGV2ZW50IGZyb20gYnViYmxpbmcgdXAgdG8gdGhlIGBDaGlwYFxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGlmIChvbkRlbGV0ZSkge1xuICAgICAgb25EZWxldGUoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IGV2ZW50ID0+IHtcbiAgICAvLyBJZ25vcmUgZXZlbnRzIGZyb20gY2hpbGRyZW4gb2YgYENoaXBgLlxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC50YXJnZXQgJiYgaXNEZWxldGVLZXlib2FyZEV2ZW50KGV2ZW50KSkge1xuICAgICAgLy8gV2lsbCBiZSBoYW5kbGVkIGluIGtleVVwLCBvdGhlcndpc2Ugc29tZSBicm93c2Vyc1xuICAgICAgLy8gbWlnaHQgaW5pdCBuYXZpZ2F0aW9uXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlS2V5VXAgPSBldmVudCA9PiB7XG4gICAgLy8gSWdub3JlIGV2ZW50cyBmcm9tIGNoaWxkcmVuIG9mIGBDaGlwYC5cbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCA9PT0gZXZlbnQudGFyZ2V0KSB7XG4gICAgICBpZiAob25EZWxldGUgJiYgaXNEZWxldGVLZXlib2FyZEV2ZW50KGV2ZW50KSkge1xuICAgICAgICBvbkRlbGV0ZShldmVudCk7XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScgJiYgY2hpcFJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNoaXBSZWYuY3VycmVudC5ibHVyKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbktleVVwKSB7XG4gICAgICBvbktleVVwKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGNsaWNrYWJsZSA9IGNsaWNrYWJsZVByb3AgIT09IGZhbHNlICYmIG9uQ2xpY2sgPyB0cnVlIDogY2xpY2thYmxlUHJvcDtcbiAgY29uc3QgY29tcG9uZW50ID0gY2xpY2thYmxlIHx8IG9uRGVsZXRlID8gQnV0dG9uQmFzZSA6IENvbXBvbmVudFByb3AgfHwgJ2Rpdic7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQsXG4gICAgc2l6ZSxcbiAgICBjb2xvcixcbiAgICBpY29uQ29sb3I6IC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChpY29uUHJvcCkgPyBpY29uUHJvcC5wcm9wcy5jb2xvciB8fCBjb2xvciA6IGNvbG9yLFxuICAgIG9uRGVsZXRlOiAhIW9uRGVsZXRlLFxuICAgIGNsaWNrYWJsZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IG1vcmVQcm9wcyA9IGNvbXBvbmVudCA9PT0gQnV0dG9uQmFzZSA/IF9leHRlbmRzKHtcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudFByb3AgfHwgJ2RpdicsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBjbGFzc2VzLmZvY3VzVmlzaWJsZVxuICB9LCBvbkRlbGV0ZSAmJiB7XG4gICAgZGlzYWJsZVJpcHBsZTogdHJ1ZVxuICB9KSA6IHt9O1xuICBsZXQgZGVsZXRlSWNvbiA9IG51bGw7XG4gIGlmIChvbkRlbGV0ZSkge1xuICAgIGRlbGV0ZUljb24gPSBkZWxldGVJY29uUHJvcCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZGVsZXRlSWNvblByb3ApID8gKCAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGRlbGV0ZUljb25Qcm9wLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goZGVsZXRlSWNvblByb3AucHJvcHMuY2xhc3NOYW1lLCBjbGFzc2VzLmRlbGV0ZUljb24pLFxuICAgICAgb25DbGljazogaGFuZGxlRGVsZXRlSWNvbkNsaWNrXG4gICAgfSkpIDogLyojX19QVVJFX18qL19qc3goQ2FuY2VsSWNvbiwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZGVsZXRlSWNvbiksXG4gICAgICBvbkNsaWNrOiBoYW5kbGVEZWxldGVJY29uQ2xpY2tcbiAgICB9KTtcbiAgfVxuICBsZXQgYXZhdGFyID0gbnVsbDtcbiAgaWYgKGF2YXRhclByb3AgJiYgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGF2YXRhclByb3ApKSB7XG4gICAgYXZhdGFyID0gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChhdmF0YXJQcm9wLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5hdmF0YXIsIGF2YXRhclByb3AucHJvcHMuY2xhc3NOYW1lKVxuICAgIH0pO1xuICB9XG4gIGxldCBpY29uID0gbnVsbDtcbiAgaWYgKGljb25Qcm9wICYmIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChpY29uUHJvcCkpIHtcbiAgICBpY29uID0gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChpY29uUHJvcCwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuaWNvbiwgaWNvblByb3AucHJvcHMuY2xhc3NOYW1lKVxuICAgIH0pO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGF2YXRhciAmJiBpY29uKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFRoZSBDaGlwIGNvbXBvbmVudCBjYW4gbm90IGhhbmRsZSB0aGUgYXZhdGFyICcgKyAnYW5kIHRoZSBpY29uIHByb3AgYXQgdGhlIHNhbWUgdGltZS4gUGljayBvbmUuJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoQ2hpcFJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZGlzYWJsZWQ6IGNsaWNrYWJsZSAmJiBkaXNhYmxlZCA/IHRydWUgOiB1bmRlZmluZWQsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgdGFiSW5kZXg6IHNraXBGb2N1c1doZW5EaXNhYmxlZCAmJiBkaXNhYmxlZCA/IC0xIDogdGFiSW5kZXgsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBtb3JlUHJvcHMsIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFthdmF0YXIgfHwgaWNvbiwgLyojX19QVVJFX18qL19qc3goQ2hpcExhYmVsLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5sYWJlbCksXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2hpbGRyZW46IGxhYmVsXG4gICAgfSksIGRlbGV0ZUljb25dXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2hpcC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgQXZhdGFyIGVsZW1lbnQgdG8gZGlzcGxheS5cbiAgICovXG4gIGF2YXRhcjogUHJvcFR5cGVzLmVsZW1lbnQsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaXNuJ3Qgc3VwcG9ydGVkLlxuICAgKiBVc2UgdGhlIGBjb21wb25lbnRgIHByb3AgaWYgeW91IG5lZWQgdG8gY2hhbmdlIHRoZSBjaGlsZHJlbiBzdHJ1Y3R1cmUuXG4gICAqL1xuICBjaGlsZHJlbjogdW5zdXBwb3J0ZWRQcm9wLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaXAgd2lsbCBhcHBlYXIgY2xpY2thYmxlLCBhbmQgd2lsbCByYWlzZSB3aGVuIHByZXNzZWQsXG4gICAqIGV2ZW4gaWYgdGhlIG9uQ2xpY2sgcHJvcCBpcyBub3QgZGVmaW5lZC5cbiAgICogSWYgYGZhbHNlYCwgdGhlIGNoaXAgd2lsbCBub3QgYXBwZWFyIGNsaWNrYWJsZSwgZXZlbiBpZiBvbkNsaWNrIHByb3AgaXMgZGVmaW5lZC5cbiAgICogVGhpcyBjYW4gYmUgdXNlZCwgZm9yIGV4YW1wbGUsXG4gICAqIGFsb25nIHdpdGggdGhlIGNvbXBvbmVudCBwcm9wIHRvIGluZGljYXRlIGFuIGFuY2hvciBDaGlwIGlzIGNsaWNrYWJsZS5cbiAgICogTm90ZTogdGhpcyBjb250cm9scyB0aGUgVUkgYW5kIGRvZXMgbm90IGFmZmVjdCB0aGUgb25DbGljayBldmVudC5cbiAgICovXG4gIGNsaWNrYWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAnZGVmYXVsdCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgZGVsZXRlIGljb24gZWxlbWVudC4gU2hvd24gb25seSBpZiBgb25EZWxldGVgIGlzIHNldC5cbiAgICovXG4gIGRlbGV0ZUljb246IFByb3BUeXBlcy5lbGVtZW50LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWNvbiBlbGVtZW50LlxuICAgKi9cbiAgaWNvbjogUHJvcFR5cGVzLmVsZW1lbnQsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBkZWxldGUgaWNvbiBpcyBjbGlja2VkLlxuICAgKiBJZiBzZXQsIHRoZSBkZWxldGUgaWNvbiB3aWxsIGJlIHNob3duLlxuICAgKi9cbiAgb25EZWxldGU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGFsbG93cyB0aGUgZGlzYWJsZWQgY2hpcCB0byBlc2NhcGUgZm9jdXMuXG4gICAqIElmIGBmYWxzZWAsIGFsbG93cyB0aGUgZGlzYWJsZWQgY2hpcCB0byByZWNlaXZlIGZvY3VzLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc2tpcEZvY3VzV2hlbkRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAnZmlsbGVkJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENoaXA7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNvbXBvbmVudFwiLCBcImRpcmVjdGlvblwiLCBcInNwYWNpbmdcIiwgXCJkaXZpZGVyXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJ1c2VGbGV4R2FwXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZGVlcG1lcmdlLCB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcywgdW5zdGFibGVfZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgYXMgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBzeXN0ZW1TdHlsZWQgZnJvbSAnLi4vc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzU3lzdGVtIGZyb20gJy4uL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsgZXh0ZW5kU3hQcm9wIH0gZnJvbSAnLi4vc3R5bGVGdW5jdGlvblN4JztcbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cywgbWVyZ2VCcmVha3BvaW50c0luT3JkZXIsIHJlc29sdmVCcmVha3BvaW50VmFsdWVzIH0gZnJvbSAnLi4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlTcGFjaW5nLCBnZXRWYWx1ZSB9IGZyb20gJy4uL3NwYWNpbmcnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG4vLyB3aWRlbmluZyBUaGVtZSB0byBhbnkgc28gdGhhdCB0aGUgY29uc3VtZXIgY2FuIG93biB0aGUgdGhlbWUgc3RydWN0dXJlLlxuY29uc3QgZGVmYXVsdENyZWF0ZVN0eWxlZENvbXBvbmVudCA9IHN5c3RlbVN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpU3RhY2snLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pO1xuZnVuY3Rpb24gdXNlVGhlbWVQcm9wc0RlZmF1bHQocHJvcHMpIHtcbiAgcmV0dXJuIHVzZVRoZW1lUHJvcHNTeXN0ZW0oe1xuICAgIHByb3BzLFxuICAgIG5hbWU6ICdNdWlTdGFjaycsXG4gICAgZGVmYXVsdFRoZW1lXG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybiBhbiBhcnJheSB3aXRoIHRoZSBzZXBhcmF0b3IgUmVhY3QgZWxlbWVudCBpbnRlcnNwZXJzZWQgYmV0d2VlblxuICogZWFjaCBSZWFjdCBub2RlIG9mIHRoZSBpbnB1dCBjaGlsZHJlbi5cbiAqXG4gKiA+IGpvaW5DaGlsZHJlbihbMSwyLDNdLCAwKVxuICogWzEsMCwyLDAsM11cbiAqL1xuZnVuY3Rpb24gam9pbkNoaWxkcmVuKGNoaWxkcmVuLCBzZXBhcmF0b3IpIHtcbiAgY29uc3QgY2hpbGRyZW5BcnJheSA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pLmZpbHRlcihCb29sZWFuKTtcbiAgcmV0dXJuIGNoaWxkcmVuQXJyYXkucmVkdWNlKChvdXRwdXQsIGNoaWxkLCBpbmRleCkgPT4ge1xuICAgIG91dHB1dC5wdXNoKGNoaWxkKTtcbiAgICBpZiAoaW5kZXggPCBjaGlsZHJlbkFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgIG91dHB1dC5wdXNoKCAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KHNlcGFyYXRvciwge1xuICAgICAgICBrZXk6IGBzZXBhcmF0b3ItJHtpbmRleH1gXG4gICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sIFtdKTtcbn1cbmNvbnN0IGdldFNpZGVGcm9tRGlyZWN0aW9uID0gZGlyZWN0aW9uID0+IHtcbiAgcmV0dXJuIHtcbiAgICByb3c6ICdMZWZ0JyxcbiAgICAncm93LXJldmVyc2UnOiAnUmlnaHQnLFxuICAgIGNvbHVtbjogJ1RvcCcsXG4gICAgJ2NvbHVtbi1yZXZlcnNlJzogJ0JvdHRvbSdcbiAgfVtkaXJlY3Rpb25dO1xufTtcbmV4cG9ydCBjb25zdCBzdHlsZSA9ICh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiB7XG4gIGxldCBzdHlsZXMgPSBfZXh0ZW5kcyh7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nXG4gIH0sIGhhbmRsZUJyZWFrcG9pbnRzKHtcbiAgICB0aGVtZVxuICB9LCByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyh7XG4gICAgdmFsdWVzOiBvd25lclN0YXRlLmRpcmVjdGlvbixcbiAgICBicmVha3BvaW50czogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzXG4gIH0pLCBwcm9wVmFsdWUgPT4gKHtcbiAgICBmbGV4RGlyZWN0aW9uOiBwcm9wVmFsdWVcbiAgfSkpKTtcbiAgaWYgKG93bmVyU3RhdGUuc3BhY2luZykge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlTcGFjaW5nKHRoZW1lKTtcbiAgICBjb25zdCBiYXNlID0gT2JqZWN0LmtleXModGhlbWUuYnJlYWtwb2ludHMudmFsdWVzKS5yZWR1Y2UoKGFjYywgYnJlYWtwb2ludCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBvd25lclN0YXRlLnNwYWNpbmcgPT09ICdvYmplY3QnICYmIG93bmVyU3RhdGUuc3BhY2luZ1ticmVha3BvaW50XSAhPSBudWxsIHx8IHR5cGVvZiBvd25lclN0YXRlLmRpcmVjdGlvbiA9PT0gJ29iamVjdCcgJiYgb3duZXJTdGF0ZS5kaXJlY3Rpb25bYnJlYWtwb2ludF0gIT0gbnVsbCkge1xuICAgICAgICBhY2NbYnJlYWtwb2ludF0gPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gICAgY29uc3QgZGlyZWN0aW9uVmFsdWVzID0gcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICAgICAgdmFsdWVzOiBvd25lclN0YXRlLmRpcmVjdGlvbixcbiAgICAgIGJhc2VcbiAgICB9KTtcbiAgICBjb25zdCBzcGFjaW5nVmFsdWVzID0gcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICAgICAgdmFsdWVzOiBvd25lclN0YXRlLnNwYWNpbmcsXG4gICAgICBiYXNlXG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBkaXJlY3Rpb25WYWx1ZXMgPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3Qua2V5cyhkaXJlY3Rpb25WYWx1ZXMpLmZvckVhY2goKGJyZWFrcG9pbnQsIGluZGV4LCBicmVha3BvaW50cykgPT4ge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb25WYWx1ZSA9IGRpcmVjdGlvblZhbHVlc1ticmVha3BvaW50XTtcbiAgICAgICAgaWYgKCFkaXJlY3Rpb25WYWx1ZSkge1xuICAgICAgICAgIGNvbnN0IHByZXZpb3VzRGlyZWN0aW9uVmFsdWUgPSBpbmRleCA+IDAgPyBkaXJlY3Rpb25WYWx1ZXNbYnJlYWtwb2ludHNbaW5kZXggLSAxXV0gOiAnY29sdW1uJztcbiAgICAgICAgICBkaXJlY3Rpb25WYWx1ZXNbYnJlYWtwb2ludF0gPSBwcmV2aW91c0RpcmVjdGlvblZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gKHByb3BWYWx1ZSwgYnJlYWtwb2ludCkgPT4ge1xuICAgICAgaWYgKG93bmVyU3RhdGUudXNlRmxleEdhcCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGdhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIFRoZSB1c2VGbGV4R2FwPXtmYWxzZX0gaW1wbGVtZW50IHJlbGllcyBvbiBlYWNoIGNoaWxkIHRvIGdpdmUgdXAgY29udHJvbCBvZiB0aGUgbWFyZ2luLlxuICAgICAgICAvLyBXZSBuZWVkIHRvIHJlc2V0IHRoZSBtYXJnaW4gdG8gYXZvaWQgZG91YmxlIHNwYWNpbmcuXG4gICAgICAgICcmID4gOm5vdChzdHlsZSk6bm90KHN0eWxlKSc6IHtcbiAgICAgICAgICBtYXJnaW46IDBcbiAgICAgICAgfSxcbiAgICAgICAgJyYgPiA6bm90KHN0eWxlKSB+IDpub3Qoc3R5bGUpJzoge1xuICAgICAgICAgIFtgbWFyZ2luJHtnZXRTaWRlRnJvbURpcmVjdGlvbihicmVha3BvaW50ID8gZGlyZWN0aW9uVmFsdWVzW2JyZWFrcG9pbnRdIDogb3duZXJTdGF0ZS5kaXJlY3Rpb24pfWBdOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgc3R5bGVzID0gZGVlcG1lcmdlKHN0eWxlcywgaGFuZGxlQnJlYWtwb2ludHMoe1xuICAgICAgdGhlbWVcbiAgICB9LCBzcGFjaW5nVmFsdWVzLCBzdHlsZUZyb21Qcm9wVmFsdWUpKTtcbiAgfVxuICBzdHlsZXMgPSBtZXJnZUJyZWFrcG9pbnRzSW5PcmRlcih0aGVtZS5icmVha3BvaW50cywgc3R5bGVzKTtcbiAgcmV0dXJuIHN0eWxlcztcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdGFjayhvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIC8vIFRoaXMgd2lsbCBhbGxvdyBhZGRpbmcgY3VzdG9tIHN0eWxlZCBmbiAoZm9yIGV4YW1wbGUgZm9yIGN1c3RvbSBzeCBzdHlsZSBmdW5jdGlvbilcbiAgICBjcmVhdGVTdHlsZWRDb21wb25lbnQgPSBkZWZhdWx0Q3JlYXRlU3R5bGVkQ29tcG9uZW50LFxuICAgIHVzZVRoZW1lUHJvcHMgPSB1c2VUaGVtZVByb3BzRGVmYXVsdCxcbiAgICBjb21wb25lbnROYW1lID0gJ011aVN0YWNrJ1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2xvdHMgPSB7XG4gICAgICByb290OiBbJ3Jvb3QnXVxuICAgIH07XG4gICAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBzbG90ID0+IGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QpLCB7fSk7XG4gIH07XG4gIGNvbnN0IFN0YWNrUm9vdCA9IGNyZWF0ZVN0eWxlZENvbXBvbmVudChzdHlsZSk7XG4gIGNvbnN0IFN0YWNrID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gR3JpZChpblByb3BzLCByZWYpIHtcbiAgICBjb25zdCB0aGVtZVByb3BzID0gdXNlVGhlbWVQcm9wcyhpblByb3BzKTtcbiAgICBjb25zdCBwcm9wcyA9IGV4dGVuZFN4UHJvcCh0aGVtZVByb3BzKTsgLy8gYGNvbG9yYCB0eXBlIGNvbmZsaWN0cyB3aXRoIGh0bWwgY29sb3IgYXR0cmlidXRlLlxuICAgIGNvbnN0IHtcbiAgICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICAgIGRpcmVjdGlvbiA9ICdjb2x1bW4nLFxuICAgICAgICBzcGFjaW5nID0gMCxcbiAgICAgICAgZGl2aWRlcixcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgdXNlRmxleEdhcCA9IGZhbHNlXG4gICAgICB9ID0gcHJvcHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICAgIGNvbnN0IG93bmVyU3RhdGUgPSB7XG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzcGFjaW5nLFxuICAgICAgdXNlRmxleEdhcFxuICAgIH07XG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN0YWNrUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2hpbGRyZW46IGRpdmlkZXIgPyBqb2luQ2hpbGRyZW4oY2hpbGRyZW4sIGRpdmlkZXIpIDogY2hpbGRyZW5cbiAgICB9KSk7XG4gIH0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdGFjay5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pKSwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIGRpdmlkZXI6IFByb3BUeXBlcy5ub2RlLFxuICAgIHNwYWNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH0gOiB2b2lkIDA7XG4gIHJldHVybiBTdGFjaztcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVTdGFjayB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5jb25zdCBTdGFjayA9IGNyZWF0ZVN0YWNrKHtcbiAgY3JlYXRlU3R5bGVkQ29tcG9uZW50OiBzdHlsZWQoJ2RpdicsIHtcbiAgICBuYW1lOiAnTXVpU3RhY2snLFxuICAgIHNsb3Q6ICdSb290JyxcbiAgICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG4gIH0pLFxuICB1c2VUaGVtZVByb3BzOiBpblByb3BzID0+IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlTdGFjaydcbiAgfSlcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3RhY2sucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGZsZXgtZGlyZWN0aW9uYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQgaXMgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICogQGRlZmF1bHQgJ2NvbHVtbidcbiAgICovXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnY29sdW1uLXJldmVyc2UnLCAnY29sdW1uJywgJ3Jvdy1yZXZlcnNlJywgJ3JvdyddKSwgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mKFsnY29sdW1uLXJldmVyc2UnLCAnY29sdW1uJywgJ3Jvdy1yZXZlcnNlJywgJ3JvdyddKSksIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIEFkZCBhbiBlbGVtZW50IGJldHdlZW4gZWFjaCBjaGlsZC5cbiAgICovXG4gIGRpdmlkZXI6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgc3BhY2UgYmV0d2VlbiBpbW1lZGlhdGUgY2hpbGRyZW4uXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHNwYWNpbmc6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCwgd2hpY2ggYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgQ1NTIGZsZXhib3ggYGdhcGAgaXMgdXNlZCBpbnN0ZWFkIG9mIGFwcGx5aW5nIGBtYXJnaW5gIHRvIGNoaWxkcmVuLlxuICAgKlxuICAgKiBXaGlsZSBDU1MgYGdhcGAgcmVtb3ZlcyB0aGUgW2tub3duIGxpbWl0YXRpb25zXShodHRwczovL211aS5jb20vam95LXVpL3JlYWN0LXN0YWNrLyNsaW1pdGF0aW9ucyksXG4gICAqIGl0IGlzIG5vdCBmdWxseSBzdXBwb3J0ZWQgaW4gc29tZSBicm93c2Vycy4gV2UgcmVjb21tZW5kIGNoZWNraW5nIGh0dHBzOi8vY2FuaXVzZS5jb20vP3NlYXJjaD1mbGV4JTIwZ2FwIGJlZm9yZSB1c2luZyB0aGlzIGZsYWcuXG4gICAqXG4gICAqIFRvIGVuYWJsZSB0aGlzIGZsYWcgZ2xvYmFsbHksIGZvbGxvdyB0aGUgW3RoZW1lJ3MgZGVmYXVsdCBwcm9wc10oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vdGhlbWUtY29tcG9uZW50cy8jZGVmYXVsdC1wcm9wcykgY29uZmlndXJhdGlvbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHVzZUZsZXhHYXA6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU3RhY2s7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0SXRlbUJ1dHRvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdEl0ZW1CdXR0b24nLCBzbG90KTtcbn1cbmNvbnN0IGxpc3RJdGVtQnV0dG9uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3RJdGVtQnV0dG9uJywgWydyb290JywgJ2ZvY3VzVmlzaWJsZScsICdkZW5zZScsICdhbGlnbkl0ZW1zRmxleFN0YXJ0JywgJ2Rpc2FibGVkJywgJ2RpdmlkZXInLCAnZ3V0dGVycycsICdzZWxlY3RlZCddKTtcbmV4cG9ydCBkZWZhdWx0IGxpc3RJdGVtQnV0dG9uQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhbGlnbkl0ZW1zXCIsIFwiYXV0b0ZvY3VzXCIsIFwiY29tcG9uZW50XCIsIFwiY2hpbGRyZW5cIiwgXCJkZW5zZVwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwiZGl2aWRlclwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcInNlbGVjdGVkXCIsIFwiY2xhc3NOYW1lXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgYWxwaGEgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgc3R5bGVkLCB7IHJvb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi4vdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi4vTGlzdC9MaXN0Q29udGV4dCc7XG5pbXBvcnQgbGlzdEl0ZW1CdXR0b25DbGFzc2VzLCB7IGdldExpc3RJdGVtQnV0dG9uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0SXRlbUJ1dHRvbkNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBvdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5kZW5zZSAmJiBzdHlsZXMuZGVuc2UsIG93bmVyU3RhdGUuYWxpZ25JdGVtcyA9PT0gJ2ZsZXgtc3RhcnQnICYmIHN0eWxlcy5hbGlnbkl0ZW1zRmxleFN0YXJ0LCBvd25lclN0YXRlLmRpdmlkZXIgJiYgc3R5bGVzLmRpdmlkZXIsICFvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHN0eWxlcy5ndXR0ZXJzXTtcbn07XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgYWxpZ25JdGVtcyxcbiAgICBjbGFzc2VzLFxuICAgIGRlbnNlLFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIGRpdmlkZXIsXG4gICAgc2VsZWN0ZWRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRlbnNlICYmICdkZW5zZScsICFkaXNhYmxlR3V0dGVycyAmJiAnZ3V0dGVycycsIGRpdmlkZXIgJiYgJ2RpdmlkZXInLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBhbGlnbkl0ZW1zID09PSAnZmxleC1zdGFydCcgJiYgJ2FsaWduSXRlbXNGbGV4U3RhcnQnLCBzZWxlY3RlZCAmJiAnc2VsZWN0ZWQnXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGlzdEl0ZW1CdXR0b25VdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VkQ2xhc3Nlcyk7XG59O1xuY29uc3QgTGlzdEl0ZW1CdXR0b25Sb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcm9vdFNob3VsZEZvcndhcmRQcm9wKHByb3ApIHx8IHByb3AgPT09ICdjbGFzc2VzJyxcbiAgbmFtZTogJ011aUxpc3RJdGVtQnV0dG9uJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBmbGV4R3JvdzogMSxcbiAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICBtaW5XaWR0aDogMCxcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIHRleHRBbGlnbjogJ2xlZnQnLFxuICBwYWRkaW5nVG9wOiA4LFxuICBwYWRkaW5nQm90dG9tOiA4LFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gIH0pLFxuICAnJjpob3Zlcic6IHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmhvdmVyLFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgfVxuICB9LFxuICBbYCYuJHtsaXN0SXRlbUJ1dHRvbkNsYXNzZXMuc2VsZWN0ZWR9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KSxcbiAgICBbYCYuJHtsaXN0SXRlbUJ1dHRvbkNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0gKyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5fSkpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpXG4gICAgfVxuICB9LFxuICBbYCYuJHtsaXN0SXRlbUJ1dHRvbkNsYXNzZXMuc2VsZWN0ZWR9OmhvdmVyYF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0gKyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSkpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUucHJpbWFyeS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSlcbiAgICB9XG4gIH0sXG4gIFtgJi4ke2xpc3RJdGVtQnV0dG9uQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5mb2N1c1xuICB9LFxuICBbYCYuJHtsaXN0SXRlbUJ1dHRvbkNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBvcGFjaXR5OiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRPcGFjaXR5XG4gIH1cbn0sIG93bmVyU3RhdGUuZGl2aWRlciAmJiB7XG4gIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmRpdmlkZXJ9YCxcbiAgYmFja2dyb3VuZENsaXA6ICdwYWRkaW5nLWJveCdcbn0sIG93bmVyU3RhdGUuYWxpZ25JdGVtcyA9PT0gJ2ZsZXgtc3RhcnQnICYmIHtcbiAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnXG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiB7XG4gIHBhZGRpbmdMZWZ0OiAxNixcbiAgcGFkZGluZ1JpZ2h0OiAxNlxufSwgb3duZXJTdGF0ZS5kZW5zZSAmJiB7XG4gIHBhZGRpbmdUb3A6IDQsXG4gIHBhZGRpbmdCb3R0b206IDRcbn0pKTtcbmNvbnN0IExpc3RJdGVtQnV0dG9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlzdEl0ZW1CdXR0b24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUxpc3RJdGVtQnV0dG9uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYWxpZ25JdGVtcyA9ICdjZW50ZXInLFxuICAgICAgYXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZGVuc2UgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gZmFsc2UsXG4gICAgICBkaXZpZGVyID0gZmFsc2UsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBzZWxlY3RlZCA9IGZhbHNlLFxuICAgICAgY2xhc3NOYW1lXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KExpc3RDb250ZXh0KTtcbiAgY29uc3QgY2hpbGRDb250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGRlbnNlOiBkZW5zZSB8fCBjb250ZXh0LmRlbnNlIHx8IGZhbHNlLFxuICAgIGFsaWduSXRlbXMsXG4gICAgZGlzYWJsZUd1dHRlcnNcbiAgfSksIFthbGlnbkl0ZW1zLCBjb250ZXh0LmRlbnNlLCBkZW5zZSwgZGlzYWJsZUd1dHRlcnNdKTtcbiAgY29uc3QgbGlzdEl0ZW1SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBpZiAobGlzdEl0ZW1SZWYuY3VycmVudCkge1xuICAgICAgICBsaXN0SXRlbVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBVbmFibGUgdG8gc2V0IGZvY3VzIHRvIGEgTGlzdEl0ZW1CdXR0b24gd2hvc2UgY29tcG9uZW50IGhhcyBub3QgYmVlbiByZW5kZXJlZC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFthdXRvRm9jdXNdKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGFsaWduSXRlbXMsXG4gICAgZGVuc2U6IGNoaWxkQ29udGV4dC5kZW5zZSxcbiAgICBkaXNhYmxlR3V0dGVycyxcbiAgICBkaXZpZGVyLFxuICAgIHNlbGVjdGVkXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobGlzdEl0ZW1SZWYsIHJlZik7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjaGlsZENvbnRleHQsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KExpc3RJdGVtQnV0dG9uUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgICBocmVmOiBvdGhlci5ocmVmIHx8IG90aGVyLnRvXG4gICAgICAvLyBgQnV0dG9uQmFzZWAgcHJvY2Vzc2VzIGBocmVmYCBvciBgdG9gIGlmIGBjb21wb25lbnRgIGlzIHNldCB0byAnYnV0dG9uJ1xuICAgICAgLFxuICAgICAgY29tcG9uZW50OiAob3RoZXIuaHJlZiB8fCBvdGhlci50bykgJiYgY29tcG9uZW50ID09PSAnZGl2JyA/ICdidXR0b24nIDogY29tcG9uZW50LFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZm9jdXNWaXNpYmxlLCBmb2N1c1Zpc2libGVDbGFzc05hbWUpLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGlzdEl0ZW1CdXR0b24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGFsaWduLWl0ZW1zYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogQGRlZmF1bHQgJ2NlbnRlcidcbiAgICovXG4gIGFsaWduSXRlbXM6IFByb3BUeXBlcy5vbmVPZihbJ2NlbnRlcicsICdmbGV4LXN0YXJ0J10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGlzdCBpdGVtIGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICogRm9jdXMgd2lsbCBhbHNvIGJlIHRyaWdnZXJlZCBpZiB0aGUgdmFsdWUgY2hhbmdlcyBmcm9tIGZhbHNlIHRvIHRydWUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCBpZiBhIGBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbmAgaXMgdXNlZCBpdCBtdXN0XG4gICAqIGJlIHRoZSBsYXN0IGNoaWxkLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBjb21wYWN0IHZlcnRpY2FsIHBhZGRpbmcgZGVzaWduZWQgZm9yIGtleWJvYXJkIGFuZCBtb3VzZSBpbnB1dCBpcyB1c2VkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBMaXN0IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxlZnQgYW5kIHJpZ2h0IHBhZGRpbmcgaXMgcmVtb3ZlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSAxcHggbGlnaHQgYm9yZGVyIGlzIGFkZGVkIHRvIHRoZSBib3R0b20gb2YgdGhlIGxpc3QgaXRlbS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpdmlkZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhpcyBwcm9wIGNhbiBoZWxwIGlkZW50aWZ5IHdoaWNoIGVsZW1lbnQgaGFzIGtleWJvYXJkIGZvY3VzLlxuICAgKiBUaGUgY2xhc3MgbmFtZSB3aWxsIGJlIGFwcGxpZWQgd2hlbiB0aGUgZWxlbWVudCBnYWlucyB0aGUgZm9jdXMgdGhyb3VnaCBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICogSXQncyBhIHBvbHlmaWxsIGZvciB0aGUgW0NTUyA6Zm9jdXMtdmlzaWJsZSBzZWxlY3Rvcl0oaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy00LyN0aGUtZm9jdXMtdmlzaWJsZS1wc2V1ZG8pLlxuICAgKiBUaGUgcmF0aW9uYWxlIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW5lZCBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvSEVBRC9leHBsYWluZXIubWQpLlxuICAgKiBBIFtwb2x5ZmlsbCBjYW4gYmUgdXNlZF0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZSkgdG8gYXBwbHkgYSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gb3RoZXIgY29tcG9uZW50c1xuICAgKiBpZiBuZWVkZWQuXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBocmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVXNlIHRvIGFwcGx5IHNlbGVjdGVkIHN0eWxpbmcuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBMaXN0SXRlbUJ1dHRvbjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldExpc3RJdGVtSWNvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdEl0ZW1JY29uJywgc2xvdCk7XG59XG5jb25zdCBsaXN0SXRlbUljb25DbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTGlzdEl0ZW1JY29uJywgWydyb290JywgJ2FsaWduSXRlbXNGbGV4U3RhcnQnXSk7XG5leHBvcnQgZGVmYXVsdCBsaXN0SXRlbUljb25DbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgeyBnZXRMaXN0SXRlbUljb25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2xpc3RJdGVtSWNvbkNsYXNzZXMnO1xuaW1wb3J0IExpc3RDb250ZXh0IGZyb20gJy4uL0xpc3QvTGlzdENvbnRleHQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhbGlnbkl0ZW1zLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGFsaWduSXRlbXMgPT09ICdmbGV4LXN0YXJ0JyAmJiAnYWxpZ25JdGVtc0ZsZXhTdGFydCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGlzdEl0ZW1JY29uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBMaXN0SXRlbUljb25Sb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlMaXN0SXRlbUljb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5hbGlnbkl0ZW1zID09PSAnZmxleC1zdGFydCcgJiYgc3R5bGVzLmFsaWduSXRlbXNGbGV4U3RhcnRdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBtaW5XaWR0aDogNTYsXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICBmbGV4U2hyaW5rOiAwLFxuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnXG59LCBvd25lclN0YXRlLmFsaWduSXRlbXMgPT09ICdmbGV4LXN0YXJ0JyAmJiB7XG4gIG1hcmdpblRvcDogOFxufSkpO1xuXG4vKipcbiAqIEEgc2ltcGxlIHdyYXBwZXIgdG8gYXBwbHkgYExpc3RgIHN0eWxlcyB0byBhbiBgSWNvbmAgb3IgYFN2Z0ljb25gLlxuICovXG5jb25zdCBMaXN0SXRlbUljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbUljb24oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUxpc3RJdGVtSWNvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChMaXN0Q29udGV4dCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhbGlnbkl0ZW1zOiBjb250ZXh0LmFsaWduSXRlbXNcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KExpc3RJdGVtSWNvblJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGlzdEl0ZW1JY29uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGBJY29uYCwgYFN2Z0ljb25gLFxuICAgKiBvciBhIGBAbXVpL2ljb25zLW1hdGVyaWFsYCBTVkcgaWNvbiBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IExpc3RJdGVtSWNvbjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldExpc3RJdGVtVGV4dFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdEl0ZW1UZXh0Jywgc2xvdCk7XG59XG5jb25zdCBsaXN0SXRlbVRleHRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTGlzdEl0ZW1UZXh0JywgWydyb290JywgJ211bHRpbGluZScsICdkZW5zZScsICdpbnNldCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKTtcbmV4cG9ydCBkZWZhdWx0IGxpc3RJdGVtVGV4dENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlVHlwb2dyYXBoeVwiLCBcImluc2V0XCIsIFwicHJpbWFyeVwiLCBcInByaW1hcnlUeXBvZ3JhcGh5UHJvcHNcIiwgXCJzZWNvbmRhcnlcIiwgXCJzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHNcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuLi9MaXN0L0xpc3RDb250ZXh0JztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgbGlzdEl0ZW1UZXh0Q2xhc3NlcywgeyBnZXRMaXN0SXRlbVRleHRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2xpc3RJdGVtVGV4dENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGluc2V0LFxuICAgIHByaW1hcnksXG4gICAgc2Vjb25kYXJ5LFxuICAgIGRlbnNlXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBpbnNldCAmJiAnaW5zZXQnLCBkZW5zZSAmJiAnZGVuc2UnLCBwcmltYXJ5ICYmIHNlY29uZGFyeSAmJiAnbXVsdGlsaW5lJ10sXG4gICAgcHJpbWFyeTogWydwcmltYXJ5J10sXG4gICAgc2Vjb25kYXJ5OiBbJ3NlY29uZGFyeSddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGlzdEl0ZW1UZXh0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBMaXN0SXRlbVRleHRSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlMaXN0SXRlbVRleHQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFt7XG4gICAgICBbYCYgLiR7bGlzdEl0ZW1UZXh0Q2xhc3Nlcy5wcmltYXJ5fWBdOiBzdHlsZXMucHJpbWFyeVxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtsaXN0SXRlbVRleHRDbGFzc2VzLnNlY29uZGFyeX1gXTogc3R5bGVzLnNlY29uZGFyeVxuICAgIH0sIHN0eWxlcy5yb290LCBvd25lclN0YXRlLmluc2V0ICYmIHN0eWxlcy5pbnNldCwgb3duZXJTdGF0ZS5wcmltYXJ5ICYmIG93bmVyU3RhdGUuc2Vjb25kYXJ5ICYmIHN0eWxlcy5tdWx0aWxpbmUsIG93bmVyU3RhdGUuZGVuc2UgJiYgc3R5bGVzLmRlbnNlXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBmbGV4OiAnMSAxIGF1dG8nLFxuICBtaW5XaWR0aDogMCxcbiAgbWFyZ2luVG9wOiA0LFxuICBtYXJnaW5Cb3R0b206IDRcbn0sIG93bmVyU3RhdGUucHJpbWFyeSAmJiBvd25lclN0YXRlLnNlY29uZGFyeSAmJiB7XG4gIG1hcmdpblRvcDogNixcbiAgbWFyZ2luQm90dG9tOiA2XG59LCBvd25lclN0YXRlLmluc2V0ICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDU2XG59KSk7XG5jb25zdCBMaXN0SXRlbVRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbVRleHQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUxpc3RJdGVtVGV4dCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBmYWxzZSxcbiAgICAgIGluc2V0ID0gZmFsc2UsXG4gICAgICBwcmltYXJ5OiBwcmltYXJ5UHJvcCxcbiAgICAgIHByaW1hcnlUeXBvZ3JhcGh5UHJvcHMsXG4gICAgICBzZWNvbmRhcnk6IHNlY29uZGFyeVByb3AsXG4gICAgICBzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHNcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIGRlbnNlXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KExpc3RDb250ZXh0KTtcbiAgbGV0IHByaW1hcnkgPSBwcmltYXJ5UHJvcCAhPSBudWxsID8gcHJpbWFyeVByb3AgOiBjaGlsZHJlbjtcbiAgbGV0IHNlY29uZGFyeSA9IHNlY29uZGFyeVByb3A7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkaXNhYmxlVHlwb2dyYXBoeSxcbiAgICBpbnNldCxcbiAgICBwcmltYXJ5OiAhIXByaW1hcnksXG4gICAgc2Vjb25kYXJ5OiAhIXNlY29uZGFyeSxcbiAgICBkZW5zZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBpZiAocHJpbWFyeSAhPSBudWxsICYmIHByaW1hcnkudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICBwcmltYXJ5ID0gLyojX19QVVJFX18qL19qc3goVHlwb2dyYXBoeSwgX2V4dGVuZHMoe1xuICAgICAgdmFyaWFudDogZGVuc2UgPyAnYm9keTInIDogJ2JvZHkxJyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5wcmltYXJ5LFxuICAgICAgY29tcG9uZW50OiBwcmltYXJ5VHlwb2dyYXBoeVByb3BzICE9IG51bGwgJiYgcHJpbWFyeVR5cG9ncmFwaHlQcm9wcy52YXJpYW50ID8gdW5kZWZpbmVkIDogJ3NwYW4nLFxuICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgfSwgcHJpbWFyeVR5cG9ncmFwaHlQcm9wcywge1xuICAgICAgY2hpbGRyZW46IHByaW1hcnlcbiAgICB9KSk7XG4gIH1cbiAgaWYgKHNlY29uZGFyeSAhPSBudWxsICYmIHNlY29uZGFyeS50eXBlICE9PSBUeXBvZ3JhcGh5ICYmICFkaXNhYmxlVHlwb2dyYXBoeSkge1xuICAgIHNlY29uZGFyeSA9IC8qI19fUFVSRV9fKi9fanN4KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICAgIHZhcmlhbnQ6IFwiYm9keTJcIixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zZWNvbmRhcnksXG4gICAgICBjb2xvcjogXCJ0ZXh0LnNlY29uZGFyeVwiLFxuICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgfSwgc2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogc2Vjb25kYXJ5XG4gICAgfSkpO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoTGlzdEl0ZW1UZXh0Um9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbcHJpbWFyeSwgc2Vjb25kYXJ5XVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3RJdGVtVGV4dC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBbGlhcyBmb3IgdGhlIGBwcmltYXJ5YCBwcm9wLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaWxkcmVuIHdvbid0IGJlIHdyYXBwZWQgYnkgYSBUeXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICogVGhpcyBjYW4gYmUgdXNlZnVsIHRvIHJlbmRlciBhbiBhbHRlcm5hdGl2ZSBUeXBvZ3JhcGh5IHZhcmlhbnQgYnkgd3JhcHBpbmdcbiAgICogdGhlIGBjaGlsZHJlbmAgKG9yIGBwcmltYXJ5YCkgdGV4dCwgYW5kIG9wdGlvbmFsIGBzZWNvbmRhcnlgIHRleHRcbiAgICogd2l0aCB0aGUgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlVHlwb2dyYXBoeTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjaGlsZHJlbiBhcmUgaW5kZW50ZWQuXG4gICAqIFRoaXMgc2hvdWxkIGJlIHVzZWQgaWYgdGhlcmUgaXMgbm8gbGVmdCBhdmF0YXIgb3IgbGVmdCBpY29uLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW5zZXQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIG1haW4gY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgcHJpbWFyeTogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgcHJpbWFyeSB0eXBvZ3JhcGh5IGNvbXBvbmVudFxuICAgKiAoYXMgbG9uZyBhcyBkaXNhYmxlVHlwb2dyYXBoeSBpcyBub3QgYHRydWVgKS5cbiAgICovXG4gIHByaW1hcnlUeXBvZ3JhcGh5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgc2Vjb25kYXJ5IGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIHNlY29uZGFyeTogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgc2Vjb25kYXJ5IHR5cG9ncmFwaHkgY29tcG9uZW50XG4gICAqIChhcyBsb25nIGFzIGRpc2FibGVUeXBvZ3JhcGh5IGlzIG5vdCBgdHJ1ZWApLlxuICAgKi9cbiAgc2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGlzdEl0ZW1UZXh0OyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sbGFwc2VVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNvbGxhcHNlJywgc2xvdCk7XG59XG5jb25zdCBjb2xsYXBzZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlDb2xsYXBzZScsIFsncm9vdCcsICdob3Jpem9udGFsJywgJ3ZlcnRpY2FsJywgJ2VudGVyZWQnLCAnaGlkZGVuJywgJ3dyYXBwZXInLCAnd3JhcHBlcklubmVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgY29sbGFwc2VDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFkZEVuZExpc3RlbmVyXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xsYXBzZWRTaXplXCIsIFwiY29tcG9uZW50XCIsIFwiZWFzaW5nXCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwib3JpZW50YXRpb25cIiwgXCJzdHlsZVwiLCBcInRpbWVvdXRcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHsgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsIHVuc3RhYmxlX3VzZVRpbWVvdXQgYXMgdXNlVGltZW91dCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB7IGR1cmF0aW9uIH0gZnJvbSAnLi4vc3R5bGVzL2NyZWF0ZVRyYW5zaXRpb25zJztcbmltcG9ydCB7IGdldFRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJy4uL3RyYW5zaXRpb25zL3V0aWxzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgdXNlRm9ya1JlZiB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IGdldENvbGxhcHNlVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9jb2xsYXBzZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvcmllbnRhdGlvbixcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBgJHtvcmllbnRhdGlvbn1gXSxcbiAgICBlbnRlcmVkOiBbJ2VudGVyZWQnXSxcbiAgICBoaWRkZW46IFsnaGlkZGVuJ10sXG4gICAgd3JhcHBlcjogWyd3cmFwcGVyJywgYCR7b3JpZW50YXRpb259YF0sXG4gICAgd3JhcHBlcklubmVyOiBbJ3dyYXBwZXJJbm5lcicsIGAke29yaWVudGF0aW9ufWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Q29sbGFwc2VVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IENvbGxhcHNlUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQ29sbGFwc2UnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUub3JpZW50YXRpb25dLCBvd25lclN0YXRlLnN0YXRlID09PSAnZW50ZXJlZCcgJiYgc3R5bGVzLmVudGVyZWQsIG93bmVyU3RhdGUuc3RhdGUgPT09ICdleGl0ZWQnICYmICFvd25lclN0YXRlLmluICYmIG93bmVyU3RhdGUuY29sbGFwc2VkU2l6ZSA9PT0gJzBweCcgJiYgc3R5bGVzLmhpZGRlbl07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGhlaWdodDogMCxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2hlaWdodCcpXG59LCBvd25lclN0YXRlLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYge1xuICBoZWlnaHQ6ICdhdXRvJyxcbiAgd2lkdGg6IDAsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnd2lkdGgnKVxufSwgb3duZXJTdGF0ZS5zdGF0ZSA9PT0gJ2VudGVyZWQnICYmIF9leHRlbmRzKHtcbiAgaGVpZ2h0OiAnYXV0bycsXG4gIG92ZXJmbG93OiAndmlzaWJsZSdcbn0sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyAmJiB7XG4gIHdpZHRoOiAnYXV0bydcbn0pLCBvd25lclN0YXRlLnN0YXRlID09PSAnZXhpdGVkJyAmJiAhb3duZXJTdGF0ZS5pbiAmJiBvd25lclN0YXRlLmNvbGxhcHNlZFNpemUgPT09ICcwcHgnICYmIHtcbiAgdmlzaWJpbGl0eTogJ2hpZGRlbidcbn0pKTtcbmNvbnN0IENvbGxhcHNlV3JhcHBlciA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQ29sbGFwc2UnLFxuICBzbG90OiAnV3JhcHBlcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLndyYXBwZXJcbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgLy8gSGFjayB0byBnZXQgY2hpbGRyZW4gd2l0aCBhIG5lZ2F0aXZlIG1hcmdpbiB0byBub3QgZmFsc2lmeSB0aGUgaGVpZ2h0IGNvbXB1dGF0aW9uLlxuICBkaXNwbGF5OiAnZmxleCcsXG4gIHdpZHRoOiAnMTAwJSdcbn0sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyAmJiB7XG4gIHdpZHRoOiAnYXV0bycsXG4gIGhlaWdodDogJzEwMCUnXG59KSk7XG5jb25zdCBDb2xsYXBzZVdyYXBwZXJJbm5lciA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQ29sbGFwc2UnLFxuICBzbG90OiAnV3JhcHBlcklubmVyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMud3JhcHBlcklubmVyXG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHdpZHRoOiAnMTAwJSdcbn0sIG93bmVyU3RhdGUub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJyAmJiB7XG4gIHdpZHRoOiAnYXV0bycsXG4gIGhlaWdodDogJzEwMCUnXG59KSk7XG5cbi8qKlxuICogVGhlIENvbGxhcHNlIHRyYW5zaXRpb24gaXMgdXNlZCBieSB0aGVcbiAqIFtWZXJ0aWNhbCBTdGVwcGVyXSgvbWF0ZXJpYWwtdWkvcmVhY3Qtc3RlcHBlci8jdmVydGljYWwtc3RlcHBlcikgU3RlcENvbnRlbnQgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuY29uc3QgQ29sbGFwc2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDb2xsYXBzZShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ29sbGFwc2UnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhZGRFbmRMaXN0ZW5lcixcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sbGFwc2VkU2l6ZTogY29sbGFwc2VkU2l6ZVByb3AgPSAnMHB4JyxcbiAgICAgIGNvbXBvbmVudCxcbiAgICAgIGVhc2luZyxcbiAgICAgIGluOiBpblByb3AsXG4gICAgICBvbkVudGVyLFxuICAgICAgb25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZyxcbiAgICAgIG9uRXhpdCxcbiAgICAgIG9uRXhpdGVkLFxuICAgICAgb25FeGl0aW5nLFxuICAgICAgb3JpZW50YXRpb24gPSAndmVydGljYWwnLFxuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0ID0gZHVyYXRpb24uc3RhbmRhcmQsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IFRyYW5zaXRpb25cbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIG9yaWVudGF0aW9uLFxuICAgIGNvbGxhcHNlZFNpemU6IGNvbGxhcHNlZFNpemVQcm9wXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgdGltZXIgPSB1c2VUaW1lb3V0KCk7XG4gIGNvbnN0IHdyYXBwZXJSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGF1dG9UcmFuc2l0aW9uRHVyYXRpb24gPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgY29sbGFwc2VkU2l6ZSA9IHR5cGVvZiBjb2xsYXBzZWRTaXplUHJvcCA9PT0gJ251bWJlcicgPyBgJHtjb2xsYXBzZWRTaXplUHJvcH1weGAgOiBjb2xsYXBzZWRTaXplUHJvcDtcbiAgY29uc3QgaXNIb3Jpem9udGFsID0gb3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJztcbiAgY29uc3Qgc2l6ZSA9IGlzSG9yaXpvbnRhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgY29uc3Qgbm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIG5vZGVSZWYpO1xuICBjb25zdCBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrID0gY2FsbGJhY2sgPT4gbWF5YmVJc0FwcGVhcmluZyA9PiB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjb25zdCBub2RlID0gbm9kZVJlZi5jdXJyZW50O1xuXG4gICAgICAvLyBvbkVudGVyWHh4IGFuZCBvbkV4aXRYeHggY2FsbGJhY2tzIGhhdmUgYSBkaWZmZXJlbnQgYXJndW1lbnRzLmxlbmd0aCB2YWx1ZS5cbiAgICAgIGlmIChtYXliZUlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhub2RlLCBtYXliZUlzQXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGdldFdyYXBwZXJTaXplID0gKCkgPT4gd3JhcHBlclJlZi5jdXJyZW50ID8gd3JhcHBlclJlZi5jdXJyZW50W2lzSG9yaXpvbnRhbCA/ICdjbGllbnRXaWR0aCcgOiAnY2xpZW50SGVpZ2h0J10gOiAwO1xuICBjb25zdCBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgaWYgKHdyYXBwZXJSZWYuY3VycmVudCAmJiBpc0hvcml6b250YWwpIHtcbiAgICAgIC8vIFNldCBhYnNvbHV0ZSBwb3NpdGlvbiB0byBnZXQgdGhlIHNpemUgb2YgY29sbGFwc2VkIGNvbnRlbnRcbiAgICAgIHdyYXBwZXJSZWYuY3VycmVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgfVxuICAgIG5vZGUuc3R5bGVbc2l6ZV0gPSBjb2xsYXBzZWRTaXplO1xuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFbnRlcmluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlclNpemUgPSBnZXRXcmFwcGVyU2l6ZSgpO1xuICAgIGlmICh3cmFwcGVyUmVmLmN1cnJlbnQgJiYgaXNIb3Jpem9udGFsKSB7XG4gICAgICAvLyBBZnRlciB0aGUgc2l6ZSBpcyByZWFkIHJlc2V0IHRoZSBwb3NpdGlvbiBiYWNrIHRvIGRlZmF1bHRcbiAgICAgIHdyYXBwZXJSZWYuY3VycmVudC5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBkdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9ID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlLFxuICAgICAgdGltZW91dCxcbiAgICAgIGVhc2luZ1xuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KTtcbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICBjb25zdCBkdXJhdGlvbjIgPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24od3JhcHBlclNpemUpO1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbjJ9bXNgO1xuICAgICAgYXV0b1RyYW5zaXRpb25EdXJhdGlvbi5jdXJyZW50ID0gZHVyYXRpb24yO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IHR5cGVvZiB0cmFuc2l0aW9uRHVyYXRpb24gPT09ICdzdHJpbmcnID8gdHJhbnNpdGlvbkR1cmF0aW9uIDogYCR7dHJhbnNpdGlvbkR1cmF0aW9ufW1zYDtcbiAgICB9XG4gICAgbm9kZS5zdHlsZVtzaXplXSA9IGAke3dyYXBwZXJTaXplfXB4YDtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiA9IHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjtcbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRW50ZXJlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgbm9kZS5zdHlsZVtzaXplXSA9ICdhdXRvJztcbiAgICBpZiAob25FbnRlcmVkKSB7XG4gICAgICBvbkVudGVyZWQobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUV4aXQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIG5vZGUuc3R5bGVbc2l6ZV0gPSBgJHtnZXRXcmFwcGVyU2l6ZSgpfXB4YDtcbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBvbkV4aXQobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRXhpdGVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRlZCk7XG4gIGNvbnN0IGhhbmRsZUV4aXRpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXJTaXplID0gZ2V0V3JhcHBlclNpemUoKTtcbiAgICBjb25zdCB7XG4gICAgICBkdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9ID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlLFxuICAgICAgdGltZW91dCxcbiAgICAgIGVhc2luZ1xuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdleGl0J1xuICAgIH0pO1xuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIC8vIFRPRE86IHJlbmFtZSBnZXRBdXRvSGVpZ2h0RHVyYXRpb24gdG8gc29tZXRoaW5nIG1vcmUgZ2VuZXJpYyAod2lkdGggc3VwcG9ydClcbiAgICAgIC8vIEFjdHVhbGx5IGl0IGp1c3QgY2FsY3VsYXRlcyBhbmltYXRpb24gZHVyYXRpb24gYmFzZWQgb24gc2l6ZVxuICAgICAgY29uc3QgZHVyYXRpb24yID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKHdyYXBwZXJTaXplKTtcbiAgICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb24yfW1zYDtcbiAgICAgIGF1dG9UcmFuc2l0aW9uRHVyYXRpb24uY3VycmVudCA9IGR1cmF0aW9uMjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0eXBlb2YgdHJhbnNpdGlvbkR1cmF0aW9uID09PSAnc3RyaW5nJyA/IHRyYW5zaXRpb25EdXJhdGlvbiA6IGAke3RyYW5zaXRpb25EdXJhdGlvbn1tc2A7XG4gICAgfVxuICAgIG5vZGUuc3R5bGVbc2l6ZV0gPSBjb2xsYXBzZWRTaXplO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uID0gdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uO1xuICAgIGlmIChvbkV4aXRpbmcpIHtcbiAgICAgIG9uRXhpdGluZyhub2RlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVBZGRFbmRMaXN0ZW5lciA9IG5leHQgPT4ge1xuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIHRpbWVyLnN0YXJ0KGF1dG9UcmFuc2l0aW9uRHVyYXRpb24uY3VycmVudCB8fCAwLCBuZXh0KTtcbiAgICB9XG4gICAgaWYgKGFkZEVuZExpc3RlbmVyKSB7XG4gICAgICAvLyBPbGQgY2FsbCBzaWduYXR1cmUgYmVmb3JlIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwYCBpbXBsZW1lbnRlZCBgbm9kZVJlZmBcbiAgICAgIGFkZEVuZExpc3RlbmVyKG5vZGVSZWYuY3VycmVudCwgbmV4dCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGluOiBpblByb3AsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZyxcbiAgICBhZGRFbmRMaXN0ZW5lcjogaGFuZGxlQWRkRW5kTGlzdGVuZXIsXG4gICAgbm9kZVJlZjogbm9kZVJlZixcbiAgICB0aW1lb3V0OiB0aW1lb3V0ID09PSAnYXV0bycgPyBudWxsIDogdGltZW91dFxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAoc3RhdGUsIGNoaWxkUHJvcHMpID0+IC8qI19fUFVSRV9fKi9fanN4KENvbGxhcHNlUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwge1xuICAgICAgICAnZW50ZXJlZCc6IGNsYXNzZXMuZW50ZXJlZCxcbiAgICAgICAgJ2V4aXRlZCc6ICFpblByb3AgJiYgY29sbGFwc2VkU2l6ZSA9PT0gJzBweCcgJiYgY2xhc3Nlcy5oaWRkZW5cbiAgICAgIH1bc3RhdGVdKSxcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgIFtpc0hvcml6b250YWwgPyAnbWluV2lkdGgnIDogJ21pbkhlaWdodCddOiBjb2xsYXBzZWRTaXplXG4gICAgICB9LCBzdHlsZSksXG4gICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwge1xuICAgICAgICBzdGF0ZVxuICAgICAgfSksXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgIH0sIGNoaWxkUHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChDb2xsYXBzZVdyYXBwZXIsIHtcbiAgICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIHtcbiAgICAgICAgICBzdGF0ZVxuICAgICAgICB9KSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLndyYXBwZXIsXG4gICAgICAgIHJlZjogd3JhcHBlclJlZixcbiAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KENvbGxhcHNlV3JhcHBlcklubmVyLCB7XG4gICAgICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIHtcbiAgICAgICAgICAgIHN0YXRlXG4gICAgICAgICAgfSksXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLndyYXBwZXJJbm5lcixcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSkpXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ29sbGFwc2UucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nIERPTVxuICAgKiBub2RlIGFuZCBhIGRvbmUgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIE5vdGU6IFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBub2RlIHRvIGJlIGNvbGxhcHNlZC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggKGhvcml6b250YWwpIG9yIGhlaWdodCAodmVydGljYWwpIG9mIHRoZSBjb250YWluZXIgd2hlbiBjb2xsYXBzZWQuXG4gICAqIEBkZWZhdWx0ICcwcHgnXG4gICAqL1xuICBjb2xsYXBzZWRTaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuICAvKipcbiAgICogVGhlIHRyYW5zaXRpb24gdGltaW5nIGZ1bmN0aW9uLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgZWFzaW5nIG9yIGEgb2JqZWN0IGNvbnRhaW5pbmcgZW50ZXIgYW5kIGV4aXQgdmFsdWVzLlxuICAgKi9cbiAgZWFzaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHRyYW5zaXRpb24gb3JpZW50YXRpb24uXG4gICAqIEBkZWZhdWx0ICd2ZXJ0aWNhbCdcbiAgICovXG4gIG9yaWVudGF0aW9uOiBQcm9wVHlwZXMub25lT2YoWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICpcbiAgICogU2V0IHRvICdhdXRvJyB0byBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSB0cmFuc2l0aW9uIHRpbWUgYmFzZWQgb24gaGVpZ2h0LlxuICAgKiBAZGVmYXVsdCBkdXJhdGlvbi5zdGFuZGFyZFxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuQ29sbGFwc2UubXVpU3VwcG9ydEF1dG8gPSB0cnVlO1xuZXhwb3J0IGRlZmF1bHQgQ29sbGFwc2U7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgTGlzdEl0ZW1CdXR0b24gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1CdXR0b25cIjtcbmltcG9ydCBMaXN0SXRlbUljb24gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1JY29uXCI7XG5pbXBvcnQgRGFzaGJvYXJkSWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9EYXNoYm9hcmRcIjtcbmltcG9ydCBZb3VUdWJlSWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL1lvdVR1YmUnO1xuaW1wb3J0IFR3aXR0ZXJJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvVHdpdHRlcic7XG5pbXBvcnQgTGlzdEl0ZW1UZXh0IGZyb20gXCJAbXVpL21hdGVyaWFsL0xpc3RJdGVtVGV4dFwiO1xuaW1wb3J0IENvbGxhcHNlIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQ29sbGFwc2UnO1xuaW1wb3J0IExpc3QgZnJvbSAnQG11aS9tYXRlcmlhbC9MaXN0JztcbmltcG9ydCBQZW9wbGVJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL1Blb3BsZVwiO1xuaW1wb3J0IEJhckNoYXJ0SWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9CYXJDaGFydFwiO1xuaW1wb3J0IExheWVyc0ljb24gZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvTGF5ZXJzXCI7XG5pbXBvcnQgRXhwYW5kTGVzcyBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL0V4cGFuZExlc3MnO1xuaW1wb3J0IEV4cGFuZE1vcmUgZnJvbSAnQG11aS9pY29ucy1tYXRlcmlhbC9FeHBhbmRNb3JlJztcbmltcG9ydCBTdGFyQm9yZGVyIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvU3RhckJvcmRlcic7XG5pbXBvcnQgRGV2aWNlc0ljb24gZnJvbSAnQG11aS9pY29ucy1tYXRlcmlhbC9EZXZpY2VzJztcbmltcG9ydCBEZXZpY2VzT3RoZXJJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvRGV2aWNlc090aGVyJztcbmltcG9ydCBPcGVuSW5OZXdJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvT3BlbkluTmV3JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTWFpbkxpc3RJdGVtcyhwcm9wcykge1xuICAgIGNvbnN0IFtvcGVuUGxhdGZvcm0sIHNldE9wZW5QbGF0Zm9ybV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW29wZW5UYXJnZXRzLCBzZXRPcGVuVGFyZ2V0c10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgICBjb25zdCBoYW5kbGVQbGF0Zm9ybUNsaWNrID0gKCkgPT4ge1xuICAgICAgICBzZXRPcGVuUGxhdGZvcm0oIW9wZW5QbGF0Zm9ybSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZVRhcmdldHNDbGljayA9ICgpID0+IHtcbiAgICAgICAgc2V0T3BlblRhcmdldHMoIW9wZW5UYXJnZXRzKTtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVUcmlnZ2VyID0gKGUpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YUF0dHJpYnV0ZSA9IGUudGFyZ2V0LnRleHRDb250ZW50O1xuICAgICAgICBjb25zdCBleHBhbmRBdHRyaWJ1dGUgPSBlLnRhcmdldC5pZDtcbiAgICAgICAgbGV0IHVzYWJsZVZhbHVlID0gZGF0YUF0dHJpYnV0ZSAhPT0gJycgPyBkYXRhQXR0cmlidXRlIDogZXhwYW5kQXR0cmlidXRlO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKHVzYWJsZVZhbHVlKTtcbiAgICAgICAgc3dpdGNoICh1c2FibGVWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnUGxhdGZvcm1zJzpcbiAgICAgICAgICAgICAgICBoYW5kbGVQbGF0Zm9ybUNsaWNrKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdQbGF0Zm9ybXMtZXhwYW5kbW9yZSc6XG4gICAgICAgICAgICAgICAgaGFuZGxlUGxhdGZvcm1DbGljaygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ1BsYXRmb3Jtcy1leHBhbmRsZXNzJzpcbiAgICAgICAgICAgICAgICBoYW5kbGVQbGF0Zm9ybUNsaWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnVGFyZ2V0cyc6XG4gICAgICAgICAgICAgICAgaGFuZGxlVGFyZ2V0c0NsaWNrKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdUYXJnZXRzLWV4cGFuZG1vcmUnOlxuICAgICAgICAgICAgICAgIGhhbmRsZVRhcmdldHNDbGljaygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ1RhcmdldHMtZXhwYW5kbGVzcyc6XG4gICAgICAgICAgICAgICAgaGFuZGxlVGFyZ2V0c0NsaWNrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHByb3BzLmhhbmRsZVRvZ2dsZUFsbCh1c2FibGVWYWx1ZSk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICA8TGlzdEl0ZW1CdXR0b24gb25DbGljaz17aGFuZGxlVHJpZ2dlcn0+XG4gICAgICAgICAgICAgICAgPExpc3RJdGVtSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgPERhc2hib2FyZEljb24gLz5cbiAgICAgICAgICAgICAgICA8L0xpc3RJdGVtSWNvbj5cbiAgICAgICAgICAgICAgICA8TGlzdEl0ZW1UZXh0IHByaW1hcnk9XCJEYXNoYm9hcmRcIiAvPlxuICAgICAgICAgICAgPC9MaXN0SXRlbUJ1dHRvbj5cbiAgICAgICAgICAgIDxMaXN0SXRlbUJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVUcmlnZ2VyfT5cbiAgICAgICAgICAgICAgICA8TGlzdEl0ZW1JY29uPlxuICAgICAgICAgICAgICAgICAgICA8UGVvcGxlSWNvbiAvPlxuICAgICAgICAgICAgICAgIDwvTGlzdEl0ZW1JY29uPlxuICAgICAgICAgICAgICAgIDxMaXN0SXRlbVRleHQgcHJpbWFyeT1cIlRhcmdldHNcIiAvPlxuICAgICAgICAgICAgICAgIHtvcGVuVGFyZ2V0cyA/IDxFeHBhbmRMZXNzIG9uQ2xpY2s9e2hhbmRsZVRyaWdnZXJ9IGlkPSdUYXJnZXRzLWV4cGFuZGxlc3MnIC8+IDogPEV4cGFuZE1vcmUgb25DbGljaz17aGFuZGxlVHJpZ2dlcn0gaWQ9J1RhcmdldHMtZXhwYW5kbW9yZScvPn1cbiAgICAgICAgICAgIDwvTGlzdEl0ZW1CdXR0b24+XG4gICAgICAgICAgICA8Q29sbGFwc2UgaW49e29wZW5UYXJnZXRzfSB0aW1lb3V0PVwiYXV0b1wiIHVubW91bnRPbkV4aXQ+XG4gICAgICAgICAgICAgICAgPExpc3QgY29tcG9uZW50PVwiZGl2XCIgZGlzYWJsZVBhZGRpbmc+XG4gICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbUJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVUcmlnZ2VyfSBzeD17eyBwbDogNCB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbUljb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPERldmljZXNJY29uIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0xpc3RJdGVtSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbVRleHQgcHJpbWFyeT1cIldob2lzXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9MaXN0SXRlbUJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtQnV0dG9uIG9uQ2xpY2s9e2hhbmRsZVRyaWdnZXJ9IHN4PXt7IHBsOiA0IH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGV2aWNlc090aGVySWNvbiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9MaXN0SXRlbUljb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1UZXh0IHByaW1hcnk9XCJOU0xvb2t1cFwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvTGlzdEl0ZW1CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbUJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVUcmlnZ2VyfSBzeD17eyBwbDogNCB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbUljb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE9wZW5Jbk5ld0ljb24gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGlzdEl0ZW1JY29uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtVGV4dCBwcmltYXJ5PVwiQmFja0xpbmtzXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9MaXN0SXRlbUJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtQnV0dG9uIG9uQ2xpY2s9e2hhbmRsZVRyaWdnZXJ9IHN4PXt7IHBsOiA0IH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8T3BlbkluTmV3SWNvbiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9MaXN0SXRlbUljb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1UZXh0IHByaW1hcnk9XCJFbWFpbExvb2t1cFwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvTGlzdEl0ZW1CdXR0b24+XG4gICAgICAgICAgICAgICAgPC9MaXN0PlxuICAgICAgICAgICAgPC9Db2xsYXBzZT5cbiAgICAgICAgICAgIDxMaXN0SXRlbUJ1dHRvbj5cbiAgICAgICAgICAgICAgICA8TGlzdEl0ZW1JY29uPlxuICAgICAgICAgICAgICAgICAgICA8QmFyQ2hhcnRJY29uIC8+XG4gICAgICAgICAgICAgICAgPC9MaXN0SXRlbUljb24+XG4gICAgICAgICAgICAgICAgPExpc3RJdGVtVGV4dCBwcmltYXJ5PVwiQW5hbHl0aWNzXCIgLz5cbiAgICAgICAgICAgIDwvTGlzdEl0ZW1CdXR0b24+XG4gICAgICAgICAgICA8TGlzdEl0ZW1CdXR0b24gb25DbGljaz17aGFuZGxlVHJpZ2dlcn0+XG4gICAgICAgICAgICAgICAgPExpc3RJdGVtSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgPExheWVyc0ljb24gLz5cbiAgICAgICAgICAgICAgICA8L0xpc3RJdGVtSWNvbj5cbiAgICAgICAgICAgICAgICA8TGlzdEl0ZW1UZXh0IHByaW1hcnk9XCJQbGF0Zm9ybXNcIiAvPlxuICAgICAgICAgICAgICAgIHtvcGVuUGxhdGZvcm0gPyA8RXhwYW5kTGVzcyBpZD0nUGxhdGZvcm1zLWV4cGFuZGxlc3MnIC8+IDogPEV4cGFuZE1vcmUgaWQ9J1BsYXRmb3Jtcy1leHBhbmRtb3JlJyAvPn1cbiAgICAgICAgICAgIDwvTGlzdEl0ZW1CdXR0b24+XG4gICAgICAgICAgICA8Q29sbGFwc2UgaW49e29wZW5QbGF0Zm9ybX0gdGltZW91dD1cImF1dG9cIiB1bm1vdW50T25FeGl0PlxuICAgICAgICAgICAgICAgIDxMaXN0IGNvbXBvbmVudD1cImRpdlwiIGRpc2FibGVQYWRkaW5nPlxuICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1CdXR0b24gb25DbGljaz17aGFuZGxlVHJpZ2dlcn0gc3g9e3sgcGw6IDQgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1JY29uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxZb3VUdWJlSWNvbiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9MaXN0SXRlbUljb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1UZXh0IHByaW1hcnk9XCJZb3VUdWJlXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9MaXN0SXRlbUJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtQnV0dG9uIHN4PXt7IHBsOiA0IH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHdpdHRlckljb24gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGlzdEl0ZW1JY29uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtVGV4dCBwcmltYXJ5PVwiWFwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvTGlzdEl0ZW1CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbUJ1dHRvbiBzeD17eyBwbDogNCB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbUljb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXJCb3JkZXIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGlzdEl0ZW1JY29uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtVGV4dCBwcmltYXJ5PVwiVmtvbnRha3RlXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9MaXN0SXRlbUJ1dHRvbj5cbiAgICAgICAgICAgICAgICA8L0xpc3Q+XG4gICAgICAgICAgICA8L0NvbGxhcHNlPlxuICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgIClcbn1cbiIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdFN1YmhlYWRlclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGlzdFN1YmhlYWRlcicsIHNsb3QpO1xufVxuY29uc3QgbGlzdFN1YmhlYWRlckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0U3ViaGVhZGVyJywgWydyb290JywgJ2NvbG9yUHJpbWFyeScsICdjb2xvckluaGVyaXQnLCAnZ3V0dGVycycsICdpbnNldCcsICdzdGlja3knXSk7XG5leHBvcnQgZGVmYXVsdCBsaXN0U3ViaGVhZGVyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwiZGlzYWJsZVN0aWNreVwiLCBcImluc2V0XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHsgZ2V0TGlzdFN1YmhlYWRlclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vbGlzdFN1YmhlYWRlckNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGNvbG9yLFxuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIGluc2V0LFxuICAgIGRpc2FibGVTdGlja3lcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCAhZGlzYWJsZUd1dHRlcnMgJiYgJ2d1dHRlcnMnLCBpbnNldCAmJiAnaW5zZXQnLCAhZGlzYWJsZVN0aWNreSAmJiAnc3RpY2t5J11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRMaXN0U3ViaGVhZGVyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBMaXN0U3ViaGVhZGVyUm9vdCA9IHN0eWxlZCgnbGknLCB7XG4gIG5hbWU6ICdNdWlMaXN0U3ViaGVhZGVyJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCAhb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiBzdHlsZXMuZ3V0dGVycywgb3duZXJTdGF0ZS5pbnNldCAmJiBzdHlsZXMuaW5zZXQsICFvd25lclN0YXRlLmRpc2FibGVTdGlja3kgJiYgc3R5bGVzLnN0aWNreV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICBsaW5lSGVpZ2h0OiAnNDhweCcsXG4gIGxpc3RTdHlsZTogJ25vbmUnLFxuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtLFxuICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE0KVxufSwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ3ByaW1hcnknICYmIHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnByaW1hcnkubWFpblxufSwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnICYmIHtcbiAgY29sb3I6ICdpbmhlcml0J1xufSwgIW93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYge1xuICBwYWRkaW5nTGVmdDogMTYsXG4gIHBhZGRpbmdSaWdodDogMTZcbn0sIG93bmVyU3RhdGUuaW5zZXQgJiYge1xuICBwYWRkaW5nTGVmdDogNzJcbn0sICFvd25lclN0YXRlLmRpc2FibGVTdGlja3kgJiYge1xuICBwb3NpdGlvbjogJ3N0aWNreScsXG4gIHRvcDogMCxcbiAgekluZGV4OiAxLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmJhY2tncm91bmQucGFwZXJcbn0pKTtcbmNvbnN0IExpc3RTdWJoZWFkZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0U3ViaGVhZGVyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlMaXN0U3ViaGVhZGVyJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSAnZGVmYXVsdCcsXG4gICAgICBjb21wb25lbnQgPSAnbGknLFxuICAgICAgZGlzYWJsZUd1dHRlcnMgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVTdGlja3kgPSBmYWxzZSxcbiAgICAgIGluc2V0ID0gZmFsc2VcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGNvbXBvbmVudCxcbiAgICBkaXNhYmxlR3V0dGVycyxcbiAgICBkaXNhYmxlU3RpY2t5LFxuICAgIGluc2V0XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0U3ViaGVhZGVyUm9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyKSk7XG59KTtcbkxpc3RTdWJoZWFkZXIubXVpU2tpcExpc3RIaWdobGlnaHQgPSB0cnVlO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGlzdFN1YmhlYWRlci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2RlZmF1bHQnXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIExpc3QgU3ViaGVhZGVyIHdpbGwgbm90IGhhdmUgZ3V0dGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIExpc3QgU3ViaGVhZGVyIHdpbGwgbm90IHN0aWNrIHRvIHRoZSB0b3AgZHVyaW5nIHNjcm9sbC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVTdGlja3k6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgTGlzdCBTdWJoZWFkZXIgaXMgaW5kZW50ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbnNldDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBMaXN0U3ViaGVhZGVyOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IExpc3RJdGVtQnV0dG9uIGZyb20gXCJAbXVpL21hdGVyaWFsL0xpc3RJdGVtQnV0dG9uXCI7XG5pbXBvcnQgTGlzdEl0ZW1JY29uIGZyb20gXCJAbXVpL21hdGVyaWFsL0xpc3RJdGVtSWNvblwiO1xuaW1wb3J0IExpc3RJdGVtVGV4dCBmcm9tIFwiQG11aS9tYXRlcmlhbC9MaXN0SXRlbVRleHRcIjtcbmltcG9ydCBMaXN0U3ViaGVhZGVyIGZyb20gXCJAbXVpL21hdGVyaWFsL0xpc3RTdWJoZWFkZXJcIjtcbmltcG9ydCBTdGFja2VkTGluZUNoYXJ0SWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9TdGFja2VkTGluZUNoYXJ0XCI7XG5pbXBvcnQgRmlsZVByZXNlbnRJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL0ZpbGVQcmVzZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNlY29uZGFyeUxpc3RJdGVtcygpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICA8TGlzdFN1YmhlYWRlciBjb21wb25lbnQ9XCJkaXZcIiBpbnNldD5cbiAgICAgICAgICAgICAgICBTYXZlZCByZXBvcnRzXG4gICAgICAgICAgICA8L0xpc3RTdWJoZWFkZXI+XG4gICAgICAgICAgICA8TGlzdEl0ZW1CdXR0b24+XG4gICAgICAgICAgICAgICAgPExpc3RJdGVtSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgPFN0YWNrZWRMaW5lQ2hhcnRJY29uIC8+XG4gICAgICAgICAgICAgICAgPC9MaXN0SXRlbUljb24+XG4gICAgICAgICAgICAgICAgPExpc3RJdGVtVGV4dCBwcmltYXJ5PVwiR3JhcGhzXCIgLz5cbiAgICAgICAgICAgIDwvTGlzdEl0ZW1CdXR0b24+XG4gICAgICAgICAgICA8TGlzdEl0ZW1CdXR0b24+XG4gICAgICAgICAgICAgICAgPExpc3RJdGVtSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgPEZpbGVQcmVzZW50SWNvbiAvPlxuICAgICAgICAgICAgICAgIDwvTGlzdEl0ZW1JY29uPlxuICAgICAgICAgICAgICAgIDxMaXN0SXRlbVRleHQgcHJpbWFyeT1cIkZpbGVzXCIgLz5cbiAgICAgICAgICAgIDwvTGlzdEl0ZW1CdXR0b24+XG4gICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKVxufVxuIiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGVydFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQWxlcnQnLCBzbG90KTtcbn1cbmNvbnN0IGFsZXJ0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUFsZXJ0JywgWydyb290JywgJ2FjdGlvbicsICdpY29uJywgJ21lc3NhZ2UnLCAnZmlsbGVkJywgJ2ZpbGxlZFN1Y2Nlc3MnLCAnZmlsbGVkSW5mbycsICdmaWxsZWRXYXJuaW5nJywgJ2ZpbGxlZEVycm9yJywgJ291dGxpbmVkJywgJ291dGxpbmVkU3VjY2VzcycsICdvdXRsaW5lZEluZm8nLCAnb3V0bGluZWRXYXJuaW5nJywgJ291dGxpbmVkRXJyb3InLCAnc3RhbmRhcmQnLCAnc3RhbmRhcmRTdWNjZXNzJywgJ3N0YW5kYXJkSW5mbycsICdzdGFuZGFyZFdhcm5pbmcnLCAnc3RhbmRhcmRFcnJvciddKTtcbmV4cG9ydCBkZWZhdWx0IGFsZXJ0Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk0yMCwxMkE4LDggMCAwLDEgMTIsMjBBOCw4IDAgMCwxIDQsMTJBOCw4IDAgMCwxIDEyLDRDMTIuNzYsNCAxMy41LDQuMTEgMTQuMiwgNC4zMUwxNS43NywyLjc0QzE0LjYxLDIuMjYgMTMuMzQsMiAxMiwyQTEwLDEwIDAgMCwwIDIsMTJBMTAsMTAgMCAwLDAgMTIsMjJBMTAsMTAgMCAwLCAwIDIyLDEyTTcuOTEsMTAuMDhMNi41LDExLjVMMTEsMTZMMjEsNkwxOS41OSw0LjU4TDExLDEzLjE3TDcuOTEsMTAuMDhaXCJcbn0pLCAnU3VjY2Vzc091dGxpbmVkJyk7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL19qc3goXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgNS45OUwxOS41MyAxOUg0LjQ3TDEyIDUuOTlNMTIgMkwxIDIxaDIyTDEyIDJ6bTEgMTRoLTJ2Mmgydi0yem0wLTZoLTJ2NGgydi00elwiXG59KSwgJ1JlcG9ydFByb2JsZW1PdXRsaW5lZCcpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTExIDE1aDJ2MmgtMnptMC04aDJ2NmgtMnptLjk5LTVDNi40NyAyIDIgNi40OCAyIDEyczQuNDcgMTAgOS45OSAxMEMxNy41MiAyMiAyMiAxNy41MiAyMiAxMlMxNy41MiAyIDExLjk5IDJ6TTEyIDIwYy00LjQyIDAtOC0zLjU4LTgtOHMzLjU4LTggOC04IDggMy41OCA4IDgtMy41OCA4LTggOHpcIlxufSksICdFcnJvck91dGxpbmUnKTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk0xMSw5SDEzVjdIMTFNMTIsMjBDNy41OSwyMCA0LDE2LjQxIDQsMTJDNCw3LjU5IDcuNTksNCAxMiw0QzE2LjQxLDQgMjAsNy41OSAyMCwgMTJDMjAsMTYuNDEgMTYuNDEsMjAgMTIsMjBNMTIsMkExMCwxMCAwIDAsMCAyLDEyQTEwLDEwIDAgMCwwIDEyLDIyQTEwLDEwIDAgMCwwIDIyLDEyQTEwLCAxMCAwIDAsMCAxMiwyTTExLDE3SDEzVjExSDExVjE3WlwiXG59KSwgJ0luZm9PdXRsaW5lZCcpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqXG4gKiBBbGlhcyB0byBgQ2xlYXJgLlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL19qc3goXCJwYXRoXCIsIHtcbiAgZDogXCJNMTkgNi40MUwxNy41OSA1IDEyIDEwLjU5IDYuNDEgNSA1IDYuNDEgMTAuNTkgMTIgNSAxNy41OSA2LjQxIDE5IDEyIDEzLjQxIDE3LjU5IDE5IDE5IDE3LjU5IDEzLjQxIDEyelwiXG59KSwgJ0Nsb3NlJyk7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWN0aW9uXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjbG9zZVRleHRcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJpY29uXCIsIFwiaWNvbk1hcHBpbmdcIiwgXCJvbkNsb3NlXCIsIFwicm9sZVwiLCBcInNldmVyaXR5XCIsIFwic2xvdFByb3BzXCIsIFwic2xvdHNcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgZGFya2VuLCBsaWdodGVuIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmltcG9ydCBhbGVydENsYXNzZXMsIHsgZ2V0QWxlcnRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2FsZXJ0Q2xhc3Nlcyc7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICcuLi9JY29uQnV0dG9uJztcbmltcG9ydCBTdWNjZXNzT3V0bGluZWRJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9TdWNjZXNzT3V0bGluZWQnO1xuaW1wb3J0IFJlcG9ydFByb2JsZW1PdXRsaW5lZEljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL1JlcG9ydFByb2JsZW1PdXRsaW5lZCc7XG5pbXBvcnQgRXJyb3JPdXRsaW5lSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvRXJyb3JPdXRsaW5lJztcbmltcG9ydCBJbmZvT3V0bGluZWRJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9JbmZvT3V0bGluZWQnO1xuaW1wb3J0IENsb3NlSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvQ2xvc2UnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICB2YXJpYW50LFxuICAgIGNvbG9yLFxuICAgIHNldmVyaXR5LFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGAke3ZhcmlhbnR9JHtjYXBpdGFsaXplKGNvbG9yIHx8IHNldmVyaXR5KX1gLCBgJHt2YXJpYW50fWBdLFxuICAgIGljb246IFsnaWNvbiddLFxuICAgIG1lc3NhZ2U6IFsnbWVzc2FnZSddLFxuICAgIGFjdGlvbjogWydhY3Rpb24nXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEFsZXJ0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBBbGVydFJvb3QgPSBzdHlsZWQoUGFwZXIsIHtcbiAgbmFtZTogJ011aUFsZXJ0JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCBzdHlsZXNbYCR7b3duZXJTdGF0ZS52YXJpYW50fSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yIHx8IG93bmVyU3RhdGUuc2V2ZXJpdHkpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgZ2V0Q29sb3IgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBkYXJrZW4gOiBsaWdodGVuO1xuICBjb25zdCBnZXRCYWNrZ3JvdW5kQ29sb3IgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBsaWdodGVuIDogZGFya2VuO1xuICBjb25zdCBjb2xvciA9IG93bmVyU3RhdGUuY29sb3IgfHwgb3duZXJTdGF0ZS5zZXZlcml0eTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLCB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBwYWRkaW5nOiAnNnB4IDE2cHgnXG4gIH0sIGNvbG9yICYmIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3N0YW5kYXJkJyAmJiB7XG4gICAgY29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuQWxlcnRbYCR7Y29sb3J9Q29sb3JgXSA6IGdldENvbG9yKHRoZW1lLnBhbGV0dGVbY29sb3JdLmxpZ2h0LCAwLjYpLFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5BbGVydFtgJHtjb2xvcn1TdGFuZGFyZEJnYF0gOiBnZXRCYWNrZ3JvdW5kQ29sb3IodGhlbWUucGFsZXR0ZVtjb2xvcl0ubGlnaHQsIDAuOSksXG4gICAgW2AmIC4ke2FsZXJ0Q2xhc3Nlcy5pY29ufWBdOiB0aGVtZS52YXJzID8ge1xuICAgICAgY29sb3I6IHRoZW1lLnZhcnMucGFsZXR0ZS5BbGVydFtgJHtjb2xvcn1JY29uQ29sb3JgXVxuICAgIH0gOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpblxuICAgIH1cbiAgfSwgY29sb3IgJiYgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgICBjb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5BbGVydFtgJHtjb2xvcn1Db2xvcmBdIDogZ2V0Q29sb3IodGhlbWUucGFsZXR0ZVtjb2xvcl0ubGlnaHQsIDAuNiksXG4gICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbY29sb3JdLmxpZ2h0fWAsXG4gICAgW2AmIC4ke2FsZXJ0Q2xhc3Nlcy5pY29ufWBdOiB0aGVtZS52YXJzID8ge1xuICAgICAgY29sb3I6IHRoZW1lLnZhcnMucGFsZXR0ZS5BbGVydFtgJHtjb2xvcn1JY29uQ29sb3JgXVxuICAgIH0gOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpblxuICAgIH1cbiAgfSwgY29sb3IgJiYgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZmlsbGVkJyAmJiBfZXh0ZW5kcyh7XG4gICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtXG4gIH0sIHRoZW1lLnZhcnMgPyB7XG4gICAgY29sb3I6IHRoZW1lLnZhcnMucGFsZXR0ZS5BbGVydFtgJHtjb2xvcn1GaWxsZWRDb2xvcmBdLFxuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycy5wYWxldHRlLkFsZXJ0W2Ake2NvbG9yfUZpbGxlZEJnYF1cbiAgfSA6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2RhcmsnID8gdGhlbWUucGFsZXR0ZVtjb2xvcl0uZGFyayA6IHRoZW1lLnBhbGV0dGVbY29sb3JdLm1haW4sXG4gICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KHRoZW1lLnBhbGV0dGVbY29sb3JdLm1haW4pXG4gIH0pKTtcbn0pO1xuY29uc3QgQWxlcnRJY29uID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlBbGVydCcsXG4gIHNsb3Q6ICdJY29uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuaWNvblxufSkoe1xuICBtYXJnaW5SaWdodDogMTIsXG4gIHBhZGRpbmc6ICc3cHggMCcsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZm9udFNpemU6IDIyLFxuICBvcGFjaXR5OiAwLjlcbn0pO1xuY29uc3QgQWxlcnRNZXNzYWdlID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlBbGVydCcsXG4gIHNsb3Q6ICdNZXNzYWdlJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubWVzc2FnZVxufSkoe1xuICBwYWRkaW5nOiAnOHB4IDAnLFxuICBtaW5XaWR0aDogMCxcbiAgb3ZlcmZsb3c6ICdhdXRvJ1xufSk7XG5jb25zdCBBbGVydEFjdGlvbiA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQWxlcnQnLFxuICBzbG90OiAnQWN0aW9uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuYWN0aW9uXG59KSh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnLFxuICBwYWRkaW5nOiAnNHB4IDAgMCAxNnB4JyxcbiAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICBtYXJnaW5SaWdodDogLThcbn0pO1xuY29uc3QgZGVmYXVsdEljb25NYXBwaW5nID0ge1xuICBzdWNjZXNzOiAvKiNfX1BVUkVfXyovX2pzeChTdWNjZXNzT3V0bGluZWRJY29uLCB7XG4gICAgZm9udFNpemU6IFwiaW5oZXJpdFwiXG4gIH0pLFxuICB3YXJuaW5nOiAvKiNfX1BVUkVfXyovX2pzeChSZXBvcnRQcm9ibGVtT3V0bGluZWRJY29uLCB7XG4gICAgZm9udFNpemU6IFwiaW5oZXJpdFwiXG4gIH0pLFxuICBlcnJvcjogLyojX19QVVJFX18qL19qc3goRXJyb3JPdXRsaW5lSWNvbiwge1xuICAgIGZvbnRTaXplOiBcImluaGVyaXRcIlxuICB9KSxcbiAgaW5mbzogLyojX19QVVJFX18qL19qc3goSW5mb091dGxpbmVkSWNvbiwge1xuICAgIGZvbnRTaXplOiBcImluaGVyaXRcIlxuICB9KVxufTtcbmNvbnN0IEFsZXJ0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQWxlcnQoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfcmVmLCBfc2xvdHMkY2xvc2VCdXR0b24sIF9yZWYyLCBfc2xvdHMkY2xvc2VJY29uLCBfc2xvdFByb3BzJGNsb3NlQnV0dG8sIF9zbG90UHJvcHMkY2xvc2VJY29uO1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlBbGVydCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGFjdGlvbixcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY2xvc2VUZXh0ID0gJ0Nsb3NlJyxcbiAgICAgIGNvbG9yLFxuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgICBpY29uLFxuICAgICAgaWNvbk1hcHBpbmcgPSBkZWZhdWx0SWNvbk1hcHBpbmcsXG4gICAgICBvbkNsb3NlLFxuICAgICAgcm9sZSA9ICdhbGVydCcsXG4gICAgICBzZXZlcml0eSA9ICdzdWNjZXNzJyxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIHZhcmlhbnQgPSAnc3RhbmRhcmQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBzZXZlcml0eSxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IEFsZXJ0Q2xvc2VCdXR0b24gPSAoX3JlZiA9IChfc2xvdHMkY2xvc2VCdXR0b24gPSBzbG90cy5jbG9zZUJ1dHRvbikgIT0gbnVsbCA/IF9zbG90cyRjbG9zZUJ1dHRvbiA6IGNvbXBvbmVudHMuQ2xvc2VCdXR0b24pICE9IG51bGwgPyBfcmVmIDogSWNvbkJ1dHRvbjtcbiAgY29uc3QgQWxlcnRDbG9zZUljb24gPSAoX3JlZjIgPSAoX3Nsb3RzJGNsb3NlSWNvbiA9IHNsb3RzLmNsb3NlSWNvbikgIT0gbnVsbCA/IF9zbG90cyRjbG9zZUljb24gOiBjb21wb25lbnRzLkNsb3NlSWNvbikgIT0gbnVsbCA/IF9yZWYyIDogQ2xvc2VJY29uO1xuICBjb25zdCBjbG9zZUJ1dHRvblByb3BzID0gKF9zbG90UHJvcHMkY2xvc2VCdXR0byA9IHNsb3RQcm9wcy5jbG9zZUJ1dHRvbikgIT0gbnVsbCA/IF9zbG90UHJvcHMkY2xvc2VCdXR0byA6IGNvbXBvbmVudHNQcm9wcy5jbG9zZUJ1dHRvbjtcbiAgY29uc3QgY2xvc2VJY29uUHJvcHMgPSAoX3Nsb3RQcm9wcyRjbG9zZUljb24gPSBzbG90UHJvcHMuY2xvc2VJY29uKSAhPSBudWxsID8gX3Nsb3RQcm9wcyRjbG9zZUljb24gOiBjb21wb25lbnRzUHJvcHMuY2xvc2VJY29uO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKEFsZXJ0Um9vdCwgX2V4dGVuZHMoe1xuICAgIHJvbGU6IHJvbGUsXG4gICAgZWxldmF0aW9uOiAwLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbaWNvbiAhPT0gZmFsc2UgPyAvKiNfX1BVUkVfXyovX2pzeChBbGVydEljb24sIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaWNvbixcbiAgICAgIGNoaWxkcmVuOiBpY29uIHx8IGljb25NYXBwaW5nW3NldmVyaXR5XSB8fCBkZWZhdWx0SWNvbk1hcHBpbmdbc2V2ZXJpdHldXG4gICAgfSkgOiBudWxsLCAvKiNfX1BVUkVfXyovX2pzeChBbGVydE1lc3NhZ2UsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubWVzc2FnZSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pLCBhY3Rpb24gIT0gbnVsbCA/IC8qI19fUFVSRV9fKi9fanN4KEFsZXJ0QWN0aW9uLCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmFjdGlvbixcbiAgICAgIGNoaWxkcmVuOiBhY3Rpb25cbiAgICB9KSA6IG51bGwsIGFjdGlvbiA9PSBudWxsICYmIG9uQ2xvc2UgPyAvKiNfX1BVUkVfXyovX2pzeChBbGVydEFjdGlvbiwge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5hY3Rpb24sXG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goQWxlcnRDbG9zZUJ1dHRvbiwgX2V4dGVuZHMoe1xuICAgICAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBjbG9zZVRleHQsXG4gICAgICAgIHRpdGxlOiBjbG9zZVRleHQsXG4gICAgICAgIGNvbG9yOiBcImluaGVyaXRcIixcbiAgICAgICAgb25DbGljazogb25DbG9zZVxuICAgICAgfSwgY2xvc2VCdXR0b25Qcm9wcywge1xuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goQWxlcnRDbG9zZUljb24sIF9leHRlbmRzKHtcbiAgICAgICAgICBmb250U2l6ZTogXCJzbWFsbFwiXG4gICAgICAgIH0sIGNsb3NlSWNvblByb3BzKSlcbiAgICAgIH0pKVxuICAgIH0pIDogbnVsbF1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBBbGVydC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgYWN0aW9uIHRvIGRpc3BsYXkuIEl0IHJlbmRlcnMgYWZ0ZXIgdGhlIG1lc3NhZ2UsIGF0IHRoZSBlbmQgb2YgdGhlIGFsZXJ0LlxuICAgKi9cbiAgYWN0aW9uOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgbGFiZWwgZm9yIHRoZSAqY2xvc2UgcG9wdXAqIGljb24gYnV0dG9uLlxuICAgKlxuICAgKiBGb3IgbG9jYWxpemF0aW9uIHB1cnBvc2VzLCB5b3UgY2FuIHVzZSB0aGUgcHJvdmlkZWQgW3RyYW5zbGF0aW9uc10oL21hdGVyaWFsLXVpL2d1aWRlcy9sb2NhbGl6YXRpb24vKS5cbiAgICogQGRlZmF1bHQgJ0Nsb3NlJ1xuICAgKi9cbiAgY2xvc2VUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIFVubGVzcyBwcm92aWRlZCwgdGhlIHZhbHVlIGlzIHRha2VuIGZyb20gdGhlIGBzZXZlcml0eWAgcHJvcC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90c2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBDbG9zZUJ1dHRvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIENsb3NlSWNvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90UHJvcHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdFByb3BzYCBwcm9wIGluc3RlYWQsIGFzIGBjb21wb25lbnRzUHJvcHNgIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGNsb3NlQnV0dG9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsb3NlSWNvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpY29uIGRpc3BsYXllZCBiZWZvcmUgdGhlIGNoaWxkcmVuLlxuICAgKiBVbmxlc3MgcHJvdmlkZWQsIHRoZSBpY29uIGlzIG1hcHBlZCB0byB0aGUgdmFsdWUgb2YgdGhlIGBzZXZlcml0eWAgcHJvcC5cbiAgICogU2V0IHRvIGBmYWxzZWAgdG8gcmVtb3ZlIHRoZSBgaWNvbmAuXG4gICAqL1xuICBpY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgbWFwcyB0aGUgYHNldmVyaXR5YCBwcm9wIHRvIGEgcmFuZ2Ugb2YgZGlmZmVyZW50IGljb25zLFxuICAgKiBmb3IgaW5zdGFuY2Ugc3VjY2VzcyB0byBgPFN1Y2Nlc3NPdXRsaW5lZD5gLlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhpcyBtYXBwaW5nLCB5b3UgY2FuIHByb3ZpZGUgeW91ciBvd24uXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSBgaWNvbmAgcHJvcCB0byBvdmVycmlkZSB0aGUgaWNvbiBkaXNwbGF5ZWQuXG4gICAqL1xuICBpY29uTWFwcGluZzogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBlcnJvcjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaW5mbzogUHJvcFR5cGVzLm5vZGUsXG4gICAgc3VjY2VzczogUHJvcFR5cGVzLm5vZGUsXG4gICAgd2FybmluZzogUHJvcFR5cGVzLm5vZGVcbiAgfSksXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBXaGVuIHByb3ZpZGVkIGFuZCBubyBgYWN0aW9uYCBwcm9wIGlzIHNldCwgYSBjbG9zZSBpY29uIGJ1dHRvbiBpcyBkaXNwbGF5ZWQgdGhhdCB0cmlnZ2VycyB0aGUgY2FsbGJhY2sgd2hlbiBjbGlja2VkLlxuICAgKiBAcGFyYW0ge1JlYWN0LlN5bnRoZXRpY0V2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIEFSSUEgcm9sZSBhdHRyaWJ1dGUgb2YgdGhlIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0ICdhbGVydCdcbiAgICovXG4gIHJvbGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgc2V2ZXJpdHkgb2YgdGhlIGFsZXJ0LiBUaGlzIGRlZmluZXMgdGhlIGNvbG9yIGFuZCBpY29uIHVzZWQuXG4gICAqIEBkZWZhdWx0ICdzdWNjZXNzJ1xuICAgKi9cbiAgc2V2ZXJpdHk6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c1Byb3BzYCBwcm9wLCB3aGljaCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjbG9zZUJ1dHRvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbG9zZUljb246IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjbG9zZUJ1dHRvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIGNsb3NlSWNvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAnc3RhbmRhcmQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQWxlcnQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DaGFuZ2VcIiwgXCJtYXhSb3dzXCIsIFwibWluUm93c1wiLCBcInN0eWxlXCIsIFwidmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IHVuc3RhYmxlX2RlYm91bmNlIGFzIGRlYm91bmNlLCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IGFzIHVzZUVuaGFuY2VkRWZmZWN0LCB1bnN0YWJsZV9vd25lcldpbmRvdyBhcyBvd25lcldpbmRvdyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIGdldFN0eWxlVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCkgfHwgMDtcbn1cbmNvbnN0IHN0eWxlcyA9IHtcbiAgc2hhZG93OiB7XG4gICAgLy8gVmlzaWJpbGl0eSBuZWVkZWQgdG8gaGlkZSB0aGUgZXh0cmEgdGV4dCBhcmVhIG9uIGlQYWRzXG4gICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgLy8gUmVtb3ZlIGZyb20gdGhlIGNvbnRlbnQgZmxvd1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIC8vIElnbm9yZSB0aGUgc2Nyb2xsYmFyIHdpZHRoXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIGhlaWdodDogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICAvLyBDcmVhdGUgYSBuZXcgbGF5ZXIsIGluY3JlYXNlIHRoZSBpc29sYXRpb24gb2YgdGhlIGNvbXB1dGVkIHZhbHVlc1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknXG4gIH1cbn07XG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICByZXR1cm4gb2JqID09PSB1bmRlZmluZWQgfHwgb2JqID09PSBudWxsIHx8IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwIHx8IG9iai5vdXRlckhlaWdodFN0eWxlID09PSAwICYmICFvYmoub3ZlcmZsb3c7XG59XG5cbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW1RleHRhcmVhIEF1dG9zaXplXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pXG4gKiAtIFtUZXh0YXJlYSBBdXRvc2l6ZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL3JlYWN0LXRleHRhcmVhLWF1dG9zaXplLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbVGV4dGFyZWFBdXRvc2l6ZSBBUEldKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LXRleHRhcmVhLWF1dG9zaXplL2NvbXBvbmVudHMtYXBpLyN0ZXh0YXJlYS1hdXRvc2l6ZSlcbiAqL1xuY29uc3QgVGV4dGFyZWFBdXRvc2l6ZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRleHRhcmVhQXV0b3NpemUocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICBjb25zdCB7XG4gICAgICBvbkNoYW5nZSxcbiAgICAgIG1heFJvd3MsXG4gICAgICBtaW5Sb3dzID0gMSxcbiAgICAgIHN0eWxlLFxuICAgICAgdmFsdWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnQ6IGlzQ29udHJvbGxlZFxuICB9ID0gUmVhY3QudXNlUmVmKHZhbHVlICE9IG51bGwpO1xuICBjb25zdCBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihmb3J3YXJkZWRSZWYsIGlucHV0UmVmKTtcbiAgY29uc3Qgc2hhZG93UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCByZW5kZXJzID0gUmVhY3QudXNlUmVmKDApO1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBvdXRlckhlaWdodFN0eWxlOiAwXG4gIH0pO1xuICBjb25zdCBnZXRVcGRhdGVkU3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGlucHV0KTtcbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gY29udGFpbmVyV2luZG93LmdldENvbXB1dGVkU3R5bGUoaW5wdXQpO1xuXG4gICAgLy8gSWYgaW5wdXQncyB3aWR0aCBpcyBzaHJ1bmsgYW5kIGl0J3Mgbm90IHZpc2libGUsIGRvbid0IHN5bmMgaGVpZ2h0LlxuICAgIGlmIChjb21wdXRlZFN0eWxlLndpZHRoID09PSAnMHB4Jykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3V0ZXJIZWlnaHRTdHlsZTogMFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgaW5wdXRTaGFsbG93ID0gc2hhZG93UmVmLmN1cnJlbnQ7XG4gICAgaW5wdXRTaGFsbG93LnN0eWxlLndpZHRoID0gY29tcHV0ZWRTdHlsZS53aWR0aDtcbiAgICBpbnB1dFNoYWxsb3cudmFsdWUgPSBpbnB1dC52YWx1ZSB8fCBwcm9wcy5wbGFjZWhvbGRlciB8fCAneCc7XG4gICAgaWYgKGlucHV0U2hhbGxvdy52YWx1ZS5zbGljZSgtMSkgPT09ICdcXG4nKSB7XG4gICAgICAvLyBDZXJ0YWluIGZvbnRzIHdoaWNoIG92ZXJmbG93IHRoZSBsaW5lIGhlaWdodCB3aWxsIGNhdXNlIHRoZSB0ZXh0YXJlYVxuICAgICAgLy8gdG8gcmVwb3J0IGEgZGlmZmVyZW50IHNjcm9sbEhlaWdodCBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgbGFzdCBsaW5lXG4gICAgICAvLyBpcyBlbXB0eS4gTWFrZSBpdCBub24tZW1wdHkgdG8gYXZvaWQgdGhpcyBpc3N1ZS5cbiAgICAgIGlucHV0U2hhbGxvdy52YWx1ZSArPSAnICc7XG4gICAgfVxuICAgIGNvbnN0IGJveFNpemluZyA9IGNvbXB1dGVkU3R5bGUuYm94U2l6aW5nO1xuICAgIGNvbnN0IHBhZGRpbmcgPSBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUucGFkZGluZ0JvdHRvbSkgKyBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUucGFkZGluZ1RvcCk7XG4gICAgY29uc3QgYm9yZGVyID0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLmJvcmRlckJvdHRvbVdpZHRoKSArIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZS5ib3JkZXJUb3BXaWR0aCk7XG5cbiAgICAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBpbm5lciBjb250ZW50XG4gICAgY29uc3QgaW5uZXJIZWlnaHQgPSBpbnB1dFNoYWxsb3cuc2Nyb2xsSGVpZ2h0O1xuXG4gICAgLy8gTWVhc3VyZSBoZWlnaHQgb2YgYSB0ZXh0YXJlYSB3aXRoIGEgc2luZ2xlIHJvd1xuICAgIGlucHV0U2hhbGxvdy52YWx1ZSA9ICd4JztcbiAgICBjb25zdCBzaW5nbGVSb3dIZWlnaHQgPSBpbnB1dFNoYWxsb3cuc2Nyb2xsSGVpZ2h0O1xuXG4gICAgLy8gVGhlIGhlaWdodCBvZiB0aGUgb3V0ZXIgY29udGVudFxuICAgIGxldCBvdXRlckhlaWdodCA9IGlubmVySGVpZ2h0O1xuICAgIGlmIChtaW5Sb3dzKSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWF4KE51bWJlcihtaW5Sb3dzKSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cbiAgICBpZiAobWF4Um93cykge1xuICAgICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1pbihOdW1iZXIobWF4Um93cykgKiBzaW5nbGVSb3dIZWlnaHQsIG91dGVySGVpZ2h0KTtcbiAgICB9XG4gICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1heChvdXRlckhlaWdodCwgc2luZ2xlUm93SGVpZ2h0KTtcblxuICAgIC8vIFRha2UgdGhlIGJveCBzaXppbmcgaW50byBhY2NvdW50IGZvciBhcHBseWluZyB0aGlzIHZhbHVlIGFzIGEgc3R5bGUuXG4gICAgY29uc3Qgb3V0ZXJIZWlnaHRTdHlsZSA9IG91dGVySGVpZ2h0ICsgKGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnID8gcGFkZGluZyArIGJvcmRlciA6IDApO1xuICAgIGNvbnN0IG92ZXJmbG93ID0gTWF0aC5hYnMob3V0ZXJIZWlnaHQgLSBpbm5lckhlaWdodCkgPD0gMTtcbiAgICByZXR1cm4ge1xuICAgICAgb3V0ZXJIZWlnaHRTdHlsZSxcbiAgICAgIG92ZXJmbG93XG4gICAgfTtcbiAgfSwgW21heFJvd3MsIG1pblJvd3MsIHByb3BzLnBsYWNlaG9sZGVyXSk7XG4gIGNvbnN0IHVwZGF0ZVN0YXRlID0gKHByZXZTdGF0ZSwgbmV3U3RhdGUpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvdXRlckhlaWdodFN0eWxlLFxuICAgICAgb3ZlcmZsb3dcbiAgICB9ID0gbmV3U3RhdGU7XG4gICAgLy8gTmVlZCBhIGxhcmdlIGVub3VnaCBkaWZmZXJlbmNlIHRvIHVwZGF0ZSB0aGUgaGVpZ2h0LlxuICAgIC8vIFRoaXMgcHJldmVudHMgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3AuXG4gICAgaWYgKHJlbmRlcnMuY3VycmVudCA8IDIwICYmIChvdXRlckhlaWdodFN0eWxlID4gMCAmJiBNYXRoLmFicygocHJldlN0YXRlLm91dGVySGVpZ2h0U3R5bGUgfHwgMCkgLSBvdXRlckhlaWdodFN0eWxlKSA+IDEgfHwgcHJldlN0YXRlLm92ZXJmbG93ICE9PSBvdmVyZmxvdykpIHtcbiAgICAgIHJlbmRlcnMuY3VycmVudCArPSAxO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3ZlcmZsb3csXG4gICAgICAgIG91dGVySGVpZ2h0U3R5bGVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAocmVuZGVycy5jdXJyZW50ID09PSAyMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUb28gbWFueSByZS1yZW5kZXJzLiBUaGUgbGF5b3V0IGlzIHVuc3RhYmxlLicsICdUZXh0YXJlYUF1dG9zaXplIGxpbWl0cyB0aGUgbnVtYmVyIG9mIHJlbmRlcnMgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgfTtcbiAgY29uc3Qgc3luY0hlaWdodCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IGdldFVwZGF0ZWRTdGF0ZSgpO1xuICAgIGlmIChpc0VtcHR5KG5ld1N0YXRlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRTdGF0ZShwcmV2U3RhdGUgPT4gdXBkYXRlU3RhdGUocHJldlN0YXRlLCBuZXdTdGF0ZSkpO1xuICB9LCBbZ2V0VXBkYXRlZFN0YXRlXSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzeW5jSGVpZ2h0V2l0aEZsdXNoU3luYyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0gZ2V0VXBkYXRlZFN0YXRlKCk7XG4gICAgICBpZiAoaXNFbXB0eShuZXdTdGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBJbiBSZWFjdCAxOCwgc3RhdGUgdXBkYXRlcyBpbiBhIFJlc2l6ZU9ic2VydmVyJ3MgY2FsbGJhY2sgYXJlIGhhcHBlbmluZyBhZnRlclxuICAgICAgLy8gdGhlIHBhaW50LCB0aGlzIGxlYWRzIHRvIGFuIGluZmluaXRlIHJlbmRlcmluZy5cbiAgICAgIC8vXG4gICAgICAvLyBVc2luZyBmbHVzaFN5bmMgZW5zdXJlcyB0aGF0IHRoZSBzdGF0ZXMgaXMgdXBkYXRlZCBiZWZvcmUgdGhlIG5leHQgcGFpbi5cbiAgICAgIC8vIFJlbGF0ZWQgaXNzdWUgLSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzI0MzMxXG4gICAgICBSZWFjdERPTS5mbHVzaFN5bmMoKCkgPT4ge1xuICAgICAgICBzZXRTdGF0ZShwcmV2U3RhdGUgPT4gdXBkYXRlU3RhdGUocHJldlN0YXRlLCBuZXdTdGF0ZSkpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuICAgICAgc3luY0hlaWdodFdpdGhGbHVzaFN5bmMoKTtcbiAgICB9O1xuICAgIC8vIFdvcmthcm91bmQgYSBcIlJlc2l6ZU9ic2VydmVyIGxvb3AgY29tcGxldGVkIHdpdGggdW5kZWxpdmVyZWQgbm90aWZpY2F0aW9uc1wiIGVycm9yXG4gICAgLy8gaW4gdGVzdC5cbiAgICAvLyBOb3RlIHRoYXQgd2UgbWlnaHQgbmVlZCB0byB1c2UgdGhpcyBsb2dpYyBpbiBwcm9kdWN0aW9uIHBlciBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9yZXNpemUtb2JzZXJ2ZXIvaXNzdWVzLzM4XG4gICAgLy8gQWxzbyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tdWkteC9pc3N1ZXMvODczM1xuICAgIGxldCByQUY7XG4gICAgY29uc3QgckFGSGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUockFGKTtcbiAgICAgIHJBRiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGhhbmRsZVJlc2l6ZSgpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBkZWJvdW5jZUhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKGhhbmRsZVJlc2l6ZSk7XG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGlucHV0KTtcbiAgICBjb250YWluZXJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2VIYW5kbGVSZXNpemUpO1xuICAgIGxldCByZXNpemVPYnNlcnZlcjtcbiAgICBpZiAodHlwZW9mIFJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyA/IHJBRkhhbmRsZVJlc2l6ZSA6IGhhbmRsZVJlc2l6ZSk7XG4gICAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKGlucHV0KTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRlYm91bmNlSGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyQUYpO1xuICAgICAgY29udGFpbmVyV2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGRlYm91bmNlSGFuZGxlUmVzaXplKTtcbiAgICAgIGlmIChyZXNpemVPYnNlcnZlcikge1xuICAgICAgICByZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2dldFVwZGF0ZWRTdGF0ZV0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgc3luY0hlaWdodCgpO1xuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuICB9LCBbdmFsdWVdKTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gZXZlbnQgPT4ge1xuICAgIHJlbmRlcnMuY3VycmVudCA9IDA7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHN5bmNIZWlnaHQoKTtcbiAgICB9XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChcInRleHRhcmVhXCIsIF9leHRlbmRzKHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgICAgLy8gQXBwbHkgdGhlIHJvd3MgcHJvcCB0byBnZXQgYSBcImNvcnJlY3RcIiBmaXJzdCBTU1IgcGFpbnRcbiAgICAgICxcbiAgICAgIHJvd3M6IG1pblJvd3MsXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICBoZWlnaHQ6IHN0YXRlLm91dGVySGVpZ2h0U3R5bGUsXG4gICAgICAgIC8vIE5lZWQgYSBsYXJnZSBlbm91Z2ggZGlmZmVyZW5jZSB0byBhbGxvdyBzY3JvbGxpbmcuXG4gICAgICAgIC8vIFRoaXMgcHJldmVudHMgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3AuXG4gICAgICAgIG92ZXJmbG93OiBzdGF0ZS5vdmVyZmxvdyA/ICdoaWRkZW4nIDogdW5kZWZpbmVkXG4gICAgICB9LCBzdHlsZSlcbiAgICB9LCBvdGhlcikpLCAvKiNfX1BVUkVfXyovX2pzeChcInRleHRhcmVhXCIsIHtcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICAgIGNsYXNzTmFtZTogcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICByZWY6IHNoYWRvd1JlZixcbiAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGVzLnNoYWRvdywgc3R5bGUsIHtcbiAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogMFxuICAgICAgfSlcbiAgICB9KV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRhcmVhQXV0b3NpemUucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4g4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKi9cbiAgbWF4Um93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgeyBUZXh0YXJlYUF1dG9zaXplIH07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gIHByb3BzLFxuICBzdGF0ZXMsXG4gIG11aUZvcm1Db250cm9sXG59KSB7XG4gIHJldHVybiBzdGF0ZXMucmVkdWNlKChhY2MsIHN0YXRlKSA9PiB7XG4gICAgYWNjW3N0YXRlXSA9IHByb3BzW3N0YXRlXTtcbiAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHNbc3RhdGVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhY2Nbc3RhdGVdID0gbXVpRm9ybUNvbnRyb2xbc3RhdGVdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBGb3JtQ29udHJvbENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRm9ybUNvbnRyb2xDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0Zvcm1Db250cm9sQ29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbENvbnRleHQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4vRm9ybUNvbnRyb2xDb250ZXh0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUZvcm1Db250cm9sKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChGb3JtQ29udHJvbENvbnRleHQpO1xufSIsIi8vIFN1cHBvcnRzIGRldGVybWluYXRpb24gb2YgaXNDb250cm9sbGVkKCkuXG4vLyBDb250cm9sbGVkIGlucHV0IGFjY2VwdHMgaXRzIGN1cnJlbnQgdmFsdWUgYXMgYSBwcm9wLlxuLy9cbi8vIEBzZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9mb3Jtcy5odG1sI2NvbnRyb2xsZWQtY29tcG9uZW50c1xuLy8gQHBhcmFtIHZhbHVlXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBzdHJpbmcgKGluY2x1ZGluZyAnJykgb3IgbnVtYmVyIChpbmNsdWRpbmcgemVybylcbmV4cG9ydCBmdW5jdGlvbiBoYXNWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAhKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCk7XG59XG5cbi8vIERldGVybWluZSBpZiBmaWVsZCBpcyBlbXB0eSBvciBmaWxsZWQuXG4vLyBSZXNwb25zZSBkZXRlcm1pbmVzIGlmIGxhYmVsIGlzIHByZXNlbnRlZCBhYm92ZSBmaWVsZCBvciBhcyBwbGFjZWhvbGRlci5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcGFyYW0gU1NSXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBub3QgcHJlc2VudCBvciBlbXB0eSBzdHJpbmcuXG4vLyAgICAgICAgICAgICAgICAgICAgVHJ1ZSB3aGVuIGFueSBudW1iZXIgb3Igc3RyaW5nIHdpdGggbGVuZ3RoLlxuZXhwb3J0IGZ1bmN0aW9uIGlzRmlsbGVkKG9iaiwgU1NSID0gZmFsc2UpIHtcbiAgcmV0dXJuIG9iaiAmJiAoaGFzVmFsdWUob2JqLnZhbHVlKSAmJiBvYmoudmFsdWUgIT09ICcnIHx8IFNTUiAmJiBoYXNWYWx1ZShvYmouZGVmYXVsdFZhbHVlKSAmJiBvYmouZGVmYXVsdFZhbHVlICE9PSAnJyk7XG59XG5cbi8vIERldGVybWluZSBpZiBhbiBJbnB1dCBpcyBhZG9ybmVkIG9uIHN0YXJ0LlxuLy8gSXQncyBjb3JyZXNwb25kaW5nIHRvIHRoZSBsZWZ0IHdpdGggTFRSLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vIGFkb3JubWVudHMuXG4vLyAgICAgICAgICAgICAgICAgICAgVHJ1ZSB3aGVuIGFkb3JuZWQgYXQgdGhlIHN0YXJ0LlxuZXhwb3J0IGZ1bmN0aW9uIGlzQWRvcm5lZFN0YXJ0KG9iaikge1xuICByZXR1cm4gb2JqLnN0YXJ0QWRvcm5tZW50O1xufSIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5wdXRCYXNlVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlJbnB1dEJhc2UnLCBzbG90KTtcbn1cbmNvbnN0IGlucHV0QmFzZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlJbnB1dEJhc2UnLCBbJ3Jvb3QnLCAnZm9ybUNvbnRyb2wnLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdhZG9ybmVkU3RhcnQnLCAnYWRvcm5lZEVuZCcsICdlcnJvcicsICdzaXplU21hbGwnLCAnbXVsdGlsaW5lJywgJ2NvbG9yU2Vjb25kYXJ5JywgJ2Z1bGxXaWR0aCcsICdoaWRkZW5MYWJlbCcsICdyZWFkT25seScsICdpbnB1dCcsICdpbnB1dFNpemVTbWFsbCcsICdpbnB1dE11bHRpbGluZScsICdpbnB1dFR5cGVTZWFyY2gnLCAnaW5wdXRBZG9ybmVkU3RhcnQnLCAnaW5wdXRBZG9ybmVkRW5kJywgJ2lucHV0SGlkZGVuTGFiZWwnXSk7XG5leHBvcnQgZGVmYXVsdCBpbnB1dEJhc2VDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGZyb20gXCJAbXVpL3V0aWxzL2Zvcm1hdE11aUVycm9yTWVzc2FnZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXJpYS1kZXNjcmliZWRieVwiLCBcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImRlZmF1bHRWYWx1ZVwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlc1wiLCBcImVuZEFkb3JubWVudFwiLCBcImVycm9yXCIsIFwiZnVsbFdpZHRoXCIsIFwiaWRcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcImlucHV0UHJvcHNcIiwgXCJpbnB1dFJlZlwiLCBcIm1hcmdpblwiLCBcIm1heFJvd3NcIiwgXCJtaW5Sb3dzXCIsIFwibXVsdGlsaW5lXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZWFkT25seVwiLCBcInJlbmRlclN1ZmZpeFwiLCBcInJvd3NcIiwgXCJzaXplXCIsIFwic2xvdFByb3BzXCIsIFwic2xvdHNcIiwgXCJzdGFydEFkb3JubWVudFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUsIGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcywgaXNIb3N0Q29tcG9uZW50LCBUZXh0YXJlYUF1dG9zaXplIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IEZvcm1Db250cm9sQ29udGV4dCBmcm9tICcuLi9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbENvbnRleHQnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZUVuaGFuY2VkRWZmZWN0IGZyb20gJy4uL3V0aWxzL3VzZUVuaGFuY2VkRWZmZWN0JztcbmltcG9ydCBHbG9iYWxTdHlsZXMgZnJvbSAnLi4vR2xvYmFsU3R5bGVzJztcbmltcG9ydCB7IGlzRmlsbGVkIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgaW5wdXRCYXNlQ2xhc3NlcywgeyBnZXRJbnB1dEJhc2VVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2lucHV0QmFzZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCByb290T3ZlcnJpZGVzUmVzb2x2ZXIgPSAocHJvcHMsIHN0eWxlcykgPT4ge1xuICBjb25zdCB7XG4gICAgb3duZXJTdGF0ZVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuZm9ybUNvbnRyb2wgJiYgc3R5bGVzLmZvcm1Db250cm9sLCBvd25lclN0YXRlLnN0YXJ0QWRvcm5tZW50ICYmIHN0eWxlcy5hZG9ybmVkU3RhcnQsIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHN0eWxlcy5hZG9ybmVkRW5kLCBvd25lclN0YXRlLmVycm9yICYmIHN0eWxlcy5lcnJvciwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHN0eWxlcy5zaXplU21hbGwsIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHN0eWxlcy5tdWx0aWxpbmUsIG93bmVyU3RhdGUuY29sb3IgJiYgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYgc3R5bGVzLmZ1bGxXaWR0aCwgb3duZXJTdGF0ZS5oaWRkZW5MYWJlbCAmJiBzdHlsZXMuaGlkZGVuTGFiZWxdO1xufTtcbmV4cG9ydCBjb25zdCBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgY29uc3Qge1xuICAgIG93bmVyU3RhdGVcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gW3N0eWxlcy5pbnB1dCwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHN0eWxlcy5pbnB1dFNpemVTbWFsbCwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYgc3R5bGVzLmlucHV0TXVsdGlsaW5lLCBvd25lclN0YXRlLnR5cGUgPT09ICdzZWFyY2gnICYmIHN0eWxlcy5pbnB1dFR5cGVTZWFyY2gsIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYgc3R5bGVzLmlucHV0QWRvcm5lZFN0YXJ0LCBvd25lclN0YXRlLmVuZEFkb3JubWVudCAmJiBzdHlsZXMuaW5wdXRBZG9ybmVkRW5kLCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHN0eWxlcy5pbnB1dEhpZGRlbkxhYmVsXTtcbn07XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBlbmRBZG9ybm1lbnQsXG4gICAgZm9jdXNlZCxcbiAgICBmb3JtQ29udHJvbCxcbiAgICBmdWxsV2lkdGgsXG4gICAgaGlkZGVuTGFiZWwsXG4gICAgbXVsdGlsaW5lLFxuICAgIHJlYWRPbmx5LFxuICAgIHNpemUsXG4gICAgc3RhcnRBZG9ybm1lbnQsXG4gICAgdHlwZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBlcnJvciAmJiAnZXJyb3InLCBmdWxsV2lkdGggJiYgJ2Z1bGxXaWR0aCcsIGZvY3VzZWQgJiYgJ2ZvY3VzZWQnLCBmb3JtQ29udHJvbCAmJiAnZm9ybUNvbnRyb2wnLCBzaXplICYmIHNpemUgIT09ICdtZWRpdW0nICYmIGBzaXplJHtjYXBpdGFsaXplKHNpemUpfWAsIG11bHRpbGluZSAmJiAnbXVsdGlsaW5lJywgc3RhcnRBZG9ybm1lbnQgJiYgJ2Fkb3JuZWRTdGFydCcsIGVuZEFkb3JubWVudCAmJiAnYWRvcm5lZEVuZCcsIGhpZGRlbkxhYmVsICYmICdoaWRkZW5MYWJlbCcsIHJlYWRPbmx5ICYmICdyZWFkT25seSddLFxuICAgIGlucHV0OiBbJ2lucHV0JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgdHlwZSA9PT0gJ3NlYXJjaCcgJiYgJ2lucHV0VHlwZVNlYXJjaCcsIG11bHRpbGluZSAmJiAnaW5wdXRNdWx0aWxpbmUnLCBzaXplID09PSAnc21hbGwnICYmICdpbnB1dFNpemVTbWFsbCcsIGhpZGRlbkxhYmVsICYmICdpbnB1dEhpZGRlbkxhYmVsJywgc3RhcnRBZG9ybm1lbnQgJiYgJ2lucHV0QWRvcm5lZFN0YXJ0JywgZW5kQWRvcm5tZW50ICYmICdpbnB1dEFkb3JuZWRFbmQnLCByZWFkT25seSAmJiAncmVhZE9ubHknXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldElucHV0QmFzZVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuZXhwb3J0IGNvbnN0IElucHV0QmFzZVJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUlucHV0QmFzZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IHJvb3RPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gIGxpbmVIZWlnaHQ6ICcxLjQzNzVlbScsXG4gIC8vIDIzcHhcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIGZ1bGxXaWR0aC5cbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIGN1cnNvcjogJ3RleHQnLFxuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgW2AmLiR7aW5wdXRCYXNlQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LmRpc2FibGVkLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gIH1cbn0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIF9leHRlbmRzKHtcbiAgcGFkZGluZzogJzRweCAwIDVweCdcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmdUb3A6IDFcbn0pLCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiB7XG4gIHdpZHRoOiAnMTAwJSdcbn0pKTtcbmV4cG9ydCBjb25zdCBJbnB1dEJhc2VDb21wb25lbnQgPSBzdHlsZWQoJ2lucHV0Jywge1xuICBuYW1lOiAnTXVpSW5wdXRCYXNlJyxcbiAgc2xvdDogJ0lucHV0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0T3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGNvbnN0IGxpZ2h0ID0gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnO1xuICBjb25zdCBwbGFjZWhvbGRlciA9IF9leHRlbmRzKHtcbiAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcidcbiAgfSwgdGhlbWUudmFycyA/IHtcbiAgICBvcGFjaXR5OiB0aGVtZS52YXJzLm9wYWNpdHkuaW5wdXRQbGFjZWhvbGRlclxuICB9IDoge1xuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNVxuICB9LCB7XG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICB9KVxuICB9KTtcbiAgY29uc3QgcGxhY2Vob2xkZXJIaWRkZW4gPSB7XG4gICAgb3BhY2l0eTogJzAgIWltcG9ydGFudCdcbiAgfTtcbiAgY29uc3QgcGxhY2Vob2xkZXJWaXNpYmxlID0gdGhlbWUudmFycyA/IHtcbiAgICBvcGFjaXR5OiB0aGVtZS52YXJzLm9wYWNpdHkuaW5wdXRQbGFjZWhvbGRlclxuICB9IDoge1xuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNVxuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICBsZXR0ZXJTcGFjaW5nOiAnaW5oZXJpdCcsXG4gICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIHBhZGRpbmc6ICc0cHggMCA1cHgnLFxuICAgIGJvcmRlcjogMCxcbiAgICBib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG4gICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgIGhlaWdodDogJzEuNDM3NWVtJyxcbiAgICAvLyBSZXNldCAyM3B4dGhlIG5hdGl2ZSBpbnB1dCBsaW5lLWhlaWdodFxuICAgIG1hcmdpbjogMCxcbiAgICAvLyBSZXNldCBmb3IgU2FmYXJpXG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAvLyBNYWtlIHRoZSBmbGV4IGl0ZW0gc2hyaW5rIHdpdGggRmlyZWZveFxuICAgIG1pbldpZHRoOiAwLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgLy8gRml4IElFMTEgd2lkdGggaXNzdWVcbiAgICBhbmltYXRpb25OYW1lOiAnbXVpLWF1dG8tZmlsbC1jYW5jZWwnLFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnMTBtcycsXG4gICAgJyY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgJyY6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgLy8gSUUxMVxuICAgICcmOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAvLyBFZGdlXG4gICAgJyY6Zm9jdXMnOiB7XG4gICAgICBvdXRsaW5lOiAwXG4gICAgfSxcbiAgICAvLyBSZXNldCBGaXJlZm94IGludmFsaWQgcmVxdWlyZWQgaW5wdXQgc3R5bGVcbiAgICAnJjppbnZhbGlkJzoge1xuICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICB9LFxuICAgICcmOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uJzoge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIHdoZW4gdHlwZT1zZWFyY2guXG4gICAgICBXZWJraXRBcHBlYXJhbmNlOiAnbm9uZSdcbiAgICB9LFxuICAgIC8vIFNob3cgYW5kIGhpZGUgdGhlIHBsYWNlaG9sZGVyIGxvZ2ljXG4gICAgW2BsYWJlbFtkYXRhLXNocmluaz1mYWxzZV0gKyAuJHtpbnB1dEJhc2VDbGFzc2VzLmZvcm1Db250cm9sfSAmYF06IHtcbiAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgLy8gSUUxMVxuICAgICAgJyY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgLy8gRWRnZVxuICAgICAgJyY6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAnJjpmb2N1czo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAnJjpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAvLyBJRTExXG4gICAgICAnJjpmb2N1czo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlIC8vIEVkZ2VcbiAgICB9LFxuICAgIFtgJi4ke2lucHV0QmFzZUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAvLyBSZXNldCBpT1Mgb3BhY2l0eVxuICAgICAgV2Via2l0VGV4dEZpbGxDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5kaXNhYmxlZCAvLyBGaXggb3BhY2l0eSBTYWZhcmkgYnVnXG4gICAgfSxcbiAgICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICc1MDAwcycsXG4gICAgICBhbmltYXRpb25OYW1lOiAnbXVpLWF1dG8tZmlsbCdcbiAgICB9XG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZ1RvcDogMVxuICB9LCBvd25lclN0YXRlLm11bHRpbGluZSAmJiB7XG4gICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgcmVzaXplOiAnbm9uZScsXG4gICAgcGFkZGluZzogMCxcbiAgICBwYWRkaW5nVG9wOiAwXG4gIH0sIG93bmVyU3RhdGUudHlwZSA9PT0gJ3NlYXJjaCcgJiYge1xuICAgIC8vIEltcHJvdmUgdHlwZSBzZWFyY2ggc3R5bGUuXG4gICAgTW96QXBwZWFyYW5jZTogJ3RleHRmaWVsZCdcbiAgfSk7XG59KTtcbmNvbnN0IGlucHV0R2xvYmFsU3R5bGVzID0gLyojX19QVVJFX18qL19qc3goR2xvYmFsU3R5bGVzLCB7XG4gIHN0eWxlczoge1xuICAgICdAa2V5ZnJhbWVzIG11aS1hdXRvLWZpbGwnOiB7XG4gICAgICBmcm9tOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1hdXRvLWZpbGwtY2FuY2VsJzoge1xuICAgICAgZnJvbToge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxuLyoqXG4gKiBgSW5wdXRCYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYW4gaW5wdXQuXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgc3RhdGUgbG9naWMuXG4gKi9cbmNvbnN0IElucHV0QmFzZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIElucHV0QmFzZShpblByb3BzLCByZWYpIHtcbiAgdmFyIF9zbG90UHJvcHMkaW5wdXQ7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUlucHV0QmFzZSdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogYXJpYURlc2NyaWJlZGJ5LFxuICAgICAgYXV0b0NvbXBsZXRlLFxuICAgICAgYXV0b0ZvY3VzLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGRpc2FibGVJbmplY3RpbmdHbG9iYWxTdHlsZXMsXG4gICAgICBlbmRBZG9ybm1lbnQsXG4gICAgICBmdWxsV2lkdGggPSBmYWxzZSxcbiAgICAgIGlkLFxuICAgICAgaW5wdXRDb21wb25lbnQgPSAnaW5wdXQnLFxuICAgICAgaW5wdXRQcm9wczogaW5wdXRQcm9wc1Byb3AgPSB7fSxcbiAgICAgIGlucHV0UmVmOiBpbnB1dFJlZlByb3AsXG4gICAgICBtYXhSb3dzLFxuICAgICAgbWluUm93cyxcbiAgICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgICAgbmFtZSxcbiAgICAgIG9uQmx1cixcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgb25DbGljayxcbiAgICAgIG9uRm9jdXMsXG4gICAgICBvbktleURvd24sXG4gICAgICBvbktleVVwLFxuICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICByZWFkT25seSxcbiAgICAgIHJlbmRlclN1ZmZpeCxcbiAgICAgIHJvd3MsXG4gICAgICBzbG90UHJvcHMgPSB7fSxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICBzdGFydEFkb3JubWVudCxcbiAgICAgIHR5cGUgPSAndGV4dCcsXG4gICAgICB2YWx1ZTogdmFsdWVQcm9wXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHZhbHVlID0gaW5wdXRQcm9wc1Byb3AudmFsdWUgIT0gbnVsbCA/IGlucHV0UHJvcHNQcm9wLnZhbHVlIDogdmFsdWVQcm9wO1xuICBjb25zdCB7XG4gICAgY3VycmVudDogaXNDb250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYodmFsdWUgIT0gbnVsbCk7XG4gIGNvbnN0IGlucHV0UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGNvbnN0IGhhbmRsZUlucHV0UmVmV2FybmluZyA9IFJlYWN0LnVzZUNhbGxiYWNrKGluc3RhbmNlID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLm5vZGVOYW1lICE9PSAnSU5QVVQnICYmICFpbnN0YW5jZS5mb2N1cykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBZb3UgaGF2ZSBwcm92aWRlZCBhIGBpbnB1dENvbXBvbmVudGAgdG8gdGhlIGlucHV0IGNvbXBvbmVudCcsICd0aGF0IGRvZXMgbm90IGNvcnJlY3RseSBoYW5kbGUgdGhlIGByZWZgIHByb3AuJywgJ01ha2Ugc3VyZSB0aGUgYHJlZmAgcHJvcCBpcyBjYWxsZWQgd2l0aCBhIEhUTUxJbnB1dEVsZW1lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBoYW5kbGVJbnB1dFJlZiA9IHVzZUZvcmtSZWYoaW5wdXRSZWYsIGlucHV0UmVmUHJvcCwgaW5wdXRQcm9wc1Byb3AucmVmLCBoYW5kbGVJbnB1dFJlZldhcm5pbmcpO1xuICBjb25zdCBbZm9jdXNlZCwgc2V0Rm9jdXNlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICAgIHJldHVybiBtdWlGb3JtQ29udHJvbC5yZWdpc3RlckVmZmVjdCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LCBbbXVpRm9ybUNvbnRyb2xdKTtcbiAgfVxuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsnY29sb3InLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnaGlkZGVuTGFiZWwnLCAnc2l6ZScsICdyZXF1aXJlZCcsICdmaWxsZWQnXVxuICB9KTtcbiAgZmNzLmZvY3VzZWQgPSBtdWlGb3JtQ29udHJvbCA/IG11aUZvcm1Db250cm9sLmZvY3VzZWQgOiBmb2N1c2VkO1xuXG4gIC8vIFRoZSBibHVyIHdvbid0IGZpcmUgd2hlbiB0aGUgZGlzYWJsZWQgc3RhdGUgaXMgc2V0IG9uIGEgZm9jdXNlZCBpbnB1dC5cbiAgLy8gV2UgbmVlZCB0byBib29rIGtlZXAgdGhlIGZvY3VzZWQgc3RhdGUgbWFudWFsbHkuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFtdWlGb3JtQ29udHJvbCAmJiBkaXNhYmxlZCAmJiBmb2N1c2VkKSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICAgIGlmIChvbkJsdXIpIHtcbiAgICAgICAgb25CbHVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbbXVpRm9ybUNvbnRyb2wsIGRpc2FibGVkLCBmb2N1c2VkLCBvbkJsdXJdKTtcbiAgY29uc3Qgb25GaWxsZWQgPSBtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkZpbGxlZDtcbiAgY29uc3Qgb25FbXB0eSA9IG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRW1wdHk7XG4gIGNvbnN0IGNoZWNrRGlydHkgPSBSZWFjdC51c2VDYWxsYmFjayhvYmogPT4ge1xuICAgIGlmIChpc0ZpbGxlZChvYmopKSB7XG4gICAgICBpZiAob25GaWxsZWQpIHtcbiAgICAgICAgb25GaWxsZWQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9uRW1wdHkpIHtcbiAgICAgIG9uRW1wdHkoKTtcbiAgICB9XG4gIH0sIFtvbkZpbGxlZCwgb25FbXB0eV0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzQ29udHJvbGxlZCkge1xuICAgICAgY2hlY2tEaXJ0eSh7XG4gICAgICAgIHZhbHVlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFt2YWx1ZSwgY2hlY2tEaXJ0eSwgaXNDb250cm9sbGVkXSk7XG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gZXZlbnQgPT4ge1xuICAgIC8vIEZpeCBhIGJ1ZyB3aXRoIElFMTEgd2hlcmUgdGhlIGZvY3VzL2JsdXIgZXZlbnRzIGFyZSB0cmlnZ2VyZWRcbiAgICAvLyB3aGlsZSB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgIGlmIChmY3MuZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkZvY3VzKSB7XG4gICAgICBpbnB1dFByb3BzUHJvcC5vbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRm9jdXMpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uRm9jdXMoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRGb2N1c2VkKHRydWUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlQmx1ciA9IGV2ZW50ID0+IHtcbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoaW5wdXRQcm9wc1Byb3Aub25CbHVyKSB7XG4gICAgICBpbnB1dFByb3BzUHJvcC5vbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25CbHVyKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5vbkJsdXIoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IChldmVudCwgLi4uYXJncykgPT4ge1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZXZlbnQudGFyZ2V0IHx8IGlucHV0UmVmLmN1cnJlbnQ7XG4gICAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBFeHBlY3RlZCB2YWxpZCBpbnB1dCB0YXJnZXQuIERpZCB5b3UgdXNlIGEgY3VzdG9tIFxcYGlucHV0Q29tcG9uZW50XFxgIGFuZCBmb3JnZXQgdG8gZm9yd2FyZCByZWZzPyBTZWUgaHR0cHM6Ly9tdWkuY29tL3IvaW5wdXQtY29tcG9uZW50LXJlZi1pbnRlcmZhY2UgZm9yIG1vcmUgaW5mby5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxKSk7XG4gICAgICB9XG4gICAgICBjaGVja0RpcnR5KHtcbiAgICAgICAgdmFsdWU6IGVsZW1lbnQudmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaW5wdXRQcm9wc1Byb3Aub25DaGFuZ2UpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uQ2hhbmdlKGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9XG5cbiAgICAvLyBQZXJmb3JtIGluIHRoZSB3aWxsVXBkYXRlXG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCwgLi4uYXJncyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIENoZWNrIHRoZSBpbnB1dCBzdGF0ZSBvbiBtb3VudCwgaW4gY2FzZSBpdCB3YXMgZmlsbGVkIGJ5IHRoZSB1c2VyXG4gIC8vIG9yIGF1dG8gZmlsbGVkIGJ5IHRoZSBicm93c2VyIGJlZm9yZSB0aGUgaHlkcmF0aW9uIChmb3IgU1NSKS5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjaGVja0RpcnR5KGlucHV0UmVmLmN1cnJlbnQpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuICBjb25zdCBoYW5kbGVDbGljayA9IGV2ZW50ID0+IHtcbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCAmJiBldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgbGV0IElucHV0Q29tcG9uZW50ID0gaW5wdXRDb21wb25lbnQ7XG4gIGxldCBpbnB1dFByb3BzID0gaW5wdXRQcm9wc1Byb3A7XG4gIGlmIChtdWx0aWxpbmUgJiYgSW5wdXRDb21wb25lbnQgPT09ICdpbnB1dCcpIHtcbiAgICBpZiAocm93cykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKG1pblJvd3MgfHwgbWF4Um93cykge1xuICAgICAgICAgIGNvbnNvbGUud2FybignTVVJOiBZb3UgY2FuIG5vdCB1c2UgdGhlIGBtaW5Sb3dzYCBvciBgbWF4Um93c2AgcHJvcHMgd2hlbiB0aGUgaW5wdXQgYHJvd3NgIHByb3AgaXMgc2V0LicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgICAgIG1pblJvd3M6IHJvd3MsXG4gICAgICAgIG1heFJvd3M6IHJvd3NcbiAgICAgIH0sIGlucHV0UHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgICAgIG1heFJvd3MsXG4gICAgICAgIG1pblJvd3NcbiAgICAgIH0sIGlucHV0UHJvcHMpO1xuICAgIH1cbiAgICBJbnB1dENvbXBvbmVudCA9IFRleHRhcmVhQXV0b3NpemU7XG4gIH1cbiAgY29uc3QgaGFuZGxlQXV0b0ZpbGwgPSBldmVudCA9PiB7XG4gICAgLy8gUHJvdmlkZSBhIGZha2UgdmFsdWUgYXMgQ2hyb21lIG1pZ2h0IG5vdCBsZXQgeW91IGFjY2VzcyBpdCBmb3Igc2VjdXJpdHkgcmVhc29ucy5cbiAgICBjaGVja0RpcnR5KGV2ZW50LmFuaW1hdGlvbk5hbWUgPT09ICdtdWktYXV0by1maWxsLWNhbmNlbCcgPyBpbnB1dFJlZi5jdXJyZW50IDoge1xuICAgICAgdmFsdWU6ICd4J1xuICAgIH0pO1xuICB9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChtdWlGb3JtQ29udHJvbCkge1xuICAgICAgbXVpRm9ybUNvbnRyb2wuc2V0QWRvcm5lZFN0YXJ0KEJvb2xlYW4oc3RhcnRBZG9ybm1lbnQpKTtcbiAgICB9XG4gIH0sIFttdWlGb3JtQ29udHJvbCwgc3RhcnRBZG9ybm1lbnRdKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yOiBmY3MuY29sb3IgfHwgJ3ByaW1hcnknLFxuICAgIGRpc2FibGVkOiBmY3MuZGlzYWJsZWQsXG4gICAgZW5kQWRvcm5tZW50LFxuICAgIGVycm9yOiBmY3MuZXJyb3IsXG4gICAgZm9jdXNlZDogZmNzLmZvY3VzZWQsXG4gICAgZm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBoaWRkZW5MYWJlbDogZmNzLmhpZGRlbkxhYmVsLFxuICAgIG11bHRpbGluZSxcbiAgICBzaXplOiBmY3Muc2l6ZSxcbiAgICBzdGFydEFkb3JubWVudCxcbiAgICB0eXBlXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IFJvb3QgPSBzbG90cy5yb290IHx8IGNvbXBvbmVudHMuUm9vdCB8fCBJbnB1dEJhc2VSb290O1xuICBjb25zdCByb290UHJvcHMgPSBzbG90UHJvcHMucm9vdCB8fCBjb21wb25lbnRzUHJvcHMucm9vdCB8fCB7fTtcbiAgY29uc3QgSW5wdXQgPSBzbG90cy5pbnB1dCB8fCBjb21wb25lbnRzLklucHV0IHx8IElucHV0QmFzZUNvbXBvbmVudDtcbiAgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHt9LCBpbnB1dFByb3BzLCAoX3Nsb3RQcm9wcyRpbnB1dCA9IHNsb3RQcm9wcy5pbnB1dCkgIT0gbnVsbCA/IF9zbG90UHJvcHMkaW5wdXQgOiBjb21wb25lbnRzUHJvcHMuaW5wdXQpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFshZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlcyAmJiBpbnB1dEdsb2JhbFN0eWxlcywgLyojX19QVVJFX18qL19qc3hzKFJvb3QsIF9leHRlbmRzKHt9LCByb290UHJvcHMsICFpc0hvc3RDb21wb25lbnQoUm9vdCkgJiYge1xuICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIHJvb3RQcm9wcy5vd25lclN0YXRlKVxuICAgIH0sIHtcbiAgICAgIHJlZjogcmVmLFxuICAgICAgb25DbGljazogaGFuZGxlQ2xpY2tcbiAgICB9LCBvdGhlciwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgcm9vdFByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lLCByZWFkT25seSAmJiAnTXVpSW5wdXRCYXNlLXJlYWRPbmx5JyksXG4gICAgICBjaGlsZHJlbjogW3N0YXJ0QWRvcm5tZW50LCAvKiNfX1BVUkVfXyovX2pzeChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChJbnB1dCwgX2V4dGVuZHMoe1xuICAgICAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICAgICAgXCJhcmlhLWludmFsaWRcIjogZmNzLmVycm9yLFxuICAgICAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgICAgICAgYXV0b0NvbXBsZXRlOiBhdXRvQ29tcGxldGUsXG4gICAgICAgICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgICAgICAgZGlzYWJsZWQ6IGZjcy5kaXNhYmxlZCxcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgb25BbmltYXRpb25TdGFydDogaGFuZGxlQXV0b0ZpbGwsXG4gICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAgICAgICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgICAgICAgIHJlcXVpcmVkOiBmY3MucmVxdWlyZWQsXG4gICAgICAgICAgcm93czogcm93cyxcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgb25LZXlEb3duOiBvbktleURvd24sXG4gICAgICAgICAgb25LZXlVcDogb25LZXlVcCxcbiAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgIH0sIGlucHV0UHJvcHMsICFpc0hvc3RDb21wb25lbnQoSW5wdXQpICYmIHtcbiAgICAgICAgICBhczogSW5wdXRDb21wb25lbnQsXG4gICAgICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIGlucHV0UHJvcHMub3duZXJTdGF0ZSlcbiAgICAgICAgfSwge1xuICAgICAgICAgIHJlZjogaGFuZGxlSW5wdXRSZWYsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuaW5wdXQsIGlucHV0UHJvcHMuY2xhc3NOYW1lLCByZWFkT25seSAmJiAnTXVpSW5wdXRCYXNlLXJlYWRPbmx5JyksXG4gICAgICAgICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgb25Gb2N1czogaGFuZGxlRm9jdXNcbiAgICAgICAgfSkpXG4gICAgICB9KSwgZW5kQWRvcm5tZW50LCByZW5kZXJTdWZmaXggPyByZW5kZXJTdWZmaXgoX2V4dGVuZHMoe30sIGZjcywge1xuICAgICAgICBzdGFydEFkb3JubWVudFxuICAgICAgfSkpIDogbnVsbF1cbiAgICB9KSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dEJhc2UucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgJ2FyaWEtZGVzY3JpYmVkYnknOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdwcmltYXJ5J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90c2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBJbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdFByb3BzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RQcm9wc2AgcHJvcCBpbnN0ZWFkLCBhcyBgY29tcG9uZW50c1Byb3BzYCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIEdsb2JhbFN0eWxlcyBmb3IgdGhlIGF1dG8tZmlsbCBrZXlmcmFtZXMgd2lsbCBub3QgYmUgaW5qZWN0ZWQvcmVtb3ZlZCBvbiBtb3VudC91bm1vdW50LiBNYWtlIHN1cmUgdG8gaW5qZWN0IHRoZW0gYXQgdGhlIHRvcCBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKiBUaGlzIG9wdGlvbiBpcyBpbnRlbmRlZCB0byBoZWxwIHdpdGggYm9vc3RpbmcgdGhlIGluaXRpYWwgcmVuZGVyaW5nIHBlcmZvcm1hbmNlIGlmIHlvdSBhcmUgbG9hZGluZyBhIGJpZyBhbW91bnQgb2YgSW5wdXQgY29tcG9uZW50cyBhdCBvbmNlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlczogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIGluZGljYXRlIGFuIGVycm9yLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnaW5wdXQnXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgJ25vbmUnYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWF4Um93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1pblJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSBbVGV4dGFyZWFBdXRvc2l6ZV0oL21hdGVyaWFsLXVpL3JlYWN0LXRleHRhcmVhLWF1dG9zaXplLykgZWxlbWVudCBpcyByZW5kZXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGBpbnB1dGAgaXMgYmx1cnJlZC5cbiAgICpcbiAgICogTm90aWNlIHRoYXQgdGhlIGZpcnN0IGFyZ3VtZW50IChldmVudCkgbWlnaHQgYmUgdW5kZWZpbmVkLlxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTFRleHRBcmVhRWxlbWVudCB8IEhUTUxJbnB1dEVsZW1lbnQ+fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBgaW5wdXRgIGRvZXNuJ3Qgc2F0aXNmeSBpdHMgY29uc3RyYWludHMuXG4gICAqL1xuICBvbkludmFsaWQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBgaW5wdXRgIGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByZW5kZXJTdWZmaXg6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIHJlcXVpcmVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydtZWRpdW0nLCAnc21hbGwnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c1Byb3BzYCBwcm9wLCB3aGljaCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYGNvbXBvbmVudHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICByb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICogQGRlZmF1bHQgJ3RleHQnXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBJbnB1dEJhc2U7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuaW1wb3J0IHsgaW5wdXRCYXNlQ2xhc3NlcyB9IGZyb20gJy4uL0lucHV0QmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5wdXRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUlucHV0Jywgc2xvdCk7XG59XG5jb25zdCBpbnB1dENsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgaW5wdXRCYXNlQ2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpSW5wdXQnLCBbJ3Jvb3QnLCAndW5kZXJsaW5lJywgJ2lucHV0J10pKTtcbmV4cG9ydCBkZWZhdWx0IGlucHV0Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkaXNhYmxlVW5kZXJsaW5lXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImZ1bGxXaWR0aFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibXVsdGlsaW5lXCIsIFwic2xvdFByb3BzXCIsIFwic2xvdHNcIiwgXCJ0eXBlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHJlZlR5cGUsIGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IElucHV0QmFzZSBmcm9tICcuLi9JbnB1dEJhc2UnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBpbnB1dENsYXNzZXMsIHsgZ2V0SW5wdXRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2lucHV0Q2xhc3Nlcyc7XG5pbXBvcnQgeyByb290T3ZlcnJpZGVzUmVzb2x2ZXIgYXMgaW5wdXRCYXNlUm9vdE92ZXJyaWRlc1Jlc29sdmVyLCBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIsIElucHV0QmFzZVJvb3QsIElucHV0QmFzZUNvbXBvbmVudCBhcyBJbnB1dEJhc2VJbnB1dCB9IGZyb20gJy4uL0lucHV0QmFzZS9JbnB1dEJhc2UnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlVW5kZXJsaW5lICYmICd1bmRlcmxpbmUnXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJbnB1dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5jb25zdCBJbnB1dFJvb3QgPSBzdHlsZWQoSW5wdXRCYXNlUm9vdCwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpSW5wdXQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFsuLi5pbnB1dEJhc2VSb290T3ZlcnJpZGVzUmVzb2x2ZXIocHJvcHMsIHN0eWxlcyksICFvd25lclN0YXRlLmRpc2FibGVVbmRlcmxpbmUgJiYgc3R5bGVzLnVuZGVybGluZV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGNvbnN0IGxpZ2h0ID0gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnO1xuICBsZXQgYm90dG9tTGluZUNvbG9yID0gbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjQyKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJztcbiAgaWYgKHRoZW1lLnZhcnMpIHtcbiAgICBib3R0b21MaW5lQ29sb3IgPSBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5jb21tb24ub25CYWNrZ3JvdW5kQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMub3BhY2l0eS5pbnB1dFVuZGVybGluZX0pYDtcbiAgfVxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gIH0sIG93bmVyU3RhdGUuZm9ybUNvbnRyb2wgJiYge1xuICAgICdsYWJlbCArICYnOiB7XG4gICAgICBtYXJnaW5Ub3A6IDE2XG4gICAgfVxuICB9LCAhb3duZXJTdGF0ZS5kaXNhYmxlVW5kZXJsaW5lICYmIHtcbiAgICAnJjo6YWZ0ZXInOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAycHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWlufWAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMCknLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG4gICAgfSxcbiAgICBbYCYuJHtpbnB1dENsYXNzZXMuZm9jdXNlZH06YWZ0ZXJgXToge1xuICAgICAgLy8gdHJhbnNsYXRlWCgwKSBpcyBhIHdvcmthcm91bmQgZm9yIFNhZmFyaSB0cmFuc2Zvcm0gc2NhbGUgYnVnXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMzE3NjZcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKSB0cmFuc2xhdGVYKDApJ1xuICAgIH0sXG4gICAgW2AmLiR7aW5wdXRDbGFzc2VzLmVycm9yfWBdOiB7XG4gICAgICAnJjo6YmVmb3JlLCAmOjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9LFxuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHtib3R0b21MaW5lQ29sb3J9YCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRTExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSksXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuICAgIH0sXG4gICAgW2AmOmhvdmVyOm5vdCguJHtpbnB1dENsYXNzZXMuZGlzYWJsZWR9LCAuJHtpbnB1dENsYXNzZXMuZXJyb3J9KTpiZWZvcmVgXToge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMnB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5wcmltYXJ5fWAsXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHtib3R0b21MaW5lQ29sb3J9YFxuICAgICAgfVxuICAgIH0sXG4gICAgW2AmLiR7aW5wdXRDbGFzc2VzLmRpc2FibGVkfTpiZWZvcmVgXToge1xuICAgICAgYm9yZGVyQm90dG9tU3R5bGU6ICdkb3R0ZWQnXG4gICAgfVxuICB9KTtcbn0pO1xuY29uc3QgSW5wdXRJbnB1dCA9IHN0eWxlZChJbnB1dEJhc2VJbnB1dCwge1xuICBuYW1lOiAnTXVpSW5wdXQnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoe30pO1xuY29uc3QgSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbnB1dChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9yZWYsIF9zbG90cyRyb290LCBfcmVmMiwgX3Nsb3RzJGlucHV0O1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlJbnB1dCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGRpc2FibGVVbmRlcmxpbmUsXG4gICAgICBjb21wb25lbnRzID0ge30sXG4gICAgICBjb21wb25lbnRzUHJvcHM6IGNvbXBvbmVudHNQcm9wc1Byb3AsXG4gICAgICBmdWxsV2lkdGggPSBmYWxzZSxcbiAgICAgIGlucHV0Q29tcG9uZW50ID0gJ2lucHV0JyxcbiAgICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgICAgc2xvdFByb3BzLFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIHR5cGUgPSAndGV4dCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKHByb3BzKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICBkaXNhYmxlVW5kZXJsaW5lXG4gIH07XG4gIGNvbnN0IGlucHV0Q29tcG9uZW50c1Byb3BzID0ge1xuICAgIHJvb3Q6IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9XG4gIH07XG4gIGNvbnN0IGNvbXBvbmVudHNQcm9wcyA9IChzbG90UHJvcHMgIT0gbnVsbCA/IHNsb3RQcm9wcyA6IGNvbXBvbmVudHNQcm9wc1Byb3ApID8gZGVlcG1lcmdlKHNsb3RQcm9wcyAhPSBudWxsID8gc2xvdFByb3BzIDogY29tcG9uZW50c1Byb3BzUHJvcCwgaW5wdXRDb21wb25lbnRzUHJvcHMpIDogaW5wdXRDb21wb25lbnRzUHJvcHM7XG4gIGNvbnN0IFJvb3RTbG90ID0gKF9yZWYgPSAoX3Nsb3RzJHJvb3QgPSBzbG90cy5yb290KSAhPSBudWxsID8gX3Nsb3RzJHJvb3QgOiBjb21wb25lbnRzLlJvb3QpICE9IG51bGwgPyBfcmVmIDogSW5wdXRSb290O1xuICBjb25zdCBJbnB1dFNsb3QgPSAoX3JlZjIgPSAoX3Nsb3RzJGlucHV0ID0gc2xvdHMuaW5wdXQpICE9IG51bGwgPyBfc2xvdHMkaW5wdXQgOiBjb21wb25lbnRzLklucHV0KSAhPSBudWxsID8gX3JlZjIgOiBJbnB1dElucHV0O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSW5wdXRCYXNlLCBfZXh0ZW5kcyh7XG4gICAgc2xvdHM6IHtcbiAgICAgIHJvb3Q6IFJvb3RTbG90LFxuICAgICAgaW5wdXQ6IElucHV0U2xvdFxuICAgIH0sXG4gICAgc2xvdFByb3BzOiBjb21wb25lbnRzUHJvcHMsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdwcmltYXJ5J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90c2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBJbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdFByb3BzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RQcm9wc2AgcHJvcCBpbnN0ZWFkLCBhcyBgY29tcG9uZW50c1Byb3BzYCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIGluZGljYXRlIGFuIGVycm9yLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnaW5wdXQnXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdub25lJ2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgW1RleHRhcmVhQXV0b3NpemVdKC9tYXRlcmlhbC11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pIGVsZW1lbnQgaXMgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzUHJvcHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbklucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuaW1wb3J0IHsgaW5wdXRCYXNlQ2xhc3NlcyB9IGZyb20gJy4uL0lucHV0QmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0RmlsbGVkSW5wdXRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUZpbGxlZElucHV0Jywgc2xvdCk7XG59XG5jb25zdCBmaWxsZWRJbnB1dENsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgaW5wdXRCYXNlQ2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpRmlsbGVkSW5wdXQnLCBbJ3Jvb3QnLCAndW5kZXJsaW5lJywgJ2lucHV0J10pKTtcbmV4cG9ydCBkZWZhdWx0IGZpbGxlZElucHV0Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkaXNhYmxlVW5kZXJsaW5lXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImZ1bGxXaWR0aFwiLCBcImhpZGRlbkxhYmVsXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJtdWx0aWxpbmVcIiwgXCJzbG90UHJvcHNcIiwgXCJzbG90c1wiLCBcInR5cGVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZWZUeXBlLCBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgSW5wdXRCYXNlIGZyb20gJy4uL0lucHV0QmFzZSc7XG5pbXBvcnQgc3R5bGVkLCB7IHJvb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IGZpbGxlZElucHV0Q2xhc3NlcywgeyBnZXRGaWxsZWRJbnB1dFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vZmlsbGVkSW5wdXRDbGFzc2VzJztcbmltcG9ydCB7IHJvb3RPdmVycmlkZXNSZXNvbHZlciBhcyBpbnB1dEJhc2VSb290T3ZlcnJpZGVzUmVzb2x2ZXIsIGlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIgYXMgaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlciwgSW5wdXRCYXNlUm9vdCwgSW5wdXRCYXNlQ29tcG9uZW50IGFzIElucHV0QmFzZUlucHV0IH0gZnJvbSAnLi4vSW5wdXRCYXNlL0lucHV0QmFzZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZGlzYWJsZVVuZGVybGluZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgIWRpc2FibGVVbmRlcmxpbmUgJiYgJ3VuZGVybGluZSddLFxuICAgIGlucHV0OiBbJ2lucHV0J11cbiAgfTtcbiAgY29uc3QgY29tcG9zZWRDbGFzc2VzID0gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEZpbGxlZElucHV0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBjbGFzc2VzLCBjb21wb3NlZENsYXNzZXMpO1xufTtcbmNvbnN0IEZpbGxlZElucHV0Um9vdCA9IHN0eWxlZChJbnB1dEJhc2VSb290LCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlGaWxsZWRJbnB1dCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gWy4uLmlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlcihwcm9wcywgc3R5bGVzKSwgIW93bmVyU3RhdGUuZGlzYWJsZVVuZGVybGluZSAmJiBzdHlsZXMudW5kZXJsaW5lXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF9wYWxldHRlO1xuICBjb25zdCBsaWdodCA9IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JztcbiAgY29uc3QgYm90dG9tTGluZUNvbG9yID0gbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjQyKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJztcbiAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjA2KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA5KSc7XG4gIGNvbnN0IGhvdmVyQmFja2dyb3VuZCA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4wOSknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMyknO1xuICBjb25zdCBkaXNhYmxlZEJhY2tncm91bmQgPSBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJztcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuRmlsbGVkSW5wdXQuYmcgOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICBib3JkZXJUb3BSaWdodFJhZGl1czogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICB9KSxcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5GaWxsZWRJbnB1dC5ob3ZlckJnIDogaG92ZXJCYWNrZ3JvdW5kLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLkZpbGxlZElucHV0LmJnIDogYmFja2dyb3VuZENvbG9yXG4gICAgICB9XG4gICAgfSxcbiAgICBbYCYuJHtmaWxsZWRJbnB1dENsYXNzZXMuZm9jdXNlZH1gXToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLkZpbGxlZElucHV0LmJnIDogYmFja2dyb3VuZENvbG9yXG4gICAgfSxcbiAgICBbYCYuJHtmaWxsZWRJbnB1dENsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5GaWxsZWRJbnB1dC5kaXNhYmxlZEJnIDogZGlzYWJsZWRCYWNrZ3JvdW5kXG4gICAgfVxuICB9LCAhb3duZXJTdGF0ZS5kaXNhYmxlVW5kZXJsaW5lICYmIHtcbiAgICAnJjo6YWZ0ZXInOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAycHggc29saWQgJHsoX3BhbGV0dGUgPSAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yIHx8ICdwcmltYXJ5J10pID09IG51bGwgPyB2b2lkIDAgOiBfcGFsZXR0ZS5tYWlufWAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMCknLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG4gICAgfSxcbiAgICBbYCYuJHtmaWxsZWRJbnB1dENsYXNzZXMuZm9jdXNlZH06YWZ0ZXJgXToge1xuICAgICAgLy8gdHJhbnNsYXRlWCgwKSBpcyBhIHdvcmthcm91bmQgZm9yIFNhZmFyaSB0cmFuc2Zvcm0gc2NhbGUgYnVnXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMzE3NjZcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKSB0cmFuc2xhdGVYKDApJ1xuICAgIH0sXG4gICAgW2AmLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmVycm9yfWBdOiB7XG4gICAgICAnJjo6YmVmb3JlLCAmOjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9LFxuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHt0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuY29tbW9uLm9uQmFja2dyb3VuZENoYW5uZWx9IC8gJHt0aGVtZS52YXJzLm9wYWNpdHkuaW5wdXRVbmRlcmxpbmV9KWAgOiBib3R0b21MaW5lQ29sb3J9YCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRTExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSksXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuICAgIH0sXG4gICAgW2AmOmhvdmVyOm5vdCguJHtmaWxsZWRJbnB1dENsYXNzZXMuZGlzYWJsZWR9LCAuJHtmaWxsZWRJbnB1dENsYXNzZXMuZXJyb3J9KTpiZWZvcmVgXToge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5wcmltYXJ5fWBcbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5kaXNhYmxlZH06YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiB7XG4gICAgcGFkZGluZ0xlZnQ6IDEyXG4gIH0sIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHtcbiAgICBwYWRkaW5nUmlnaHQ6IDEyXG4gIH0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIF9leHRlbmRzKHtcbiAgICBwYWRkaW5nOiAnMjVweCAxMnB4IDhweCdcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBwYWRkaW5nVG9wOiAyMSxcbiAgICBwYWRkaW5nQm90dG9tOiA0XG4gIH0sIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYge1xuICAgIHBhZGRpbmdUb3A6IDE2LFxuICAgIHBhZGRpbmdCb3R0b206IDE3XG4gIH0sIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBwYWRkaW5nVG9wOiA4LFxuICAgIHBhZGRpbmdCb3R0b206IDlcbiAgfSkpO1xufSk7XG5jb25zdCBGaWxsZWRJbnB1dElucHV0ID0gc3R5bGVkKElucHV0QmFzZUlucHV0LCB7XG4gIG5hbWU6ICdNdWlGaWxsZWRJbnB1dCcsXG4gIHNsb3Q6ICdJbnB1dCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiBpbnB1dEJhc2VJbnB1dE92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwYWRkaW5nVG9wOiAyNSxcbiAgcGFkZGluZ1JpZ2h0OiAxMixcbiAgcGFkZGluZ0JvdHRvbTogOCxcbiAgcGFkZGluZ0xlZnQ6IDEyXG59LCAhdGhlbWUudmFycyAmJiB7XG4gICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgV2Via2l0Qm94U2hhZG93OiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBudWxsIDogJzAgMCAwIDEwMHB4ICMyNjY3OTggaW5zZXQnLFxuICAgIFdlYmtpdFRleHRGaWxsQ29sb3I6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnI2ZmZicsXG4gICAgY2FyZXRDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbnVsbCA6ICcjZmZmJyxcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiAnaW5oZXJpdCcsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6ICdpbmhlcml0J1xuICB9XG59LCB0aGVtZS52YXJzICYmIHtcbiAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiAnaW5oZXJpdCcsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6ICdpbmhlcml0J1xuICB9LFxuICBbdGhlbWUuZ2V0Q29sb3JTY2hlbWVTZWxlY3RvcignZGFyaycpXToge1xuICAgICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgICBXZWJraXRCb3hTaGFkb3c6ICcwIDAgMCAxMDBweCAjMjY2Nzk4IGluc2V0JyxcbiAgICAgIFdlYmtpdFRleHRGaWxsQ29sb3I6ICcjZmZmJyxcbiAgICAgIGNhcmV0Q29sb3I6ICcjZmZmJ1xuICAgIH1cbiAgfVxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZ1RvcDogMjEsXG4gIHBhZGRpbmdCb3R0b206IDRcbn0sIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYge1xuICBwYWRkaW5nVG9wOiAxNixcbiAgcGFkZGluZ0JvdHRvbTogMTdcbn0sIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYge1xuICBwYWRkaW5nTGVmdDogMFxufSwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYge1xuICBwYWRkaW5nUmlnaHQ6IDBcbn0sIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZ1RvcDogOCxcbiAgcGFkZGluZ0JvdHRvbTogOVxufSwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYge1xuICBwYWRkaW5nVG9wOiAwLFxuICBwYWRkaW5nQm90dG9tOiAwLFxuICBwYWRkaW5nTGVmdDogMCxcbiAgcGFkZGluZ1JpZ2h0OiAwXG59KSk7XG5jb25zdCBGaWxsZWRJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZpbGxlZElucHV0KGluUHJvcHMsIHJlZikge1xuICB2YXIgX3JlZiwgX3Nsb3RzJHJvb3QsIF9yZWYyLCBfc2xvdHMkaW5wdXQ7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUZpbGxlZElucHV0J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgY29tcG9uZW50c1Byb3BzOiBjb21wb25lbnRzUHJvcHNQcm9wLFxuICAgICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgICAvLyBkZWNsYXJlIGhlcmUgdG8gcHJldmVudCBzcHJlYWRpbmcgdG8gRE9NXG4gICAgICBpbnB1dENvbXBvbmVudCA9ICdpbnB1dCcsXG4gICAgICBtdWx0aWxpbmUgPSBmYWxzZSxcbiAgICAgIHNsb3RQcm9wcyxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICB0eXBlID0gJ3RleHQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQsXG4gICAgbXVsdGlsaW5lLFxuICAgIHR5cGVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhwcm9wcyk7XG4gIGNvbnN0IGZpbGxlZElucHV0Q29tcG9uZW50c1Byb3BzID0ge1xuICAgIHJvb3Q6IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9LFxuICAgIGlucHV0OiB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfVxuICB9O1xuICBjb25zdCBjb21wb25lbnRzUHJvcHMgPSAoc2xvdFByb3BzICE9IG51bGwgPyBzbG90UHJvcHMgOiBjb21wb25lbnRzUHJvcHNQcm9wKSA/IGRlZXBtZXJnZShmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcywgc2xvdFByb3BzICE9IG51bGwgPyBzbG90UHJvcHMgOiBjb21wb25lbnRzUHJvcHNQcm9wKSA6IGZpbGxlZElucHV0Q29tcG9uZW50c1Byb3BzO1xuICBjb25zdCBSb290U2xvdCA9IChfcmVmID0gKF9zbG90cyRyb290ID0gc2xvdHMucm9vdCkgIT0gbnVsbCA/IF9zbG90cyRyb290IDogY29tcG9uZW50cy5Sb290KSAhPSBudWxsID8gX3JlZiA6IEZpbGxlZElucHV0Um9vdDtcbiAgY29uc3QgSW5wdXRTbG90ID0gKF9yZWYyID0gKF9zbG90cyRpbnB1dCA9IHNsb3RzLmlucHV0KSAhPSBudWxsID8gX3Nsb3RzJGlucHV0IDogY29tcG9uZW50cy5JbnB1dCkgIT0gbnVsbCA/IF9yZWYyIDogRmlsbGVkSW5wdXRJbnB1dDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIHNsb3RzOiB7XG4gICAgICByb290OiBSb290U2xvdCxcbiAgICAgIGlucHV0OiBJbnB1dFNsb3RcbiAgICB9LFxuICAgIGNvbXBvbmVudHNQcm9wczogY29tcG9uZW50c1Byb3BzLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBtdWx0aWxpbmU6IG11bHRpbGluZSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyLCB7XG4gICAgY2xhc3NlczogY2xhc3Nlc1xuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZpbGxlZElucHV0LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAncHJpbWFyeSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdHNgIHByb3AgaW5zdGVhZC5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgSW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICBSb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZXh0cmEgcHJvcHMgZm9yIHRoZSBzbG90IGNvbXBvbmVudHMuXG4gICAqIFlvdSBjYW4gb3ZlcnJpZGUgdGhlIGV4aXN0aW5nIHByb3BzIG9yIGFkZCBuZXcgb25lcy5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RQcm9wc2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90UHJvcHNgIHByb3AgaW5zdGVhZCwgYXMgYGNvbXBvbmVudHNQcm9wc2Agd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzUHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcm9vdDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBub3QgaGF2ZSBhbiB1bmRlcmxpbmUuXG4gICAqL1xuICBkaXNhYmxlVW5kZXJsaW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIGhpZGRlbi5cbiAgICogVGhpcyBpcyB1c2VkIHRvIGluY3JlYXNlIGRlbnNpdHkgZm9yIGEgYEZpbGxlZElucHV0YC5cbiAgICogQmUgc3VyZSB0byBhZGQgYGFyaWEtbGFiZWxgIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBoaWRkZW5MYWJlbDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnaW5wdXQnXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdub25lJ2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgW1RleHRhcmVhQXV0b3NpemVdKC9tYXRlcmlhbC11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pIGVsZW1lbnQgaXMgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzUHJvcHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbkZpbGxlZElucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgRmlsbGVkSW5wdXQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xudmFyIF9zcGFuO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwibGFiZWxcIiwgXCJub3RjaGVkXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgTm90Y2hlZE91dGxpbmVSb290ID0gc3R5bGVkKCdmaWVsZHNldCcsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHJvb3RTaG91bGRGb3J3YXJkUHJvcFxufSkoe1xuICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGJvdHRvbTogMCxcbiAgcmlnaHQ6IDAsXG4gIHRvcDogLTUsXG4gIGxlZnQ6IDAsXG4gIG1hcmdpbjogMCxcbiAgcGFkZGluZzogJzAgOHB4JyxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gIGJvcmRlcldpZHRoOiAxLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIG1pbldpZHRoOiAnMCUnXG59KTtcbmNvbnN0IE5vdGNoZWRPdXRsaW5lTGVnZW5kID0gc3R5bGVkKCdsZWdlbmQnLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiByb290U2hvdWxkRm9yd2FyZFByb3Bcbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGZsb2F0OiAndW5zZXQnLFxuICAvLyBGaXggY29uZmxpY3Qgd2l0aCBib290c3RyYXBcbiAgd2lkdGg6ICdhdXRvJyxcbiAgLy8gRml4IGNvbmZsaWN0IHdpdGggYm9vdHN0cmFwXG4gIG92ZXJmbG93OiAnaGlkZGVuJ1xufSwgIW93bmVyU3RhdGUud2l0aExhYmVsICYmIHtcbiAgcGFkZGluZzogMCxcbiAgbGluZUhlaWdodDogJzExcHgnLFxuICAvLyBzeW5jIHdpdGggYGhlaWdodGAgaW4gYGxlZ2VuZGAgc3R5bGVzXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnd2lkdGgnLCB7XG4gICAgZHVyYXRpb246IDE1MCxcbiAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gIH0pXG59LCBvd25lclN0YXRlLndpdGhMYWJlbCAmJiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdibG9jaycsXG4gIC8vIEZpeCBjb25mbGljdCB3aXRoIG5vcm1hbGl6ZS5jc3MgYW5kIHNhbml0aXplLmNzc1xuICBwYWRkaW5nOiAwLFxuICBoZWlnaHQ6IDExLFxuICAvLyBzeW5jIHdpdGggYGxpbmVIZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICBmb250U2l6ZTogJzAuNzVlbScsXG4gIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICBtYXhXaWR0aDogMC4wMSxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdtYXgtd2lkdGgnLCB7XG4gICAgZHVyYXRpb246IDUwLFxuICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgfSksXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAnJiA+IHNwYW4nOiB7XG4gICAgcGFkZGluZ0xlZnQ6IDUsXG4gICAgcGFkZGluZ1JpZ2h0OiA1LFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIG9wYWNpdHk6IDAsXG4gICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnXG4gIH1cbn0sIG93bmVyU3RhdGUubm90Y2hlZCAmJiB7XG4gIG1heFdpZHRoOiAnMTAwJScsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgIGR1cmF0aW9uOiAxMDAsXG4gICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dCxcbiAgICBkZWxheTogNTBcbiAgfSlcbn0pKSk7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTm90Y2hlZE91dGxpbmUocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgbGFiZWwsXG4gICAgICBub3RjaGVkXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHdpdGhMYWJlbCA9IGxhYmVsICE9IG51bGwgJiYgbGFiZWwgIT09ICcnO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgbm90Y2hlZCxcbiAgICB3aXRoTGFiZWxcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChOb3RjaGVkT3V0bGluZVJvb3QsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChOb3RjaGVkT3V0bGluZUxlZ2VuZCwge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiB3aXRoTGFiZWwgPyAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgICAgICBjaGlsZHJlbjogbGFiZWxcbiAgICAgIH0pIDogLy8gbm90cmFuc2xhdGUgbmVlZGVkIHdoaWxlIEdvb2dsZSBUcmFuc2xhdGUgd2lsbCBub3QgZml4IHplcm8td2lkdGggc3BhY2UgaXNzdWVcbiAgICAgIF9zcGFuIHx8IChfc3BhbiA9IC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJub3RyYW5zbGF0ZVwiLFxuICAgICAgICBjaGlsZHJlbjogXCJcXHUyMDBCXCJcbiAgICAgIH0pKVxuICAgIH0pXG4gIH0pKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE5vdGNoZWRPdXRsaW5lLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBvdXRsaW5lIGlzIG5vdGNoZWQgdG8gYWNjb21tb2RhdGUgdGhlIGxhYmVsLlxuICAgKi9cbiAgbm90Y2hlZDogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmltcG9ydCB7IGlucHV0QmFzZUNsYXNzZXMgfSBmcm9tICcuLi9JbnB1dEJhc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE91dGxpbmVkSW5wdXRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aU91dGxpbmVkSW5wdXQnLCBzbG90KTtcbn1cbmNvbnN0IG91dGxpbmVkSW5wdXRDbGFzc2VzID0gX2V4dGVuZHMoe30sIGlucHV0QmFzZUNsYXNzZXMsIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aU91dGxpbmVkSW5wdXQnLCBbJ3Jvb3QnLCAnbm90Y2hlZE91dGxpbmUnLCAnaW5wdXQnXSkpO1xuZXhwb3J0IGRlZmF1bHQgb3V0bGluZWRJbnB1dENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY29tcG9uZW50c1wiLCBcImZ1bGxXaWR0aFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibGFiZWxcIiwgXCJtdWx0aWxpbmVcIiwgXCJub3RjaGVkXCIsIFwic2xvdHNcIiwgXCJ0eXBlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBOb3RjaGVkT3V0bGluZSBmcm9tICcuL05vdGNoZWRPdXRsaW5lJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgb3V0bGluZWRJbnB1dENsYXNzZXMsIHsgZ2V0T3V0bGluZWRJbnB1dFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vb3V0bGluZWRJbnB1dENsYXNzZXMnO1xuaW1wb3J0IElucHV0QmFzZSwgeyByb290T3ZlcnJpZGVzUmVzb2x2ZXIgYXMgaW5wdXRCYXNlUm9vdE92ZXJyaWRlc1Jlc29sdmVyLCBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIsIElucHV0QmFzZVJvb3QsIElucHV0QmFzZUNvbXBvbmVudCBhcyBJbnB1dEJhc2VJbnB1dCB9IGZyb20gJy4uL0lucHV0QmFzZS9JbnB1dEJhc2UnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXSxcbiAgICBub3RjaGVkT3V0bGluZTogWydub3RjaGVkT3V0bGluZSddLFxuICAgIGlucHV0OiBbJ2lucHV0J11cbiAgfTtcbiAgY29uc3QgY29tcG9zZWRDbGFzc2VzID0gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldE91dGxpbmVkSW5wdXRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VkQ2xhc3Nlcyk7XG59O1xuY29uc3QgT3V0bGluZWRJbnB1dFJvb3QgPSBzdHlsZWQoSW5wdXRCYXNlUm9vdCwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpT3V0bGluZWRJbnB1dCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgYm9yZGVyQ29sb3IgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKSc7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgYm9yZGVyUmFkaXVzOiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgIFtgJjpob3ZlciAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBbYCY6aG92ZXIgLiR7b3V0bGluZWRJbnB1dENsYXNzZXMubm90Y2hlZE91dGxpbmV9YF06IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5jb21tb24ub25CYWNrZ3JvdW5kQ2hhbm5lbH0gLyAwLjIzKWAgOiBib3JkZXJDb2xvclxuICAgICAgfVxuICAgIH0sXG4gICAgW2AmLiR7b3V0bGluZWRJbnB1dENsYXNzZXMuZm9jdXNlZH0gLiR7b3V0bGluZWRJbnB1dENsYXNzZXMubm90Y2hlZE91dGxpbmV9YF06IHtcbiAgICAgIGJvcmRlckNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLFxuICAgICAgYm9yZGVyV2lkdGg6IDJcbiAgICB9LFxuICAgIFtgJi4ke291dGxpbmVkSW5wdXRDbGFzc2VzLmVycm9yfSAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuICAgIFtgJi4ke291dGxpbmVkSW5wdXRDbGFzc2VzLmRpc2FibGVkfSAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiB7XG4gICAgcGFkZGluZ0xlZnQ6IDE0XG4gIH0sIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHtcbiAgICBwYWRkaW5nUmlnaHQ6IDE0XG4gIH0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIF9leHRlbmRzKHtcbiAgICBwYWRkaW5nOiAnMTYuNXB4IDE0cHgnXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZzogJzguNXB4IDE0cHgnXG4gIH0pKTtcbn0pO1xuY29uc3QgTm90Y2hlZE91dGxpbmVSb290ID0gc3R5bGVkKE5vdGNoZWRPdXRsaW5lLCB7XG4gIG5hbWU6ICdNdWlPdXRsaW5lZElucHV0JyxcbiAgc2xvdDogJ05vdGNoZWRPdXRsaW5lJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubm90Y2hlZE91dGxpbmVcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiB7XG4gIGNvbnN0IGJvcmRlckNvbG9yID0gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknO1xuICByZXR1cm4ge1xuICAgIGJvcmRlckNvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuY29tbW9uLm9uQmFja2dyb3VuZENoYW5uZWx9IC8gMC4yMylgIDogYm9yZGVyQ29sb3JcbiAgfTtcbn0pO1xuY29uc3QgT3V0bGluZWRJbnB1dElucHV0ID0gc3R5bGVkKElucHV0QmFzZUlucHV0LCB7XG4gIG5hbWU6ICdNdWlPdXRsaW5lZElucHV0JyxcbiAgc2xvdDogJ0lucHV0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHBhZGRpbmc6ICcxNi41cHggMTRweCdcbn0sICF0aGVtZS52YXJzICYmIHtcbiAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICBXZWJraXRCb3hTaGFkb3c6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcsXG4gICAgV2Via2l0VGV4dEZpbGxDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbnVsbCA6ICcjZmZmJyxcbiAgICBjYXJldENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBudWxsIDogJyNmZmYnLFxuICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG4gIH1cbn0sIHRoZW1lLnZhcnMgJiYge1xuICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG4gIH0sXG4gIFt0aGVtZS5nZXRDb2xvclNjaGVtZVNlbGVjdG9yKCdkYXJrJyldOiB7XG4gICAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICAgIFdlYmtpdEJveFNoYWRvdzogJzAgMCAwIDEwMHB4ICMyNjY3OTggaW5zZXQnLFxuICAgICAgV2Via2l0VGV4dEZpbGxDb2xvcjogJyNmZmYnLFxuICAgICAgY2FyZXRDb2xvcjogJyNmZmYnXG4gICAgfVxuICB9XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBwYWRkaW5nOiAnOC41cHggMTRweCdcbn0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHtcbiAgcGFkZGluZzogMFxufSwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiB7XG4gIHBhZGRpbmdMZWZ0OiAwXG59LCBvd25lclN0YXRlLmVuZEFkb3JubWVudCAmJiB7XG4gIHBhZGRpbmdSaWdodDogMFxufSkpO1xuY29uc3QgT3V0bGluZWRJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE91dGxpbmVkSW5wdXQoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfcmVmLCBfc2xvdHMkcm9vdCwgX3JlZjIsIF9zbG90cyRpbnB1dCwgX1JlYWN0JEZyYWdtZW50O1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlPdXRsaW5lZElucHV0J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgICBpbnB1dENvbXBvbmVudCA9ICdpbnB1dCcsXG4gICAgICBsYWJlbCxcbiAgICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgICAgbm90Y2hlZCxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICB0eXBlID0gJ3RleHQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhwcm9wcyk7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ2NvbG9yJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZvY3VzZWQnLCAnaGlkZGVuTGFiZWwnLCAnc2l6ZScsICdyZXF1aXJlZCddXG4gIH0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3I6IGZjcy5jb2xvciB8fCAncHJpbWFyeScsXG4gICAgZGlzYWJsZWQ6IGZjcy5kaXNhYmxlZCxcbiAgICBlcnJvcjogZmNzLmVycm9yLFxuICAgIGZvY3VzZWQ6IGZjcy5mb2N1c2VkLFxuICAgIGZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBmdWxsV2lkdGgsXG4gICAgaGlkZGVuTGFiZWw6IGZjcy5oaWRkZW5MYWJlbCxcbiAgICBtdWx0aWxpbmUsXG4gICAgc2l6ZTogZmNzLnNpemUsXG4gICAgdHlwZVxuICB9KTtcbiAgY29uc3QgUm9vdFNsb3QgPSAoX3JlZiA9IChfc2xvdHMkcm9vdCA9IHNsb3RzLnJvb3QpICE9IG51bGwgPyBfc2xvdHMkcm9vdCA6IGNvbXBvbmVudHMuUm9vdCkgIT0gbnVsbCA/IF9yZWYgOiBPdXRsaW5lZElucHV0Um9vdDtcbiAgY29uc3QgSW5wdXRTbG90ID0gKF9yZWYyID0gKF9zbG90cyRpbnB1dCA9IHNsb3RzLmlucHV0KSAhPSBudWxsID8gX3Nsb3RzJGlucHV0IDogY29tcG9uZW50cy5JbnB1dCkgIT0gbnVsbCA/IF9yZWYyIDogT3V0bGluZWRJbnB1dElucHV0O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSW5wdXRCYXNlLCBfZXh0ZW5kcyh7XG4gICAgc2xvdHM6IHtcbiAgICAgIHJvb3Q6IFJvb3RTbG90LFxuICAgICAgaW5wdXQ6IElucHV0U2xvdFxuICAgIH0sXG4gICAgcmVuZGVyU3VmZml4OiBzdGF0ZSA9PiAvKiNfX1BVUkVfXyovX2pzeChOb3RjaGVkT3V0bGluZVJvb3QsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubm90Y2hlZE91dGxpbmUsXG4gICAgICBsYWJlbDogbGFiZWwgIT0gbnVsbCAmJiBsYWJlbCAhPT0gJycgJiYgZmNzLnJlcXVpcmVkID8gX1JlYWN0JEZyYWdtZW50IHx8IChfUmVhY3QkRnJhZ21lbnQgPSAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgICAgY2hpbGRyZW46IFtsYWJlbCwgXCJcXHUyMDA5XCIsICcqJ11cbiAgICAgIH0pKSA6IGxhYmVsLFxuICAgICAgbm90Y2hlZDogdHlwZW9mIG5vdGNoZWQgIT09ICd1bmRlZmluZWQnID8gbm90Y2hlZCA6IEJvb2xlYW4oc3RhdGUuc3RhcnRBZG9ybm1lbnQgfHwgc3RhdGUuZmlsbGVkIHx8IHN0YXRlLmZvY3VzZWQpXG4gICAgfSksXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBfZXh0ZW5kcyh7fSwgY2xhc3Nlcywge1xuICAgICAgbm90Y2hlZE91dGxpbmU6IG51bGxcbiAgICB9KVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE91dGxpbmVkSW5wdXQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdwcmltYXJ5J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90c2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBJbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2lucHV0J1xuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogVGhlIGxhYmVsIG9mIHRoZSBgaW5wdXRgLiBJdCBpcyBvbmx5IHVzZWQgZm9yIGxheW91dC4gVGhlIGFjdHVhbCBsYWJlbGxpbmdcbiAgICogaXMgaGFuZGxlZCBieSBgSW5wdXRMYWJlbGAuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdub25lJ2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgW1RleHRhcmVhQXV0b3NpemVdKC9tYXRlcmlhbC11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pIGVsZW1lbnQgaXMgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBvdXRsaW5lIGlzIG5vdGNoZWQgdG8gYWNjb21tb2RhdGUgdGhlIGxhYmVsLlxuICAgKi9cbiAgbm90Y2hlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYGNvbXBvbmVudHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICByb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICogQGRlZmF1bHQgJ3RleHQnXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5PdXRsaW5lZElucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgT3V0bGluZWRJbnB1dDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1MYWJlbFV0aWxpdHlDbGFzc2VzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlGb3JtTGFiZWwnLCBzbG90KTtcbn1cbmNvbnN0IGZvcm1MYWJlbENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlGb3JtTGFiZWwnLCBbJ3Jvb3QnLCAnY29sb3JTZWNvbmRhcnknLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmaWxsZWQnLCAncmVxdWlyZWQnLCAnYXN0ZXJpc2snXSk7XG5leHBvcnQgZGVmYXVsdCBmb3JtTGFiZWxDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZmlsbGVkXCIsIFwiZm9jdXNlZFwiLCBcInJlcXVpcmVkXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IGZvcm1MYWJlbENsYXNzZXMsIHsgZ2V0Rm9ybUxhYmVsVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL2Zvcm1MYWJlbENsYXNzZXMnO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgY29sb3IsXG4gICAgZm9jdXNlZCxcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBmaWxsZWQsXG4gICAgcmVxdWlyZWRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZXJyb3IgJiYgJ2Vycm9yJywgZmlsbGVkICYmICdmaWxsZWQnLCBmb2N1c2VkICYmICdmb2N1c2VkJywgcmVxdWlyZWQgJiYgJ3JlcXVpcmVkJ10sXG4gICAgYXN0ZXJpc2s6IFsnYXN0ZXJpc2snLCBlcnJvciAmJiAnZXJyb3InXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEZvcm1MYWJlbFV0aWxpdHlDbGFzc2VzLCBjbGFzc2VzKTtcbn07XG5leHBvcnQgY29uc3QgRm9ybUxhYmVsUm9vdCA9IHN0eWxlZCgnbGFiZWwnLCB7XG4gIG5hbWU6ICdNdWlGb3JtTGFiZWwnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAoe1xuICAgIG93bmVyU3RhdGVcbiAgfSwgc3R5bGVzKSA9PiB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ3NlY29uZGFyeScgJiYgc3R5bGVzLmNvbG9yU2Vjb25kYXJ5LCBvd25lclN0YXRlLmZpbGxlZCAmJiBzdHlsZXMuZmlsbGVkKTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG59LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gIGxpbmVIZWlnaHQ6ICcxLjQzNzVlbScsXG4gIHBhZGRpbmc6IDAsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBbYCYuJHtmb3JtTGFiZWxDbGFzc2VzLmZvY3VzZWR9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICB9LFxuICBbYCYuJHtmb3JtTGFiZWxDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgfSxcbiAgW2AmLiR7Zm9ybUxhYmVsQ2xhc3Nlcy5lcnJvcn1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5lcnJvci5tYWluXG4gIH1cbn0pKTtcbmNvbnN0IEFzdGVyaXNrQ29tcG9uZW50ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpRm9ybUxhYmVsJyxcbiAgc2xvdDogJ0FzdGVyaXNrJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuYXN0ZXJpc2tcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBbYCYuJHtmb3JtTGFiZWxDbGFzc2VzLmVycm9yfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmVycm9yLm1haW5cbiAgfVxufSkpO1xuY29uc3QgRm9ybUxhYmVsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUxhYmVsKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlGb3JtTGFiZWwnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdsYWJlbCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsnY29sb3InLCAncmVxdWlyZWQnLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmaWxsZWQnXVxuICB9KTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yOiBmY3MuY29sb3IgfHwgJ3ByaW1hcnknLFxuICAgIGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgIGVycm9yOiBmY3MuZXJyb3IsXG4gICAgZmlsbGVkOiBmY3MuZmlsbGVkLFxuICAgIGZvY3VzZWQ6IGZjcy5mb2N1c2VkLFxuICAgIHJlcXVpcmVkOiBmY3MucmVxdWlyZWRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhGb3JtTGFiZWxSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuLCBmY3MucmVxdWlyZWQgJiYgLyojX19QVVJFX18qL19qc3hzKEFzdGVyaXNrQ29tcG9uZW50LCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmFzdGVyaXNrLFxuICAgICAgY2hpbGRyZW46IFtcIlxcdTIwMDlcIiwgJyonXVxuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1MYWJlbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydlcnJvcicsICdpbmZvJywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgdXNlIGZpbGxlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZpbGxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCBvZiB0aGlzIGxhYmVsIGlzIGZvY3VzZWQgKHVzZWQgYnkgYEZvcm1Hcm91cGAgY29tcG9uZW50cykuXG4gICAqL1xuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgYGlucHV0YCBpcyByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEZvcm1MYWJlbDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0TGFiZWxVdGlsaXR5Q2xhc3NlcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpSW5wdXRMYWJlbCcsIHNsb3QpO1xufVxuY29uc3QgaW5wdXRMYWJlbENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlJbnB1dExhYmVsJywgWydyb290JywgJ2ZvY3VzZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAncmVxdWlyZWQnLCAnYXN0ZXJpc2snLCAnZm9ybUNvbnRyb2wnLCAnc2l6ZVNtYWxsJywgJ3NocmluaycsICdhbmltYXRlZCcsICdzdGFuZGFyZCcsICdmaWxsZWQnLCAnb3V0bGluZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBpbnB1dExhYmVsQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkaXNhYmxlQW5pbWF0aW9uXCIsIFwibWFyZ2luXCIsIFwic2hyaW5rXCIsIFwidmFyaWFudFwiLCBcImNsYXNzTmFtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBGb3JtTGFiZWwsIHsgZm9ybUxhYmVsQ2xhc3NlcyB9IGZyb20gJy4uL0Zvcm1MYWJlbCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRJbnB1dExhYmVsVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL2lucHV0TGFiZWxDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBmb3JtQ29udHJvbCxcbiAgICBzaXplLFxuICAgIHNocmluayxcbiAgICBkaXNhYmxlQW5pbWF0aW9uLFxuICAgIHZhcmlhbnQsXG4gICAgcmVxdWlyZWRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGZvcm1Db250cm9sICYmICdmb3JtQ29udHJvbCcsICFkaXNhYmxlQW5pbWF0aW9uICYmICdhbmltYXRlZCcsIHNocmluayAmJiAnc2hyaW5rJywgc2l6ZSAmJiBzaXplICE9PSAnbm9ybWFsJyAmJiBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCB2YXJpYW50XSxcbiAgICBhc3RlcmlzazogW3JlcXVpcmVkICYmICdhc3RlcmlzayddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJbnB1dExhYmVsVXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VkQ2xhc3Nlcyk7XG59O1xuY29uc3QgSW5wdXRMYWJlbFJvb3QgPSBzdHlsZWQoRm9ybUxhYmVsLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlJbnB1dExhYmVsJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbe1xuICAgICAgW2AmIC4ke2Zvcm1MYWJlbENsYXNzZXMuYXN0ZXJpc2t9YF06IHN0eWxlcy5hc3Rlcmlza1xuICAgIH0sIHN0eWxlcy5yb290LCBvd25lclN0YXRlLmZvcm1Db250cm9sICYmIHN0eWxlcy5mb3JtQ29udHJvbCwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHN0eWxlcy5zaXplU21hbGwsIG93bmVyU3RhdGUuc2hyaW5rICYmIHN0eWxlcy5zaHJpbmssICFvd25lclN0YXRlLmRpc2FibGVBbmltYXRpb24gJiYgc3R5bGVzLmFuaW1hdGVkLCBvd25lclN0YXRlLmZvY3VzZWQgJiYgc3R5bGVzLmZvY3VzZWQsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgdHJhbnNmb3JtT3JpZ2luOiAndG9wIGxlZnQnLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gIG1heFdpZHRoOiAnMTAwJSdcbn0sIG93bmVyU3RhdGUuZm9ybUNvbnRyb2wgJiYge1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogMCxcbiAgdG9wOiAwLFxuICAvLyBzbGlnaHQgYWx0ZXJhdGlvbiB0byBzcGVjIHNwYWNpbmcgdG8gbWF0Y2ggdmlzdWFsIHNwZWMgcmVzdWx0XG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAyMHB4KSBzY2FsZSgxKSdcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIC8vIENvbXBlbnNhdGlvbiBmb3IgdGhlIGBJbnB1dC5pbnB1dFNpemVTbWFsbGAgc3R5bGUuXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAxN3B4KSBzY2FsZSgxKSdcbn0sIG93bmVyU3RhdGUuc2hyaW5rICYmIHtcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDAsIC0xLjVweCkgc2NhbGUoMC43NSknLFxuICB0cmFuc2Zvcm1PcmlnaW46ICd0b3AgbGVmdCcsXG4gIG1heFdpZHRoOiAnMTMzJSdcbn0sICFvd25lclN0YXRlLmRpc2FibGVBbmltYXRpb24gJiYge1xuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydjb2xvcicsICd0cmFuc2Zvcm0nLCAnbWF4LXdpZHRoJ10sIHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gIH0pXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdmaWxsZWQnICYmIF9leHRlbmRzKHtcbiAgLy8gQ2hyb21lJ3MgYXV0b2ZpbGwgZmVhdHVyZSBnaXZlcyB0aGUgaW5wdXQgZmllbGQgYSB5ZWxsb3cgYmFja2dyb3VuZC5cbiAgLy8gU2luY2UgdGhlIGlucHV0IGZpZWxkIGlzIGJlaGluZCB0aGUgbGFiZWwgaW4gdGhlIEhUTUwgdHJlZSxcbiAgLy8gdGhlIGlucHV0IGZpZWxkIGlzIGRyYXduIGxhc3QgYW5kIGhpZGVzIHRoZSBsYWJlbCB3aXRoIGFuIG9wYXF1ZSBiYWNrZ3JvdW5kIGNvbG9yLlxuICAvLyB6SW5kZXg6IDEgd2lsbCByYWlzZSB0aGUgbGFiZWwgYWJvdmUgb3BhcXVlIGJhY2tncm91bmQtY29sb3JzIG9mIGlucHV0LlxuICB6SW5kZXg6IDEsXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDE2cHgpIHNjYWxlKDEpJyxcbiAgbWF4V2lkdGg6ICdjYWxjKDEwMCUgLSAyNHB4KSdcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxMnB4LCAxM3B4KSBzY2FsZSgxKSdcbn0sIG93bmVyU3RhdGUuc2hyaW5rICYmIF9leHRlbmRzKHtcbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICBwb2ludGVyRXZlbnRzOiAnYXV0bycsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxMnB4LCA3cHgpIHNjYWxlKDAuNzUpJyxcbiAgbWF4V2lkdGg6ICdjYWxjKDEzMyUgLSAyNHB4KSdcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxMnB4LCA0cHgpIHNjYWxlKDAuNzUpJ1xufSkpLCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYgX2V4dGVuZHMoe1xuICAvLyBzZWUgY29tbWVudCBhYm92ZSBvbiBmaWxsZWQuekluZGV4XG4gIHpJbmRleDogMSxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTRweCwgMTZweCkgc2NhbGUoMSknLFxuICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDI0cHgpJ1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDE0cHgsIDlweCkgc2NhbGUoMSknXG59LCBvd25lclN0YXRlLnNocmluayAmJiB7XG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgcG9pbnRlckV2ZW50czogJ2F1dG8nLFxuICAvLyBUaGVvcmV0aWNhbGx5LCB3ZSBzaG91bGQgaGF2ZSAoOCs1KSoyLzAuNzUgPSAzNHB4XG4gIC8vIGJ1dCBpdCBmZWVscyBhIGJldHRlciB3aGVuIGl0IGJsZWVkcyBhIGJpdCBvbiB0aGUgbGVmdCwgc28gMzJweC5cbiAgbWF4V2lkdGg6ICdjYWxjKDEzMyUgLSAzMnB4KScsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAtOXB4KSBzY2FsZSgwLjc1KSdcbn0pKSk7XG5jb25zdCBJbnB1dExhYmVsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRMYWJlbChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBuYW1lOiAnTXVpSW5wdXRMYWJlbCcsXG4gICAgcHJvcHM6IGluUHJvcHNcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGRpc2FibGVBbmltYXRpb24gPSBmYWxzZSxcbiAgICAgIHNocmluazogc2hyaW5rUHJvcCxcbiAgICAgIGNsYXNzTmFtZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG4gIGxldCBzaHJpbmsgPSBzaHJpbmtQcm9wO1xuICBpZiAodHlwZW9mIHNocmluayA9PT0gJ3VuZGVmaW5lZCcgJiYgbXVpRm9ybUNvbnRyb2wpIHtcbiAgICBzaHJpbmsgPSBtdWlGb3JtQ29udHJvbC5maWxsZWQgfHwgbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCB8fCBtdWlGb3JtQ29udHJvbC5hZG9ybmVkU3RhcnQ7XG4gIH1cbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3NpemUnLCAndmFyaWFudCcsICdyZXF1aXJlZCcsICdmb2N1c2VkJ11cbiAgfSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkaXNhYmxlQW5pbWF0aW9uLFxuICAgIGZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzaHJpbmssXG4gICAgc2l6ZTogZmNzLnNpemUsXG4gICAgdmFyaWFudDogZmNzLnZhcmlhbnQsXG4gICAgcmVxdWlyZWQ6IGZjcy5yZXF1aXJlZCxcbiAgICBmb2N1c2VkOiBmY3MuZm9jdXNlZFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSW5wdXRMYWJlbFJvb3QsIF9leHRlbmRzKHtcbiAgICBcImRhdGEtc2hyaW5rXCI6IHNocmluayxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXRMYWJlbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydlcnJvcicsICdpbmZvJywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdHJhbnNpdGlvbiBhbmltYXRpb24gaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlQW5pbWF0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgb2YgdGhpcyBsYWJlbCBpcyBmb2N1c2VkLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJ10pLFxuICAvKipcbiAgICogaWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBgaW5wdXRgIGlzIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgc2hydW5rLlxuICAgKi9cbiAgc2hyaW5rOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdub3JtYWwnXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ25vcm1hbCcsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXRMYWJlbDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1Db250cm9sVXRpbGl0eUNsYXNzZXMoc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUZvcm1Db250cm9sJywgc2xvdCk7XG59XG5jb25zdCBmb3JtQ29udHJvbENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlGb3JtQ29udHJvbCcsIFsncm9vdCcsICdtYXJnaW5Ob25lJywgJ21hcmdpbk5vcm1hbCcsICdtYXJnaW5EZW5zZScsICdmdWxsV2lkdGgnLCAnZGlzYWJsZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBmb3JtQ29udHJvbENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmb2N1c2VkXCIsIFwiZnVsbFdpZHRoXCIsIFwiaGlkZGVuTGFiZWxcIiwgXCJtYXJnaW5cIiwgXCJyZXF1aXJlZFwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGlzRmlsbGVkLCBpc0Fkb3JuZWRTdGFydCB9IGZyb20gJy4uL0lucHV0QmFzZS91dGlscyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBpc011aUVsZW1lbnQgZnJvbSAnLi4vdXRpbHMvaXNNdWlFbGVtZW50JztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuaW1wb3J0IHsgZ2V0Rm9ybUNvbnRyb2xVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4vZm9ybUNvbnRyb2xDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBtYXJnaW4sXG4gICAgZnVsbFdpZHRoXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBtYXJnaW4gIT09ICdub25lJyAmJiBgbWFyZ2luJHtjYXBpdGFsaXplKG1hcmdpbil9YCwgZnVsbFdpZHRoICYmICdmdWxsV2lkdGgnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEZvcm1Db250cm9sVXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcbmNvbnN0IEZvcm1Db250cm9sUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpRm9ybUNvbnRyb2wnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAoe1xuICAgIG93bmVyU3RhdGVcbiAgfSwgc3R5bGVzKSA9PiB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdHlsZXMucm9vdCwgc3R5bGVzW2BtYXJnaW4ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5tYXJnaW4pfWBdLCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiBzdHlsZXMuZnVsbFdpZHRoKTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIC8vIFJlc2V0IGZpZWxkc2V0IGRlZmF1bHQgc3R5bGUuXG4gIG1pbldpZHRoOiAwLFxuICBwYWRkaW5nOiAwLFxuICBtYXJnaW46IDAsXG4gIGJvcmRlcjogMCxcbiAgdmVydGljYWxBbGlnbjogJ3RvcCdcbn0sIG93bmVyU3RhdGUubWFyZ2luID09PSAnbm9ybWFsJyAmJiB7XG4gIG1hcmdpblRvcDogMTYsXG4gIG1hcmdpbkJvdHRvbTogOFxufSwgb3duZXJTdGF0ZS5tYXJnaW4gPT09ICdkZW5zZScgJiYge1xuICBtYXJnaW5Ub3A6IDgsXG4gIG1hcmdpbkJvdHRvbTogNFxufSwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYge1xuICB3aWR0aDogJzEwMCUnXG59KSk7XG5cbi8qKlxuICogUHJvdmlkZXMgY29udGV4dCBzdWNoIGFzIGZpbGxlZC9mb2N1c2VkL2Vycm9yL3JlcXVpcmVkIGZvciBmb3JtIGlucHV0cy5cbiAqIFJlbHlpbmcgb24gdGhlIGNvbnRleHQgcHJvdmlkZXMgaGlnaCBmbGV4aWJpbGl0eSBhbmQgZW5zdXJlcyB0aGF0IHRoZSBzdGF0ZSBhbHdheXMgc3RheXNcbiAqIGNvbnNpc3RlbnQgYWNyb3NzIHRoZSBjaGlsZHJlbiBvZiB0aGUgYEZvcm1Db250cm9sYC5cbiAqIFRoaXMgY29udGV4dCBpcyB1c2VkIGJ5IHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAgLSBGb3JtTGFiZWxcbiAqICAtIEZvcm1IZWxwZXJUZXh0XG4gKiAgLSBJbnB1dFxuICogIC0gSW5wdXRMYWJlbFxuICpcbiAqIFlvdSBjYW4gZmluZCBvbmUgY29tcG9zaXRpb24gZXhhbXBsZSBiZWxvdyBhbmQgbW9yZSBnb2luZyB0byBbdGhlIGRlbW9zXSgvbWF0ZXJpYWwtdWkvcmVhY3QtdGV4dC1maWVsZC8jY29tcG9uZW50cykuXG4gKlxuICogYGBganN4XG4gKiA8Rm9ybUNvbnRyb2w+XG4gKiAgIDxJbnB1dExhYmVsIGh0bWxGb3I9XCJteS1pbnB1dFwiPkVtYWlsIGFkZHJlc3M8L0lucHV0TGFiZWw+XG4gKiAgIDxJbnB1dCBpZD1cIm15LWlucHV0XCIgYXJpYS1kZXNjcmliZWRieT1cIm15LWhlbHBlci10ZXh0XCIgLz5cbiAqICAgPEZvcm1IZWxwZXJUZXh0IGlkPVwibXktaGVscGVyLXRleHRcIj5XZSdsbCBuZXZlciBzaGFyZSB5b3VyIGVtYWlsLjwvRm9ybUhlbHBlclRleHQ+XG4gKiA8L0Zvcm1Db250cm9sPlxuICogYGBgXG4gKlxuICog4pqg77iPIE9ubHkgb25lIGBJbnB1dEJhc2VgIGNhbiBiZSB1c2VkIHdpdGhpbiBhIEZvcm1Db250cm9sIGJlY2F1c2UgaXQgY3JlYXRlcyB2aXN1YWwgaW5jb25zaXN0ZW5jaWVzLlxuICogRm9yIGluc3RhbmNlLCBvbmx5IG9uZSBpbnB1dCBjYW4gYmUgZm9jdXNlZCBhdCB0aGUgc2FtZSB0aW1lLCB0aGUgc3RhdGUgc2hvdWxkbid0IGJlIHNoYXJlZC5cbiAqL1xuY29uc3QgRm9ybUNvbnRyb2wgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGb3JtQ29udHJvbChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpRm9ybUNvbnRyb2wnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgZXJyb3IgPSBmYWxzZSxcbiAgICAgIGZvY3VzZWQ6IHZpc3VhbGx5Rm9jdXNlZCxcbiAgICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgICAgaGlkZGVuTGFiZWwgPSBmYWxzZSxcbiAgICAgIG1hcmdpbiA9ICdub25lJyxcbiAgICAgIHJlcXVpcmVkID0gZmFsc2UsXG4gICAgICBzaXplID0gJ21lZGl1bScsXG4gICAgICB2YXJpYW50ID0gJ291dGxpbmVkJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIGVycm9yLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBoaWRkZW5MYWJlbCxcbiAgICBtYXJnaW4sXG4gICAgcmVxdWlyZWQsXG4gICAgc2l6ZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IFthZG9ybmVkU3RhcnQsIHNldEFkb3JuZWRTdGFydF0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIGxldCBpbml0aWFsQWRvcm5lZFN0YXJ0ID0gZmFsc2U7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgIGlmICghaXNNdWlFbGVtZW50KGNoaWxkLCBbJ0lucHV0JywgJ1NlbGVjdCddKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnB1dCA9IGlzTXVpRWxlbWVudChjaGlsZCwgWydTZWxlY3QnXSkgPyBjaGlsZC5wcm9wcy5pbnB1dCA6IGNoaWxkO1xuICAgICAgICBpZiAoaW5wdXQgJiYgaXNBZG9ybmVkU3RhcnQoaW5wdXQucHJvcHMpKSB7XG4gICAgICAgICAgaW5pdGlhbEFkb3JuZWRTdGFydCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaW5pdGlhbEFkb3JuZWRTdGFydDtcbiAgfSk7XG4gIGNvbnN0IFtmaWxsZWQsIHNldEZpbGxlZF0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIGxldCBpbml0aWFsRmlsbGVkID0gZmFsc2U7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgIGlmICghaXNNdWlFbGVtZW50KGNoaWxkLCBbJ0lucHV0JywgJ1NlbGVjdCddKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGaWxsZWQoY2hpbGQucHJvcHMsIHRydWUpIHx8IGlzRmlsbGVkKGNoaWxkLnByb3BzLmlucHV0UHJvcHMsIHRydWUpKSB7XG4gICAgICAgICAgaW5pdGlhbEZpbGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaW5pdGlhbEZpbGxlZDtcbiAgfSk7XG4gIGNvbnN0IFtmb2N1c2VkU3RhdGUsIHNldEZvY3VzZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBpZiAoZGlzYWJsZWQgJiYgZm9jdXNlZFN0YXRlKSB7XG4gICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gIH1cbiAgY29uc3QgZm9jdXNlZCA9IHZpc3VhbGx5Rm9jdXNlZCAhPT0gdW5kZWZpbmVkICYmICFkaXNhYmxlZCA/IHZpc3VhbGx5Rm9jdXNlZCA6IGZvY3VzZWRTdGF0ZTtcbiAgbGV0IHJlZ2lzdGVyRWZmZWN0O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIGNvbnN0IHJlZ2lzdGVyZWRJbnB1dCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gICAgcmVnaXN0ZXJFZmZlY3QgPSAoKSA9PiB7XG4gICAgICBpZiAocmVnaXN0ZXJlZElucHV0LmN1cnJlbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogVGhlcmUgYXJlIG11bHRpcGxlIGBJbnB1dEJhc2VgIGNvbXBvbmVudHMgaW5zaWRlIGEgRm9ybUNvbnRyb2wuJywgJ1RoaXMgY3JlYXRlcyB2aXN1YWwgaW5jb25zaXN0ZW5jaWVzLCBvbmx5IHVzZSBvbmUgYElucHV0QmFzZWAuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgICAgcmVnaXN0ZXJlZElucHV0LmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgcmVnaXN0ZXJlZElucHV0LmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuICBjb25zdCBjaGlsZENvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYWRvcm5lZFN0YXJ0LFxuICAgICAgc2V0QWRvcm5lZFN0YXJ0LFxuICAgICAgY29sb3IsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGVycm9yLFxuICAgICAgZmlsbGVkLFxuICAgICAgZm9jdXNlZCxcbiAgICAgIGZ1bGxXaWR0aCxcbiAgICAgIGhpZGRlbkxhYmVsLFxuICAgICAgc2l6ZSxcbiAgICAgIG9uQmx1cjogKCkgPT4ge1xuICAgICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICAgIH0sXG4gICAgICBvbkVtcHR5OiAoKSA9PiB7XG4gICAgICAgIHNldEZpbGxlZChmYWxzZSk7XG4gICAgICB9LFxuICAgICAgb25GaWxsZWQ6ICgpID0+IHtcbiAgICAgICAgc2V0RmlsbGVkKHRydWUpO1xuICAgICAgfSxcbiAgICAgIG9uRm9jdXM6ICgpID0+IHtcbiAgICAgICAgc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICAgIH0sXG4gICAgICByZWdpc3RlckVmZmVjdCxcbiAgICAgIHJlcXVpcmVkLFxuICAgICAgdmFyaWFudFxuICAgIH07XG4gIH0sIFthZG9ybmVkU3RhcnQsIGNvbG9yLCBkaXNhYmxlZCwgZXJyb3IsIGZpbGxlZCwgZm9jdXNlZCwgZnVsbFdpZHRoLCBoaWRkZW5MYWJlbCwgcmVnaXN0ZXJFZmZlY3QsIHJlcXVpcmVkLCBzaXplLCB2YXJpYW50XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2hpbGRDb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChGb3JtQ29udHJvbFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRm9ybUNvbnRyb2wucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsLCBpbnB1dCBhbmQgaGVscGVyIHRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhIGRpc2FibGVkIHN0YXRlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc3BsYXllZCBpbiBmb2N1c2VkIHN0YXRlLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgaGlkZGVuLlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gaW5jcmVhc2UgZGVuc2l0eSBmb3IgYSBgRmlsbGVkSW5wdXRgLlxuICAgKiBCZSBzdXJlIHRvIGFkZCBgYXJpYS1sYWJlbGAgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGRlbkxhYmVsOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGBkZW5zZWAgb3IgYG5vcm1hbGAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcgb2YgdGhpcyBhbmQgY29udGFpbmVkIGNvbXBvbmVudHMuXG4gICAqIEBkZWZhdWx0ICdub25lJ1xuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJywgJ25vcm1hbCddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgYGlucHV0YCBpcyByZXF1aXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAnb3V0bGluZWQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1IZWxwZXJUZXh0VXRpbGl0eUNsYXNzZXMoc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUZvcm1IZWxwZXJUZXh0Jywgc2xvdCk7XG59XG5jb25zdCBmb3JtSGVscGVyVGV4dENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlGb3JtSGVscGVyVGV4dCcsIFsncm9vdCcsICdlcnJvcicsICdkaXNhYmxlZCcsICdzaXplU21hbGwnLCAnc2l6ZU1lZGl1bScsICdjb250YWluZWQnLCAnZm9jdXNlZCcsICdmaWxsZWQnLCAncmVxdWlyZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBmb3JtSGVscGVyVGV4dENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xudmFyIF9zcGFuO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZmlsbGVkXCIsIFwiZm9jdXNlZFwiLCBcIm1hcmdpblwiLCBcInJlcXVpcmVkXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBmb3JtSGVscGVyVGV4dENsYXNzZXMsIHsgZ2V0Rm9ybUhlbHBlclRleHRVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4vZm9ybUhlbHBlclRleHRDbGFzc2VzJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBjb250YWluZWQsXG4gICAgc2l6ZSxcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBmaWxsZWQsXG4gICAgZm9jdXNlZCxcbiAgICByZXF1aXJlZFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZXJyb3IgJiYgJ2Vycm9yJywgc2l6ZSAmJiBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCBjb250YWluZWQgJiYgJ2NvbnRhaW5lZCcsIGZvY3VzZWQgJiYgJ2ZvY3VzZWQnLCBmaWxsZWQgJiYgJ2ZpbGxlZCcsIHJlcXVpcmVkICYmICdyZXF1aXJlZCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Rm9ybUhlbHBlclRleHRVdGlsaXR5Q2xhc3NlcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgRm9ybUhlbHBlclRleHRSb290ID0gc3R5bGVkKCdwJywge1xuICBuYW1lOiAnTXVpRm9ybUhlbHBlclRleHQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5zaXplICYmIHN0eWxlc1tgc2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdLCBvd25lclN0YXRlLmNvbnRhaW5lZCAmJiBzdHlsZXMuY29udGFpbmVkLCBvd25lclN0YXRlLmZpbGxlZCAmJiBzdHlsZXMuZmlsbGVkXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG59LCB0aGVtZS50eXBvZ3JhcGh5LmNhcHRpb24sIHtcbiAgdGV4dEFsaWduOiAnbGVmdCcsXG4gIG1hcmdpblRvcDogMyxcbiAgbWFyZ2luUmlnaHQ6IDAsXG4gIG1hcmdpbkJvdHRvbTogMCxcbiAgbWFyZ2luTGVmdDogMCxcbiAgW2AmLiR7Zm9ybUhlbHBlclRleHRDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgfSxcbiAgW2AmLiR7Zm9ybUhlbHBlclRleHRDbGFzc2VzLmVycm9yfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmVycm9yLm1haW5cbiAgfVxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgbWFyZ2luVG9wOiA0XG59LCBvd25lclN0YXRlLmNvbnRhaW5lZCAmJiB7XG4gIG1hcmdpbkxlZnQ6IDE0LFxuICBtYXJnaW5SaWdodDogMTRcbn0pKTtcbmNvbnN0IEZvcm1IZWxwZXJUZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUhlbHBlclRleHQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUZvcm1IZWxwZXJUZXh0J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSAncCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsndmFyaWFudCcsICdzaXplJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZpbGxlZCcsICdmb2N1c2VkJywgJ3JlcXVpcmVkJ11cbiAgfSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgY29udGFpbmVkOiBmY3MudmFyaWFudCA9PT0gJ2ZpbGxlZCcgfHwgZmNzLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcsXG4gICAgdmFyaWFudDogZmNzLnZhcmlhbnQsXG4gICAgc2l6ZTogZmNzLnNpemUsXG4gICAgZGlzYWJsZWQ6IGZjcy5kaXNhYmxlZCxcbiAgICBlcnJvcjogZmNzLmVycm9yLFxuICAgIGZpbGxlZDogZmNzLmZpbGxlZCxcbiAgICBmb2N1c2VkOiBmY3MuZm9jdXNlZCxcbiAgICByZXF1aXJlZDogZmNzLnJlcXVpcmVkXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChGb3JtSGVscGVyVGV4dFJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlbiA9PT0gJyAnID8gLy8gbm90cmFuc2xhdGUgbmVlZGVkIHdoaWxlIEdvb2dsZSBUcmFuc2xhdGUgd2lsbCBub3QgZml4IHplcm8td2lkdGggc3BhY2UgaXNzdWVcbiAgICBfc3BhbiB8fCAoX3NwYW4gPSAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIm5vdHJhbnNsYXRlXCIsXG4gICAgICBjaGlsZHJlbjogXCJcXHUyMDBCXCJcbiAgICB9KSkgOiBjaGlsZHJlblxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1IZWxwZXJUZXh0LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIElmIGAnICdgIGlzIHByb3ZpZGVkLCB0aGUgY29tcG9uZW50IHJlc2VydmVzIG9uZSBsaW5lIGhlaWdodCBmb3IgZGlzcGxheWluZyBhIGZ1dHVyZSBtZXNzYWdlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhIGRpc2FibGVkIHN0YXRlLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSBmaWxsZWQgY2xhc3NlcyBrZXkuXG4gICAqL1xuICBmaWxsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSBmb2N1c2VkIGNsYXNzZXMga2V5LlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSByZXF1aXJlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGb3JtSGVscGVyVGV4dDsiLCJpbXBvcnQgeyB1bnN0YWJsZV9nZXRTY3JvbGxiYXJTaXplIGFzIGdldFNjcm9sbGJhclNpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGdldFNjcm9sbGJhclNpemU7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWN0aW9uc1wiLCBcImF1dG9Gb2N1c1wiLCBcImF1dG9Gb2N1c0l0ZW1cIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkSXRlbXNGb2N1c2FibGVcIiwgXCJkaXNhYmxlTGlzdFdyYXBcIiwgXCJvbktleURvd25cIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCBMaXN0IGZyb20gJy4uL0xpc3QnO1xuaW1wb3J0IGdldFNjcm9sbGJhclNpemUgZnJvbSAnLi4vdXRpbHMvZ2V0U2Nyb2xsYmFyU2l6ZSc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VFbmhhbmNlZEVmZmVjdCBmcm9tICcuLi91dGlscy91c2VFbmhhbmNlZEVmZmVjdCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gbmV4dEl0ZW0obGlzdCwgaXRlbSwgZGlzYWJsZUxpc3RXcmFwKSB7XG4gIGlmIChsaXN0ID09PSBpdGVtKSB7XG4gICAgcmV0dXJuIGxpc3QuZmlyc3RDaGlsZDtcbiAgfVxuICBpZiAoaXRlbSAmJiBpdGVtLm5leHRFbGVtZW50U2libGluZykge1xuICAgIHJldHVybiBpdGVtLm5leHRFbGVtZW50U2libGluZztcbiAgfVxuICByZXR1cm4gZGlzYWJsZUxpc3RXcmFwID8gbnVsbCA6IGxpc3QuZmlyc3RDaGlsZDtcbn1cbmZ1bmN0aW9uIHByZXZpb3VzSXRlbShsaXN0LCBpdGVtLCBkaXNhYmxlTGlzdFdyYXApIHtcbiAgaWYgKGxpc3QgPT09IGl0ZW0pIHtcbiAgICByZXR1cm4gZGlzYWJsZUxpc3RXcmFwID8gbGlzdC5maXJzdENoaWxkIDogbGlzdC5sYXN0Q2hpbGQ7XG4gIH1cbiAgaWYgKGl0ZW0gJiYgaXRlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgcmV0dXJuIGl0ZW0ucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgfVxuICByZXR1cm4gZGlzYWJsZUxpc3RXcmFwID8gbnVsbCA6IGxpc3QubGFzdENoaWxkO1xufVxuZnVuY3Rpb24gdGV4dENyaXRlcmlhTWF0Y2hlcyhuZXh0Rm9jdXMsIHRleHRDcml0ZXJpYSkge1xuICBpZiAodGV4dENyaXRlcmlhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBsZXQgdGV4dCA9IG5leHRGb2N1cy5pbm5lclRleHQ7XG4gIGlmICh0ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBqc2RvbSBkb2Vzbid0IHN1cHBvcnQgaW5uZXJUZXh0XG4gICAgdGV4dCA9IG5leHRGb2N1cy50ZXh0Q29udGVudDtcbiAgfVxuICB0ZXh0ID0gdGV4dC50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgaWYgKHRleHQubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0ZXh0Q3JpdGVyaWEucmVwZWF0aW5nKSB7XG4gICAgcmV0dXJuIHRleHRbMF0gPT09IHRleHRDcml0ZXJpYS5rZXlzWzBdO1xuICB9XG4gIHJldHVybiB0ZXh0LmluZGV4T2YodGV4dENyaXRlcmlhLmtleXMuam9pbignJykpID09PSAwO1xufVxuZnVuY3Rpb24gbW92ZUZvY3VzKGxpc3QsIGN1cnJlbnRGb2N1cywgZGlzYWJsZUxpc3RXcmFwLCBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLCB0cmF2ZXJzYWxGdW5jdGlvbiwgdGV4dENyaXRlcmlhKSB7XG4gIGxldCB3cmFwcGVkT25jZSA9IGZhbHNlO1xuICBsZXQgbmV4dEZvY3VzID0gdHJhdmVyc2FsRnVuY3Rpb24obGlzdCwgY3VycmVudEZvY3VzLCBjdXJyZW50Rm9jdXMgPyBkaXNhYmxlTGlzdFdyYXAgOiBmYWxzZSk7XG4gIHdoaWxlIChuZXh0Rm9jdXMpIHtcbiAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AuXG4gICAgaWYgKG5leHRGb2N1cyA9PT0gbGlzdC5maXJzdENoaWxkKSB7XG4gICAgICBpZiAod3JhcHBlZE9uY2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgd3JhcHBlZE9uY2UgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIFNhbWUgbG9naWMgYXMgdXNlQXV0b2NvbXBsZXRlLmpzXG4gICAgY29uc3QgbmV4dEZvY3VzRGlzYWJsZWQgPSBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlID8gZmFsc2UgOiBuZXh0Rm9jdXMuZGlzYWJsZWQgfHwgbmV4dEZvY3VzLmdldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcpID09PSAndHJ1ZSc7XG4gICAgaWYgKCFuZXh0Rm9jdXMuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpIHx8ICF0ZXh0Q3JpdGVyaWFNYXRjaGVzKG5leHRGb2N1cywgdGV4dENyaXRlcmlhKSB8fCBuZXh0Rm9jdXNEaXNhYmxlZCkge1xuICAgICAgLy8gTW92ZSB0byB0aGUgbmV4dCBlbGVtZW50LlxuICAgICAgbmV4dEZvY3VzID0gdHJhdmVyc2FsRnVuY3Rpb24obGlzdCwgbmV4dEZvY3VzLCBkaXNhYmxlTGlzdFdyYXApO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0Rm9jdXMuZm9jdXMoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQSBwZXJtYW5lbnRseSBkaXNwbGF5ZWQgbWVudSBmb2xsb3dpbmcgaHR0cHM6Ly93d3cudzMub3JnL1dBSS9BUklBL2FwZy9wYXR0ZXJucy9tZW51LWJ1dHRvbi8uXG4gKiBJdCdzIGV4cG9zZWQgdG8gaGVscCBjdXN0b21pemF0aW9uIG9mIHRoZSBbYE1lbnVgXSgvbWF0ZXJpYWwtdWkvYXBpL21lbnUvKSBjb21wb25lbnQgaWYgeW91XG4gKiB1c2UgaXQgc2VwYXJhdGVseSB5b3UgbmVlZCB0byBtb3ZlIGZvY3VzIGludG8gdGhlIGNvbXBvbmVudCBtYW51YWxseS4gT25jZVxuICogdGhlIGZvY3VzIGlzIHBsYWNlZCBpbnNpZGUgdGhlIGNvbXBvbmVudCBpdCBpcyBmdWxseSBrZXlib2FyZCBhY2Nlc3NpYmxlLlxuICovXG5jb25zdCBNZW51TGlzdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1lbnVMaXN0KHByb3BzLCByZWYpIHtcbiAgY29uc3Qge1xuICAgICAgLy8gcHJpdmF0ZVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICAgIGFjdGlvbnMsXG4gICAgICBhdXRvRm9jdXMgPSBmYWxzZSxcbiAgICAgIGF1dG9Gb2N1c0l0ZW0gPSBmYWxzZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUxpc3RXcmFwID0gZmFsc2UsXG4gICAgICBvbktleURvd24sXG4gICAgICB2YXJpYW50ID0gJ3NlbGVjdGVkTWVudSdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgbGlzdFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgdGV4dENyaXRlcmlhUmVmID0gUmVhY3QudXNlUmVmKHtcbiAgICBrZXlzOiBbXSxcbiAgICByZXBlYXRpbmc6IHRydWUsXG4gICAgcHJldmlvdXNLZXlNYXRjaGVkOiB0cnVlLFxuICAgIGxhc3RUaW1lOiBudWxsXG4gIH0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGF1dG9Gb2N1cykge1xuICAgICAgbGlzdFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9LCBbYXV0b0ZvY3VzXSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9ucywgKCkgPT4gKHtcbiAgICBhZGp1c3RTdHlsZUZvclNjcm9sbGJhcjogKGNvbnRhaW5lckVsZW1lbnQsIHRoZW1lKSA9PiB7XG4gICAgICAvLyBMZXQncyBpZ25vcmUgdGhhdCBwaWVjZSBvZiBsb2dpYyBpZiB1c2VycyBhcmUgYWxyZWFkeSBvdmVycmlkaW5nIHRoZSB3aWR0aFxuICAgICAgLy8gb2YgdGhlIG1lbnUuXG4gICAgICBjb25zdCBub0V4cGxpY2l0V2lkdGggPSAhbGlzdFJlZi5jdXJyZW50LnN0eWxlLndpZHRoO1xuICAgICAgaWYgKGNvbnRhaW5lckVsZW1lbnQuY2xpZW50SGVpZ2h0IDwgbGlzdFJlZi5jdXJyZW50LmNsaWVudEhlaWdodCAmJiBub0V4cGxpY2l0V2lkdGgpIHtcbiAgICAgICAgY29uc3Qgc2Nyb2xsYmFyU2l6ZSA9IGAke2dldFNjcm9sbGJhclNpemUob3duZXJEb2N1bWVudChjb250YWluZXJFbGVtZW50KSl9cHhgO1xuICAgICAgICBsaXN0UmVmLmN1cnJlbnQuc3R5bGVbdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdwYWRkaW5nTGVmdCcgOiAncGFkZGluZ1JpZ2h0J10gPSBzY3JvbGxiYXJTaXplO1xuICAgICAgICBsaXN0UmVmLmN1cnJlbnQuc3R5bGUud2lkdGggPSBgY2FsYygxMDAlICsgJHtzY3JvbGxiYXJTaXplfSlgO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxpc3RSZWYuY3VycmVudDtcbiAgICB9XG4gIH0pLCBbXSk7XG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSBldmVudCA9PiB7XG4gICAgY29uc3QgbGlzdCA9IGxpc3RSZWYuY3VycmVudDtcbiAgICBjb25zdCBrZXkgPSBldmVudC5rZXk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0VsZW1lbnR9IC0gd2lsbCBhbHdheXMgYmUgZGVmaW5lZCBzaW5jZSB3ZSBhcmUgaW4gYSBrZXlkb3duIGhhbmRsZXJcbiAgICAgKiBhdHRhY2hlZCB0byBhbiBlbGVtZW50LiBBIGtleWRvd24gZXZlbnQgaXMgZWl0aGVyIGRpc3BhdGNoZWQgdG8gdGhlIGFjdGl2ZUVsZW1lbnRcbiAgICAgKiBvciBkb2N1bWVudC5ib2R5IG9yIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC4gT25seSB0aGUgZmlyc3QgY2FzZSB3aWxsXG4gICAgICogdHJpZ2dlciB0aGlzIHNwZWNpZmljIGhhbmRsZXIuXG4gICAgICovXG4gICAgY29uc3QgY3VycmVudEZvY3VzID0gb3duZXJEb2N1bWVudChsaXN0KS5hY3RpdmVFbGVtZW50O1xuICAgIGlmIChrZXkgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICAvLyBQcmV2ZW50IHNjcm9sbCBvZiB0aGUgcGFnZVxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnQXJyb3dVcCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIHByZXZpb3VzSXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdIb21lJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBudWxsLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIG5leHRJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0VuZCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgbnVsbCwgZGlzYWJsZUxpc3RXcmFwLCBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLCBwcmV2aW91c0l0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgY3JpdGVyaWEgPSB0ZXh0Q3JpdGVyaWFSZWYuY3VycmVudDtcbiAgICAgIGNvbnN0IGxvd2VyS2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICBjb25zdCBjdXJyVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgaWYgKGNyaXRlcmlhLmtleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBSZXNldFxuICAgICAgICBpZiAoY3VyclRpbWUgLSBjcml0ZXJpYS5sYXN0VGltZSA+IDUwMCkge1xuICAgICAgICAgIGNyaXRlcmlhLmtleXMgPSBbXTtcbiAgICAgICAgICBjcml0ZXJpYS5yZXBlYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIGNyaXRlcmlhLnByZXZpb3VzS2V5TWF0Y2hlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY3JpdGVyaWEucmVwZWF0aW5nICYmIGxvd2VyS2V5ICE9PSBjcml0ZXJpYS5rZXlzWzBdKSB7XG4gICAgICAgICAgY3JpdGVyaWEucmVwZWF0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNyaXRlcmlhLmxhc3RUaW1lID0gY3VyclRpbWU7XG4gICAgICBjcml0ZXJpYS5rZXlzLnB1c2gobG93ZXJLZXkpO1xuICAgICAgY29uc3Qga2VlcEZvY3VzT25DdXJyZW50ID0gY3VycmVudEZvY3VzICYmICFjcml0ZXJpYS5yZXBlYXRpbmcgJiYgdGV4dENyaXRlcmlhTWF0Y2hlcyhjdXJyZW50Rm9jdXMsIGNyaXRlcmlhKTtcbiAgICAgIGlmIChjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgJiYgKGtlZXBGb2N1c09uQ3VycmVudCB8fCBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBmYWxzZSwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0sIGNyaXRlcmlhKSkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyaXRlcmlhLnByZXZpb3VzS2V5TWF0Y2hlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihsaXN0UmVmLCByZWYpO1xuXG4gIC8qKlxuICAgKiB0aGUgaW5kZXggb2YgdGhlIGl0ZW0gc2hvdWxkIHJlY2VpdmUgZm9jdXNcbiAgICogaW4gYSBgdmFyaWFudD1cInNlbGVjdGVkTWVudVwiYCBpdCdzIHRoZSBmaXJzdCBgc2VsZWN0ZWRgIGl0ZW1cbiAgICogb3RoZXJ3aXNlIGl0J3MgdGhlIHZlcnkgZmlyc3QgaXRlbS5cbiAgICovXG4gIGxldCBhY3RpdmVJdGVtSW5kZXggPSAtMTtcbiAgLy8gc2luY2Ugd2UgaW5qZWN0IGZvY3VzIHJlbGF0ZWQgcHJvcHMgaW50byBjaGlsZHJlbiB3ZSBoYXZlIHRvIGRvIGEgbG9va2FoZWFkXG4gIC8vIHRvIGNoZWNrIGlmIHRoZXJlIGlzIGEgYHNlbGVjdGVkYCBpdGVtLiBXZSdyZSBsb29raW5nIGZvciB0aGUgbGFzdCBgc2VsZWN0ZWRgXG4gIC8vIGl0ZW0gYW5kIHVzZSB0aGUgZmlyc3QgdmFsaWQgaXRlbSBhcyBhIGZhbGxiYWNrXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICBpZiAoYWN0aXZlSXRlbUluZGV4ID09PSBpbmRleCkge1xuICAgICAgICBhY3RpdmVJdGVtSW5kZXggKz0gMTtcbiAgICAgICAgaWYgKGFjdGl2ZUl0ZW1JbmRleCA+PSBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAvLyB0aGVyZSBhcmUgbm8gZm9jdXNhYmxlIGl0ZW1zIHdpdGhpbiB0aGUgbGlzdC5cbiAgICAgICAgICBhY3RpdmVJdGVtSW5kZXggPSAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGlzRnJhZ21lbnQoY2hpbGQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTVVJOiBUaGUgTWVudSBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBpZiAodmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScgJiYgY2hpbGQucHJvcHMuc2VsZWN0ZWQpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhY3RpdmVJdGVtSW5kZXggPT09IGluZGV4ICYmIChjaGlsZC5wcm9wcy5kaXNhYmxlZCB8fCBjaGlsZC5wcm9wcy5tdWlTa2lwTGlzdEhpZ2hsaWdodCB8fCBjaGlsZC50eXBlLm11aVNraXBMaXN0SGlnaGxpZ2h0KSkge1xuICAgICAgYWN0aXZlSXRlbUluZGV4ICs9IDE7XG4gICAgICBpZiAoYWN0aXZlSXRlbUluZGV4ID49IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAvLyB0aGVyZSBhcmUgbm8gZm9jdXNhYmxlIGl0ZW1zIHdpdGhpbiB0aGUgbGlzdC5cbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gLTE7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaXRlbXMgPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBpZiAoaW5kZXggPT09IGFjdGl2ZUl0ZW1JbmRleCkge1xuICAgICAgY29uc3QgbmV3Q2hpbGRQcm9wcyA9IHt9O1xuICAgICAgaWYgKGF1dG9Gb2N1c0l0ZW0pIHtcbiAgICAgICAgbmV3Q2hpbGRQcm9wcy5hdXRvRm9jdXMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGNoaWxkLnByb3BzLnRhYkluZGV4ID09PSB1bmRlZmluZWQgJiYgdmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScpIHtcbiAgICAgICAgbmV3Q2hpbGRQcm9wcy50YWJJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgbmV3Q2hpbGRQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBjaGlsZDtcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0LCBfZXh0ZW5kcyh7XG4gICAgcm9sZTogXCJtZW51XCIsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgIHRhYkluZGV4OiBhdXRvRm9jdXMgPyAwIDogLTFcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogaXRlbXNcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51TGlzdC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgZm9jdXMgdGhlIGBbcm9sZT1cIm1lbnVcIl1gIGNvbnRhaW5lciBhbmQgbW92ZSBpbnRvIHRhYiBvcmRlci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgZm9jdXMgdGhlIGZpcnN0IG1lbnVpdGVtIGlmIGB2YXJpYW50PVwibWVudVwiYCBvciBzZWxlY3RlZCBpdGVtXG4gICAqIGlmIGB2YXJpYW50PVwic2VsZWN0ZWRNZW51XCJgLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYXV0b0ZvY3VzSXRlbTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBNZW51TGlzdCBjb250ZW50cywgbm9ybWFsbHkgYE1lbnVJdGVtYHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgYWxsb3cgZm9jdXMgb24gZGlzYWJsZWQgaXRlbXMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1lbnUgaXRlbXMgd2lsbCBub3Qgd3JhcCBmb2N1cy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVMaXN0V3JhcDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLiBVc2UgYG1lbnVgIHRvIHByZXZlbnQgc2VsZWN0ZWQgaXRlbXMgZnJvbSBpbXBhY3RpbmcgdGhlIGluaXRpYWwgZm9jdXNcbiAgICogYW5kIHRoZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgcmVsYXRpdmUgdG8gdGhlIGFuY2hvciBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCAnc2VsZWN0ZWRNZW51J1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnbWVudScsICdzZWxlY3RlZE1lbnUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBNZW51TGlzdDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhZGRFbmRMaXN0ZW5lclwiLCBcImFwcGVhclwiLCBcImNoaWxkcmVuXCIsIFwiZWFzaW5nXCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwic3R5bGVcIiwgXCJ0aW1lb3V0XCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmLCB1bnN0YWJsZV91c2VUaW1lb3V0IGFzIHVzZVRpbWVvdXQgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgZ2V0VHJhbnNpdGlvblByb3BzLCByZWZsb3cgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBnZXRTY2FsZSh2YWx1ZSkge1xuICByZXR1cm4gYHNjYWxlKCR7dmFsdWV9LCAke3ZhbHVlICoqIDJ9KWA7XG59XG5jb25zdCBzdHlsZXMgPSB7XG4gIGVudGVyaW5nOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2Zvcm06IGdldFNjYWxlKDEpXG4gIH0sXG4gIGVudGVyZWQ6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogJ25vbmUnXG4gIH1cbn07XG5cbi8qXG4gVE9ETyB2NjogcmVtb3ZlXG4gQ29uZGl0aW9uYWxseSBhcHBseSBhIHdvcmthcm91bmQgZm9yIHRoZSBDU1MgdHJhbnNpdGlvbiBidWcgaW4gU2FmYXJpIDE1LjQgLyBXZWJLaXQgYnJvd3NlcnMuXG4gKi9cbmNvbnN0IGlzV2ViS2l0MTU0ID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL14oKD8hY2hyb21lfGFuZHJvaWQpLikqKHNhZmFyaXxtb2JpbGUpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAvKG9zIHx2ZXJzaW9uXFwvKTE1KC58Xyk0L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBUaGUgR3JvdyB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlIFtUb29sdGlwXSgvbWF0ZXJpYWwtdWkvcmVhY3QtdG9vbHRpcC8pIGFuZFxuICogW1BvcG92ZXJdKC9tYXRlcmlhbC11aS9yZWFjdC1wb3BvdmVyLykgY29tcG9uZW50cy5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cbmNvbnN0IEdyb3cgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBHcm93KHByb3BzLCByZWYpIHtcbiAgY29uc3Qge1xuICAgICAgYWRkRW5kTGlzdGVuZXIsXG4gICAgICBhcHBlYXIgPSB0cnVlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBlYXNpbmcsXG4gICAgICBpbjogaW5Qcm9wLFxuICAgICAgb25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcsXG4gICAgICBvbkV4aXQsXG4gICAgICBvbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyxcbiAgICAgIHN0eWxlLFxuICAgICAgdGltZW91dCA9ICdhdXRvJyxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gVHJhbnNpdGlvblxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB0aW1lciA9IHVzZVRpbWVvdXQoKTtcbiAgY29uc3QgYXV0b1RpbWVvdXQgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBub2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKG5vZGVSZWYsIGNoaWxkcmVuLnJlZiwgcmVmKTtcbiAgY29uc3Qgbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayA9IGNhbGxiYWNrID0+IG1heWJlSXNBcHBlYXJpbmcgPT4ge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY29uc3Qgbm9kZSA9IG5vZGVSZWYuY3VycmVudDtcblxuICAgICAgLy8gb25FbnRlclh4eCBhbmQgb25FeGl0WHh4IGNhbGxiYWNrcyBoYXZlIGEgZGlmZmVyZW50IGFyZ3VtZW50cy5sZW5ndGggdmFsdWUuXG4gICAgICBpZiAobWF5YmVJc0FwcGVhcmluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNhbGxiYWNrKG5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sobm9kZSwgbWF5YmVJc0FwcGVhcmluZyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVFbnRlcmluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmluZyk7XG4gIGNvbnN0IGhhbmRsZUVudGVyID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjaygobm9kZSwgaXNBcHBlYXJpbmcpID0+IHtcbiAgICByZWZsb3cobm9kZSk7IC8vIFNvIHRoZSBhbmltYXRpb24gYWx3YXlzIHN0YXJ0IGZyb20gdGhlIHN0YXJ0LlxuXG4gICAgY29uc3Qge1xuICAgICAgZHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIGRlbGF5LFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9ID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlLFxuICAgICAgdGltZW91dCxcbiAgICAgIGVhc2luZ1xuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KTtcbiAgICBsZXQgZHVyYXRpb247XG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgZHVyYXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24obm9kZS5jbGllbnRIZWlnaHQpO1xuICAgICAgYXV0b1RpbWVvdXQuY3VycmVudCA9IGR1cmF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBkdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbiAgICB9XG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gW3RoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgZGVsYXlcbiAgICB9KSwgdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICBkdXJhdGlvbjogaXNXZWJLaXQxNTQgPyBkdXJhdGlvbiA6IGR1cmF0aW9uICogMC42NjYsXG4gICAgICBkZWxheSxcbiAgICAgIGVhc2luZzogdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXG4gICAgfSldLmpvaW4oJywnKTtcbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRW50ZXJlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmVkKTtcbiAgY29uc3QgaGFuZGxlRXhpdGluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0aW5nKTtcbiAgY29uc3QgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIGRlbGF5LFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9ID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlLFxuICAgICAgdGltZW91dCxcbiAgICAgIGVhc2luZ1xuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdleGl0J1xuICAgIH0pO1xuICAgIGxldCBkdXJhdGlvbjtcbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICBkdXJhdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmdldEF1dG9IZWlnaHREdXJhdGlvbihub2RlLmNsaWVudEhlaWdodCk7XG4gICAgICBhdXRvVGltZW91dC5jdXJyZW50ID0gZHVyYXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgIH1cbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSBbdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb24sXG4gICAgICBkZWxheVxuICAgIH0pLCB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgIGR1cmF0aW9uOiBpc1dlYktpdDE1NCA/IGR1cmF0aW9uIDogZHVyYXRpb24gKiAwLjY2NixcbiAgICAgIGRlbGF5OiBpc1dlYktpdDE1NCA/IGRlbGF5IDogZGVsYXkgfHwgZHVyYXRpb24gKiAwLjMzMyxcbiAgICAgIGVhc2luZzogdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXG4gICAgfSldLmpvaW4oJywnKTtcbiAgICBub2RlLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gZ2V0U2NhbGUoMC43NSk7XG4gICAgaWYgKG9uRXhpdCkge1xuICAgICAgb25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUV4aXRlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0ZWQpO1xuICBjb25zdCBoYW5kbGVBZGRFbmRMaXN0ZW5lciA9IG5leHQgPT4ge1xuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIHRpbWVyLnN0YXJ0KGF1dG9UaW1lb3V0LmN1cnJlbnQgfHwgMCwgbmV4dCk7XG4gICAgfVxuICAgIGlmIChhZGRFbmRMaXN0ZW5lcikge1xuICAgICAgLy8gT2xkIGNhbGwgc2lnbmF0dXJlIGJlZm9yZSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cGAgaW1wbGVtZW50ZWQgYG5vZGVSZWZgXG4gICAgICBhZGRFbmRMaXN0ZW5lcihub2RlUmVmLmN1cnJlbnQsIG5leHQpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBhcHBlYXI6IGFwcGVhcixcbiAgICBpbjogaW5Qcm9wLFxuICAgIG5vZGVSZWY6IG5vZGVSZWYsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZyxcbiAgICBhZGRFbmRMaXN0ZW5lcjogaGFuZGxlQWRkRW5kTGlzdGVuZXIsXG4gICAgdGltZW91dDogdGltZW91dCA9PT0gJ2F1dG8nID8gbnVsbCA6IHRpbWVvdXRcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogKHN0YXRlLCBjaGlsZFByb3BzKSA9PiB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe1xuICAgICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgdHJhbnNmb3JtOiBnZXRTY2FsZSgwLjc1KSxcbiAgICAgICAgICB2aXNpYmlsaXR5OiBzdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIWluUHJvcCA/ICdoaWRkZW4nIDogdW5kZWZpbmVkXG4gICAgICAgIH0sIHN0eWxlc1tzdGF0ZV0sIHN0eWxlLCBjaGlsZHJlbi5wcm9wcy5zdHlsZSksXG4gICAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgICB9LCBjaGlsZFByb3BzKSk7XG4gICAgfVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdyb3cucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nIERPTVxuICAgKiBub2RlIGFuZCBhIGRvbmUgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuIE5vdGU6IFRpbWVvdXRzIGFyZSBzdGlsbCB1c2VkIGFzIGEgZmFsbGJhY2sgaWYgcHJvdmlkZWQuXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBQZXJmb3JtIHRoZSBlbnRlciB0cmFuc2l0aW9uIHdoZW4gaXQgZmlyc3QgbW91bnRzIGlmIGBpbmAgaXMgYWxzbyBgdHJ1ZWAuXG4gICAqIFNldCB0aGlzIHRvIGBmYWxzZWAgdG8gZGlzYWJsZSB0aGlzIGJlaGF2aW9yLlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIFRoZSB0cmFuc2l0aW9uIHRpbWluZyBmdW5jdGlvbi5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIGVhc2luZyBvciBhIG9iamVjdCBjb250YWluaW5nIGVudGVyIGFuZCBleGl0IHZhbHVlcy5cbiAgICovXG4gIGVhc2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBlbnRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGl0OiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluLlxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5Hcm93Lm11aVN1cHBvcnRBdXRvID0gdHJ1ZTtcbmV4cG9ydCBkZWZhdWx0IEdyb3c7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRQb3BvdmVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlQb3BvdmVyJywgc2xvdCk7XG59XG5jb25zdCBwb3BvdmVyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVBvcG92ZXInLCBbJ3Jvb3QnLCAncGFwZXInXSk7XG5leHBvcnQgZGVmYXVsdCBwb3BvdmVyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkVudGVyaW5nXCJdLFxuICBfZXhjbHVkZWQyID0gW1wiYWN0aW9uXCIsIFwiYW5jaG9yRWxcIiwgXCJhbmNob3JPcmlnaW5cIiwgXCJhbmNob3JQb3NpdGlvblwiLCBcImFuY2hvclJlZmVyZW5jZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGFpbmVyXCIsIFwiZWxldmF0aW9uXCIsIFwibWFyZ2luVGhyZXNob2xkXCIsIFwib3BlblwiLCBcIlBhcGVyUHJvcHNcIiwgXCJzbG90c1wiLCBcInNsb3RQcm9wc1wiLCBcInRyYW5zZm9ybU9yaWdpblwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJUcmFuc2l0aW9uUHJvcHNcIiwgXCJkaXNhYmxlU2Nyb2xsTG9ja1wiXSxcbiAgX2V4Y2x1ZGVkMyA9IFtcInNsb3RQcm9wc1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzLCB1c2VTbG90UHJvcHMsIGlzSG9zdENvbXBvbmVudCB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgaW50ZWdlclByb3BUeXBlLCBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiwgcmVmVHlwZSwgSFRNTEVsZW1lbnRUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4uL3V0aWxzL2RlYm91bmNlJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IG93bmVyV2luZG93IGZyb20gJy4uL3V0aWxzL293bmVyV2luZG93JztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IEdyb3cgZnJvbSAnLi4vR3Jvdyc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vTW9kYWwnO1xuaW1wb3J0IFBhcGVyQmFzZSBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgeyBnZXRQb3BvdmVyVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9wb3BvdmVyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9mZnNldFRvcChyZWN0LCB2ZXJ0aWNhbCkge1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgaWYgKHR5cGVvZiB2ZXJ0aWNhbCA9PT0gJ251bWJlcicpIHtcbiAgICBvZmZzZXQgPSB2ZXJ0aWNhbDtcbiAgfSBlbHNlIGlmICh2ZXJ0aWNhbCA9PT0gJ2NlbnRlcicpIHtcbiAgICBvZmZzZXQgPSByZWN0LmhlaWdodCAvIDI7XG4gIH0gZWxzZSBpZiAodmVydGljYWwgPT09ICdib3R0b20nKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC5oZWlnaHQ7XG4gIH1cbiAgcmV0dXJuIG9mZnNldDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPZmZzZXRMZWZ0KHJlY3QsIGhvcml6b250YWwpIHtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGlmICh0eXBlb2YgaG9yaXpvbnRhbCA9PT0gJ251bWJlcicpIHtcbiAgICBvZmZzZXQgPSBob3Jpem9udGFsO1xuICB9IGVsc2UgaWYgKGhvcml6b250YWwgPT09ICdjZW50ZXInKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC53aWR0aCAvIDI7XG4gIH0gZWxzZSBpZiAoaG9yaXpvbnRhbCA9PT0gJ3JpZ2h0Jykge1xuICAgIG9mZnNldCA9IHJlY3Qud2lkdGg7XG4gIH1cbiAgcmV0dXJuIG9mZnNldDtcbn1cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybU9yaWdpblZhbHVlKHRyYW5zZm9ybU9yaWdpbikge1xuICByZXR1cm4gW3RyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsLCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWxdLm1hcChuID0+IHR5cGVvZiBuID09PSAnbnVtYmVyJyA/IGAke259cHhgIDogbikuam9pbignICcpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUFuY2hvckVsKGFuY2hvckVsKSB7XG4gIHJldHVybiB0eXBlb2YgYW5jaG9yRWwgPT09ICdmdW5jdGlvbicgPyBhbmNob3JFbCgpIDogYW5jaG9yRWw7XG59XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgcGFwZXI6IFsncGFwZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFBvcG92ZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmV4cG9ydCBjb25zdCBQb3BvdmVyUm9vdCA9IHN0eWxlZChNb2RhbCwge1xuICBuYW1lOiAnTXVpUG9wb3ZlcicsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe30pO1xuZXhwb3J0IGNvbnN0IFBvcG92ZXJQYXBlciA9IHN0eWxlZChQYXBlckJhc2UsIHtcbiAgbmFtZTogJ011aVBvcG92ZXInLFxuICBzbG90OiAnUGFwZXInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5wYXBlclxufSkoe1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gIC8vIFNvIHdlIHNlZSB0aGUgcG9wb3ZlciB3aGVuIGl0J3MgZW1wdHkuXG4gIC8vIEl0J3MgbW9zdCBsaWtlbHkgb24gaXNzdWUgb24gdXNlcmxhbmQuXG4gIG1pbldpZHRoOiAxNixcbiAgbWluSGVpZ2h0OiAxNixcbiAgbWF4V2lkdGg6ICdjYWxjKDEwMCUgLSAzMnB4KScsXG4gIG1heEhlaWdodDogJ2NhbGMoMTAwJSAtIDMycHgpJyxcbiAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgb3V0bGluZTogMFxufSk7XG5jb25zdCBQb3BvdmVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUG9wb3ZlcihpblByb3BzLCByZWYpIHtcbiAgdmFyIF9zbG90UHJvcHMkcGFwZXIsIF9zbG90cyRyb290LCBfc2xvdHMkcGFwZXI7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVBvcG92ZXInXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhY3Rpb24sXG4gICAgICBhbmNob3JFbCxcbiAgICAgIGFuY2hvck9yaWdpbiA9IHtcbiAgICAgICAgdmVydGljYWw6ICd0b3AnLFxuICAgICAgICBob3Jpem9udGFsOiAnbGVmdCdcbiAgICAgIH0sXG4gICAgICBhbmNob3JQb3NpdGlvbixcbiAgICAgIGFuY2hvclJlZmVyZW5jZSA9ICdhbmNob3JFbCcsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyUHJvcCxcbiAgICAgIGVsZXZhdGlvbiA9IDgsXG4gICAgICBtYXJnaW5UaHJlc2hvbGQgPSAxNixcbiAgICAgIG9wZW4sXG4gICAgICBQYXBlclByb3BzOiBQYXBlclByb3BzUHJvcCA9IHt9LFxuICAgICAgc2xvdHMsXG4gICAgICBzbG90UHJvcHMsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW4gPSB7XG4gICAgICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICAgICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gICAgICB9LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IEdyb3csXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblByb3AgPSAnYXV0bycsXG4gICAgICBUcmFuc2l0aW9uUHJvcHM6IHtcbiAgICAgICAgb25FbnRlcmluZ1xuICAgICAgfSA9IHt9LFxuICAgICAgZGlzYWJsZVNjcm9sbExvY2sgPSBmYWxzZVxuICAgIH0gPSBwcm9wcyxcbiAgICBUcmFuc2l0aW9uUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcy5UcmFuc2l0aW9uUHJvcHMsIF9leGNsdWRlZCksXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IGV4dGVybmFsUGFwZXJTbG90UHJvcHMgPSAoX3Nsb3RQcm9wcyRwYXBlciA9IHNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogc2xvdFByb3BzLnBhcGVyKSAhPSBudWxsID8gX3Nsb3RQcm9wcyRwYXBlciA6IFBhcGVyUHJvcHNQcm9wO1xuICBjb25zdCBwYXBlclJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCBoYW5kbGVQYXBlclJlZiA9IHVzZUZvcmtSZWYocGFwZXJSZWYsIGV4dGVybmFsUGFwZXJTbG90UHJvcHMucmVmKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGFuY2hvck9yaWdpbixcbiAgICBhbmNob3JSZWZlcmVuY2UsXG4gICAgZWxldmF0aW9uLFxuICAgIG1hcmdpblRocmVzaG9sZCxcbiAgICBleHRlcm5hbFBhcGVyU2xvdFByb3BzLFxuICAgIHRyYW5zZm9ybU9yaWdpbixcbiAgICBUcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uUHJvcCxcbiAgICBUcmFuc2l0aW9uUHJvcHNcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcblxuICAvLyBSZXR1cm5zIHRoZSB0b3AvbGVmdCBvZmZzZXQgb2YgdGhlIHBvc2l0aW9uXG4gIC8vIHRvIGF0dGFjaCB0byBvbiB0aGUgYW5jaG9yIGVsZW1lbnQgKG9yIGJvZHkgaWYgbm9uZSBpcyBwcm92aWRlZClcbiAgY29uc3QgZ2V0QW5jaG9yT2Zmc2V0ID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChhbmNob3JSZWZlcmVuY2UgPT09ICdhbmNob3JQb3NpdGlvbicpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghYW5jaG9yUG9zaXRpb24pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFlvdSBuZWVkIHRvIHByb3ZpZGUgYSBgYW5jaG9yUG9zaXRpb25gIHByb3Agd2hlbiB1c2luZyAnICsgJzxQb3BvdmVyIGFuY2hvclJlZmVyZW5jZT1cImFuY2hvclBvc2l0aW9uXCIgLz4uJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhbmNob3JQb3NpdGlvbjtcbiAgICB9XG4gICAgY29uc3QgcmVzb2x2ZWRBbmNob3JFbCA9IHJlc29sdmVBbmNob3JFbChhbmNob3JFbCk7XG5cbiAgICAvLyBJZiBhbiBhbmNob3IgZWxlbWVudCB3YXNuJ3QgcHJvdmlkZWQsIGp1c3QgdXNlIHRoZSBwYXJlbnQgYm9keSBlbGVtZW50IG9mIHRoaXMgUG9wb3ZlclxuICAgIGNvbnN0IGFuY2hvckVsZW1lbnQgPSByZXNvbHZlZEFuY2hvckVsICYmIHJlc29sdmVkQW5jaG9yRWwubm9kZVR5cGUgPT09IDEgPyByZXNvbHZlZEFuY2hvckVsIDogb3duZXJEb2N1bWVudChwYXBlclJlZi5jdXJyZW50KS5ib2R5O1xuICAgIGNvbnN0IGFuY2hvclJlY3QgPSBhbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zdCBib3ggPSBhbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oWydNVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdUaGUgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIHBhcnQgb2YgdGhlIGRvY3VtZW50IGxheW91dC4nLCBcIk1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCBvciB0aGF0IGl0J3Mgbm90IGRpc3BsYXkgbm9uZS5cIl0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBhbmNob3JSZWN0LnRvcCArIGdldE9mZnNldFRvcChhbmNob3JSZWN0LCBhbmNob3JPcmlnaW4udmVydGljYWwpLFxuICAgICAgbGVmdDogYW5jaG9yUmVjdC5sZWZ0ICsgZ2V0T2Zmc2V0TGVmdChhbmNob3JSZWN0LCBhbmNob3JPcmlnaW4uaG9yaXpvbnRhbClcbiAgICB9O1xuICB9LCBbYW5jaG9yRWwsIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsLCBhbmNob3JPcmlnaW4udmVydGljYWwsIGFuY2hvclBvc2l0aW9uLCBhbmNob3JSZWZlcmVuY2VdKTtcblxuICAvLyBSZXR1cm5zIHRoZSBiYXNlIHRyYW5zZm9ybSBvcmlnaW4gdXNpbmcgdGhlIGVsZW1lbnRcbiAgY29uc3QgZ2V0VHJhbnNmb3JtT3JpZ2luID0gUmVhY3QudXNlQ2FsbGJhY2soZWxlbVJlY3QgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB2ZXJ0aWNhbDogZ2V0T2Zmc2V0VG9wKGVsZW1SZWN0LCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWwpLFxuICAgICAgaG9yaXpvbnRhbDogZ2V0T2Zmc2V0TGVmdChlbGVtUmVjdCwgdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwpXG4gICAgfTtcbiAgfSwgW3RyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsLCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWxdKTtcbiAgY29uc3QgZ2V0UG9zaXRpb25pbmdTdHlsZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGVsZW1lbnQgPT4ge1xuICAgIGNvbnN0IGVsZW1SZWN0ID0ge1xuICAgICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0XG4gICAgfTtcblxuICAgIC8vIEdldCB0aGUgdHJhbnNmb3JtIG9yaWdpbiBwb2ludCBvbiB0aGUgZWxlbWVudCBpdHNlbGZcbiAgICBjb25zdCBlbGVtVHJhbnNmb3JtT3JpZ2luID0gZ2V0VHJhbnNmb3JtT3JpZ2luKGVsZW1SZWN0KTtcbiAgICBpZiAoYW5jaG9yUmVmZXJlbmNlID09PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogbnVsbCxcbiAgICAgICAgbGVmdDogbnVsbCxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiBnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZShlbGVtVHJhbnNmb3JtT3JpZ2luKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBHZXQgdGhlIG9mZnNldCBvZiB0aGUgYW5jaG9yaW5nIGVsZW1lbnRcbiAgICBjb25zdCBhbmNob3JPZmZzZXQgPSBnZXRBbmNob3JPZmZzZXQoKTtcblxuICAgIC8vIENhbGN1bGF0ZSBlbGVtZW50IHBvc2l0aW9uaW5nXG4gICAgbGV0IHRvcCA9IGFuY2hvck9mZnNldC50b3AgLSBlbGVtVHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsO1xuICAgIGxldCBsZWZ0ID0gYW5jaG9yT2Zmc2V0LmxlZnQgLSBlbGVtVHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWw7XG4gICAgY29uc3QgYm90dG9tID0gdG9wICsgZWxlbVJlY3QuaGVpZ2h0O1xuICAgIGNvbnN0IHJpZ2h0ID0gbGVmdCArIGVsZW1SZWN0LndpZHRoO1xuXG4gICAgLy8gVXNlIHRoZSBwYXJlbnQgd2luZG93IG9mIHRoZSBhbmNob3JFbCBpZiBwcm92aWRlZFxuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KHJlc29sdmVBbmNob3JFbChhbmNob3JFbCkpO1xuXG4gICAgLy8gV2luZG93IHRocmVzaG9sZHMgdGFraW5nIHJlcXVpcmVkIG1hcmdpbiBpbnRvIGFjY291bnRcbiAgICBjb25zdCBoZWlnaHRUaHJlc2hvbGQgPSBjb250YWluZXJXaW5kb3cuaW5uZXJIZWlnaHQgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgY29uc3Qgd2lkdGhUaHJlc2hvbGQgPSBjb250YWluZXJXaW5kb3cuaW5uZXJXaWR0aCAtIG1hcmdpblRocmVzaG9sZDtcblxuICAgIC8vIENoZWNrIGlmIHRoZSB2ZXJ0aWNhbCBheGlzIG5lZWRzIHNoaWZ0aW5nXG4gICAgaWYgKG1hcmdpblRocmVzaG9sZCAhPT0gbnVsbCAmJiB0b3AgPCBtYXJnaW5UaHJlc2hvbGQpIHtcbiAgICAgIGNvbnN0IGRpZmYgPSB0b3AgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgICB0b3AgLT0gZGlmZjtcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4udmVydGljYWwgKz0gZGlmZjtcbiAgICB9IGVsc2UgaWYgKG1hcmdpblRocmVzaG9sZCAhPT0gbnVsbCAmJiBib3R0b20gPiBoZWlnaHRUaHJlc2hvbGQpIHtcbiAgICAgIGNvbnN0IGRpZmYgPSBib3R0b20gLSBoZWlnaHRUaHJlc2hvbGQ7XG4gICAgICB0b3AgLT0gZGlmZjtcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4udmVydGljYWwgKz0gZGlmZjtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChlbGVtUmVjdC5oZWlnaHQgPiBoZWlnaHRUaHJlc2hvbGQgJiYgZWxlbVJlY3QuaGVpZ2h0ICYmIGhlaWdodFRocmVzaG9sZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGUgcG9wb3ZlciBjb21wb25lbnQgaXMgdG9vIHRhbGwuJywgYFNvbWUgcGFydCBvZiBpdCBjYW4gbm90IGJlIHNlZW4gb24gdGhlIHNjcmVlbiAoJHtlbGVtUmVjdC5oZWlnaHQgLSBoZWlnaHRUaHJlc2hvbGR9cHgpLmAsICdQbGVhc2UgY29uc2lkZXIgYWRkaW5nIGEgYG1heC1oZWlnaHRgIHRvIGltcHJvdmUgdGhlIHVzZXItZXhwZXJpZW5jZS4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGhvcml6b250YWwgYXhpcyBuZWVkcyBzaGlmdGluZ1xuICAgIGlmIChtYXJnaW5UaHJlc2hvbGQgIT09IG51bGwgJiYgbGVmdCA8IG1hcmdpblRocmVzaG9sZCkge1xuICAgICAgY29uc3QgZGlmZiA9IGxlZnQgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgICBsZWZ0IC09IGRpZmY7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwgKz0gZGlmZjtcbiAgICB9IGVsc2UgaWYgKHJpZ2h0ID4gd2lkdGhUaHJlc2hvbGQpIHtcbiAgICAgIGNvbnN0IGRpZmYgPSByaWdodCAtIHdpZHRoVGhyZXNob2xkO1xuICAgICAgbGVmdCAtPSBkaWZmO1xuICAgICAgZWxlbVRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsICs9IGRpZmY7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGAke01hdGgucm91bmQodG9wKX1weGAsXG4gICAgICBsZWZ0OiBgJHtNYXRoLnJvdW5kKGxlZnQpfXB4YCxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUoZWxlbVRyYW5zZm9ybU9yaWdpbilcbiAgICB9O1xuICB9LCBbYW5jaG9yRWwsIGFuY2hvclJlZmVyZW5jZSwgZ2V0QW5jaG9yT2Zmc2V0LCBnZXRUcmFuc2Zvcm1PcmlnaW4sIG1hcmdpblRocmVzaG9sZF0pO1xuICBjb25zdCBbaXNQb3NpdGlvbmVkLCBzZXRJc1Bvc2l0aW9uZWRdID0gUmVhY3QudXNlU3RhdGUob3Blbik7XG4gIGNvbnN0IHNldFBvc2l0aW9uaW5nU3R5bGVzID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBwYXBlclJlZi5jdXJyZW50O1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwb3NpdGlvbmluZyA9IGdldFBvc2l0aW9uaW5nU3R5bGUoZWxlbWVudCk7XG4gICAgaWYgKHBvc2l0aW9uaW5nLnRvcCAhPT0gbnVsbCkge1xuICAgICAgZWxlbWVudC5zdHlsZS50b3AgPSBwb3NpdGlvbmluZy50b3A7XG4gICAgfVxuICAgIGlmIChwb3NpdGlvbmluZy5sZWZ0ICE9PSBudWxsKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSBwb3NpdGlvbmluZy5sZWZ0O1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IHBvc2l0aW9uaW5nLnRyYW5zZm9ybU9yaWdpbjtcbiAgICBzZXRJc1Bvc2l0aW9uZWQodHJ1ZSk7XG4gIH0sIFtnZXRQb3NpdGlvbmluZ1N0eWxlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRpc2FibGVTY3JvbGxMb2NrKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc2V0UG9zaXRpb25pbmdTdHlsZXMpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHNldFBvc2l0aW9uaW5nU3R5bGVzKTtcbiAgfSwgW2FuY2hvckVsLCBkaXNhYmxlU2Nyb2xsTG9jaywgc2V0UG9zaXRpb25pbmdTdHlsZXNdKTtcbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSAoZWxlbWVudCwgaXNBcHBlYXJpbmcpID0+IHtcbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhlbGVtZW50LCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICAgIHNldFBvc2l0aW9uaW5nU3R5bGVzKCk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUV4aXRlZCA9ICgpID0+IHtcbiAgICBzZXRJc1Bvc2l0aW9uZWQoZmFsc2UpO1xuICB9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICAgIH1cbiAgfSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCAoKSA9PiBvcGVuID8ge1xuICAgIHVwZGF0ZVBvc2l0aW9uOiAoKSA9PiB7XG4gICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICAgIH1cbiAgfSA6IG51bGwsIFtvcGVuLCBzZXRQb3NpdGlvbmluZ1N0eWxlc10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghb3Blbikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlUmVzaXplID0gZGVib3VuY2UoKCkgPT4ge1xuICAgICAgc2V0UG9zaXRpb25pbmdTdHlsZXMoKTtcbiAgICB9KTtcbiAgICBjb25zdCBjb250YWluZXJXaW5kb3cgPSBvd25lcldpbmRvdyhhbmNob3JFbCk7XG4gICAgY29udGFpbmVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgY29udGFpbmVyV2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgfTtcbiAgfSwgW2FuY2hvckVsLCBvcGVuLCBzZXRQb3NpdGlvbmluZ1N0eWxlc10pO1xuICBsZXQgdHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uUHJvcDtcbiAgaWYgKHRyYW5zaXRpb25EdXJhdGlvblByb3AgPT09ICdhdXRvJyAmJiAhVHJhbnNpdGlvbkNvbXBvbmVudC5tdWlTdXBwb3J0QXV0bykge1xuICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIElmIHRoZSBjb250YWluZXIgcHJvcCBpcyBwcm92aWRlZCwgdXNlIHRoYXRcbiAgLy8gSWYgdGhlIGFuY2hvckVsIHByb3AgaXMgcHJvdmlkZWQsIHVzZSBpdHMgcGFyZW50IGJvZHkgZWxlbWVudCBhcyB0aGUgY29udGFpbmVyXG4gIC8vIElmIG5laXRoZXIgYXJlIHByb3ZpZGVkIGxldCB0aGUgTW9kYWwgdGFrZSBjYXJlIG9mIGNob29zaW5nIHRoZSBjb250YWluZXJcbiAgY29uc3QgY29udGFpbmVyID0gY29udGFpbmVyUHJvcCB8fCAoYW5jaG9yRWwgPyBvd25lckRvY3VtZW50KHJlc29sdmVBbmNob3JFbChhbmNob3JFbCkpLmJvZHkgOiB1bmRlZmluZWQpO1xuICBjb25zdCBSb290U2xvdCA9IChfc2xvdHMkcm9vdCA9IHNsb3RzID09IG51bGwgPyB2b2lkIDAgOiBzbG90cy5yb290KSAhPSBudWxsID8gX3Nsb3RzJHJvb3QgOiBQb3BvdmVyUm9vdDtcbiAgY29uc3QgUGFwZXJTbG90ID0gKF9zbG90cyRwYXBlciA9IHNsb3RzID09IG51bGwgPyB2b2lkIDAgOiBzbG90cy5wYXBlcikgIT0gbnVsbCA/IF9zbG90cyRwYXBlciA6IFBvcG92ZXJQYXBlcjtcbiAgY29uc3QgcGFwZXJQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IFBhcGVyU2xvdCxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogX2V4dGVuZHMoe30sIGV4dGVybmFsUGFwZXJTbG90UHJvcHMsIHtcbiAgICAgIHN0eWxlOiBpc1Bvc2l0aW9uZWQgPyBleHRlcm5hbFBhcGVyU2xvdFByb3BzLnN0eWxlIDogX2V4dGVuZHMoe30sIGV4dGVybmFsUGFwZXJTbG90UHJvcHMuc3R5bGUsIHtcbiAgICAgICAgb3BhY2l0eTogMFxuICAgICAgfSlcbiAgICB9KSxcbiAgICBhZGRpdGlvbmFsUHJvcHM6IHtcbiAgICAgIGVsZXZhdGlvbixcbiAgICAgIHJlZjogaGFuZGxlUGFwZXJSZWZcbiAgICB9LFxuICAgIG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucGFwZXIsIGV4dGVybmFsUGFwZXJTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGV4dGVybmFsUGFwZXJTbG90UHJvcHMuY2xhc3NOYW1lKVxuICB9KTtcbiAgY29uc3QgX3VzZVNsb3RQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgICBlbGVtZW50VHlwZTogUm9vdFNsb3QsXG4gICAgICBleHRlcm5hbFNsb3RQcm9wczogKHNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogc2xvdFByb3BzLnJvb3QpIHx8IHt9LFxuICAgICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgICBhZGRpdGlvbmFsUHJvcHM6IHtcbiAgICAgICAgcmVmLFxuICAgICAgICBzbG90UHJvcHM6IHtcbiAgICAgICAgICBiYWNrZHJvcDoge1xuICAgICAgICAgICAgaW52aXNpYmxlOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIG9wZW5cbiAgICAgIH0sXG4gICAgICBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICAgIH0pLFxuICAgIHtcbiAgICAgIHNsb3RQcm9wczogcm9vdFNsb3RQcm9wc1Byb3BcbiAgICB9ID0gX3VzZVNsb3RQcm9wcyxcbiAgICByb290UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdXNlU2xvdFByb3BzLCBfZXhjbHVkZWQzKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJvb3RTbG90LCBfZXh0ZW5kcyh7fSwgcm9vdFByb3BzLCAhaXNIb3N0Q29tcG9uZW50KFJvb3RTbG90KSAmJiB7XG4gICAgc2xvdFByb3BzOiByb290U2xvdFByb3BzUHJvcCxcbiAgICBkaXNhYmxlU2Nyb2xsTG9ja1xuICB9LCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgIGluOiBvcGVuLFxuICAgICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gICAgfSwgVHJhbnNpdGlvblByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goUGFwZXJTbG90LCBfZXh0ZW5kcyh7fSwgcGFwZXJQcm9wcywge1xuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pKVxuICAgIH0pKVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBvcG92ZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQSByZWYgZm9yIGltcGVyYXRpdmUgYWN0aW9ucy5cbiAgICogSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgdXBkYXRlUG9zaXRpb24oKSBhY3Rpb24uXG4gICAqL1xuICBhY3Rpb246IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQsIFtQb3BvdmVyVmlydHVhbEVsZW1lbnRdKC9tYXRlcmlhbC11aS9yZWFjdC1wb3BvdmVyLyN2aXJ0dWFsLWVsZW1lbnQpLFxuICAgKiBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuXG4gICAqIEl0J3MgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKi9cbiAgYW5jaG9yRWw6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSwgcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5vcGVuICYmICghcHJvcHMuYW5jaG9yUmVmZXJlbmNlIHx8IHByb3BzLmFuY2hvclJlZmVyZW5jZSA9PT0gJ2FuY2hvckVsJykpIHtcbiAgICAgIGNvbnN0IHJlc29sdmVkQW5jaG9yRWwgPSByZXNvbHZlQW5jaG9yRWwocHJvcHMuYW5jaG9yRWwpO1xuICAgICAgaWYgKHJlc29sdmVkQW5jaG9yRWwgJiYgcmVzb2x2ZWRBbmNob3JFbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICBjb25zdCBib3ggPSByZXNvbHZlZEFuY2hvckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJiBib3gudG9wID09PSAwICYmIGJveC5sZWZ0ID09PSAwICYmIGJveC5yaWdodCA9PT0gMCAmJiBib3guYm90dG9tID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihbJ01VSTogVGhlIGBhbmNob3JFbGAgcHJvcCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50IGlzIGludmFsaWQuJywgJ1RoZSBhbmNob3IgZWxlbWVudCBzaG91bGQgYmUgcGFydCBvZiB0aGUgZG9jdW1lbnQgbGF5b3V0LicsIFwiTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHByZXNlbnQgaW4gdGhlIGRvY3VtZW50IG9yIHRoYXQgaXQncyBub3QgZGlzcGxheSBub25lLlwiXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsIGBJdCBzaG91bGQgYmUgYW4gRWxlbWVudCBvciBQb3BvdmVyVmlydHVhbEVsZW1lbnQgaW5zdGFuY2UgYnV0IGl0J3MgXFxgJHtyZXNvbHZlZEFuY2hvckVsfVxcYCBpbnN0ZWFkLmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgcG9pbnQgb24gdGhlIGFuY2hvciB3aGVyZSB0aGUgcG9wb3ZlcidzXG4gICAqIGBhbmNob3JFbGAgd2lsbCBhdHRhY2ggdG8uIFRoaXMgaXMgbm90IHVzZWQgd2hlbiB0aGVcbiAgICogYW5jaG9yUmVmZXJlbmNlIGlzICdhbmNob3JQb3NpdGlvbicuXG4gICAqXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbV07XG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBjZW50ZXIsIHJpZ2h0XS5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICogICBob3Jpem9udGFsOiAnbGVmdCcsXG4gICAqIH1cbiAgICovXG4gIGFuY2hvck9yaWdpbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBob3Jpem9udGFsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnbGVmdCcsICdyaWdodCddKSwgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWQsXG4gICAgdmVydGljYWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICdjZW50ZXInLCAndG9wJ10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZFxuICB9KSxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvc2l0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICogVGhlIGNvb3JkaW5hdGVzIGFyZSByZWxhdGl2ZSB0byB0aGUgYXBwbGljYXRpb24ncyBjbGllbnQgYXJlYS5cbiAgICovXG4gIGFuY2hvclBvc2l0aW9uOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGxlZnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB0b3A6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxuICB9KSxcbiAgLyoqXG4gICAqIFRoaXMgZGV0ZXJtaW5lcyB3aGljaCBhbmNob3IgcHJvcCB0byByZWZlciB0byB3aGVuIHNldHRpbmdcbiAgICogdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKiBAZGVmYXVsdCAnYW5jaG9yRWwnXG4gICAqL1xuICBhbmNob3JSZWZlcmVuY2U6IFByb3BUeXBlcy5vbmVPZihbJ2FuY2hvckVsJywgJ2FuY2hvclBvc2l0aW9uJywgJ25vbmUnXSksXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBwYXNzZWQgdG8gdGhlIE1vZGFsIGNvbXBvbmVudC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgYW5jaG9yRWwncyB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBzY3JvbGwgbG9jayBiZWhhdmlvci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVTY3JvbGxMb2NrOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBlbGV2YXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqIEBkZWZhdWx0IDhcbiAgICovXG4gIGVsZXZhdGlvbjogaW50ZWdlclByb3BUeXBlLFxuICAvKipcbiAgICogU3BlY2lmaWVzIGhvdyBjbG9zZSB0byB0aGUgZWRnZSBvZiB0aGUgd2luZG93IHRoZSBwb3BvdmVyIGNhbiBhcHBlYXIuXG4gICAqIElmIG51bGwsIHRoZSBwb3BvdmVyIHdpbGwgbm90IGJlIGNvbnN0cmFpbmVkIGJ5IHRoZSB3aW5kb3cuXG4gICAqIEBkZWZhdWx0IDE2XG4gICAqL1xuICBtYXJnaW5UaHJlc2hvbGQ6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBUaGUgYHJlYXNvbmAgcGFyYW1ldGVyIGNhbiBvcHRpb25hbGx5IGJlIHVzZWQgdG8gY29udHJvbCB0aGUgcmVzcG9uc2UgdG8gYG9uQ2xvc2VgLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BQYXBlcmBdKC9tYXRlcmlhbC11aS9hcGkvcGFwZXIvKSBlbGVtZW50LlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIGBzbG90UHJvcHMucGFwZXJgIGFuZCB3aWxsIGJlIG92ZXJyaWRlbiBieSBpdCBpZiBib3RoIGFyZSB1c2VkLlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYHNsb3RQcm9wcy5wYXBlcmAgaW5zdGVhZC5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLnNoYXBlKHtcbiAgICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcGFwZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgcm9vdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBwYXBlcjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBwb3BvdmVyIHdoaWNoXG4gICAqIHdpbGwgYXR0YWNoIHRvIHRoZSBhbmNob3IncyBvcmlnaW4uXG4gICAqXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbSwgeChweCldO1xuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgY2VudGVyLCByaWdodCwgeChweCldLlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgdmVydGljYWw6ICd0b3AnLFxuICAgKiAgIGhvcml6b250YWw6ICdsZWZ0JyxcbiAgICogfVxuICAgKi9cbiAgdHJhbnNmb3JtT3JpZ2luOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhvcml6b250YWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NlbnRlcicsICdsZWZ0JywgJ3JpZ2h0J10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZCxcbiAgICB2ZXJ0aWNhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tJywgJ2NlbnRlcicsICd0b3AnXSksIFByb3BUeXBlcy5udW1iZXJdKS5pc1JlcXVpcmVkXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICogW0ZvbGxvdyB0aGlzIGd1aWRlXSgvbWF0ZXJpYWwtdWkvdHJhbnNpdGlvbnMvI3RyYW5zaXRpb25jb21wb25lbnQtcHJvcCkgdG8gbGVhcm4gbW9yZSBhYm91dCB0aGUgcmVxdWlyZW1lbnRzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgR3Jvd1xuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogU2V0IHRvICdhdXRvJyB0byBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSB0cmFuc2l0aW9uIHRpbWUgYmFzZWQgb24gaGVpZ2h0LlxuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgdHJhbnNpdGlvbiBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgZWxlbWVudCBpcyBiYXNlZCBvbiB0aGlzIFtgVHJhbnNpdGlvbmBdKGh0dHA6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uLykgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUG9wb3ZlcjsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1lbnVVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aU1lbnUnLCBzbG90KTtcbn1cbmNvbnN0IG1lbnVDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTWVudScsIFsncm9vdCcsICdwYXBlcicsICdsaXN0J10pO1xuZXhwb3J0IGRlZmF1bHQgbWVudUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25FbnRlcmluZ1wiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImF1dG9Gb2N1c1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZUF1dG9Gb2N1c0l0ZW1cIiwgXCJNZW51TGlzdFByb3BzXCIsIFwib25DbG9zZVwiLCBcIm9wZW5cIiwgXCJQYXBlclByb3BzXCIsIFwiUG9wb3ZlckNsYXNzZXNcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJUcmFuc2l0aW9uUHJvcHNcIiwgXCJ2YXJpYW50XCIsIFwic2xvdHNcIiwgXCJzbG90UHJvcHNcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgdXNlU2xvdFByb3BzIH0gZnJvbSAnQG11aS9iYXNlL3V0aWxzJztcbmltcG9ydCB7IEhUTUxFbGVtZW50VHlwZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IE1lbnVMaXN0IGZyb20gJy4uL01lbnVMaXN0JztcbmltcG9ydCBQb3BvdmVyLCB7IFBvcG92ZXJQYXBlciB9IGZyb20gJy4uL1BvcG92ZXInO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsgZ2V0TWVudVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vbWVudUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFJUTF9PUklHSU4gPSB7XG4gIHZlcnRpY2FsOiAndG9wJyxcbiAgaG9yaXpvbnRhbDogJ3JpZ2h0J1xufTtcbmNvbnN0IExUUl9PUklHSU4gPSB7XG4gIHZlcnRpY2FsOiAndG9wJyxcbiAgaG9yaXpvbnRhbDogJ2xlZnQnXG59O1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddLFxuICAgIHBhcGVyOiBbJ3BhcGVyJ10sXG4gICAgbGlzdDogWydsaXN0J11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRNZW51VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBNZW51Um9vdCA9IHN0eWxlZChQb3BvdmVyLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlNZW51JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSh7fSk7XG5leHBvcnQgY29uc3QgTWVudVBhcGVyID0gc3R5bGVkKFBvcG92ZXJQYXBlciwge1xuICBuYW1lOiAnTXVpTWVudScsXG4gIHNsb3Q6ICdQYXBlcicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnBhcGVyXG59KSh7XG4gIC8vIHNwZWNaOiBUaGUgbWF4aW11bSBoZWlnaHQgb2YgYSBzaW1wbGUgbWVudSBzaG91bGQgYmUgb25lIG9yIG1vcmUgcm93cyBsZXNzIHRoYW4gdGhlIHZpZXdcbiAgLy8gaGVpZ2h0LiBUaGlzIGVuc3VyZXMgYSB0YXBwYWJsZSBhcmVhIG91dHNpZGUgb2YgdGhlIHNpbXBsZSBtZW51IHdpdGggd2hpY2ggdG8gZGlzbWlzc1xuICAvLyB0aGUgbWVudS5cbiAgbWF4SGVpZ2h0OiAnY2FsYygxMDAlIC0gOTZweCknLFxuICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZyBmb3IgaU9TIDwgMTMuMFxuICBXZWJraXRPdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJ1xufSk7XG5jb25zdCBNZW51TWVudUxpc3QgPSBzdHlsZWQoTWVudUxpc3QsIHtcbiAgbmFtZTogJ011aU1lbnUnLFxuICBzbG90OiAnTGlzdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmxpc3Rcbn0pKHtcbiAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgb3V0bGluZTogMFxufSk7XG5jb25zdCBNZW51ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudShpblByb3BzLCByZWYpIHtcbiAgdmFyIF9zbG90cyRwYXBlciwgX3Nsb3RQcm9wcyRwYXBlcjtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTWVudSdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGF1dG9Gb2N1cyA9IHRydWUsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVBdXRvRm9jdXNJdGVtID0gZmFsc2UsXG4gICAgICBNZW51TGlzdFByb3BzID0ge30sXG4gICAgICBvbkNsb3NlLFxuICAgICAgb3BlbixcbiAgICAgIFBhcGVyUHJvcHMgPSB7fSxcbiAgICAgIFBvcG92ZXJDbGFzc2VzLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gJ2F1dG8nLFxuICAgICAgVHJhbnNpdGlvblByb3BzOiB7XG4gICAgICAgIG9uRW50ZXJpbmdcbiAgICAgIH0gPSB7fSxcbiAgICAgIHZhcmlhbnQgPSAnc2VsZWN0ZWRNZW51JyxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICBzbG90UHJvcHMgPSB7fVxuICAgIH0gPSBwcm9wcyxcbiAgICBUcmFuc2l0aW9uUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcy5UcmFuc2l0aW9uUHJvcHMsIF9leGNsdWRlZCksXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgaXNSdGwgPSB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYXV0b0ZvY3VzLFxuICAgIGRpc2FibGVBdXRvRm9jdXNJdGVtLFxuICAgIE1lbnVMaXN0UHJvcHMsXG4gICAgb25FbnRlcmluZyxcbiAgICBQYXBlclByb3BzLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICBUcmFuc2l0aW9uUHJvcHMsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBhdXRvRm9jdXNJdGVtID0gYXV0b0ZvY3VzICYmICFkaXNhYmxlQXV0b0ZvY3VzSXRlbSAmJiBvcGVuO1xuICBjb25zdCBtZW51TGlzdEFjdGlvbnNSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZUVudGVyaW5nID0gKGVsZW1lbnQsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgaWYgKG1lbnVMaXN0QWN0aW9uc1JlZi5jdXJyZW50KSB7XG4gICAgICBtZW51TGlzdEFjdGlvbnNSZWYuY3VycmVudC5hZGp1c3RTdHlsZUZvclNjcm9sbGJhcihlbGVtZW50LCB0aGVtZSk7XG4gICAgfVxuICAgIGlmIChvbkVudGVyaW5nKSB7XG4gICAgICBvbkVudGVyaW5nKGVsZW1lbnQsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUxpc3RLZXlEb3duID0gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdUYWInKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ3RhYktleURvd24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIHRoZSBpbmRleCBvZiB0aGUgaXRlbSBzaG91bGQgcmVjZWl2ZSBmb2N1c1xuICAgKiBpbiBhIGB2YXJpYW50PVwic2VsZWN0ZWRNZW51XCJgIGl0J3MgdGhlIGZpcnN0IGBzZWxlY3RlZGAgaXRlbVxuICAgKiBvdGhlcndpc2UgaXQncyB0aGUgdmVyeSBmaXJzdCBpdGVtLlxuICAgKi9cbiAgbGV0IGFjdGl2ZUl0ZW1JbmRleCA9IC0xO1xuICAvLyBzaW5jZSB3ZSBpbmplY3QgZm9jdXMgcmVsYXRlZCBwcm9wcyBpbnRvIGNoaWxkcmVuIHdlIGhhdmUgdG8gZG8gYSBsb29rYWhlYWRcbiAgLy8gdG8gY2hlY2sgaWYgdGhlcmUgaXMgYSBgc2VsZWN0ZWRgIGl0ZW0uIFdlJ3JlIGxvb2tpbmcgZm9yIHRoZSBsYXN0IGBzZWxlY3RlZGBcbiAgLy8gaXRlbSBhbmQgdXNlIHRoZSBmaXJzdCB2YWxpZCBpdGVtIGFzIGEgZmFsbGJhY2tcbiAgUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGlzRnJhZ21lbnQoY2hpbGQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTVVJOiBUaGUgTWVudSBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBpZiAodmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScgJiYgY2hpbGQucHJvcHMuc2VsZWN0ZWQpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgUGFwZXJTbG90ID0gKF9zbG90cyRwYXBlciA9IHNsb3RzLnBhcGVyKSAhPSBudWxsID8gX3Nsb3RzJHBhcGVyIDogTWVudVBhcGVyO1xuICBjb25zdCBwYXBlckV4dGVybmFsU2xvdFByb3BzID0gKF9zbG90UHJvcHMkcGFwZXIgPSBzbG90UHJvcHMucGFwZXIpICE9IG51bGwgPyBfc2xvdFByb3BzJHBhcGVyIDogUGFwZXJQcm9wcztcbiAgY29uc3Qgcm9vdFNsb3RQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IHNsb3RzLnJvb3QsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IHNsb3RQcm9wcy5yb290LFxuICAgIG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy5yb290LCBjbGFzc05hbWVdXG4gIH0pO1xuICBjb25zdCBwYXBlclNsb3RQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IFBhcGVyU2xvdCxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogcGFwZXJFeHRlcm5hbFNsb3RQcm9wcyxcbiAgICBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5wYXBlclxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KE1lbnVSb290LCBfZXh0ZW5kcyh7XG4gICAgb25DbG9zZTogb25DbG9zZSxcbiAgICBhbmNob3JPcmlnaW46IHtcbiAgICAgIHZlcnRpY2FsOiAnYm90dG9tJyxcbiAgICAgIGhvcml6b250YWw6IGlzUnRsID8gJ3JpZ2h0JyA6ICdsZWZ0J1xuICAgIH0sXG4gICAgdHJhbnNmb3JtT3JpZ2luOiBpc1J0bCA/IFJUTF9PUklHSU4gOiBMVFJfT1JJR0lOLFxuICAgIHNsb3RzOiB7XG4gICAgICBwYXBlcjogUGFwZXJTbG90LFxuICAgICAgcm9vdDogc2xvdHMucm9vdFxuICAgIH0sXG4gICAgc2xvdFByb3BzOiB7XG4gICAgICByb290OiByb290U2xvdFByb3BzLFxuICAgICAgcGFwZXI6IHBhcGVyU2xvdFByb3BzXG4gICAgfSxcbiAgICBvcGVuOiBvcGVuLFxuICAgIHJlZjogcmVmLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgIFRyYW5zaXRpb25Qcm9wczogX2V4dGVuZHMoe1xuICAgICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmdcbiAgICB9LCBUcmFuc2l0aW9uUHJvcHMpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBQb3BvdmVyQ2xhc3NlcyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goTWVudU1lbnVMaXN0LCBfZXh0ZW5kcyh7XG4gICAgICBvbktleURvd246IGhhbmRsZUxpc3RLZXlEb3duLFxuICAgICAgYWN0aW9uczogbWVudUxpc3RBY3Rpb25zUmVmLFxuICAgICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMgJiYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEgfHwgZGlzYWJsZUF1dG9Gb2N1c0l0ZW0pLFxuICAgICAgYXV0b0ZvY3VzSXRlbTogYXV0b0ZvY3VzSXRlbSxcbiAgICAgIHZhcmlhbnQ6IHZhcmlhbnRcbiAgICB9LCBNZW51TGlzdFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5saXN0LCBNZW51TGlzdFByb3BzLmNsYXNzTmFtZSksXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgb25lLlxuICAgKiBJdCdzIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgbWVudS5cbiAgICovXG4gIGFuY2hvckVsOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCAoRGVmYXVsdCkgd2lsbCBmb2N1cyB0aGUgYFtyb2xlPVwibWVudVwiXWAgaWYgbm8gZm9jdXNhYmxlIGNoaWxkIGlzIGZvdW5kLiBEaXNhYmxlZFxuICAgKiBjaGlsZHJlbiBhcmUgbm90IGZvY3VzYWJsZS4gSWYgeW91IHNldCB0aGlzIHByb3AgdG8gYGZhbHNlYCBmb2N1cyB3aWxsIGJlIHBsYWNlZFxuICAgKiBvbiB0aGUgcGFyZW50IG1vZGFsIGNvbnRhaW5lci4gVGhpcyBoYXMgc2V2ZXJlIGFjY2Vzc2liaWxpdHkgaW1wbGljYXRpb25zXG4gICAqIGFuZCBzaG91bGQgb25seSBiZSBjb25zaWRlcmVkIGlmIHlvdSBtYW5hZ2UgZm9jdXMgb3RoZXJ3aXNlLlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTWVudSBjb250ZW50cywgbm9ybWFsbHkgYE1lbnVJdGVtYHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogV2hlbiBvcGVuaW5nIHRoZSBtZW51IHdpbGwgbm90IGZvY3VzIHRoZSBhY3RpdmUgaXRlbSBidXQgdGhlIGBbcm9sZT1cIm1lbnVcIl1gXG4gICAqIHVubGVzcyBgYXV0b0ZvY3VzYCBpcyBhbHNvIHNldCB0byBgZmFsc2VgLiBOb3QgdXNpbmcgdGhlIGRlZmF1bHQgbWVhbnMgbm90XG4gICAqIGZvbGxvd2luZyBXQUktQVJJQSBhdXRob3JpbmcgcHJhY3RpY2VzLiBQbGVhc2UgYmUgY29uc2lkZXJhdGUgYWJvdXQgcG9zc2libGVcbiAgICogYWNjZXNzaWJpbGl0eSBpbXBsaWNhdGlvbnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzSXRlbTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVMaXN0YF0oL21hdGVyaWFsLXVpL2FwaS9tZW51LWxpc3QvKSBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgTWVudUxpc3RQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAsIGBcInRhYktleURvd25cImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBQYXBlclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogYGNsYXNzZXNgIHByb3AgYXBwbGllZCB0byB0aGUgW2BQb3BvdmVyYF0oL21hdGVyaWFsLXVpL2FwaS9wb3BvdmVyLykgZWxlbWVudC5cbiAgICovXG4gIFBvcG92ZXJDbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcGFwZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgcm9vdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBwYXBlcjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBsZW5ndGggb2YgdGhlIHRyYW5zaXRpb24gaW4gYG1zYCwgb3IgJ2F1dG8nXG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSksXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSB0cmFuc2l0aW9uIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBlbGVtZW50IGlzIGJhc2VkIG9uIHRoaXMgW2BUcmFuc2l0aW9uYF0oaHR0cDovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3RyYW5zaXRpb24vKSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBUcmFuc2l0aW9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuIFVzZSBgbWVudWAgdG8gcHJldmVudCBzZWxlY3RlZCBpdGVtcyBmcm9tIGltcGFjdGluZyB0aGUgaW5pdGlhbCBmb2N1cy5cbiAgICogQGRlZmF1bHQgJ3NlbGVjdGVkTWVudSdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ21lbnUnLCAnc2VsZWN0ZWRNZW51J10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTWVudTsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE5hdGl2ZVNlbGVjdFV0aWxpdHlDbGFzc2VzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlOYXRpdmVTZWxlY3QnLCBzbG90KTtcbn1cbmNvbnN0IG5hdGl2ZVNlbGVjdENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlOYXRpdmVTZWxlY3QnLCBbJ3Jvb3QnLCAnc2VsZWN0JywgJ211bHRpcGxlJywgJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCcsICdkaXNhYmxlZCcsICdpY29uJywgJ2ljb25PcGVuJywgJ2ljb25GaWxsZWQnLCAnaWNvbk91dGxpbmVkJywgJ2ljb25TdGFuZGFyZCcsICduYXRpdmVJbnB1dCcsICdlcnJvciddKTtcbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZVNlbGVjdENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZWRcIiwgXCJlcnJvclwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFJlZlwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBuYXRpdmVTZWxlY3RDbGFzc2VzLCB7IGdldE5hdGl2ZVNlbGVjdFV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnLi9uYXRpdmVTZWxlY3RDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBkaXNhYmxlZCxcbiAgICBtdWx0aXBsZSxcbiAgICBvcGVuLFxuICAgIGVycm9yXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICBzZWxlY3Q6IFsnc2VsZWN0JywgdmFyaWFudCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgbXVsdGlwbGUgJiYgJ211bHRpcGxlJywgZXJyb3IgJiYgJ2Vycm9yJ10sXG4gICAgaWNvbjogWydpY29uJywgYGljb24ke2NhcGl0YWxpemUodmFyaWFudCl9YCwgb3BlbiAmJiAnaWNvbk9wZW4nLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldE5hdGl2ZVNlbGVjdFV0aWxpdHlDbGFzc2VzLCBjbGFzc2VzKTtcbn07XG5leHBvcnQgY29uc3QgbmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzID0gKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgTW96QXBwZWFyYW5jZTogJ25vbmUnLFxuICAvLyBSZXNldFxuICBXZWJraXRBcHBlYXJhbmNlOiAnbm9uZScsXG4gIC8vIFJlc2V0XG4gIC8vIFdoZW4gaW50ZXJhY3RpbmcgcXVpY2tseSwgdGhlIHRleHQgY2FuIGVuZCB1cCBzZWxlY3RlZC5cbiAgLy8gTmF0aXZlIHNlbGVjdCBjYW4ndCBiZSBzZWxlY3RlZCBlaXRoZXIuXG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgYm9yZGVyUmFkaXVzOiAwLFxuICAvLyBSZXNldFxuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgJyY6Zm9jdXMnOiBfZXh0ZW5kcyh7fSwgdGhlbWUudmFycyA/IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLmNvbW1vbi5vbkJhY2tncm91bmRDaGFubmVsfSAvIDAuMDUpYFxuICB9IDoge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4wNSknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wNSknXG4gIH0sIHtcbiAgICBib3JkZXJSYWRpdXM6IDAgLy8gUmVzZXQgQ2hyb21lIHN0eWxlXG4gIH0pLFxuICAvLyBSZW1vdmUgSUUxMSBhcnJvd1xuICAnJjo6LW1zLWV4cGFuZCc6IHtcbiAgICBkaXNwbGF5OiAnbm9uZSdcbiAgfSxcbiAgW2AmLiR7bmF0aXZlU2VsZWN0Q2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gIH0sXG4gICcmW211bHRpcGxlXSc6IHtcbiAgICBoZWlnaHQ6ICdhdXRvJ1xuICB9LFxuICAnJjpub3QoW211bHRpcGxlXSkgb3B0aW9uLCAmOm5vdChbbXVsdGlwbGVdKSBvcHRncm91cCc6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmJhY2tncm91bmQucGFwZXJcbiAgfSxcbiAgLy8gQnVtcCBzcGVjaWZpY2l0eSB0byBhbGxvdyBleHRlbmRpbmcgY3VzdG9tIGlucHV0c1xuICAnJiYmJzoge1xuICAgIHBhZGRpbmdSaWdodDogMjQsXG4gICAgbWluV2lkdGg6IDE2IC8vIFNvIGl0IGRvZXNuJ3QgY29sbGFwc2UuXG4gIH1cbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2ZpbGxlZCcgJiYge1xuICAnJiYmJzoge1xuICAgIHBhZGRpbmdSaWdodDogMzJcbiAgfVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgYm9yZGVyUmFkaXVzOiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAnJjpmb2N1cyc6IHtcbiAgICBib3JkZXJSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMgLy8gUmVzZXQgdGhlIHJlc2V0IGZvciBDaHJvbWUgc3R5bGVcbiAgfSxcbiAgJyYmJic6IHtcbiAgICBwYWRkaW5nUmlnaHQ6IDMyXG4gIH1cbn0pO1xuY29uc3QgTmF0aXZlU2VsZWN0U2VsZWN0ID0gc3R5bGVkKCdzZWxlY3QnLCB7XG4gIG5hbWU6ICdNdWlOYXRpdmVTZWxlY3QnLFxuICBzbG90OiAnU2VsZWN0JyxcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHJvb3RTaG91bGRGb3J3YXJkUHJvcCxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5zZWxlY3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCBvd25lclN0YXRlLmVycm9yICYmIHN0eWxlcy5lcnJvciwge1xuICAgICAgW2AmLiR7bmF0aXZlU2VsZWN0Q2xhc3Nlcy5tdWx0aXBsZX1gXTogc3R5bGVzLm11bHRpcGxlXG4gICAgfV07XG4gIH1cbn0pKG5hdGl2ZVNlbGVjdFNlbGVjdFN0eWxlcyk7XG5leHBvcnQgY29uc3QgbmF0aXZlU2VsZWN0SWNvblN0eWxlcyA9ICh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIC8vIFdlIHVzZSBhIHBvc2l0aW9uIGFic29sdXRlIG92ZXIgYSBmbGV4Ym94IGluIG9yZGVyIHRvIGZvcndhcmQgdGhlIHBvaW50ZXIgZXZlbnRzXG4gIC8vIHRvIHRoZSBpbnB1dCBhbmQgdG8gc3VwcG9ydCB3cmFwcGluZyB0YWdzLi5cbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHJpZ2h0OiAwLFxuICB0b3A6ICdjYWxjKDUwJSAtIC41ZW0pJyxcbiAgLy8gQ2VudGVyIHZlcnRpY2FsbHksIGhlaWdodCBpcyAxZW1cbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAvLyBEb24ndCBibG9jayBwb2ludGVyIGV2ZW50cyBvbiB0aGUgc2VsZWN0IHVuZGVyIHRoZSBpY29uLlxuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgW2AmLiR7bmF0aXZlU2VsZWN0Q2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgfVxufSwgb3duZXJTdGF0ZS5vcGVuICYmIHtcbiAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdmaWxsZWQnICYmIHtcbiAgcmlnaHQ6IDdcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gIHJpZ2h0OiA3XG59KTtcbmNvbnN0IE5hdGl2ZVNlbGVjdEljb24gPSBzdHlsZWQoJ3N2ZycsIHtcbiAgbmFtZTogJ011aU5hdGl2ZVNlbGVjdCcsXG4gIHNsb3Q6ICdJY29uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5pY29uLCBvd25lclN0YXRlLnZhcmlhbnQgJiYgc3R5bGVzW2BpY29uJHtjYXBpdGFsaXplKG93bmVyU3RhdGUudmFyaWFudCl9YF0sIG93bmVyU3RhdGUub3BlbiAmJiBzdHlsZXMuaWNvbk9wZW5dO1xuICB9XG59KShuYXRpdmVTZWxlY3RJY29uU3R5bGVzKTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBOYXRpdmVTZWxlY3RJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdGl2ZVNlbGVjdElucHV0KHByb3BzLCByZWYpIHtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZWQsXG4gICAgICBlcnJvcixcbiAgICAgIEljb25Db21wb25lbnQsXG4gICAgICBpbnB1dFJlZixcbiAgICAgIHZhcmlhbnQgPSAnc3RhbmRhcmQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkaXNhYmxlZCxcbiAgICB2YXJpYW50LFxuICAgIGVycm9yXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KE5hdGl2ZVNlbGVjdFNlbGVjdCwgX2V4dGVuZHMoe1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnNlbGVjdCwgY2xhc3NOYW1lKSxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIHJlZjogaW5wdXRSZWYgfHwgcmVmXG4gICAgfSwgb3RoZXIpKSwgcHJvcHMubXVsdGlwbGUgPyBudWxsIDogLyojX19QVVJFX18qL19qc3goTmF0aXZlU2VsZWN0SWNvbiwge1xuICAgICAgYXM6IEljb25Db21wb25lbnQsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmljb25cbiAgICB9KV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE5hdGl2ZVNlbGVjdElucHV0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPG9wdGlvbj5gIGVsZW1lbnRzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBzZWxlY3QgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBuYXRpdmUgc2VsZWN0IGVsZW1lbnQuXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgc2VsZWN0YCBvciBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTmF0aXZlU2VsZWN0SW5wdXQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWxlY3RVdGlsaXR5Q2xhc3NlcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU2VsZWN0Jywgc2xvdCk7XG59XG5jb25zdCBzZWxlY3RDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU2VsZWN0JywgWydyb290JywgJ3NlbGVjdCcsICdtdWx0aXBsZScsICdmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnLCAnZGlzYWJsZWQnLCAnZm9jdXNlZCcsICdpY29uJywgJ2ljb25PcGVuJywgJ2ljb25GaWxsZWQnLCAnaWNvbk91dGxpbmVkJywgJ2ljb25TdGFuZGFyZCcsICduYXRpdmVJbnB1dCcsICdlcnJvciddKTtcbmV4cG9ydCBkZWZhdWx0IHNlbGVjdENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgZnJvbSBcIkBtdWkvdXRpbHMvZm9ybWF0TXVpRXJyb3JNZXNzYWdlXCI7XG52YXIgX3NwYW47XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIFwiYXJpYS1sYWJlbFwiLCBcImF1dG9Gb2N1c1wiLCBcImF1dG9XaWR0aFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdE9wZW5cIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc3BsYXlFbXB0eVwiLCBcImVycm9yXCIsIFwiSWNvbkNvbXBvbmVudFwiLCBcImlucHV0UmVmXCIsIFwibGFiZWxJZFwiLCBcIk1lbnVQcm9wc1wiLCBcIm11bHRpcGxlXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbG9zZVwiLCBcIm9uRm9jdXNcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJWYWx1ZVwiLCBcIlNlbGVjdERpc3BsYXlQcm9wc1wiLCBcInRhYkluZGV4XCIsIFwidHlwZVwiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyByZWZUeXBlLCB1bnN0YWJsZV91c2VJZCBhcyB1c2VJZCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBNZW51IGZyb20gJy4uL01lbnUvTWVudSc7XG5pbXBvcnQgeyBuYXRpdmVTZWxlY3RTZWxlY3RTdHlsZXMsIG5hdGl2ZVNlbGVjdEljb25TdHlsZXMgfSBmcm9tICcuLi9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXQnO1xuaW1wb3J0IHsgaXNGaWxsZWQgfSBmcm9tICcuLi9JbnB1dEJhc2UvdXRpbHMnO1xuaW1wb3J0IHN0eWxlZCwgeyBzbG90U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZUNvbnRyb2xsZWQgZnJvbSAnLi4vdXRpbHMvdXNlQ29udHJvbGxlZCc7XG5pbXBvcnQgc2VsZWN0Q2xhc3NlcywgeyBnZXRTZWxlY3RVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4vc2VsZWN0Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgU2VsZWN0U2VsZWN0ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlTZWxlY3QnLFxuICBzbG90OiAnU2VsZWN0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW1xuICAgIC8vIFdpbiBzcGVjaWZpY2l0eSBvdmVyIHRoZSBpbnB1dCBiYXNlXG4gICAge1xuICAgICAgW2AmLiR7c2VsZWN0Q2xhc3Nlcy5zZWxlY3R9YF06IHN0eWxlcy5zZWxlY3RcbiAgICB9LCB7XG4gICAgICBbYCYuJHtzZWxlY3RDbGFzc2VzLnNlbGVjdH1gXTogc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF1cbiAgICB9LCB7XG4gICAgICBbYCYuJHtzZWxlY3RDbGFzc2VzLmVycm9yfWBdOiBzdHlsZXMuZXJyb3JcbiAgICB9LCB7XG4gICAgICBbYCYuJHtzZWxlY3RDbGFzc2VzLm11bHRpcGxlfWBdOiBzdHlsZXMubXVsdGlwbGVcbiAgICB9XTtcbiAgfVxufSkobmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzLCB7XG4gIC8vIFdpbiBzcGVjaWZpY2l0eSBvdmVyIHRoZSBpbnB1dCBiYXNlXG4gIFtgJi4ke3NlbGVjdENsYXNzZXMuc2VsZWN0fWBdOiB7XG4gICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgLy8gUmVzZXRzIGZvciBtdWx0aXBsZSBzZWxlY3Qgd2l0aCBjaGlwc1xuICAgIG1pbkhlaWdodDogJzEuNDM3NWVtJyxcbiAgICAvLyBSZXF1aXJlZCBmb3Igc2VsZWN0XFx0ZXh0LWZpZWxkIGhlaWdodCBjb25zaXN0ZW5jeVxuICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgfVxufSk7XG5jb25zdCBTZWxlY3RJY29uID0gc3R5bGVkKCdzdmcnLCB7XG4gIG5hbWU6ICdNdWlTZWxlY3QnLFxuICBzbG90OiAnSWNvbicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuaWNvbiwgb3duZXJTdGF0ZS52YXJpYW50ICYmIHN0eWxlc1tgaWNvbiR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnZhcmlhbnQpfWBdLCBvd25lclN0YXRlLm9wZW4gJiYgc3R5bGVzLmljb25PcGVuXTtcbiAgfVxufSkobmF0aXZlU2VsZWN0SWNvblN0eWxlcyk7XG5jb25zdCBTZWxlY3ROYXRpdmVJbnB1dCA9IHN0eWxlZCgnaW5wdXQnLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHNsb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSAmJiBwcm9wICE9PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlTZWxlY3QnLFxuICBzbG90OiAnTmF0aXZlSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5uYXRpdmVJbnB1dFxufSkoe1xuICBib3R0b206IDAsXG4gIGxlZnQ6IDAsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBvcGFjaXR5OiAwLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG59KTtcbmZ1bmN0aW9uIGFyZUVxdWFsVmFsdWVzKGEsIGIpIHtcbiAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0JyAmJiBiICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH1cblxuICAvLyBUaGUgdmFsdWUgY291bGQgYmUgYSBudW1iZXIsIHRoZSBET00gd2lsbCBzdHJpbmdpZnkgaXQgYW55d2F5LlxuICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYik7XG59XG5mdW5jdGlvbiBpc0VtcHR5KGRpc3BsYXkpIHtcbiAgcmV0dXJuIGRpc3BsYXkgPT0gbnVsbCB8fCB0eXBlb2YgZGlzcGxheSA9PT0gJ3N0cmluZycgJiYgIWRpc3BsYXkudHJpbSgpO1xufVxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBkaXNhYmxlZCxcbiAgICBtdWx0aXBsZSxcbiAgICBvcGVuLFxuICAgIGVycm9yXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICBzZWxlY3Q6IFsnc2VsZWN0JywgdmFyaWFudCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgbXVsdGlwbGUgJiYgJ211bHRpcGxlJywgZXJyb3IgJiYgJ2Vycm9yJ10sXG4gICAgaWNvbjogWydpY29uJywgYGljb24ke2NhcGl0YWxpemUodmFyaWFudCl9YCwgb3BlbiAmJiAnaWNvbk9wZW4nLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXSxcbiAgICBuYXRpdmVJbnB1dDogWyduYXRpdmVJbnB1dCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBTZWxlY3RJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNlbGVjdElucHV0KHByb3BzLCByZWYpIHtcbiAgdmFyIF9NZW51UHJvcHMkc2xvdFByb3BzO1xuICBjb25zdCB7XG4gICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGFyaWFEZXNjcmliZWRieSxcbiAgICAgICdhcmlhLWxhYmVsJzogYXJpYUxhYmVsLFxuICAgICAgYXV0b0ZvY3VzLFxuICAgICAgYXV0b1dpZHRoLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkZWZhdWx0T3BlbixcbiAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgZGlzcGxheUVtcHR5LFxuICAgICAgZXJyb3IgPSBmYWxzZSxcbiAgICAgIEljb25Db21wb25lbnQsXG4gICAgICBpbnB1dFJlZjogaW5wdXRSZWZQcm9wLFxuICAgICAgbGFiZWxJZCxcbiAgICAgIE1lbnVQcm9wcyA9IHt9LFxuICAgICAgbXVsdGlwbGUsXG4gICAgICBuYW1lLFxuICAgICAgb25CbHVyLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbkNsb3NlLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIG9uT3BlbixcbiAgICAgIG9wZW46IG9wZW5Qcm9wLFxuICAgICAgcmVhZE9ubHksXG4gICAgICByZW5kZXJWYWx1ZSxcbiAgICAgIFNlbGVjdERpc3BsYXlQcm9wcyA9IHt9LFxuICAgICAgdGFiSW5kZXg6IHRhYkluZGV4UHJvcFxuICAgICAgLy8gY2F0Y2hpbmcgYHR5cGVgIGZyb20gSW5wdXQgd2hpY2ggbWFrZXMgbm8gc2Vuc2UgZm9yIFNlbGVjdElucHV0XG4gICAgICAsXG5cbiAgICAgIHZhbHVlOiB2YWx1ZVByb3AsXG4gICAgICB2YXJpYW50ID0gJ3N0YW5kYXJkJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlU3RhdGVdID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogdmFsdWVQcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSxcbiAgICBuYW1lOiAnU2VsZWN0J1xuICB9KTtcbiAgY29uc3QgW29wZW5TdGF0ZSwgc2V0T3BlblN0YXRlXSA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IG9wZW5Qcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRPcGVuLFxuICAgIG5hbWU6ICdTZWxlY3QnXG4gIH0pO1xuICBjb25zdCBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgZGlzcGxheVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgW2Rpc3BsYXlOb2RlLCBzZXREaXNwbGF5Tm9kZV0gPSBSZWFjdC51c2VTdGF0ZShudWxsKTtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnQ6IGlzT3BlbkNvbnRyb2xsZWRcbiAgfSA9IFJlYWN0LnVzZVJlZihvcGVuUHJvcCAhPSBudWxsKTtcbiAgY29uc3QgW21lbnVNaW5XaWR0aFN0YXRlLCBzZXRNZW51TWluV2lkdGhTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKHJlZiwgaW5wdXRSZWZQcm9wKTtcbiAgY29uc3QgaGFuZGxlRGlzcGxheVJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIGRpc3BsYXlSZWYuY3VycmVudCA9IG5vZGU7XG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIHNldERpc3BsYXlOb2RlKG5vZGUpO1xuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBhbmNob3JFbGVtZW50ID0gZGlzcGxheU5vZGUgPT0gbnVsbCA/IHZvaWQgMCA6IGRpc3BsYXlOb2RlLnBhcmVudE5vZGU7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoaGFuZGxlUmVmLCAoKSA9PiAoe1xuICAgIGZvY3VzOiAoKSA9PiB7XG4gICAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9LFxuICAgIG5vZGU6IGlucHV0UmVmLmN1cnJlbnQsXG4gICAgdmFsdWVcbiAgfSksIFt2YWx1ZV0pO1xuXG4gIC8vIFJlc2l6ZSBtZW51IG9uIGBkZWZhdWx0T3BlbmAgYXV0b21hdGljIHRvZ2dsZS5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZGVmYXVsdE9wZW4gJiYgb3BlblN0YXRlICYmIGRpc3BsYXlOb2RlICYmICFpc09wZW5Db250cm9sbGVkKSB7XG4gICAgICBzZXRNZW51TWluV2lkdGhTdGF0ZShhdXRvV2lkdGggPyBudWxsIDogYW5jaG9yRWxlbWVudC5jbGllbnRXaWR0aCk7XG4gICAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbZGlzcGxheU5vZGUsIGF1dG9XaWR0aF0pO1xuICAvLyBgaXNPcGVuQ29udHJvbGxlZGAgaXMgaWdub3JlZCBiZWNhdXNlIHRoZSBjb21wb25lbnQgc2hvdWxkIG5ldmVyIHN3aXRjaCBiZXR3ZWVuIGNvbnRyb2xsZWQgYW5kIHVuY29udHJvbGxlZCBtb2Rlcy5cbiAgLy8gYGRlZmF1bHRPcGVuYCBhbmQgYG9wZW5TdGF0ZWAgYXJlIGlnbm9yZWQgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY2FsbGJhY2tzLlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGRpc3BsYXlSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghbGFiZWxJZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgbGFiZWwgPSBvd25lckRvY3VtZW50KGRpc3BsYXlSZWYuY3VycmVudCkuZ2V0RWxlbWVudEJ5SWQobGFiZWxJZCk7XG4gICAgaWYgKGxhYmVsKSB7XG4gICAgICBjb25zdCBoYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICBpZiAoZ2V0U2VsZWN0aW9uKCkuaXNDb2xsYXBzZWQpIHtcbiAgICAgICAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGxhYmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlcik7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsYWJlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2xhYmVsSWRdKTtcbiAgY29uc3QgdXBkYXRlID0gKG9wZW4sIGV2ZW50KSA9PiB7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIGlmIChvbk9wZW4pIHtcbiAgICAgICAgb25PcGVuKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoIWlzT3BlbkNvbnRyb2xsZWQpIHtcbiAgICAgIHNldE1lbnVNaW5XaWR0aFN0YXRlKGF1dG9XaWR0aCA/IG51bGwgOiBhbmNob3JFbGVtZW50LmNsaWVudFdpZHRoKTtcbiAgICAgIHNldE9wZW5TdGF0ZShvcGVuKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IGV2ZW50ID0+IHtcbiAgICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdC1jbGlja1xuICAgIGlmIChldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSGlqYWNrIHRoZSBkZWZhdWx0IGZvY3VzIGJlaGF2aW9yLlxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgdXBkYXRlKHRydWUsIGV2ZW50KTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlQ2xvc2UgPSBldmVudCA9PiB7XG4gICAgdXBkYXRlKGZhbHNlLCBldmVudCk7XG4gIH07XG4gIGNvbnN0IGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKTtcblxuICAvLyBTdXBwb3J0IGF1dG9maWxsLlxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBldmVudCA9PiB7XG4gICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbkFycmF5LmZpbmQoY2hpbGRJdGVtID0+IGNoaWxkSXRlbS5wcm9wcy52YWx1ZSA9PT0gZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICBpZiAoY2hpbGQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRWYWx1ZVN0YXRlKGNoaWxkLnByb3BzLnZhbHVlKTtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCBjaGlsZCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVJdGVtQ2xpY2sgPSBjaGlsZCA9PiBldmVudCA9PiB7XG4gICAgbGV0IG5ld1ZhbHVlO1xuXG4gICAgLy8gV2UgdXNlIHRoZSB0YWJpbmRleCBhdHRyaWJ1dGUgdG8gc2lnbmFsIHRoZSBhdmFpbGFibGUgb3B0aW9ucy5cbiAgICBpZiAoIWV2ZW50LmN1cnJlbnRUYXJnZXQuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgbmV3VmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLnNsaWNlKCkgOiBbXTtcbiAgICAgIGNvbnN0IGl0ZW1JbmRleCA9IHZhbHVlLmluZGV4T2YoY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgaWYgKGl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgbmV3VmFsdWUucHVzaChjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZS5zcGxpY2UoaXRlbUluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmV3VmFsdWUgPSBjaGlsZC5wcm9wcy52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLnByb3BzLm9uQ2xpY2spIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICBzZXRWYWx1ZVN0YXRlKG5ld1ZhbHVlKTtcbiAgICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgICAvLyBSZWRlZmluZSB0YXJnZXQgdG8gYWxsb3cgbmFtZSBhbmQgdmFsdWUgdG8gYmUgcmVhZC5cbiAgICAgICAgLy8gVGhpcyBhbGxvd3Mgc2VhbWxlc3MgaW50ZWdyYXRpb24gd2l0aCB0aGUgbW9zdCBwb3B1bGFyIGZvcm0gbGlicmFyaWVzLlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL2lzc3Vlcy8xMzQ4NSNpc3N1ZWNvbW1lbnQtNjc2MDQ4NDkyXG4gICAgICAgIC8vIENsb25lIHRoZSBldmVudCB0byBub3Qgb3ZlcnJpZGUgYHRhcmdldGAgb2YgdGhlIG9yaWdpbmFsIGV2ZW50LlxuICAgICAgICBjb25zdCBuYXRpdmVFdmVudCA9IGV2ZW50Lm5hdGl2ZUV2ZW50IHx8IGV2ZW50O1xuICAgICAgICBjb25zdCBjbG9uZWRFdmVudCA9IG5ldyBuYXRpdmVFdmVudC5jb25zdHJ1Y3RvcihuYXRpdmVFdmVudC50eXBlLCBuYXRpdmVFdmVudCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbG9uZWRFdmVudCwgJ3RhcmdldCcsIHtcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG9uQ2hhbmdlKGNsb25lZEV2ZW50LCBjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghbXVsdGlwbGUpIHtcbiAgICAgIHVwZGF0ZShmYWxzZSwgZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IGV2ZW50ID0+IHtcbiAgICBpZiAoIXJlYWRPbmx5KSB7XG4gICAgICBjb25zdCB2YWxpZEtleXMgPSBbJyAnLCAnQXJyb3dVcCcsICdBcnJvd0Rvd24nLFxuICAgICAgLy8gVGhlIG5hdGl2ZSBzZWxlY3QgZG9lc24ndCByZXNwb25kIHRvIGVudGVyIG9uIG1hY09TLCBidXQgaXQncyByZWNvbW1lbmRlZCBieVxuICAgICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1dBSS9BUklBL2FwZy9wYXR0ZXJucy9jb21ib2JveC9leGFtcGxlcy9jb21ib2JveC1zZWxlY3Qtb25seS9cbiAgICAgICdFbnRlciddO1xuICAgICAgaWYgKHZhbGlkS2V5cy5pbmRleE9mKGV2ZW50LmtleSkgIT09IC0xKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHVwZGF0ZSh0cnVlLCBldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBvcGVuID0gZGlzcGxheU5vZGUgIT09IG51bGwgJiYgb3BlblN0YXRlO1xuICBjb25zdCBoYW5kbGVCbHVyID0gZXZlbnQgPT4ge1xuICAgIC8vIGlmIG9wZW4gZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uXG4gICAgaWYgKCFvcGVuICYmIG9uQmx1cikge1xuICAgICAgLy8gUHJlYWN0IHN1cHBvcnQsIHRhcmdldCBpcyByZWFkIG9ubHkgcHJvcGVydHkgb24gYSBuYXRpdmUgZXZlbnQuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICd0YXJnZXQnLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgZGVsZXRlIG90aGVyWydhcmlhLWludmFsaWQnXTtcbiAgbGV0IGRpc3BsYXk7XG4gIGxldCBkaXNwbGF5U2luZ2xlO1xuICBjb25zdCBkaXNwbGF5TXVsdGlwbGUgPSBbXTtcbiAgbGV0IGNvbXB1dGVEaXNwbGF5ID0gZmFsc2U7XG4gIGxldCBmb3VuZE1hdGNoID0gZmFsc2U7XG5cbiAgLy8gTm8gbmVlZCB0byBkaXNwbGF5IGFueSB2YWx1ZSBpZiB0aGUgZmllbGQgaXMgZW1wdHkuXG4gIGlmIChpc0ZpbGxlZCh7XG4gICAgdmFsdWVcbiAgfSkgfHwgZGlzcGxheUVtcHR5KSB7XG4gICAgaWYgKHJlbmRlclZhbHVlKSB7XG4gICAgICBkaXNwbGF5ID0gcmVuZGVyVmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wdXRlRGlzcGxheSA9IHRydWU7XG4gICAgfVxuICB9XG4gIGNvbnN0IGl0ZW1zID0gY2hpbGRyZW5BcnJheS5tYXAoY2hpbGQgPT4ge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGlzRnJhZ21lbnQoY2hpbGQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTVVJOiBUaGUgU2VsZWN0IGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBzZWxlY3RlZDtcbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFRoZSBcXGB2YWx1ZVxcYCBwcm9wIG11c3QgYmUgYW4gYXJyYXkgd2hlbiB1c2luZyB0aGUgXFxgU2VsZWN0XFxgIGNvbXBvbmVudCB3aXRoIFxcYG11bHRpcGxlXFxgLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDIpKTtcbiAgICAgIH1cbiAgICAgIHNlbGVjdGVkID0gdmFsdWUuc29tZSh2ID0+IGFyZUVxdWFsVmFsdWVzKHYsIGNoaWxkLnByb3BzLnZhbHVlKSk7XG4gICAgICBpZiAoc2VsZWN0ZWQgJiYgY29tcHV0ZURpc3BsYXkpIHtcbiAgICAgICAgZGlzcGxheU11bHRpcGxlLnB1c2goY2hpbGQucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZCA9IGFyZUVxdWFsVmFsdWVzKHZhbHVlLCBjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICBpZiAoc2VsZWN0ZWQgJiYgY29tcHV0ZURpc3BsYXkpIHtcbiAgICAgICAgZGlzcGxheVNpbmdsZSA9IGNoaWxkLnByb3BzLmNoaWxkcmVuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgIGZvdW5kTWF0Y2ggPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBzZWxlY3RlZCA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVJdGVtQ2xpY2soY2hpbGQpLFxuICAgICAgb25LZXlVcDogZXZlbnQgPT4ge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgICAgICAvLyBvdGhlcndpc2Ugb3VyIE1lbnVJdGVtcyBkaXNwYXRjaGVzIGEgY2xpY2sgZXZlbnRcbiAgICAgICAgICAvLyBpdCdzIG5vdCBiZWhhdmlvciBvZiB0aGUgbmF0aXZlIDxvcHRpb24+IGFuZCBjYXVzZXNcbiAgICAgICAgICAvLyB0aGUgc2VsZWN0IHRvIGNsb3NlIGltbWVkaWF0ZWx5IHNpbmNlIHdlIG9wZW4gb24gc3BhY2Uga2V5ZG93blxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkLnByb3BzLm9uS2V5VXApIHtcbiAgICAgICAgICBjaGlsZC5wcm9wcy5vbktleVVwKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJvbGU6ICdvcHRpb24nLFxuICAgICAgc2VsZWN0ZWQsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgLy8gVGhlIHZhbHVlIGlzIG1vc3QgbGlrZWx5IG5vdCBhIHZhbGlkIEhUTUwgYXR0cmlidXRlLlxuICAgICAgJ2RhdGEtdmFsdWUnOiBjaGlsZC5wcm9wcy52YWx1ZSAvLyBJbnN0ZWFkLCB3ZSBwcm92aWRlIGl0IGFzIGEgZGF0YSBhdHRyaWJ1dGUuXG4gICAgfSk7XG4gIH0pO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoIWZvdW5kTWF0Y2ggJiYgIW11bHRpcGxlICYmIHZhbHVlICE9PSAnJykge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBjaGlsZHJlbkFycmF5Lm1hcChjaGlsZCA9PiBjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICAgIGNvbnNvbGUud2FybihbYE1VSTogWW91IGhhdmUgcHJvdmlkZWQgYW4gb3V0LW9mLXJhbmdlIHZhbHVlIFxcYCR7dmFsdWV9XFxgIGZvciB0aGUgc2VsZWN0ICR7bmFtZSA/IGAobmFtZT1cIiR7bmFtZX1cIikgYCA6ICcnfWNvbXBvbmVudC5gLCBcIkNvbnNpZGVyIHByb3ZpZGluZyBhIHZhbHVlIHRoYXQgbWF0Y2hlcyBvbmUgb2YgdGhlIGF2YWlsYWJsZSBvcHRpb25zIG9yICcnLlwiLCBgVGhlIGF2YWlsYWJsZSB2YWx1ZXMgYXJlICR7dmFsdWVzLmZpbHRlcih4ID0+IHggIT0gbnVsbCkubWFwKHggPT4gYFxcYCR7eH1cXGBgKS5qb2luKCcsICcpIHx8ICdcIlwiJ30uYF0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtmb3VuZE1hdGNoLCBjaGlsZHJlbkFycmF5LCBtdWx0aXBsZSwgbmFtZSwgdmFsdWVdKTtcbiAgfVxuICBpZiAoY29tcHV0ZURpc3BsYXkpIHtcbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgIGlmIChkaXNwbGF5TXVsdGlwbGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRpc3BsYXkgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzcGxheSA9IGRpc3BsYXlNdWx0aXBsZS5yZWR1Y2UoKG91dHB1dCwgY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goY2hpbGQpO1xuICAgICAgICAgIGlmIChpbmRleCA8IGRpc3BsYXlNdWx0aXBsZS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBvdXRwdXQucHVzaCgnLCAnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfSwgW10pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkaXNwbGF5ID0gZGlzcGxheVNpbmdsZTtcbiAgICB9XG4gIH1cblxuICAvLyBBdm9pZCBwZXJmb3JtaW5nIGEgbGF5b3V0IGNvbXB1dGF0aW9uIGluIHRoZSByZW5kZXIgbWV0aG9kLlxuICBsZXQgbWVudU1pbldpZHRoID0gbWVudU1pbldpZHRoU3RhdGU7XG4gIGlmICghYXV0b1dpZHRoICYmIGlzT3BlbkNvbnRyb2xsZWQgJiYgZGlzcGxheU5vZGUpIHtcbiAgICBtZW51TWluV2lkdGggPSBhbmNob3JFbGVtZW50LmNsaWVudFdpZHRoO1xuICB9XG4gIGxldCB0YWJJbmRleDtcbiAgaWYgKHR5cGVvZiB0YWJJbmRleFByb3AgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGFiSW5kZXggPSB0YWJJbmRleFByb3A7XG4gIH0gZWxzZSB7XG4gICAgdGFiSW5kZXggPSBkaXNhYmxlZCA/IG51bGwgOiAwO1xuICB9XG4gIGNvbnN0IGJ1dHRvbklkID0gU2VsZWN0RGlzcGxheVByb3BzLmlkIHx8IChuYW1lID8gYG11aS1jb21wb25lbnQtc2VsZWN0LSR7bmFtZX1gIDogdW5kZWZpbmVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHZhcmlhbnQsXG4gICAgdmFsdWUsXG4gICAgb3BlbixcbiAgICBlcnJvclxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBwYXBlclByb3BzID0gX2V4dGVuZHMoe30sIE1lbnVQcm9wcy5QYXBlclByb3BzLCAoX01lbnVQcm9wcyRzbG90UHJvcHMgPSBNZW51UHJvcHMuc2xvdFByb3BzKSA9PSBudWxsID8gdm9pZCAwIDogX01lbnVQcm9wcyRzbG90UHJvcHMucGFwZXIpO1xuICBjb25zdCBsaXN0Ym94SWQgPSB1c2VJZCgpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChTZWxlY3RTZWxlY3QsIF9leHRlbmRzKHtcbiAgICAgIHJlZjogaGFuZGxlRGlzcGxheVJlZixcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICAgIHJvbGU6IFwiY29tYm9ib3hcIixcbiAgICAgIFwiYXJpYS1jb250cm9sc1wiOiBsaXN0Ym94SWQsXG4gICAgICBcImFyaWEtZGlzYWJsZWRcIjogZGlzYWJsZWQgPyAndHJ1ZScgOiB1bmRlZmluZWQsXG4gICAgICBcImFyaWEtZXhwYW5kZWRcIjogb3BlbiA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJsaXN0Ym94XCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLFxuICAgICAgXCJhcmlhLWxhYmVsbGVkYnlcIjogW2xhYmVsSWQsIGJ1dHRvbklkXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpIHx8IHVuZGVmaW5lZCxcbiAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgICBvbk1vdXNlRG93bjogZGlzYWJsZWQgfHwgcmVhZE9ubHkgPyBudWxsIDogaGFuZGxlTW91c2VEb3duLFxuICAgICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgICAgb25Gb2N1czogb25Gb2N1c1xuICAgIH0sIFNlbGVjdERpc3BsYXlQcm9wcywge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChTZWxlY3REaXNwbGF5UHJvcHMuY2xhc3NOYW1lLCBjbGFzc2VzLnNlbGVjdCwgY2xhc3NOYW1lKVxuICAgICAgLy8gVGhlIGlkIGlzIHJlcXVpcmVkIGZvciBwcm9wZXIgYTExeVxuICAgICAgLFxuICAgICAgaWQ6IGJ1dHRvbklkLFxuICAgICAgY2hpbGRyZW46IGlzRW1wdHkoZGlzcGxheSkgPyAvLyBub3RyYW5zbGF0ZSBuZWVkZWQgd2hpbGUgR29vZ2xlIFRyYW5zbGF0ZSB3aWxsIG5vdCBmaXggemVyby13aWR0aCBzcGFjZSBpc3N1ZVxuICAgICAgX3NwYW4gfHwgKF9zcGFuID0gLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIm5vdHJhbnNsYXRlXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIlxcdTIwMEJcIlxuICAgICAgfSkpIDogZGlzcGxheVxuICAgIH0pKSwgLyojX19QVVJFX18qL19qc3goU2VsZWN0TmF0aXZlSW5wdXQsIF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1pbnZhbGlkXCI6IGVycm9yLFxuICAgICAgdmFsdWU6IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCcpIDogdmFsdWUsXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICB0YWJJbmRleDogLTEsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubmF0aXZlSW5wdXQsXG4gICAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9LCBvdGhlcikpLCAvKiNfX1BVUkVfXyovX2pzeChTZWxlY3RJY29uLCB7XG4gICAgICBhczogSWNvbkNvbXBvbmVudCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pY29uLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0pLCAvKiNfX1BVUkVfXyovX2pzeChNZW51LCBfZXh0ZW5kcyh7XG4gICAgICBpZDogYG1lbnUtJHtuYW1lIHx8ICcnfWAsXG4gICAgICBhbmNob3JFbDogYW5jaG9yRWxlbWVudCxcbiAgICAgIG9wZW46IG9wZW4sXG4gICAgICBvbkNsb3NlOiBoYW5kbGVDbG9zZSxcbiAgICAgIGFuY2hvck9yaWdpbjoge1xuICAgICAgICB2ZXJ0aWNhbDogJ2JvdHRvbScsXG4gICAgICAgIGhvcml6b250YWw6ICdjZW50ZXInXG4gICAgICB9LFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiB7XG4gICAgICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICAgICAgaG9yaXpvbnRhbDogJ2NlbnRlcidcbiAgICAgIH1cbiAgICB9LCBNZW51UHJvcHMsIHtcbiAgICAgIE1lbnVMaXN0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGxhYmVsSWQsXG4gICAgICAgIHJvbGU6ICdsaXN0Ym94JyxcbiAgICAgICAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzogbXVsdGlwbGUgPyAndHJ1ZScgOiB1bmRlZmluZWQsXG4gICAgICAgIGRpc2FibGVMaXN0V3JhcDogdHJ1ZSxcbiAgICAgICAgaWQ6IGxpc3Rib3hJZFxuICAgICAgfSwgTWVudVByb3BzLk1lbnVMaXN0UHJvcHMpLFxuICAgICAgc2xvdFByb3BzOiBfZXh0ZW5kcyh7fSwgTWVudVByb3BzLnNsb3RQcm9wcywge1xuICAgICAgICBwYXBlcjogX2V4dGVuZHMoe30sIHBhcGVyUHJvcHMsIHtcbiAgICAgICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICAgICAgbWluV2lkdGg6IG1lbnVNaW5XaWR0aFxuICAgICAgICAgIH0sIHBhcGVyUHJvcHMgIT0gbnVsbCA/IHBhcGVyUHJvcHMuc3R5bGUgOiBudWxsKVxuICAgICAgICB9KVxuICAgICAgfSksXG4gICAgICBjaGlsZHJlbjogaXRlbXNcbiAgICB9KSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTZWxlY3RJbnB1dC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1sYWJlbCc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgd2lkdGggb2YgdGhlIHBvcG92ZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHNldCBhY2NvcmRpbmcgdG8gdGhlIGl0ZW1zIGluc2lkZSB0aGVcbiAgICogbWVudSwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgYXQgbGVhc3QgdGhlIHdpZHRoIG9mIHRoZSBzZWxlY3QgaW5wdXQuXG4gICAqL1xuICBhdXRvV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8TWVudUl0ZW0+YCBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgc2VsZWN0IGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgdG9nZ2xlZCBvbiBtb3VudC4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBvcGVuIHN0YXRlIGlzIG5vdCBjb250cm9sbGVkLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBkZWZhdWx0T3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdGVkIGl0ZW0gaXMgZGlzcGxheWVkIGV2ZW4gaWYgaXRzIHZhbHVlIGlzIGVtcHR5LlxuICAgKi9cbiAgZGlzcGxheUVtcHR5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBzZWxlY3QgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogSW1wZXJhdGl2ZSBoYW5kbGUgaW1wbGVtZW50aW5nIGB7IHZhbHVlOiBULCBub2RlOiBIVE1MRWxlbWVudCwgZm9jdXMoKTogdm9pZCB9YFxuICAgKiBFcXVpdmFsZW50IHRvIGByZWZgXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIFRoZSBJRCBvZiBhbiBlbGVtZW50IHRoYXQgYWN0cyBhcyBhbiBhZGRpdGlvbmFsIGxhYmVsLiBUaGUgU2VsZWN0IHdpbGxcbiAgICogYmUgbGFiZWxsZWQgYnkgdGhlIGFkZGl0aW9uYWwgbGFiZWwgYW5kIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICovXG4gIGxhYmVsSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVgXSgvbWF0ZXJpYWwtdWkvYXBpL21lbnUvKSBlbGVtZW50LlxuICAgKi9cbiAgTWVudVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogSWYgYHRydWVgLCBgdmFsdWVgIG11c3QgYmUgYW4gYXJyYXkgYW5kIHRoZSBtZW51IHdpbGwgc3VwcG9ydCBtdWx0aXBsZSBzZWxlY3Rpb25zLlxuICAgKi9cbiAgbXVsdGlwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIG9yIGhpZGRlbiBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoYW55KS5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtjaGlsZF0gVGhlIHJlYWN0IGVsZW1lbnQgdGhhdCB3YXMgc2VsZWN0ZWQuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3BlbmVkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBUaGUgYHZhbHVlYCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJucyB7UmVhY3ROb2RlfVxuICAgKi9cbiAgcmVuZGVyVmFsdWU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgY2xpY2thYmxlIGRpdiBlbGVtZW50LlxuICAgKi9cbiAgU2VsZWN0RGlzcGxheVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdElucHV0OyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTcgMTBsNSA1IDUtNXpcIlxufSksICdBcnJvd0Ryb3BEb3duJyk7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXV0b1dpZHRoXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdE9wZW5cIiwgXCJkaXNwbGF5RW1wdHlcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaWRcIiwgXCJpbnB1dFwiLCBcImlucHV0UHJvcHNcIiwgXCJsYWJlbFwiLCBcImxhYmVsSWRcIiwgXCJNZW51UHJvcHNcIiwgXCJtdWx0aXBsZVwiLCBcIm5hdGl2ZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicmVuZGVyVmFsdWVcIiwgXCJTZWxlY3REaXNwbGF5UHJvcHNcIiwgXCJ2YXJpYW50XCJdLFxuICBfZXhjbHVkZWQyID0gW1wicm9vdFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IFNlbGVjdElucHV0IGZyb20gJy4vU2VsZWN0SW5wdXQnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IEFycm93RHJvcERvd25JY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9BcnJvd0Ryb3BEb3duJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9JbnB1dCc7XG5pbXBvcnQgTmF0aXZlU2VsZWN0SW5wdXQgZnJvbSAnLi4vTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdElucHV0JztcbmltcG9ydCBGaWxsZWRJbnB1dCBmcm9tICcuLi9GaWxsZWRJbnB1dCc7XG5pbXBvcnQgT3V0bGluZWRJbnB1dCBmcm9tICcuLi9PdXRsaW5lZElucHV0JztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgcmV0dXJuIGNsYXNzZXM7XG59O1xuY29uc3Qgc3R5bGVkUm9vdENvbmZpZyA9IHtcbiAgbmFtZTogJ011aVNlbGVjdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3QsXG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSAmJiBwcm9wICE9PSAndmFyaWFudCcsXG4gIHNsb3Q6ICdSb290J1xufTtcbmNvbnN0IFN0eWxlZElucHV0ID0gc3R5bGVkKElucHV0LCBzdHlsZWRSb290Q29uZmlnKSgnJyk7XG5jb25zdCBTdHlsZWRPdXRsaW5lZElucHV0ID0gc3R5bGVkKE91dGxpbmVkSW5wdXQsIHN0eWxlZFJvb3RDb25maWcpKCcnKTtcbmNvbnN0IFN0eWxlZEZpbGxlZElucHV0ID0gc3R5bGVkKEZpbGxlZElucHV0LCBzdHlsZWRSb290Q29uZmlnKSgnJyk7XG5jb25zdCBTZWxlY3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTZWxlY3QoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgbmFtZTogJ011aVNlbGVjdCcsXG4gICAgcHJvcHM6IGluUHJvcHNcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGF1dG9XaWR0aCA9IGZhbHNlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzUHJvcCA9IHt9LFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGVmYXVsdE9wZW4gPSBmYWxzZSxcbiAgICAgIGRpc3BsYXlFbXB0eSA9IGZhbHNlLFxuICAgICAgSWNvbkNvbXBvbmVudCA9IEFycm93RHJvcERvd25JY29uLFxuICAgICAgaWQsXG4gICAgICBpbnB1dCxcbiAgICAgIGlucHV0UHJvcHMsXG4gICAgICBsYWJlbCxcbiAgICAgIGxhYmVsSWQsXG4gICAgICBNZW51UHJvcHMsXG4gICAgICBtdWx0aXBsZSA9IGZhbHNlLFxuICAgICAgbmF0aXZlID0gZmFsc2UsXG4gICAgICBvbkNsb3NlLFxuICAgICAgb25PcGVuLFxuICAgICAgb3BlbixcbiAgICAgIHJlbmRlclZhbHVlLFxuICAgICAgU2VsZWN0RGlzcGxheVByb3BzLFxuICAgICAgdmFyaWFudDogdmFyaWFudFByb3AgPSAnb3V0bGluZWQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGlucHV0Q29tcG9uZW50ID0gbmF0aXZlID8gTmF0aXZlU2VsZWN0SW5wdXQgOiBTZWxlY3RJbnB1dDtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsndmFyaWFudCcsICdlcnJvciddXG4gIH0pO1xuICBjb25zdCB2YXJpYW50ID0gZmNzLnZhcmlhbnQgfHwgdmFyaWFudFByb3A7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICB2YXJpYW50LFxuICAgIGNsYXNzZXM6IGNsYXNzZXNQcm9wXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IHJlc3RPZkNsYXNzZXMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShjbGFzc2VzLCBfZXhjbHVkZWQyKTtcbiAgY29uc3QgSW5wdXRDb21wb25lbnQgPSBpbnB1dCB8fCB7XG4gICAgc3RhbmRhcmQ6IC8qI19fUFVSRV9fKi9fanN4KFN0eWxlZElucHV0LCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSksXG4gICAgb3V0bGluZWQ6IC8qI19fUFVSRV9fKi9fanN4KFN0eWxlZE91dGxpbmVkSW5wdXQsIHtcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9KSxcbiAgICBmaWxsZWQ6IC8qI19fUFVSRV9fKi9fanN4KFN0eWxlZEZpbGxlZElucHV0LCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSlcbiAgfVt2YXJpYW50XTtcbiAgY29uc3QgaW5wdXRDb21wb25lbnRSZWYgPSB1c2VGb3JrUmVmKHJlZiwgSW5wdXRDb21wb25lbnQucmVmKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoSW5wdXRDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIC8vIE1vc3Qgb2YgdGhlIGxvZ2ljIGlzIGltcGxlbWVudGVkIGluIGBTZWxlY3RJbnB1dGAuXG4gICAgICAvLyBUaGUgYFNlbGVjdGAgY29tcG9uZW50IGlzIGEgc2ltcGxlIEFQSSB3cmFwcGVyIHRvIGV4cG9zZSBzb21ldGhpbmcgYmV0dGVyIHRvIHBsYXkgd2l0aC5cbiAgICAgIGlucHV0Q29tcG9uZW50LFxuICAgICAgaW5wdXRQcm9wczogX2V4dGVuZHMoe1xuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgZXJyb3I6IGZjcy5lcnJvcixcbiAgICAgICAgSWNvbkNvbXBvbmVudCxcbiAgICAgICAgdmFyaWFudCxcbiAgICAgICAgdHlwZTogdW5kZWZpbmVkLFxuICAgICAgICAvLyBXZSByZW5kZXIgYSBzZWxlY3QuIFdlIGNhbiBpZ25vcmUgdGhlIHR5cGUgcHJvdmlkZWQgYnkgdGhlIGBJbnB1dGAuXG4gICAgICAgIG11bHRpcGxlXG4gICAgICB9LCBuYXRpdmUgPyB7XG4gICAgICAgIGlkXG4gICAgICB9IDoge1xuICAgICAgICBhdXRvV2lkdGgsXG4gICAgICAgIGRlZmF1bHRPcGVuLFxuICAgICAgICBkaXNwbGF5RW1wdHksXG4gICAgICAgIGxhYmVsSWQsXG4gICAgICAgIE1lbnVQcm9wcyxcbiAgICAgICAgb25DbG9zZSxcbiAgICAgICAgb25PcGVuLFxuICAgICAgICBvcGVuLFxuICAgICAgICByZW5kZXJWYWx1ZSxcbiAgICAgICAgU2VsZWN0RGlzcGxheVByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgaWRcbiAgICAgICAgfSwgU2VsZWN0RGlzcGxheVByb3BzKVxuICAgICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgICBjbGFzc2VzOiBpbnB1dFByb3BzID8gZGVlcG1lcmdlKHJlc3RPZkNsYXNzZXMsIGlucHV0UHJvcHMuY2xhc3NlcykgOiByZXN0T2ZDbGFzc2VzXG4gICAgICB9LCBpbnB1dCA/IGlucHV0LnByb3BzLmlucHV0UHJvcHMgOiB7fSlcbiAgICB9LCAobXVsdGlwbGUgJiYgbmF0aXZlIHx8IGRpc3BsYXlFbXB0eSkgJiYgdmFyaWFudCA9PT0gJ291dGxpbmVkJyA/IHtcbiAgICAgIG5vdGNoZWQ6IHRydWVcbiAgICB9IDoge30sIHtcbiAgICAgIHJlZjogaW5wdXRDb21wb25lbnRSZWYsXG4gICAgICBjbGFzc05hbWU6IGNsc3goSW5wdXRDb21wb25lbnQucHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUsIGNsYXNzZXMucm9vdClcbiAgICB9LCAhaW5wdXQgJiYge1xuICAgICAgdmFyaWFudFxuICAgIH0sIG90aGVyKSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNlbGVjdC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgaXRlbXMgaW5zaWRlIHRoZVxuICAgKiBtZW51LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdCBsZWFzdCB0aGUgd2lkdGggb2YgdGhlIHNlbGVjdCBpbnB1dC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9XaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYE1lbnVJdGVtYCB3aGVuIGBuYXRpdmVgIGlzIGZhbHNlIGFuZCBgb3B0aW9uYCB3aGVuIGBuYXRpdmVgIGlzIHRydWUuXG4gICAqXG4gICAqIOKaoO+4j1RoZSBgTWVudUl0ZW1gIGVsZW1lbnRzICoqbXVzdCoqIGJlIGRpcmVjdCBkZXNjZW5kYW50cyB3aGVuIGBuYXRpdmVgIGlzIGZhbHNlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBpbml0aWFsbHkgb3Blbi4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBvcGVuIHN0YXRlIGlzIG5vdCBjb250cm9sbGVkIChpLmUuIHRoZSBgb3BlbmAgcHJvcCBpcyBub3QgZGVmaW5lZCkuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlZmF1bHRPcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHZhbHVlIGlzIGRpc3BsYXllZCBldmVuIGlmIG5vIGl0ZW1zIGFyZSBzZWxlY3RlZC5cbiAgICpcbiAgICogSW4gb3JkZXIgdG8gZGlzcGxheSBhIG1lYW5pbmdmdWwgdmFsdWUsIGEgZnVuY3Rpb24gY2FuIGJlIHBhc3NlZCB0byB0aGUgYHJlbmRlclZhbHVlYCBwcm9wIHdoaWNoXG4gICAqIHJldHVybnMgdGhlIHZhbHVlIHRvIGJlIGRpc3BsYXllZCB3aGVuIG5vIGl0ZW1zIGFyZSBzZWxlY3RlZC5cbiAgICpcbiAgICog4pqg77iPIFdoZW4gdXNpbmcgdGhpcyBwcm9wLCBtYWtlIHN1cmUgdGhlIGxhYmVsIGRvZXNuJ3Qgb3ZlcmxhcCB3aXRoIHRoZSBlbXB0eSBkaXNwbGF5ZWQgdmFsdWUuXG4gICAqIFRoZSBsYWJlbCBzaG91bGQgZWl0aGVyIGJlIGhpZGRlbiBvciBmb3JjZWQgdG8gYSBzaHJ1bmsgc3RhdGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNwbGF5RW1wdHk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqIEBkZWZhdWx0IEFycm93RHJvcERvd25JY29uXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgYGlkYCBvZiB0aGUgd3JhcHBlciBlbGVtZW50IG9yIHRoZSBgc2VsZWN0YCBlbGVtZW50IHdoZW4gYG5hdGl2ZWAuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEFuIGBJbnB1dGAgZWxlbWVudDsgZG9lcyBub3QgaGF2ZSB0byBiZSBhIG1hdGVyaWFsLXVpIHNwZWNpZmljIGBJbnB1dGAuXG4gICAqL1xuICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnQsXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogV2hlbiBgbmF0aXZlYCBpcyBgdHJ1ZWAsIHRoZSBhdHRyaWJ1dGVzIGFyZSBhcHBsaWVkIG9uIHRoZSBgc2VsZWN0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFNlZSBbT3V0bGluZWRJbnB1dCNsYWJlbF0oL21hdGVyaWFsLXVpL2FwaS9vdXRsaW5lZC1pbnB1dC8jcHJvcHMpXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgYW4gZWxlbWVudCB0aGF0IGFjdHMgYXMgYW4gYWRkaXRpb25hbCBsYWJlbC4gVGhlIFNlbGVjdCB3aWxsXG4gICAqIGJlIGxhYmVsbGVkIGJ5IHRoZSBhZGRpdGlvbmFsIGxhYmVsIGFuZCB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqL1xuICBsYWJlbElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BNZW51YF0oL21hdGVyaWFsLXVpL2FwaS9tZW51LykgZWxlbWVudC5cbiAgICovXG4gIE1lbnVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB1c2VzIGEgbmF0aXZlIGBzZWxlY3RgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBuYXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtTZWxlY3RDaGFuZ2VFdmVudDxWYWx1ZT59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChhbnkpLlxuICAgKiAqKldhcm5pbmcqKjogVGhpcyBpcyBhIGdlbmVyaWMgZXZlbnQsIG5vdCBhIGNoYW5nZSBldmVudCwgdW5sZXNzIHRoZSBjaGFuZ2UgZXZlbnQgaXMgY2F1c2VkIGJ5IGJyb3dzZXIgYXV0b2ZpbGwuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbY2hpbGRdIFRoZSByZWFjdCBlbGVtZW50IHRoYXQgd2FzIHNlbGVjdGVkIHdoZW4gYG5hdGl2ZWAgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBVc2UgaXQgaW4gZWl0aGVyIGNvbnRyb2xsZWQgKHNlZSB0aGUgYG9wZW5gIHByb3ApLCBvciB1bmNvbnRyb2xsZWQgbW9kZSAodG8gZGV0ZWN0IHdoZW4gdGhlIFNlbGVjdCBjb2xsYXBzZXMpLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBvcGVuZWQuXG4gICAqIFVzZSBpdCBpbiBlaXRoZXIgY29udHJvbGxlZCAoc2VlIHRoZSBgb3BlbmAgcHJvcCksIG9yIHVuY29udHJvbGxlZCBtb2RlICh0byBkZXRlY3Qgd2hlbiB0aGUgU2VsZWN0IGV4cGFuZHMpLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIHtSZWFjdE5vZGV9XG4gICAqL1xuICByZW5kZXJWYWx1ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBjbGlja2FibGUgZGl2IGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3REaXNwbGF5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgYGlucHV0YCB2YWx1ZS4gUHJvdmlkaW5nIGFuIGVtcHR5IHN0cmluZyB3aWxsIHNlbGVjdCBubyBvcHRpb25zLlxuICAgKiBTZXQgdG8gYW4gZW1wdHkgc3RyaW5nIGAnJ2AgaWYgeW91IGRvbid0IHdhbnQgYW55IG9mIHRoZSBhdmFpbGFibGUgb3B0aW9ucyB0byBiZSBzZWxlY3RlZC5cbiAgICpcbiAgICogSWYgdGhlIHZhbHVlIGlzIGFuIG9iamVjdCBpdCBtdXN0IGhhdmUgcmVmZXJlbmNlIGVxdWFsaXR5IHdpdGggdGhlIG9wdGlvbiBpbiBvcmRlciB0byBiZSBzZWxlY3RlZC5cbiAgICogSWYgdGhlIHZhbHVlIGlzIG5vdCBhbiBvYmplY3QsIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gbXVzdCBtYXRjaCB3aXRoIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9wdGlvbiBpbiBvcmRlciB0byBiZSBzZWxlY3RlZC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWycnXSksIFByb3BUeXBlcy5hbnldKSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ291dGxpbmVkJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuU2VsZWN0Lm11aU5hbWUgPSAnU2VsZWN0JztcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRleHRGaWVsZFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVGV4dEZpZWxkJywgc2xvdCk7XG59XG5jb25zdCB0ZXh0RmllbGRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVGV4dEZpZWxkJywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgdGV4dEZpZWxkQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhdXRvQ29tcGxldGVcIiwgXCJhdXRvRm9jdXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJlcnJvclwiLCBcIkZvcm1IZWxwZXJUZXh0UHJvcHNcIiwgXCJmdWxsV2lkdGhcIiwgXCJoZWxwZXJUZXh0XCIsIFwiaWRcIiwgXCJJbnB1dExhYmVsUHJvcHNcIiwgXCJpbnB1dFByb3BzXCIsIFwiSW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibGFiZWxcIiwgXCJtYXhSb3dzXCIsIFwibWluUm93c1wiLCBcIm11bHRpbGluZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uRm9jdXNcIiwgXCJwbGFjZWhvbGRlclwiLCBcInJlcXVpcmVkXCIsIFwicm93c1wiLCBcInNlbGVjdFwiLCBcIlNlbGVjdFByb3BzXCIsIFwidHlwZVwiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHJlZlR5cGUsIHVuc3RhYmxlX3VzZUlkIGFzIHVzZUlkIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL0lucHV0JztcbmltcG9ydCBGaWxsZWRJbnB1dCBmcm9tICcuLi9GaWxsZWRJbnB1dCc7XG5pbXBvcnQgT3V0bGluZWRJbnB1dCBmcm9tICcuLi9PdXRsaW5lZElucHV0JztcbmltcG9ydCBJbnB1dExhYmVsIGZyb20gJy4uL0lucHV0TGFiZWwnO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sJztcbmltcG9ydCBGb3JtSGVscGVyVGV4dCBmcm9tICcuLi9Gb3JtSGVscGVyVGV4dCc7XG5pbXBvcnQgU2VsZWN0IGZyb20gJy4uL1NlbGVjdCc7XG5pbXBvcnQgeyBnZXRUZXh0RmllbGRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3RleHRGaWVsZENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHZhcmlhbnRDb21wb25lbnQgPSB7XG4gIHN0YW5kYXJkOiBJbnB1dCxcbiAgZmlsbGVkOiBGaWxsZWRJbnB1dCxcbiAgb3V0bGluZWQ6IE91dGxpbmVkSW5wdXRcbn07XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRUZXh0RmllbGRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFRleHRGaWVsZFJvb3QgPSBzdHlsZWQoRm9ybUNvbnRyb2wsIHtcbiAgbmFtZTogJ011aVRleHRGaWVsZCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe30pO1xuXG4vKipcbiAqIFRoZSBgVGV4dEZpZWxkYCBpcyBhIGNvbnZlbmllbmNlIHdyYXBwZXIgZm9yIHRoZSBtb3N0IGNvbW1vbiBjYXNlcyAoODAlKS5cbiAqIEl0IGNhbm5vdCBiZSBhbGwgdGhpbmdzIHRvIGFsbCBwZW9wbGUsIG90aGVyd2lzZSB0aGUgQVBJIHdvdWxkIGdyb3cgb3V0IG9mIGNvbnRyb2wuXG4gKlxuICogIyMgQWR2YW5jZWQgQ29uZmlndXJhdGlvblxuICpcbiAqIEl0J3MgaW1wb3J0YW50IHRvIHVuZGVyc3RhbmQgdGhhdCB0aGUgdGV4dCBmaWVsZCBpcyBhIHNpbXBsZSBhYnN0cmFjdGlvblxuICogb24gdG9wIG9mIHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAtIFtGb3JtQ29udHJvbF0oL21hdGVyaWFsLXVpL2FwaS9mb3JtLWNvbnRyb2wvKVxuICogLSBbSW5wdXRMYWJlbF0oL21hdGVyaWFsLXVpL2FwaS9pbnB1dC1sYWJlbC8pXG4gKiAtIFtGaWxsZWRJbnB1dF0oL21hdGVyaWFsLXVpL2FwaS9maWxsZWQtaW5wdXQvKVxuICogLSBbT3V0bGluZWRJbnB1dF0oL21hdGVyaWFsLXVpL2FwaS9vdXRsaW5lZC1pbnB1dC8pXG4gKiAtIFtJbnB1dF0oL21hdGVyaWFsLXVpL2FwaS9pbnB1dC8pXG4gKiAtIFtGb3JtSGVscGVyVGV4dF0oL21hdGVyaWFsLXVpL2FwaS9mb3JtLWhlbHBlci10ZXh0LylcbiAqXG4gKiBJZiB5b3Ugd2lzaCB0byBhbHRlciB0aGUgcHJvcHMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LCB5b3UgY2FuIGRvIHNvIGFzIGZvbGxvd3M6XG4gKlxuICogYGBganN4XG4gKiBjb25zdCBpbnB1dFByb3BzID0ge1xuICogICBzdGVwOiAzMDAsXG4gKiB9O1xuICpcbiAqIHJldHVybiA8VGV4dEZpZWxkIGlkPVwidGltZVwiIHR5cGU9XCJ0aW1lXCIgaW5wdXRQcm9wcz17aW5wdXRQcm9wc30gLz47XG4gKiBgYGBcbiAqXG4gKiBGb3IgYWR2YW5jZWQgY2FzZXMsIHBsZWFzZSBsb29rIGF0IHRoZSBzb3VyY2Ugb2YgVGV4dEZpZWxkIGJ5IGNsaWNraW5nIG9uIHRoZVxuICogXCJFZGl0IHRoaXMgcGFnZVwiIGJ1dHRvbiBhYm92ZS4gQ29uc2lkZXIgZWl0aGVyOlxuICpcbiAqIC0gdXNpbmcgdGhlIHVwcGVyIGNhc2UgcHJvcHMgZm9yIHBhc3NpbmcgdmFsdWVzIGRpcmVjdGx5IHRvIHRoZSBjb21wb25lbnRzXG4gKiAtIHVzaW5nIHRoZSB1bmRlcmx5aW5nIGNvbXBvbmVudHMgZGlyZWN0bHkgYXMgc2hvd24gaW4gdGhlIGRlbW9zXG4gKi9cbmNvbnN0IFRleHRGaWVsZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRleHRGaWVsZChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVGV4dEZpZWxkJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYXV0b0NvbXBsZXRlLFxuICAgICAgYXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgICAgZGVmYXVsdFZhbHVlLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGVycm9yID0gZmFsc2UsXG4gICAgICBGb3JtSGVscGVyVGV4dFByb3BzLFxuICAgICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgICBoZWxwZXJUZXh0LFxuICAgICAgaWQ6IGlkT3ZlcnJpZGUsXG4gICAgICBJbnB1dExhYmVsUHJvcHMsXG4gICAgICBpbnB1dFByb3BzLFxuICAgICAgSW5wdXRQcm9wcyxcbiAgICAgIGlucHV0UmVmLFxuICAgICAgbGFiZWwsXG4gICAgICBtYXhSb3dzLFxuICAgICAgbWluUm93cyxcbiAgICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgICAgbmFtZSxcbiAgICAgIG9uQmx1cixcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgcmVxdWlyZWQgPSBmYWxzZSxcbiAgICAgIHJvd3MsXG4gICAgICBzZWxlY3QgPSBmYWxzZSxcbiAgICAgIFNlbGVjdFByb3BzLFxuICAgICAgdHlwZSxcbiAgICAgIHZhbHVlLFxuICAgICAgdmFyaWFudCA9ICdvdXRsaW5lZCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGF1dG9Gb2N1cyxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBmdWxsV2lkdGgsXG4gICAgbXVsdGlsaW5lLFxuICAgIHJlcXVpcmVkLFxuICAgIHNlbGVjdCxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHNlbGVjdCAmJiAhY2hpbGRyZW4pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogYGNoaWxkcmVuYCBtdXN0IGJlIHBhc3NlZCB3aGVuIHVzaW5nIHRoZSBgVGV4dEZpZWxkYCBjb21wb25lbnQgd2l0aCBgc2VsZWN0YC4nKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgSW5wdXRNb3JlID0ge307XG4gIGlmICh2YXJpYW50ID09PSAnb3V0bGluZWQnKSB7XG4gICAgaWYgKElucHV0TGFiZWxQcm9wcyAmJiB0eXBlb2YgSW5wdXRMYWJlbFByb3BzLnNocmluayAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIElucHV0TW9yZS5ub3RjaGVkID0gSW5wdXRMYWJlbFByb3BzLnNocmluaztcbiAgICB9XG4gICAgSW5wdXRNb3JlLmxhYmVsID0gbGFiZWw7XG4gIH1cbiAgaWYgKHNlbGVjdCkge1xuICAgIC8vIHVuc2V0IGRlZmF1bHRzIGZyb20gdGV4dGJveCBpbnB1dHNcbiAgICBpZiAoIVNlbGVjdFByb3BzIHx8ICFTZWxlY3RQcm9wcy5uYXRpdmUpIHtcbiAgICAgIElucHV0TW9yZS5pZCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgSW5wdXRNb3JlWydhcmlhLWRlc2NyaWJlZGJ5J10gPSB1bmRlZmluZWQ7XG4gIH1cbiAgY29uc3QgaWQgPSB1c2VJZChpZE92ZXJyaWRlKTtcbiAgY29uc3QgaGVscGVyVGV4dElkID0gaGVscGVyVGV4dCAmJiBpZCA/IGAke2lkfS1oZWxwZXItdGV4dGAgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGlucHV0TGFiZWxJZCA9IGxhYmVsICYmIGlkID8gYCR7aWR9LWxhYmVsYCA6IHVuZGVmaW5lZDtcbiAgY29uc3QgSW5wdXRDb21wb25lbnQgPSB2YXJpYW50Q29tcG9uZW50W3ZhcmlhbnRdO1xuICBjb25zdCBJbnB1dEVsZW1lbnQgPSAvKiNfX1BVUkVfXyovX2pzeChJbnB1dENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBoZWxwZXJUZXh0SWQsXG4gICAgYXV0b0NvbXBsZXRlOiBhdXRvQ29tcGxldGUsXG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgbmFtZTogbmFtZSxcbiAgICByb3dzOiByb3dzLFxuICAgIG1heFJvd3M6IG1heFJvd3MsXG4gICAgbWluUm93czogbWluUm93cyxcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBpZDogaWQsXG4gICAgaW5wdXRSZWY6IGlucHV0UmVmLFxuICAgIG9uQmx1cjogb25CbHVyLFxuICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSxcbiAgICBvbkZvY3VzOiBvbkZvY3VzLFxuICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICBpbnB1dFByb3BzOiBpbnB1dFByb3BzXG4gIH0sIElucHV0TW9yZSwgSW5wdXRQcm9wcykpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFRleHRGaWVsZFJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBlcnJvcjogZXJyb3IsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgcmVmOiByZWYsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIGNvbG9yOiBjb2xvcixcbiAgICB2YXJpYW50OiB2YXJpYW50LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2xhYmVsICE9IG51bGwgJiYgbGFiZWwgIT09ICcnICYmIC8qI19fUFVSRV9fKi9fanN4KElucHV0TGFiZWwsIF9leHRlbmRzKHtcbiAgICAgIGh0bWxGb3I6IGlkLFxuICAgICAgaWQ6IGlucHV0TGFiZWxJZFxuICAgIH0sIElucHV0TGFiZWxQcm9wcywge1xuICAgICAgY2hpbGRyZW46IGxhYmVsXG4gICAgfSkpLCBzZWxlY3QgPyAvKiNfX1BVUkVfXyovX2pzeChTZWxlY3QsIF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBoZWxwZXJUZXh0SWQsXG4gICAgICBpZDogaWQsXG4gICAgICBsYWJlbElkOiBpbnB1dExhYmVsSWQsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBpbnB1dDogSW5wdXRFbGVtZW50XG4gICAgfSwgU2VsZWN0UHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pKSA6IElucHV0RWxlbWVudCwgaGVscGVyVGV4dCAmJiAvKiNfX1BVUkVfXyovX2pzeChGb3JtSGVscGVyVGV4dCwgX2V4dGVuZHMoe1xuICAgICAgaWQ6IGhlbHBlclRleHRJZFxuICAgIH0sIEZvcm1IZWxwZXJUZXh0UHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBoZWxwZXJUZXh0XG4gICAgfSkpXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRGaWVsZC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYEZvcm1IZWxwZXJUZXh0YF0oL21hdGVyaWFsLXVpL2FwaS9mb3JtLWhlbHBlci10ZXh0LykgZWxlbWVudC5cbiAgICovXG4gIEZvcm1IZWxwZXJUZXh0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaGVscGVyIHRleHQgY29udGVudC5cbiAgICovXG4gIGhlbHBlclRleHQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIFVzZSB0aGlzIHByb3AgdG8gbWFrZSBgbGFiZWxgIGFuZCBgaGVscGVyVGV4dGAgYWNjZXNzaWJsZSBmb3Igc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgSW5wdXRMYWJlbGBdKC9tYXRlcmlhbC11aS9hcGkvaW5wdXQtbGFiZWwvKSBlbGVtZW50LlxuICAgKiBQb2ludGVyIGV2ZW50cyBsaWtlIGBvbkNsaWNrYCBhcmUgZW5hYmxlZCBpZiBhbmQgb25seSBpZiBgc2hyaW5rYCBpcyBgdHJ1ZWAuXG4gICAqL1xuICBJbnB1dExhYmVsUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBJbnB1dCBlbGVtZW50LlxuICAgKiBJdCB3aWxsIGJlIGEgW2BGaWxsZWRJbnB1dGBdKC9tYXRlcmlhbC11aS9hcGkvZmlsbGVkLWlucHV0LyksXG4gICAqIFtgT3V0bGluZWRJbnB1dGBdKC9tYXRlcmlhbC11aS9hcGkvb3V0bGluZWQtaW5wdXQvKSBvciBbYElucHV0YF0oL21hdGVyaWFsLXVpL2FwaS9pbnB1dC8pXG4gICAqIGNvbXBvbmVudCBkZXBlbmRpbmcgb24gdGhlIGB2YXJpYW50YCBwcm9wIHZhbHVlLlxuICAgKi9cbiAgSW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogVGhlIGxhYmVsIGNvbnRlbnQuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgIG9yIGBub3JtYWxgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nIG9mIHRoaXMgYW5kIGNvbnRhaW5lZCBjb21wb25lbnRzLlxuICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZScsICdub3JtYWwnXSksXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWF4Um93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1pblJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSBgdGV4dGFyZWFgIGVsZW1lbnQgaXMgcmVuZGVyZWQgaW5zdGVhZCBvZiBhbiBpbnB1dC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgYGlucHV0YCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIGRpc3BsYXllZCBhcyByZXF1aXJlZCBhbmQgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogUmVuZGVyIGEgW2BTZWxlY3RgXSgvbWF0ZXJpYWwtdWkvYXBpL3NlbGVjdC8pIGVsZW1lbnQgd2hpbGUgcGFzc2luZyB0aGUgSW5wdXQgZWxlbWVudCB0byBgU2VsZWN0YCBhcyBgaW5wdXRgIHBhcmFtZXRlci5cbiAgICogSWYgdGhpcyBvcHRpb24gaXMgc2V0IHlvdSBtdXN0IHBhc3MgdGhlIG9wdGlvbnMgb2YgdGhlIHNlbGVjdCBhcyBjaGlsZHJlbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNlbGVjdDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYFNlbGVjdGBdKC9tYXRlcmlhbC11aS9hcGkvc2VsZWN0LykgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ291dGxpbmVkJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVGV4dEZpZWxkOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlCdXR0b24nLCBzbG90KTtcbn1cbmNvbnN0IGJ1dHRvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCdXR0b24nLCBbJ3Jvb3QnLCAndGV4dCcsICd0ZXh0SW5oZXJpdCcsICd0ZXh0UHJpbWFyeScsICd0ZXh0U2Vjb25kYXJ5JywgJ3RleHRTdWNjZXNzJywgJ3RleHRFcnJvcicsICd0ZXh0SW5mbycsICd0ZXh0V2FybmluZycsICdvdXRsaW5lZCcsICdvdXRsaW5lZEluaGVyaXQnLCAnb3V0bGluZWRQcmltYXJ5JywgJ291dGxpbmVkU2Vjb25kYXJ5JywgJ291dGxpbmVkU3VjY2VzcycsICdvdXRsaW5lZEVycm9yJywgJ291dGxpbmVkSW5mbycsICdvdXRsaW5lZFdhcm5pbmcnLCAnY29udGFpbmVkJywgJ2NvbnRhaW5lZEluaGVyaXQnLCAnY29udGFpbmVkUHJpbWFyeScsICdjb250YWluZWRTZWNvbmRhcnknLCAnY29udGFpbmVkU3VjY2VzcycsICdjb250YWluZWRFcnJvcicsICdjb250YWluZWRJbmZvJywgJ2NvbnRhaW5lZFdhcm5pbmcnLCAnZGlzYWJsZUVsZXZhdGlvbicsICdmb2N1c1Zpc2libGUnLCAnZGlzYWJsZWQnLCAnY29sb3JJbmhlcml0JywgJ3RleHRTaXplU21hbGwnLCAndGV4dFNpemVNZWRpdW0nLCAndGV4dFNpemVMYXJnZScsICdvdXRsaW5lZFNpemVTbWFsbCcsICdvdXRsaW5lZFNpemVNZWRpdW0nLCAnb3V0bGluZWRTaXplTGFyZ2UnLCAnY29udGFpbmVkU2l6ZVNtYWxsJywgJ2NvbnRhaW5lZFNpemVNZWRpdW0nLCAnY29udGFpbmVkU2l6ZUxhcmdlJywgJ3NpemVNZWRpdW0nLCAnc2l6ZVNtYWxsJywgJ3NpemVMYXJnZScsICdmdWxsV2lkdGgnLCAnc3RhcnRJY29uJywgJ2VuZEljb24nLCAnaWNvblNpemVTbWFsbCcsICdpY29uU2l6ZU1lZGl1bScsICdpY29uU2l6ZUxhcmdlJ10pO1xuZXhwb3J0IGRlZmF1bHQgYnV0dG9uQ2xhc3NlczsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmNvbnN0IEJ1dHRvbkdyb3VwQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEJ1dHRvbkdyb3VwQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdCdXR0b25Hcm91cENvbnRleHQnO1xufVxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uR3JvdXBDb250ZXh0OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuY29uc3QgQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEJ1dHRvbkdyb3VwQnV0dG9uQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdCdXR0b25Hcm91cEJ1dHRvbkNvbnRleHQnO1xufVxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0OyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVFbGV2YXRpb25cIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJlbmRJY29uXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwiZnVsbFdpZHRoXCIsIFwic2l6ZVwiLCBcInN0YXJ0SWNvblwiLCBcInR5cGVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgaW50ZXJuYWxfcmVzb2x2ZVByb3BzIGFzIHJlc29sdmVQcm9wcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgYWxwaGEgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgc3R5bGVkLCB7IHJvb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBidXR0b25DbGFzc2VzLCB7IGdldEJ1dHRvblV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYnV0dG9uQ2xhc3Nlcyc7XG5pbXBvcnQgQnV0dG9uR3JvdXBDb250ZXh0IGZyb20gJy4uL0J1dHRvbkdyb3VwL0J1dHRvbkdyb3VwQ29udGV4dCc7XG5pbXBvcnQgQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0IGZyb20gJy4uL0J1dHRvbkdyb3VwL0J1dHRvbkdyb3VwQnV0dG9uQ29udGV4dCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbG9yLFxuICAgIGRpc2FibGVFbGV2YXRpb24sXG4gICAgZnVsbFdpZHRoLFxuICAgIHNpemUsXG4gICAgdmFyaWFudCxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBgJHt2YXJpYW50fSR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YCwgYCR7dmFyaWFudH1TaXplJHtjYXBpdGFsaXplKHNpemUpfWAsIGNvbG9yID09PSAnaW5oZXJpdCcgJiYgJ2NvbG9ySW5oZXJpdCcsIGRpc2FibGVFbGV2YXRpb24gJiYgJ2Rpc2FibGVFbGV2YXRpb24nLCBmdWxsV2lkdGggJiYgJ2Z1bGxXaWR0aCddLFxuICAgIGxhYmVsOiBbJ2xhYmVsJ10sXG4gICAgc3RhcnRJY29uOiBbJ3N0YXJ0SWNvbicsIGBpY29uU2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gXSxcbiAgICBlbmRJY29uOiBbJ2VuZEljb24nLCBgaWNvblNpemUke2NhcGl0YWxpemUoc2l6ZSl9YF1cbiAgfTtcbiAgY29uc3QgY29tcG9zZWRDbGFzc2VzID0gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEJ1dHRvblV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5jb25zdCBjb21tb25JY29uU3R5bGVzID0gb3duZXJTdGF0ZSA9PiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgJyYgPiAqOm50aC1vZi10eXBlKDEpJzoge1xuICAgIGZvbnRTaXplOiAxOFxuICB9XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdtZWRpdW0nICYmIHtcbiAgJyYgPiAqOm50aC1vZi10eXBlKDEpJzoge1xuICAgIGZvbnRTaXplOiAyMFxuICB9XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdsYXJnZScgJiYge1xuICAnJiA+ICo6bnRoLW9mLXR5cGUoMSknOiB7XG4gICAgZm9udFNpemU6IDIyXG4gIH1cbn0pO1xuY29uc3QgQnV0dG9uUm9vdCA9IHN0eWxlZChCdXR0b25CYXNlLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlCdXR0b24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIHN0eWxlc1tgJHtvd25lclN0YXRlLnZhcmlhbnR9JHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBzdHlsZXNbYHNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5zaXplKX1gXSwgc3R5bGVzW2Ake293bmVyU3RhdGUudmFyaWFudH1TaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF0sIG93bmVyU3RhdGUuY29sb3IgPT09ICdpbmhlcml0JyAmJiBzdHlsZXMuY29sb3JJbmhlcml0LCBvd25lclN0YXRlLmRpc2FibGVFbGV2YXRpb24gJiYgc3R5bGVzLmRpc2FibGVFbGV2YXRpb24sIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHN0eWxlcy5mdWxsV2lkdGhdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHBhbGV0dGUkZ2V0Q29uLCBfdGhlbWUkcGFsZXR0ZTtcbiAgY29uc3QgaW5oZXJpdENvbnRhaW5lZEJhY2tncm91bmRDb2xvciA9IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzgwMF07XG4gIGNvbnN0IGluaGVyaXRDb250YWluZWRIb3ZlckJhY2tncm91bmRDb2xvciA9IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleS5BMTAwIDogdGhlbWUucGFsZXR0ZS5ncmV5WzcwMF07XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5idXR0b24sIHtcbiAgICBtaW5XaWR0aDogNjQsXG4gICAgcGFkZGluZzogJzZweCAxNnB4JyxcbiAgICBib3JkZXJSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnYmFja2dyb3VuZC1jb2xvcicsICdib3gtc2hhZG93JywgJ2JvcmRlci1jb2xvcicsICdjb2xvciddLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRcbiAgICB9KSxcbiAgICAnJjpob3Zlcic6IF9leHRlbmRzKHtcbiAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS50ZXh0LnByaW1hcnlDaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgfVxuICAgIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3RleHQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICB9XG4gICAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiB7XG4gICAgICBib3JkZXI6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWlufWAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICB9XG4gICAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuQnV0dG9uLmluaGVyaXRDb250YWluZWRIb3ZlckJnIDogaW5oZXJpdENvbnRhaW5lZEhvdmVyQmFja2dyb3VuZENvbG9yLFxuICAgICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1s0XSxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJveFNoYWRvdzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbMl0sXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZ3JleVszMDBdXG4gICAgICB9XG4gICAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiBvd25lclN0YXRlLmNvbG9yICE9PSAnaW5oZXJpdCcgJiYge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5kYXJrLFxuICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluXG4gICAgICB9XG4gICAgfSksXG4gICAgJyY6YWN0aXZlJzogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgJiYge1xuICAgICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1s4XVxuICAgIH0pLFxuICAgIFtgJi4ke2J1dHRvbkNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiB7XG4gICAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzZdXG4gICAgfSksXG4gICAgW2AmLiR7YnV0dG9uQ2xhc3Nlcy5kaXNhYmxlZH1gXTogX2V4dGVuZHMoe1xuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gICAgICBib3JkZXI6IGAxcHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kfWBcbiAgICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdjb250YWluZWQnICYmIHtcbiAgICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQsXG4gICAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzBdLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kXG4gICAgfSlcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAndGV4dCcgJiYge1xuICAgIHBhZGRpbmc6ICc2cHggOHB4J1xuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICd0ZXh0JyAmJiBvd25lclN0YXRlLmNvbG9yICE9PSAnaW5oZXJpdCcgJiYge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluXG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ291dGxpbmVkJyAmJiB7XG4gICAgcGFkZGluZzogJzVweCAxNXB4JyxcbiAgICBib3JkZXI6ICcxcHggc29saWQgY3VycmVudENvbG9yJ1xuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbixcbiAgICBib3JkZXI6IHRoZW1lLnZhcnMgPyBgMXB4IHNvbGlkIHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbkNoYW5uZWx9IC8gMC41KWAgOiBgMXB4IHNvbGlkICR7YWxwaGEodGhlbWUucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLCAwLjUpfWBcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiB7XG4gICAgY29sb3I6IHRoZW1lLnZhcnMgP1xuICAgIC8vIHRoaXMgaXMgc2FmZSBiZWNhdXNlIGdyZXkgZG9lcyBub3QgY2hhbmdlIGJldHdlZW4gZGVmYXVsdCBsaWdodC9kYXJrIG1vZGVcbiAgICB0aGVtZS52YXJzLnBhbGV0dGUudGV4dC5wcmltYXJ5IDogKF90aGVtZSRwYWxldHRlJGdldENvbiA9IChfdGhlbWUkcGFsZXR0ZSA9IHRoZW1lLnBhbGV0dGUpLmdldENvbnRyYXN0VGV4dCkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRwYWxldHRlJGdldENvbi5jYWxsKF90aGVtZSRwYWxldHRlLCB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSksXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLkJ1dHRvbi5pbmhlcml0Q29udGFpbmVkQmcgOiBpbmhlcml0Q29udGFpbmVkQmFja2dyb3VuZENvbG9yLFxuICAgIGJveFNoYWRvdzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbMl1cbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnY29udGFpbmVkJyAmJiBvd25lclN0YXRlLmNvbG9yICE9PSAnaW5oZXJpdCcgJiYge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5jb250cmFzdFRleHQsXG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluXG4gIH0sIG93bmVyU3RhdGUuY29sb3IgPT09ICdpbmhlcml0JyAmJiB7XG4gICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICBib3JkZXJDb2xvcjogJ2N1cnJlbnRDb2xvcidcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3RleHQnICYmIHtcbiAgICBwYWRkaW5nOiAnNHB4IDVweCcsXG4gICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMylcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnbGFyZ2UnICYmIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3RleHQnICYmIHtcbiAgICBwYWRkaW5nOiAnOHB4IDExcHgnLFxuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTUpXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICAgIHBhZGRpbmc6ICczcHggOXB4JyxcbiAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICB9LCBvd25lclN0YXRlLnNpemUgPT09ICdsYXJnZScgJiYgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgICBwYWRkaW5nOiAnN3B4IDIxcHgnLFxuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTUpXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdjb250YWluZWQnICYmIHtcbiAgICBwYWRkaW5nOiAnNHB4IDEwcHgnLFxuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ2xhcmdlJyAmJiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdjb250YWluZWQnICYmIHtcbiAgICBwYWRkaW5nOiAnOHB4IDIycHgnLFxuICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTUpXG4gIH0sIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHtcbiAgICB3aWR0aDogJzEwMCUnXG4gIH0pO1xufSwgKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gb3duZXJTdGF0ZS5kaXNhYmxlRWxldmF0aW9uICYmIHtcbiAgYm94U2hhZG93OiAnbm9uZScsXG4gICcmOmhvdmVyJzoge1xuICAgIGJveFNoYWRvdzogJ25vbmUnXG4gIH0sXG4gIFtgJi4ke2J1dHRvbkNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgYm94U2hhZG93OiAnbm9uZSdcbiAgfSxcbiAgJyY6YWN0aXZlJzoge1xuICAgIGJveFNoYWRvdzogJ25vbmUnXG4gIH0sXG4gIFtgJi4ke2J1dHRvbkNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBib3hTaGFkb3c6ICdub25lJ1xuICB9XG59KTtcbmNvbnN0IEJ1dHRvblN0YXJ0SWNvbiA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUJ1dHRvbicsXG4gIHNsb3Q6ICdTdGFydEljb24nLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnN0YXJ0SWNvbiwgc3R5bGVzW2BpY29uU2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gIG1hcmdpblJpZ2h0OiA4LFxuICBtYXJnaW5MZWZ0OiAtNFxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgbWFyZ2luTGVmdDogLTJcbn0sIGNvbW1vbkljb25TdHlsZXMob3duZXJTdGF0ZSkpKTtcbmNvbnN0IEJ1dHRvbkVuZEljb24gPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlCdXR0b24nLFxuICBzbG90OiAnRW5kSWNvbicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuZW5kSWNvbiwgc3R5bGVzW2BpY29uU2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gIG1hcmdpblJpZ2h0OiAtNCxcbiAgbWFyZ2luTGVmdDogOFxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgbWFyZ2luUmlnaHQ6IC0yXG59LCBjb21tb25JY29uU3R5bGVzKG93bmVyU3RhdGUpKSk7XG5jb25zdCBCdXR0b24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCdXR0b24oaW5Qcm9wcywgcmVmKSB7XG4gIC8vIHByb3BzIHByaW9yaXR5OiBgaW5Qcm9wc2AgPiBgY29udGV4dFByb3BzYCA+IGB0aGVtZURlZmF1bHRQcm9wc2BcbiAgY29uc3QgY29udGV4dFByb3BzID0gUmVhY3QudXNlQ29udGV4dChCdXR0b25Hcm91cENvbnRleHQpO1xuICBjb25zdCBidXR0b25Hcm91cEJ1dHRvbkNvbnRleHRQb3NpdGlvbkNsYXNzTmFtZSA9IFJlYWN0LnVzZUNvbnRleHQoQnV0dG9uR3JvdXBCdXR0b25Db250ZXh0KTtcbiAgY29uc3QgcmVzb2x2ZWRQcm9wcyA9IHJlc29sdmVQcm9wcyhjb250ZXh0UHJvcHMsIGluUHJvcHMpO1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiByZXNvbHZlZFByb3BzLFxuICAgIG5hbWU6ICdNdWlCdXR0b24nXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgICAgY29tcG9uZW50ID0gJ2J1dHRvbicsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUVsZXZhdGlvbiA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUZvY3VzUmlwcGxlID0gZmFsc2UsXG4gICAgICBlbmRJY29uOiBlbmRJY29uUHJvcCxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgICAgc2l6ZSA9ICdtZWRpdW0nLFxuICAgICAgc3RhcnRJY29uOiBzdGFydEljb25Qcm9wLFxuICAgICAgdHlwZSxcbiAgICAgIHZhcmlhbnQgPSAndGV4dCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlRWxldmF0aW9uLFxuICAgIGRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBmdWxsV2lkdGgsXG4gICAgc2l6ZSxcbiAgICB0eXBlLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3Qgc3RhcnRJY29uID0gc3RhcnRJY29uUHJvcCAmJiAvKiNfX1BVUkVfXyovX2pzeChCdXR0b25TdGFydEljb24sIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuc3RhcnRJY29uLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2hpbGRyZW46IHN0YXJ0SWNvblByb3BcbiAgfSk7XG4gIGNvbnN0IGVuZEljb24gPSBlbmRJY29uUHJvcCAmJiAvKiNfX1BVUkVfXyovX2pzeChCdXR0b25FbmRJY29uLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmVuZEljb24sXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjaGlsZHJlbjogZW5kSWNvblByb3BcbiAgfSk7XG4gIGNvbnN0IHBvc2l0aW9uQ2xhc3NOYW1lID0gYnV0dG9uR3JvdXBCdXR0b25Db250ZXh0UG9zaXRpb25DbGFzc05hbWUgfHwgJyc7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoQnV0dG9uUm9vdCwgX2V4dGVuZHMoe1xuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNvbnRleHRQcm9wcy5jbGFzc05hbWUsIGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBwb3NpdGlvbkNsYXNzTmFtZSksXG4gICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyLCB7XG4gICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICBjaGlsZHJlbjogW3N0YXJ0SWNvbiwgY2hpbGRyZW4sIGVuZEljb25dXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnV0dG9uLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3N1Y2Nlc3MnLCAnZXJyb3InLCAnaW5mbycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgbm8gZWxldmF0aW9uIGlzIHVzZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRWxldmF0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlICBrZXlib2FyZCBmb2N1cyByaXBwbGUgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGAuTXVpLWZvY3VzVmlzaWJsZWAgY2xhc3MuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEVsZW1lbnQgcGxhY2VkIGFmdGVyIHRoZSBjaGlsZHJlbi5cbiAgICovXG4gIGVuZEljb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYnV0dG9uIHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBVUkwgdG8gbGluayB0byB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZC5cbiAgICogSWYgZGVmaW5lZCwgYW4gYGFgIGVsZW1lbnQgd2lsbCBiZSB1c2VkIGFzIHRoZSByb290IG5vZGUuXG4gICAqL1xuICBocmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogYHNtYWxsYCBpcyBlcXVpdmFsZW50IHRvIHRoZSBkZW5zZSBidXR0b24gc3R5bGluZy5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBFbGVtZW50IHBsYWNlZCBiZWZvcmUgdGhlIGNoaWxkcmVuLlxuICAgKi9cbiAgc3RhcnRJY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2J1dHRvbicsICdyZXNldCcsICdzdWJtaXQnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogQGRlZmF1bHQgJ3RleHQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NvbnRhaW5lZCcsICdvdXRsaW5lZCcsICd0ZXh0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCdXR0b247IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRNZW51SXRlbVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTWVudUl0ZW0nLCBzbG90KTtcbn1cbmNvbnN0IG1lbnVJdGVtQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aU1lbnVJdGVtJywgWydyb290JywgJ2ZvY3VzVmlzaWJsZScsICdkZW5zZScsICdkaXNhYmxlZCcsICdkaXZpZGVyJywgJ2d1dHRlcnMnLCAnc2VsZWN0ZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBtZW51SXRlbUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXV0b0ZvY3VzXCIsIFwiY29tcG9uZW50XCIsIFwiZGVuc2VcIiwgXCJkaXZpZGVyXCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJyb2xlXCIsIFwidGFiSW5kZXhcIiwgXCJjbGFzc05hbWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBhbHBoYSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi4vTGlzdC9MaXN0Q29udGV4dCc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCB1c2VFbmhhbmNlZEVmZmVjdCBmcm9tICcuLi91dGlscy91c2VFbmhhbmNlZEVmZmVjdCc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB7IGRpdmlkZXJDbGFzc2VzIH0gZnJvbSAnLi4vRGl2aWRlcic7XG5pbXBvcnQgeyBsaXN0SXRlbUljb25DbGFzc2VzIH0gZnJvbSAnLi4vTGlzdEl0ZW1JY29uJztcbmltcG9ydCB7IGxpc3RJdGVtVGV4dENsYXNzZXMgfSBmcm9tICcuLi9MaXN0SXRlbVRleHQnO1xuaW1wb3J0IG1lbnVJdGVtQ2xhc3NlcywgeyBnZXRNZW51SXRlbVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vbWVudUl0ZW1DbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgY29uc3Qgb3ZlcnJpZGVzUmVzb2x2ZXIgPSAocHJvcHMsIHN0eWxlcykgPT4ge1xuICBjb25zdCB7XG4gICAgb3duZXJTdGF0ZVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuZGVuc2UgJiYgc3R5bGVzLmRlbnNlLCBvd25lclN0YXRlLmRpdmlkZXIgJiYgc3R5bGVzLmRpdmlkZXIsICFvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHN0eWxlcy5ndXR0ZXJzXTtcbn07XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgZGlzYWJsZWQsXG4gICAgZGVuc2UsXG4gICAgZGl2aWRlcixcbiAgICBkaXNhYmxlR3V0dGVycyxcbiAgICBzZWxlY3RlZCxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBkZW5zZSAmJiAnZGVuc2UnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCAhZGlzYWJsZUd1dHRlcnMgJiYgJ2d1dHRlcnMnLCBkaXZpZGVyICYmICdkaXZpZGVyJywgc2VsZWN0ZWQgJiYgJ3NlbGVjdGVkJ11cbiAgfTtcbiAgY29uc3QgY29tcG9zZWRDbGFzc2VzID0gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldE1lbnVJdGVtVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBjbGFzc2VzLCBjb21wb3NlZENsYXNzZXMpO1xufTtcbmNvbnN0IE1lbnVJdGVtUm9vdCA9IHN0eWxlZChCdXR0b25CYXNlLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlNZW51SXRlbScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5MSwge1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgbWluSGVpZ2h0OiA0OCxcbiAgcGFkZGluZ1RvcDogNixcbiAgcGFkZGluZ0JvdHRvbTogNixcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnXG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiB7XG4gIHBhZGRpbmdMZWZ0OiAxNixcbiAgcGFkZGluZ1JpZ2h0OiAxNlxufSwgb3duZXJTdGF0ZS5kaXZpZGVyICYmIHtcbiAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZGl2aWRlcn1gLFxuICBiYWNrZ3JvdW5kQ2xpcDogJ3BhZGRpbmctYm94J1xufSwge1xuICAnJjpob3Zlcic6IHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmhvdmVyLFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgfVxuICB9LFxuICBbYCYuJHttZW51SXRlbUNsYXNzZXMuc2VsZWN0ZWR9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KSxcbiAgICBbYCYuJHttZW51SXRlbUNsYXNzZXMuZm9jdXNWaXNpYmxlfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0gKyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uZm9jdXNPcGFjaXR5fSkpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHkpXG4gICAgfVxuICB9LFxuICBbYCYuJHttZW51SXRlbUNsYXNzZXMuc2VsZWN0ZWR9OmhvdmVyYF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvIGNhbGMoJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0gKyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5fSkpYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkgKyB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUucHJpbWFyeS5tYWluQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSlcbiAgICB9XG4gIH0sXG4gIFtgJi4ke21lbnVJdGVtQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5mb2N1c1xuICB9LFxuICBbYCYuJHttZW51SXRlbUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBvcGFjaXR5OiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRPcGFjaXR5XG4gIH0sXG4gIFtgJiArIC4ke2RpdmlkZXJDbGFzc2VzLnJvb3R9YF06IHtcbiAgICBtYXJnaW5Ub3A6IHRoZW1lLnNwYWNpbmcoMSksXG4gICAgbWFyZ2luQm90dG9tOiB0aGVtZS5zcGFjaW5nKDEpXG4gIH0sXG4gIFtgJiArIC4ke2RpdmlkZXJDbGFzc2VzLmluc2V0fWBdOiB7XG4gICAgbWFyZ2luTGVmdDogNTJcbiAgfSxcbiAgW2AmIC4ke2xpc3RJdGVtVGV4dENsYXNzZXMucm9vdH1gXToge1xuICAgIG1hcmdpblRvcDogMCxcbiAgICBtYXJnaW5Cb3R0b206IDBcbiAgfSxcbiAgW2AmIC4ke2xpc3RJdGVtVGV4dENsYXNzZXMuaW5zZXR9YF06IHtcbiAgICBwYWRkaW5nTGVmdDogMzZcbiAgfSxcbiAgW2AmIC4ke2xpc3RJdGVtSWNvbkNsYXNzZXMucm9vdH1gXToge1xuICAgIG1pbldpZHRoOiAzNlxuICB9XG59LCAhb3duZXJTdGF0ZS5kZW5zZSAmJiB7XG4gIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICBtaW5IZWlnaHQ6ICdhdXRvJ1xuICB9XG59LCBvd25lclN0YXRlLmRlbnNlICYmIF9leHRlbmRzKHtcbiAgbWluSGVpZ2h0OiAzMixcbiAgLy8gaHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9jb21wb25lbnRzL21lbnVzI3NwZWNzID4gRGVuc2VcbiAgcGFkZGluZ1RvcDogNCxcbiAgcGFkZGluZ0JvdHRvbTogNFxufSwgdGhlbWUudHlwb2dyYXBoeS5ib2R5Miwge1xuICBbYCYgLiR7bGlzdEl0ZW1JY29uQ2xhc3Nlcy5yb290fSBzdmdgXToge1xuICAgIGZvbnRTaXplOiAnMS4yNXJlbSdcbiAgfVxufSkpKTtcbmNvbnN0IE1lbnVJdGVtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudUl0ZW0oaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aU1lbnVJdGVtJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgICBjb21wb25lbnQgPSAnbGknLFxuICAgICAgZGVuc2UgPSBmYWxzZSxcbiAgICAgIGRpdmlkZXIgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gZmFsc2UsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICByb2xlID0gJ21lbnVpdGVtJyxcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleFByb3AsXG4gICAgICBjbGFzc05hbWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGlzdENvbnRleHQpO1xuICBjb25zdCBjaGlsZENvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgZGVuc2U6IGRlbnNlIHx8IGNvbnRleHQuZGVuc2UgfHwgZmFsc2UsXG4gICAgZGlzYWJsZUd1dHRlcnNcbiAgfSksIFtjb250ZXh0LmRlbnNlLCBkZW5zZSwgZGlzYWJsZUd1dHRlcnNdKTtcbiAgY29uc3QgbWVudUl0ZW1SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBpZiAobWVudUl0ZW1SZWYuY3VycmVudCkge1xuICAgICAgICBtZW51SXRlbVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBVbmFibGUgdG8gc2V0IGZvY3VzIHRvIGEgTWVudUl0ZW0gd2hvc2UgY29tcG9uZW50IGhhcyBub3QgYmVlbiByZW5kZXJlZC4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFthdXRvRm9jdXNdKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRlbnNlOiBjaGlsZENvbnRleHQuZGVuc2UsXG4gICAgZGl2aWRlcixcbiAgICBkaXNhYmxlR3V0dGVyc1xuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKHByb3BzKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihtZW51SXRlbVJlZiwgcmVmKTtcbiAgbGV0IHRhYkluZGV4O1xuICBpZiAoIXByb3BzLmRpc2FibGVkKSB7XG4gICAgdGFiSW5kZXggPSB0YWJJbmRleFByb3AgIT09IHVuZGVmaW5lZCA/IHRhYkluZGV4UHJvcCA6IC0xO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChMaXN0Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjaGlsZENvbnRleHQsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KE1lbnVJdGVtUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgICByb2xlOiByb2xlLFxuICAgICAgdGFiSW5kZXg6IHRhYkluZGV4LFxuICAgICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSksXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzXG4gICAgfSkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51SXRlbS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsaXN0IGl0ZW0gaXMgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKiBGb2N1cyB3aWxsIGFsc28gYmUgdHJpZ2dlcmVkIGlmIHRoZSB2YWx1ZSBjaGFuZ2VzIGZyb20gZmFsc2UgdG8gdHJ1ZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBjb21wYWN0IHZlcnRpY2FsIHBhZGRpbmcgZGVzaWduZWQgZm9yIGtleWJvYXJkIGFuZCBtb3VzZSBpbnB1dCBpcyB1c2VkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBNZW51IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlbnNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxlZnQgYW5kIHJpZ2h0IHBhZGRpbmcgaXMgcmVtb3ZlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSAxcHggbGlnaHQgYm9yZGVyIGlzIGFkZGVkIHRvIHRoZSBib3R0b20gb2YgdGhlIG1lbnUgaXRlbS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpdmlkZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhpcyBwcm9wIGNhbiBoZWxwIGlkZW50aWZ5IHdoaWNoIGVsZW1lbnQgaGFzIGtleWJvYXJkIGZvY3VzLlxuICAgKiBUaGUgY2xhc3MgbmFtZSB3aWxsIGJlIGFwcGxpZWQgd2hlbiB0aGUgZWxlbWVudCBnYWlucyB0aGUgZm9jdXMgdGhyb3VnaCBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICogSXQncyBhIHBvbHlmaWxsIGZvciB0aGUgW0NTUyA6Zm9jdXMtdmlzaWJsZSBzZWxlY3Rvcl0oaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy00LyN0aGUtZm9jdXMtdmlzaWJsZS1wc2V1ZG8pLlxuICAgKiBUaGUgcmF0aW9uYWxlIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW5lZCBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvSEVBRC9leHBsYWluZXIubWQpLlxuICAgKiBBIFtwb2x5ZmlsbCBjYW4gYmUgdXNlZF0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZSkgdG8gYXBwbHkgYSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gb3RoZXIgY29tcG9uZW50c1xuICAgKiBpZiBuZWVkZWQuXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByb2xlOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2VsZWN0ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm51bWJlclxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE1lbnVJdGVtOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBCYWNrZHJvcCBmcm9tICdAbXVpL21hdGVyaWFsL0JhY2tkcm9wJztcbmltcG9ydCBCb3ggZnJvbSAnQG11aS9tYXRlcmlhbC9Cb3gnO1xuaW1wb3J0IE1vZGFsIGZyb20gJ0BtdWkvbWF0ZXJpYWwvTW9kYWwnO1xuaW1wb3J0IEZhZGUgZnJvbSAnQG11aS9tYXRlcmlhbC9GYWRlJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtdWkvbWF0ZXJpYWwvVHlwb2dyYXBoeSc7XG5pbXBvcnQgTGlzdEl0ZW1CdXR0b24gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1CdXR0b25cIjtcbmltcG9ydCBMaXN0SXRlbUljb24gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1JY29uXCI7XG5pbXBvcnQgTWFuYWdlQWNjb3VudHNJY29uIGZyb20gXCJAbXVpL2ljb25zLW1hdGVyaWFsL01hbmFnZUFjY291bnRzXCI7XG5pbXBvcnQgTGlzdEl0ZW1UZXh0IGZyb20gXCJAbXVpL21hdGVyaWFsL0xpc3RJdGVtVGV4dFwiO1xuaW1wb3J0IEFsZXJ0IGZyb20gJ0BtdWkvbWF0ZXJpYWwvQWxlcnQnO1xuaW1wb3J0IFRleHRGaWVsZCBmcm9tICdAbXVpL21hdGVyaWFsL1RleHRGaWVsZCc7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tIFwiQG11aS9tYXRlcmlhbC9JY29uQnV0dG9uXCI7XG5pbXBvcnQgQ2xvc2VJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvQ2xvc2UnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdAbXVpL21hdGVyaWFsL0J1dHRvbic7XG5pbXBvcnQgTWVudUl0ZW0gZnJvbSAnQG11aS9tYXRlcmlhbC9NZW51SXRlbSc7XG5pbXBvcnQgU2VuZEljb24gZnJvbSAnQG11aS9pY29ucy1tYXRlcmlhbC9TZW5kJztcbmltcG9ydCBTdGFjayBmcm9tICdAbXVpL21hdGVyaWFsL1N0YWNrJztcbmltcG9ydCBDYW5jZWxJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvQ2FuY2VsJztcbmltcG9ydCB7dXNlRWZmZWN0LCB1c2VTdGF0ZX0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgTGluayBmcm9tIFwiQG11aS9tYXRlcmlhbC9MaW5rXCI7XG5cbmZ1bmN0aW9uIENvcHlyaWdodChwcm9wcykge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dC5zZWNvbmRhcnlcIiBhbGlnbj1cImNlbnRlclwiIHsuLi5wcm9wc30+XG4gICAgICAgICAgICB7J0NvcHlyaWdodCDCqSAnfVxuICAgICAgICAgICAgPExpbmsgY29sb3I9XCJpbmhlcml0XCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS93YWxpbW9ycmlzL29wZW5zcXVhcmVcIj5cbiAgICAgICAgICAgICAgICBPcGVuU3F1YXJlXG4gICAgICAgICAgICA8L0xpbms+eycgJ31cbiAgICAgICAgICAgIHtuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCl9XG4gICAgICAgICAgICB7Jy4nfVxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgKTtcbn1cblxuY29uc3Qgc3R5bGUgPSB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgYm9yZGVyUmFkaXVzOiAnMyUnLFxuICAgIHRvcDogJzUwJScsXG4gICAgbGVmdDogJzUwJScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIC01MCUpJyxcbiAgICBoZWlnaHQ6ICc5MHZoJyxcbiAgICB3aWR0aDogJzYwdncnLFxuICAgIGJnY29sb3I6ICdiYWNrZ3JvdW5kLnBhcGVyJyxcbiAgICBib3JkZXI6ICcycHggc29saWQgIzAwMCcsXG4gICAgYm94U2hhZG93OiAyNCxcbiAgICBwOiA0LFxufTtcblxuY29uc3Qgc2V0dGluZ3NNb2RhbENsb3NlQnV0dG9uID0ge1xuICAgIGxlZnQ6ICc5MCUnXG59XG5cbmNvbnN0IHNldHRpbmdzTW9kYWxJbnB1dEZpZWxkID0ge1xuICAgIG1hcmdpblJpZ2h0OiAnMjAlJ1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTZXR0aW5nc01vZGFsKHByb3BzKSB7XG4gICAgY29uc3QgW29wZW4sIHNldE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtzdWJtaXRPbk5vVXBkYXRlcywgc2V0U3VibWl0T25Ob1VwZGF0ZXNdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgLy8gdXNlciBkZXRhaWwgdmFsdWVzXG4gICAgY29uc3QgW3VzZXJuYW1lLCBzZXRVc2VyTmFtZV0gPSB1c2VTdGF0ZShwcm9wcy51c2VyRGV0YWlsc1sndXNlcm5hbWUnXSk7XG4gICAgY29uc3QgW3VzZXJJZCwgc2V0VXNlcklkXSA9IHVzZVN0YXRlKHByb3BzLnVzZXJEZXRhaWxzWyd1c2VySWQnXSk7XG4gICAgY29uc3QgW2NyZWF0ZWRBdCwgc2V0Q3JlYXRlZEF0XSA9IHVzZVN0YXRlKHByb3BzLnVzZXJEZXRhaWxzWydjcmVhdGVkQXQnXSk7XG4gICAgY29uc3QgW2VtYWlsLCBzZXRFbWFpbF0gPSB1c2VTdGF0ZShwcm9wcy51c2VyRGV0YWlsc1snZW1haWwnXSk7XG4gICAgY29uc3QgW3ByZWZlcnJlZE5hbWUsIHNldFByZWZlcnJlZE5hbWVdID0gdXNlU3RhdGUocHJvcHMudXNlckRldGFpbHNbJ2ZpcnN0TmFtZSddKTtcbiAgICBjb25zdCBbb3JnLCBzZXRPcmddID0gdXNlU3RhdGUocHJvcHMudXNlckRldGFpbHNbJ29yZ2FuaXphdGlvbiddKTtcbiAgICBjb25zdCBbcHJvZiwgc2V0UHJvZl0gPSB1c2VTdGF0ZShwcm9wcy51c2VyRGV0YWlsc1sncHJvZmVzc2lvbiddKVxuICAgIGNvbnN0IFthZ2VSYW5nZSwgc2V0QWdlUmFuZ2VdID0gdXNlU3RhdGUocHJvcHMudXNlckRldGFpbHNbJ2FnZVJhbmdlJ10pO1xuXG4gICAgLyoqXG4gICAgICogU2V0dGluZyB1c2VyIGRldGFpbHMgaW5pdGlhbCBzdGF0ZSBhbGxvd3MgY2xpZW50IHRvIHZhbGlkYXRlIHVzZXIgdmFsdWVzIGJlZm9yZVxuICAgICAqIHNlbmRpbmcgdXBkYXRlcyB0aHJvdWdoIEFQSS4gVGhpcyBzYXZlcyBmcm9tIHVzaW5nIHVubmVjZXNzYXJ5IHdyaXRlcy9yZWFkcyBvblxuICAgICAqIGR5bmFtby4gVGhlc2UgdmFsdWVzIGFyZSBzdGF0aWMsIHRoZXJlIGlzIG5vIHVzZSB0cmFja2luZyB1cGRhdGVzIGJlY2F1c2UgYSBzaW5nbGVcbiAgICAgKiB2aWV3aW5nIG9mIHRoZSBwcm9maWxlIHNldHRpbmdzIHZpZXcgd2lsbCBlc3RhYmxpc2ggdGhlc2UgaW5pdGlhbCB2YWx1ZXMsIGFuZCB3ZVxuICAgICAqIHdhbnQgdG8gY29tcGFyZSB0aGUgaW5pdGlhbCB2YWx1ZXMgdG8gYW55IGNoYW5nZXMgb24gdGhvc2UgdmFsdWVzIGluIHRoYXQgc2luZ2xlXG4gICAgICogdmlld2luZy4gVXBvbiBvcGVuaW5nIGEgbmV3IHNldHRpbmdzIHZpZXdpbmcgdGhlIGN1cnJlbnQgdmFsdWVzIHdpbGwgYmUgc2V0IGFuZFxuICAgICAqIHRob3NlIHZhbHVlcyBzaG91bGQgYmUgdGhlIHNhbWUgdGhyb3VnaG91dCB0aGF0IHZpZXdpbmcuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7e2FnZVJhbmdlLCBjcmVhdGVkQXQsIGZpcnN0TmFtZSwgb3JnOiB1bmtub3duLCB1c2VySWQsIHByb2Y6IHVua25vd24sIGVtYWlsLCB1c2VybmFtZX19XG4gICAgICovXG4gICAgY29uc3QgdXNlckRldGFpbHMgPSB7XG4gICAgICAgIHVzZXJuYW1lOiBwcm9wcy51c2VyRGV0YWlsc1sndXNlcm5hbWUnXSxcbiAgICAgICAgdXNlcklkOiBwcm9wcy51c2VyRGV0YWlsc1sndXNlcklkJ10sXG4gICAgICAgIGNyZWF0ZWRBdDogcHJvcHMudXNlckRldGFpbHNbJ2NyZWF0ZWRBdCddLFxuICAgICAgICBlbWFpbDogcHJvcHMudXNlckRldGFpbHNbJ2VtYWlsJ10sXG4gICAgICAgIGZpcnN0TmFtZTogcHJvcHMudXNlckRldGFpbHNbJ2ZpcnN0TmFtZSddLFxuICAgICAgICBvcmc6IHByb3BzLnVzZXJEZXRhaWxzWydvcmdhbml6YXRpb24nXSxcbiAgICAgICAgcHJvZjogcHJvcHMudXNlckRldGFpbHNbJ3Byb2Zlc3Npb24nXSxcbiAgICAgICAgYWdlUmFuZ2U6IHByb3BzLnVzZXJEZXRhaWxzWydhZ2VSYW5nZSddXG4gICAgfTtcblxuICAgIC8vIGRyb3AgZG93biB2YWx1ZXNcbiAgICBjb25zdCBbb3JnYW5pemF0aW9ucywgc2V0T3JnYW5pemF0aW9uc10gPSB1c2VTdGF0ZShbXSk7XG4gICAgY29uc3QgW3Byb2Zlc3Npb25zLCBzZXRQcm9mZXNzaW9uc10gPSB1c2VTdGF0ZShbXSk7XG4gICAgY29uc3QgW2FnZXMsIHNldEFnZXNdID0gdXNlU3RhdGUoW10pO1xuXG4gICAgLy8gaGFuZGxlIG1vZGFsIG9wZW4vY2xvc2VcbiAgICBjb25zdCBoYW5kbGVPcGVuID0gKCkgPT4gc2V0T3Blbih0cnVlKTtcbiAgICBjb25zdCBoYW5kbGVDbG9zZSA9ICgpID0+IHtcbiAgICAgICAgc2V0U3VibWl0T25Ob1VwZGF0ZXMoZmFsc2UpO1xuICAgICAgICBzZXRPcGVuKGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbnkgdXBkYXRlZCB2YWx1ZXMgc2hvdWxkIGJlIHNldCB0byBpdHMgb3JpZ2luYWwgdmFsdWUgaW5cbiAgICAgKiB0aGUgY2FzZSBvZiBjYW5jZWwgY2xvc3VyZXMgb24gdGhlIHByb2ZpbGUgc2V0dGluZ3Mgdmlldy5cbiAgICAgKi9cbiAgICBjb25zdCBoYW5kbGVDYW5jZWxDbG9zZSA9ICgpID0+IHtcbiAgICAgICAgc2V0VXNlck5hbWUodXNlckRldGFpbHMudXNlcm5hbWUpO1xuICAgICAgICBzZXRFbWFpbCh1c2VyRGV0YWlscy5lbWFpbCk7XG4gICAgICAgIHNldFByZWZlcnJlZE5hbWUodXNlckRldGFpbHMuZmlyc3ROYW1lKTtcbiAgICAgICAgc2V0T3JnKHVzZXJEZXRhaWxzLm9yZyk7XG4gICAgICAgIHNldFByb2YodXNlckRldGFpbHMucHJvZik7XG4gICAgICAgIHNldEFnZVJhbmdlKHVzZXJEZXRhaWxzLmFnZVJhbmdlKTtcbiAgICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgdXNlciBkZXRhaWwgcHJvcGVydHkgdXBkYXRlc1xuICAgIGNvbnN0IGhhbmRsZUVtYWlsQ2hhbmdlID0gKGUpID0+IHNldEVtYWlsKGUudGFyZ2V0LnZhbHVlKTtcbiAgICBjb25zdCBoYW5kbGVQcmVmZXJyZWROYW1lQ2hhbmdlID0gKGUpID0+IHNldFByZWZlcnJlZE5hbWUoZS50YXJnZXQudmFsdWUpO1xuICAgIGNvbnN0IGhhbmRsZUFnZVJhbmdlQ2hhbmdlID0gKGUpID0+IHNldEFnZVJhbmdlKGUudGFyZ2V0LnZhbHVlKTtcbiAgICBjb25zdCBoYW5kbGVPcmdDaGFuZ2UgPSAoZSkgPT4gc2V0T3JnKGUudGFyZ2V0LnZhbHVlKTtcbiAgICBjb25zdCBoYW5kbGVQcm9mQ2hhbmdlID0gKGUpID0+IHNldFByb2YoZS50YXJnZXQudmFsdWUpO1xuXG4gICAgbGV0IG9yZ2FuaXphdGlvbnNDb25maWcgPSB7XG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIG1heEJvZHlMZW5ndGg6IEluZmluaXR5LFxuICAgICAgICB1cmw6ICcvb3BlbnNxdWFyZS9hcGkvZHJvcGRvd25zL29yZ2FuaXphdGlvbnMnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6ICcnXG4gICAgfTtcblxuICAgIGxldCBwcm9mZXNzaW9uc0NvbmZpZyA9IHtcbiAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgbWF4Qm9keUxlbmd0aDogSW5maW5pdHksXG4gICAgICAgIHVybDogJy9vcGVuc3F1YXJlL2FwaS9kcm9wZG93bnMvcHJvZmVzc2lvbnMnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6ICcnXG4gICAgfVxuXG4gICAgbGV0IGFnZXNDb25maWcgPSB7XG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIG1heEJvZHlMZW5ndGg6IEluZmluaXR5LFxuICAgICAgICB1cmw6ICcvb3BlbnNxdWFyZS9hcGkvZHJvcGRvd25zL2FnZV9yYW5nZXMnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6ICcnXG4gICAgfVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0RW1haWwocHJvcHMudXNlckRldGFpbHNbJ2VtYWlsJ10pXG4gICAgfSwgW3Byb3BzXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRQcmVmZXJyZWROYW1lKHByb3BzLnVzZXJEZXRhaWxzWydmaXJzdE5hbWUnXSlcbiAgICB9LCBbcHJvcHNdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldEFnZVJhbmdlKHByb3BzLnVzZXJEZXRhaWxzWydhZ2VSYW5nZSddKVxuICAgIH0sIFtwcm9wc10pXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRQcm9mKHByb3BzLnVzZXJEZXRhaWxzWydwcm9mZXNzaW9uJ10pXG4gICAgfSwgW3Byb3BzXSlcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldE9yZyhwcm9wcy51c2VyRGV0YWlsc1snb3JnYW5pemF0aW9uJ10pXG4gICAgfSwgW3Byb3BzXSlcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNldFVzZXJOYW1lKHByb3BzLnVzZXJEZXRhaWxzWyd1c2VybmFtZSddKVxuICAgIH0sIFtwcm9wc10pXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRDcmVhdGVkQXQocHJvcHMudXNlckRldGFpbHNbJ2NyZWF0ZWRBdCddKVxuICAgIH0sIFtwcm9wc10pXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRVc2VySWQocHJvcHMudXNlckRldGFpbHNbJ3VzZXJJZCddKVxuICAgIH0sIFtwcm9wc10pXG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRTdWJtaXRPbk5vVXBkYXRlcyhmYWxzZSk7XG4gICAgfSwgW10pXG5cbiAgICBhc3luYyBmdW5jdGlvbiBoYW5kbGVVcGRhdGVTdWJtaXQoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCB1c2VyRGV0YWlsc1VwZGF0ZU9iamVjdCA9IGNyZWF0ZVVzZXJEZXRhaWxzVXBkYXRlT2JqZWN0KCk7XG4gICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHVzZXJEZXRhaWxzVXBkYXRlT2JqZWN0KSk7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh1c2VyRGV0YWlsc1VwZGF0ZU9iamVjdCkubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbm8gdmFsdWVzIG5lZWQgdXBkYXRpbmchJylcbiAgICAgICAgICAgIHNldFN1Ym1pdE9uTm9VcGRhdGVzKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0U3VibWl0T25Ob1VwZGF0ZXMoZmFsc2UpO1xuICAgICAgICAgICAgYXdhaXQgYXhpb3MucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICAgICAgbWF4Qm9keUxlbmd0aDogSW5maW5pdHksXG4gICAgICAgICAgICAgICAgdXJsOiAnL29wZW5zZW50b3AvYXBpL2FjdGlvbnMvdXNlcl9kZXRhaWxzL3VwZGF0ZScsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh1c2VyRGV0YWlsc1VwZGF0ZU9iamVjdClcbiAgICAgICAgICAgIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlcyB1cGRhdGUgdmFsdWVzIGJ5IGNoZWNraW5nIHRoZSBzdGF0aWMgdXNlckRldGFpbHMgb2JqZWN0IGFnYWluc3QgdGhlXG4gICAgICogZHluYW1pYyB1c2VyIGRldGFpbCBwcm9wZXJ0aWVzIG9uIHRoZSBwcm9maWxlIHNldHRpbmdzIHBhZ2UuIElmIHRoZXJlIGFyZSBub1xuICAgICAqIG9iamVjdHMgdGhhdCBuZWVkIHRvIGJlIHVwZGF0ZWQgdGhlbiB0aGVyZSBpcyBubyByZXF1ZXN0IHRvIHRoZSBkeW5hbW9kYiB0YWJsZS5cbiAgICAgKiBPdGhlcndpc2UsIGFuIHVwZGF0ZSBvYmplY3QgaXMgYnVpbHQgd2l0aCB1cGRhdGVkIHVzZXIgZGV0YWlsIHZhbHVlcy4gTm90ZTogdGhlXG4gICAgICogcGFydGl0aW9uIGFuZCBzb3J0IGtleXMgYWx3YXlzIG5lZWQgdG8gYmUgYWRkZWQgZm9yIGZhc3Qgd3JpdGUgdG8gZHluYW1vLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3t9fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVVzZXJEZXRhaWxzVXBkYXRlT2JqZWN0KCkge1xuICAgICAgICBsZXQgdXNlckRldGFpbHNVcGRhdGVPYmplY3QgPSB7fTtcblxuICAgICAgICAvLyBkeW5hbW9kYiBQSyBhbmQgU0sgbmVlZCB0byBiZSBpbmNsdWRlZFxuICAgICAgICB1c2VyRGV0YWlsc1VwZGF0ZU9iamVjdC51c2VySWQgPSB1c2VyRGV0YWlscy51c2VySWQ7XG4gICAgICAgIHVzZXJEZXRhaWxzVXBkYXRlT2JqZWN0LmNyZWF0ZWRBdCA9IHVzZXJEZXRhaWxzLmNyZWF0ZWRBdDtcblxuICAgICAgICBpZiAoISh1c2VyRGV0YWlscy5maXJzdE5hbWUgPT09IHByZWZlcnJlZE5hbWUpKSB7XG4gICAgICAgICAgICB1c2VyRGV0YWlsc1VwZGF0ZU9iamVjdC5maXJzdE5hbWUgPSBwcmVmZXJyZWROYW1lO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKHVzZXJEZXRhaWxzLmFnZVJhbmdlID09PSBhZ2VSYW5nZSkpIHtcbiAgICAgICAgICAgIHVzZXJEZXRhaWxzVXBkYXRlT2JqZWN0LmFnZVJhbmdlID0gYWdlUmFuZ2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEodXNlckRldGFpbHMuZW1haWwgPT09IGVtYWlsKSkge1xuICAgICAgICAgICAgdXNlckRldGFpbHNVcGRhdGVPYmplY3QuZW1haWwgPSBlbWFpbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISh1c2VyRGV0YWlscy5vcmcgPT09IG9yZykpIHtcbiAgICAgICAgICAgIC8vIG5lZWRzIHRvIGJlIHNldCB0byBmdWxsIG5hbWUgaW4gZGF0YSBtb2RlbFxuICAgICAgICAgICAgdXNlckRldGFpbHNVcGRhdGVPYmplY3Qub3JnYW5pemF0aW9uID0gb3JnO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKHVzZXJEZXRhaWxzLnByb2YgPT09IHByb2YpKSB7XG4gICAgICAgICAgICAvLyBuZWVkcyB0byBiZSBzZXQgdG8gZnVsbCBuYW1lIGluIGRhdGEgbW9kZWxcbiAgICAgICAgICAgIHVzZXJEZXRhaWxzVXBkYXRlT2JqZWN0LnByb2Zlc3Npb24gPSBwcm9mO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1c2VyRGV0YWlsc1VwZGF0ZU9iamVjdDtcbiAgICB9XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBhc3luYyBmdW5jdGlvbiBmZXRjaE9yZ2FuaXphdGlvbnMoKSB7XG4gICAgICAgICAgICBhd2FpdCBheGlvcy5yZXF1ZXN0KG9yZ2FuaXphdGlvbnNDb25maWcpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBzZXRPcmdhbml6YXRpb25zKHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGZldGNoT3JnYW5pemF0aW9ucygpO1xuICAgIH0sIFtdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoUHJvZmVzc2lvbnMoKSB7XG4gICAgICAgICAgICBhd2FpdCBheGlvcy5yZXF1ZXN0KHByb2Zlc3Npb25zQ29uZmlnKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0UHJvZmVzc2lvbnMocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgZmV0Y2hQcm9mZXNzaW9ucygpO1xuICAgIH0sIFtdKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoQWdlcygpIHtcbiAgICAgICAgICAgIGF3YWl0IGF4aW9zLnJlcXVlc3QoYWdlc0NvbmZpZylcbiAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHNldEFnZXMocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgZmV0Y2hBZ2VzKCk7XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxMaXN0SXRlbUJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVPcGVufT5cbiAgICAgICAgICAgICAgICA8TGlzdEl0ZW1JY29uPlxuICAgICAgICAgICAgICAgICAgICA8TWFuYWdlQWNjb3VudHNJY29uIC8+XG4gICAgICAgICAgICAgICAgPC9MaXN0SXRlbUljb24+XG4gICAgICAgICAgICAgICAgPExpc3RJdGVtVGV4dCBwcmltYXJ5PVwiUHJvZmlsZSBTZXR0aW5nc1wiIC8+XG4gICAgICAgICAgICA8L0xpc3RJdGVtQnV0dG9uPlxuICAgICAgICAgICAgPE1vZGFsXG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwidHJhbnNpdGlvbi1tb2RhbC10aXRsZVwiXG4gICAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cInRyYW5zaXRpb24tbW9kYWwtZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICAgIG9wZW49e29wZW59XG4gICAgICAgICAgICAgICAgb25DbG9zZT17aGFuZGxlQ2xvc2V9XG4gICAgICAgICAgICAgICAgY2xvc2VBZnRlclRyYW5zaXRpb25cbiAgICAgICAgICAgICAgICBzbG90cz17eyBiYWNrZHJvcDogQmFja2Ryb3AgfX1cbiAgICAgICAgICAgICAgICBzbG90UHJvcHM9e3tcbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDUwMCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxGYWRlIGluPXtvcGVufT5cbiAgICAgICAgICAgICAgICAgICAgPEJveCBzeD17c3R5bGV9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEljb25CdXR0b24gc3g9e3NldHRpbmdzTW9kYWxDbG9zZUJ1dHRvbn0gY29sb3I9XCJpbmhlcml0XCIgb25DbGljaz17aGFuZGxlQ2FuY2VsQ2xvc2V9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDbG9zZUljb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU9XCJsYXJnZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwiYWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ9XCI1MCVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwidHJhbnNpdGlvbi1tb2RhbC10aXRsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImg2XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJoMlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3g9e3sgbWFyZ2luTGVmdDogJzEwJScgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvZmlsZSBTZXR0aW5nc1xuICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD1cImZvcm1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4PXt7JyYgLk11aVRleHRGaWVsZC1yb290JzogeyBtOiAyLCB3aWR0aDogJzEwMCUnIH0sfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub1ZhbGlkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlPVwib2ZmXCJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWxlcnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4PXt7IHdpZHRoOiAnNzUlJywgcmlnaHQ6ICc1MCUnLCBtYXJnaW5MZWZ0OiAnMTIlJywgbWFyZ2luVG9wOiAnMiUnLCBtYXJnaW5Cb3R0b206ICcyJScgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldmVyaXR5PVwiaW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V0dGluZ3MgYXJlIHVzZWQgZm9yIHlvdXIgc2l0ZSBleHBlcmllbmNlIGFuZCBub3RpZmljYXRpb25zIVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0FsZXJ0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT17XCJzbWFsbFwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3g9e3NldHRpbmdzTW9kYWxJbnB1dEZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJvdXRsaW5lZC1zZWFyY2hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3ByZWZlcnJlZE5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlUHJlZmVycmVkTmFtZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwiUHJlZmVycmVkIE5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3t3aWR0aDogJzc1JScsIG1hcmdpbkxlZnQ6ICcxMiUnfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9e1wic21hbGxcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4PXtzZXR0aW5nc01vZGFsSW5wdXRGaWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwib3V0bGluZWQtc2VhcmNoXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtlbWFpbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVFbWFpbENoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwiQ29tcGFueS9QZXJzb25hbCBlbWFpbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e3dpZHRoOiAnNzUlJywgbWFyZ2luTGVmdDogJzEyJSd9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT17XCJzbWFsbFwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3g9e3NldHRpbmdzTW9kYWxJbnB1dEZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e29yZ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVPcmdDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cIm91dGxpbmVkLXNlbGVjdC1jdXJyZW5jeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwiT3JnYW5pemF0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6ICc3NSUnLCBtYXJnaW5MZWZ0OiAnMTIlJ319XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXJUZXh0PXtcIlBsZWFzZSBTZWxlY3QgeW91ciBvcmdhbml6YXRpb25cIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge29yZ2FuaXphdGlvbnMubWFwKG9wdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1lbnVJdGVtIGtleT17b3B0aW9ufSB2YWx1ZT17b3B0aW9ufT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge29wdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L01lbnVJdGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVGV4dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT17XCJzbWFsbFwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3g9e3NldHRpbmdzTW9kYWxJbnB1dEZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJvdXRsaW5lZC1zZWxlY3QtY3VycmVuY3lcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3Byb2Z9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlUHJvZkNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJQcm9mZXNzaW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6ICc3NSUnLCBtYXJnaW5MZWZ0OiAnMTIlJ319XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwZXJUZXh0PVwiUGxlYXNlIHNlbGVjdCB5b3VyIHByb2Zlc3Npb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cHJvZmVzc2lvbnMubWFwKG9wdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE1lbnVJdGVtIGtleT17b3B0aW9ufSB2YWx1ZT17b3B0aW9ufT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge29wdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L01lbnVJdGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVGV4dEZpZWxkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT17XCJzbWFsbFwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3g9e3NldHRpbmdzTW9kYWxJbnB1dEZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJvdXRsaW5lZC1zZWxlY3QtY3VycmVuY3lcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17YWdlUmFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQWdlUmFuZ2VDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIkFnZSBHcm91cFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e3dpZHRoOiAnNzUlJywgbWFyZ2luTGVmdDogJzEyJSd9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyVGV4dD1cIlBsZWFzZSBzZWxlY3QgeW91ciBhZ2UgZ3JvdXBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YWdlcy5tYXAob3B0aW9uID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TWVudUl0ZW0ga2V5PXtvcHRpb259IHZhbHVlPXtvcHRpb259PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7b3B0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTWVudUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UZXh0RmllbGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdWJtaXRPbk5vVXBkYXRlcyAmJiA8QWxlcnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4PXt7IHdpZHRoOiAnNzUlJywgcmlnaHQ6ICc1MCUnLCBtYXJnaW5MZWZ0OiAnMTIlJywgbWFyZ2luVG9wOiAnMSUnLCBtYXJnaW5Cb3R0b206ICcxJScgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldmVyaXR5PVwid2FybmluZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlcmUgd2VyZSBubyB1cGRhdGVzIG9uIHVzZXIgZGV0YWlscyFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9BbGVydD4gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTdGFjayBkaXJlY3Rpb249XCJyb3dcIiBzcGFjaW5nPXszMH0gc3g9e3sgbWFyZ2luVG9wOiAnMyUnLCBtYXJnaW5MZWZ0OiAnMTUlJ319PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PVwib3V0bGluZWRcIiBvbkNsaWNrPXtoYW5kbGVDYW5jZWxDbG9zZX0gc3RhcnRJY29uPXs8Q2FuY2VsSWNvbiAvPn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2FuY2VsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17aGFuZGxlVXBkYXRlU3VibWl0fSB2YXJpYW50PVwiY29udGFpbmVkXCIgZW5kSWNvbj17PFNlbmRJY29uIC8+fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1N0YWNrPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDb3B5cmlnaHQgc3g9e3sgcHQ6IDQsIG1hcmdpblRvcDogJzQlJyB9fSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgICAgIDwvRmFkZT5cbiAgICAgICAgICAgIDwvTW9kYWw+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTGlzdEl0ZW1CdXR0b24gZnJvbSAnQG11aS9tYXRlcmlhbC9MaXN0SXRlbUJ1dHRvbic7XG5pbXBvcnQgTGlzdEl0ZW1JY29uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1JY29uJztcbmltcG9ydCBMaXN0SXRlbVRleHQgZnJvbSAnQG11aS9tYXRlcmlhbC9MaXN0SXRlbVRleHQnO1xuaW1wb3J0IEluc2VydERyaXZlRmlsZUljb24gZnJvbSAnQG11aS9pY29ucy1tYXRlcmlhbC9JbnNlcnREcml2ZUZpbGUnO1xuaW1wb3J0IExpc3RTdWJoZWFkZXIgZnJvbSAnQG11aS9tYXRlcmlhbC9MaXN0U3ViaGVhZGVyJztcbmltcG9ydCBTZXR0aW5nc01vZGFsIGZyb20gXCIuL1NldHRpbmdzTW9kYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGVydGlhcnlMaXN0SXRlbXMocHJvcHMpIHtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgIDxMaXN0U3ViaGVhZGVyIGNvbXBvbmVudD1cImRpdlwiIGluc2V0PlxuICAgICAgICAgICAgICAgIFNldHRpbmdzXG4gICAgICAgICAgICA8L0xpc3RTdWJoZWFkZXI+XG4gICAgICAgICAgICA8TGlzdEl0ZW1CdXR0b24+XG4gICAgICAgICAgICAgICAgPExpc3RJdGVtSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgPEluc2VydERyaXZlRmlsZUljb24gLz5cbiAgICAgICAgICAgICAgICA8L0xpc3RJdGVtSWNvbj5cbiAgICAgICAgICAgICAgICA8TGlzdEl0ZW1UZXh0IHByaW1hcnk9XCJEb2N1bWVudGF0aW9uXCIgLz5cbiAgICAgICAgICAgIDwvTGlzdEl0ZW1CdXR0b24+XG4gICAgICAgICAgICA8U2V0dGluZ3NNb2RhbCB1c2VyRGV0YWlscz17cHJvcHMudXNlckRldGFpbHN9Lz5cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApXG59XG4iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhcmRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNhcmQnLCBzbG90KTtcbn1cbmNvbnN0IGNhcmRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2FyZCcsIFsncm9vdCddKTtcbmV4cG9ydCBkZWZhdWx0IGNhcmRDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcInJhaXNlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmltcG9ydCB7IGdldENhcmRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2NhcmRDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRDYXJkVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBDYXJkUm9vdCA9IHN0eWxlZChQYXBlciwge1xuICBuYW1lOiAnTXVpQ2FyZCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICB9O1xufSk7XG5jb25zdCBDYXJkID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ2FyZCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIHJhaXNlZCA9IGZhbHNlXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByYWlzZWRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENhcmRSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBlbGV2YXRpb246IHJhaXNlZCA/IDggOiB1bmRlZmluZWQsXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2FyZCB3aWxsIHVzZSByYWlzZWQgc3R5bGluZy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJhaXNlZDogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLmJvb2wsIHByb3BzID0+IHtcbiAgICBpZiAocHJvcHMucmFpc2VkICYmIHByb3BzLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01VSTogQ29tYmluaW5nIGByYWlzZWQ9e3RydWV9YCB3aXRoIGB2YXJpYW50PVwib3V0bGluZWRcImAgaGFzIG5vIGVmZmVjdC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQ2FyZDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhcmRNZWRpYVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQ2FyZE1lZGlhJywgc2xvdCk7XG59XG5jb25zdCBjYXJkTWVkaWFDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2FyZE1lZGlhJywgWydyb290JywgJ21lZGlhJywgJ2ltZyddKTtcbmV4cG9ydCBkZWZhdWx0IGNhcmRNZWRpYUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJpbWFnZVwiLCBcInNyY1wiLCBcInN0eWxlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRDYXJkTWVkaWFVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2NhcmRNZWRpYUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGlzTWVkaWFDb21wb25lbnQsXG4gICAgaXNJbWFnZUNvbXBvbmVudFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgaXNNZWRpYUNvbXBvbmVudCAmJiAnbWVkaWEnLCBpc0ltYWdlQ29tcG9uZW50ICYmICdpbWcnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENhcmRNZWRpYVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQ2FyZE1lZGlhUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpQ2FyZE1lZGlhJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzTWVkaWFDb21wb25lbnQsXG4gICAgICBpc0ltYWdlQ29tcG9uZW50XG4gICAgfSA9IG93bmVyU3RhdGU7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgaXNNZWRpYUNvbXBvbmVudCAmJiBzdHlsZXMubWVkaWEsIGlzSW1hZ2VDb21wb25lbnQgJiYgc3R5bGVzLmltZ107XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgYmFja2dyb3VuZFNpemU6ICdjb3ZlcicsXG4gIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICBiYWNrZ3JvdW5kUG9zaXRpb246ICdjZW50ZXInXG59LCBvd25lclN0YXRlLmlzTWVkaWFDb21wb25lbnQgJiYge1xuICB3aWR0aDogJzEwMCUnXG59LCBvd25lclN0YXRlLmlzSW1hZ2VDb21wb25lbnQgJiYge1xuICAvLyDimqDvuI8gb2JqZWN0LWZpdCBpcyBub3Qgc3VwcG9ydGVkIGJ5IElFMTEuXG4gIG9iamVjdEZpdDogJ2NvdmVyJ1xufSkpO1xuY29uc3QgTUVESUFfQ09NUE9ORU5UUyA9IFsndmlkZW8nLCAnYXVkaW8nLCAncGljdHVyZScsICdpZnJhbWUnLCAnaW1nJ107XG5jb25zdCBJTUFHRV9DT01QT05FTlRTID0gWydwaWN0dXJlJywgJ2ltZyddO1xuY29uc3QgQ2FyZE1lZGlhID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZE1lZGlhKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDYXJkTWVkaWEnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgaW1hZ2UsXG4gICAgICBzcmMsXG4gICAgICBzdHlsZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBpc01lZGlhQ29tcG9uZW50ID0gTUVESUFfQ09NUE9ORU5UUy5pbmRleE9mKGNvbXBvbmVudCkgIT09IC0xO1xuICBjb25zdCBjb21wb3NlZFN0eWxlID0gIWlzTWVkaWFDb21wb25lbnQgJiYgaW1hZ2UgPyBfZXh0ZW5kcyh7XG4gICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKFwiJHtpbWFnZX1cIilgXG4gIH0sIHN0eWxlKSA6IHN0eWxlO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGlzTWVkaWFDb21wb25lbnQsXG4gICAgaXNJbWFnZUNvbXBvbmVudDogSU1BR0VfQ09NUE9ORU5UUy5pbmRleE9mKGNvbXBvbmVudCkgIT09IC0xXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDYXJkTWVkaWFSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBhczogY29tcG9uZW50LFxuICAgIHJvbGU6ICFpc01lZGlhQ29tcG9uZW50ICYmIGltYWdlID8gJ2ltZycgOiB1bmRlZmluZWQsXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IGNvbXBvc2VkU3R5bGUsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBzcmM6IGlzTWVkaWFDb21wb25lbnQgPyBpbWFnZSB8fCBzcmMgOiB1bmRlZmluZWRcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkTWVkaWEucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMubm9kZSwgcHJvcHMgPT4ge1xuICAgIGlmICghcHJvcHMuY2hpbGRyZW4gJiYgIXByb3BzLmltYWdlICYmICFwcm9wcy5zcmMgJiYgIXByb3BzLmNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTVVJOiBFaXRoZXIgYGNoaWxkcmVuYCwgYGltYWdlYCwgYHNyY2Agb3IgYGNvbXBvbmVudGAgcHJvcCBtdXN0IGJlIHNwZWNpZmllZC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSW1hZ2UgdG8gYmUgZGlzcGxheWVkIGFzIGEgYmFja2dyb3VuZCBpbWFnZS5cbiAgICogRWl0aGVyIGBpbWFnZWAgb3IgYHNyY2AgcHJvcCBtdXN0IGJlIHNwZWNpZmllZC5cbiAgICogTm90ZSB0aGF0IGNhbGxlciBtdXN0IHNwZWNpZnkgaGVpZ2h0IG90aGVyd2lzZSB0aGUgaW1hZ2Ugd2lsbCBub3QgYmUgdmlzaWJsZS5cbiAgICovXG4gIGltYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQW4gYWxpYXMgZm9yIGBpbWFnZWAgcHJvcGVydHkuXG4gICAqIEF2YWlsYWJsZSBvbmx5IHdpdGggbWVkaWEgY29tcG9uZW50cy5cbiAgICogTWVkaWEgY29tcG9uZW50czogYHZpZGVvYCwgYGF1ZGlvYCwgYHBpY3R1cmVgLCBgaWZyYW1lYCwgYGltZ2AuXG4gICAqL1xuICBzcmM6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENhcmRNZWRpYTsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhcmRBY3Rpb25BcmVhVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlDYXJkQWN0aW9uQXJlYScsIHNsb3QpO1xufVxuY29uc3QgY2FyZEFjdGlvbkFyZWFDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2FyZEFjdGlvbkFyZWEnLCBbJ3Jvb3QnLCAnZm9jdXNWaXNpYmxlJywgJ2ZvY3VzSGlnaGxpZ2h0J10pO1xuZXhwb3J0IGRlZmF1bHQgY2FyZEFjdGlvbkFyZWFDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCBjYXJkQWN0aW9uQXJlYUNsYXNzZXMsIHsgZ2V0Q2FyZEFjdGlvbkFyZWFVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2NhcmRBY3Rpb25BcmVhQ2xhc3Nlcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgZm9jdXNIaWdobGlnaHQ6IFsnZm9jdXNIaWdobGlnaHQnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENhcmRBY3Rpb25BcmVhVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBDYXJkQWN0aW9uQXJlYVJvb3QgPSBzdHlsZWQoQnV0dG9uQmFzZSwge1xuICBuYW1lOiAnTXVpQ2FyZEFjdGlvbkFyZWEnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBkaXNwbGF5OiAnYmxvY2snLFxuICB0ZXh0QWxpZ246ICdpbmhlcml0JyxcbiAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCcsXG4gIC8vIGZvciBTYWZhcmkgdG8gd29yayBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL2lzc3Vlcy8zNjI4NS5cbiAgd2lkdGg6ICcxMDAlJyxcbiAgW2AmOmhvdmVyIC4ke2NhcmRBY3Rpb25BcmVhQ2xhc3Nlcy5mb2N1c0hpZ2hsaWdodH1gXToge1xuICAgIG9wYWNpdHk6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHksXG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgb3BhY2l0eTogMFxuICAgIH1cbiAgfSxcbiAgW2AmLiR7Y2FyZEFjdGlvbkFyZWFDbGFzc2VzLmZvY3VzVmlzaWJsZX0gLiR7Y2FyZEFjdGlvbkFyZWFDbGFzc2VzLmZvY3VzSGlnaGxpZ2h0fWBdOiB7XG4gICAgb3BhY2l0eTogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmZvY3VzT3BhY2l0eVxuICB9XG59KSk7XG5jb25zdCBDYXJkQWN0aW9uQXJlYUZvY3VzSGlnaGxpZ2h0ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQ2FyZEFjdGlvbkFyZWEnLFxuICBzbG90OiAnRm9jdXNIaWdobGlnaHQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5mb2N1c0hpZ2hsaWdodFxufSkoKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgdG9wOiAwLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICBsZWZ0OiAwLFxuICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgb3BhY2l0eTogMCxcbiAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudGNvbG9yJyxcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydFxuICB9KVxufSkpO1xuY29uc3QgQ2FyZEFjdGlvbkFyZWEgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDYXJkQWN0aW9uQXJlYShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ2FyZEFjdGlvbkFyZWEnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gcHJvcHM7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhDYXJkQWN0aW9uQXJlYVJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogY2xzeChmb2N1c1Zpc2libGVDbGFzc05hbWUsIGNsYXNzZXMuZm9jdXNWaXNpYmxlKSxcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFtjaGlsZHJlbiwgLyojX19QVVJFX18qL19qc3goQ2FyZEFjdGlvbkFyZWFGb2N1c0hpZ2hsaWdodCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmZvY3VzSGlnaGxpZ2h0LFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRBY3Rpb25BcmVhLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQ2FyZEFjdGlvbkFyZWE7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtdWkvbWF0ZXJpYWwvVHlwb2dyYXBoeSc7XG5cbmZ1bmN0aW9uIFRpdGxlKHByb3BzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPFR5cG9ncmFwaHkgY29tcG9uZW50PVwiaDJcIiB2YXJpYW50PVwiaDZcIiBjb2xvcj1cInByaW1hcnlcIiBndXR0ZXJCb3R0b20+XG4gICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICApO1xufVxuXG5UaXRsZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgVGl0bGU7XG4iLCJpbXBvcnQgaXNTdHJpbmcgZnJvbSAnbG9kYXNoL2lzU3RyaW5nJztcbmltcG9ydCBpc05hbiBmcm9tICdsb2Rhc2gvaXNOYU4nO1xuaW1wb3J0IGdldCBmcm9tICdsb2Rhc2gvZ2V0JztcbmltcG9ydCBsb2Rhc2hJc051bWJlciBmcm9tICdsb2Rhc2gvaXNOdW1iZXInO1xuZXhwb3J0IHZhciBtYXRoU2lnbiA9IGZ1bmN0aW9uIG1hdGhTaWduKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGlmICh2YWx1ZSA+IDApIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gLTE7XG59O1xuZXhwb3J0IHZhciBpc1BlcmNlbnQgPSBmdW5jdGlvbiBpc1BlcmNlbnQodmFsdWUpIHtcbiAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5pbmRleE9mKCclJykgPT09IHZhbHVlLmxlbmd0aCAtIDE7XG59O1xuZXhwb3J0IHZhciBpc051bWJlciA9IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiBsb2Rhc2hJc051bWJlcih2YWx1ZSkgJiYgIWlzTmFuKHZhbHVlKTtcbn07XG5leHBvcnQgdmFyIGlzTnVtT3JTdHIgPSBmdW5jdGlvbiBpc051bU9yU3RyKHZhbHVlKSB7XG4gIHJldHVybiBpc051bWJlcih2YWx1ZSkgfHwgaXNTdHJpbmcodmFsdWUpO1xufTtcbnZhciBpZENvdW50ZXIgPSAwO1xuZXhwb3J0IHZhciB1bmlxdWVJZCA9IGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KHByZWZpeCB8fCAnJykuY29uY2F0KGlkKTtcbn07XG5cbi8qKlxuICogR2V0IHBlcmNlbnQgdmFsdWUgb2YgYSB0b3RhbCB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBwZXJjZW50IEEgcGVyY2VudFxuICogQHBhcmFtIHtudW1iZXJ9IHRvdGFsVmFsdWUgICAgIFRvdGFsIHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gZGVmYXVsdFZhbHVlICAgVGhlIHZhbHVlIHJldHVybmVkIHdoZW4gcGVyY2VudCBpcyB1bmRlZmluZWQgb3IgaW52YWxpZFxuICogQHBhcmFtIHtib29sZWFufSB2YWxpZGF0ZSAgICAgIElmIHNldCB0byBiZSB0cnVlLCB0aGUgcmVzdWx0IHdpbGwgYmUgdmFsaWRhdGVkXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHZhbHVlXG4gKi9cbmV4cG9ydCB2YXIgZ2V0UGVyY2VudFZhbHVlID0gZnVuY3Rpb24gZ2V0UGVyY2VudFZhbHVlKHBlcmNlbnQsIHRvdGFsVmFsdWUpIHtcbiAgdmFyIGRlZmF1bHRWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDtcbiAgdmFyIHZhbGlkYXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTtcbiAgaWYgKCFpc051bWJlcihwZXJjZW50KSAmJiAhaXNTdHJpbmcocGVyY2VudCkpIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG4gIHZhciB2YWx1ZTtcbiAgaWYgKGlzUGVyY2VudChwZXJjZW50KSkge1xuICAgIHZhciBpbmRleCA9IHBlcmNlbnQuaW5kZXhPZignJScpO1xuICAgIHZhbHVlID0gdG90YWxWYWx1ZSAqIHBhcnNlRmxvYXQocGVyY2VudC5zbGljZSgwLCBpbmRleCkpIC8gMTAwO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gK3BlcmNlbnQ7XG4gIH1cbiAgaWYgKGlzTmFuKHZhbHVlKSkge1xuICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICB9XG4gIGlmICh2YWxpZGF0ZSAmJiB2YWx1ZSA+IHRvdGFsVmFsdWUpIHtcbiAgICB2YWx1ZSA9IHRvdGFsVmFsdWU7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcbmV4cG9ydCB2YXIgZ2V0QW55RWxlbWVudE9mT2JqZWN0ID0gZnVuY3Rpb24gZ2V0QW55RWxlbWVudE9mT2JqZWN0KG9iaikge1xuICBpZiAoIW9iaikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgaWYgKGtleXMgJiYga2V5cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gb2JqW2tleXNbMF1dO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmV4cG9ydCB2YXIgaGFzRHVwbGljYXRlID0gZnVuY3Rpb24gaGFzRHVwbGljYXRlKGFyeSkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYXJ5KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGVuID0gYXJ5Lmxlbmd0aDtcbiAgdmFyIGNhY2hlID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIWNhY2hlW2FyeVtpXV0pIHtcbiAgICAgIGNhY2hlW2FyeVtpXV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyogQHRvZG8gY29uc2lkZXIgdG8gcmVuYW1lIHRoaXMgZnVuY3Rpb24gaW50byBgZ2V0SW50ZXJwb2xhdG9yYCAqL1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZU51bWJlciA9IGZ1bmN0aW9uIGludGVycG9sYXRlTnVtYmVyKG51bWJlckEsIG51bWJlckIpIHtcbiAgaWYgKGlzTnVtYmVyKG51bWJlckEpICYmIGlzTnVtYmVyKG51bWJlckIpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gbnVtYmVyQSArIHQgKiAobnVtYmVyQiAtIG51bWJlckEpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbnVtYmVyQjtcbiAgfTtcbn07XG5leHBvcnQgZnVuY3Rpb24gZmluZEVudHJ5SW5BcnJheShhcnksIHNwZWNpZmllZEtleSwgc3BlY2lmaWVkVmFsdWUpIHtcbiAgaWYgKCFhcnkgfHwgIWFyeS5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gYXJ5LmZpbmQoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIGVudHJ5ICYmICh0eXBlb2Ygc3BlY2lmaWVkS2V5ID09PSAnZnVuY3Rpb24nID8gc3BlY2lmaWVkS2V5KGVudHJ5KSA6IGdldChlbnRyeSwgc3BlY2lmaWVkS2V5KSkgPT09IHNwZWNpZmllZFZhbHVlO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgbGVhc3Qgc3F1YXJlIGxpbmVhciByZWdyZXNzaW9uXG4gKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBhcnJheSBvZiBwb2ludHNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkb21haW4gb2YgeCwgYW5kIHRoZSBwYXJhbWV0ZXIgb2YgbGluZWFyIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCB2YXIgZ2V0TGluZWFyUmVncmVzc2lvbiA9IGZ1bmN0aW9uIGdldExpbmVhclJlZ3Jlc3Npb24oZGF0YSkge1xuICBpZiAoIWRhdGEgfHwgIWRhdGEubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoO1xuICB2YXIgeHN1bSA9IDA7XG4gIHZhciB5c3VtID0gMDtcbiAgdmFyIHh5c3VtID0gMDtcbiAgdmFyIHh4c3VtID0gMDtcbiAgdmFyIHhtaW4gPSBJbmZpbml0eTtcbiAgdmFyIHhtYXggPSAtSW5maW5pdHk7XG4gIHZhciB4Y3VycmVudCA9IDA7XG4gIHZhciB5Y3VycmVudCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICB4Y3VycmVudCA9IGRhdGFbaV0uY3ggfHwgMDtcbiAgICB5Y3VycmVudCA9IGRhdGFbaV0uY3kgfHwgMDtcbiAgICB4c3VtICs9IHhjdXJyZW50O1xuICAgIHlzdW0gKz0geWN1cnJlbnQ7XG4gICAgeHlzdW0gKz0geGN1cnJlbnQgKiB5Y3VycmVudDtcbiAgICB4eHN1bSArPSB4Y3VycmVudCAqIHhjdXJyZW50O1xuICAgIHhtaW4gPSBNYXRoLm1pbih4bWluLCB4Y3VycmVudCk7XG4gICAgeG1heCA9IE1hdGgubWF4KHhtYXgsIHhjdXJyZW50KTtcbiAgfVxuICB2YXIgYSA9IGxlbiAqIHh4c3VtICE9PSB4c3VtICogeHN1bSA/IChsZW4gKiB4eXN1bSAtIHhzdW0gKiB5c3VtKSAvIChsZW4gKiB4eHN1bSAtIHhzdW0gKiB4c3VtKSA6IDA7XG4gIHJldHVybiB7XG4gICAgeG1pbjogeG1pbixcbiAgICB4bWF4OiB4bWF4LFxuICAgIGE6IGEsXG4gICAgYjogKHlzdW0gLSBhICogeHN1bSkgLyBsZW5cbiAgfTtcbn07IiwiLyogZXNsaW50IG5vLWNvbnNvbGU6IDAgKi9cbnZhciBpc0RldiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5leHBvcnQgdmFyIHdhcm4gPSBmdW5jdGlvbiB3YXJuKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuICBpZiAoaXNEZXYgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUud2Fybikge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS53YXJuKCdMb2dVdGlscyByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgICBjb25zb2xlLndhcm4oZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTsiLCJ2YXIgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJjaGlsZHJlblwiXTtcbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuaW1wb3J0IGdldCBmcm9tICdsb2Rhc2gvZ2V0JztcbmltcG9ydCBpc05pbCBmcm9tICdsb2Rhc2gvaXNOaWwnO1xuaW1wb3J0IGlzU3RyaW5nIGZyb20gJ2xvZGFzaC9pc1N0cmluZyc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICdsb2Rhc2gvaXNGdW5jdGlvbic7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnbG9kYXNoL2lzT2JqZWN0JztcbmltcG9ydCB7IENoaWxkcmVuLCBpc1ZhbGlkRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgeyBpc051bWJlciB9IGZyb20gJy4vRGF0YVV0aWxzJztcbmltcG9ydCB7IHNoYWxsb3dFcXVhbCB9IGZyb20gJy4vU2hhbGxvd0VxdWFsJztcbmltcG9ydCB7IEZpbHRlcmVkRWxlbWVudEtleU1hcCwgU1ZHRWxlbWVudFByb3BLZXlzLCBFdmVudEtleXMgfSBmcm9tICcuL3R5cGVzJztcbnZhciBSRUFDVF9CUk9XU0VSX0VWRU5UX01BUCA9IHtcbiAgY2xpY2s6ICdvbkNsaWNrJyxcbiAgbW91c2Vkb3duOiAnb25Nb3VzZURvd24nLFxuICBtb3VzZXVwOiAnb25Nb3VzZVVwJyxcbiAgbW91c2VvdmVyOiAnb25Nb3VzZU92ZXInLFxuICBtb3VzZW1vdmU6ICdvbk1vdXNlTW92ZScsXG4gIG1vdXNlb3V0OiAnb25Nb3VzZU91dCcsXG4gIG1vdXNlZW50ZXI6ICdvbk1vdXNlRW50ZXInLFxuICBtb3VzZWxlYXZlOiAnb25Nb3VzZUxlYXZlJyxcbiAgdG91Y2hjYW5jZWw6ICdvblRvdWNoQ2FuY2VsJyxcbiAgdG91Y2hlbmQ6ICdvblRvdWNoRW5kJyxcbiAgdG91Y2htb3ZlOiAnb25Ub3VjaE1vdmUnLFxuICB0b3VjaHN0YXJ0OiAnb25Ub3VjaFN0YXJ0J1xufTtcbmV4cG9ydCB2YXIgU0NBTEVfVFlQRVMgPSBbJ2F1dG8nLCAnbGluZWFyJywgJ3BvdycsICdzcXJ0JywgJ2xvZycsICdpZGVudGl0eScsICd0aW1lJywgJ2JhbmQnLCAncG9pbnQnLCAnb3JkaW5hbCcsICdxdWFudGlsZScsICdxdWFudGl6ZScsICd1dGMnLCAnc2VxdWVudGlhbCcsICd0aHJlc2hvbGQnXTtcbmV4cG9ydCB2YXIgTEVHRU5EX1RZUEVTID0gWydwbGFpbmxpbmUnLCAnbGluZScsICdzcXVhcmUnLCAncmVjdCcsICdjaXJjbGUnLCAnY3Jvc3MnLCAnZGlhbW9uZCcsICdzdGFyJywgJ3RyaWFuZ2xlJywgJ3d5ZScsICdub25lJ107XG5leHBvcnQgdmFyIFRPT0xUSVBfVFlQRVMgPSBbJ25vbmUnXTtcblxuLyoqXG4gKiBHZXQgdGhlIGRpc3BsYXkgbmFtZSBvZiBhIGNvbXBvbmVudFxuICogQHBhcmFtICB7T2JqZWN0fSBDb21wIFNwZWNpZmllZCBDb21wb25lbnRcbiAqIEByZXR1cm4ge1N0cmluZ30gICAgICBEaXNwbGF5IG5hbWUgb2YgQ29tcG9uZW50XG4gKi9cbmV4cG9ydCB2YXIgZ2V0RGlzcGxheU5hbWUgPSBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShDb21wKSB7XG4gIGlmICh0eXBlb2YgQ29tcCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gQ29tcDtcbiAgfVxuICBpZiAoIUNvbXApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgcmV0dXJuIENvbXAuZGlzcGxheU5hbWUgfHwgQ29tcC5uYW1lIHx8ICdDb21wb25lbnQnO1xufTtcblxuLy8gYHRvQXJyYXlgIGdldHMgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyB0aGUgcmVuZGVyXG4vLyBzbyB3ZSBjYW4gbWVtb2l6ZSBsYXN0IGludm9jYXRpb24gKHNpbmNlIHJlZmVyZW5jZSB0byBgY2hpbGRyZW5gIGlzIHRoZSBzYW1lKVxudmFyIGxhc3RDaGlsZHJlbiA9IG51bGw7XG52YXIgbGFzdFJlc3VsdCA9IG51bGw7XG5leHBvcnQgdmFyIHRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5KGNoaWxkcmVuKSB7XG4gIGlmIChjaGlsZHJlbiA9PT0gbGFzdENoaWxkcmVuICYmIEFycmF5LmlzQXJyYXkobGFzdFJlc3VsdCkpIHtcbiAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIENoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChpc05pbChjaGlsZCkpIHJldHVybjtcbiAgICBpZiAoaXNGcmFnbWVudChjaGlsZCkpIHtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQodG9BcnJheShjaGlsZC5wcm9wcy5jaGlsZHJlbikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucHVzaChjaGlsZCk7XG4gICAgfVxuICB9KTtcbiAgbGFzdFJlc3VsdCA9IHJlc3VsdDtcbiAgbGFzdENoaWxkcmVuID0gY2hpbGRyZW47XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKlxuICogRmluZCBhbmQgcmV0dXJuIGFsbCBtYXRjaGVkIGNoaWxkcmVuIGJ5IHR5cGUuXG4gKiBgdHlwZWAgbXVzdCBiZSBhIFJlYWN0LkNvbXBvbmVudFR5cGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRBbGxCeVR5cGUoY2hpbGRyZW4sIHR5cGUpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgdHlwZXMgPSBbXTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICB0eXBlcyA9IHR5cGUubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gZ2V0RGlzcGxheU5hbWUodCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdHlwZXMgPSBbZ2V0RGlzcGxheU5hbWUodHlwZSldO1xuICB9XG4gIHRvQXJyYXkoY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgdmFyIGNoaWxkVHlwZSA9IGdldChjaGlsZCwgJ3R5cGUuZGlzcGxheU5hbWUnKSB8fCBnZXQoY2hpbGQsICd0eXBlLm5hbWUnKTtcbiAgICBpZiAodHlwZXMuaW5kZXhPZihjaGlsZFR5cGUpICE9PSAtMSkge1xuICAgICAgcmVzdWx0LnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qXG4gKiBSZXR1cm4gdGhlIGZpcnN0IG1hdGNoZWQgY2hpbGQgYnkgdHlwZSwgcmV0dXJuIG51bGwgb3RoZXJ3aXNlLlxuICogYHR5cGVgIG11c3QgYmUgYSBSZWFjdC5Db21wb25lbnRUeXBlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ2hpbGRCeVR5cGUoY2hpbGRyZW4sIHR5cGUpIHtcbiAgdmFyIHJlc3VsdCA9IGZpbmRBbGxCeVR5cGUoY2hpbGRyZW4sIHR5cGUpO1xuICByZXR1cm4gcmVzdWx0ICYmIHJlc3VsdFswXTtcbn1cblxuLypcbiAqIENyZWF0ZSBhIG5ldyBhcnJheSBvZiBjaGlsZHJlbiBleGNsdWRpbmcgdGhlIG9uZXMgbWF0Y2hlZCB0aGUgdHlwZVxuICovXG5leHBvcnQgdmFyIHdpdGhvdXRUeXBlID0gZnVuY3Rpb24gd2l0aG91dFR5cGUoY2hpbGRyZW4sIHR5cGUpIHtcbiAgdmFyIG5ld0NoaWxkcmVuID0gW107XG4gIHZhciB0eXBlcztcbiAgaWYgKEFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICB0eXBlcyA9IHR5cGUubWFwKGZ1bmN0aW9uICh0KSB7XG4gICAgICByZXR1cm4gZ2V0RGlzcGxheU5hbWUodCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdHlwZXMgPSBbZ2V0RGlzcGxheU5hbWUodHlwZSldO1xuICB9XG4gIHRvQXJyYXkoY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0KGNoaWxkLCAndHlwZS5kaXNwbGF5TmFtZScpO1xuICAgIGlmIChkaXNwbGF5TmFtZSAmJiB0eXBlcy5pbmRleE9mKGRpc3BsYXlOYW1lKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbmV3Q2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gbmV3Q2hpbGRyZW47XG59O1xuXG4vKipcbiAqIHZhbGlkYXRlIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IHByb3BzIG9mIGEgY2hhcnQgZWxlbWVudFxuICogQHBhcmFtICB7T2JqZWN0fSBlbCBBIGNoYXJ0IGVsZW1lbnRcbiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgdHJ1ZSBJZiB0aGUgcHJvcHMgd2lkdGggYW5kIGhlaWdodCBhcmUgbnVtYmVyLCBhbmQgZ3JlYXRlciB0aGFuIDBcbiAqL1xuZXhwb3J0IHZhciB2YWxpZGF0ZVdpZHRoSGVpZ2h0ID0gZnVuY3Rpb24gdmFsaWRhdGVXaWR0aEhlaWdodChlbCkge1xuICBpZiAoIWVsIHx8ICFlbC5wcm9wcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgX2VsJHByb3BzID0gZWwucHJvcHMsXG4gICAgd2lkdGggPSBfZWwkcHJvcHMud2lkdGgsXG4gICAgaGVpZ2h0ID0gX2VsJHByb3BzLmhlaWdodDtcbiAgaWYgKCFpc051bWJlcih3aWR0aCkgfHwgd2lkdGggPD0gMCB8fCAhaXNOdW1iZXIoaGVpZ2h0KSB8fCBoZWlnaHQgPD0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgU1ZHX1RBR1MgPSBbJ2EnLCAnYWx0R2x5cGgnLCAnYWx0R2x5cGhEZWYnLCAnYWx0R2x5cGhJdGVtJywgJ2FuaW1hdGUnLCAnYW5pbWF0ZUNvbG9yJywgJ2FuaW1hdGVNb3Rpb24nLCAnYW5pbWF0ZVRyYW5zZm9ybScsICdjaXJjbGUnLCAnY2xpcFBhdGgnLCAnY29sb3ItcHJvZmlsZScsICdjdXJzb3InLCAnZGVmcycsICdkZXNjJywgJ2VsbGlwc2UnLCAnZmVCbGVuZCcsICdmZUNvbG9ybWF0cml4JywgJ2ZlQ29tcG9uZW50VHJhbnNmZXInLCAnZmVDb21wb3NpdGUnLCAnZmVDb252b2x2ZU1hdHJpeCcsICdmZURpZmZ1c2VMaWdodGluZycsICdmZURpc3BsYWNlbWVudE1hcCcsICdmZURpc3RhbnRMaWdodCcsICdmZUZsb29kJywgJ2ZlRnVuY0EnLCAnZmVGdW5jQicsICdmZUZ1bmNHJywgJ2ZlRnVuY1InLCAnZmVHYXVzc2lhbkJsdXInLCAnZmVJbWFnZScsICdmZU1lcmdlJywgJ2ZlTWVyZ2VOb2RlJywgJ2ZlTW9ycGhvbG9neScsICdmZU9mZnNldCcsICdmZVBvaW50TGlnaHQnLCAnZmVTcGVjdWxhckxpZ2h0aW5nJywgJ2ZlU3BvdExpZ2h0JywgJ2ZlVGlsZScsICdmZVR1cmJ1bGVuY2UnLCAnZmlsdGVyJywgJ2ZvbnQnLCAnZm9udC1mYWNlJywgJ2ZvbnQtZmFjZS1mb3JtYXQnLCAnZm9udC1mYWNlLW5hbWUnLCAnZm9udC1mYWNlLXVybCcsICdmb3JlaWduT2JqZWN0JywgJ2cnLCAnZ2x5cGgnLCAnZ2x5cGhSZWYnLCAnaGtlcm4nLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lR3JhZGllbnQnLCAnbWFya2VyJywgJ21hc2snLCAnbWV0YWRhdGEnLCAnbWlzc2luZy1nbHlwaCcsICdtcGF0aCcsICdwYXRoJywgJ3BhdHRlcm4nLCAncG9seWdvbicsICdwb2x5bGluZScsICdyYWRpYWxHcmFkaWVudCcsICdyZWN0JywgJ3NjcmlwdCcsICdzZXQnLCAnc3RvcCcsICdzdHlsZScsICdzdmcnLCAnc3dpdGNoJywgJ3N5bWJvbCcsICd0ZXh0JywgJ3RleHRQYXRoJywgJ3RpdGxlJywgJ3RyZWYnLCAndHNwYW4nLCAndXNlJywgJ3ZpZXcnLCAndmtlcm4nXTtcbnZhciBpc1N2Z0VsZW1lbnQgPSBmdW5jdGlvbiBpc1N2Z0VsZW1lbnQoY2hpbGQpIHtcbiAgcmV0dXJuIGNoaWxkICYmIGNoaWxkLnR5cGUgJiYgaXNTdHJpbmcoY2hpbGQudHlwZSkgJiYgU1ZHX1RBR1MuaW5kZXhPZihjaGlsZC50eXBlKSA+PSAwO1xufTtcbmV4cG9ydCB2YXIgaXNEb3RQcm9wcyA9IGZ1bmN0aW9uIGlzRG90UHJvcHMoZG90KSB7XG4gIHJldHVybiBkb3QgJiYgX3R5cGVvZihkb3QpID09PSAnb2JqZWN0JyAmJiAnY3gnIGluIGRvdCAmJiAnY3knIGluIGRvdCAmJiAncicgaW4gZG90O1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHByb3BlcnR5IGlzIHZhbGlkIHRvIHNwcmVhZCBvbnRvIGFuIFNWRyBlbGVtZW50IG9yIG9udG8gYSBzcGVjaWZpYyBjb21wb25lbnRcbiAqIEBwYXJhbSB7dW5rbm93bn0gcHJvcGVydHkgcHJvcGVydHkgdmFsdWUgY3VycmVudGx5IGJlaW5nIGNvbXBhcmVkXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHByb3BlcnR5IGtleSBjdXJyZW50bHkgYmVpbmcgY29tcGFyZWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZUV2ZW50cyBpZiBldmVudHMgYXJlIGluY2x1ZGVkIGluIHNwcmVhZGFibGUgcHJvcHNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc3ZnRWxlbWVudFR5cGUgY2hlY2tzIGFnYWluc3QgbWFwIG9mIFNWRyBlbGVtZW50IHR5cGVzIHRvIGF0dHJpYnV0ZXNcbiAqIEByZXR1cm5zIHtib29sZWFufSBpcyBwcm9wIHZhbGlkXG4gKi9cbmV4cG9ydCB2YXIgaXNWYWxpZFNwcmVhZGFibGVQcm9wID0gZnVuY3Rpb24gaXNWYWxpZFNwcmVhZGFibGVQcm9wKHByb3BlcnR5LCBrZXksIGluY2x1ZGVFdmVudHMsIHN2Z0VsZW1lbnRUeXBlKSB7XG4gIHZhciBfRmlsdGVyZWRFbGVtZW50S2V5TWE7XG4gIC8qKlxuICAgKiBJZiB0aGUgc3ZnIGVsZW1lbnQgdHlwZSBpcyBleHBsaWNpdGx5IGluY2x1ZGVkLCBjaGVjayBhZ2FpbnN0IHRoZSBmaWx0ZXJlZCBlbGVtZW50IGtleSBtYXBcbiAgICogdG8gZGV0ZXJtaW5lIGlmIHRoZXJlIGFyZSBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIG9ubHkgZXhpc3Qgb24gdGhhdCBlbGVtZW50IHR5cGUuXG4gICAqIEB0b2RvIEFkZCBhbiBpbnRlcm5hbCBjanMgdmVyc2lvbiBvZiBodHRwczovL2dpdGh1Yi5jb20vd29vb3JtL3N2Zy1lbGVtZW50LWF0dHJpYnV0ZXMgZm9yIGZ1bGwgY292ZXJhZ2UuXG4gICAqL1xuICB2YXIgbWF0Y2hpbmdFbGVtZW50VHlwZUtleXMgPSAoX0ZpbHRlcmVkRWxlbWVudEtleU1hID0gRmlsdGVyZWRFbGVtZW50S2V5TWFwID09PSBudWxsIHx8IEZpbHRlcmVkRWxlbWVudEtleU1hcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogRmlsdGVyZWRFbGVtZW50S2V5TWFwW3N2Z0VsZW1lbnRUeXBlXSkgIT09IG51bGwgJiYgX0ZpbHRlcmVkRWxlbWVudEtleU1hICE9PSB2b2lkIDAgPyBfRmlsdGVyZWRFbGVtZW50S2V5TWEgOiBbXTtcbiAgcmV0dXJuICFpc0Z1bmN0aW9uKHByb3BlcnR5KSAmJiAoc3ZnRWxlbWVudFR5cGUgJiYgbWF0Y2hpbmdFbGVtZW50VHlwZUtleXMuaW5jbHVkZXMoa2V5KSB8fCBTVkdFbGVtZW50UHJvcEtleXMuaW5jbHVkZXMoa2V5KSkgfHwgaW5jbHVkZUV2ZW50cyAmJiBFdmVudEtleXMuaW5jbHVkZXMoa2V5KTtcbn07XG5cbi8qKlxuICogRmlsdGVyIGFsbCB0aGUgc3ZnIGVsZW1lbnRzIG9mIGNoaWxkcmVuXG4gKiBAcGFyYW0gIHtBcnJheX0gY2hpbGRyZW4gVGhlIGNoaWxkcmVuIG9mIGEgcmVhY3QgZWxlbWVudFxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgIEFsbCB0aGUgc3ZnIGVsZW1lbnRzXG4gKi9cbmV4cG9ydCB2YXIgZmlsdGVyU3ZnRWxlbWVudHMgPSBmdW5jdGlvbiBmaWx0ZXJTdmdFbGVtZW50cyhjaGlsZHJlbikge1xuICB2YXIgc3ZnRWxlbWVudHMgPSBbXTtcbiAgdG9BcnJheShjaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICBpZiAoaXNTdmdFbGVtZW50KGVudHJ5KSkge1xuICAgICAgc3ZnRWxlbWVudHMucHVzaChlbnRyeSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHN2Z0VsZW1lbnRzO1xufTtcbmV4cG9ydCB2YXIgZmlsdGVyUHJvcHMgPSBmdW5jdGlvbiBmaWx0ZXJQcm9wcyhwcm9wcywgaW5jbHVkZUV2ZW50cywgc3ZnRWxlbWVudFR5cGUpIHtcbiAgaWYgKCFwcm9wcyB8fCB0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHByb3BzID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgaW5wdXRQcm9wcyA9IHByb3BzO1xuICBpZiAoIC8qI19fUFVSRV9fKi9pc1ZhbGlkRWxlbWVudChwcm9wcykpIHtcbiAgICBpbnB1dFByb3BzID0gcHJvcHMucHJvcHM7XG4gIH1cbiAgaWYgKCFpc09iamVjdChpbnB1dFByb3BzKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBvdXQgPSB7fTtcblxuICAvKipcbiAgICogUHJvcHMgYXJlIGJsaW5kbHkgc3ByZWFkIG9udG8gU1ZHIGVsZW1lbnRzLiBUaGlzIGxvb3AgZmlsdGVycyBvdXQgcHJvcGVydGllcyB0aGF0IHdlIGRvbid0IHdhbnQgdG8gc3ByZWFkLlxuICAgKiBJdGVtcyBmaWx0ZXJlZCBvdXQgYXJlIGFzIGZvbGxvd3M6XG4gICAqICAgLSBmdW5jdGlvbnMgaW4gcHJvcGVydGllcyB0aGF0IGFyZSBTVkcgYXR0cmlidXRlcyAoZnVuY3Rpb25zIGFyZSBpbmNsdWRlZCB3aGVuIGluY2x1ZGVFdmVudHMgaXMgdHJ1ZSlcbiAgICogICAtIHByb3BzIHRoYXQgYXJlIFNWRyBhdHRyaWJ1dGVzIGJ1dCBkb24ndCBtYXRjaGVkIHRoZSBwYXNzZWQgc3ZnRWxlbWVudFR5cGVcbiAgICogICAtIGFueSBwcm9wIHRoYXQgaXMgbm90IGluIFNWR0VsZW1lbnRQcm9wS2V5cyAob3IgaW4gRXZlbnRLZXlzIGlmIGluY2x1ZGVFdmVudHMgaXMgdHJ1ZSlcbiAgICovXG4gIE9iamVjdC5rZXlzKGlucHV0UHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBfaW5wdXRQcm9wcztcbiAgICBpZiAoaXNWYWxpZFNwcmVhZGFibGVQcm9wKChfaW5wdXRQcm9wcyA9IGlucHV0UHJvcHMpID09PSBudWxsIHx8IF9pbnB1dFByb3BzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaW5wdXRQcm9wc1trZXldLCBrZXksIGluY2x1ZGVFdmVudHMsIHN2Z0VsZW1lbnRUeXBlKSkge1xuICAgICAgb3V0W2tleV0gPSBpbnB1dFByb3BzW2tleV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogV2V0aGVyIHByb3BzIG9mIGNoaWxkcmVuIGNoYW5nZWRcbiAqIEBwYXJhbSAge09iamVjdH0gbmV4dENoaWxkcmVuIFRoZSBsYXRlc3QgY2hpbGRyZW5cbiAqIEBwYXJhbSAge09iamVjdH0gcHJldkNoaWxkcmVuIFRoZSBwcmV2IGNoaWxkcmVuXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAgICAgICBlcXVhbCBvciBub3RcbiAqL1xuZXhwb3J0IHZhciBpc0NoaWxkcmVuRXF1YWwgPSBmdW5jdGlvbiBpc0NoaWxkcmVuRXF1YWwobmV4dENoaWxkcmVuLCBwcmV2Q2hpbGRyZW4pIHtcbiAgaWYgKG5leHRDaGlsZHJlbiA9PT0gcHJldkNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGNvdW50ID0gQ2hpbGRyZW4uY291bnQobmV4dENoaWxkcmVuKTtcbiAgaWYgKGNvdW50ICE9PSBDaGlsZHJlbi5jb3VudChwcmV2Q2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChjb3VudCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChjb3VudCA9PT0gMSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICByZXR1cm4gaXNTaW5nbGVDaGlsZEVxdWFsKEFycmF5LmlzQXJyYXkobmV4dENoaWxkcmVuKSA/IG5leHRDaGlsZHJlblswXSA6IG5leHRDaGlsZHJlbiwgQXJyYXkuaXNBcnJheShwcmV2Q2hpbGRyZW4pID8gcHJldkNoaWxkcmVuWzBdIDogcHJldkNoaWxkcmVuKTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICB2YXIgbmV4dENoaWxkID0gbmV4dENoaWxkcmVuW2ldO1xuICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRyZW5baV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobmV4dENoaWxkKSB8fCBBcnJheS5pc0FycmF5KHByZXZDaGlsZCkpIHtcbiAgICAgIGlmICghaXNDaGlsZHJlbkVxdWFsKG5leHRDaGlsZCwgcHJldkNoaWxkKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgfSBlbHNlIGlmICghaXNTaW5nbGVDaGlsZEVxdWFsKG5leHRDaGlsZCwgcHJldkNoaWxkKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5leHBvcnQgdmFyIGlzU2luZ2xlQ2hpbGRFcXVhbCA9IGZ1bmN0aW9uIGlzU2luZ2xlQ2hpbGRFcXVhbChuZXh0Q2hpbGQsIHByZXZDaGlsZCkge1xuICBpZiAoaXNOaWwobmV4dENoaWxkKSAmJiBpc05pbChwcmV2Q2hpbGQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKCFpc05pbChuZXh0Q2hpbGQpICYmICFpc05pbChwcmV2Q2hpbGQpKSB7XG4gICAgdmFyIF9yZWYgPSBuZXh0Q2hpbGQucHJvcHMgfHwge30sXG4gICAgICBuZXh0Q2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgbmV4dFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIF9leGNsdWRlZCk7XG4gICAgdmFyIF9yZWYyID0gcHJldkNoaWxkLnByb3BzIHx8IHt9LFxuICAgICAgcHJldkNoaWxkcmVuID0gX3JlZjIuY2hpbGRyZW4sXG4gICAgICBwcmV2UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIF9leGNsdWRlZDIpO1xuICAgIGlmIChuZXh0Q2hpbGRyZW4gJiYgcHJldkNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gc2hhbGxvd0VxdWFsKG5leHRQcm9wcywgcHJldlByb3BzKSAmJiBpc0NoaWxkcmVuRXF1YWwobmV4dENoaWxkcmVuLCBwcmV2Q2hpbGRyZW4pO1xuICAgIH1cbiAgICBpZiAoIW5leHRDaGlsZHJlbiAmJiAhcHJldkNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gc2hhbGxvd0VxdWFsKG5leHRQcm9wcywgcHJldlByb3BzKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5leHBvcnQgdmFyIHJlbmRlckJ5T3JkZXIgPSBmdW5jdGlvbiByZW5kZXJCeU9yZGVyKGNoaWxkcmVuLCByZW5kZXJNYXApIHtcbiAgdmFyIGVsZW1lbnRzID0gW107XG4gIHZhciByZWNvcmQgPSB7fTtcbiAgdG9BcnJheShjaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgaWYgKGlzU3ZnRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIGVsZW1lbnRzLnB1c2goY2hpbGQpO1xuICAgIH0gZWxzZSBpZiAoY2hpbGQpIHtcbiAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKGNoaWxkLnR5cGUpO1xuICAgICAgdmFyIF9yZWYzID0gcmVuZGVyTWFwW2Rpc3BsYXlOYW1lXSB8fCB7fSxcbiAgICAgICAgaGFuZGxlciA9IF9yZWYzLmhhbmRsZXIsXG4gICAgICAgIG9uY2UgPSBfcmVmMy5vbmNlO1xuICAgICAgaWYgKGhhbmRsZXIgJiYgKCFvbmNlIHx8ICFyZWNvcmRbZGlzcGxheU5hbWVdKSkge1xuICAgICAgICB2YXIgcmVzdWx0cyA9IGhhbmRsZXIoY2hpbGQsIGRpc3BsYXlOYW1lLCBpbmRleCk7XG4gICAgICAgIGVsZW1lbnRzLnB1c2gocmVzdWx0cyk7XG4gICAgICAgIHJlY29yZFtkaXNwbGF5TmFtZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBlbGVtZW50cztcbn07XG5leHBvcnQgdmFyIGdldFJlYWN0RXZlbnRCeVR5cGUgPSBmdW5jdGlvbiBnZXRSZWFjdEV2ZW50QnlUeXBlKGUpIHtcbiAgdmFyIHR5cGUgPSBlICYmIGUudHlwZTtcbiAgaWYgKHR5cGUgJiYgUkVBQ1RfQlJPV1NFUl9FVkVOVF9NQVBbdHlwZV0pIHtcbiAgICByZXR1cm4gUkVBQ1RfQlJPV1NFUl9FVkVOVF9NQVBbdHlwZV07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuZXhwb3J0IHZhciBwYXJzZUNoaWxkSW5kZXggPSBmdW5jdGlvbiBwYXJzZUNoaWxkSW5kZXgoY2hpbGQsIGNoaWxkcmVuKSB7XG4gIHJldHVybiB0b0FycmF5KGNoaWxkcmVuKS5pbmRleE9mKGNoaWxkKTtcbn07IiwiZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gb3duS2V5cyhlLCByKSB7IHZhciB0ID0gT2JqZWN0LmtleXMoZSk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTsgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7IH0pKSwgdC5wdXNoLmFwcGx5KHQsIG8pOyB9IHJldHVybiB0OyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKGUpIHsgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHsgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9OyByICUgMiA/IG93bktleXMoT2JqZWN0KHQpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzKE9iamVjdCh0KSkuZm9yRWFjaChmdW5jdGlvbiAocikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7IH0pOyB9IHJldHVybiBlOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGtleSA9IF90b1Byb3BlcnR5S2V5KGtleSk7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTsgcmV0dXJuIF90eXBlb2Yoa2V5KSA9PT0gXCJzeW1ib2xcIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHsgaWYgKF90eXBlb2YoaW5wdXQpICE9PSBcIm9iamVjdFwiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTsgaWYgKF90eXBlb2YocmVzKSAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlczsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpOyB9XG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldOyByZXR1cm4gYXJyMjsgfVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHsgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTsgaWYgKG51bGwgIT0gdCkgeyB2YXIgZSwgbiwgaSwgdSwgYSA9IFtdLCBmID0gITAsIG8gPSAhMTsgdHJ5IHsgaWYgKGkgPSAodCA9IHQuY2FsbChyKSkubmV4dCwgMCA9PT0gbCkgeyBpZiAoT2JqZWN0KHQpICE9PSB0KSByZXR1cm47IGYgPSAhMTsgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApOyB9IGNhdGNoIChyKSB7IG8gPSAhMCwgbiA9IHI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghZiAmJiBudWxsICE9IHRbXCJyZXR1cm5cIl0gJiYgKHUgPSB0W1wicmV0dXJuXCJdKCksIE9iamVjdCh1KSAhPT0gdSkpIHJldHVybjsgfSBmaW5hbGx5IHsgaWYgKG8pIHRocm93IG47IH0gfSByZXR1cm4gYTsgfSB9XG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cbi8qKlxuICogQGZpbGVPdmVydmlldyBXcmFwcGVyIGNvbXBvbmVudCB0byBtYWtlIGNoYXJ0cyBhZGFwdCB0byB0aGUgc2l6ZSBvZiBwYXJlbnQgKiBET01cbiAqL1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgUmVhY3QsIHsgZm9yd2FyZFJlZiwgY2xvbmVFbGVtZW50LCB1c2VTdGF0ZSwgdXNlSW1wZXJhdGl2ZUhhbmRsZSwgdXNlUmVmLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHRocm90dGxlIGZyb20gJ2xvZGFzaC90aHJvdHRsZSc7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgeyBpc1BlcmNlbnQgfSBmcm9tICcuLi91dGlsL0RhdGFVdGlscyc7XG5pbXBvcnQgeyB3YXJuIH0gZnJvbSAnLi4vdXRpbC9Mb2dVdGlscyc7XG5pbXBvcnQgeyBnZXREaXNwbGF5TmFtZSB9IGZyb20gJy4uL3V0aWwvUmVhY3RVdGlscyc7XG5leHBvcnQgdmFyIFJlc3BvbnNpdmVDb250YWluZXIgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBhc3BlY3QgPSBfcmVmLmFzcGVjdCxcbiAgICBfcmVmJGluaXRpYWxEaW1lbnNpb24gPSBfcmVmLmluaXRpYWxEaW1lbnNpb24sXG4gICAgaW5pdGlhbERpbWVuc2lvbiA9IF9yZWYkaW5pdGlhbERpbWVuc2lvbiA9PT0gdm9pZCAwID8ge1xuICAgICAgd2lkdGg6IC0xLFxuICAgICAgaGVpZ2h0OiAtMVxuICAgIH0gOiBfcmVmJGluaXRpYWxEaW1lbnNpb24sXG4gICAgX3JlZiR3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgd2lkdGggPSBfcmVmJHdpZHRoID09PSB2b2lkIDAgPyAnMTAwJScgOiBfcmVmJHdpZHRoLFxuICAgIF9yZWYkaGVpZ2h0ID0gX3JlZi5oZWlnaHQsXG4gICAgaGVpZ2h0ID0gX3JlZiRoZWlnaHQgPT09IHZvaWQgMCA/ICcxMDAlJyA6IF9yZWYkaGVpZ2h0LFxuICAgIF9yZWYkbWluV2lkdGggPSBfcmVmLm1pbldpZHRoLFxuICAgIG1pbldpZHRoID0gX3JlZiRtaW5XaWR0aCA9PT0gdm9pZCAwID8gMCA6IF9yZWYkbWluV2lkdGgsXG4gICAgbWluSGVpZ2h0ID0gX3JlZi5taW5IZWlnaHQsXG4gICAgbWF4SGVpZ2h0ID0gX3JlZi5tYXhIZWlnaHQsXG4gICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgIF9yZWYkZGVib3VuY2UgPSBfcmVmLmRlYm91bmNlLFxuICAgIGRlYm91bmNlID0gX3JlZiRkZWJvdW5jZSA9PT0gdm9pZCAwID8gMCA6IF9yZWYkZGVib3VuY2UsXG4gICAgaWQgPSBfcmVmLmlkLFxuICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgIG9uUmVzaXplID0gX3JlZi5vblJlc2l6ZSxcbiAgICBfcmVmJHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICBzdHlsZSA9IF9yZWYkc3R5bGUgPT09IHZvaWQgMCA/IHt9IDogX3JlZiRzdHlsZTtcbiAgdmFyIGNvbnRhaW5lclJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIG9uUmVzaXplUmVmID0gdXNlUmVmKCk7XG4gIG9uUmVzaXplUmVmLmN1cnJlbnQgPSBvblJlc2l6ZTtcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihjb250YWluZXJSZWYuY3VycmVudCwge1xuICAgICAgZ2V0IGN1cnJlbnQoKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignVGhlIHVzYWdlIG9mIHJlZi5jdXJyZW50LmN1cnJlbnQgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBubyBsb25nZXIgYmUgc3VwcG9ydGVkLicpO1xuICAgICAgICByZXR1cm4gY29udGFpbmVyUmVmLmN1cnJlbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoe1xuICAgICAgY29udGFpbmVyV2lkdGg6IGluaXRpYWxEaW1lbnNpb24ud2lkdGgsXG4gICAgICBjb250YWluZXJIZWlnaHQ6IGluaXRpYWxEaW1lbnNpb24uaGVpZ2h0XG4gICAgfSksXG4gICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgc2l6ZXMgPSBfdXNlU3RhdGUyWzBdLFxuICAgIHNldFNpemVzID0gX3VzZVN0YXRlMlsxXTtcbiAgdmFyIHNldENvbnRhaW5lclNpemUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAobmV3V2lkdGgsIG5ld0hlaWdodCkge1xuICAgIHNldFNpemVzKGZ1bmN0aW9uIChwcmV2U3RhdGUpIHtcbiAgICAgIHZhciByb3VuZGVkV2lkdGggPSBNYXRoLnJvdW5kKG5ld1dpZHRoKTtcbiAgICAgIHZhciByb3VuZGVkSGVpZ2h0ID0gTWF0aC5yb3VuZChuZXdIZWlnaHQpO1xuICAgICAgaWYgKHByZXZTdGF0ZS5jb250YWluZXJXaWR0aCA9PT0gcm91bmRlZFdpZHRoICYmIHByZXZTdGF0ZS5jb250YWluZXJIZWlnaHQgPT09IHJvdW5kZWRIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRhaW5lcldpZHRoOiByb3VuZGVkV2lkdGgsXG4gICAgICAgIGNvbnRhaW5lckhlaWdodDogcm91bmRlZEhlaWdodFxuICAgICAgfTtcbiAgICB9KTtcbiAgfSwgW10pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKGVudHJpZXMpIHtcbiAgICAgIHZhciBfb25SZXNpemVSZWYkY3VycmVudDtcbiAgICAgIHZhciBfZW50cmllcyQwJGNvbnRlbnRSZWMgPSBlbnRyaWVzWzBdLmNvbnRlbnRSZWN0LFxuICAgICAgICBjb250YWluZXJXaWR0aCA9IF9lbnRyaWVzJDAkY29udGVudFJlYy53aWR0aCxcbiAgICAgICAgY29udGFpbmVySGVpZ2h0ID0gX2VudHJpZXMkMCRjb250ZW50UmVjLmhlaWdodDtcbiAgICAgIHNldENvbnRhaW5lclNpemUoY29udGFpbmVyV2lkdGgsIGNvbnRhaW5lckhlaWdodCk7XG4gICAgICAoX29uUmVzaXplUmVmJGN1cnJlbnQgPSBvblJlc2l6ZVJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfb25SZXNpemVSZWYkY3VycmVudCA9PT0gdm9pZCAwIHx8IF9vblJlc2l6ZVJlZiRjdXJyZW50LmNhbGwob25SZXNpemVSZWYsIGNvbnRhaW5lcldpZHRoLCBjb250YWluZXJIZWlnaHQpO1xuICAgIH07XG4gICAgaWYgKGRlYm91bmNlID4gMCkge1xuICAgICAgY2FsbGJhY2sgPSB0aHJvdHRsZShjYWxsYmFjaywgZGVib3VuY2UsIHtcbiAgICAgICAgdHJhaWxpbmc6IHRydWUsXG4gICAgICAgIGxlYWRpbmc6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGNhbGxiYWNrKTtcbiAgICB2YXIgX2NvbnRhaW5lclJlZiRjdXJyZW50ID0gY29udGFpbmVyUmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBjb250YWluZXJXaWR0aCA9IF9jb250YWluZXJSZWYkY3VycmVudC53aWR0aCxcbiAgICAgIGNvbnRhaW5lckhlaWdodCA9IF9jb250YWluZXJSZWYkY3VycmVudC5oZWlnaHQ7XG4gICAgc2V0Q29udGFpbmVyU2l6ZShjb250YWluZXJXaWR0aCwgY29udGFpbmVySGVpZ2h0KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKGNvbnRhaW5lclJlZi5jdXJyZW50KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH07XG4gIH0sIFtzZXRDb250YWluZXJTaXplLCBkZWJvdW5jZV0pO1xuICB2YXIgY2hhcnRDb250ZW50ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbnRhaW5lcldpZHRoID0gc2l6ZXMuY29udGFpbmVyV2lkdGgsXG4gICAgICBjb250YWluZXJIZWlnaHQgPSBzaXplcy5jb250YWluZXJIZWlnaHQ7XG4gICAgaWYgKGNvbnRhaW5lcldpZHRoIDwgMCB8fCBjb250YWluZXJIZWlnaHQgPCAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgd2Fybihpc1BlcmNlbnQod2lkdGgpIHx8IGlzUGVyY2VudChoZWlnaHQpLCBcIlRoZSB3aWR0aCglcykgYW5kIGhlaWdodCglcykgYXJlIGJvdGggZml4ZWQgbnVtYmVycyxcXG4gICAgICAgbWF5YmUgeW91IGRvbid0IG5lZWQgdG8gdXNlIGEgUmVzcG9uc2l2ZUNvbnRhaW5lci5cIiwgd2lkdGgsIGhlaWdodCk7XG4gICAgd2FybighYXNwZWN0IHx8IGFzcGVjdCA+IDAsICdUaGUgYXNwZWN0KCVzKSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvLicsIGFzcGVjdCk7XG4gICAgdmFyIGNhbGN1bGF0ZWRXaWR0aCA9IGlzUGVyY2VudCh3aWR0aCkgPyBjb250YWluZXJXaWR0aCA6IHdpZHRoO1xuICAgIHZhciBjYWxjdWxhdGVkSGVpZ2h0ID0gaXNQZXJjZW50KGhlaWdodCkgPyBjb250YWluZXJIZWlnaHQgOiBoZWlnaHQ7XG4gICAgaWYgKGFzcGVjdCAmJiBhc3BlY3QgPiAwKSB7XG4gICAgICAvLyBQcmVzZXJ2ZSB0aGUgZGVzaXJlZCBhc3BlY3QgcmF0aW9cbiAgICAgIGlmIChjYWxjdWxhdGVkV2lkdGgpIHtcbiAgICAgICAgLy8gV2lsbCBkZWZhdWx0IHRvIHVzaW5nIHdpZHRoIGZvciBhc3BlY3QgcmF0aW9cbiAgICAgICAgY2FsY3VsYXRlZEhlaWdodCA9IGNhbGN1bGF0ZWRXaWR0aCAvIGFzcGVjdDtcbiAgICAgIH0gZWxzZSBpZiAoY2FsY3VsYXRlZEhlaWdodCkge1xuICAgICAgICAvLyBCdXQgd2Ugc2hvdWxkIGFsc28gdGFrZSBoZWlnaHQgaW50byBjb25zaWRlcmF0aW9uXG4gICAgICAgIGNhbGN1bGF0ZWRXaWR0aCA9IGNhbGN1bGF0ZWRIZWlnaHQgKiBhc3BlY3Q7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIG1heEhlaWdodCBpcyBzZXQsIG92ZXJ3cml0ZSBpZiBjYWxjdWxhdGVkSGVpZ2h0IGlzIGdyZWF0ZXIgdGhhbiBtYXhIZWlnaHRcbiAgICAgIGlmIChtYXhIZWlnaHQgJiYgY2FsY3VsYXRlZEhlaWdodCA+IG1heEhlaWdodCkge1xuICAgICAgICBjYWxjdWxhdGVkSGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgICB3YXJuKGNhbGN1bGF0ZWRXaWR0aCA+IDAgfHwgY2FsY3VsYXRlZEhlaWdodCA+IDAsIFwiVGhlIHdpZHRoKCVzKSBhbmQgaGVpZ2h0KCVzKSBvZiBjaGFydCBzaG91bGQgYmUgZ3JlYXRlciB0aGFuIDAsXFxuICAgICAgIHBsZWFzZSBjaGVjayB0aGUgc3R5bGUgb2YgY29udGFpbmVyLCBvciB0aGUgcHJvcHMgd2lkdGgoJXMpIGFuZCBoZWlnaHQoJXMpLFxcbiAgICAgICBvciBhZGQgYSBtaW5XaWR0aCglcykgb3IgbWluSGVpZ2h0KCVzKSBvciB1c2UgYXNwZWN0KCVzKSB0byBjb250cm9sIHRoZVxcbiAgICAgICBoZWlnaHQgYW5kIHdpZHRoLlwiLCBjYWxjdWxhdGVkV2lkdGgsIGNhbGN1bGF0ZWRIZWlnaHQsIHdpZHRoLCBoZWlnaHQsIG1pbldpZHRoLCBtaW5IZWlnaHQsIGFzcGVjdCk7XG4gICAgdmFyIGlzQ2hhcnRzID0gIUFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGlzRWxlbWVudChjaGlsZHJlbikgJiYgZ2V0RGlzcGxheU5hbWUoY2hpbGRyZW4udHlwZSkuZW5kc1dpdGgoJ0NoYXJ0Jyk7XG4gICAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICBpZiAoaXNFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL2Nsb25lRWxlbWVudChjaGlsZCwgX29iamVjdFNwcmVhZCh7XG4gICAgICAgICAgd2lkdGg6IGNhbGN1bGF0ZWRXaWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGNhbGN1bGF0ZWRIZWlnaHRcbiAgICAgICAgfSwgaXNDaGFydHMgPyB7XG4gICAgICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgbWF4SGVpZ2h0OiBjYWxjdWxhdGVkSGVpZ2h0LFxuICAgICAgICAgICAgbWF4V2lkdGg6IGNhbGN1bGF0ZWRXaWR0aFxuICAgICAgICAgIH0sIGNoaWxkLnByb3BzLnN0eWxlKVxuICAgICAgICB9IDoge30pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9KTtcbiAgfSwgW2FzcGVjdCwgY2hpbGRyZW4sIGhlaWdodCwgbWF4SGVpZ2h0LCBtaW5IZWlnaHQsIG1pbldpZHRoLCBzaXplcywgd2lkdGhdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBpZDogaWQgPyBcIlwiLmNvbmNhdChpZCkgOiB1bmRlZmluZWQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KCdyZWNoYXJ0cy1yZXNwb25zaXZlLWNvbnRhaW5lcicsIGNsYXNzTmFtZSksXG4gICAgc3R5bGU6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3R5bGUpLCB7fSwge1xuICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICBtaW5XaWR0aDogbWluV2lkdGgsXG4gICAgICBtaW5IZWlnaHQ6IG1pbkhlaWdodCxcbiAgICAgIG1heEhlaWdodDogbWF4SGVpZ2h0XG4gICAgfSksXG4gICAgcmVmOiBjb250YWluZXJSZWZcbiAgfSwgY2hhcnRDb250ZW50KTtcbn0pOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVRoZW1lIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9zdHlsZXMnO1xuaW1wb3J0IENhcmQgZnJvbSAnQG11aS9tYXRlcmlhbC9DYXJkJztcbmltcG9ydCBDYXJkTWVkaWEgZnJvbSAnQG11aS9tYXRlcmlhbC9DYXJkTWVkaWEnO1xuaW1wb3J0IHsgQ2FyZEFjdGlvbkFyZWEgfSBmcm9tICdAbXVpL21hdGVyaWFsJztcbmltcG9ydCBUaXRsZSBmcm9tICcuL1RpdGxlJztcbmltcG9ydCB7UmVzcG9uc2l2ZUNvbnRhaW5lcn0gZnJvbSBcInJlY2hhcnRzXCI7XG5cbi8vIEdlbmVyYXRlIFNhbGVzIERhdGFcbmZ1bmN0aW9uIGNyZWF0ZURhdGEodGltZSwgYW1vdW50KSB7XG4gICAgcmV0dXJuIHsgdGltZSwgYW1vdW50IH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENoYXJ0KCkge1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgIDxUaXRsZT5Ub2RheTwvVGl0bGU+XG4gICAgICAgICAgICA8UmVzcG9uc2l2ZUNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8Q2FyZD5cbiAgICAgICAgICAgICAgICAgICAgPENhcmRBY3Rpb25BcmVhPlxuICAgICAgICAgICAgICAgICAgICAgICAgPENhcmRNZWRpYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD1cImlmcmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3ttYXhXaWR0aDogODMwLCBoZWlnaHQ6IDQ4MCwgYmFja2dyb3VuZDogXCIjRjFGNUY0XCIsIGJvcmRlcjogXCJub25lXCIsIGJvcmRlclJhZGl1czogXCIycHhcIiwgYm94U2hhZG93OiBcIjAgMnB4IDEwcHggMCByZ2JhKDcwLCA3NiwgNzksIC4yKVwifX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL2NoYXJ0cy5tb25nb2RiLmNvbS9jaGFydHMtcHJvamVjdC0wLWFiYnJ6L2VtYmVkL2NoYXJ0cz9pZD02NWQ0ZWEzNC0xOTNiLTRhNDktOGU3MS01MDhjMGExMWE5NzAmbWF4RGF0YUFnZT0zNjAwJnRoZW1lPWxpZ2h0JmF1dG9SZWZyZXNoPXRydWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD1cIkdsb2JhbDogT3BlbnNxdWFyZSBGcmVxdWVuY3kgb2YgQW5hbHlzaXMgYnkgUGxhdGZvcm1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkQWN0aW9uQXJlYT5cbiAgICAgICAgICAgICAgICA8L0NhcmQ+XG4gICAgICAgICAgICA8L1Jlc3BvbnNpdmVDb250YWluZXI+XG4gICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbn1cbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcGxhdGZvcm0tb3B0aW9ucy5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJjb25zdCBiYWNrbGlua0luZm8gPVxuICAgICdPcGVuU3F1YXJlIGRpZ2l0YWwgdGFyZ2V0aW5nIHRvb2xzIHByb3ZpZGVzIHRoaXMgYmFja2xpbmsgdG9vbCB0aGF0IGdpdmVzIHlvdVxcbicgK1xuICAgICd0aGUgYWJpbGl0eSB0byBxdWVyeSBhIHVybCBhbmQgZXhwb3NlIGl0cyBiYWNrbGlua3MuIEEgYmFja2xpbmsgaXMgYSBsaW5rIGZyb21cXG4nICtcbiAgICAnc29tZSBvdGhlciB3ZWJzaXRlICh0aGUgcmVmZXJyZXIpIHRvIHRoYXQgd2ViIHJlc291cmNlICh0aGUgcmVmZXJlbnQpLiBBIHdlYlxcbicgK1xuICAgICdyZXNvdXJjZSBtYXkgYmUgKGZvciBleGFtcGxlKSBhIHdlYnNpdGUsIHdlYiBwYWdlLCBvciB3ZWIgZGlyZWN0b3J5LiBPcGVuc3F1YXJlJztcblxuY29uc3QgZW1haWxMb29rdXBJbmZvID1cbiAgICAnT3BlblNxdWFyZSBkaWdpdGFsIHRhcmdldGluZyB0b29scyBwcm92aWRlcyB0aGlzIGxvb2t1cCB0b29sIHRoYXQgZ2l2ZXMgeW91XFxuJyArXG4gICAgJ3RoZSBhYmlsaXR5IHRvIHF1ZXJ5IG91ciBkYXRhYmFzZXMgZm9yIGRpc3Bvc2FibGUgZW1haWwgZG9tYWlucy4gVGhpcyBmZWF0dXJlXFxuJyArXG4gICAgJ2Fsc28gcHJvdmlkZXMgbG9va3VwIGNhcGFiaWxpdGllcyBmb3Iga25vd24gbWFsaWNpb3VzIGVtYWlsIGFkZHJlc3Nlcy4gSWYgeW91XFxuJyArXG4gICAgJ2hhdmUgaW5mb3JtYXRpb24gZm9yIGtub3duIGRvbWFpbnMgb3IgYWRkcmVzc2VzIHRoYXQgb3VyIGRhdGFiYXNlcyBkb25cXCd0IGhhdmUsXFxuJyArXG4gICAgJ3BsZWFzZSBlbWFpbCBvdXIgdGVhbSBhdCAnO1xuXG5jb25zdCBuc2xvb2t1cEluZm8gPVxuICAgICdPcGVuU3F1YXJlIGRpZ2l0YWwgdGFyZ2V0aW5nIHRvb2xzIHByb3ZpZGVzIHRoaXMgbG9va3VwIHRvb2wgdGhhdCBnaXZlcyB5b3VcXG4nICtcbiAgICAndGhlIGFiaWxpdHkgdG8gcXVlcnkgdGhlIERvbWFpbiBOYW1lIFN5c3RlbSB0byBvYnRhaW4gdGhlIG1hcHBpbmcgYmV0d2VlblxcbicgK1xuICAgICdkb21haW4gbmFtZSBhbmQgSVAgYWRkcmVzcywgb3Igb3RoZXIgRE5TIHJlY29yZHMuJztcblxuY29uc3Qgd2hvaXNJbmZvID1cbiAgICAnT3BlblNxdWFyZSBkaWdpdGFsIHRhcmdldGluZyB0b29scyBwcm92aWRlcyB0aGlzIGxvb2t1cCB0b29sIHRoYXQgZ2l2ZXMgeW91XFxuJyArXG4gICAgJ3RoZSBhYmlsaXR5IHRvIGxvb2t1cCB0aGUgY3VycmVudCByZWdpc3RyYXRpb24gZGF0YSBmb3IgZG9tYWluIG5hbWVzIGFuZFxcbicgK1xuICAgICdpbnRlcm5ldCBudW1iZXIgcmVzb3VyY2VzLiBUaGlzIHRvb2wgdXNlcyB0aGUgV0hPSVMgKHBvcnQgNDMpIHByb3RvY29sLic7XG5cbmNvbnN0IHlvdXR1YmVJbmZvXzEgPVxuICAgICdPcGVuc3F1YXJlIFNlcnZpY2UgUGxhdGZvcm1zIHByb3ZpZGUgYSB3YXkgZm9yIHlvdSB0byBzZWFyY2ggcG9wdWxhciBzb2NpYWxcXG4nICtcbiAgICAnbWVkaWEgc2l0ZXMgYW5kIGluZGV4IGxhcmdlIHF1YW50aXRpZXMgb2YgaXRzIHB1YmxpYyBkYXRhLiBPcGVuU3F1YXJlIHdpbGxcXG4nICtcbiAgICAnbmV2ZXIgZXhwb3NlIHByaXZhdGUgYW5kIHByb3RlY3RlZCBkYXRhIG9mIGFueSB1c2VyIG9yIHRhcmdldC4nO1xuXG5jb25zdCB5b3V0dWJlSW5mb18yID1cbiAgICAnT3BlbnNxdWFyZVxcJ3MgWW91VHViZSBQbGF0Zm9ybSBhbGxvd3MgYWdlbnRzIHRvIHNlYXJjaCB3aXRoaW4gb3VyIGRhdGFiYXNlcyBmb3JcXG4nICtcbiAgICAndmlkZW9zLCBwcm92aWRpbmcgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNoYW5uZWwgYW5kIGl0XFwncyBjb250ZW50LlxcbicgK1xuICAgICdTZWFyY2hlZCB2aWRlbyByZXN1bHRzIHByb3ZpZGUgYSBmdWxsIGRldGFpbGVkIGxvZyBhbmQgdHJhbnNjcmlwdHMuIFlvdSBoYXZlXFxuJyArXG4gICAgJ3RoZSBvcHRpb24gdG8gc2VhcmNoIHZpZGVvcyBiYXNlZCBvbiB0ZXJtcywgYW5kIHRoZSBtb3N0IHJlbGV2YW50IHZpZGVvXFwncyB3aWxsXFxuJyArXG4gICAgJ2JlIHByb3ZpZGVkLiBUaGlzIGlzIHBvd2VyZWQgYnkgYSBzdHJvbmcgdmVjdG9yIGRhdGFiYXNlIHRoYXQgY3JlYXRlcyB0ZXh0XFxuJyArXG4gICAgJ2VtYmVkZGluZ3Mgb24gZWFjaCB2aWRlb1xcJ3MgdHJhbnNjcmlwdCB1c2luZyBPcGVuQUlcXCdzIFRleHQgRW1iZWRkaW5nIEFkYS0wMDIgTGFyZ2VcXG4nICtcbiAgICAnTGFuZ3VhZ2UgTW9kZWwuIFlvdSBjYW4gc2VhcmNoIFlvdVR1YmUgdmlkZW9cXCdzIHByb3ZpZGluZyBhIHZpZGVvIGlkZW50aWZpY2F0aW9uXFxuJyArXG4gICAgJ2NvZGUuIElmIHZpZGVvXFwncyBhcmVuXFwndCBwcmVzZW50IGluIG91ciBkYXRhYmFzZSwgdGhleVxcJ2xsIGJlIGFkZGVkIGZvciB0aGUgY29tbXVuaXR5LlxcbicgK1xuICAgICdGZWVsIGZyZWUgdG8gcHJvdmlkZSBhbnkgaW5zaWdodHMgb3IgZmVlZGJhY2sgdG8gb3VyIHRlYW0gYXQgJztcblxuY29uc3QgZ3JlZXRpbmdzID0gW1xuICAgIFwiSG93IGNhbiBJIGFzc2lzdCB3aXRoIHlvdXIgc2VhcmNoIHRvZGF5P1wiLFxuICAgIFwiQmFjayBhbHJlYWR5P1wiLFxuICAgIFwiV2VsY29tZSBiYWNrIVwiLFxuICAgIFwiV2hhdCBjYW4gSSBkbyBmb3IgeW91P1wiLFxuICAgIFwiTWlzcyBtZSBhbHJlYWR5LCB3aGF0J3MgdXA/XCIsXG4gICAgXCJZbyFcIlxuXTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGJhY2tsaW5rSW5mbyxcbiAgICBlbWFpbExvb2t1cEluZm8sXG4gICAgbnNsb29rdXBJbmZvLFxuICAgIHdob2lzSW5mbyxcbiAgICB5b3V0dWJlSW5mb18xLFxuICAgIHlvdXR1YmVJbmZvXzIsXG4gICAgZ3JlZXRpbmdzXG59IiwiaW1wb3J0IFN0cmluZ1V0aWwgZnJvbSBcIi4vU3RyaW5nVXRpbFwiO1xuXG5jb25zdCBnZXRQdWJsaXNoRGF0ZSA9IChkYXRlU3RyKSA9PiB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKERhdGUucGFyc2UoZGF0ZVN0cikpO1xuICAgIGxldCBkYXkgPSBkYXRlLmdldERhdGUoKTtcbiAgICBsZXQgbW9udGggPSBnZXRNb250aFN0cmluZyhkYXRlLmdldE1vbnRoKCkpO1xuICAgIGxldCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIHJldHVybiBgJHtkYXl9ICR7bW9udGh9LCAke3llYXJ9YDtcbn07XG5cbmNvbnN0IGdldEN1cnJlbnREYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGxldCBkYXkgPSBkYXRlLmdldERhdGUoKTtcbiAgICBsZXQgbW9udGggPSBnZXRNb250aFN0cmluZyhkYXRlLmdldE1vbnRoKCkpO1xuICAgIGxldCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIHJldHVybiBgYXMgb2YgJHtkYXl9ICR7bW9udGh9LCAke3llYXJ9YDtcbn1cblxuY29uc3QgZ2V0Q3VycmVudFRpbWUgPSAoKSA9PiB7XG4gICAgY29uc3QgdGltZSA9IG5ldyBEYXRlKCk7XG4gICAgcmV0dXJuIHRpbWUudG9UaW1lU3RyaW5nKCkuc3BsaXQoXCIgXCIpWzBdO1xufVxuXG5jb25zdCBnZXRSYW5kb21JbnQgPSAobWF4KSA9PiB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heCk7XG59XG5cbmZ1bmN0aW9uIHJhbmRvbShtbiwgbXgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIChteCAtIG1uKSArIG1uO1xufVxuXG5mdW5jdGlvbiByYW5kb21HcmVldGluZygpIHtcbiAgICBjb25zdCBsZW4gPSBTdHJpbmdVdGlsLmdyZWV0aW5ncy5sZW5ndGg7XG4gICAgcmV0dXJuIFN0cmluZ1V0aWwuZ3JlZXRpbmdzW01hdGguZmxvb3IocmFuZG9tKDEsIGxlbiArIDEpKSAtIDFdO1xufVxuXG5jb25zdCBnZXRNb250aFN0cmluZyA9IChtb250aEludCkgPT4ge1xuICAgIHN3aXRjaCAobW9udGhJbnQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcmV0dXJuICdKYW51YXJ5JztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuICdGZWJydWFyeSc7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiAnTWFyY2gnO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gJ0FwcmlsJztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcmV0dXJuICdNYXknO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICByZXR1cm4gJ0p1bmUnO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICByZXR1cm4gJ0p1bHknO1xuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICByZXR1cm4gJ0F1Z3VzdCc7XG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIHJldHVybiAnU2VwdGVtYmVyJztcbiAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgcmV0dXJuICdPY3RvYmVyJztcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIHJldHVybiAnTm92ZW1iZXInO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICdEZWNlbWJlcic7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGdldFB1Ymxpc2hEYXRlLFxuICAgIGdldEN1cnJlbnREYXRlLFxuICAgIGdldE1vbnRoU3RyaW5nLFxuICAgIGdldEN1cnJlbnRUaW1lLFxuICAgIGdldFJhbmRvbUludCxcbiAgICByYW5kb21HcmVldGluZ1xufTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTGluayBmcm9tICdAbXVpL21hdGVyaWFsL0xpbmsnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5JztcbmltcG9ydCBUaXRsZSBmcm9tICcuL1RpdGxlJztcbmltcG9ydCAnLi4vLi4vY3NzL3BsYXRmb3JtLW9wdGlvbnMuY3NzJztcbmltcG9ydCBGdW5jdGlvblV0aWwgZnJvbSBcIi4uL3V0aWxzL0Z1bmN0aW9uVXRpbFwiO1xuXG5jb25zdCBpbWFnZXMgPSBbJy9pbWFnZXMveW91dHViZS5wbmcnLCAnL2ltYWdlcy92a29udGFrdGUucG5nJywgJy9pbWFnZXMvdHdpdHRlci5wbmcnXTtcbmNvbnN0IFlPVVRVQkUgPSAneW91dHViZSc7XG5jb25zdCBUV0lUVEVSID0gJ3R3aXR0ZXInO1xuY29uc3QgVktPTlRBS1RFID0gJ3Zrb250YWt0ZSc7XG5jb25zdCBQTEFURk9STV9BTkFMWVNJU19UUkFDS0VSX1BST1BFUlRZID0gJ3BsYXRmb3JtQW5hbHlzaXNUcmFja2VyJztcblxuZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG4vKipcbiAqIEdldHMgVXNlcnMgbW9zdCBhbmFseXplZCBwbGF0Zm9ybS4gVXNpbmcgdGhlIFBsYXRmb3JtQW5hbHlzaXNUcmFja2VyIG9iamVjdC5cbiAqIFZhbHVlcyBhcmUgZmVlZCB0byBhbiBpdGVyYXRlZCBtYXAgdGhhdCByZXR1cm5zIHRoZSBwbGF0Zm9ybSB3aXRoIHRoZSBncmVhdGVzdFxuICogaW50ZWdlciB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gcGxhdGZvcm1BbmFseXNpc1RyYWNrZXIgdGhlIFBsYXRmb3JtQW5hbHlzaXNUcmFja2VyIHByb3BlcnR5IGZyb20gVXNlckRldGFpbHNcbiAqIEByZXR1cm4gU3RyaW5nIGltYWdlIHBhdGggdG8gbW9zdCBhbmFseXplZCBwbGF0Zm9ybVxuICovXG5mdW5jdGlvbiBnZXRNb3N0QW5hbHl6ZWRQbGF0Zm9ybUltYWdlKHBsYXRmb3JtQW5hbHlzaXNUcmFja2VyKSB7XG4gICAgbGV0IG1heFBsYXRmb3JtO1xuICAgIGlmIChwbGF0Zm9ybUFuYWx5c2lzVHJhY2tlciAhPT0gbnVsbCAmJiBwbGF0Zm9ybUFuYWx5c2lzVHJhY2tlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCBtYXhWYWx1ZSA9IDA7XG4gICAgICAgIGxldCBwbGF0Zm9ybU1hcCA9IG5ldyBNYXAoW1xuICAgICAgICAgICAgW1lPVVRVQkUsIHBsYXRmb3JtQW5hbHlzaXNUcmFja2VyW1lPVVRVQkVdXSxcbiAgICAgICAgICAgIFtUV0lUVEVSLCBwbGF0Zm9ybUFuYWx5c2lzVHJhY2tlcltUV0lUVEVSXV0sXG4gICAgICAgICAgICBbVktPTlRBS1RFLCBwbGF0Zm9ybUFuYWx5c2lzVHJhY2tlcltWS09OVEFLVEVdXVxuICAgICAgICBdKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHR3byBrZXlzIGhhdmUgdGhlIHNhbWUgdmFsdWUsIHRoaXMgcHJvY2VzcyBrZWVwcyB0aGUgZmlyc3RcbiAgICAgICAgICogZ3JlYXRlc3QgdmFsdWUgdW50aWwgYSB2YWx1ZSBncmVhdGVyIGlzIHNlZW4uXG4gICAgICAgICAqL1xuICAgICAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgcGxhdGZvcm1NYXApIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IG1heFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgbWF4VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBtYXhQbGF0Zm9ybSA9IGtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4UGxhdGZvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEltYWdlUGF0aChtYXhQbGF0Zm9ybSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gZGVmYXVsdCBpbWFnZVxuICAgIHJldHVybiBpbWFnZXNbMF07XG59XG5cbi8qKlxuICogR2V0cyBJbWFnZSBwYXRoIGZyb20gY29uc3RhbnQgbGlzdCBvZiBpbWFnZXMgaWYgdGhlIGltYWdlIHBhdGggY29udGFpbnNcbiAqIHRoZSBwbGF0Zm9ybSBzaWduYXR1cmUuXG4gKlxuICogQHBhcmFtIHBsYXRmb3JtIG5hbWUgb2YgcGxhdGZvcm0gc2lnbmF0dXJlIC0gaS5lLiB5b3V0dWJlXG4gKiBAcmV0dXJuIFN0cmluZyBpbWFnZSBwYXRoXG4gKi9cbmZ1bmN0aW9uIGdldEltYWdlUGF0aChwbGF0Zm9ybSkge1xuICAgIGxldCByZXN1bHRQYXRoO1xuICAgIGltYWdlcy5mb3JFYWNoKChpbWFnZVBhdGgpID0+IHtcbiAgICAgICAgaWYgKGltYWdlUGF0aC5pbmNsdWRlcyhwbGF0Zm9ybSkpIHtcbiAgICAgICAgICAgIHJlc3VsdFBhdGggPSBpbWFnZVBhdGg7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0UGF0aDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTW9zdEFuYWx5emVkUGxhdGZvcm0oe3VzZXJEZXRhaWxzfSkge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgIDxUaXRsZT5Zb3VyIEZhdm9yaXRlIFBsYXRmb3JtPC9UaXRsZT5cbiAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPSdwbGF0Zm9ybUltYWdlJ1xuICAgICAgICAgICAgICAgICBzcmM9e2dldE1vc3RBbmFseXplZFBsYXRmb3JtSW1hZ2UodXNlckRldGFpbHNbUExBVEZPUk1fQU5BTFlTSVNfVFJBQ0tFUl9QUk9QRVJUWV0pfVxuICAgICAgICAgICAgICAgICBhbHQ9J3BsYXRmb3JtLWltYWdlJy8+XG4gICAgICAgICAgICA8VHlwb2dyYXBoeSBjb2xvcj1cInRleHQuc2Vjb25kYXJ5XCIgc3g9e3sgZmxleDogMSB9fT5cbiAgICAgICAgICAgICAgICB7RnVuY3Rpb25VdGlsLmdldEN1cnJlbnREYXRlKCl9XG4gICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxMaW5rIGNvbG9yPVwicHJpbWFyeVwiIGhyZWY9XCIjXCIgb25DbGljaz17cHJldmVudERlZmF1bHR9PlxuICAgICAgICAgICAgICAgICAgICBWaWV3IHBhc3QgcmVzdWx0c1xuICAgICAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTGluayBmcm9tICdAbXVpL21hdGVyaWFsL0xpbmsnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5JztcbmltcG9ydCBUaXRsZSBmcm9tICcuL1RpdGxlJztcblxuZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50RGF0ZSgpIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBsZXQgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG4gICAgbGV0IG1vbnRoID0gZ2V0TW9udGhTdHJpbmcoZGF0ZS5nZXRNb250aCgpKTtcbiAgICBsZXQgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICByZXR1cm4gYGFzIG9mICR7ZGF5fSAke21vbnRofSwgJHt5ZWFyfWA7XG59XG5cbmZ1bmN0aW9uIGdldE1vbnRoU3RyaW5nKG1vbnRoSW50KSB7XG4gICAgc3dpdGNoIChtb250aEludCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gJ0phbnVhcnknO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gJ0ZlYnJ1YXJ5JztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuICdNYXJjaCc7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiAnQXByaWwnO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICByZXR1cm4gJ01heSc7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIHJldHVybiAnSnVuZSc7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHJldHVybiAnSnVseSc7XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIHJldHVybiAnQXVndXN0JztcbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmV0dXJuICdTZXB0ZW1iZXInO1xuICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICByZXR1cm4gJ09jdG9iZXInO1xuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgcmV0dXJuICdOb3ZlbWJlcic7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJ0RlY2VtYmVyJztcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERlcG9zaXRzKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgIDxUaXRsZT5SZWNlbnQgUGxhdGZvcm0gUnVuczwvVGl0bGU+XG4gICAgICAgICAgICA8VHlwb2dyYXBoeSBjb21wb25lbnQ9XCJwXCIgdmFyaWFudD1cImg0XCI+XG4gICAgICAgICAgICAgICAgLS0tLS0tLS1cbiAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGNvbG9yPVwidGV4dC5zZWNvbmRhcnlcIiBzeD17eyBmbGV4OiAxIH19PlxuICAgICAgICAgICAgICAgIGFzIG9mIHtnZXRDdXJyZW50RGF0ZSgpfVxuICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8TGluayBjb2xvcj1cInByaW1hcnlcIiBocmVmPVwiI1wiIG9uQ2xpY2s9e3ByZXZlbnREZWZhdWx0fT5cbiAgICAgICAgICAgICAgICAgICAgVmlldyBNb3JlXG4gICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbn1cbiIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FyZEFjdGlvbnNVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNhcmRBY3Rpb25zJywgc2xvdCk7XG59XG5jb25zdCBjYXJkQWN0aW9uc0NsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlDYXJkQWN0aW9ucycsIFsncm9vdCcsICdzcGFjaW5nJ10pO1xuZXhwb3J0IGRlZmF1bHQgY2FyZEFjdGlvbnNDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImRpc2FibGVTcGFjaW5nXCIsIFwiY2xhc3NOYW1lXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB7IGdldENhcmRBY3Rpb25zVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9jYXJkQWN0aW9uc0NsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVTcGFjaW5nXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCAhZGlzYWJsZVNwYWNpbmcgJiYgJ3NwYWNpbmcnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENhcmRBY3Rpb25zVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBDYXJkQWN0aW9uc1Jvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNhcmRBY3Rpb25zJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsICFvd25lclN0YXRlLmRpc2FibGVTcGFjaW5nICYmIHN0eWxlcy5zcGFjaW5nXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBwYWRkaW5nOiA4XG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlU3BhY2luZyAmJiB7XG4gICcmID4gOm5vdChzdHlsZSkgfiA6bm90KHN0eWxlKSc6IHtcbiAgICBtYXJnaW5MZWZ0OiA4XG4gIH1cbn0pKTtcbmNvbnN0IENhcmRBY3Rpb25zID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZEFjdGlvbnMoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUNhcmRBY3Rpb25zJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgZGlzYWJsZVNwYWNpbmcgPSBmYWxzZSxcbiAgICAgIGNsYXNzTmFtZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGlzYWJsZVNwYWNpbmdcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENhcmRBY3Rpb25zUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkQWN0aW9ucy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGFjdGlvbnMgZG8gbm90IGhhdmUgYWRkaXRpb25hbCBtYXJnaW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU3BhY2luZzogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDYXJkQWN0aW9uczsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhcmRDb250ZW50VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlDYXJkQ29udGVudCcsIHNsb3QpO1xufVxuY29uc3QgY2FyZENvbnRlbnRDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2FyZENvbnRlbnQnLCBbJ3Jvb3QnXSk7XG5leHBvcnQgZGVmYXVsdCBjYXJkQ29udGVudENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB7IGdldENhcmRDb250ZW50VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9jYXJkQ29udGVudENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENhcmRDb250ZW50VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBDYXJkQ29udGVudFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNhcmRDb250ZW50JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KSgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgcGFkZGluZzogMTYsXG4gICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgIHBhZGRpbmdCb3R0b206IDI0XG4gICAgfVxuICB9O1xufSk7XG5jb25zdCBDYXJkQ29udGVudCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENhcmRDb250ZW50KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDYXJkQ29udGVudCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENhcmRDb250ZW50Um9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENhcmRDb250ZW50LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDYXJkQ29udGVudDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ2FyZCBmcm9tICdAbXVpL21hdGVyaWFsL0NhcmQnO1xuaW1wb3J0IENhcmRBY3Rpb25zIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQ2FyZEFjdGlvbnMnO1xuaW1wb3J0IENhcmRDb250ZW50IGZyb20gJ0BtdWkvbWF0ZXJpYWwvQ2FyZENvbnRlbnQnO1xuaW1wb3J0IENhcmRNZWRpYSBmcm9tICdAbXVpL21hdGVyaWFsL0NhcmRNZWRpYSc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQnV0dG9uJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtdWkvbWF0ZXJpYWwvVHlwb2dyYXBoeSc7XG5pbXBvcnQgU3RyaW5nVXRpbCBmcm9tIFwiLi4vdXRpbHMvU3RyaW5nVXRpbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBXaG9pc0NhcmQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPENhcmQgc3g9e3sgd2lkdGg6ICc2MCUnLCBtYXJnaW5Ub3A6ICcyJScsIG1hcmdpbkxlZnQ6ICdhdXRvJywgbWFyZ2luUmlnaHQ6ICdhdXRvJ319PlxuICAgICAgICAgICAgPENhcmRNZWRpYVxuICAgICAgICAgICAgICAgIHN4PXt7IGhlaWdodDogMTQwIH19XG4gICAgICAgICAgICAgICAgaW1hZ2U9XCIvaW1hZ2VzL3dob2lzLnBuZ1wiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJ3aG9pc1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPENhcmRDb250ZW50PlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGd1dHRlckJvdHRvbSB2YXJpYW50PVwiaDVcIiBjb21wb25lbnQ9XCJkaXZcIj5cbiAgICAgICAgICAgICAgICAgICAgV2hvaXNcbiAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImJvZHkyXCIgY29sb3I9XCJ0ZXh0LnNlY29uZGFyeVwiPntTdHJpbmdVdGlsLndob2lzSW5mb308L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgICAgICAgPENhcmRBY3Rpb25zPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gdGFyZ2V0PSdfYmxhbmsnIGhyZWY9XCJodHRwczovL2xvb2t1cC5pY2Fubi5vcmcvZW5cIiBzaXplPVwic21hbGxcIj5MZWFybiBNb3JlPC9CdXR0b24+XG4gICAgICAgICAgICA8L0NhcmRBY3Rpb25zPlxuICAgICAgICA8L0NhcmQ+XG4gICAgKTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvVHlwb2dyYXBoeVwiO1xuaW1wb3J0IEdyaWQgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvR3JpZFwiO1xuaW1wb3J0IFBhcGVyIGZyb20gXCJAbXVpL21hdGVyaWFsL1BhcGVyXCI7XG5pbXBvcnQgSW5wdXRCYXNlIGZyb20gJ0BtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlJztcbmltcG9ydCBEaXZpZGVyIGZyb20gJ0BtdWkvbWF0ZXJpYWwvRGl2aWRlcic7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICdAbXVpL21hdGVyaWFsL0ljb25CdXR0b24nO1xuaW1wb3J0IFNlYXJjaEljb24gZnJvbSAnQG11aS9pY29ucy1tYXRlcmlhbC9TZWFyY2gnO1xuaW1wb3J0IE9wZW5JbkJyb3dzZXJJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvT3BlbkluQnJvd3Nlcic7XG5pbXBvcnQgQm94IGZyb20gJ0BtdWkvbWF0ZXJpYWwvQm94JztcbmltcG9ydCBTdGFjayBmcm9tICdAbXVpL21hdGVyaWFsL1N0YWNrJztcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwvc3R5bGVzJztcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7dXNlRWZmZWN0fSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBXaG9pc0NhcmQgZnJvbSBcIi4vV2hvaXNDYXJkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFdob2lzKCkge1xuICAgIGNvbnN0IFt3aG9pcywgc2V0V2hvaXNdID0gUmVhY3QudXNlU3RhdGUoe30pO1xuXG4gICAgY29uc3QgSXRlbSA9IHN0eWxlZChQYXBlcikoKHsgdGhlbWUgfSkgPT4gKHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdkYXJrJyA/ICcjMUEyMDI3JyA6ICcjZDhlY2YzJyxcbiAgICAgICAgLi4udGhlbWUudHlwb2dyYXBoeS5ib2R5MixcbiAgICAgICAgcGFkZGluZzogdGhlbWUuc3BhY2luZyg1KSxcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICBwYWxldHRlOntcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHtcbiAgICAgICAgICAgICAgICB0ZXJ0aWFyeTogJyNkOGVjZjMnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICAgIHByaW1hcnk6ICcjZmZmJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSkpO1xuXG4gICAgZnVuY3Rpb24gZ2V0QXhpb3NDb25maWd1cmF0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGltZW91dDogNjAwMCxcbiAgICAgICAgICAgIHNpZ25hbDogQWJvcnRTaWduYWwudGltZW91dCg2MDAwKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHdob2lzKTtcbiAgICB9LCBbd2hvaXNdKTtcblxuICAgIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVdob2lzRG9tYWluU2VhcmNoKHF1ZXJ5KSB7XG4gICAgICAgIGF3YWl0IGF4aW9zLmdldChgL29wZW5zcXVhcmUvYXBpL2Zvb3RwcmludHMvd2hvaXM/ZG9tYWluPSR7cXVlcnl9YCwgZ2V0QXhpb3NDb25maWd1cmF0aW9uKCkpXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRXaG9pcyhyZXNwb25zZS5kYXRhKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlU2VhcmNoKGUpe1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCBxdWVyeUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2hvaXNTZWFyY2gnKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gcXVlcnlFbGVtZW50LnZhbHVlLnRyaW0oKTtcbiAgICAgICAgaWYgKHF1ZXJ5ICE9PSBudWxsICYmIHF1ZXJ5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHF1ZXJ5RWxlbWVudC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgYXdhaXQgaGFuZGxlV2hvaXNEb21haW5TZWFyY2gocXVlcnkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlQnJvd3Nlck9wZW5lcihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgd2luZG93Lm9wZW4oJ2h0dHBzOi8vZ29vZ2xlLmNvbScsICdfYmxhbmsnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREb21haW5TdGF0dXMoZG9tYWluU3RhdHVzKSB7XG4gICAgICAgIHJldHVybiBkb21haW5TdGF0dXMuc3BsaXQoJyAnKVswXS50cmltKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RG9tYWluU3RhdHVzVXJsKGRvbWFpblN0YXR1cykge1xuICAgICAgICBsZXQgdXJsID0gZG9tYWluU3RhdHVzLnNwbGl0KCcgJylbMV07XG4gICAgICAgIHJldHVybiB1cmwuc3Vic3RyaW5nKDEsIHVybC5sZW5ndGggLSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgPEdyaWQgaXRlbSB4cz17MTJ9IGp1c3RpZnlDb250ZW50PSdjZW50ZXInIGFsaWduSXRlbXM9J2NlbnRlcic+XG4gICAgICAgICAgICAgICAgPFdob2lzQ2FyZCAvPlxuICAgICAgICAgICAgICAgIDxQYXBlclxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJmb3JtXCJcbiAgICAgICAgICAgICAgICAgICAgc3g9e3sgcDogJzJweCA0cHgnLCBkaXNwbGF5OiAnZmxleCcsIHdpZHRoOiAnOTUlJywgbWFyZ2luTGVmdDogJzIuNSUnLCBtYXJnaW5Ub3A6ICc1JScsIGJhY2tncm91bmRDb2xvcjogJ3RlcnRpYXJ5JyB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0QmFzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3g9e3sgbWw6IDEsIGZsZXg6IDEgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgRG9tYWluIGFkZHJlc3NcIlxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9eyd3aG9pc1NlYXJjaCd9XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFByb3BzPXt7ICdhcmlhLWxhYmVsJzogJ3dob2lzIGxvb2t1cCBzZWFyY2gnIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uIG9uQ2xpY2s9e2UgPT4gaGFuZGxlU2VhcmNoKGUpfSB0eXBlPVwic3VibWl0XCIgc3g9e3sgcDogJzEwcHgnIH19IGFyaWEtbGFiZWw9XCJzZWFyY2hcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWFyY2hJY29uIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPERpdmlkZXIgc3g9e3sgaGVpZ2h0OiAyOCwgbTogMC41IH19IG9yaWVudGF0aW9uPVwidmVydGljYWxcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVCcm93c2VyT3BlbmVyfSBjb2xvcj1cInByaW1hcnlcIiBzeD17eyBwOiAnMTBweCcgfX0gYXJpYS1sYWJlbD1cImRpcmVjdGlvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxPcGVuSW5Ccm93c2VySWNvbiAvPlxuICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgICAgICAgICAgPC9QYXBlcj5cbiAgICAgICAgICAgICAgICA8Qm94IHN4PXt7IGZsZXhHcm93OiAxLCBvdmVyZmxvdzogJ2hpZGRlbicsIHB4OiAzIH19PlxuICAgICAgICAgICAgICAgICAgICB7d2hvaXNbJ2RvbWFpbk5hbWUnXSAhPT0gdW5kZWZpbmVkICYmIDxJdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICBzeD17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG15OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG14OiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdGFjayBzcGFjaW5nPXsyfSBkaXJlY3Rpb249XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBzeD17eyBmb250OiAncHJpbWFyeScsIGZvbnRTaXplOiAnMjBweCcgfX0gbm9XcmFwPjxiPkRvbWFpbiBJbmZvcm1hdGlvbjwvYj48L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0YWNrPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0YWNrIHNwYWNpbmc9ezF9IGRpcmVjdGlvbj1cImNvbHVtblwiIG1hcmdpblRvcD1cIjMlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IG5vV3JhcD48Yj5OYW1lOiA8L2I+IHt3aG9pc1snZG9tYWluTmFtZSddfTwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgbm9XcmFwPjxiPlJlZ2lzdHJ5IERvbWFpbiBJRDogPC9iPiB7d2hvaXNbJ3JlZ2lzdHJ5RG9tYWluSWQnXX08L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IG5vV3JhcD48Yj5Eb21haW4gU3RhdHVzOiA8L2I+PGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9e2dldERvbWFpblN0YXR1c1VybCh3aG9pc1snZG9tYWluU3RhdHVzJ10pfT57Z2V0RG9tYWluU3RhdHVzKHdob2lzWydkb21haW5TdGF0dXMnXSl9PC9hPjwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgbm9XcmFwPjxiPk5hbWVTZXJ2ZXJzOiA8L2I+PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBub1dyYXA+e3dob2lzWyduYW1lU2VydmVyJ119PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBub1dyYXA+PGI+Q3JlYXRlZDogPC9iPnt3aG9pc1snY3JlYXRpb25EYXRlJ119PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBub1dyYXA+PGI+VXBkYXRlZDogPC9iPnt3aG9pc1sndXBkYXRlZERhdGUnXX08L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0YWNrPlxuICAgICAgICAgICAgICAgICAgICA8L0l0ZW0+IH1cbiAgICAgICAgICAgICAgICAgICAge3dob2lzWydhZG1pbkNpdHknXSAhPT0gdW5kZWZpbmVkICYmIDxJdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICBzeD17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG15OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG14OiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdGFjayBzcGFjaW5nPXsyfSBkaXJlY3Rpb249XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBzeD17eyBmb250OiAncHJpbWFyeScsIGZvbnRTaXplOiAnMjBweCcgfX0gIG5vV3JhcD48Yj5Db250YWN0IEluZm9ybWF0aW9uPC9iPjwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvU3RhY2s+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3RhY2sgc3BhY2luZz17MX0gZGlyZWN0aW9uPVwiY29sdW1uXCIgbWFyZ2luVG9wPVwiMyVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHk+PGI+Q2l0eTogPC9iPiB7d2hvaXNbJ2FkbWluQ2l0eSddfTwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHk+PGI+Q291bnRyeTogPC9iPiB7d2hvaXNbJ2FkbWluQ291bnRyeSddfTwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHk+PGI+RW1haWw6IDwvYj4ge3dob2lzWydhZG1pbkVtYWlsJ119PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeT48Yj5GYXg6IDwvYj4ge3dob2lzWydhZG1pbkZheCddfTwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHk+PGI+TmFtZTogPC9iPnt3aG9pc1snYWRtaW5OYW1lJ119PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeT48Yj5Pcmdhbml6YXRpb246IDwvYj57d2hvaXNbJ2FkbWluT3JnYW5pemF0aW9uJ119PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeT48Yj5QaG9uZTogPC9iPnt3aG9pc1snYWRtaW5QaG9uZSddfTwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHk+PGI+UG9zdGFsIENvZGU6IDwvYj4ge3dob2lzWydhZG1pblBvc3RhbENvZGUnXX08L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5PjxiPlN0cmVldDogPC9iPiB7d2hvaXNbJ2FkbWluU3RyZWV0J119PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdGFjaz5cbiAgICAgICAgICAgICAgICAgICAgPC9JdGVtPiB9XG4gICAgICAgICAgICAgICAgICAgIHsgd2hvaXNbJ3JlZ2lzdHJhciddICE9PSB1bmRlZmluZWQgJiYgPEl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN4PXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXg6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0YWNrIHNwYWNpbmc9ezJ9IGRpcmVjdGlvbj1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHN4PXt7IGZvbnQ6ICdwcmltYXJ5JywgZm9udFNpemU6ICcyMHB4JyB9fSAgbm9XcmFwPjxiPlJlZ2lzdHJhciBJbmZvcm1hdGlvbjwvYj48L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0YWNrPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0YWNrIHNwYWNpbmc9ezF9IGRpcmVjdGlvbj1cImNvbHVtblwiIG1hcmdpblRvcD1cIjMlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5PjxiPlJlZ2lzdHJhciBOYW1lOiA8L2I+IHt3aG9pc1sncmVnaXN0cmFyJ119PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeT48Yj5BYnVzZSBjb250YWN0IGVtYWlsOiA8L2I+IHt3aG9pc1sncmVnaXN0cmFyQWJ1c2VDb250YWN0RW1haWwnXX08L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5PjxiPkFidXNlIGNvbnRhY3QgcGhvbmU6IDwvYj57d2hvaXNbJ3JlZ2lzdHJhckFidXNlQ29udGFjdFBob25lJ119PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeT48Yj5JQU5BIElEOiA8L2I+e3dob2lzWydyZWdpc3RyYXJJYW5hSWQnXX08L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5PjxiPlJlZ2lzdHJhdGlvbiBleHBpcmF0aW9uIGRhdGU6IDwvYj57d2hvaXNbJ3JlZ2lzdHJhclJlZ2lzdHJhdGlvbkV4cGlyYXRpb25EYXRlJ119PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeT48Yj5SZWdpc3RyYXIgVVJMOiA8L2I+IDxhIHRhcmdldD0nX2JsYW5rJyBocmVmPXt3aG9pc1sncmVnaXN0cmFyVXJsJ119Pnt3aG9pc1sncmVnaXN0cmFyVXJsJ119PC9hPjwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHk+PGI+UmVnaXN0cmFyIFdob2lzIFNlcnZlcjogPC9iPiB7d2hvaXNbJ3JlZ2lzdHJhcldob2lzU2VydmVyJ119PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdGFjaz5cbiAgICAgICAgICAgICAgICAgICAgPC9JdGVtPiB9XG4gICAgICAgICAgICAgICAgICAgIHsgd2hvaXNbJ2Ruc3NlYyddICE9PSB1bmRlZmluZWQgJiYgPEl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN4PXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXg6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0YWNrIHNwYWNpbmc9ezJ9IGRpcmVjdGlvbj1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHN4PXt7IGZvbnQ6ICdwcmltYXJ5JywgZm9udFNpemU6ICcyMHB4JyB9fSAgbm9XcmFwPjxiPkROU1NFQyBJbmZvcm1hdGlvbjwvYj48L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0YWNrPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0YWNrIHNwYWNpbmc9ezF9IGRpcmVjdGlvbj1cImNvbHVtblwiIG1hcmdpblRvcD1cIjMlXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHk+PGI+RGVsZWdhdGlvbiBTaWduZWQ6IDwvYj4ge3dob2lzWydkbnNzZWMnXX08L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0YWNrPlxuICAgICAgICAgICAgICAgICAgICA8L0l0ZW0+IH1cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENhcmQgZnJvbSAnQG11aS9tYXRlcmlhbC9DYXJkJztcbmltcG9ydCBDYXJkQWN0aW9ucyBmcm9tICdAbXVpL21hdGVyaWFsL0NhcmRBY3Rpb25zJztcbmltcG9ydCBDYXJkQ29udGVudCBmcm9tICdAbXVpL21hdGVyaWFsL0NhcmRDb250ZW50JztcbmltcG9ydCBDYXJkTWVkaWEgZnJvbSAnQG11aS9tYXRlcmlhbC9DYXJkTWVkaWEnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdAbXVpL21hdGVyaWFsL0J1dHRvbic7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICdAbXVpL21hdGVyaWFsL1R5cG9ncmFwaHknO1xuaW1wb3J0IFN0cmluZ1V0aWwgZnJvbSBcIi4uL3V0aWxzL1N0cmluZ1V0aWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTnNsb29rdXBDYXJkKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxDYXJkIHN4PXt7IHdpZHRoOiAnNjAlJywgbWFyZ2luVG9wOiAnMiUnLCBtYXJnaW5MZWZ0OiAnYXV0bycsIG1hcmdpblJpZ2h0OiAnYXV0byd9fT5cbiAgICAgICAgICAgIDxDYXJkTWVkaWFcbiAgICAgICAgICAgICAgICBzeD17eyBoZWlnaHQ6IDE0MCB9fVxuICAgICAgICAgICAgICAgIGltYWdlPVwiL2ltYWdlcy9uc2xvb2t1cC5wbmdcIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwibnNsb29rdXBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxDYXJkQ29udGVudD5cbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSBndXR0ZXJCb3R0b20gdmFyaWFudD1cImg1XCIgY29tcG9uZW50PVwiZGl2XCI+XG4gICAgICAgICAgICAgICAgICAgIE5TTG9va3VwXG4gICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dC5zZWNvbmRhcnlcIj57U3RyaW5nVXRpbC5uc2xvb2t1cEluZm99PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgICAgIDxDYXJkQWN0aW9ucz5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHRhcmdldD0nX2JsYW5rJyBocmVmPVwiaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vY2QvRTg4MzUzXzAxL2h0bWwvRTM3ODM5L25zbG9va3VwLTEuaHRtbFwiIHNpemU9XCJzbWFsbFwiPkxlYXJuIE1vcmU8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvQ2FyZEFjdGlvbnM+XG4gICAgICAgIDwvQ2FyZD5cbiAgICApO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgR3JpZCBmcm9tIFwiQG11aS9tYXRlcmlhbC9HcmlkXCI7XG5pbXBvcnQgUGFwZXIgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvUGFwZXJcIjtcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnQG11aS9tYXRlcmlhbC9JbnB1dEJhc2UnO1xuaW1wb3J0IERpdmlkZXIgZnJvbSAnQG11aS9tYXRlcmlhbC9EaXZpZGVyJztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvSWNvbkJ1dHRvbic7XG5pbXBvcnQgU2VhcmNoSWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL1NlYXJjaCc7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tICdAbXVpL21hdGVyaWFsL3N0eWxlcyc7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQge3VzZUVmZmVjdH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgTnNsb29rdXBDYXJkIGZyb20gXCIuL05zbG9va3VwQ2FyZFwiO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvVHlwb2dyYXBoeVwiO1xuaW1wb3J0IEJveCBmcm9tIFwiQG11aS9tYXRlcmlhbC9Cb3hcIjtcbmltcG9ydCBTdGFjayBmcm9tIFwiQG11aS9tYXRlcmlhbC9TdGFja1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOc2xvb2t1cCgpIHtcbiAgICBjb25zdCBbbnNsb29rdXAsIHNldE5zbG9va3VwXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblxuICAgIGNvbnN0IEl0ZW0gPSBzdHlsZWQoUGFwZXIpKCh7IHRoZW1lIH0pID0+ICh7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnZGFyaycgPyAnIzFBMjAyNycgOiAnI2Q4ZWNmMycsXG4gICAgICAgIC4uLnRoZW1lLnR5cG9ncmFwaHkuYm9keTIsXG4gICAgICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoNSksXG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgcGFsZXR0ZTp7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB7XG4gICAgICAgICAgICAgICAgdGVydGlhcnk6ICcjZDhlY2YzJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgICBwcmltYXJ5OiAnI2ZmZidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pKTtcblxuICAgIGZ1bmN0aW9uIGdldEF4aW9zQ29uZmlndXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpbWVvdXQ6IDMwMDAsXG4gICAgICAgICAgICBzaWduYWw6IEFib3J0U2lnbmFsLnRpbWVvdXQoNjAwMClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhuc2xvb2t1cCk7XG4gICAgfSwgW25zbG9va3VwXSk7XG5cbiAgICBhc3luYyBmdW5jdGlvbiBoYW5kbGVOc2xvb2t1cFNlYXJjaChxdWVyeSkge1xuICAgICAgICBhd2FpdCBheGlvcy5nZXQoYC9vcGVuc3F1YXJlL2FwaS9mb290cHJpbnRzL25zbG9va3VwP2RvbWFpbj0ke3F1ZXJ5fWAsIGdldEF4aW9zQ29uZmlndXJhdGlvbigpKVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0TnNsb29rdXAocmVzcG9uc2UuZGF0YSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgICAgICAgICB9KVxuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVNlYXJjaChlKXtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsZXQgcXVlcnlFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25zbG9va3VwU2VhcmNoJyk7XG4gICAgICAgIGxldCBxdWVyeSA9IHF1ZXJ5RWxlbWVudC52YWx1ZS50cmltKCk7XG4gICAgICAgIGlmIChxdWVyeSAhPT0gbnVsbCAmJiBxdWVyeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBxdWVyeUVsZW1lbnQudmFsdWUgPSAnJztcbiAgICAgICAgICAgIGF3YWl0IGhhbmRsZU5zbG9va3VwU2VhcmNoKHF1ZXJ5KTtcblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgPEdyaWQgaXRlbSB4cz17MTJ9IGp1c3RpZnlDb250ZW50PSdjZW50ZXInIGFsaWduSXRlbXM9J2NlbnRlcic+XG4gICAgICAgICAgICAgICAgPE5zbG9va3VwQ2FyZCAvPlxuICAgICAgICAgICAgICAgIDxQYXBlclxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJmb3JtXCJcbiAgICAgICAgICAgICAgICAgICAgc3g9e3sgcDogJzJweCA0cHgnLCBkaXNwbGF5OiAnZmxleCcsIHdpZHRoOiAnOTUlJywgbWFyZ2luTGVmdDogJzIuNSUnLCBtYXJnaW5Ub3A6ICc1JScsIGJhY2tncm91bmRDb2xvcjogJ3RlcnRpYXJ5JyB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0QmFzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3g9e3sgbWw6IDEsIGZsZXg6IDEgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgRG9tYWluXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPXsnbnNsb29rdXBTZWFyY2gnfVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRQcm9wcz17eyAnYXJpYS1sYWJlbCc6ICduc2xvb2t1cCBsb29rdXAgc2VhcmNoJyB9fVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvbiBvbkNsaWNrPXtlID0+IGhhbmRsZVNlYXJjaChlKX0gdHlwZT1cInN1Ym1pdFwiIHN4PXt7IHA6ICcxMHB4JyB9fSBhcmlhLWxhYmVsPVwic2VhcmNoXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VhcmNoSWNvbiAvPlxuICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxEaXZpZGVyIHN4PXt7IGhlaWdodDogMjgsIG06IDAuNSB9fSBvcmllbnRhdGlvbj1cInZlcnRpY2FsXCIgLz5cbiAgICAgICAgICAgICAgICA8L1BhcGVyPlxuICAgICAgICAgICAgICAgIHsgbnNsb29rdXAubnNMb29rdXBGb290UHJpbnRMaXN0ICE9PSB1bmRlZmluZWQgJiYgPEJveCBzeD17eyBmbGV4R3JvdzogMSwgb3ZlcmZsb3c6ICdoaWRkZW4nLCBweDogMyB9fT5cbiAgICAgICAgICAgICAgICAgICAgeyBuc2xvb2t1cC5uc0xvb2t1cEZvb3RQcmludExpc3QubWFwKG5zbG9va3VwSXRlbSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxJdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICBzeD17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG15OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG14OiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDogMixcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdGFjayBzcGFjaW5nPXsxfSBkaXJlY3Rpb249XCJjb2x1bW5cIiBtYXJnaW5Ub3A9XCIzJVwiPjxUeXBvZ3JhcGh5PjxiPk5hbWU6IDwvYj57bnNsb29rdXBJdGVtLm5hbWV9PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5PjxiPkFkZHJlc3M6IDwvYj57bnNsb29rdXBJdGVtLmFkZHJlc3N9PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdGFjaz5cbiAgICAgICAgICAgICAgICAgICAgPC9JdGVtPiApKX1cbiAgICAgICAgICAgICAgICA8L0JveD4gfVxuICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ2FyZCBmcm9tICdAbXVpL21hdGVyaWFsL0NhcmQnO1xuaW1wb3J0IENhcmRBY3Rpb25zIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQ2FyZEFjdGlvbnMnO1xuaW1wb3J0IENhcmRDb250ZW50IGZyb20gJ0BtdWkvbWF0ZXJpYWwvQ2FyZENvbnRlbnQnO1xuaW1wb3J0IENhcmRNZWRpYSBmcm9tICdAbXVpL21hdGVyaWFsL0NhcmRNZWRpYSc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQnV0dG9uJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtdWkvbWF0ZXJpYWwvVHlwb2dyYXBoeSc7XG5pbXBvcnQgU3RyaW5nVXRpbCBmcm9tIFwiLi4vdXRpbHMvU3RyaW5nVXRpbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCYWNrTGlua0luZm9DYXJkKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxDYXJkIHN4PXt7IHdpZHRoOiAnNjAlJywgbWFyZ2luVG9wOiAnMiUnLCBtYXJnaW5MZWZ0OiAnYXV0bycsIG1hcmdpblJpZ2h0OiAnYXV0byd9fT5cbiAgICAgICAgICAgIDxDYXJkTWVkaWFcbiAgICAgICAgICAgICAgICBzeD17eyBoZWlnaHQ6IDE0MCB9fVxuICAgICAgICAgICAgICAgIGltYWdlPVwiL2ltYWdlcy9iYWNrbGluay1jaGFpbi5wbmdcIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwiYmFja2xpbmtzXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Q2FyZENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgZ3V0dGVyQm90dG9tIHZhcmlhbnQ9XCJoNVwiIGNvbXBvbmVudD1cImRpdlwiPlxuICAgICAgICAgICAgICAgICAgICBCYWNrbGluayBDaGFpblxuICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiYm9keTJcIiBjb2xvcj1cInRleHQuc2Vjb25kYXJ5XCI+XG4gICAgICAgICAgICAgICAgICAgIHtTdHJpbmdVdGlsLmJhY2tsaW5rSW5mb31cbiAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9XCJodHRwczovL3N1cHBvcnQuZ29vZ2xlLmNvbS93ZWJtYXN0ZXJzL2Fuc3dlci85MDQ5NjA2P2hsPWVuXCI+R29vZ2xlJ3M8L2E+IHBvd2VyZnVsIGluZGV4aW5nIGNhcGFiaWxpdGllcyB0byBwcm92aWRlIHRoaXMgc2VydmljZS5cbiAgICAgICAgICAgICAgICAgICAgPGJyPjwvYnI+XG4gICAgICAgICAgICAgICAgICAgIDxicj48L2JyPlxuICAgICAgICAgICAgICAgICAgICA8Yj5UaXBzIGZvciBJbnF1aXJ5OjwvYj48YnI+PC9icj5cbiAgICAgICAgICAgICAgICAgICAgPGI+MS48L2I+PGk+V2hhdCBzaXRlcyBhcmUgYmVpbmcgYmFjay1saW5rZWQgZnJvbSBkaXNwb3NhYmxlIGVtYWlsIGRvbWFpbnM/PC9pPjxicj48L2JyPlxuICAgICAgICAgICAgICAgICAgICA8Yj4yLjwvYj48aT5XaGF0IHNpdGVzIGFyZSBiZWluZyBiYWNrLWxpbmtlZCBmcm9tIGtub3duIG1hbGljaW91cyByZXNvdXJjZXMgdGhhdCB5b3Ugc2hvdWxkIGJlIGF3YXJlIG9mPzwvaT48YnI+PC9icj5cbiAgICAgICAgICAgICAgICAgICAgPGI+My48L2I+PGk+SG93IGRvIGJhY2tsaW5rIHJlc3VsdHMgZWZmZWN0IHRoZSBjcmVkaWJpbGl0eSBvZiBjZXJ0YWluIHNpdGVzPzwvaT5cbiAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgICAgICAgPENhcmRBY3Rpb25zPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gdGFyZ2V0PSdfYmxhbmsnIGhyZWY9XCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYWNrbGlua1wiIHNpemU9XCJzbWFsbFwiPkxlYXJuIE1vcmU8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvQ2FyZEFjdGlvbnM+XG4gICAgICAgIDwvQ2FyZD5cbiAgICApO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDYXJkIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQ2FyZCc7XG5pbXBvcnQgQ2FyZEFjdGlvbnMgZnJvbSAnQG11aS9tYXRlcmlhbC9DYXJkQWN0aW9ucyc7XG5pbXBvcnQgQ2FyZENvbnRlbnQgZnJvbSAnQG11aS9tYXRlcmlhbC9DYXJkQ29udGVudCc7XG5pbXBvcnQgQ2FyZE1lZGlhIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQ2FyZE1lZGlhJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQG11aS9tYXRlcmlhbC9CdXR0b24nO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmFja0xpbmtDYXJkKHByb3BzKSB7XG4gICAgY29uc3QgYmFja2xpbmsgPSBwcm9wcy5iYWNrbGluaztcbiAgICBjb25zdCBtZXRhID0gcHJvcHMuYmFja2xpbmsucGFnZW1hcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmJhY2tsaW5rLnBhZ2VtYXAubWV0YXRhZ3MgIT09IHVuZGVmaW5lZCA/IHByb3BzLmJhY2tsaW5rLnBhZ2VtYXAubWV0YXRhZ3NbMF0gOiB1bmRlZmluZWQ7XG5cbiAgICBjb25zdCBiYWNrbGlua0Rlc2NyaXB0aW9uID0gYmFja2xpbmsuc25pcHBldDtcbiAgICBjb25zdCBiYWNrbGlua1RpdGxlID0gYmFja2xpbmsudGl0bGU7XG4gICAgY29uc3QgbGluayA9IGJhY2tsaW5rLmZvcm1hdHRlZFVybDtcblxuICAgIGNvbnN0IG1ldGFEZXNjcmlwdGlvbiA9ICBtZXRhICE9PSB1bmRlZmluZWQgPyBtZXRhWydvZzpkZXNjcmlwdGlvbiddIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IG1ldGFUaXRsZSA9IG1ldGEgIT09IHVuZGVmaW5lZCA/IG1ldGFbJ29nOnRpdGxlJ10gOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgREVGQVVMVF9JTUFHRSA9ICcvaW1hZ2VzL2RlZmF1bHQtaW1hZ2UtdGh1bWJuYWlsLnBuZyc7XG5cbiAgICBmdW5jdGlvbiByZW5kZXJJbWFnZSgpIHtcbiAgICAgICAgaWYgKGJhY2tsaW5rLnBhZ2VNYXAuY3NlX2ltYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNzZSA9IGJhY2tsaW5rLnBhZ2VNYXAuY3NlX2ltYWdlO1xuICAgICAgICAgICAgY29uc3QgY3NlTGVuZ3RoID0gY3NlLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChjc2VMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3JjID0gY3NlWzBdLnNyYztcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzcmMpO1xuICAgICAgICAgICAgICAgIGlmICghc3JjLmluY2x1ZGVzKCd4LXJhdy1pbWFnZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzcmM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBERUZBVUxUX0lNQUdFO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxDYXJkIHN4PXt7IGhlaWdodDogJzgwJScsIHdpZHRoOiAnNjAlJywgbWFyZ2luVG9wOiAnMiUnLCBtYXJnaW5MZWZ0OiAnYXV0bycsIG1hcmdpblJpZ2h0OiAnYXV0byd9fT5cbiAgICAgICAgICAgIDxDYXJkTWVkaWFcbiAgICAgICAgICAgICAgICBzeD17eyB3aWR0aDogJzYwJScsIGhlaWdodDogMjAwLCBtYXJnaW5MZWZ0OiAnMjAlJyB9fVxuICAgICAgICAgICAgICAgIGltYWdlPXtyZW5kZXJJbWFnZSgpfVxuICAgICAgICAgICAgICAgIHRpdGxlPXttZXRhVGl0bGUgIT09IHVuZGVmaW5lZCA/IG1ldGFUaXRsZSA6IGJhY2tsaW5rVGl0bGV9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPENhcmRDb250ZW50PlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGd1dHRlckJvdHRvbSB2YXJpYW50PVwiaDVcIiBjb21wb25lbnQ9XCJkaXZcIj5cbiAgICAgICAgICAgICAgICAgICAge21ldGFUaXRsZSAhPT0gdW5kZWZpbmVkID8gbWV0YVRpdGxlIDogYmFja2xpbmtUaXRsZX1cbiAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImJvZHkyXCIgY29sb3I9XCJ0ZXh0LnNlY29uZGFyeVwiPlxuICAgICAgICAgICAgICAgICAgICB7bWV0YURlc2NyaXB0aW9uICE9PSB1bmRlZmluZWQgPyBtZXRhRGVzY3JpcHRpb24gOiBiYWNrbGlua0Rlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgICAgICA8Q2FyZEFjdGlvbnM+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0YXJnZXQ9J19ibGFuaycgaHJlZj17bGlua30gc2l6ZT1cInNtYWxsXCI+TmF2aWdhdGU8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvQ2FyZEFjdGlvbnM+XG4gICAgICAgIDwvQ2FyZD5cbiAgICApO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgR3JpZCBmcm9tIFwiQG11aS9tYXRlcmlhbC9HcmlkXCI7XG5pbXBvcnQgUGFwZXIgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvUGFwZXJcIjtcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnQG11aS9tYXRlcmlhbC9JbnB1dEJhc2UnO1xuaW1wb3J0IERpdmlkZXIgZnJvbSAnQG11aS9tYXRlcmlhbC9EaXZpZGVyJztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvSWNvbkJ1dHRvbic7XG5pbXBvcnQgU2VhcmNoSWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL1NlYXJjaCc7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tICdAbXVpL21hdGVyaWFsL3N0eWxlcyc7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQge3VzZUVmZmVjdH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgQm94IGZyb20gXCJAbXVpL21hdGVyaWFsL0JveFwiO1xuaW1wb3J0IEJhY2tMaW5rSW5mb0NhcmQgZnJvbSBcIi4vQmFja0xpbmtJbmZvQ2FyZFwiO1xuaW1wb3J0IEJhY2tMaW5rQ2FyZCBmcm9tIFwiLi9CYWNrTGlua0NhcmRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmFja0xpbmtzKCkge1xuICAgIGNvbnN0IFtiYWNrbGlua3MsIHNldEJhY2tsaW5rc10gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG5cbiAgICBjb25zdCBJdGVtID0gc3R5bGVkKFBhcGVyKSgoeyB0aGVtZSB9KSA9PiAoe1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2RhcmsnID8gJyMxQTIwMjcnIDogJyNkOGVjZjMnLFxuICAgICAgICAuLi50aGVtZS50eXBvZ3JhcGh5LmJvZHkyLFxuICAgICAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDUpLFxuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICAgIG1heFdpZHRoOiAnMTAwJScsXG4gICAgICAgIHBhbGV0dGU6e1xuICAgICAgICAgICAgYmFja2dyb3VuZDoge1xuICAgICAgICAgICAgICAgIHRlcnRpYXJ5OiAnI2Q4ZWNmMydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgICAgcHJpbWFyeTogJyNmZmYnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KSk7XG5cbiAgICBmdW5jdGlvbiBnZXRBeGlvc0NvbmZpZ3VyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0aW1lb3V0OiAzMDAwLFxuICAgICAgICAgICAgc2lnbmFsOiBBYm9ydFNpZ25hbC50aW1lb3V0KDYwMDApXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYmFja2xpbmtzKTtcbiAgICB9LCBbYmFja2xpbmtzXSk7XG5cbiAgICBhc3luYyBmdW5jdGlvbiBoYW5kbGVCYWNrbGlua3NTZWFyY2gocXVlcnkpIHtcbiAgICAgICAgYXdhaXQgYXhpb3MuZ2V0KGAvb3BlbnNxdWFyZS9hcGkvZm9vdHByaW50cy9iYWNrbGlua3M/dXJsPSR7cXVlcnl9YCwgZ2V0QXhpb3NDb25maWd1cmF0aW9uKCkpXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRCYWNrbGlua3MocmVzcG9uc2UuZGF0YSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgICAgICAgICB9KVxuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVNlYXJjaChlKXtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsZXQgcXVlcnlFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhY2tsaW5rc1NlYXJjaCcpO1xuICAgICAgICBsZXQgcXVlcnkgPSBxdWVyeUVsZW1lbnQudmFsdWUudHJpbSgpO1xuICAgICAgICBpZiAocXVlcnkgIT09IG51bGwgJiYgcXVlcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcXVlcnlFbGVtZW50LnZhbHVlID0gJyc7XG4gICAgICAgICAgICBhd2FpdCBoYW5kbGVCYWNrbGlua3NTZWFyY2gocXVlcnkpO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICA8R3JpZCBpdGVtIHhzPXsxMn0ganVzdGlmeUNvbnRlbnQ9J2NlbnRlcicgYWxpZ25JdGVtcz0nY2VudGVyJz5cbiAgICAgICAgICAgICAgICA8QmFja0xpbmtJbmZvQ2FyZCAvPlxuICAgICAgICAgICAgICAgIDxQYXBlclxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJmb3JtXCJcbiAgICAgICAgICAgICAgICAgICAgc3g9e3sgcDogJzJweCA0cHgnLCBkaXNwbGF5OiAnZmxleCcsIHdpZHRoOiAnOTUlJywgbWFyZ2luTGVmdDogJzIuNSUnLCBtYXJnaW5Ub3A6ICc1JScsIGJhY2tncm91bmRDb2xvcjogJ3RlcnRpYXJ5JyB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0QmFzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3g9e3sgbWw6IDEsIGZsZXg6IDEgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgRG9tYWluXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPXsnYmFja2xpbmtzU2VhcmNoJ31cbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0UHJvcHM9e3sgJ2FyaWEtbGFiZWwnOiAnYmFja2xpbmsgc2VhcmNoJyB9fVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvbiBvbkNsaWNrPXtlID0+IGhhbmRsZVNlYXJjaChlKX0gdHlwZT1cInN1Ym1pdFwiIHN4PXt7IHA6ICcxMHB4JyB9fSBhcmlhLWxhYmVsPVwic2VhcmNoXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VhcmNoSWNvbiAvPlxuICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxEaXZpZGVyIHN4PXt7IGhlaWdodDogMjgsIG06IDAuNSB9fSBvcmllbnRhdGlvbj1cInZlcnRpY2FsXCIgLz5cbiAgICAgICAgICAgICAgICA8L1BhcGVyPlxuICAgICAgICAgICAgICAgIHsgYmFja2xpbmtzLmxlbmd0aCA+IDAgJiYgPEJveCBzeD17eyBmbGV4R3JvdzogMSwgb3ZlcmZsb3c6ICdoaWRkZW4nLCBweDogMyB9fT5cbiAgICAgICAgICAgICAgICAgICAgeyBiYWNrbGlua3MubWFwKGJhY2tsaW5rID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCYWNrTGlua0NhcmQgYmFja2xpbms9e2JhY2tsaW5rfSAvPikpfVxuICAgICAgICAgICAgICAgIDwvQm94Pn1cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENhcmQgZnJvbSAnQG11aS9tYXRlcmlhbC9DYXJkJztcbmltcG9ydCBDYXJkQWN0aW9ucyBmcm9tICdAbXVpL21hdGVyaWFsL0NhcmRBY3Rpb25zJztcbmltcG9ydCBDYXJkQ29udGVudCBmcm9tICdAbXVpL21hdGVyaWFsL0NhcmRDb250ZW50JztcbmltcG9ydCBDYXJkTWVkaWEgZnJvbSAnQG11aS9tYXRlcmlhbC9DYXJkTWVkaWEnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdAbXVpL21hdGVyaWFsL0J1dHRvbic7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICdAbXVpL21hdGVyaWFsL1R5cG9ncmFwaHknO1xuaW1wb3J0IFN0cmluZ1V0aWwgZnJvbSBcIi4uL3V0aWxzL1N0cmluZ1V0aWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gWW91VHViZUNhcmQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPENhcmQgc3g9e3sgd2lkdGg6ICc2MCUnLCBtYXJnaW5Ub3A6ICcyJScsIG1hcmdpbkxlZnQ6ICdhdXRvJywgbWFyZ2luUmlnaHQ6ICdhdXRvJ319PlxuICAgICAgICAgICAgPENhcmRNZWRpYVxuICAgICAgICAgICAgICAgIHN4PXt7IGhlaWdodDogMTQwfX1cbiAgICAgICAgICAgICAgICBpbWFnZT1cIi9pbWFnZXMveW91dHViZS5wbmdcIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwiWW91VHViZSBQbGF0Zm9ybVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPENhcmRDb250ZW50PlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IGd1dHRlckJvdHRvbSB2YXJpYW50PVwiaDVcIiBjb21wb25lbnQ9XCJkaXZcIj5cbiAgICAgICAgICAgICAgICAgICAgT3BlblNxdWFyZSBZb3VUdWJlIFBsYXRmb3JtXG4gICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5XG4gICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJib2R5MlwiXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yPVwidGV4dC5zZWNvbmRhcnlcIj5cbiAgICAgICAgICAgICAgICAgICAge1N0cmluZ1V0aWwueW91dHViZUluZm9fMX1cbiAgICAgICAgICAgICAgICAgICAgPGJyPjwvYnI+PGJyPjwvYnI+XG4gICAgICAgICAgICAgICAgICAgIHtTdHJpbmdVdGlsLnlvdXR1YmVJbmZvXzJ9XG4gICAgICAgICAgICAgICAgICAgIDxiPm9wZW5zZW50b3BAZ21haWwuY29tPC9iPi5cbiAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgICAgICAgPENhcmRBY3Rpb25zPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gdGFyZ2V0PSdfYmxhbmsnIGhyZWY9XCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9cIiBzaXplPVwic21hbGxcIj5Eb2N1bWVudGF0aW9uPC9CdXR0b24+XG4gICAgICAgICAgICA8L0NhcmRBY3Rpb25zPlxuICAgICAgICA8L0NhcmQ+XG4gICAgKTtcbn1cbiIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGluZWFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpbmVhclByb2dyZXNzJywgc2xvdCk7XG59XG5jb25zdCBsaW5lYXJQcm9ncmVzc0NsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaW5lYXJQcm9ncmVzcycsIFsncm9vdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZScsICdidWZmZXInLCAncXVlcnknLCAnZGFzaGVkJywgJ2Rhc2hlZENvbG9yUHJpbWFyeScsICdkYXNoZWRDb2xvclNlY29uZGFyeScsICdiYXInLCAnYmFyQ29sb3JQcmltYXJ5JywgJ2JhckNvbG9yU2Vjb25kYXJ5JywgJ2JhcjFJbmRldGVybWluYXRlJywgJ2JhcjFEZXRlcm1pbmF0ZScsICdiYXIxQnVmZmVyJywgJ2JhcjJJbmRldGVybWluYXRlJywgJ2JhcjJCdWZmZXInXSk7XG5leHBvcnQgZGVmYXVsdCBsaW5lYXJQcm9ncmVzc0NsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJ2YWx1ZVwiLCBcInZhbHVlQnVmZmVyXCIsIFwidmFyaWFudFwiXTtcbmxldCBfID0gdCA9PiB0LFxuICBfdCxcbiAgX3QyLFxuICBfdDMsXG4gIF90NCxcbiAgX3Q1LFxuICBfdDY7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBrZXlmcmFtZXMsIGNzcywgZGFya2VuLCBsaWdodGVuIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgeyBnZXRMaW5lYXJQcm9ncmVzc1V0aWxpdHlDbGFzcyB9IGZyb20gJy4vbGluZWFyUHJvZ3Jlc3NDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBUUkFOU0lUSU9OX0RVUkFUSU9OID0gNDsgLy8gc2Vjb25kc1xuY29uc3QgaW5kZXRlcm1pbmF0ZTFLZXlmcmFtZSA9IGtleWZyYW1lcyhfdCB8fCAoX3QgPSBfYFxuICAwJSB7XG4gICAgbGVmdDogLTM1JTtcbiAgICByaWdodDogMTAwJTtcbiAgfVxuXG4gIDYwJSB7XG4gICAgbGVmdDogMTAwJTtcbiAgICByaWdodDogLTkwJTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIGxlZnQ6IDEwMCU7XG4gICAgcmlnaHQ6IC05MCU7XG4gIH1cbmApKTtcbmNvbnN0IGluZGV0ZXJtaW5hdGUyS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QyIHx8IChfdDIgPSBfYFxuICAwJSB7XG4gICAgbGVmdDogLTIwMCU7XG4gICAgcmlnaHQ6IDEwMCU7XG4gIH1cblxuICA2MCUge1xuICAgIGxlZnQ6IDEwNyU7XG4gICAgcmlnaHQ6IC04JTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIGxlZnQ6IDEwNyU7XG4gICAgcmlnaHQ6IC04JTtcbiAgfVxuYCkpO1xuY29uc3QgYnVmZmVyS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QzIHx8IChfdDMgPSBfYFxuICAwJSB7XG4gICAgb3BhY2l0eTogMTtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwIC0yM3B4O1xuICB9XG5cbiAgNjAlIHtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAgLTIzcHg7XG4gIH1cblxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAxO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IC0yMDBweCAtMjNweDtcbiAgfVxuYCkpO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBjb2xvclxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCB2YXJpYW50XSxcbiAgICBkYXNoZWQ6IFsnZGFzaGVkJywgYGRhc2hlZENvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXSxcbiAgICBiYXIxOiBbJ2JhcicsIGBiYXJDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgKHZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCB2YXJpYW50ID09PSAncXVlcnknKSAmJiAnYmFyMUluZGV0ZXJtaW5hdGUnLCB2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmICdiYXIxRGV0ZXJtaW5hdGUnLCB2YXJpYW50ID09PSAnYnVmZmVyJyAmJiAnYmFyMUJ1ZmZlciddLFxuICAgIGJhcjI6IFsnYmFyJywgdmFyaWFudCAhPT0gJ2J1ZmZlcicgJiYgYGJhckNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCB2YXJpYW50ID09PSAnYnVmZmVyJyAmJiBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsICh2YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgfHwgdmFyaWFudCA9PT0gJ3F1ZXJ5JykgJiYgJ2JhcjJJbmRldGVybWluYXRlJywgdmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYgJ2JhcjJCdWZmZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldExpbmVhclByb2dyZXNzVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBnZXRDb2xvclNoYWRlID0gKHRoZW1lLCBjb2xvcikgPT4ge1xuICBpZiAoY29sb3IgPT09ICdpbmhlcml0Jykge1xuICAgIHJldHVybiAnY3VycmVudENvbG9yJztcbiAgfVxuICBpZiAodGhlbWUudmFycykge1xuICAgIHJldHVybiB0aGVtZS52YXJzLnBhbGV0dGUuTGluZWFyUHJvZ3Jlc3NbYCR7Y29sb3J9QmdgXTtcbiAgfVxuICByZXR1cm4gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbGlnaHRlbih0aGVtZS5wYWxldHRlW2NvbG9yXS5tYWluLCAwLjYyKSA6IGRhcmtlbih0aGVtZS5wYWxldHRlW2NvbG9yXS5tYWluLCAwLjUpO1xufTtcbmNvbnN0IExpbmVhclByb2dyZXNzUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUxpbmVhclByb2dyZXNzJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgaGVpZ2h0OiA0LFxuICB6SW5kZXg6IDAsXG4gIC8vIEZpeCBTYWZhcmkncyBidWcgZHVyaW5nIGNvbXBvc2l0aW9uIG9mIGRpZmZlcmVudCBwYWludC5cbiAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICBjb2xvckFkanVzdDogJ2V4YWN0J1xuICB9LFxuICBiYWNrZ3JvdW5kQ29sb3I6IGdldENvbG9yU2hhZGUodGhlbWUsIG93bmVyU3RhdGUuY29sb3IpXG59LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ICE9PSAnYnVmZmVyJyAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogJ25vbmUnLFxuICAnJjo6YmVmb3JlJzoge1xuICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBsZWZ0OiAwLFxuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICBvcGFjaXR5OiAwLjNcbiAgfVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnYnVmZmVyJyAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAncXVlcnknICYmIHtcbiAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG59KSk7XG5jb25zdCBMaW5lYXJQcm9ncmVzc0Rhc2hlZCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUxpbmVhclByb2dyZXNzJyxcbiAgc2xvdDogJ0Rhc2hlZCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuZGFzaGVkLCBzdHlsZXNbYGRhc2hlZENvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IHtcbiAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gZ2V0Q29sb3JTaGFkZSh0aGVtZSwgb3duZXJTdGF0ZS5jb2xvcik7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgbWFyZ2luVG9wOiAwLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIHdpZHRoOiAnMTAwJSdcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnICYmIHtcbiAgICBvcGFjaXR5OiAwLjNcbiAgfSwge1xuICAgIGJhY2tncm91bmRJbWFnZTogYHJhZGlhbC1ncmFkaWVudCgke2JhY2tncm91bmRDb2xvcn0gMCUsICR7YmFja2dyb3VuZENvbG9yfSAxNiUsIHRyYW5zcGFyZW50IDQyJSlgLFxuICAgIGJhY2tncm91bmRTaXplOiAnMTBweCAxMHB4JyxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICcwIC0yM3B4J1xuICB9KTtcbn0sIGNzcyhfdDQgfHwgKF90NCA9IF9gXG4gICAgYW5pbWF0aW9uOiAkezB9IDNzIGluZmluaXRlIGxpbmVhcjtcbiAgYCksIGJ1ZmZlcktleWZyYW1lKSk7XG5jb25zdCBMaW5lYXJQcm9ncmVzc0JhcjEgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlMaW5lYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdCYXIxJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5iYXIsIHN0eWxlc1tgYmFyQ29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIChvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdxdWVyeScpICYmIHN0eWxlcy5iYXIxSW5kZXRlcm1pbmF0ZSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmIHN0eWxlcy5iYXIxRGV0ZXJtaW5hdGUsIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYgc3R5bGVzLmJhcjFCdWZmZXJdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICB3aWR0aDogJzEwMCUnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogMCxcbiAgYm90dG9tOiAwLFxuICB0b3A6IDAsXG4gIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gMC4ycyBsaW5lYXInLFxuICB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0JyxcbiAgYmFja2dyb3VuZENvbG9yOiBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgPyAnY3VycmVudENvbG9yJyA6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5cbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyAmJiB7XG4gIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gLiR7VFJBTlNJVElPTl9EVVJBVElPTn1zIGxpbmVhcmBcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYge1xuICB6SW5kZXg6IDEsXG4gIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gLiR7VFJBTlNJVElPTl9EVVJBVElPTn1zIGxpbmVhcmBcbn0pLCAoe1xuICBvd25lclN0YXRlXG59KSA9PiAob3duZXJTdGF0ZS52YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgfHwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAncXVlcnknKSAmJiBjc3MoX3Q1IHx8IChfdDUgPSBfYFxuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBhbmltYXRpb246ICR7MH0gMi4xcyBjdWJpYy1iZXppZXIoMC42NSwgMC44MTUsIDAuNzM1LCAwLjM5NSkgaW5maW5pdGU7XG4gICAgYCksIGluZGV0ZXJtaW5hdGUxS2V5ZnJhbWUpKTtcbmNvbnN0IExpbmVhclByb2dyZXNzQmFyMiA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUxpbmVhclByb2dyZXNzJyxcbiAgc2xvdDogJ0JhcjInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmJhciwgc3R5bGVzW2BiYXJDb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgKG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3F1ZXJ5JykgJiYgc3R5bGVzLmJhcjJJbmRldGVybWluYXRlLCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdidWZmZXInICYmIHN0eWxlcy5iYXIyQnVmZmVyXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGxlZnQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgdG9wOiAwLFxuICB0cmFuc2l0aW9uOiAndHJhbnNmb3JtIDAuMnMgbGluZWFyJyxcbiAgdHJhbnNmb3JtT3JpZ2luOiAnbGVmdCdcbn0sIG93bmVyU3RhdGUudmFyaWFudCAhPT0gJ2J1ZmZlcicgJiYge1xuICBiYWNrZ3JvdW5kQ29sb3I6IG93bmVyU3RhdGUuY29sb3IgPT09ICdpbmhlcml0JyA/ICdjdXJyZW50Q29sb3InIDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxufSwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnICYmIHtcbiAgb3BhY2l0eTogMC4zXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdidWZmZXInICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiBnZXRDb2xvclNoYWRlKHRoZW1lLCBvd25lclN0YXRlLmNvbG9yKSxcbiAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAuJHtUUkFOU0lUSU9OX0RVUkFUSU9OfXMgbGluZWFyYFxufSksICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IChvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdxdWVyeScpICYmIGNzcyhfdDYgfHwgKF90NiA9IF9gXG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGFuaW1hdGlvbjogJHswfSAyLjFzIGN1YmljLWJlemllcigwLjE2NSwgMC44NCwgMC40NCwgMSkgMS4xNXMgaW5maW5pdGU7XG4gICAgYCksIGluZGV0ZXJtaW5hdGUyS2V5ZnJhbWUpKTtcblxuLyoqXG4gKiAjIyBBUklBXG4gKlxuICogSWYgdGhlIHByb2dyZXNzIGJhciBpcyBkZXNjcmliaW5nIHRoZSBsb2FkaW5nIHByb2dyZXNzIG9mIGEgcGFydGljdWxhciByZWdpb24gb2YgYSBwYWdlLFxuICogeW91IHNob3VsZCB1c2UgYGFyaWEtZGVzY3JpYmVkYnlgIHRvIHBvaW50IHRvIHRoZSBwcm9ncmVzcyBiYXIsIGFuZCBzZXQgdGhlIGBhcmlhLWJ1c3lgXG4gKiBhdHRyaWJ1dGUgdG8gYHRydWVgIG9uIHRoYXQgcmVnaW9uIHVudGlsIGl0IGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxuICovXG5jb25zdCBMaW5lYXJQcm9ncmVzcyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmVhclByb2dyZXNzKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlMaW5lYXJQcm9ncmVzcydcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgICAgdmFsdWUsXG4gICAgICB2YWx1ZUJ1ZmZlcixcbiAgICAgIHZhcmlhbnQgPSAnaW5kZXRlcm1pbmF0ZSdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCByb290UHJvcHMgPSB7fTtcbiAgY29uc3QgaW5saW5lU3R5bGVzID0ge1xuICAgIGJhcjE6IHt9LFxuICAgIGJhcjI6IHt9XG4gIH07XG4gIGlmICh2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnIHx8IHZhcmlhbnQgPT09ICdidWZmZXInKSB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJvb3RQcm9wc1snYXJpYS12YWx1ZW5vdyddID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgICByb290UHJvcHNbJ2FyaWEtdmFsdWVtaW4nXSA9IDA7XG4gICAgICByb290UHJvcHNbJ2FyaWEtdmFsdWVtYXgnXSA9IDEwMDtcbiAgICAgIGxldCB0cmFuc2Zvcm0gPSB2YWx1ZSAtIDEwMDtcbiAgICAgIGlmICh0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgIHRyYW5zZm9ybSA9IC10cmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpbmxpbmVTdHlsZXMuYmFyMS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3RyYW5zZm9ybX0lKWA7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFlvdSBuZWVkIHRvIHByb3ZpZGUgYSB2YWx1ZSBwcm9wICcgKyAnd2hlbiB1c2luZyB0aGUgZGV0ZXJtaW5hdGUgb3IgYnVmZmVyIHZhcmlhbnQgb2YgTGluZWFyUHJvZ3Jlc3MgLicpO1xuICAgIH1cbiAgfVxuICBpZiAodmFyaWFudCA9PT0gJ2J1ZmZlcicpIHtcbiAgICBpZiAodmFsdWVCdWZmZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHRyYW5zZm9ybSA9ICh2YWx1ZUJ1ZmZlciB8fCAwKSAtIDEwMDtcbiAgICAgIGlmICh0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgIHRyYW5zZm9ybSA9IC10cmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpbmxpbmVTdHlsZXMuYmFyMi50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3RyYW5zZm9ybX0lKWA7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFlvdSBuZWVkIHRvIHByb3ZpZGUgYSB2YWx1ZUJ1ZmZlciBwcm9wICcgKyAnd2hlbiB1c2luZyB0aGUgYnVmZmVyIHZhcmlhbnQgb2YgTGluZWFyUHJvZ3Jlc3MuJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoTGluZWFyUHJvZ3Jlc3NSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJvbGU6IFwicHJvZ3Jlc3NiYXJcIlxuICB9LCByb290UHJvcHMsIHtcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbdmFyaWFudCA9PT0gJ2J1ZmZlcicgPyAvKiNfX1BVUkVfXyovX2pzeChMaW5lYXJQcm9ncmVzc0Rhc2hlZCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmRhc2hlZCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9KSA6IG51bGwsIC8qI19fUFVSRV9fKi9fanN4KExpbmVhclByb2dyZXNzQmFyMSwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmJhcjEsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgc3R5bGU6IGlubGluZVN0eWxlcy5iYXIxXG4gICAgfSksIHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgPyBudWxsIDogLyojX19QVVJFX18qL19qc3goTGluZWFyUHJvZ3Jlc3NCYXIyLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuYmFyMixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBzdHlsZTogaW5saW5lU3R5bGVzLmJhcjJcbiAgICB9KV1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaW5lYXJQcm9ncmVzcy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHByb2dyZXNzIGluZGljYXRvciBmb3IgdGhlIGRldGVybWluYXRlIGFuZCBidWZmZXIgdmFyaWFudHMuXG4gICAqIFZhbHVlIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgZm9yIHRoZSBidWZmZXIgdmFyaWFudC5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqL1xuICB2YWx1ZUJ1ZmZlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogVXNlIGluZGV0ZXJtaW5hdGUgb3IgcXVlcnkgd2hlbiB0aGVyZSBpcyBubyBwcm9ncmVzcyB2YWx1ZS5cbiAgICogQGRlZmF1bHQgJ2luZGV0ZXJtaW5hdGUnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydidWZmZXInLCAnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZScsICdxdWVyeSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IExpbmVhclByb2dyZXNzOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FyZEhlYWRlclV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQ2FyZEhlYWRlcicsIHNsb3QpO1xufVxuY29uc3QgY2FyZEhlYWRlckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlDYXJkSGVhZGVyJywgWydyb290JywgJ2F2YXRhcicsICdhY3Rpb24nLCAnY29udGVudCcsICd0aXRsZScsICdzdWJoZWFkZXInXSk7XG5leHBvcnQgZGVmYXVsdCBjYXJkSGVhZGVyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhY3Rpb25cIiwgXCJhdmF0YXJcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlVHlwb2dyYXBoeVwiLCBcInN1YmhlYWRlclwiLCBcInN1YmhlYWRlclR5cG9ncmFwaHlQcm9wc1wiLCBcInRpdGxlXCIsIFwidGl0bGVUeXBvZ3JhcGh5UHJvcHNcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgY2FyZEhlYWRlckNsYXNzZXMsIHsgZ2V0Q2FyZEhlYWRlclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vY2FyZEhlYWRlckNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXSxcbiAgICBhdmF0YXI6IFsnYXZhdGFyJ10sXG4gICAgYWN0aW9uOiBbJ2FjdGlvbiddLFxuICAgIGNvbnRlbnQ6IFsnY29udGVudCddLFxuICAgIHRpdGxlOiBbJ3RpdGxlJ10sXG4gICAgc3ViaGVhZGVyOiBbJ3N1YmhlYWRlciddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Q2FyZEhlYWRlclV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQ2FyZEhlYWRlclJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNhcmRIZWFkZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gX2V4dGVuZHMoe1xuICAgIFtgJiAuJHtjYXJkSGVhZGVyQ2xhc3Nlcy50aXRsZX1gXTogc3R5bGVzLnRpdGxlLFxuICAgIFtgJiAuJHtjYXJkSGVhZGVyQ2xhc3Nlcy5zdWJoZWFkZXJ9YF06IHN0eWxlcy5zdWJoZWFkZXJcbiAgfSwgc3R5bGVzLnJvb3QpXG59KSh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIHBhZGRpbmc6IDE2XG59KTtcbmNvbnN0IENhcmRIZWFkZXJBdmF0YXIgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNhcmRIZWFkZXInLFxuICBzbG90OiAnQXZhdGFyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuYXZhdGFyXG59KSh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgZmxleDogJzAgMCBhdXRvJyxcbiAgbWFyZ2luUmlnaHQ6IDE2XG59KTtcbmNvbnN0IENhcmRIZWFkZXJBY3Rpb24gPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNhcmRIZWFkZXInLFxuICBzbG90OiAnQWN0aW9uJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuYWN0aW9uXG59KSh7XG4gIGZsZXg6ICcwIDAgYXV0bycsXG4gIGFsaWduU2VsZjogJ2ZsZXgtc3RhcnQnLFxuICBtYXJnaW5Ub3A6IC00LFxuICBtYXJnaW5SaWdodDogLTgsXG4gIG1hcmdpbkJvdHRvbTogLTRcbn0pO1xuY29uc3QgQ2FyZEhlYWRlckNvbnRlbnQgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUNhcmRIZWFkZXInLFxuICBzbG90OiAnQ29udGVudCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmNvbnRlbnRcbn0pKHtcbiAgZmxleDogJzEgMSBhdXRvJ1xufSk7XG5jb25zdCBDYXJkSGVhZGVyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2FyZEhlYWRlcihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ2FyZEhlYWRlcidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGFjdGlvbixcbiAgICAgIGF2YXRhcixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBmYWxzZSxcbiAgICAgIHN1YmhlYWRlcjogc3ViaGVhZGVyUHJvcCxcbiAgICAgIHN1YmhlYWRlclR5cG9ncmFwaHlQcm9wcyxcbiAgICAgIHRpdGxlOiB0aXRsZVByb3AsXG4gICAgICB0aXRsZVR5cG9ncmFwaHlQcm9wc1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVUeXBvZ3JhcGh5XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGxldCB0aXRsZSA9IHRpdGxlUHJvcDtcbiAgaWYgKHRpdGxlICE9IG51bGwgJiYgdGl0bGUudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICB0aXRsZSA9IC8qI19fUFVSRV9fKi9fanN4KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICAgIHZhcmlhbnQ6IGF2YXRhciA/ICdib2R5MicgOiAnaDUnLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnRpdGxlLFxuICAgICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHRpdGxlVHlwb2dyYXBoeVByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogdGl0bGVcbiAgICB9KSk7XG4gIH1cbiAgbGV0IHN1YmhlYWRlciA9IHN1YmhlYWRlclByb3A7XG4gIGlmIChzdWJoZWFkZXIgIT0gbnVsbCAmJiBzdWJoZWFkZXIudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICBzdWJoZWFkZXIgPSAvKiNfX1BVUkVfXyovX2pzeChUeXBvZ3JhcGh5LCBfZXh0ZW5kcyh7XG4gICAgICB2YXJpYW50OiBhdmF0YXIgPyAnYm9keTInIDogJ2JvZHkxJyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdWJoZWFkZXIsXG4gICAgICBjb2xvcjogXCJ0ZXh0LnNlY29uZGFyeVwiLFxuICAgICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHN1YmhlYWRlclR5cG9ncmFwaHlQcm9wcywge1xuICAgICAgY2hpbGRyZW46IHN1YmhlYWRlclxuICAgIH0pKTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKENhcmRIZWFkZXJSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBhczogY29tcG9uZW50LFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2F2YXRhciAmJiAvKiNfX1BVUkVfXyovX2pzeChDYXJkSGVhZGVyQXZhdGFyLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuYXZhdGFyLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBhdmF0YXJcbiAgICB9KSwgLyojX19QVVJFX18qL19qc3hzKENhcmRIZWFkZXJDb250ZW50LCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuY29udGVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogW3RpdGxlLCBzdWJoZWFkZXJdXG4gICAgfSksIGFjdGlvbiAmJiAvKiNfX1BVUkVfXyovX2pzeChDYXJkSGVhZGVyQWN0aW9uLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuYWN0aW9uLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNoaWxkcmVuOiBhY3Rpb25cbiAgICB9KV1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDYXJkSGVhZGVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBhY3Rpb24gdG8gZGlzcGxheSBpbiB0aGUgY2FyZCBoZWFkZXIuXG4gICAqL1xuICBhY3Rpb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIEF2YXRhciBlbGVtZW50IHRvIGRpc3BsYXkuXG4gICAqL1xuICBhdmF0YXI6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBgc3ViaGVhZGVyYCBhbmQgYHRpdGxlYCB3b24ndCBiZSB3cmFwcGVkIGJ5IGEgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqIFRoaXMgY2FuIGJlIHVzZWZ1bCB0byByZW5kZXIgYW4gYWx0ZXJuYXRpdmUgVHlwb2dyYXBoeSB2YXJpYW50IGJ5IHdyYXBwaW5nXG4gICAqIHRoZSBgdGl0bGVgIHRleHQsIGFuZCBvcHRpb25hbCBgc3ViaGVhZGVyYCB0ZXh0XG4gICAqIHdpdGggdGhlIFR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVR5cG9ncmFwaHk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHN1YmhlYWRlcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGVzZSBwcm9wcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgc3ViaGVhZGVyXG4gICAqIChhcyBsb25nIGFzIGRpc2FibGVUeXBvZ3JhcGh5IGlzIG5vdCBgdHJ1ZWApLlxuICAgKi9cbiAgc3ViaGVhZGVyVHlwb2dyYXBoeVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIHRpdGxlOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZXNlIHByb3BzIHdpbGwgYmUgZm9yd2FyZGVkIHRvIHRoZSB0aXRsZVxuICAgKiAoYXMgbG9uZyBhcyBkaXNhYmxlVHlwb2dyYXBoeSBpcyBub3QgYHRydWVgKS5cbiAgICovXG4gIHRpdGxlVHlwb2dyYXBoeVByb3BzOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQ2FyZEhlYWRlcjsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ2FyZCBmcm9tICdAbXVpL21hdGVyaWFsL0NhcmQnO1xuaW1wb3J0IENhcmRBY3Rpb25zIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQ2FyZEFjdGlvbnMnO1xuaW1wb3J0IENhcmRDb250ZW50IGZyb20gJ0BtdWkvbWF0ZXJpYWwvQ2FyZENvbnRlbnQnO1xuaW1wb3J0IENhcmRNZWRpYSBmcm9tICdAbXVpL21hdGVyaWFsL0NhcmRNZWRpYSc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQnV0dG9uJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtdWkvbWF0ZXJpYWwvVHlwb2dyYXBoeSc7XG5pbXBvcnQge0NhcmRIZWFkZXJ9IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XG5pbXBvcnQgQXZhdGFyIGZyb20gXCJAbXVpL21hdGVyaWFsL0F2YXRhclwiO1xuaW1wb3J0IEljb25CdXR0b24gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvSWNvbkJ1dHRvblwiO1xuaW1wb3J0IHtyZWR9IGZyb20gXCJAbXVpL21hdGVyaWFsL2NvbG9yc1wiO1xuaW1wb3J0IEV4cGFuZE1vcmUgZnJvbSBcIkBtdWkvaWNvbnMtbWF0ZXJpYWwvRXhwYW5kTW9yZVwiO1xuaW1wb3J0IEV4cGFuZE1vcmVJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvRXhwYW5kTW9yZSc7XG5pbXBvcnQgQ29sbGFwc2UgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvQ29sbGFwc2VcIjtcbmltcG9ydCBUaHVtYlVwT2ZmQWx0SWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL1RodW1iVXBPZmZBbHQnO1xuaW1wb3J0IFZpc2liaWxpdHlJY29uIGZyb20gJ0BtdWkvaWNvbnMtbWF0ZXJpYWwvVmlzaWJpbGl0eSc7XG5pbXBvcnQge3N0eWxlZH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvc3R5bGVzXCI7XG5pbXBvcnQgRnVuY3Rpb25VdGlsIGZyb20gXCIuLi91dGlscy9GdW5jdGlvblV0aWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gWW91VHViZVZpZGVvQ2FyZChwcm9wcykge1xuICAgIGNvbnN0IEV4cGFuZE1vcmUgPSBzdHlsZWQoKHByb3BzKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZXhwYW5kLCAuLi5vdGhlciB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiA8SWNvbkJ1dHRvbiB7Li4ub3RoZXJ9IC8+O1xuICAgIH0pKCh7IHRoZW1lLCBleHBhbmQgfSkgPT4gKHtcbiAgICAgICAgdHJhbnNmb3JtOiAhZXhwYW5kID8gJ3JvdGF0ZSgwZGVnKScgOiAncm90YXRlKDE4MGRlZyknLFxuICAgICAgICBtYXJnaW5MZWZ0OiAnYXV0bycsXG4gICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0LFxuICAgICAgICB9KSxcbiAgICB9KSk7XG5cbiAgICBjb25zdCBbZXhwYW5kZWQsIHNldEV4cGFuZGVkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCB2aWRlbyA9IHByb3BzLnZpZGVvO1xuXG4gICAgY29uc3QgaGFuZGxlRXhwYW5kQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIHNldEV4cGFuZGVkKCFleHBhbmRlZCk7XG4gICAgfTtcblxuICAgIC8vIHByb3BlcnRpZXNcbiAgICBjb25zdCBhdXRob3IgPSB2aWRlby5hdXRob3I7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSB2aWRlby5kZXNjcmlwdGlvbjtcbiAgICBjb25zdCBsaWtlQ291bnQgPSB2aWRlby5saWtlQ291bnQ7XG4gICAgY29uc3QgcHVibGlzaERhdGUgPSB2aWRlby5wdWJsaXNoRGF0ZTtcbiAgICBjb25zdCB0aHVtYm5haWwgPSB2aWRlby50aHVtYm5haWw7XG4gICAgY29uc3QgdGl0bGUgPSB2aWRlby50aXRsZTtcbiAgICBjb25zdCB0cmFuc2NyaXB0ID0gdmlkZW8udHJhbnNjcmlwdDtcbiAgICBjb25zdCB2aWRlb1VybCA9IHZpZGVvLnZpZGVvVXJsO1xuICAgIGNvbnN0IHZpZXdDb3VudCA9IHZpZGVvLnZpZXdDb3VudDtcblxuICAgIC8vIGVuaGFuY2VkIHByb3BlcnRpZXNcbiAgICBjb25zdCBwdWJsaXNoZWREYXRlID0gRnVuY3Rpb25VdGlsLmdldFB1Ymxpc2hEYXRlKHB1Ymxpc2hEYXRlKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxDYXJkIHN4PXt7IGhlaWdodDogJzgwJScsIHdpZHRoOiAnNjAlJywgbWFyZ2luVG9wOiAnMiUnLCBtYXJnaW5MZWZ0OiAnYXV0bycsIG1hcmdpblJpZ2h0OiAnYXV0bycsIGZvbnQ6ICdQcm94aW1hIE5vdmEnfX0+XG4gICAgICAgICAgICA8Q2FyZEhlYWRlciBzeD17eyBmb250OiAnUHJveGltYSBOb3ZhJyB9fVxuICAgICAgICAgICAgICAgIGF2YXRhcj17IDxBdmF0YXIgc3g9e3sgYmdjb2xvcjogcmVkWzUwMF0sIHdpZHRoOiA3NiwgaGVpZ2h0OiA3NiwgZm9udFNpemU6ICcxMHB4JyB9fSBhcmlhLWxhYmVsPVwicmVjaXBlXCI+e2F1dGhvcn08L0F2YXRhcj59XG4gICAgICAgICAgICAgICAgdGl0bGU9e3RpdGxlfVxuICAgICAgICAgICAgICAgIHN1YmhlYWRlcj17cHVibGlzaGVkRGF0ZX0gLz5cbiAgICAgICAgICAgIDxDYXJkTWVkaWFcbiAgICAgICAgICAgICAgICBzeD17eyB3aWR0aDogJzMwJScsIGhlaWdodDogMTAwLCBtYXJnaW5MZWZ0OiAnMzUlJyB9fVxuICAgICAgICAgICAgICAgIGNvbXBvbmVudD17XCJpbWdcIn1cbiAgICAgICAgICAgICAgICBhbHQ9e1wieW91dHViZSBpbWFnZSB0aHVtYm5haWxcIn1cbiAgICAgICAgICAgICAgICBpbWFnZT17dGh1bWJuYWlsfSAvPlxuICAgICAgICAgICAgPENhcmRDb250ZW50PlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dC5zZWNvbmRhcnlcIiBmb250RmFtaWx5PVwiUHJveGltYSBOb3ZhXCIgZm9udFNpemU9XCIuOTVyZW1cIj5cbiAgICAgICAgICAgICAgICAgICAge2Rlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgICAgICA8Q2FyZEFjdGlvbnMgZGlzYWJsZVNwYWNpbmc+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0YXJnZXQ9J19ibGFuaycgaHJlZj17dmlkZW9Vcmx9IHNpemU9XCJzbWFsbFwiPk5hdmlnYXRlPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgPEljb25CdXR0b24gc3g9e3sgbWFyZ2luTGVmdDogJzMlJywgZm9udDogJ1Byb3hpbWEgTm92YScsIGZvbnRTaXplOicuNzVyZW0nLCBmb250V2VpZ2h0OiAnNDAwJyB9fSBhcmlhLWxhYmVsPVwibGlrZSBjb3VudFwiPlxuICAgICAgICAgICAgICAgICAgICA8VGh1bWJVcE9mZkFsdEljb24gLz5cbiAgICAgICAgICAgICAgICAgICAge2xpa2VDb3VudH1cbiAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgICAgICAgICAgPEljb25CdXR0b24gc3g9e3sgbWFyZ2luTGVmdDogJzMlJywgZm9udDogJ1Byb3hpbWEgTm92YScsIGZvbnRTaXplOicuNzVyZW0nLCBmb250V2VpZ2h0OiAnNDAwJyB9fSBhcmlhLWxhYmVsPVwidmlldyBjb3VudFwiPlxuICAgICAgICAgICAgICAgICAgICA8VmlzaWJpbGl0eUljb24gLz5cbiAgICAgICAgICAgICAgICAgICAge3ZpZXdDb3VudH1cbiAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgICAgICAgICAgPEV4cGFuZE1vcmUgc3g9e3sgbWFyZ2luTGVmdDogJzU1JScgfX1cbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kPXtleHBhbmRlZH1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlRXhwYW5kQ2xpY2t9XG4gICAgICAgICAgICAgICAgICAgIGFyaWEtZXhwYW5kZWQ9e2V4cGFuZGVkfVxuICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwic2hvdyBtb3JlXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxFeHBhbmRNb3JlSWNvbiAvPlxuICAgICAgICAgICAgICAgIDwvRXhwYW5kTW9yZT5cbiAgICAgICAgICAgIDwvQ2FyZEFjdGlvbnM+XG4gICAgICAgICAgICA8Q2FyZEFjdGlvbnM+XG4gICAgICAgICAgICA8L0NhcmRBY3Rpb25zPlxuICAgICAgICAgICAgPENvbGxhcHNlIGluPXtleHBhbmRlZH0gdGltZW91dD1cImF1dG9cIiB1bm1vdW50T25FeGl0PlxuICAgICAgICAgICAgICAgIDxDYXJkQ29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgcGFyYWdyYXBoIGZvbnRGYW1pbHk9eydQcm94aW1hIE5vdmEnfSBmb250U2l6ZT1cIi45NXJlbVwiIGZvbnRXZWlnaHQ9XCI4MDBcIj5WaWRlbyBUcmFuc2NyaXB0OjwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgcGFyYWdyYXBoIGZvbnRGYW1pbHk9eydQcm94aW1hIE5vdmEnfSBmb250U2l6ZT1cIi45NXJlbVwiIGZvbnRXZWlnaHQ9XCI4MDBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt0cmFuc2NyaXB0fVxuICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgICAgIDwvQ29sbGFwc2U+XG4gICAgICAgIDwvQ2FyZD5cbiAgICApO1xufSIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9ybUNvbnRyb2xMYWJlbFV0aWxpdHlDbGFzc2VzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlGb3JtQ29udHJvbExhYmVsJywgc2xvdCk7XG59XG5jb25zdCBmb3JtQ29udHJvbExhYmVsQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUZvcm1Db250cm9sTGFiZWwnLCBbJ3Jvb3QnLCAnbGFiZWxQbGFjZW1lbnRTdGFydCcsICdsYWJlbFBsYWNlbWVudFRvcCcsICdsYWJlbFBsYWNlbWVudEJvdHRvbScsICdkaXNhYmxlZCcsICdsYWJlbCcsICdlcnJvcicsICdyZXF1aXJlZCcsICdhc3RlcmlzayddKTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1Db250cm9sTGFiZWxDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoZWNrZWRcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJjb250cm9sXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlVHlwb2dyYXBoeVwiLCBcImlucHV0UmVmXCIsIFwibGFiZWxcIiwgXCJsYWJlbFBsYWNlbWVudFwiLCBcIm5hbWVcIiwgXCJvbkNoYW5nZVwiLCBcInJlcXVpcmVkXCIsIFwic2xvdFByb3BzXCIsIFwidmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZS9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgeyB1c2VGb3JtQ29udHJvbCB9IGZyb20gJy4uL0Zvcm1Db250cm9sJztcbmltcG9ydCBTdGFjayBmcm9tICcuLi9TdGFjayc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICcuLi9UeXBvZ3JhcGh5JztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBmb3JtQ29udHJvbExhYmVsQ2xhc3NlcywgeyBnZXRGb3JtQ29udHJvbExhYmVsVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL2Zvcm1Db250cm9sTGFiZWxDbGFzc2VzJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVkLFxuICAgIGxhYmVsUGxhY2VtZW50LFxuICAgIGVycm9yLFxuICAgIHJlcXVpcmVkXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBgbGFiZWxQbGFjZW1lbnQke2NhcGl0YWxpemUobGFiZWxQbGFjZW1lbnQpfWAsIGVycm9yICYmICdlcnJvcicsIHJlcXVpcmVkICYmICdyZXF1aXJlZCddLFxuICAgIGxhYmVsOiBbJ2xhYmVsJywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJ10sXG4gICAgYXN0ZXJpc2s6IFsnYXN0ZXJpc2snLCBlcnJvciAmJiAnZXJyb3InXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEZvcm1Db250cm9sTGFiZWxVdGlsaXR5Q2xhc3NlcywgY2xhc3Nlcyk7XG59O1xuZXhwb3J0IGNvbnN0IEZvcm1Db250cm9sTGFiZWxSb290ID0gc3R5bGVkKCdsYWJlbCcsIHtcbiAgbmFtZTogJ011aUZvcm1Db250cm9sTGFiZWwnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFt7XG4gICAgICBbYCYgLiR7Zm9ybUNvbnRyb2xMYWJlbENsYXNzZXMubGFiZWx9YF06IHN0eWxlcy5sYWJlbFxuICAgIH0sIHN0eWxlcy5yb290LCBzdHlsZXNbYGxhYmVsUGxhY2VtZW50JHtjYXBpdGFsaXplKG93bmVyU3RhdGUubGFiZWxQbGFjZW1lbnQpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICAvLyBGb3IgY29ycmVjdCBhbGlnbm1lbnQgd2l0aCB0aGUgdGV4dC5cbiAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBtYXJnaW5MZWZ0OiAtMTEsXG4gIG1hcmdpblJpZ2h0OiAxNixcbiAgLy8gdXNlZCBmb3Igcm93IHByZXNlbnRhdGlvbiBvZiByYWRpby9jaGVja2JveFxuICBbYCYuJHtmb3JtQ29udHJvbExhYmVsQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gIH1cbn0sIG93bmVyU3RhdGUubGFiZWxQbGFjZW1lbnQgPT09ICdzdGFydCcgJiYge1xuICBmbGV4RGlyZWN0aW9uOiAncm93LXJldmVyc2UnLFxuICBtYXJnaW5MZWZ0OiAxNixcbiAgLy8gdXNlZCBmb3Igcm93IHByZXNlbnRhdGlvbiBvZiByYWRpby9jaGVja2JveFxuICBtYXJnaW5SaWdodDogLTExXG59LCBvd25lclN0YXRlLmxhYmVsUGxhY2VtZW50ID09PSAndG9wJyAmJiB7XG4gIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4tcmV2ZXJzZScsXG4gIG1hcmdpbkxlZnQ6IDE2XG59LCBvd25lclN0YXRlLmxhYmVsUGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiB7XG4gIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICBtYXJnaW5MZWZ0OiAxNlxufSwge1xuICBbYCYgLiR7Zm9ybUNvbnRyb2xMYWJlbENsYXNzZXMubGFiZWx9YF06IHtcbiAgICBbYCYuJHtmb3JtQ29udHJvbExhYmVsQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgICB9XG4gIH1cbn0pKTtcbmNvbnN0IEFzdGVyaXNrQ29tcG9uZW50ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpRm9ybUNvbnRyb2xMYWJlbCcsXG4gIHNsb3Q6ICdBc3RlcmlzaycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmFzdGVyaXNrXG59KSgoe1xuICB0aGVtZVxufSkgPT4gKHtcbiAgW2AmLiR7Zm9ybUNvbnRyb2xMYWJlbENsYXNzZXMuZXJyb3J9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZXJyb3IubWFpblxuICB9XG59KSk7XG5cbi8qKlxuICogRHJvcC1pbiByZXBsYWNlbWVudCBvZiB0aGUgYFJhZGlvYCwgYFN3aXRjaGAgYW5kIGBDaGVja2JveGAgY29tcG9uZW50LlxuICogVXNlIHRoaXMgY29tcG9uZW50IGlmIHlvdSB3YW50IHRvIGRpc3BsYXkgYW4gZXh0cmEgbGFiZWwuXG4gKi9cbmNvbnN0IEZvcm1Db250cm9sTGFiZWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGb3JtQ29udHJvbExhYmVsKGluUHJvcHMsIHJlZikge1xuICB2YXIgX3JlZiwgX3Nsb3RQcm9wcyR0eXBvZ3JhcGh5O1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlGb3JtQ29udHJvbExhYmVsJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgICBjb250cm9sLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkUHJvcCxcbiAgICAgIGRpc2FibGVUeXBvZ3JhcGh5LFxuICAgICAgbGFiZWw6IGxhYmVsUHJvcCxcbiAgICAgIGxhYmVsUGxhY2VtZW50ID0gJ2VuZCcsXG4gICAgICByZXF1aXJlZDogcmVxdWlyZWRQcm9wLFxuICAgICAgc2xvdFByb3BzID0ge31cbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBjb25zdCBkaXNhYmxlZCA9IChfcmVmID0gZGlzYWJsZWRQcm9wICE9IG51bGwgPyBkaXNhYmxlZFByb3AgOiBjb250cm9sLnByb3BzLmRpc2FibGVkKSAhPSBudWxsID8gX3JlZiA6IG11aUZvcm1Db250cm9sID09IG51bGwgPyB2b2lkIDAgOiBtdWlGb3JtQ29udHJvbC5kaXNhYmxlZDtcbiAgY29uc3QgcmVxdWlyZWQgPSByZXF1aXJlZFByb3AgIT0gbnVsbCA/IHJlcXVpcmVkUHJvcCA6IGNvbnRyb2wucHJvcHMucmVxdWlyZWQ7XG4gIGNvbnN0IGNvbnRyb2xQcm9wcyA9IHtcbiAgICBkaXNhYmxlZCxcbiAgICByZXF1aXJlZFxuICB9O1xuICBbJ2NoZWNrZWQnLCAnbmFtZScsICdvbkNoYW5nZScsICd2YWx1ZScsICdpbnB1dFJlZiddLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAodHlwZW9mIGNvbnRyb2wucHJvcHNba2V5XSA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb3BzW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb250cm9sUHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ2Vycm9yJ11cbiAgfSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkaXNhYmxlZCxcbiAgICBsYWJlbFBsYWNlbWVudCxcbiAgICByZXF1aXJlZCxcbiAgICBlcnJvcjogZmNzLmVycm9yXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IHR5cG9ncmFwaHlTbG90UHJvcHMgPSAoX3Nsb3RQcm9wcyR0eXBvZ3JhcGh5ID0gc2xvdFByb3BzLnR5cG9ncmFwaHkpICE9IG51bGwgPyBfc2xvdFByb3BzJHR5cG9ncmFwaHkgOiBjb21wb25lbnRzUHJvcHMudHlwb2dyYXBoeTtcbiAgbGV0IGxhYmVsID0gbGFiZWxQcm9wO1xuICBpZiAobGFiZWwgIT0gbnVsbCAmJiBsYWJlbC50eXBlICE9PSBUeXBvZ3JhcGh5ICYmICFkaXNhYmxlVHlwb2dyYXBoeSkge1xuICAgIGxhYmVsID0gLyojX19QVVJFX18qL19qc3goVHlwb2dyYXBoeSwgX2V4dGVuZHMoe1xuICAgICAgY29tcG9uZW50OiBcInNwYW5cIlxuICAgIH0sIHR5cG9ncmFwaHlTbG90UHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmxhYmVsLCB0eXBvZ3JhcGh5U2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiB0eXBvZ3JhcGh5U2xvdFByb3BzLmNsYXNzTmFtZSksXG4gICAgICBjaGlsZHJlbjogbGFiZWxcbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhGb3JtQ29udHJvbExhYmVsUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjb250cm9sLCBjb250cm9sUHJvcHMpLCByZXF1aXJlZCA/IC8qI19fUFVSRV9fKi9fanN4cyhTdGFjaywge1xuICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgY2hpbGRyZW46IFtsYWJlbCwgLyojX19QVVJFX18qL19qc3hzKEFzdGVyaXNrQ29tcG9uZW50LCB7XG4gICAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmFzdGVyaXNrLFxuICAgICAgICBjaGlsZHJlbjogW1wiXFx1MjAwOVwiLCAnKiddXG4gICAgICB9KV1cbiAgICB9KSA6IGxhYmVsXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1Db250cm9sTGFiZWwucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGFwcGVhcnMgc2VsZWN0ZWQuXG4gICAqL1xuICBjaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgcHJvcHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICB0eXBvZ3JhcGh5OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogQSBjb250cm9sIGVsZW1lbnQuIEZvciBpbnN0YW5jZSwgaXQgY2FuIGJlIGEgYFJhZGlvYCwgYSBgU3dpdGNoYCBvciBhIGBDaGVja2JveGAuXG4gICAqL1xuICBjb250cm9sOiBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29udHJvbCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIHJlbmRlcmVkIGFzIGl0IGlzIHBhc3NlZCB3aXRob3V0IGFuIGFkZGl0aW9uYWwgdHlwb2dyYXBoeSBub2RlLlxuICAgKi9cbiAgZGlzYWJsZVR5cG9ncmFwaHk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBBIHRleHQgb3IgYW4gZWxlbWVudCB0byBiZSB1c2VkIGluIGFuIGVuY2xvc2luZyBsYWJlbCBlbGVtZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uIG9mIHRoZSBsYWJlbC5cbiAgICogQGRlZmF1bHQgJ2VuZCdcbiAgICovXG4gIGxhYmVsUGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAnZW5kJywgJ3N0YXJ0JywgJ3RvcCddKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBzdGF0ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LlN5bnRoZXRpY0V2ZW50fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IGNoZWNrZWQgc3RhdGUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQuY2hlY2tlZGAgKGJvb2xlYW4pLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBgaW5wdXRgIGlzIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHByb3BzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgdHlwb2dyYXBoeTogUHJvcFR5cGVzLm9iamVjdFxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbExhYmVsOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3dpdGNoQmFzZVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnUHJpdmF0ZVN3aXRjaEJhc2UnLCBzbG90KTtcbn1cbmNvbnN0IHN3aXRjaEJhc2VDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnUHJpdmF0ZVN3aXRjaEJhc2UnLCBbJ3Jvb3QnLCAnY2hlY2tlZCcsICdkaXNhYmxlZCcsICdpbnB1dCcsICdlZGdlU3RhcnQnLCAnZWRnZUVuZCddKTtcbmV4cG9ydCBkZWZhdWx0IHN3aXRjaEJhc2VDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImF1dG9Gb2N1c1wiLCBcImNoZWNrZWRcIiwgXCJjaGVja2VkSWNvblwiLCBcImNsYXNzTmFtZVwiLCBcImRlZmF1bHRDaGVja2VkXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJlZGdlXCIsIFwiaWNvblwiLCBcImlkXCIsIFwiaW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25Gb2N1c1wiLCBcInJlYWRPbmx5XCIsIFwicmVxdWlyZWRcIiwgXCJ0YWJJbmRleFwiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VDb250cm9sbGVkIGZyb20gJy4uL3V0aWxzL3VzZUNvbnRyb2xsZWQnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBCdXR0b25CYXNlIGZyb20gJy4uL0J1dHRvbkJhc2UnO1xuaW1wb3J0IHsgZ2V0U3dpdGNoQmFzZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vc3dpdGNoQmFzZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGNoZWNrZWQsXG4gICAgZGlzYWJsZWQsXG4gICAgZWRnZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgY2hlY2tlZCAmJiAnY2hlY2tlZCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGVkZ2UgJiYgYGVkZ2Uke2NhcGl0YWxpemUoZWRnZSl9YF0sXG4gICAgaW5wdXQ6IFsnaW5wdXQnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFN3aXRjaEJhc2VVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFN3aXRjaEJhc2VSb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UpKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgcGFkZGluZzogOSxcbiAgYm9yZGVyUmFkaXVzOiAnNTAlJ1xufSwgb3duZXJTdGF0ZS5lZGdlID09PSAnc3RhcnQnICYmIHtcbiAgbWFyZ2luTGVmdDogb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnID8gLTMgOiAtMTJcbn0sIG93bmVyU3RhdGUuZWRnZSA9PT0gJ2VuZCcgJiYge1xuICBtYXJnaW5SaWdodDogb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnID8gLTMgOiAtMTJcbn0pKTtcbmNvbnN0IFN3aXRjaEJhc2VJbnB1dCA9IHN0eWxlZCgnaW5wdXQnLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiByb290U2hvdWxkRm9yd2FyZFByb3Bcbn0pKHtcbiAgY3Vyc29yOiAnaW5oZXJpdCcsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBvcGFjaXR5OiAwLFxuICB3aWR0aDogJzEwMCUnLFxuICBoZWlnaHQ6ICcxMDAlJyxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwLFxuICBtYXJnaW46IDAsXG4gIHBhZGRpbmc6IDAsXG4gIHpJbmRleDogMVxufSk7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuY29uc3QgU3dpdGNoQmFzZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFN3aXRjaEJhc2UocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgICBhdXRvRm9jdXMsXG4gICAgICBjaGVja2VkOiBjaGVja2VkUHJvcCxcbiAgICAgIGNoZWNrZWRJY29uLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWRQcm9wLFxuICAgICAgZGlzYWJsZUZvY3VzUmlwcGxlID0gZmFsc2UsXG4gICAgICBlZGdlID0gZmFsc2UsXG4gICAgICBpY29uLFxuICAgICAgaWQsXG4gICAgICBpbnB1dFByb3BzLFxuICAgICAgaW5wdXRSZWYsXG4gICAgICBuYW1lLFxuICAgICAgb25CbHVyLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbkZvY3VzLFxuICAgICAgcmVhZE9ubHksXG4gICAgICByZXF1aXJlZCA9IGZhbHNlLFxuICAgICAgdGFiSW5kZXgsXG4gICAgICB0eXBlLFxuICAgICAgdmFsdWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgW2NoZWNrZWQsIHNldENoZWNrZWRTdGF0ZV0gPSB1c2VDb250cm9sbGVkKHtcbiAgICBjb250cm9sbGVkOiBjaGVja2VkUHJvcCxcbiAgICBkZWZhdWx0OiBCb29sZWFuKGRlZmF1bHRDaGVja2VkKSxcbiAgICBuYW1lOiAnU3dpdGNoQmFzZScsXG4gICAgc3RhdGU6ICdjaGVja2VkJ1xuICB9KTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBjb25zdCBoYW5kbGVGb2N1cyA9IGV2ZW50ID0+IHtcbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkZvY3VzKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5vbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUJsdXIgPSBldmVudCA9PiB7XG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uQmx1cikge1xuICAgICAgbXVpRm9ybUNvbnRyb2wub25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUlucHV0Q2hhbmdlID0gZXZlbnQgPT4ge1xuICAgIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvOTAyM1xuICAgIGlmIChldmVudC5uYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG5ld0NoZWNrZWQgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcbiAgICBzZXRDaGVja2VkU3RhdGUobmV3Q2hlY2tlZCk7XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICAvLyBUT0RPIHY2OiByZW1vdmUgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCBuZXdDaGVja2VkKTtcbiAgICB9XG4gIH07XG4gIGxldCBkaXNhYmxlZCA9IGRpc2FibGVkUHJvcDtcbiAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgaWYgKHR5cGVvZiBkaXNhYmxlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRpc2FibGVkID0gbXVpRm9ybUNvbnRyb2wuZGlzYWJsZWQ7XG4gICAgfVxuICB9XG4gIGNvbnN0IGhhc0xhYmVsRm9yID0gdHlwZSA9PT0gJ2NoZWNrYm94JyB8fCB0eXBlID09PSAncmFkaW8nO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY2hlY2tlZCxcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZWRnZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFN3aXRjaEJhc2VSb290LCBfZXh0ZW5kcyh7XG4gICAgY29tcG9uZW50OiBcInNwYW5cIixcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGNlbnRlclJpcHBsZTogdHJ1ZSxcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgdGFiSW5kZXg6IG51bGwsXG4gICAgcm9sZTogdW5kZWZpbmVkLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChTd2l0Y2hCYXNlSW5wdXQsIF9leHRlbmRzKHtcbiAgICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgICAgY2hlY2tlZDogY2hlY2tlZFByb3AsXG4gICAgICBkZWZhdWx0Q2hlY2tlZDogZGVmYXVsdENoZWNrZWQsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaW5wdXQsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICBpZDogaGFzTGFiZWxGb3IgPyBpZCA6IHVuZGVmaW5lZCxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlSW5wdXRDaGFuZ2UsXG4gICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICByZWY6IGlucHV0UmVmLFxuICAgICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9LCB0eXBlID09PSAnY2hlY2tib3gnICYmIHZhbHVlID09PSB1bmRlZmluZWQgPyB7fSA6IHtcbiAgICAgIHZhbHVlXG4gICAgfSwgaW5wdXRQcm9wcykpLCBjaGVja2VkID8gY2hlY2tlZEljb24gOiBpY29uXVxuICB9KSk7XG59KTtcblxuLy8gTkI6IElmIGNoYW5nZWQsIHBsZWFzZSB1cGRhdGUgQ2hlY2tib3gsIFN3aXRjaCBhbmQgUmFkaW9cbi8vIHNvIHRoYXQgdGhlIEFQSSBkb2N1bWVudGF0aW9uIGlzIHVwZGF0ZWQuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTd2l0Y2hCYXNlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGNoZWNrZWQuXG4gICAqL1xuICBjaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNoZWNrZWQuXG4gICAqL1xuICBjaGVja2VkSWNvbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGRlZmF1bHRDaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlICBrZXlib2FyZCBmb2N1cyByaXBwbGUgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgZ2l2ZW4sIHVzZXMgYSBuZWdhdGl2ZSBtYXJnaW4gdG8gY291bnRlcmFjdCB0aGUgcGFkZGluZyBvbiBvbmVcbiAgICogc2lkZSAodGhpcyBpcyBvZnRlbiBoZWxwZnVsIGZvciBhbGlnbmluZyB0aGUgbGVmdCBvciByaWdodFxuICAgKiBzaWRlIG9mIHRoZSBpY29uIHdpdGggY29udGVudCBhYm92ZSBvciBiZWxvdywgd2l0aG91dCBydWluaW5nIHRoZSBib3JkZXJcbiAgICogc2l6ZSBhbmQgc2hhcGUpLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZWRnZTogUHJvcFR5cGVzLm9uZU9mKFsnZW5kJywgJ3N0YXJ0JywgZmFsc2VdKSxcbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVuY2hlY2tlZC5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG4gIC8qXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgc3RhdGUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgY2hlY2tlZCBzdGF0ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC5jaGVja2VkYCAoYm9vbGVhbikuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgY29tcG9uZW50IHByb3AgYHR5cGVgLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFN3aXRjaEJhc2U7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL19qc3goXCJwYXRoXCIsIHtcbiAgZDogXCJNMTkgNXYxNEg1VjVoMTRtMC0ySDVjLTEuMSAwLTIgLjktMiAydjE0YzAgMS4xLjkgMiAyIDJoMTRjMS4xIDAgMi0uOSAyLTJWNWMwLTEuMS0uOS0yLTItMnpcIlxufSksICdDaGVja0JveE91dGxpbmVCbGFuaycpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDNINWMtMS4xMSAwLTIgLjktMiAydjE0YzAgMS4xLjg5IDIgMiAyaDE0YzEuMTEgMCAyLS45IDItMlY1YzAtMS4xLS44OS0yLTItMnptLTkgMTRsLTUtNSAxLjQxLTEuNDFMMTAgMTQuMTdsNy41OS03LjU5TDE5IDhsLTkgOXpcIlxufSksICdDaGVja0JveCcpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDNINWMtMS4xIDAtMiAuOS0yIDJ2MTRjMCAxLjEuOSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMlY1YzAtMS4xLS45LTItMi0yem0tMiAxMEg3di0yaDEwdjJ6XCJcbn0pLCAnSW5kZXRlcm1pbmF0ZUNoZWNrQm94Jyk7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGVja2JveFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQ2hlY2tib3gnLCBzbG90KTtcbn1cbmNvbnN0IGNoZWNrYm94Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNoZWNrYm94JywgWydyb290JywgJ2NoZWNrZWQnLCAnZGlzYWJsZWQnLCAnaW5kZXRlcm1pbmF0ZScsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnc2l6ZVNtYWxsJywgJ3NpemVNZWRpdW0nXSk7XG5leHBvcnQgZGVmYXVsdCBjaGVja2JveENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hlY2tlZEljb25cIiwgXCJjb2xvclwiLCBcImljb25cIiwgXCJpbmRldGVybWluYXRlXCIsIFwiaW5kZXRlcm1pbmF0ZUljb25cIiwgXCJpbnB1dFByb3BzXCIsIFwic2l6ZVwiLCBcImNsYXNzTmFtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IFN3aXRjaEJhc2UgZnJvbSAnLi4vaW50ZXJuYWwvU3dpdGNoQmFzZSc7XG5pbXBvcnQgQ2hlY2tCb3hPdXRsaW5lQmxhbmtJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9DaGVja0JveE91dGxpbmVCbGFuayc7XG5pbXBvcnQgQ2hlY2tCb3hJY29uIGZyb20gJy4uL2ludGVybmFsL3N2Zy1pY29ucy9DaGVja0JveCc7XG5pbXBvcnQgSW5kZXRlcm1pbmF0ZUNoZWNrQm94SWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvSW5kZXRlcm1pbmF0ZUNoZWNrQm94JztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCBjaGVja2JveENsYXNzZXMsIHsgZ2V0Q2hlY2tib3hVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2NoZWNrYm94Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgaW5kZXRlcm1pbmF0ZSxcbiAgICBjb2xvcixcbiAgICBzaXplXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBpbmRldGVybWluYXRlICYmICdpbmRldGVybWluYXRlJywgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gXVxuICB9O1xuICBjb25zdCBjb21wb3NlZENsYXNzZXMgPSBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Q2hlY2tib3hVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VkQ2xhc3Nlcyk7XG59O1xuY29uc3QgQ2hlY2tib3hSb290ID0gc3R5bGVkKFN3aXRjaEJhc2UsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcm9vdFNob3VsZEZvcndhcmRQcm9wKHByb3ApIHx8IHByb3AgPT09ICdjbGFzc2VzJyxcbiAgbmFtZTogJ011aUNoZWNrYm94JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuaW5kZXRlcm1pbmF0ZSAmJiBzdHlsZXMuaW5kZXRlcm1pbmF0ZSwgc3R5bGVzW2BzaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF0sIG93bmVyU3RhdGUuY29sb3IgIT09ICdkZWZhdWx0JyAmJiBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlUmlwcGxlICYmIHtcbiAgJyY6aG92ZXInOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHtvd25lclN0YXRlLmNvbG9yID09PSAnZGVmYXVsdCcgPyB0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZUNoYW5uZWwgOiB0aGVtZS52YXJzLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbkNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eX0pYCA6IGFscGhhKG93bmVyU3RhdGUuY29sb3IgPT09ICdkZWZhdWx0JyA/IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSA6IHRoZW1lLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgIH1cbiAgfVxufSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2RlZmF1bHQnICYmIHtcbiAgW2AmLiR7Y2hlY2tib3hDbGFzc2VzLmNoZWNrZWR9LCAmLiR7Y2hlY2tib3hDbGFzc2VzLmluZGV0ZXJtaW5hdGV9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICB9LFxuICBbYCYuJHtjaGVja2JveENsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gIH1cbn0pKTtcbmNvbnN0IGRlZmF1bHRDaGVja2VkSWNvbiA9IC8qI19fUFVSRV9fKi9fanN4KENoZWNrQm94SWNvbiwge30pO1xuY29uc3QgZGVmYXVsdEljb24gPSAvKiNfX1BVUkVfXyovX2pzeChDaGVja0JveE91dGxpbmVCbGFua0ljb24sIHt9KTtcbmNvbnN0IGRlZmF1bHRJbmRldGVybWluYXRlSWNvbiA9IC8qI19fUFVSRV9fKi9fanN4KEluZGV0ZXJtaW5hdGVDaGVja0JveEljb24sIHt9KTtcbmNvbnN0IENoZWNrYm94ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2hlY2tib3goaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfaWNvbiRwcm9wcyRmb250U2l6ZSwgX2luZGV0ZXJtaW5hdGVJY29uJHByO1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDaGVja2JveCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNoZWNrZWRJY29uID0gZGVmYXVsdENoZWNrZWRJY29uLFxuICAgICAgY29sb3IgPSAncHJpbWFyeScsXG4gICAgICBpY29uOiBpY29uUHJvcCA9IGRlZmF1bHRJY29uLFxuICAgICAgaW5kZXRlcm1pbmF0ZSA9IGZhbHNlLFxuICAgICAgaW5kZXRlcm1pbmF0ZUljb246IGluZGV0ZXJtaW5hdGVJY29uUHJvcCA9IGRlZmF1bHRJbmRldGVybWluYXRlSWNvbixcbiAgICAgIGlucHV0UHJvcHMsXG4gICAgICBzaXplID0gJ21lZGl1bScsXG4gICAgICBjbGFzc05hbWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgaWNvbiA9IGluZGV0ZXJtaW5hdGUgPyBpbmRldGVybWluYXRlSWNvblByb3AgOiBpY29uUHJvcDtcbiAgY29uc3QgaW5kZXRlcm1pbmF0ZUljb24gPSBpbmRldGVybWluYXRlID8gaW5kZXRlcm1pbmF0ZUljb25Qcm9wIDogY2hlY2tlZEljb247XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBpbmRldGVybWluYXRlLFxuICAgIHNpemVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENoZWNrYm94Um9vdCwgX2V4dGVuZHMoe1xuICAgIHR5cGU6IFwiY2hlY2tib3hcIixcbiAgICBpbnB1dFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICAnZGF0YS1pbmRldGVybWluYXRlJzogaW5kZXRlcm1pbmF0ZVxuICAgIH0sIGlucHV0UHJvcHMpLFxuICAgIGljb246IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoaWNvbiwge1xuICAgICAgZm9udFNpemU6IChfaWNvbiRwcm9wcyRmb250U2l6ZSA9IGljb24ucHJvcHMuZm9udFNpemUpICE9IG51bGwgPyBfaWNvbiRwcm9wcyRmb250U2l6ZSA6IHNpemVcbiAgICB9KSxcbiAgICBjaGVja2VkSWNvbjogLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChpbmRldGVybWluYXRlSWNvbiwge1xuICAgICAgZm9udFNpemU6IChfaW5kZXRlcm1pbmF0ZUljb24kcHIgPSBpbmRldGVybWluYXRlSWNvbi5wcm9wcy5mb250U2l6ZSkgIT0gbnVsbCA/IF9pbmRldGVybWluYXRlSWNvbiRwciA6IHNpemVcbiAgICB9KSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2hlY2tib3gucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGNoZWNrZWQuXG4gICAqL1xuICBjaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNoZWNrZWQuXG4gICAqIEBkZWZhdWx0IDxDaGVja0JveEljb24gLz5cbiAgICovXG4gIGNoZWNrZWRJY29uOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGNoZWNrZWQgc3RhdGUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0Q2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IHdoZW4gdGhlIGNvbXBvbmVudCBpcyB1bmNoZWNrZWQuXG4gICAqIEBkZWZhdWx0IDxDaGVja0JveE91dGxpbmVCbGFua0ljb24gLz5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBhcHBlYXJzIGluZGV0ZXJtaW5hdGUuXG4gICAqIFRoaXMgZG9lcyBub3Qgc2V0IHRoZSBuYXRpdmUgaW5wdXQgZWxlbWVudCB0byBpbmRldGVybWluYXRlIGR1ZVxuICAgKiB0byBpbmNvbnNpc3RlbnQgYmVoYXZpb3IgYWNyb3NzIGJyb3dzZXJzLlxuICAgKiBIb3dldmVyLCB3ZSBzZXQgYSBgZGF0YS1pbmRldGVybWluYXRlYCBhdHRyaWJ1dGUgb24gdGhlIGBpbnB1dGAuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBpbmRldGVybWluYXRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluZGV0ZXJtaW5hdGUuXG4gICAqIEBkZWZhdWx0IDxJbmRldGVybWluYXRlQ2hlY2tCb3hJY29uIC8+XG4gICAqL1xuICBpbmRldGVybWluYXRlSWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHN0YXRlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgY2hlY2tlZCBzdGF0ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC5jaGVja2VkYCAoYm9vbGVhbikuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGNoZWNrYm94IHN0eWxpbmcuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQuIFRoZSBET00gQVBJIGNhc3RzIHRoaXMgdG8gYSBzdHJpbmcuXG4gICAqIFRoZSBicm93c2VyIHVzZXMgXCJvblwiIGFzIHRoZSBkZWZhdWx0IHZhbHVlLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDaGVja2JveDsiLCJjb25zdCBkZWVwT3JhbmdlID0ge1xuICA1MDogJyNmYmU5ZTcnLFxuICAxMDA6ICcjZmZjY2JjJyxcbiAgMjAwOiAnI2ZmYWI5MScsXG4gIDMwMDogJyNmZjhhNjUnLFxuICA0MDA6ICcjZmY3MDQzJyxcbiAgNTAwOiAnI2ZmNTcyMicsXG4gIDYwMDogJyNmNDUxMWUnLFxuICA3MDA6ICcjZTY0YTE5JyxcbiAgODAwOiAnI2Q4NDMxNScsXG4gIDkwMDogJyNiZjM2MGMnLFxuICBBMTAwOiAnI2ZmOWU4MCcsXG4gIEEyMDA6ICcjZmY2ZTQwJyxcbiAgQTQwMDogJyNmZjNkMDAnLFxuICBBNzAwOiAnI2RkMmMwMCdcbn07XG5leHBvcnQgZGVmYXVsdCBkZWVwT3JhbmdlOyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBBdmF0YXIgZnJvbSAnQG11aS9tYXRlcmlhbC9BdmF0YXInO1xuaW1wb3J0IHsgZGVlcE9yYW5nZSB9IGZyb20gXCJAbXVpL21hdGVyaWFsL2NvbG9yc1wiO1xuaW1wb3J0IHsgY3JlYXRlVGhlbWUsIFRoZW1lUHJvdmlkZXIgfSBmcm9tICdAbXVpL21hdGVyaWFsL3N0eWxlcyc7XG5cbmNvbnN0IHRoZW1lID0gY3JlYXRlVGhlbWUoKTtcblxuLy9hdmF0YXLjgYzlt6bjgavjgYLjgovjg6Hjg4Pjgrvjg7zjgrjvvIjku5bkurrvvIlcbmV4cG9ydCBjb25zdCBNZXNzYWdlTGVmdCA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBwcm9wcy5tZXNzYWdlID8gcHJvcHMubWVzc2FnZSA6IFwibm8gbWVzc2FnZVwiO1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IHByb3BzLnRpbWVzdGFtcCA/IHByb3BzLnRpbWVzdGFtcCA6IFwiXCI7XG4gICAgY29uc3QgcGhvdG9VUkwgPSBwcm9wcy5waG90b1VSTCA/IHByb3BzLnBob3RvVVJMIDogXCJkdW1teS5qc1wiO1xuICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gcHJvcHMuZGlzcGxheU5hbWUgPyBwcm9wcy5kaXNwbGF5TmFtZSA6IFwi5ZCN54Sh44GX44GV44KTXCI7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIDxUaGVtZVByb3ZpZGVyIHRoZW1lPXt0aGVtZX0+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBkaXNwbGF5OiBcImZsZXhcIiB9fT5cbiAgICAgICAgICAgICAgICAgICAgPEF2YXRhciBzdHlsZT17eyBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQoZGVlcE9yYW5nZVs1MDBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZGVlcE9yYW5nZVs1MDBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoZW1lLnNwYWNpbmcoNCksXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoZW1lLnNwYWNpbmcoNCl9fVxuICAgICAgICAgICAgICAgICAgICAgICAgYWx0PXtkaXNwbGF5TmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17cGhvdG9VUkx9XG4gICAgICAgICAgICAgICAgICAgID48L0F2YXRhcj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luTGVmdDogXCIyMHB4XCIgfX0+e2Rpc3BsYXlOYW1lfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLCBtYXJnaW5MZWZ0OiBcIjIwcHhcIiwgbWFyZ2luQm90dG9tOiBcIjEwcHhcIiwgcGFkZGluZzogXCIxMHB4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiNBOERERkRcIiwgd2lkdGg6IFwiNjAlXCIsIHRleHRBbGlnbjogXCJsZWZ0XCIsIGZvbnQ6IFwiNDAwIC45ZW0gJ09wZW4gU2FucycsIHNhbnMtc2VyaWZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkICM5N0M2RTNcIiwgYm9yZGVyUmFkaXVzOiBcIjEwcHhcIiB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT17eyBwYWRkaW5nOiAwLCBtYXJnaW46IDB9fT57bWVzc2FnZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIuODVlbVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBcIjMwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IFwiMTBweFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3R0b206IFwiLTNweFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodDogXCI1cHhcIiB9fT57dGltZXN0YW1wfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9UaGVtZVByb3ZpZGVyPlxuICAgICAgICA8Lz5cbiAgICApO1xufTtcblxuZXhwb3J0IGNvbnN0IE1lc3NhZ2VSaWdodCA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBwcm9wcy5tZXNzYWdlID8gcHJvcHMubWVzc2FnZSA6IFwibm8gbWVzc2FnZVwiO1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IHByb3BzLnRpbWVzdGFtcCA/IHByb3BzLnRpbWVzdGFtcCA6IFwiXCI7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBzdHlsZT17eyBkaXNwbGF5OiBcImZsZXhcIiwganVzdGlmeUNvbnRlbnQ6IFwiZmxleC1lbmRcIiB9fT5cbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgcG9zaXRpb246IFwicmVsYXRpdmVcIiwgbWFyZ2luUmlnaHQ6IFwiMjBweFwiLCBtYXJnaW5Cb3R0b206IFwiMTBweFwiLCBwYWRkaW5nOiBcIjEwcHhcIiwgYmFja2dyb3VuZENvbG9yOiBcIiNmOGU4OTZcIixcbiAgICAgICAgICAgICAgICB3aWR0aDogXCI2MCVcIiwgdGV4dEFsaWduOiBcImxlZnRcIiwgZm9udDogXCI0MDAgLjllbSAnT3BlbiBTYW5zJywgc2Fucy1zZXJpZlwiLCBib3JkZXI6IFwiMXB4IHNvbGlkICNkZmQwODdcIixcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IFwiMTBweFwiIH19PlxuICAgICAgICAgICAgICAgIDxwIHN0eWxlPXt7IHBhZGRpbmc6IDAsIG1hcmdpbjogMCB9fT57bWVzc2FnZX08L3A+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIuODVlbVwiLFxuICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBcIjMwMFwiLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IFwiMTBweFwiLFxuICAgICAgICAgICAgICAgICAgICBib3R0b206IFwiLTNweFwiLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogXCI1cHhcIiB9fT57dGltZXN0YW1wfTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59OyIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUGFwZXIgZnJvbSAnQG11aS9tYXRlcmlhbC9QYXBlcic7XG5pbXBvcnQgeyBNZXNzYWdlTGVmdCwgTWVzc2FnZVJpZ2h0IH0gZnJvbSBcIi4vQ2hhdERpc3BsYXlNZXNzYWdlXCI7XG5pbXBvcnQgRnVuY3Rpb25VdGlsIGZyb20gXCIuLi91dGlscy9GdW5jdGlvblV0aWxcIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCBUZXh0RmllbGQgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvVGV4dEZpZWxkXCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCJAbXVpL21hdGVyaWFsL0ljb25CdXR0b25cIjtcbmltcG9ydCBTZW5kSWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9TZW5kXCI7XG5pbXBvcnQgeyBjcmVhdGVUaGVtZSwgVGhlbWVQcm92aWRlciB9IGZyb20gXCJAbXVpL21hdGVyaWFsL3N0eWxlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDaGF0RGlzcGxheSgpIHtcbiAgICBjb25zdCB0aGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5cbiAgICBjb25zdCBbaXNBbmNob3JPcGVuLCBzZXRJc0FuY2hvck9wZW5dID0gdXNlU3RhdGUodHJ1ZSk7IC8vIFN0YXRlIHRvIHRyYWNrIGlmIGFuY2hvciBpcyBvcGVuXG4gICAgY29uc3QgW21lc3NhZ2VzLCBzZXRNZXNzYWdlc10gPSB1c2VTdGF0ZShbXSk7XG4gICAgY29uc3QgW2luaXRpYWxQcm9tcHRSZW5kZXJlZCwgc2V0SW5pdGlhbFByb21wdFJlbmRlcmVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAgIC8qKlxuICAgICAqIEVhY2ggbWVzc2FnZSBpcyBzZXJpYWxpemVkIGludG8gYSBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdCBiZWZvcmUgc3RvcmluZyB0aGVtIGluIGxvY2FsU3RvcmFnZS5cbiAgICAgKiBXaGVuIHJldHJpZXZpbmcgbWVzc2FnZXMgZnJvbSBsb2NhbFN0b3JhZ2UsIGVhY2ggb2JqZWN0IGlzIGRlc2VyaWFsaXplZCBiYWNrIGludG8gYSBSZWFjdCBlbGVtZW50XG4gICAgICogYmVmb3JlIHNldHRpbmcgdGhlbSBpbiBzdGF0ZS5NYWtlIHN1cmUgdG8gYWRqdXN0IHRoZSBzZXJpYWxpemF0aW9uIGFuZCBkZXNlcmlhbGl6YXRpb24gbG9naWMgYmFzZWRcbiAgICAgKiBvbiB0aGUgc3RydWN0dXJlIG9mIHlvdXIgTWVzc2FnZUxlZnQgYW5kIE1lc3NhZ2VSaWdodCBjb21wb25lbnRzLiBUaGUga2V5IHBvaW50IGlzIHRvIGVuc3VyZSB0aGF0XG4gICAgICogeW91J3JlIHN0b3JpbmcgYW5kIHJldHJpZXZpbmcgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzIGluIGxvY2FsU3RvcmFnZSwgYW5kIHRoZW4gY29udmVydGluZyB0aGVtIGJhY2tcbiAgICAgKiBpbnRvIFJlYWN0IGVsZW1lbnRzIHdoZW4gcmVuZGVyaW5nLlxuICAgICAqL1xuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0b3JlZE1lc3NhZ2VzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY2hhdE1lc3NhZ2VzJykpO1xuICAgICAgICBpZiAoc3RvcmVkTWVzc2FnZXMpIHtcbiAgICAgICAgICAgIC8vIERlc2VyaWFsaXplIGVhY2ggbWVzc2FnZSBiZWZvcmUgc2V0dGluZyB0aGVtIGluIHN0YXRlXG4gICAgICAgICAgICBjb25zdCBkZXNlcmlhbGl6ZWRNZXNzYWdlcyA9IHN0b3JlZE1lc3NhZ2VzLm1hcChtZXNzYWdlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8TWVzc2FnZVJpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e21lc3NhZ2Uua2V5fVxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZT17bWVzc2FnZS5tZXNzYWdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wPXttZXNzYWdlLnRpbWVzdGFtcH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvVVJMPXttZXNzYWdlLnBob3RvVVJMfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU9e21lc3NhZ2UuZGlzcGxheU5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBhdmF0YXJEaXNwPXttZXNzYWdlLmF2YXRhckRpc3B9XG4gICAgICAgICAgICAgICAgICAgIC8+O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8TWVzc2FnZUxlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17bWVzc2FnZS5rZXl9XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlPXttZXNzYWdlLm1lc3NhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA9e21lc3NhZ2UudGltZXN0YW1wfVxuICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9VUkw9e21lc3NhZ2UucGhvdG9VUkx9XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZT17bWVzc2FnZS5kaXNwbGF5TmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGF2YXRhckRpc3A9e21lc3NhZ2UuYXZhdGFyRGlzcH1cbiAgICAgICAgICAgICAgICAgICAgLz47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZXRNZXNzYWdlcyhkZXNlcmlhbGl6ZWRNZXNzYWdlcyk7XG4gICAgICAgICAgICBzZXRDaGF0U2Nyb2xsKCk7XG4gICAgICAgIH1cbiAgICB9LCBbXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAvLyBTZXJpYWxpemUgZWFjaCBtZXNzYWdlIGJlZm9yZSBzdG9yaW5nIHRoZW0gaW4gbG9jYWxTdG9yYWdlXG4gICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRNZXNzYWdlcyA9IG1lc3NhZ2VzLm1hcCgobWVzc2FnZSwgaW5kZXgpID0+ICh7XG4gICAgICAgICAgICB0eXBlOiBtZXNzYWdlLnR5cGUgPT09IE1lc3NhZ2VSaWdodCA/ICdyaWdodCcgOiAnbGVmdCcsXG4gICAgICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZS5wcm9wcy5tZXNzYWdlLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBtZXNzYWdlLnByb3BzLnRpbWVzdGFtcCxcbiAgICAgICAgICAgIHBob3RvVVJMOiBtZXNzYWdlLnByb3BzLnBob3RvVVJMLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IG1lc3NhZ2UucHJvcHMuZGlzcGxheU5hbWUsXG4gICAgICAgICAgICBhdmF0YXJEaXNwOiBtZXNzYWdlLnByb3BzLmF2YXRhckRpc3BcbiAgICAgICAgfSkpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY2hhdE1lc3NhZ2VzJywgSlNPTi5zdHJpbmdpZnkoc2VyaWFsaXplZE1lc3NhZ2VzKSk7XG4gICAgfSwgW21lc3NhZ2VzXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoaXNBbmNob3JPcGVuICYmICFpbml0aWFsUHJvbXB0UmVuZGVyZWQpIHtcbiAgICAgICAgICAgIGNyZWF0ZVByb21wdFJlc3BvbnNlKEZ1bmN0aW9uVXRpbC5yYW5kb21HcmVldGluZygpKTtcbiAgICAgICAgICAgIHNldEluaXRpYWxQcm9tcHRSZW5kZXJlZCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH0sIFtpc0FuY2hvck9wZW4sIG1lc3NhZ2VzLCBpbml0aWFsUHJvbXB0UmVuZGVyZWRdKTtcblxuICAgIGZ1bmN0aW9uIGdldEF4aW9zQ29uZmlndXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpbWVvdXQ6IDYwMDAsXG4gICAgICAgICAgICBzaWduYWw6IEFib3J0U2lnbmFsLnRpbWVvdXQoNjAwMClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBvblByb21wdFN1Ym1pdChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGV0IHByb21wdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhbmRhcmQtdGV4dCcpO1xuICAgICAgICBsZXQgcHJvbXB0ID0gcHJvbXB0RWxlbWVudC52YWx1ZS50cmltKCk7XG4gICAgICAgIGlmIChwcm9tcHQgIT09IG51bGwgJiYgcHJvbXB0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicHJvbXB0OiBcIiArIHByb21wdCk7XG4gICAgICAgICAgICBjcmVhdGVQcm9tcHRNZXNzYWdlKHByb21wdCk7XG4gICAgICAgICAgICBwcm9tcHRFbGVtZW50LnZhbHVlID0gJyc7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGhhbmRsZUNoYXRQcm9tcHQocHJvbXB0KTtcbiAgICAgICAgICAgIGNyZWF0ZVByb21wdFJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVByb21wdE1lc3NhZ2UocHJvbXB0KSB7XG4gICAgICAgIGNvbnN0IHByb21wdE1lc3NhZ2UgPSA8TWVzc2FnZVJpZ2h0XG4gICAgICAgICAgICBtZXNzYWdlPXtwcm9tcHR9XG4gICAgICAgICAgICB0aW1lc3RhbXA9e0Z1bmN0aW9uVXRpbC5nZXRDdXJyZW50VGltZSgpfVxuICAgICAgICAgICAgcGhvdG9VUkw9XCJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS0vQU9oMTRHaTR2a0tZbGZyYkowUUxKVGdfRExqY1l5eUs3ZllvV1JwejJyNHM9czk2LWNcIlxuICAgICAgICAgICAgZGlzcGxheU5hbWU9XCJNZVwiXG4gICAgICAgICAgICBhdmF0YXJEaXNwPXt0cnVlfVxuICAgICAgICAvPjtcbiAgICAgICAgc2V0TWVzc2FnZXMobWVzc2FnZXMgPT4gW1xuICAgICAgICAgICAgLi4ubWVzc2FnZXMsXG4gICAgICAgICAgICBwcm9tcHRNZXNzYWdlXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVByb21wdFJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICAgIGNvbnN0IHByb21wdFJlc3BvbnNlID0gPE1lc3NhZ2VMZWZ0XG4gICAgICAgICAgICBtZXNzYWdlPXtyZXNwb25zZX1cbiAgICAgICAgICAgIHRpbWVzdGFtcD17RnVuY3Rpb25VdGlsLmdldEN1cnJlbnRUaW1lKCl9XG4gICAgICAgICAgICBwaG90b1VSTD1cImh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hLS9BT2gxNEdpNHZrS1lsZnJiSjBRTEpUZ19ETGpjWXl5SzdmWW9XUnB6MnI0cz1zOTYtY1wiXG4gICAgICAgICAgICBkaXNwbGF5TmFtZT1cIlZpa2lcIlxuICAgICAgICAgICAgYXZhdGFyRGlzcD17dHJ1ZX1cbiAgICAgICAgLz47XG4gICAgICAgIHNldE1lc3NhZ2VzKG1lc3NhZ2VzID0+IFtcbiAgICAgICAgICAgIC4uLm1lc3NhZ2VzLFxuICAgICAgICAgICAgcHJvbXB0UmVzcG9uc2VcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlQ2hhdFByb21wdChwcm9tcHQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KGAvb3BlbnNxdWFyZS9hcGkvcmFnL3lvdXR1YmUvY2hhdD9wcm9tcHQ9JHtwcm9tcHR9YCwgZ2V0QXhpb3NDb25maWd1cmF0aW9uKCkpO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0Q2hhdFNjcm9sbCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3NldHRpbmcgc2Nyb2xsJyk7XG4gICAgICAgIGNvbnN0IGNoYXRib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdmlraS1jaGF0Jyk7XG4gICAgICAgIGNoYXRib3guc2Nyb2xsVG9wID0gY2hhdGJveC5zY3JvbGxIZWlnaHQgLSBjaGF0Ym94LmNsaWVudEhlaWdodDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IHdpZHRoOiBcIjUwdndcIiwgaGVpZ2h0OiBcIjEwMHZoXCIsIGRpc3BsYXk6IFwiZmxleFwiLCBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLCBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIiB9fT5cbiAgICAgICAgICAgIDxQYXBlciBpZD17J3Zpa2ktY2hhdCd9IG9uQ2xpY2s9e3NldENoYXRTY3JvbGx9PlxuICAgICAgICAgICAgICAgIDxQYXBlciBpZD1cInN0eWxlLTFcIiBzeD17eyB3aWR0aDogXCJjYWxjKCAxMDAlIC0gMjBweCApXCIsIG1hcmdpbjogMTAsIG92ZXJmbG93WTogXCJzY3JvbGxcIiwgaGVpZ2h0OiBcImNhbGMoIDEwMCUgLSA4MHB4IClcIiB9fT5cbiAgICAgICAgICAgICAgICAgICAge21lc3NhZ2VzLm1hcCgobWVzc2FnZSwgaW5kZXgpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYga2V5PXtpbmRleH0+e21lc3NhZ2V9PC9kaXY+IC8vIFdyYXAgZWFjaCBtZXNzYWdlIGluIGEgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC9QYXBlcj5cbiAgICAgICAgICAgICAgICA8VGhlbWVQcm92aWRlciB0aGVtZT17dGhlbWV9PlxuICAgICAgICAgICAgICAgICAgICA8Zm9ybSBzdHlsZT17eyBkaXNwbGF5OiBcImZsZXhcIiwganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsIHdpZHRoOiBcIjk1JVwiLCBtYXJnaW46IGAke3RoZW1lLnNwYWNpbmcoMCl9IGF1dG9gIH19IG5vVmFsaWRhdGUgYXV0b0NvbXBsZXRlPVwib2ZmXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VGV4dEZpZWxkIHN0eWxlPXt7IHdpZHRoOiBcIjEwMCVcIiB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cInN0YW5kYXJkLXRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIkNoYXQgd2l0aCBWaWtpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e2UgPT4gb25Qcm9tcHRTdWJtaXQoZSl9IHR5cGU9XCJzdWJtaXRcIiB2YXJpYW50PVwiY29udGFpbmVkXCIgY29sb3I9XCJwcmltYXJ5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbmRJY29uIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgICAgIDwvVGhlbWVQcm92aWRlcj5cbiAgICAgICAgICAgIDwvUGFwZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQm94IGZyb20gXCJAbXVpL21hdGVyaWFsL0JveFwiO1xuaW1wb3J0IENoYXREaXNwbGF5IGZyb20gXCIuL0NoYXREaXNwbGF5XCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCJAbXVpL21hdGVyaWFsL0J1dHRvblwiO1xuaW1wb3J0IHtEcmF3ZXJ9IGZyb20gXCJAbXVpL21hdGVyaWFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENoYXREaXNwbGF5QW5jaG9yKCkge1xuICAgIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoeyByaWdodDogZmFsc2UgfSk7XG5cbiAgICBjb25zdCB0b2dnbGVEcmF3ZXIgPSAoYW5jaG9yLCBvcGVuKSA9PiAoZXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyAmJiAoZXZlbnQua2V5ID09PSAnVGFiJyB8fCBldmVudC5rZXkgPT09ICdTaGlmdCcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2V0U3RhdGUoeyAuLi5zdGF0ZSwgW2FuY2hvcl06IG9wZW4gfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNoYXQgPSAoYW5jaG9yKSA9PiAoXG4gICAgICAgIDxCb3ggcm9sZT1cInByZXNlbnRhdGlvblwiPlxuICAgICAgICAgICAgPENoYXREaXNwbGF5IC8+XG4gICAgICAgIDwvQm94PlxuICAgICk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50IGtleT17J3JpZ2h0J30+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXt0b2dnbGVEcmF3ZXIoJ3JpZ2h0JywgdHJ1ZSl9PkNoYXQ8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8RHJhd2VyXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvcj0ncmlnaHQnXG4gICAgICAgICAgICAgICAgICAgIG9wZW49e3N0YXRlWydyaWdodCddfVxuICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXt0b2dnbGVEcmF3ZXIoJ3JpZ2h0JywgZmFsc2UpfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2NoYXQoJ3JpZ2h0Jyl9XG4gICAgICAgICAgICAgICAgPC9EcmF3ZXI+XG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59IiwiaW1wb3J0IHt1c2VFZmZlY3QsIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQgJy4uLy4uL2Nzcy9wbGF0Zm9ybS1vcHRpb25zLmNzcyc7XG5pbXBvcnQge3N0eWxlZH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvc3R5bGVzXCI7XG5pbXBvcnQgUGFwZXIgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvUGFwZXJcIjtcbmltcG9ydCBHcmlkIGZyb20gXCJAbXVpL21hdGVyaWFsL0dyaWRcIjtcbmltcG9ydCBZb3VUdWJlQ2FyZCBmcm9tICcuL1lvdVR1YmVDYXJkJztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlXCI7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tIFwiQG11aS9tYXRlcmlhbC9JY29uQnV0dG9uXCI7XG5pbXBvcnQgU2VhcmNoSWNvbiBmcm9tIFwiQG11aS9pY29ucy1tYXRlcmlhbC9TZWFyY2hcIjtcbmltcG9ydCBEaXZpZGVyIGZyb20gXCJAbXVpL21hdGVyaWFsL0RpdmlkZXJcIjtcbmltcG9ydCBCb3ggZnJvbSBcIkBtdWkvbWF0ZXJpYWwvQm94XCI7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tIFwiQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5XCI7XG5pbXBvcnQgTGluZWFyUHJvZ3Jlc3MsIHsgbGluZWFyUHJvZ3Jlc3NDbGFzc2VzIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9MaW5lYXJQcm9ncmVzcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFlvdVR1YmVWaWRlb0NhcmQgZnJvbSBcIi4vWW91VHViZVZpZGVvQ2FyZFwiO1xuaW1wb3J0IHtDaGVja2JveCwgRm9ybUNvbnRyb2xMYWJlbH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWxcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDaGF0RGlzcGxheSBmcm9tIFwiLi9DaGF0RGlzcGxheVwiO1xuaW1wb3J0IENoYXREaXNwbGF5QW5jaG9yIGZyb20gXCIuL0NoYXREaXNwbGF5QW5jaG9yXCI7XG5cbmNvbnN0IFlvdVR1YmVQbGF0Zm9ybSA9ICh7aXNTZWxlY3RlZH0pID0+IHtcbiAgICBjb25zdCBrYWZrYVRhc2sgPSBcInZpZGVvLXNlYXJjaFwiO1xuICAgIGNvbnN0IFt2aWRlb0lkLCBzZXRWaWRlb0lkXSA9IHVzZVN0YXRlKCcnKTtcbiAgICBjb25zdCBbdXBkYXRlZFZpZGVvSWQsIHNldFVwZGF0ZWRWaWRlb0lkXSA9IHVzZVN0YXRlKHZpZGVvSWQpO1xuICAgIGNvbnN0IFtrYWZrYVByb2dyZXNzLCBzZXRLYWZrYVByb2dyZXNzXSA9IHVzZVN0YXRlKCdTVEFSVElORycpO1xuICAgIGNvbnN0IFtrYWZrYVBlcmNlbnRhZ2UsIHNldEthZmthUGVyY2VudGFnZV0gPSB1c2VTdGF0ZSgwKTtcbiAgICBjb25zdCBbaW5Qcm9ncmVzcywgc2V0SW5Qcm9ncmVzc10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgICAvLyBzZWFyY2hcbiAgICBjb25zdCBbc2VhcmNoUXVlcnksIHNldFNlYXJjaFF1ZXJ5XSA9IHVzZVN0YXRlKCcnKTtcbiAgICBjb25zdCBbeW91VHViZVNlYXJjaFJlc3VsdHMsIHNldFlvdVR1YmVTZWFyY2hSZXN1bHRzXSA9IHVzZVN0YXRlKFtdKTtcblxuICAgIC8vIGNoZWNrYm94XG4gICAgY29uc3QgW2NoZWNrZWQsIHNldENoZWNrZWRdID0gUmVhY3QudXNlU3RhdGUodHJ1ZSk7XG4gICAgY29uc3QgW3NlYXJjaEhpbnQsIHNldFNlYXJjaEhpbnRdID0gUmVhY3QudXNlU3RhdGUoJ0VudGVyIFZpZGVvSWQnKTtcblxuICAgIGNvbnN0IFVOREVSX1NDT1JFID0gJ18nO1xuICAgIGNvbnN0IEVNUFRZX1NQQUNFID0gJyAnO1xuXG4gICAgY29uc3QgSXRlbSA9IHN0eWxlZChQYXBlcikoKHsgdGhlbWUgfSkgPT4gKHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdkYXJrJyA/ICcjMUEyMDI3JyA6ICcjZDhlY2YzJyxcbiAgICAgICAgLi4udGhlbWUudHlwb2dyYXBoeS5ib2R5MixcbiAgICAgICAgcGFkZGluZzogdGhlbWUuc3BhY2luZyg1KSxcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgICBtYXhXaWR0aDogJzEwMCUnLFxuICAgICAgICBwYWxldHRlOntcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHtcbiAgICAgICAgICAgICAgICB0ZXJ0aWFyeTogJyNkOGVjZjMnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICAgIHByaW1hcnk6ICcjZmZmJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSkpO1xuXG4gICAgY29uc3QgQm9yZGVyTGluZWFyUHJvZ3Jlc3MgPSBzdHlsZWQoTGluZWFyUHJvZ3Jlc3MpKCh7IHRoZW1lIH0pID0+ICh7XG4gICAgICAgIGhlaWdodDogMTAsXG4gICAgICAgIGJvcmRlclJhZGl1czogNSxcbiAgICAgICAgW2AmLiR7bGluZWFyUHJvZ3Jlc3NDbGFzc2VzLmNvbG9yUHJpbWFyeX1gXToge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gMjAwIDogODAwXSxcbiAgICAgICAgfSxcbiAgICAgICAgW2AmIC4ke2xpbmVhclByb2dyZXNzQ2xhc3Nlcy5iYXJ9YF06IHtcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogNSxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gJyMxYTkwZmYnIDogJyMzMDhmZTgnLFxuICAgICAgICB9LFxuICAgIH0pKTtcblxuICAgIGFzeW5jIGZ1bmN0aW9uIG9uU2VhcmNoU3VibWl0KGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsZXQgcXVlcnlFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3lvdXR1YmVTZWFyY2gnKTtcbiAgICAgICAgbGV0IHF1ZXJ5ID0gcXVlcnlFbGVtZW50LnZhbHVlLnRyaW0oKTtcbiAgICAgICAgaWYgKHF1ZXJ5ICE9PSBudWxsICYmIHF1ZXJ5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNldFNlYXJjaFF1ZXJ5KHNlYXJjaFF1ZXJ5KTtcbiAgICAgICAgICAgIHF1ZXJ5RWxlbWVudC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgaWYgKCFjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgaGFuZGxlVmVjdG9yWW91VHViZVNlYXJjaCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBuZWVkIHRvIGhhbmRsZSBzZWFyY2hlcyB3aXRoIGthZmthIHdoZW4gdmlkZW8gaXMgbm90IHByZXNlbnQgaW4gc3RvcmFnZS5cbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIG9mIGxvbmcgcHJvY2VzcyBvZiBjcmVhdGluZyBlbWJlZGRpbmdzLCB0cmFuc2NyaXB0IGFuZCBzZWdtZW50cy5cbiAgICAgICAgICAgICAgICBhd2FpdCBoYW5kbGVPcGVuU2VhcmNoRm9yWW91VHViZVZpZGVvSWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgYXN5bmMgZnVuY3Rpb24gb25JbnB1dFN1Ym1pdCgpIHtcbiAgICAgICAgc2V0VXBkYXRlZFZpZGVvSWQodmlkZW9JZCk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd5b3V0dWJlU2VhcmNoJykudmFsdWUgPSAnJztcbiAgICAgICAgY29uc3QgeW91dHViZVNlYXJjaFJlc3BvbnNlID0gYXdhaXQgaGFuZGxlT3BlblNlYXJjaEZvcllvdVR1YmVWaWRlb0lkKCk7XG4gICAgICAgIHNldFZpZGVvSWQoJycpO1xuICAgICAgICBjb25zdCB5b3V0dWJlUGxhdGZvcm1PYmplY3QgPSB5b3V0dWJlU2VhcmNoUmVzcG9uc2UuZGF0YTtcbiAgICAgICAgbGV0IGxvY2F0aW9uVXJsID0geW91dHViZVNlYXJjaFJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gICAgICAgIGNvbnNvbGUubG9nKGxvY2F0aW9uVXJsKTtcblxuICAgICAgICBpZiAoeW91dHViZVBsYXRmb3JtT2JqZWN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwcm9jZXNzaW5nIHJlcXVlc3QnKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGB1cGRhdGUgYXQgdXJsOiAke2xvY2F0aW9uVXJsfWApO1xuXG4gICAgICAgICAgICAvLyBjYWxsIGxvY2F0aW9uIGVuZHBvaW50IGZvciBrYWZrYSBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKGxvY2F0aW9uVXJsKSB7XG4gICAgICAgICAgICAgICAgc2V0SW5Qcm9ncmVzcyh0cnVlKTtcblxuICAgICAgICAgICAgICAgIGxvY2F0aW9uVXJsID0gbG9jYXRpb25VcmwucmVwbGFjZShcImh0dHA6Ly9sb2NhbGhvc3Q6ODA4MVwiLCBcIi9vcGVuc2VudG9wL2FwaVwiKTtcbiAgICAgICAgICAgICAgICBsZXQga2Fma2FQcm9ncmVzc1Jlc3BvbnNlID0gYXdhaXQgaGFuZGxlS2Fma2FQb2xsKGxvY2F0aW9uVXJsKTtcbiAgICAgICAgICAgICAgICBsZXQgdGFza1BlcmNlbnRhZ2UgPSBrYWZrYVByb2dyZXNzUmVzcG9uc2UuZGF0YVsncGVyY2VudGFnZUNvbXBsZXRlJ107XG4gICAgICAgICAgICAgICAgbGV0IHRhc2tTdGF0dXMgPSBrYWZrYVByb2dyZXNzUmVzcG9uc2UuZGF0YVsnc3RhdHVzJ107XG4gICAgICAgICAgICAgICAgc2V0S2Fma2FQZXJjZW50YWdlKHRhc2tQZXJjZW50YWdlKTtcbiAgICAgICAgICAgICAgICBzZXRLYWZrYVByb2dyZXNzKHRhc2tTdGF0dXMpO1xuXG4gICAgICAgICAgICAgICAgbGV0IGludGVydmFsSWQgPSBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGthZmthUHJvZ3Jlc3NSZXNwb25zZSA9IGF3YWl0IGhhbmRsZUthZmthUG9sbChsb2NhdGlvblVybCk7XG4gICAgICAgICAgICAgICAgICAgIHRhc2tQZXJjZW50YWdlID0ga2Fma2FQcm9ncmVzc1Jlc3BvbnNlLmRhdGFbJ3BlcmNlbnRhZ2VDb21wbGV0ZSddO1xuICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdHVzID0ga2Fma2FQcm9ncmVzc1Jlc3BvbnNlLmRhdGFbJ3N0YXR1cyddO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRhc2tTdGF0dXMgIT09IHVuZGVmaW5lZCAmJiB0YXNrU3RhdHVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0S2Fma2FQZXJjZW50YWdlKHRhc2tQZXJjZW50YWdlICsgMC4xKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0S2Fma2FQcm9ncmVzcyh0YXNrU3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGFza1N0YXR1cyA9PT0gJ0ZJTklTSEVEJykge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0sIDEwMDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvcm1hdHMgdGhlIEthZmthIHByb2dyZXNzIG1lc3NhZ2UgdG8gYSBuaWNlbHkgcmVhZGFibGUgcmVwcmVzZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSB0aGUgbWVzc2FnZSBmcm9tIGthZmthIHByb2R1Y2VyXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzbGlnaHRseSBtb3JlIGFwcGVhbGluZyBtZXNzYWdlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ybWF0S2Fma2FNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoVU5ERVJfU0NPUkUpKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlQWxsKFVOREVSX1NDT1JFLCBFTVBUWV9TUEFDRSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2Uuc3Vic3RyaW5nKDAsIDEpLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgIC5jb25jYXQobWVzc2FnZS5zdWJzdHJpbmcoMSwgbWVzc2FnZS5sZW5ndGgpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHtcbiAgICAgICAgc2V0U2VhcmNoUXVlcnkoZS50YXJnZXQudmFsdWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEF4aW9zQ29uZmlndXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpbWVvdXQ6IDMwMDAsXG4gICAgICAgICAgICBzaWduYWw6IEFib3J0U2lnbmFsLnRpbWVvdXQoNjAwMClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyh5b3VUdWJlU2VhcmNoUmVzdWx0cy5kYXRhKTtcbiAgICB9LCBbeW91VHViZVNlYXJjaFJlc3VsdHMuZGF0YV0pO1xuXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGUpID0+IHtcbiAgICAgICAgbGV0IGlzQ2hlY2tlZCA9IGUudGFyZ2V0LmNoZWNrZWQ7XG4gICAgICAgIHNldENoZWNrZWQoaXNDaGVja2VkKTtcbiAgICAgICAgaWYgKGlzQ2hlY2tlZCkge1xuICAgICAgICAgICAgc2V0U2VhcmNoSGludCgnRW50ZXIgVmlkZW9JZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0U2VhcmNoSGludCgnRW50ZXIgU2VhcmNoIFF1ZXJ5Jyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlVmVjdG9yWW91VHViZVNlYXJjaCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICBheGlvcy5nZXQoYC9vcGVuc3F1YXJlL2FwaS95b3V0dWJlL2VuL3RyYW5zY3JpcHRzL3NlYXJjaD9xPSR7c2VhcmNoUXVlcnl9YCwgZ2V0QXhpb3NDb25maWd1cmF0aW9uKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0WW91VHViZVNlYXJjaFJlc3VsdHMocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBoYW5kbGVLYWZrYVBvbGwobG9jYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgc2V0VGltZW91dCggKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgICAgICAgIGF4aW9zLmdldChsb2NhdGlvbiwgZ2V0QXhpb3NDb25maWd1cmF0aW9uKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgbG9jYXRpb246ICR7bG9jYXRpb259YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlT3BlblNlYXJjaEZvcllvdVR1YmVWaWRlb0lkKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgICAgICAgIGF4aW9zLmdldChgL29wZW5zcXVhcmUvYXBpL3lvdXR1YmUvZW4vdmlkZW8/dmlkZW9JZD0ke3NlYXJjaFF1ZXJ5fWAsIGdldEF4aW9zQ29uZmlndXJhdGlvbigpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNpbmdsZXRvbkxpc3QgPSBbcmVzcG9uc2UuZGF0YV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0WW91VHViZVNlYXJjaFJlc3VsdHMoc2luZ2xldG9uTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBMaW5lYXJQcm9ncmVzc1dpdGhMYWJlbChwcm9wcykge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEJveCBzeD17eyBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInIH19PlxuICAgICAgICAgICAgICAgIDxCb3ggc3g9e3sgd2lkdGg6ICcxMDAlJywgbXI6IDEgfX0+XG4gICAgICAgICAgICAgICAgICAgIDxCb3JkZXJMaW5lYXJQcm9ncmVzcyB2YXJpYW50PVwiZGV0ZXJtaW5hdGVcIiB2YWx1ZT17cHJvcHMudmFsdWV9Lz5cbiAgICAgICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgICAgICA8Qm94IHN4PXt7IG1pbldpZHRoOiAzNSB9fT5cbiAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImJvZHkyXCIgY29sb3I9XCJ0ZXh0LnNlY29uZGFyeVwiPntgJHtNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICl9JWB9PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgTGluZWFyUHJvZ3Jlc3NXaXRoTGFiZWwucHJvcFR5cGVzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHZhbHVlIG9mIHRoZSBwcm9ncmVzcyBpbmRpY2F0b3IgZm9yIHRoZSBkZXRlcm1pbmF0ZSBhbmQgYnVmZmVyIHZhcmlhbnRzLlxuICAgICAgICAgKiBWYWx1ZSBiZXR3ZWVuIDAgYW5kIDEwMC5cbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezEyfSBqdXN0aWZ5Q29udGVudD0nY2VudGVyJyBhbGlnbkl0ZW1zPSdjZW50ZXInPlxuICAgICAgICAgICAgICAgIDxZb3VUdWJlQ2FyZCAvPlxuICAgICAgICAgICAgICAgIDxDaGF0RGlzcGxheUFuY2hvciAvPlxuICAgICAgICAgICAgICAgIDxQYXBlclxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJmb3JtXCJcbiAgICAgICAgICAgICAgICAgICAgc3g9e3sgcDogJzJweCA0cHgnLCBkaXNwbGF5OiAnZmxleCcsIHdpZHRoOiAnOTUlJywgbWFyZ2luTGVmdDogJzIuNSUnLCBtYXJnaW5Ub3A6ICc1JScsIGJhY2tncm91bmRDb2xvcjogJ3RlcnRpYXJ5JyB9fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0QmFzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFdpZHRoPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3g9e3sgbWw6IDEsIGZsZXg6IDEgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtzZWFyY2hIaW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9eyd5b3V0dWJlU2VhcmNoJ31cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0UHJvcHM9e3sgJ2FyaWEtbGFiZWwnOiAneW91dHViZSB2aWRlbyBzZWFyY2gnIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uIG9uQ2xpY2s9e2UgPT4gb25TZWFyY2hTdWJtaXQoZSl9IHR5cGU9XCJzdWJtaXRcIiBzeD17eyBwOiAnMTBweCcgfX0gYXJpYS1sYWJlbD1cInNlYXJjaFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlYXJjaEljb24gLz5cbiAgICAgICAgICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2xMYWJlbFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJTZWFyY2ggYnkgVmlkZW9JZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sPXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17Y2hlY2tlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRQcm9wcz17eyAnYXJpYS1sYWJlbCc6ICdjb250cm9sbGVkJyB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDxEaXZpZGVyIHN4PXt7IGhlaWdodDogMjgsIG06IDAuNSB9fSBvcmllbnRhdGlvbj1cInZlcnRpY2FsXCIgLz5cbiAgICAgICAgICAgICAgICA8L1BhcGVyPlxuICAgICAgICAgICAgICAgIHsgeW91VHViZVNlYXJjaFJlc3VsdHMubGVuZ3RoID4gMCAmJiA8Qm94IHN4PXt7IGZsZXhHcm93OiAxLCBvdmVyZmxvdzogJ2hpZGRlbicsIHB4OiAzIH19PlxuICAgICAgICAgICAgICAgICAgICB7IHlvdVR1YmVTZWFyY2hSZXN1bHRzLm1hcCh2aWRlbyA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8WW91VHViZVZpZGVvQ2FyZCB2aWRlbz17dmlkZW99IC8+KSl9XG4gICAgICAgICAgICAgICAgPC9Cb3g+fVxuICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgIClcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFlvdVR1YmVQbGF0Zm9ybTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDYXJkIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQ2FyZCc7XG5pbXBvcnQgQ2FyZEFjdGlvbnMgZnJvbSAnQG11aS9tYXRlcmlhbC9DYXJkQWN0aW9ucyc7XG5pbXBvcnQgQ2FyZENvbnRlbnQgZnJvbSAnQG11aS9tYXRlcmlhbC9DYXJkQ29udGVudCc7XG5pbXBvcnQgQ2FyZE1lZGlhIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQ2FyZE1lZGlhJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQG11aS9tYXRlcmlhbC9CdXR0b24nO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5JztcbmltcG9ydCBTdHJpbmdVdGlsIGZyb20gXCIuLi91dGlscy9TdHJpbmdVdGlsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEVtYWlsTG9va3VwQ2FyZCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8Q2FyZCBzeD17eyB3aWR0aDogJzYwJScsIG1hcmdpblRvcDogJzIlJywgbWFyZ2luTGVmdDogJ2F1dG8nLCBtYXJnaW5SaWdodDogJ2F1dG8nfX0+XG4gICAgICAgICAgICA8Q2FyZE1lZGlhXG4gICAgICAgICAgICAgICAgc3g9e3sgaGVpZ2h0OiAxNDAgfX1cbiAgICAgICAgICAgICAgICBpbWFnZT1cIi9pbWFnZXMvZGlzcG9zYWJsZS1lbWFpbC5qcGVnXCJcbiAgICAgICAgICAgICAgICB0aXRsZT1cImVtYWlsbG9va3VwXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Q2FyZENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgZ3V0dGVyQm90dG9tIHZhcmlhbnQ9XCJoNVwiIGNvbXBvbmVudD1cImRpdlwiPlxuICAgICAgICAgICAgICAgICAgICBFbWFpbCBMb29rdXBcbiAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImJvZHkyXCIgY29sb3I9XCJ0ZXh0LnNlY29uZGFyeVwiPntTdHJpbmdVdGlsLmVtYWlsTG9va3VwSW5mb308Yj5vcGVuc2VudG9wQGdtYWlsLmNvbTwvYj4uXG4gICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgICAgIDxDYXJkQWN0aW9ucz5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHRhcmdldD0nX2JsYW5rJyBocmVmPVwiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGlzcG9zYWJsZV9lbWFpbF9hZGRyZXNzXCIgc2l6ZT1cInNtYWxsXCI+TGVhcm4gTW9yZTwvQnV0dG9uPlxuICAgICAgICAgICAgPC9DYXJkQWN0aW9ucz5cbiAgICAgICAgPC9DYXJkPlxuICAgICk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgR3JpZCBmcm9tIFwiQG11aS9tYXRlcmlhbC9HcmlkXCI7XG5pbXBvcnQgUGFwZXIgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvUGFwZXJcIjtcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnQG11aS9tYXRlcmlhbC9JbnB1dEJhc2UnO1xuaW1wb3J0IERpdmlkZXIgZnJvbSAnQG11aS9tYXRlcmlhbC9EaXZpZGVyJztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJ0BtdWkvbWF0ZXJpYWwvSWNvbkJ1dHRvbic7XG5pbXBvcnQgU2VhcmNoSWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL1NlYXJjaCc7XG5pbXBvcnQgeyBzdHlsZWQgfSBmcm9tICdAbXVpL21hdGVyaWFsL3N0eWxlcyc7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5pbXBvcnQge3VzZUVmZmVjdH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgRW1haWxMb29rdXBDYXJkIGZyb20gXCIuL0VtYWlsTG9va3VwQ2FyZFwiO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSBcIkBtdWkvbWF0ZXJpYWwvVHlwb2dyYXBoeVwiO1xuaW1wb3J0IEJveCBmcm9tIFwiQG11aS9tYXRlcmlhbC9Cb3hcIjtcbmltcG9ydCBTdGFjayBmcm9tIFwiQG11aS9tYXRlcmlhbC9TdGFja1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFbWFpbExvb2t1cCgpIHtcbiAgICBjb25zdCBbZW1haWxsb29rdXAsIHNldEVtYWlsTG9va3VwXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcblxuICAgIGNvbnN0IEl0ZW0gPSBzdHlsZWQoUGFwZXIpKCh7IHRoZW1lIH0pID0+ICh7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnZGFyaycgPyAnIzFBMjAyNycgOiAnI2Q4ZWNmMycsXG4gICAgICAgIC4uLnRoZW1lLnR5cG9ncmFwaHkuYm9keTIsXG4gICAgICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoNSksXG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgICAgICAgcGFsZXR0ZTp7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB7XG4gICAgICAgICAgICAgICAgdGVydGlhcnk6ICcjZDhlY2YzJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgICBwcmltYXJ5OiAnI2ZmZidcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pKTtcblxuICAgIGZ1bmN0aW9uIGdldEF4aW9zQ29uZmlndXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpbWVvdXQ6IDMwMDAsXG4gICAgICAgICAgICBzaWduYWw6IEFib3J0U2lnbmFsLnRpbWVvdXQoNjAwMClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlbWFpbGxvb2t1cCk7XG4gICAgfSwgW2VtYWlsbG9va3VwXSk7XG5cbiAgICBhc3luYyBmdW5jdGlvbiBoYW5kbGVFbWFpbExvb2t1cFNlYXJjaChxdWVyeSkge1xuICAgICAgICBhd2FpdCBheGlvcy5nZXQoYC9vcGVuc3F1YXJlL2FwaS92ZXJpZnkvZGlzcG9zYWJsZT9lbWFpbEFkZHJlc3M9JHtxdWVyeX1gLCBnZXRBeGlvc0NvbmZpZ3VyYXRpb24oKSlcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHNldEVtYWlsTG9va3VwKHJlc3BvbnNlLmRhdGEpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgICAgICAgfSlcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBoYW5kbGVTZWFyY2goZSl7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGV0IHF1ZXJ5RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbWFpbExvb2t1cFNlYXJjaCcpO1xuICAgICAgICBsZXQgcXVlcnkgPSBxdWVyeUVsZW1lbnQudmFsdWUudHJpbSgpO1xuICAgICAgICBpZiAocXVlcnkgIT09IG51bGwgJiYgcXVlcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcXVlcnlFbGVtZW50LnZhbHVlID0gJyc7XG4gICAgICAgICAgICBhd2FpdCBoYW5kbGVFbWFpbExvb2t1cFNlYXJjaChxdWVyeSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICA8R3JpZCBpdGVtIHhzPXsxMn0ganVzdGlmeUNvbnRlbnQ9J2NlbnRlcicgYWxpZ25JdGVtcz0nY2VudGVyJz5cbiAgICAgICAgICAgICAgICA8RW1haWxMb29rdXBDYXJkIC8+XG4gICAgICAgICAgICAgICAgPFBhcGVyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudD1cImZvcm1cIlxuICAgICAgICAgICAgICAgICAgICBzeD17eyBwOiAnMnB4IDRweCcsIGRpc3BsYXk6ICdmbGV4Jywgd2lkdGg6ICc5NSUnLCBtYXJnaW5MZWZ0OiAnMi41JScsIG1hcmdpblRvcDogJzUlJywgYmFja2dyb3VuZENvbG9yOiAndGVydGlhcnknIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRCYXNlXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsV2lkdGg9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBzeD17eyBtbDogMSwgZmxleDogMSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlciBFbWFpbCBBZGRyZXNzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPXsnZW1haWxMb29rdXBTZWFyY2gnfVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRQcm9wcz17eyAnYXJpYS1sYWJlbCc6ICdlbWFpbCBsb29rdXAgc2VhcmNoJyB9fVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvbiBvbkNsaWNrPXtlID0+IGhhbmRsZVNlYXJjaChlKX0gdHlwZT1cInN1Ym1pdFwiIHN4PXt7IHA6ICcxMHB4JyB9fSBhcmlhLWxhYmVsPVwic2VhcmNoXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VhcmNoSWNvbiAvPlxuICAgICAgICAgICAgICAgICAgICA8L0ljb25CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxEaXZpZGVyIHN4PXt7IGhlaWdodDogMjgsIG06IDAuNSB9fSBvcmllbnRhdGlvbj1cInZlcnRpY2FsXCIgLz5cbiAgICAgICAgICAgICAgICA8L1BhcGVyPlxuICAgICAgICAgICAgICAgIHsgZW1haWxsb29rdXAuZG9tYWluTmFtZSAhPT0gdW5kZWZpbmVkICYmIDxCb3ggc3g9e3sgZmxleEdyb3c6IDEsIG92ZXJmbG93OiAnaGlkZGVuJywgcHg6IDMgfX0+XG4gICAgICAgICAgICAgICAgICAgIDxJdGVtIHN4PXt7bXk6IDEsIG14OiAnYXV0bycsIHA6IDIsfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3RhY2sgc3BhY2luZz17MX0gZGlyZWN0aW9uPVwiY29sdW1uXCIgbWFyZ2luVG9wPVwiMyVcIj48VHlwb2dyYXBoeT48Yj5Eb21haW48L2I+PC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5PjxiPkFkZHJlc3M6IDwvYj57ZW1haWxsb29rdXAuZG9tYWluTmFtZX08L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0YWNrPlxuICAgICAgICAgICAgICAgICAgICA8L0l0ZW0+XG4gICAgICAgICAgICAgICAgPC9Cb3g+IH1cbiAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBDaGlwIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQ2hpcCc7XG5pbXBvcnQgQm94IGZyb20gJ0BtdWkvbWF0ZXJpYWwvQm94JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTm90aWZpY2F0aW9uQ2hpcChwcm9wcykge1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvbnMgPSBwcm9wcy5ub3RpZmljYXRpb25zO1xuICAgIHJldHVybiAoXG4gICAgICAgIDxCb3ggc3g9e3sgd2lkdGg6IDQwMCB9fT5cbiAgICAgICAgICAgIDxDaGlwIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgc3g9e3tcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICAnJiAuTXVpQ2hpcC1sYWJlbCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIGxhYmVsPXtub3RpZmljYXRpb25zWzBdLm1lc3NhZ2V9IC8vIHVwZGF0ZSBjb21wb25lbnQgd2l0aCBhbGwgbm90aWZpY2F0aW9uc1xuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9Cb3g+XG4gICAgKTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2NyZWF0ZVRoZW1lLCBzdHlsZWQsIFRoZW1lUHJvdmlkZXJ9IGZyb20gJ0BtdWkvbWF0ZXJpYWwvc3R5bGVzJztcbmltcG9ydCBDc3NCYXNlbGluZSBmcm9tICdAbXVpL21hdGVyaWFsL0Nzc0Jhc2VsaW5lJztcbmltcG9ydCBNdWlEcmF3ZXIgZnJvbSAnQG11aS9tYXRlcmlhbC9EcmF3ZXInO1xuaW1wb3J0IEJveCBmcm9tICdAbXVpL21hdGVyaWFsL0JveCc7XG5pbXBvcnQgTXVpQXBwQmFyIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQXBwQmFyJztcbmltcG9ydCBUb29sYmFyIGZyb20gJ0BtdWkvbWF0ZXJpYWwvVG9vbGJhcic7XG5pbXBvcnQgTGlzdCBmcm9tICdAbXVpL21hdGVyaWFsL0xpc3QnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5JztcbmltcG9ydCBEaXZpZGVyIGZyb20gJ0BtdWkvbWF0ZXJpYWwvRGl2aWRlcic7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICdAbXVpL21hdGVyaWFsL0ljb25CdXR0b24nO1xuaW1wb3J0IEJhZGdlIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQmFkZ2UnO1xuaW1wb3J0IENvbnRhaW5lciBmcm9tICdAbXVpL21hdGVyaWFsL0NvbnRhaW5lcic7XG5pbXBvcnQgR3JpZCBmcm9tICdAbXVpL21hdGVyaWFsL0dyaWQnO1xuaW1wb3J0IFBhcGVyIGZyb20gJ0BtdWkvbWF0ZXJpYWwvUGFwZXInO1xuaW1wb3J0IExpbmsgZnJvbSAnQG11aS9tYXRlcmlhbC9MaW5rJztcbmltcG9ydCBNZW51SWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL01lbnUnO1xuaW1wb3J0IENoZXZyb25MZWZ0SWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL0NoZXZyb25MZWZ0JztcbmltcG9ydCBOb3RpZmljYXRpb25zSWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL05vdGlmaWNhdGlvbnMnO1xuaW1wb3J0IEF2YXRhciBmcm9tICdAbXVpL21hdGVyaWFsL0F2YXRhcic7XG5pbXBvcnQgQ2hpcCBmcm9tICdAbXVpL21hdGVyaWFsL0NoaXAnO1xuaW1wb3J0IFN0YWNrIGZyb20gJ0BtdWkvbWF0ZXJpYWwvU3RhY2snO1xuaW1wb3J0IE1haW5MaXN0SXRlbSBmcm9tICcuL01haW5MaXN0SXRlbXMnO1xuaW1wb3J0IFNlY29uZGFyeUxpc3RJdGVtcyBmcm9tICcuL1NlY29uZGFyeUxpc3RJdGVtcyc7XG5pbXBvcnQgVGVydGlhcnlMaXN0SXRlbXMgZnJvbSAnLi9UZXJ0aWFyeUxpc3RJdGVtcyc7XG5pbXBvcnQgQ2hhcnQgZnJvbSAnLi9DaGFydCc7XG5pbXBvcnQgTW9zdEFuYWx5emVkUGxhdGZvcm0gZnJvbSAnLi9Nb3N0QW5hbHl6ZWRQbGF0Zm9ybSc7XG5pbXBvcnQgT3JkZXJzIGZyb20gJy4vT3JkZXJzJztcbmltcG9ydCBCdXR0b24gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvQnV0dG9uXCI7XG5pbXBvcnQgTG9nb3V0SWNvbiBmcm9tICdAbXVpL2ljb25zLW1hdGVyaWFsL0xvZ291dCc7XG5pbXBvcnQgV2hvaXMgZnJvbSBcIi4vV2hvaXNcIjtcbmltcG9ydCBOc2xvb2t1cCBmcm9tICcuL05zbG9va3VwJztcbmltcG9ydCBCYWNrTGlua3MgZnJvbSAnLi9CYWNrTGlua3MnO1xuaW1wb3J0IFlvdVR1YmVQbGF0Zm9ybSBmcm9tIFwiLi9Zb3VUdWJlUGxhdGZvcm1cIjtcbmltcG9ydCBFbWFpbExvb2t1cCBmcm9tIFwiLi9FbWFpbExvb2t1cFwiO1xuaW1wb3J0IE5vdGlmaWNhdGlvbkNoaXAgZnJvbSBcIi4vTm90aWZpY2F0aW9uQ2hpcFwiO1xuXG5mdW5jdGlvbiBDb3B5cmlnaHQocHJvcHMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiYm9keTJcIiBjb2xvcj1cInRleHQuc2Vjb25kYXJ5XCIgYWxpZ249XCJjZW50ZXJcIiB7Li4ucHJvcHN9PlxuICAgICAgICAgICAgeydDb3B5cmlnaHQgwqkgJ31cbiAgICAgICAgICAgIDxMaW5rIGNvbG9yPVwiaW5oZXJpdFwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vd2FsaW1vcnJpcy9vcGVuc3F1YXJlXCI+XG4gICAgICAgICAgICAgICAgT3BlblNxdWFyZVxuICAgICAgICAgICAgPC9MaW5rPnsnICd9XG4gICAgICAgICAgICB7bmV3IERhdGUoKS5nZXRGdWxsWWVhcigpfVxuICAgICAgICAgICAgeycuJ31cbiAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICk7XG59XG5cbmNvbnN0IGRyYXdlcldpZHRoID0gMjQwO1xuXG5jb25zdCBBcHBCYXIgPSBzdHlsZWQoTXVpQXBwQmFyLCB7XG4gICAgc2hvdWxkRm9yd2FyZFByb3A6IChwcm9wKSA9PiBwcm9wICE9PSAnb3BlbicsXG59KSgoeyB0aGVtZSwgb3BlbiB9KSA9PiAoe1xuICAgIHpJbmRleDogdGhlbWUuekluZGV4LmRyYXdlciArIDEsXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnd2lkdGgnLCAnbWFyZ2luJ10sIHtcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuc2hhcnAsXG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuLFxuICAgIH0pLFxuICAgIC4uLihvcGVuICYmIHtcbiAgICAgICAgbWFyZ2luTGVmdDogZHJhd2VyV2lkdGgsXG4gICAgICAgIHdpZHRoOiBgY2FsYygxMDAlIC0gJHtkcmF3ZXJXaWR0aH1weClgLFxuICAgICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWyd3aWR0aCcsICdtYXJnaW4nXSwge1xuICAgICAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuc2hhcnAsXG4gICAgICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgICAgIH0pLFxuICAgIH0pLFxufSkpO1xuXG5jb25zdCBEcmF3ZXIgPSBzdHlsZWQoTXVpRHJhd2VyLCB7IHNob3VsZEZvcndhcmRQcm9wOiAocHJvcCkgPT4gcHJvcCAhPT0gJ29wZW4nIH0pKFxuICAgICh7IHRoZW1lLCBvcGVuIH0pID0+ICh7XG4gICAgICAgICcmIC5NdWlEcmF3ZXItcGFwZXInOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgICAgICAgICAgd2lkdGg6IGRyYXdlcldpZHRoLFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd3aWR0aCcsIHtcbiAgICAgICAgICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5zaGFycCxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICAgICAgLi4uKCFvcGVuICYmIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnd2lkdGgnLCB7XG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLnNoYXJwLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24ubGVhdmluZ1NjcmVlbixcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhlbWUuc3BhY2luZyg3KSxcbiAgICAgICAgICAgICAgICBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0aGVtZS5zcGFjaW5nKDkpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKHtcbiAgICBwYWxldHRlOiB7XG4gICAgICAgIHdoaXRlOiB7XG4gICAgICAgICAgICBtYWluOiAnI2ZmZmZmZicsXG4gICAgICAgICAgICBkYXJrOiAnI2Y4ZjhmOCcsXG4gICAgICAgICAgICBkYXJrZXI6ICcjZjVmNWY1J1xuICAgICAgICB9XG4gICAgfX1cbik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERhc2hib2FyZChwcm9wcykge1xuICAgIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKHRydWUpO1xuICAgIGNvbnN0IFtyZW5kZXJDaGFydCwgc2V0UmVuZGVyQ2hhcnRdID0gUmVhY3QudXNlU3RhdGUodHJ1ZSk7XG4gICAgY29uc3QgW3JlbmRlck1vc3RBbmFseXplZCwgc2V0UmVuZGVyTW9zdEFuYWx5emVkXSA9IFJlYWN0LnVzZVN0YXRlKHRydWUpO1xuICAgIGNvbnN0IFtyZW5kZXJPcmRlcnMsIHNldFJlbmRlck9yZGVyc10gPSBSZWFjdC51c2VTdGF0ZSh0cnVlKTtcbiAgICBjb25zdCBbcmVuZGVyV2hvaXMsIHNldFJlbmRlcldob2lzXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbcmVuZGVyTnNsb29rdXAsIHNldFJlbmRlck5zbG9va3VwXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbcmVuZGVyQmFja2xpbmtzLCBzZXRSZW5kZXJCYWNrbGlua3NdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtyZW5kZXJFbWFpbExvb2t1cCwgc2V0UmVuZGVyRW1haWxMb29rdXBdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gICAgLy8gcGxhdGZvcm1zXG4gICAgY29uc3QgW3JlbmRlcllvdVR1YmVQbGF0Zm9ybSwgc2V0UmVuZGVyWW91VHViZVBsYXRmb3JtXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcblxuICAgIC8vIG5vdGlmaWNhdGlvbiBjaGlwXG4gICAgY29uc3Qgbm90aWZpY2F0aW9ucyA9IHByb3BzLmdsb2JhbE5vdGlmaWNhdGlvbnM7XG4gICAgY29uc3QgW3Nob3dOb3RpZmljYXRpb25zLCBzZXRTaG93Tm90aWZpY2F0aW9uc10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG5cbiAgICBjb25zdCB0b2dnbGVEcmF3ZXIgPSAoKSA9PiB7XG4gICAgICAgIHNldE9wZW4oIW9wZW4pO1xuICAgIH07XG5cbiAgICBjb25zdCB0b2dnbGVOb3RpZmljYXRpb25zID0gKCkgPT4ge1xuICAgICAgICAvLyBjYW4ndCBzaG93IG5vdGlmaWNhdGlvbnMgaWYgdGhlcmUgYXJlbid0IGFueVxuICAgICAgICBpZiAoIGdldE5vdGlmaWNhdGlvbkNvdW50KCkgPiAwICkge1xuICAgICAgICAgICAgc2V0U2hvd05vdGlmaWNhdGlvbnMoIXNob3dOb3RpZmljYXRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGdldE5vdGlmaWNhdGlvbkNvdW50ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gbm90aWZpY2F0aW9ucy5sZW5ndGg7XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlVG9nZ2xlQWxsID0gKGNoaWxkRGF0YSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhjaGlsZERhdGEpO1xuICAgICAgICB0b2dnbGVBbGwoY2hpbGREYXRhKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVBbGwoY2hpbGREYXRhKSB7XG4gICAgICAgIGlmIChjaGlsZERhdGEgPT09ICdEYXNoYm9hcmQnICYmICghaXNEYXNoYm9hcmRVSVJlbmRlcmVkKCkpKSB7XG5cbiAgICAgICAgICAgIC8vIGRhc2hib2FyZCBpdGVtcyByZW5kZXJcbiAgICAgICAgICAgIHNldFJlbmRlckNoYXJ0KHRydWUpO1xuICAgICAgICAgICAgc2V0UmVuZGVyT3JkZXJzKHRydWUpO1xuICAgICAgICAgICAgc2V0UmVuZGVyTW9zdEFuYWx5emVkKHRydWUpO1xuXG4gICAgICAgICAgICAvLyBub24gZGFzaGJvYXJkIGl0ZW1zIHJlbW92ZVxuICAgICAgICAgICAgc2V0UmVuZGVyV2hvaXMoZmFsc2UpO1xuICAgICAgICAgICAgc2V0UmVuZGVyTnNsb29rdXAoZmFsc2UpO1xuICAgICAgICAgICAgc2V0UmVuZGVyQmFja2xpbmtzKGZhbHNlKTtcbiAgICAgICAgICAgIHNldFJlbmRlckVtYWlsTG9va3VwKGZhbHNlKTtcbiAgICAgICAgICAgIHNldFJlbmRlcllvdVR1YmVQbGF0Zm9ybShmYWxzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hpbGREYXRhID09PSAnV2hvaXMnKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgbm9uLXdob2lzIGl0ZW1zXG4gICAgICAgICAgICBzZXRSZW5kZXJDaGFydChmYWxzZSk7XG4gICAgICAgICAgICBzZXRSZW5kZXJPcmRlcnMoZmFsc2UpO1xuICAgICAgICAgICAgc2V0UmVuZGVyTW9zdEFuYWx5emVkKGZhbHNlKTtcbiAgICAgICAgICAgIHNldFJlbmRlck5zbG9va3VwKGZhbHNlKTtcbiAgICAgICAgICAgIHNldFJlbmRlckJhY2tsaW5rcyhmYWxzZSk7XG4gICAgICAgICAgICBzZXRSZW5kZXJFbWFpbExvb2t1cChmYWxzZSk7XG4gICAgICAgICAgICBzZXRSZW5kZXJZb3VUdWJlUGxhdGZvcm0oZmFsc2UpO1xuXG4gICAgICAgICAgICAvLyByZW5kZXIgd2hvaXMgaXRlbXNcbiAgICAgICAgICAgIHNldFJlbmRlcldob2lzKHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkRGF0YSA9PT0gJ05TTG9va3VwJykge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIG5vbi1uc2xvb2t1cCBpdGVtc1xuICAgICAgICAgICAgc2V0UmVuZGVyQ2hhcnQoZmFsc2UpO1xuICAgICAgICAgICAgc2V0UmVuZGVyT3JkZXJzKGZhbHNlKTtcbiAgICAgICAgICAgIHNldFJlbmRlck1vc3RBbmFseXplZChmYWxzZSk7XG4gICAgICAgICAgICBzZXRSZW5kZXJXaG9pcyhmYWxzZSk7XG4gICAgICAgICAgICBzZXRSZW5kZXJCYWNrbGlua3MoZmFsc2UpO1xuICAgICAgICAgICAgc2V0UmVuZGVyRW1haWxMb29rdXAoZmFsc2UpO1xuICAgICAgICAgICAgc2V0UmVuZGVyWW91VHViZVBsYXRmb3JtKGZhbHNlKTtcblxuXG4gICAgICAgICAgICAvLyByZW5kZXIgbnNsb29rdXAgaXRlbXNcbiAgICAgICAgICAgIHNldFJlbmRlck5zbG9va3VwKHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkRGF0YSA9PT0gJ0JhY2tMaW5rcycpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBub24tYmFja2xpbmsgaXRlbXNcbiAgICAgICAgICAgIHNldFJlbmRlckNoYXJ0KGZhbHNlKTtcbiAgICAgICAgICAgIHNldFJlbmRlck9yZGVycyhmYWxzZSk7XG4gICAgICAgICAgICBzZXRSZW5kZXJNb3N0QW5hbHl6ZWQoZmFsc2UpO1xuICAgICAgICAgICAgc2V0UmVuZGVyV2hvaXMoZmFsc2UpO1xuICAgICAgICAgICAgc2V0UmVuZGVyTnNsb29rdXAoZmFsc2UpO1xuICAgICAgICAgICAgc2V0UmVuZGVyRW1haWxMb29rdXAoZmFsc2UpO1xuICAgICAgICAgICAgc2V0UmVuZGVyWW91VHViZVBsYXRmb3JtKGZhbHNlKTtcblxuXG4gICAgICAgICAgICAvLyByZW5kZXIgYmFja2xpbmtzIGl0ZW1zXG4gICAgICAgICAgICBzZXRSZW5kZXJCYWNrbGlua3ModHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hpbGREYXRhID09PSAnRW1haWxMb29rdXAnKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgbm9uLWVtYWlsIGxvb2t1cCBpdGVtc1xuICAgICAgICAgICAgc2V0UmVuZGVyQ2hhcnQoZmFsc2UpO1xuICAgICAgICAgICAgc2V0UmVuZGVyT3JkZXJzKGZhbHNlKTtcbiAgICAgICAgICAgIHNldFJlbmRlck1vc3RBbmFseXplZChmYWxzZSk7XG4gICAgICAgICAgICBzZXRSZW5kZXJXaG9pcyhmYWxzZSk7XG4gICAgICAgICAgICBzZXRSZW5kZXJOc2xvb2t1cChmYWxzZSk7XG4gICAgICAgICAgICBzZXRSZW5kZXJCYWNrbGlua3MoZmFsc2UpO1xuICAgICAgICAgICAgc2V0UmVuZGVyWW91VHViZVBsYXRmb3JtKGZhbHNlKTtcblxuXG4gICAgICAgICAgICAvLyByZW5kZXIgZW1haWwgbG9va3VwIGl0ZW1zXG4gICAgICAgICAgICBzZXRSZW5kZXJFbWFpbExvb2t1cCh0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGlsZERhdGEgPT09ICdZb3VUdWJlJykge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIG5vbi15b3V0dWJlIGl0ZW1zXG4gICAgICAgICAgICBzZXRSZW5kZXJDaGFydChmYWxzZSk7XG4gICAgICAgICAgICBzZXRSZW5kZXJPcmRlcnMoZmFsc2UpO1xuICAgICAgICAgICAgc2V0UmVuZGVyTW9zdEFuYWx5emVkKGZhbHNlKTtcbiAgICAgICAgICAgIHNldFJlbmRlcldob2lzKGZhbHNlKTtcbiAgICAgICAgICAgIHNldFJlbmRlck5zbG9va3VwKGZhbHNlKTtcbiAgICAgICAgICAgIHNldFJlbmRlckJhY2tsaW5rcyhmYWxzZSk7XG4gICAgICAgICAgICBzZXRSZW5kZXJFbWFpbExvb2t1cChmYWxzZSk7XG5cbiAgICAgICAgICAgIHNldFJlbmRlcllvdVR1YmVQbGF0Zm9ybSh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGFzaGJvYXJkVUlSZW5kZXJlZCgpIHtcbiAgICAgICAgcmV0dXJuIChyZW5kZXJDaGFydCAmJiByZW5kZXJPcmRlcnMgJiYgcmVuZGVyTW9zdEFuYWx5emVkKTtcbiAgICB9XG5cblxuICAgIGNvbnN0IGhhbmRsZUxvZ291dCA9ICgpID0+IHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL2xvZ291dCc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm90aWZpY2F0aW9uc0xhYmVsKGNvdW50KSB7XG4gICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICdubyBub3RpZmljYXRpb25zJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY291bnQgPiA5OSkge1xuICAgICAgICAgICAgcmV0dXJuICdtb3JlIHRoYW4gOTkgbm90aWZpY2F0aW9ucyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke2NvdW50fSBub3RpZmljYXRpb25zYDtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8VGhlbWVQcm92aWRlciB0aGVtZT17ZGVmYXVsdFRoZW1lfT5cbiAgICAgICAgICAgIDxCb3ggc3g9e3sgZGlzcGxheTogJ2ZsZXgnIH19PlxuICAgICAgICAgICAgICAgIDxDc3NCYXNlbGluZSAvPlxuICAgICAgICAgICAgICAgIDxBcHBCYXIgcG9zaXRpb249XCJhYnNvbHV0ZVwiIG9wZW49e29wZW59PlxuICAgICAgICAgICAgICAgICAgICA8VG9vbGJhclxuICAgICAgICAgICAgICAgICAgICAgICAgc3g9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcjogJzI0cHgnLCAvLyBrZWVwIHJpZ2h0IHBhZGRpbmcgd2hlbiBkcmF3ZXIgY2xvc2VkXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2U9XCJzdGFydFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJpbmhlcml0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwib3BlbiBkcmF3ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RvZ2dsZURyYXdlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeD17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogJzM2cHgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4ob3BlbiAmJiB7IGRpc3BsYXk6ICdub25lJyB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNZW51SWNvbiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJoMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cImg2XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcj1cImluaGVyaXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vV3JhcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN4PXt7IGZsZXhHcm93OiAxIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRGFzaGJvYXJkXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3RhY2sgZGlyZWN0aW9uPVwicm93XCIgc3BhY2luZz17MX0gc3g9e3ttYXJnaW5SaWdodDogJzY1JSd9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hpcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmF0YXI9ezxBdmF0YXIgYWx0PVwiV1wiIHNyYz1cIi9pbWFnZXMvcHJvZmVzc2lvbmFsX21lLmpwZWdcIiAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJBdmF0YXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0YWNrPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEljb25CdXR0b24gY29sb3I9XCJpbmhlcml0XCIgc3g9e3sgbWFyZ2luUmlnaHQ6ICc1JScgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJhZGdlIGJhZGdlQ29udGVudD17Z2V0Tm90aWZpY2F0aW9uQ291bnQoKX0gY29sb3I9XCJzZWNvbmRhcnlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5vdGlmaWNhdGlvbnNJY29uIG9uQ2xpY2s9e3RvZ2dsZU5vdGlmaWNhdGlvbnN9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0JhZGdlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzaG93Tm90aWZpY2F0aW9ucyAmJiA8QmFkZ2U+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOb3RpZmljYXRpb25DaGlwIG5vdGlmaWNhdGlvbnM9e25vdGlmaWNhdGlvbnN9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0JhZGdlPn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvSWNvbkJ1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVMb2dvdXR9IHNpemU9XCJzbWFsbFwiIGNvbG9yPVwid2hpdGVcIiBlbmRJY29uPXs8TG9nb3V0SWNvbiAvPn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nb3V0XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9Ub29sYmFyPlxuICAgICAgICAgICAgICAgIDwvQXBwQmFyPlxuICAgICAgICAgICAgICAgIDxEcmF3ZXIgdmFyaWFudD1cInBlcm1hbmVudFwiIG9wZW49e29wZW59PlxuICAgICAgICAgICAgICAgICAgICA8VG9vbGJhclxuICAgICAgICAgICAgICAgICAgICAgICAgc3g9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHg6IFsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uIG9uQ2xpY2s9e3RvZ2dsZURyYXdlcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoZXZyb25MZWZ0SWNvbiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9JY29uQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L1Rvb2xiYXI+XG4gICAgICAgICAgICAgICAgICAgIDxEaXZpZGVyIC8+XG4gICAgICAgICAgICAgICAgICAgIDxMaXN0IGNvbXBvbmVudD1cIm5hdlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPE1haW5MaXN0SXRlbSBoYW5kbGVUb2dnbGVBbGw9e2hhbmRsZVRvZ2dsZUFsbH0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxEaXZpZGVyIHN4PXt7IG15OiAxIH19IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2Vjb25kYXJ5TGlzdEl0ZW1zIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RGl2aWRlciBzeD17eyBteTogMSB9fSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRlcnRpYXJ5TGlzdEl0ZW1zIHVzZXJEZXRhaWxzPXtwcm9wcy51c2VyRGV0YWlsc30vPlxuICAgICAgICAgICAgICAgICAgICA8L0xpc3Q+XG4gICAgICAgICAgICAgICAgPC9EcmF3ZXI+XG4gICAgICAgICAgICAgICAgPEJveFxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9XCJtYWluXCJcbiAgICAgICAgICAgICAgICAgICAgc3g9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoZW1lLnBhbGV0dGUuZ3JleVsxMDBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdGhlbWUucGFsZXR0ZS5ncmV5WzkwMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGV4R3JvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMHZoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnYXV0bycsXG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8VG9vbGJhciAvPlxuICAgICAgICAgICAgICAgICAgICA8Q29udGFpbmVyIG1heFdpZHRoPVwibGdcIiBzeD17eyBtdDogNCwgbWI6IDQgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8R3JpZCBjb250YWluZXIgc3BhY2luZz17M30+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIENoYXJ0ICovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZW5kZXJDaGFydCAmJiAgPEdyaWQgaXRlbSB4cz17MTJ9IG1kPXs4fSBsZz17OX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQYXBlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3g9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDU4MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGFydCAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1BhcGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD4gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiBSZWNlbnQgTW9zdEFuYWx5emVkUGxhdGZvcm0gKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyByZW5kZXJNb3N0QW5hbHl6ZWQgJiYgPEdyaWQgaXRlbSB4cz17MTJ9IG1kPXs0fSBsZz17M30+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQYXBlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3g9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI0MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNb3N0QW5hbHl6ZWRQbGF0Zm9ybSB1c2VyRGV0YWlscz17cHJvcHMudXNlckRldGFpbHN9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUGFwZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPiB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIFJlY2VudCBPcmRlcnMgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyByZW5kZXJPcmRlcnMgJiYgPEdyaWQgaXRlbSB4cz17MTJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFwZXIgc3g9e3sgcDogMiwgZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxPcmRlcnMgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9QYXBlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LyogV2hvaXMgY29tcG9uZW50ICovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgcmVuZGVyV2hvaXMgJiYgPEdyaWQgaXRlbSB4cz17MTJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFwZXIgc3g9e3sgcDogMiwgZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxXaG9pcyAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1BhcGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD4gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiBuc2xvb2t1cCBjb21wb25lbnQgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyByZW5kZXJOc2xvb2t1cCAmJiA8R3JpZCBpdGVtIHhzPXsxMn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQYXBlciBzeD17eyBwOiAyLCBkaXNwbGF5OiAnZmxleCcsIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5zbG9va3VwIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUGFwZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPiB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIGJhY2tsaW5rcyBjb21wb25lbnQgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyByZW5kZXJCYWNrbGlua3MgJiYgPEdyaWQgaXRlbSB4cz17MTJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFwZXIgc3g9e3sgcDogMiwgZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCYWNrTGlua3MgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9QYXBlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LyogZW1haWwgbG9va3VwIGNvbXBvbmVudCAqL31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHJlbmRlckVtYWlsTG9va3VwICYmIDxHcmlkIGl0ZW0geHM9ezEyfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFBhcGVyIHN4PXt7IHA6IDIsIGRpc3BsYXk6ICdmbGV4JywgZmxleERpcmVjdGlvbjogJ2NvbHVtbicgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RW1haWxMb29rdXAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9QYXBlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7LyogeW91dHViZSBjb21wb25lbnQgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyByZW5kZXJZb3VUdWJlUGxhdGZvcm0gJiYgPEdyaWQgaXRlbSB4cz17MTJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFwZXIgc3g9e3sgcDogMiwgZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxZb3VUdWJlUGxhdGZvcm0gaXNTZWxlY3RlZD17dHJ1ZX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9QYXBlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb3B5cmlnaHQgc3g9e3sgcHQ6IDQgfX0gLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Db250YWluZXI+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgPC9UaGVtZVByb3ZpZGVyPlxuICAgICk7XG59XG4iLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZWFjdC1zaWRlbmF2LmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7QnJvd3NlclJvdXRlciwgUm91dGUsIFJvdXRlc30gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7dXNlRWZmZWN0LCB1c2VTdGF0ZX0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgU2V0dGluZ3MgZnJvbSBcIi4vanMvcGFnZXMvU2V0dGluZ3NcIjtcbmltcG9ydCBBYm91dCBmcm9tIFwiLi9qcy9wYWdlcy9BYm91dFwiO1xuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IERhc2hib2FyZCBmcm9tIFwiLi9qcy9jb21wb25lbnRzL0Rhc2hib2FyZFwiO1xuXG5pbXBvcnQgXCJAdHJlbmRtaWNyby9yZWFjdC1zaWRlbmF2L2Rpc3QvcmVhY3Qtc2lkZW5hdi5jc3NcIjtcblxuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG4gICAgY29uc3QgW3VzZXJEZXRhaWxzLCBzZXRVc2VyRGV0YWlsc10gPSB1c2VTdGF0ZSh7fSk7XG4gICAgY29uc3QgW2dsb2JhbE5vdGlmaWNhdGlvbnMsIHNldEdsb2JhbE5vdGlmaWNhdGlvbnNdID0gdXNlU3RhdGUoe30pO1xuXG4gICAgbGV0IGRldGFpbHNDb25maWcgPSB7XG4gICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICBtYXhCb2R5TGVuZ3RoOiBJbmZpbml0eSxcbiAgICAgICAgdXJsOiAnL29wZW5zZW50b3AvYXBpL2FjdGlvbnMvdXNlcl9kZXRhaWxzJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9LFxuICAgIH07XG5cbiAgICBsZXQgZ2xvYmFsTm90aWZpY2F0aW9uc0NvbmZpZyA9IHtcbiAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgbWF4Qm9keUxlbmd0aDogSW5maW5pdHksXG4gICAgICAgIHVybDogJy9vcGVuc3F1YXJlL2FkbWluL2FwaS9ub3RpZmljYXRpb25zL2dsb2JhbEFsbCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfSxcbiAgICB9XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBhc3luYyBmdW5jdGlvbiBmZXRjaFVzZXJEZXRhaWxzKCkge1xuICAgICAgICAgICAgYXdhaXQgYXhpb3MucmVxdWVzdChkZXRhaWxzQ29uZmlnKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VXNlckRldGFpbHMocmVzcG9uc2UuZGF0YSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBmZXRjaFVzZXJEZXRhaWxzKCk7XG4gICAgfSwgW10pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gZmV0Y2hHbG9iYWxOb3RpZmljYXRpb25zKCkge1xuICAgICAgICAgICAgYXdhaXQgYXhpb3MucmVxdWVzdChnbG9iYWxOb3RpZmljYXRpb25zQ29uZmlnKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0R2xvYmFsTm90aWZpY2F0aW9ucyhyZXNwb25zZS5kYXRhKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmV0Y2hHbG9iYWxOb3RpZmljYXRpb25zKCk7XG4gICAgICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IG5hdmlnYXRlID0gZSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICBpZiAoZSA9PT0gJ2hvbWUnKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy8nICsgZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybihcbiAgICAgICAgPGRpdiBpZD17J2FwcCd9PlxuICAgICAgICAgICAgPEJyb3dzZXJSb3V0ZXI+XG4gICAgICAgICAgICAgICAgPFJvdXRlcz5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9Jy8nIGVsZW1lbnQ9ezxEYXNoYm9hcmQgdXNlckRldGFpbHM9e3VzZXJEZXRhaWxzfSBnbG9iYWxOb3RpZmljYXRpb25zPXtnbG9iYWxOb3RpZmljYXRpb25zfS8+fSAvPlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD0nL3NldHRpbmdzJyBlbGVtZW50PXs8U2V0dGluZ3MgdXNlckRldGFpbHM9e3VzZXJEZXRhaWxzfS8+fSAvPlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD0nL2Fib3V0JyBlbGVtZW50PXs8QWJvdXQgLz59IC8+XG4gICAgICAgICAgICAgICAgPC9Sb3V0ZXM+XG4gICAgICAgICAgICA8L0Jyb3dzZXJSb3V0ZXI+XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn07XG5SZWFjdERPTS5yZW5kZXIoXG4gICAgPEFwcCAvPixcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpXG4pO1xuIiwiaW1wb3J0IENsYXNzTmFtZUdlbmVyYXRvciBmcm9tICcuLi9DbGFzc05hbWVHZW5lcmF0b3InO1xuZXhwb3J0IGNvbnN0IGdsb2JhbFN0YXRlQ2xhc3NlcyA9IHtcbiAgYWN0aXZlOiAnYWN0aXZlJyxcbiAgY2hlY2tlZDogJ2NoZWNrZWQnLFxuICBjb21wbGV0ZWQ6ICdjb21wbGV0ZWQnLFxuICBkaXNhYmxlZDogJ2Rpc2FibGVkJyxcbiAgZXJyb3I6ICdlcnJvcicsXG4gIGV4cGFuZGVkOiAnZXhwYW5kZWQnLFxuICBmb2N1c2VkOiAnZm9jdXNlZCcsXG4gIGZvY3VzVmlzaWJsZTogJ2ZvY3VzVmlzaWJsZScsXG4gIG9wZW46ICdvcGVuJyxcbiAgcmVhZE9ubHk6ICdyZWFkT25seScsXG4gIHJlcXVpcmVkOiAncmVxdWlyZWQnLFxuICBzZWxlY3RlZDogJ3NlbGVjdGVkJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QsIGdsb2JhbFN0YXRlUHJlZml4ID0gJ011aScpIHtcbiAgY29uc3QgZ2xvYmFsU3RhdGVDbGFzcyA9IGdsb2JhbFN0YXRlQ2xhc3Nlc1tzbG90XTtcbiAgcmV0dXJuIGdsb2JhbFN0YXRlQ2xhc3MgPyBgJHtnbG9iYWxTdGF0ZVByZWZpeH0tJHtnbG9iYWxTdGF0ZUNsYXNzfWAgOiBgJHtDbGFzc05hbWVHZW5lcmF0b3IuZ2VuZXJhdGUoY29tcG9uZW50TmFtZSl9LSR7c2xvdH1gO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzR2xvYmFsU3RhdGUoc2xvdCkge1xuICByZXR1cm4gZ2xvYmFsU3RhdGVDbGFzc2VzW3Nsb3RdICE9PSB1bmRlZmluZWQ7XG59IiwiY29uc3QgZGVmYXVsdEdlbmVyYXRvciA9IGNvbXBvbmVudE5hbWUgPT4gY29tcG9uZW50TmFtZTtcbmNvbnN0IGNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvciA9ICgpID0+IHtcbiAgbGV0IGdlbmVyYXRlID0gZGVmYXVsdEdlbmVyYXRvcjtcbiAgcmV0dXJuIHtcbiAgICBjb25maWd1cmUoZ2VuZXJhdG9yKSB7XG4gICAgICBnZW5lcmF0ZSA9IGdlbmVyYXRvcjtcbiAgICB9LFxuICAgIGdlbmVyYXRlKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgIHJldHVybiBnZW5lcmF0ZShjb21wb25lbnROYW1lKTtcbiAgICB9LFxuICAgIHJlc2V0KCkge1xuICAgICAgZ2VuZXJhdGUgPSBkZWZhdWx0R2VuZXJhdG9yO1xuICAgIH1cbiAgfTtcbn07XG5jb25zdCBDbGFzc05hbWVHZW5lcmF0b3IgPSBjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IoKTtcbmV4cG9ydCBkZWZhdWx0IENsYXNzTmFtZUdlbmVyYXRvcjsiLCIvKipcbiAqIFdBUk5JTkc6IERvbid0IGltcG9ydCB0aGlzIGRpcmVjdGx5LlxuICogVXNlIGBNdWlFcnJvcmAgZnJvbSBgQG11aS1pbnRlcm5hbC9iYWJlbC1tYWNyb3MvTXVpRXJyb3IubWFjcm9gIGluc3RlYWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRNdWlFcnJvck1lc3NhZ2UoY29kZSkge1xuICAvLyBBcHBseSBiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzIGluIGxvb3NlIG1vZGVcbiAgLy8gbG9vc2UgbW9kZSBpcyBzYWZlIGlmIHdlJ3JlIGNvbmNhdGVuYXRpbmcgcHJpbWl0aXZlc1xuICAvLyBzZWUgaHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvZW4vYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS10ZW1wbGF0ZS1saXRlcmFscyNsb29zZVxuICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbiAgbGV0IHVybCA9ICdodHRwczovL211aS5jb20vcHJvZHVjdGlvbi1lcnJvci8/Y29kZT0nICsgY29kZTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAvLyByZXN0IHBhcmFtcyBvdmVyLXRyYW5zcGlsZSBmb3IgdGhpcyBjYXNlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgIHVybCArPSAnJmFyZ3NbXT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tpXSk7XG4gIH1cbiAgcmV0dXJuICdNaW5pZmllZCBNVUkgZXJyb3IgIycgKyBjb2RlICsgJzsgdmlzaXQgJyArIHVybCArICcgZm9yIHRoZSBmdWxsIG1lc3NhZ2UuJztcbiAgLyogZXNsaW50LWVuYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzZXRSZWYgZnJvbSAnLi4vc2V0UmVmJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUZvcmtSZWYoLi4ucmVmcykge1xuICAvKipcbiAgICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiB0aGUgcmVmcyBwYXNzZWQgdG8gdGhpcyBob29rIGNoYW5nZSBhbmQgYXJlIGFsbCBkZWZpbmVkLlxuICAgKiBUaGlzIG1lYW5zIHJlYWN0IHdpbGwgY2FsbCB0aGUgb2xkIGZvcmtSZWYgd2l0aCBgbnVsbGAgYW5kIHRoZSBuZXcgZm9ya1JlZlxuICAgKiB3aXRoIHRoZSByZWYuIENsZWFudXAgbmF0dXJhbGx5IGVtZXJnZXMgZnJvbSB0aGlzIGJlaGF2aW9yLlxuICAgKi9cbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChyZWZzLmV2ZXJ5KHJlZiA9PiByZWYgPT0gbnVsbCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdGFuY2UgPT4ge1xuICAgICAgcmVmcy5mb3JFYWNoKHJlZiA9PiB7XG4gICAgICAgIHNldFJlZihyZWYsIGluc3RhbmNlKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCByZWZzKTtcbn0iLCIvKipcbiAqIFRPRE8gdjU6IGNvbnNpZGVyIG1ha2luZyBpdCBwcml2YXRlXG4gKlxuICogcGFzc2VzIHt2YWx1ZX0gdG8ge3JlZn1cbiAqXG4gKiBXQVJOSU5HOiBCZSBzdXJlIHRvIG9ubHkgY2FsbCB0aGlzIGluc2lkZSBhIGNhbGxiYWNrIHRoYXQgaXMgcGFzc2VkIGFzIGEgcmVmLlxuICogT3RoZXJ3aXNlLCBtYWtlIHN1cmUgdG8gY2xlYW51cCB0aGUgcHJldmlvdXMge3JlZn0gaWYgaXQgY2hhbmdlcy4gU2VlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL2lzc3Vlcy8xMzUzOVxuICpcbiAqIFVzZWZ1bCBpZiB5b3Ugd2FudCB0byBleHBvc2UgdGhlIHJlZiBvZiBhbiBpbm5lciBjb21wb25lbnQgdG8gdGhlIHB1YmxpYyBBUElcbiAqIHdoaWxlIHN0aWxsIHVzaW5nIGl0IGluc2lkZSB0aGUgY29tcG9uZW50LlxuICogQHBhcmFtIHJlZiBBIHJlZiBjYWxsYmFjayBvciByZWYgb2JqZWN0LiBJZiBhbnl0aGluZyBmYWxzeSwgdGhpcyBpcyBhIG5vLW9wLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRSZWYocmVmLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZih2YWx1ZSk7XG4gIH0gZWxzZSBpZiAocmVmKSB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfVxufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZUVuaGFuY2VkRWZmZWN0IGZyb20gJy4uL3VzZUVuaGFuY2VkRWZmZWN0JztcblxuLyoqXG4gKiBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE0MDk5I2lzc3VlY29tbWVudC00NDAwMTM4OTJcbiAqIFNlZSBSRkMgaW4gaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmZjcy9wdWxsLzIyMFxuICovXG5cbmZ1bmN0aW9uIHVzZUV2ZW50Q2FsbGJhY2soZm4pIHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKGZuKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIHJlZi5jdXJyZW50ID0gZm47XG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlUmVmKCguLi5hcmdzKSA9PlxuICAvLyBAdHMtZXhwZWN0LWVycm9yIGhpZGUgYHRoaXNgXG4gICgwLCByZWYuY3VycmVudCkoLi4uYXJncykpLmN1cnJlbnQ7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VFdmVudENhbGxiYWNrOyIsIi8vIENvcnJlc3BvbmRzIHRvIDEwIGZyYW1lcyBhdCA2MCBIei5cbi8vIEEgZmV3IGJ5dGVzIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvZGVib3VuY2UgaXMgfjMga0IgYW5kIGRlYm91bmNlIH4zMDAgQi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQgPSAxNjYpIHtcbiAgbGV0IHRpbWVvdXQ7XG4gIGZ1bmN0aW9uIGRlYm91bmNlZCguLi5hcmdzKSB7XG4gICAgY29uc3QgbGF0ZXIgPSAoKSA9PiB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgfVxuICBkZWJvdW5jZWQuY2xlYXIgPSAoKSA9PiB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB9O1xuICByZXR1cm4gZGVib3VuY2VkO1xufSIsImltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL293bmVyRG9jdW1lbnQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJXaW5kb3cobm9kZSkge1xuICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KG5vZGUpO1xuICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1widmFsdWVzXCIsIFwidW5pdFwiLCBcInN0ZXBcIl07XG4vLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4vLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG5leHBvcnQgY29uc3QgYnJlYWtwb2ludEtleXMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107XG5jb25zdCBzb3J0QnJlYWtwb2ludHNWYWx1ZXMgPSB2YWx1ZXMgPT4ge1xuICBjb25zdCBicmVha3BvaW50c0FzQXJyYXkgPSBPYmplY3Qua2V5cyh2YWx1ZXMpLm1hcChrZXkgPT4gKHtcbiAgICBrZXksXG4gICAgdmFsOiB2YWx1ZXNba2V5XVxuICB9KSkgfHwgW107XG4gIC8vIFNvcnQgaW4gYXNjZW5kaW5nIG9yZGVyXG4gIGJyZWFrcG9pbnRzQXNBcnJheS5zb3J0KChicmVha3BvaW50MSwgYnJlYWtwb2ludDIpID0+IGJyZWFrcG9pbnQxLnZhbCAtIGJyZWFrcG9pbnQyLnZhbCk7XG4gIHJldHVybiBicmVha3BvaW50c0FzQXJyYXkucmVkdWNlKChhY2MsIG9iaikgPT4ge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYWNjLCB7XG4gICAgICBbb2JqLmtleV06IG9iai52YWxcbiAgICB9KTtcbiAgfSwge30pO1xufTtcblxuLy8gS2VlcCBpbiBtaW5kIHRoYXQgQG1lZGlhIGlzIGluY2x1c2l2ZSBieSB0aGUgQ1NTIHNwZWNpZmljYXRpb24uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50cykge1xuICBjb25zdCB7XG4gICAgICAvLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbiAgICAgIC8vIEZvciBpbnN0YW5jZSB3aXRoIHRoZSBmaXJzdCBicmVha3BvaW50IHhzOiBbeHMsIHNtKS5cbiAgICAgIHZhbHVlcyA9IHtcbiAgICAgICAgeHM6IDAsXG4gICAgICAgIC8vIHBob25lXG4gICAgICAgIHNtOiA2MDAsXG4gICAgICAgIC8vIHRhYmxldFxuICAgICAgICBtZDogOTAwLFxuICAgICAgICAvLyBzbWFsbCBsYXB0b3BcbiAgICAgICAgbGc6IDEyMDAsXG4gICAgICAgIC8vIGRlc2t0b3BcbiAgICAgICAgeGw6IDE1MzYgLy8gbGFyZ2Ugc2NyZWVuXG4gICAgICB9LFxuICAgICAgdW5pdCA9ICdweCcsXG4gICAgICBzdGVwID0gNVxuICAgIH0gPSBicmVha3BvaW50cyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGJyZWFrcG9pbnRzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBzb3J0ZWRWYWx1ZXMgPSBzb3J0QnJlYWtwb2ludHNWYWx1ZXModmFsdWVzKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNvcnRlZFZhbHVlcyk7XG4gIGZ1bmN0aW9uIHVwKGtleSkge1xuICAgIGNvbnN0IHZhbHVlID0gdHlwZW9mIHZhbHVlc1trZXldID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXldIDoga2V5O1xuICAgIHJldHVybiBgQG1lZGlhIChtaW4td2lkdGg6JHt2YWx1ZX0ke3VuaXR9KWA7XG4gIH1cbiAgZnVuY3Rpb24gZG93bihrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWF4LXdpZHRoOiR7dmFsdWUgLSBzdGVwIC8gMTAwfSR7dW5pdH0pYDtcbiAgfVxuICBmdW5jdGlvbiBiZXR3ZWVuKHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihlbmQpO1xuICAgIHJldHVybiBgQG1lZGlhIChtaW4td2lkdGg6JHt0eXBlb2YgdmFsdWVzW3N0YXJ0XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNbc3RhcnRdIDogc3RhcnR9JHt1bml0fSkgYW5kIGAgKyBgKG1heC13aWR0aDokeyhlbmRJbmRleCAhPT0gLTEgJiYgdHlwZW9mIHZhbHVlc1trZXlzW2VuZEluZGV4XV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleXNbZW5kSW5kZXhdXSA6IGVuZCkgLSBzdGVwIC8gMTAwfSR7dW5pdH0pYDtcbiAgfVxuICBmdW5jdGlvbiBvbmx5KGtleSkge1xuICAgIGlmIChrZXlzLmluZGV4T2Yoa2V5KSArIDEgPCBrZXlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJldHdlZW4oa2V5LCBrZXlzW2tleXMuaW5kZXhPZihrZXkpICsgMV0pO1xuICAgIH1cbiAgICByZXR1cm4gdXAoa2V5KTtcbiAgfVxuICBmdW5jdGlvbiBub3Qoa2V5KSB7XG4gICAgLy8gaGFuZGxlIGZpcnN0IGFuZCBsYXN0IGtleSBzZXBhcmF0ZWx5LCBmb3IgYmV0dGVyIHJlYWRhYmlsaXR5XG4gICAgY29uc3Qga2V5SW5kZXggPSBrZXlzLmluZGV4T2Yoa2V5KTtcbiAgICBpZiAoa2V5SW5kZXggPT09IDApIHtcbiAgICAgIHJldHVybiB1cChrZXlzWzFdKTtcbiAgICB9XG4gICAgaWYgKGtleUluZGV4ID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBkb3duKGtleXNba2V5SW5kZXhdKTtcbiAgICB9XG4gICAgcmV0dXJuIGJldHdlZW4oa2V5LCBrZXlzW2tleXMuaW5kZXhPZihrZXkpICsgMV0pLnJlcGxhY2UoJ0BtZWRpYScsICdAbWVkaWEgbm90IGFsbCBhbmQnKTtcbiAgfVxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGtleXMsXG4gICAgdmFsdWVzOiBzb3J0ZWRWYWx1ZXMsXG4gICAgdXAsXG4gICAgZG93bixcbiAgICBiZXR3ZWVuLFxuICAgIG9ubHksXG4gICAgbm90LFxuICAgIHVuaXRcbiAgfSwgb3RoZXIpO1xufSIsImNvbnN0IHNoYXBlID0ge1xuICBib3JkZXJSYWRpdXM6IDRcbn07XG5leHBvcnQgZGVmYXVsdCBzaGFwZTsiLCIvKipcbiAqIEEgdW5pdmVyc2FsIHV0aWxpdHkgdG8gc3R5bGUgY29tcG9uZW50cyB3aXRoIG11bHRpcGxlIGNvbG9yIG1vZGVzLiBBbHdheXMgdXNlIGl0IGZyb20gdGhlIHRoZW1lIG9iamVjdC5cbiAqIEl0IHdvcmtzIHdpdGg6XG4gKiAgLSBbQmFzaWMgdGhlbWVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL2RhcmstbW9kZS8pXG4gKiAgLSBbQ1NTIHRoZW1lIHZhcmlhYmxlc10oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2V4cGVyaW1lbnRhbC1hcGkvY3NzLXRoZW1lLXZhcmlhYmxlcy9vdmVydmlldy8pXG4gKiAgLSBaZXJvLXJ1bnRpbWUgZW5naW5lXG4gKlxuICogVGlwczogVXNlIGFuIGFycmF5IG92ZXIgb2JqZWN0IHNwcmVhZCBhbmQgcGxhY2UgYHRoZW1lLmFwcGx5U3R5bGVzKClgIGxhc3QuXG4gKlxuICog4pyFIFt7IGJhY2tncm91bmQ6ICcjZTVlNWU1JyB9LCB0aGVtZS5hcHBseVN0eWxlcygnZGFyaycsIHsgYmFja2dyb3VuZDogJyMxYzFjMWMnIH0pXVxuICpcbiAqIPCfmqsgeyBiYWNrZ3JvdW5kOiAnI2U1ZTVlNScsIC4uLnRoZW1lLmFwcGx5U3R5bGVzKCdkYXJrJywgeyBiYWNrZ3JvdW5kOiAnIzFjMWMxYycgfSl9XG4gKlxuICogQGV4YW1wbGVcbiAqIDEuIHVzaW5nIHdpdGggYHN0eWxlZGA6XG4gKiBgYGBqc3hcbiAqICAgY29uc3QgQ29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKSgoeyB0aGVtZSB9KSA9PiBbXG4gKiAgICAgeyBiYWNrZ3JvdW5kOiAnI2U1ZTVlNScgfSxcbiAqICAgICB0aGVtZS5hcHBseVN0eWxlcygnZGFyaycsIHtcbiAqICAgICAgIGJhY2tncm91bmQ6ICcjMWMxYzFjJyxcbiAqICAgICAgIGNvbG9yOiAnI2ZmZicsXG4gKiAgICAgfSksXG4gKiAgIF0pO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIDIuIHVzaW5nIHdpdGggYHN4YCBwcm9wOlxuICogYGBganN4XG4gKiAgIDxCb3ggc3g9e3RoZW1lID0+IFtcbiAqICAgICB7IGJhY2tncm91bmQ6ICcjZTVlNWU1JyB9LFxuICogICAgIHRoZW1lLmFwcGx5U3R5bGVzKCdkYXJrJywge1xuICogICAgICAgIGJhY2tncm91bmQ6ICcjMWMxYzFjJyxcbiAqICAgICAgICBjb2xvcjogJyNmZmYnLFxuICogICAgICB9KSxcbiAqICAgICBdfVxuICogICAvPlxuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIDMuIHRoZW1pbmcgYSBjb21wb25lbnQ6XG4gKiBgYGBqc3hcbiAqICAgZXh0ZW5kVGhlbWUoe1xuICogICAgIGNvbXBvbmVudHM6IHtcbiAqICAgICAgIE11aUJ1dHRvbjoge1xuICogICAgICAgICBzdHlsZU92ZXJyaWRlczoge1xuICogICAgICAgICAgIHJvb3Q6ICh7IHRoZW1lIH0pID0+IFtcbiAqICAgICAgICAgICAgIHsgYmFja2dyb3VuZDogJyNlNWU1ZTUnIH0sXG4gKiAgICAgICAgICAgICB0aGVtZS5hcHBseVN0eWxlcygnZGFyaycsIHtcbiAqICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJyMxYzFjMWMnLFxuICogICAgICAgICAgICAgICBjb2xvcjogJyNmZmYnLFxuICogICAgICAgICAgICAgfSksXG4gKiAgICAgICAgICAgXSxcbiAqICAgICAgICAgfSxcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIH0pXG4gKmBgYFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHBseVN0eWxlcyhrZXksIHN0eWxlcykge1xuICAvLyBAdHMtZXhwZWN0LWVycm9yIHRoaXMgaXMgJ2FueScgdHlwZVxuICBjb25zdCB0aGVtZSA9IHRoaXM7XG4gIGlmICh0aGVtZS52YXJzICYmIHR5cGVvZiB0aGVtZS5nZXRDb2xvclNjaGVtZVNlbGVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gSWYgQ3NzVmFyc1Byb3ZpZGVyIGlzIHVzZWQgYXMgYSBwcm92aWRlcixcbiAgICAvLyByZXR1cm5zICcqIDp3aGVyZShbZGF0YS1tdWktY29sb3Itc2NoZW1lPVwibGlnaHR8ZGFya1wiXSkgJidcbiAgICBjb25zdCBzZWxlY3RvciA9IHRoZW1lLmdldENvbG9yU2NoZW1lU2VsZWN0b3Ioa2V5KS5yZXBsYWNlKC8oXFxbW15cXF1dK1xcXSkvLCAnKjp3aGVyZSgkMSknKTtcbiAgICByZXR1cm4ge1xuICAgICAgW3NlbGVjdG9yXTogc3R5bGVzXG4gICAgfTtcbiAgfVxuICBpZiAodGhlbWUucGFsZXR0ZS5tb2RlID09PSBrZXkpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG4gIHJldHVybiB7fTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJwYWxldHRlXCIsIFwic3BhY2luZ1wiLCBcInNoYXBlXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlQnJlYWtwb2ludHMgZnJvbSAnLi9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgc2hhcGUgZnJvbSAnLi9zaGFwZSc7XG5pbXBvcnQgY3JlYXRlU3BhY2luZyBmcm9tICcuL2NyZWF0ZVNwYWNpbmcnO1xuaW1wb3J0IHN0eWxlRnVuY3Rpb25TeCBmcm9tICcuLi9zdHlsZUZ1bmN0aW9uU3gvc3R5bGVGdW5jdGlvblN4JztcbmltcG9ydCBkZWZhdWx0U3hDb25maWcgZnJvbSAnLi4vc3R5bGVGdW5jdGlvblN4L2RlZmF1bHRTeENvbmZpZyc7XG5pbXBvcnQgYXBwbHlTdHlsZXMgZnJvbSAnLi9hcHBseVN0eWxlcyc7XG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzSW5wdXQgPSB7fSxcbiAgICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgICAgc3BhY2luZzogc3BhY2luZ0lucHV0LFxuICAgICAgc2hhcGU6IHNoYXBlSW5wdXQgPSB7fVxuICAgIH0gPSBvcHRpb25zLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgYnJlYWtwb2ludHMgPSBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50c0lucHV0KTtcbiAgY29uc3Qgc3BhY2luZyA9IGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0KTtcbiAgbGV0IG11aVRoZW1lID0gZGVlcG1lcmdlKHtcbiAgICBicmVha3BvaW50cyxcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIGNvbXBvbmVudHM6IHt9LFxuICAgIC8vIEluamVjdCBjb21wb25lbnQgZGVmaW5pdGlvbnMuXG4gICAgcGFsZXR0ZTogX2V4dGVuZHMoe1xuICAgICAgbW9kZTogJ2xpZ2h0J1xuICAgIH0sIHBhbGV0dGVJbnB1dCksXG4gICAgc3BhY2luZyxcbiAgICBzaGFwZTogX2V4dGVuZHMoe30sIHNoYXBlLCBzaGFwZUlucHV0KVxuICB9LCBvdGhlcik7XG4gIG11aVRoZW1lLmFwcGx5U3R5bGVzID0gYXBwbHlTdHlsZXM7XG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoKGFjYywgYXJndW1lbnQpID0+IGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KSwgbXVpVGhlbWUpO1xuICBtdWlUaGVtZS51bnN0YWJsZV9zeENvbmZpZyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0U3hDb25maWcsIG90aGVyID09IG51bGwgPyB2b2lkIDAgOiBvdGhlci51bnN0YWJsZV9zeENvbmZpZyk7XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4ID0gZnVuY3Rpb24gc3gocHJvcHMpIHtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KHtcbiAgICAgIHN4OiBwcm9wcyxcbiAgICAgIHRoZW1lOiB0aGlzXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRoZW1lOyIsImltcG9ydCB7IGNyZWF0ZVVuYXJ5U3BhY2luZyB9IGZyb20gJy4uL3NwYWNpbmcnO1xuXG4vLyBUaGUgZGlmZmVyZW50IHNpZ25hdHVyZXMgaW1wbHkgZGlmZmVyZW50IG1lYW5pbmcgZm9yIHRoZWlyIGFyZ3VtZW50cyB0aGF0IGNhbid0IGJlIGV4cHJlc3NlZCBzdHJ1Y3R1cmFsbHkuXG4vLyBXZSBleHByZXNzIHRoZSBkaWZmZXJlbmNlIHdpdGggdmFyaWFibGUgbmFtZXMuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0ID0gOCkge1xuICAvLyBBbHJlYWR5IHRyYW5zZm9ybWVkLlxuICBpZiAoc3BhY2luZ0lucHV0Lm11aSkge1xuICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gIH1cblxuICAvLyBNYXRlcmlhbCBEZXNpZ24gbGF5b3V0cyBhcmUgdmlzdWFsbHkgYmFsYW5jZWQuIE1vc3QgbWVhc3VyZW1lbnRzIGFsaWduIHRvIGFuIDhkcCBncmlkLCB3aGljaCBhbGlnbnMgYm90aCBzcGFjaW5nIGFuZCB0aGUgb3ZlcmFsbCBsYXlvdXQuXG4gIC8vIFNtYWxsZXIgY29tcG9uZW50cywgc3VjaCBhcyBpY29ucywgY2FuIGFsaWduIHRvIGEgNGRwIGdyaWQuXG4gIC8vIGh0dHBzOi8vbTIubWF0ZXJpYWwuaW8vZGVzaWduL2xheW91dC91bmRlcnN0YW5kaW5nLWxheW91dC5odG1sXG4gIGNvbnN0IHRyYW5zZm9ybSA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh7XG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0XG4gIH0pO1xuICBjb25zdCBzcGFjaW5nID0gKC4uLmFyZ3NJbnB1dCkgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIShhcmdzSW5wdXQubGVuZ3RoIDw9IDQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVG9vIG1hbnkgYXJndW1lbnRzIHByb3ZpZGVkLCBleHBlY3RlZCBiZXR3ZWVuIDAgYW5kIDQsIGdvdCAke2FyZ3NJbnB1dC5sZW5ndGh9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFyZ3MgPSBhcmdzSW5wdXQubGVuZ3RoID09PSAwID8gWzFdIDogYXJnc0lucHV0O1xuICAgIHJldHVybiBhcmdzLm1hcChhcmd1bWVudCA9PiB7XG4gICAgICBjb25zdCBvdXRwdXQgPSB0cmFuc2Zvcm0oYXJndW1lbnQpO1xuICAgICAgcmV0dXJuIHR5cGVvZiBvdXRwdXQgPT09ICdudW1iZXInID8gYCR7b3V0cHV0fXB4YCA6IG91dHB1dDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH07XG4gIHNwYWNpbmcubXVpID0gdHJ1ZTtcbiAgcmV0dXJuIHNwYWNpbmc7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgZ2V0VGhlbWVQcm9wcyBmcm9tICcuL2dldFRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZSxcbiAgZGVmYXVsdFRoZW1lLFxuICB0aGVtZUlkXG59KSB7XG4gIGxldCB0aGVtZSA9IHVzZVRoZW1lKGRlZmF1bHRUaGVtZSk7XG4gIGlmICh0aGVtZUlkKSB7XG4gICAgdGhlbWUgPSB0aGVtZVt0aGVtZUlkXSB8fCB0aGVtZTtcbiAgfVxuICBjb25zdCBtZXJnZWRQcm9wcyA9IGdldFRoZW1lUHJvcHMoe1xuICAgIHRoZW1lLFxuICAgIG5hbWUsXG4gICAgcHJvcHNcbiAgfSk7XG4gIHJldHVybiBtZXJnZWRQcm9wcztcbn0iLCJpbXBvcnQgeyBpbnRlcm5hbF9yZXNvbHZlUHJvcHMgYXMgcmVzb2x2ZVByb3BzIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaGVtZVByb3BzKHBhcmFtcykge1xuICBjb25zdCB7XG4gICAgdGhlbWUsXG4gICAgbmFtZSxcbiAgICBwcm9wc1xuICB9ID0gcGFyYW1zO1xuICBpZiAoIXRoZW1lIHx8ICF0aGVtZS5jb21wb25lbnRzIHx8ICF0aGVtZS5jb21wb25lbnRzW25hbWVdIHx8ICF0aGVtZS5jb21wb25lbnRzW25hbWVdLmRlZmF1bHRQcm9wcykge1xuICAgIHJldHVybiBwcm9wcztcbiAgfVxuICByZXR1cm4gcmVzb2x2ZVByb3BzKHRoZW1lLmNvbXBvbmVudHNbbmFtZV0uZGVmYXVsdFByb3BzLCBwcm9wcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFV0aWxpdHlDbGFzcywgY2xhc3NlcyA9IHVuZGVmaW5lZCkge1xuICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgT2JqZWN0LmtleXMoc2xvdHMpLmZvckVhY2goXG4gIC8vIGBPYmplY3Qua2V5cyhzbG90cylgIGNhbid0IGJlIHdpZGVyIHRoYW4gYFRgIGJlY2F1c2Ugd2UgaW5mZXIgYFRgIGZyb20gYHNsb3RzYC5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvcHVsbC8xMjI1MyNpc3N1ZWNvbW1lbnQtMjYzMTMyMjA4XG4gIHNsb3QgPT4ge1xuICAgIG91dHB1dFtzbG90XSA9IHNsb3RzW3Nsb3RdLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgY29uc3QgdXRpbGl0eUNsYXNzID0gZ2V0VXRpbGl0eUNsYXNzKGtleSk7XG4gICAgICAgIGlmICh1dGlsaXR5Q2xhc3MgIT09ICcnKSB7XG4gICAgICAgICAgYWNjLnB1c2godXRpbGl0eUNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xhc3NlcyAmJiBjbGFzc2VzW2tleV0pIHtcbiAgICAgICAgICBhY2MucHVzaChjbGFzc2VzW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKS5qb2luKCcgJyk7XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufSIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKGNvbXBvbmVudE5hbWUsIHNsb3RzLCBnbG9iYWxTdGF0ZVByZWZpeCA9ICdNdWknKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBzbG90cy5mb3JFYWNoKHNsb3QgPT4ge1xuICAgIHJlc3VsdFtzbG90XSA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QsIGdsb2JhbFN0YXRlUHJlZml4KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG4vKipcbiAqIEFkZCBrZXlzLCB2YWx1ZXMgb2YgYGRlZmF1bHRQcm9wc2AgdGhhdCBkb2VzIG5vdCBleGlzdCBpbiBgcHJvcHNgXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmYXVsdFByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEByZXR1cm5zIHtvYmplY3R9IHJlc29sdmVkIHByb3BzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVQcm9wcyhkZWZhdWx0UHJvcHMsIHByb3BzKSB7XG4gIGNvbnN0IG91dHB1dCA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG4gIE9iamVjdC5rZXlzKGRlZmF1bHRQcm9wcykuZm9yRWFjaChwcm9wTmFtZSA9PiB7XG4gICAgaWYgKHByb3BOYW1lLnRvU3RyaW5nKCkubWF0Y2goL14oY29tcG9uZW50c3xzbG90cykkLykpIHtcbiAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdFByb3BzW3Byb3BOYW1lXSwgb3V0cHV0W3Byb3BOYW1lXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wTmFtZS50b1N0cmluZygpLm1hdGNoKC9eKGNvbXBvbmVudHNQcm9wc3xzbG90UHJvcHMpJC8pKSB7XG4gICAgICBjb25zdCBkZWZhdWx0U2xvdFByb3BzID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXSB8fCB7fTtcbiAgICAgIGNvbnN0IHNsb3RQcm9wcyA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSB7fTtcbiAgICAgIGlmICghc2xvdFByb3BzIHx8ICFPYmplY3Qua2V5cyhzbG90UHJvcHMpKSB7XG4gICAgICAgIC8vIFJlZHVjZSB0aGUgaXRlcmF0aW9uIGlmIHRoZSBzbG90IHByb3BzIGlzIGVtcHR5XG4gICAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBkZWZhdWx0U2xvdFByb3BzO1xuICAgICAgfSBlbHNlIGlmICghZGVmYXVsdFNsb3RQcm9wcyB8fCAhT2JqZWN0LmtleXMoZGVmYXVsdFNsb3RQcm9wcykpIHtcbiAgICAgICAgLy8gUmVkdWNlIHRoZSBpdGVyYXRpb24gaWYgdGhlIGRlZmF1bHQgc2xvdCBwcm9wcyBpcyBlbXB0eVxuICAgICAgICBvdXRwdXRbcHJvcE5hbWVdID0gc2xvdFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IF9leHRlbmRzKHt9LCBzbG90UHJvcHMpO1xuICAgICAgICBPYmplY3Qua2V5cyhkZWZhdWx0U2xvdFByb3BzKS5mb3JFYWNoKHNsb3RQcm9wTmFtZSA9PiB7XG4gICAgICAgICAgb3V0cHV0W3Byb3BOYW1lXVtzbG90UHJvcE5hbWVdID0gcmVzb2x2ZVByb3BzKGRlZmF1bHRTbG90UHJvcHNbc2xvdFByb3BOYW1lXSwgc2xvdFByb3BzW3Nsb3RQcm9wTmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG91dHB1dFtwcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn0iLCIvKipcbiAqIFNhZmUgY2hhaW5lZCBmdW5jdGlvbi5cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKC4uLmZ1bmNzKSB7XG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoKGFjYywgZnVuYykgPT4ge1xuICAgIGlmIChmdW5jID09IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgYWNjLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9LCAoKSA9PiB7fSk7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5sZXQgZ2xvYmFsSWQgPSAwO1xuZnVuY3Rpb24gdXNlR2xvYmFsSWQoaWRPdmVycmlkZSkge1xuICBjb25zdCBbZGVmYXVsdElkLCBzZXREZWZhdWx0SWRdID0gUmVhY3QudXNlU3RhdGUoaWRPdmVycmlkZSk7XG4gIGNvbnN0IGlkID0gaWRPdmVycmlkZSB8fCBkZWZhdWx0SWQ7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRlZmF1bHRJZCA9PSBudWxsKSB7XG4gICAgICAvLyBGYWxsYmFjayB0byB0aGlzIGRlZmF1bHQgaWQgd2hlbiBwb3NzaWJsZS5cbiAgICAgIC8vIFVzZSB0aGUgaW5jcmVtZW50aW5nIHZhbHVlIGZvciBjbGllbnQtc2lkZSByZW5kZXJpbmcgb25seS5cbiAgICAgIC8vIFdlIGNhbid0IHVzZSBpdCBzZXJ2ZXItc2lkZS5cbiAgICAgIC8vIElmIHlvdSB3YW50IHRvIHVzZSByYW5kb20gdmFsdWVzIHBsZWFzZSBjb25zaWRlciB0aGUgQmlydGhkYXkgUHJvYmxlbTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmlydGhkYXlfcHJvYmxlbVxuICAgICAgZ2xvYmFsSWQgKz0gMTtcbiAgICAgIHNldERlZmF1bHRJZChgbXVpLSR7Z2xvYmFsSWR9YCk7XG4gICAgfVxuICB9LCBbZGVmYXVsdElkXSk7XG4gIHJldHVybiBpZDtcbn1cblxuLy8gZG93bnN0cmVhbSBidW5kbGVycyBtYXkgcmVtb3ZlIHVubmVjZXNzYXJ5IGNvbmNhdGVuYXRpb24sIGJ1dCB3b24ndCByZW1vdmUgdG9TdHJpbmcgY2FsbCAtLSBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrL2lzc3Vlcy8xNDgxNFxuY29uc3QgbWF5YmVSZWFjdFVzZUlkID0gUmVhY3RbJ3VzZUlkJy50b1N0cmluZygpXTtcbi8qKlxuICpcbiAqIEBleGFtcGxlIDxkaXYgaWQ9e3VzZUlkKCl9IC8+XG4gKiBAcGFyYW0gaWRPdmVycmlkZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlSWQoaWRPdmVycmlkZSkge1xuICBpZiAobWF5YmVSZWFjdFVzZUlkICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCByZWFjdElkID0gbWF5YmVSZWFjdFVzZUlkKCk7XG4gICAgcmV0dXJuIGlkT3ZlcnJpZGUgIT0gbnVsbCA/IGlkT3ZlcnJpZGUgOiByZWFjdElkO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcyAtLSBgUmVhY3QudXNlSWRgIGlzIGludmFyaWFudCBhdCBydW50aW1lLlxuICByZXR1cm4gdXNlR2xvYmFsSWQoaWRPdmVycmlkZSk7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBvYmogPT09IHVuZGVmaW5lZCB8fCBvYmogPT09IG51bGwgfHwgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHbG9iYWxTdHlsZXMocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIHN0eWxlcyxcbiAgICBkZWZhdWx0VGhlbWUgPSB7fVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGdsb2JhbFN0eWxlcyA9IHR5cGVvZiBzdHlsZXMgPT09ICdmdW5jdGlvbicgPyB0aGVtZUlucHV0ID0+IHN0eWxlcyhpc0VtcHR5KHRoZW1lSW5wdXQpID8gZGVmYXVsdFRoZW1lIDogdGhlbWVJbnB1dCkgOiBzdHlsZXM7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChHbG9iYWwsIHtcbiAgICBzdHlsZXM6IGdsb2JhbFN0eWxlc1xuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdsb2JhbFN0eWxlcy5wcm9wVHlwZXMgPSB7XG4gIGRlZmF1bHRUaGVtZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgc3R5bGVzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXksIFByb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSlcbn0gOiB2b2lkIDA7IiwiZnVuY3Rpb24gY2xhbXAodmFsLCBtaW4gPSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUiwgbWF4ID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4odmFsLCBtYXgpKTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNsYW1wOyIsImltcG9ydCBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGZyb20gXCJAbXVpL3V0aWxzL2Zvcm1hdE11aUVycm9yTWVzc2FnZVwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIHdob3NlIHZhbHVlIGlzIGxpbWl0ZWQgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBjbGFtcGVkXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIFRoZSBsb3dlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IFRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIG51bWJlciBpbiB0aGUgcmFuZ2UgW21pbiwgbWF4XVxuICovXG5mdW5jdGlvbiBjbGFtcFdyYXBwZXIodmFsdWUsIG1pbiA9IDAsIG1heCA9IDEpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodmFsdWUgPCBtaW4gfHwgdmFsdWUgPiBtYXgpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVGhlIHZhbHVlIHByb3ZpZGVkICR7dmFsdWV9IGlzIG91dCBvZiByYW5nZSBbJHttaW59LCAke21heH1dLmApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2xhbXAodmFsdWUsIG1pbiwgbWF4KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIZXggY29sb3IsIGkuZS4gI25ubiBvciAjbm5ubm5uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGNvbG9yLnNsaWNlKDEpO1xuICBjb25zdCByZSA9IG5ldyBSZWdFeHAoYC57MSwke2NvbG9yLmxlbmd0aCA+PSA2ID8gMiA6IDF9fWAsICdnJyk7XG4gIGxldCBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG4gIGlmIChjb2xvcnMgJiYgY29sb3JzWzBdLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbG9ycyA9IGNvbG9ycy5tYXAobiA9PiBuICsgbik7XG4gIH1cbiAgcmV0dXJuIGNvbG9ycyA/IGByZ2Ike2NvbG9ycy5sZW5ndGggPT09IDQgPyAnYScgOiAnJ30oJHtjb2xvcnMubWFwKChuLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiBpbmRleCA8IDMgPyBwYXJzZUludChuLCAxNikgOiBNYXRoLnJvdW5kKHBhcnNlSW50KG4sIDE2KSAvIDI1NSAqIDEwMDApIC8gMTAwMDtcbiAgfSkuam9pbignLCAnKX0pYCA6ICcnO1xufVxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIGNvbnN0IGhleCA9IGludC50b1N0cmluZygxNik7XG4gIHJldHVybiBoZXgubGVuZ3RoID09PSAxID8gYDAke2hleH1gIDogaGV4O1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yLlxuICpcbiAqIE5vdGU6IERvZXMgbm90IHN1cHBvcnQgcmdiICUgdmFsdWVzLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHJldHVybnMge29iamVjdH0gLSBBIE1VSSBjb2xvciBvYmplY3Q6IHt0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci50eXBlKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG4gIGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHJldHVybiBkZWNvbXBvc2VDb2xvcihoZXhUb1JnYihjb2xvcikpO1xuICB9XG4gIGNvbnN0IG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgY29uc3QgdHlwZSA9IGNvbG9yLnN1YnN0cmluZygwLCBtYXJrZXIpO1xuICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYScsICdjb2xvciddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFVuc3VwcG9ydGVkIFxcYCR7Y29sb3J9XFxgIGNvbG9yLlxuVGhlIGZvbGxvd2luZyBmb3JtYXRzIGFyZSBzdXBwb3J0ZWQ6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKCkuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoOSwgY29sb3IpKTtcbiAgfVxuICBsZXQgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpO1xuICBsZXQgY29sb3JTcGFjZTtcbiAgaWYgKHR5cGUgPT09ICdjb2xvcicpIHtcbiAgICB2YWx1ZXMgPSB2YWx1ZXMuc3BsaXQoJyAnKTtcbiAgICBjb2xvclNwYWNlID0gdmFsdWVzLnNoaWZ0KCk7XG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDQgJiYgdmFsdWVzWzNdLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgICB2YWx1ZXNbM10gPSB2YWx1ZXNbM10uc2xpY2UoMSk7XG4gICAgfVxuICAgIGlmIChbJ3NyZ2InLCAnZGlzcGxheS1wMycsICdhOTgtcmdiJywgJ3Byb3Bob3RvLXJnYicsICdyZWMtMjAyMCddLmluZGV4T2YoY29sb3JTcGFjZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogdW5zdXBwb3J0ZWQgXFxgJHtjb2xvclNwYWNlfVxcYCBjb2xvciBzcGFjZS5cblRoZSBmb2xsb3dpbmcgY29sb3Igc3BhY2VzIGFyZSBzdXBwb3J0ZWQ6IHNyZ2IsIGRpc3BsYXktcDMsIGE5OC1yZ2IsIHByb3Bob3RvLXJnYiwgcmVjLTIwMjAuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTAsIGNvbG9yU3BhY2UpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KCcsJyk7XG4gIH1cbiAgdmFsdWVzID0gdmFsdWVzLm1hcCh2YWx1ZSA9PiBwYXJzZUZsb2F0KHZhbHVlKSk7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXMsXG4gICAgY29sb3JTcGFjZVxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBjaGFubmVsIGNyZWF0ZWQgZnJvbSB0aGUgaW5wdXQgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHJldHVybnMge3N0cmluZ30gLSBUaGUgY2hhbm5lbCBmb3IgdGhlIGNvbG9yLCB0aGF0IGNhbiBiZSB1c2VkIGluIHJnYmEgb3IgaHNsYSBjb2xvcnNcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbG9yQ2hhbm5lbCA9IGNvbG9yID0+IHtcbiAgY29uc3QgZGVjb21wb3NlZENvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICByZXR1cm4gZGVjb21wb3NlZENvbG9yLnZhbHVlcy5zbGljZSgwLCAzKS5tYXAoKHZhbCwgaWR4KSA9PiBkZWNvbXBvc2VkQ29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEgJiYgaWR4ICE9PSAwID8gYCR7dmFsfSVgIDogdmFsKS5qb2luKCcgJyk7XG59O1xuZXhwb3J0IGNvbnN0IHByaXZhdGVfc2FmZUNvbG9yQ2hhbm5lbCA9IChjb2xvciwgd2FybmluZykgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBjb2xvckNoYW5uZWwoY29sb3IpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICogQHBhcmFtIHtvYmplY3R9IGNvbG9yIC0gRGVjb21wb3NlZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yLnR5cGUgLSBPbmUgb2Y6ICdyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYScsICdjb2xvcidcbiAqIEBwYXJhbSB7YXJyYXl9IGNvbG9yLnZhbHVlcyAtIFtuLG4sbl0gb3IgW24sbixuLG5dXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIGNvbG9yU3BhY2VcbiAgfSA9IGNvbG9yO1xuICBsZXQge1xuICAgIHZhbHVlc1xuICB9ID0gY29sb3I7XG4gIGlmICh0eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIC8vIE9ubHkgY29udmVydCB0aGUgZmlyc3QgMyB2YWx1ZXMgdG8gaW50IChpLmUuIG5vdCBhbHBoYSlcbiAgICB2YWx1ZXMgPSB2YWx1ZXMubWFwKChuLCBpKSA9PiBpIDwgMyA/IHBhcnNlSW50KG4sIDEwKSA6IG4pO1xuICB9IGVsc2UgaWYgKHR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgdmFsdWVzWzFdID0gYCR7dmFsdWVzWzFdfSVgO1xuICAgIHZhbHVlc1syXSA9IGAke3ZhbHVlc1syXX0lYDtcbiAgfVxuICBpZiAodHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIHZhbHVlcyA9IGAke2NvbG9yU3BhY2V9ICR7dmFsdWVzLmpvaW4oJyAnKX1gO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlcyA9IGAke3ZhbHVlcy5qb2luKCcsICcpfWA7XG4gIH1cbiAgcmV0dXJuIGAke3R5cGV9KCR7dmFsdWVzfSlgO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgcmdiIGZvcm1hdCB0byBDU1MgaGV4IGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIFJHQiBjb2xvciwgaS5lLiByZ2IobiwgbiwgbilcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmcsIGkuZS4gI25ubm5ublxuICovXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG4gIGNvbnN0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgcmV0dXJuIGAjJHt2YWx1ZXMubWFwKChuLCBpKSA9PiBpbnRUb0hleChpID09PSAzID8gTWF0aC5yb3VuZCgyNTUgKiBuKSA6IG4pKS5qb2luKCcnKX1gO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoc2wgZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIU0wgY29sb3IgdmFsdWVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZ2IgY29sb3IgdmFsdWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoc2xUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29uc3Qge1xuICAgIHZhbHVlc1xuICB9ID0gY29sb3I7XG4gIGNvbnN0IGggPSB2YWx1ZXNbMF07XG4gIGNvbnN0IHMgPSB2YWx1ZXNbMV0gLyAxMDA7XG4gIGNvbnN0IGwgPSB2YWx1ZXNbMl0gLyAxMDA7XG4gIGNvbnN0IGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyAzMCkgJSAxMikgPT4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIGxldCB0eXBlID0gJ3JnYic7XG4gIGNvbnN0IHJnYiA9IFtNYXRoLnJvdW5kKGYoMCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoOCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoNCkgKiAyNTUpXTtcbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdoc2xhJykge1xuICAgIHR5cGUgKz0gJ2EnO1xuICAgIHJnYi5wdXNoKHZhbHVlc1szXSk7XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKHtcbiAgICB0eXBlLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufVxuLyoqXG4gKiBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiBhbnkgcG9pbnQgaW4gYSBjb2xvciBzcGFjZSxcbiAqIG5vcm1hbGl6ZWQgdG8gMCBmb3IgZGFya2VzdCBibGFjayBhbmQgMSBmb3IgbGlnaHRlc3Qgd2hpdGUuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEx1bWluYW5jZShjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgbGV0IHJnYiA9IGNvbG9yLnR5cGUgPT09ICdoc2wnIHx8IGNvbG9yLnR5cGUgPT09ICdoc2xhJyA/IGRlY29tcG9zZUNvbG9yKGhzbFRvUmdiKGNvbG9yKSkudmFsdWVzIDogY29sb3IudmFsdWVzO1xuICByZ2IgPSByZ2IubWFwKHZhbCA9PiB7XG4gICAgaWYgKGNvbG9yLnR5cGUgIT09ICdjb2xvcicpIHtcbiAgICAgIHZhbCAvPSAyNTU7IC8vIG5vcm1hbGl6ZWRcbiAgICB9XG4gICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiAoKHZhbCArIDAuMDU1KSAvIDEuMDU1KSAqKiAyLjQ7XG4gIH0pO1xuXG4gIC8vIFRydW5jYXRlIGF0IDMgZGlnaXRzXG4gIHJldHVybiBOdW1iZXIoKDAuMjEyNiAqIHJnYlswXSArIDAuNzE1MiAqIHJnYlsxXSArIDAuMDcyMiAqIHJnYlsyXSkudG9GaXhlZCgzKSk7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9yZWdyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gQSBjb250cmFzdCByYXRpbyB2YWx1ZSBpbiB0aGUgcmFuZ2UgMCAtIDIxLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIGNvbnN0IGx1bUEgPSBnZXRMdW1pbmFuY2UoZm9yZWdyb3VuZCk7XG4gIGNvbnN0IGx1bUIgPSBnZXRMdW1pbmFuY2UoYmFja2dyb3VuZCk7XG4gIHJldHVybiAoTWF0aC5tYXgobHVtQSwgbHVtQikgKyAwLjA1KSAvIChNYXRoLm1pbihsdW1BLCBsdW1CKSArIDAuMDUpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB2YWx1ZSB0byBzZXQgdGhlIGFscGhhIGNoYW5uZWwgdG8gaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxwaGEoY29sb3IsIHZhbHVlKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YWx1ZSA9IGNsYW1wV3JhcHBlcih2YWx1ZSk7XG4gIGlmIChjb2xvci50eXBlID09PSAncmdiJyB8fCBjb2xvci50eXBlID09PSAnaHNsJykge1xuICAgIGNvbG9yLnR5cGUgKz0gJ2EnO1xuICB9XG4gIGlmIChjb2xvci50eXBlID09PSAnY29sb3InKSB7XG4gICAgY29sb3IudmFsdWVzWzNdID0gYC8ke3ZhbHVlfWA7XG4gIH0gZWxzZSB7XG4gICAgY29sb3IudmFsdWVzWzNdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlX3NhZmVBbHBoYShjb2xvciwgdmFsdWUsIHdhcm5pbmcpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYWxwaGEoY29sb3IsIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufVxuXG4vKipcbiAqIERhcmtlbnMgYSBjb2xvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcFdyYXBwZXIoY29lZmZpY2llbnQpO1xuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xIHx8IGNvbG9yLnR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlX3NhZmVEYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50LCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG5cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXBXcmFwcGVyKGNvZWZmaWNpZW50KTtcbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICs9ICgxMDAgLSBjb2xvci52YWx1ZXNbMl0pICogY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgyNTUgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgxIC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByaXZhdGVfc2FmZUxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50LCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufVxuXG4vKipcbiAqIERhcmtlbiBvciBsaWdodGVuIGEgY29sb3IsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudD0wLjE1IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50ID0gMC4xNSkge1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByaXZhdGVfc2FmZUVtcGhhc2l6ZShjb2xvciwgY29lZmZpY2llbnQsIHdhcm5pbmcpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJpdmF0ZV9zYWZlRW1waGFzaXplKGNvbG9yLCBjb2VmZmljaWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9